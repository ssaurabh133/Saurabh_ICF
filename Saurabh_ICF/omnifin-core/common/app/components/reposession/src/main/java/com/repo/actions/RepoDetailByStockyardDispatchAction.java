/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.repo.actions;

import java.util.ArrayList;
import java.util.Properties;

import javax.naming.InitialContext;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.business.repoTransactionBussiness.RepoTransactionBusinessSessionBeanRemote;
import com.connect.CommonFunction;
import com.connect.LookUpInstanceFactory;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.repo.vo.RepoDetailStockyardVo;

public class RepoDetailByStockyardDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(RepoDetailByStockyardDispatchAction.class.getName());
	
	
	public ActionForward searchRepoDetailByStockyard(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession session=request.getSession(false);
		ServletContext context = getServlet().getServletContext();
		logger.info(" ## In searchRepoDetailByStockyard() : .........");
		
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String branchId=userobj.getBranchId();
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		String userId=null;
		String bDate=null;
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
		}
		
		RepoDetailStockyardVo vo = new RepoDetailStockyardVo(); //change
        
		DynaValidatorForm dyanForm= (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, dyanForm);
		

		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		vo.setBranchId(branchId);
	
		/*
		Properties props = new Properties();
		props.load(request.getSession().getServletContext().getResourceAsStream("/WEB-INF/jndi.properties"));   
        InitialContext ic = new InitialContext(props);
        String applName=props.getProperty("enterprise.application.name");
        String remoteBean = props.getProperty("repo.transaction.business.session.bean.remote");
        logger.info("remoteBean : "+remoteBean);
        logger.info("applName : "+applName);
        String remoteBeanName=CommonFunction.checkNull(applName)+CommonFunction.checkNull(remoteBean);
        logger.info("remoteBeanName: "+remoteBeanName);
        RepoTransactionBusinessSessionBeanRemote bp=(RepoTransactionBusinessSessionBeanRemote)ic.lookup(remoteBeanName);
        */
		
		RepoTransactionBusinessSessionBeanRemote bp = (RepoTransactionBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(RepoTransactionBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
		
        ArrayList list=new ArrayList();
       
        
		logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
		
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));
		
		vo.setCurrentPageLink(currentPageLink);
		//vo1.setCurrentPageLink(currentPageLink);
		
		//change from here
		list= bp.searchRepoDetailByStockyard(vo);

	    logger.info("In searchRepoDetailByStockyard....list"+list.size());
		
	    request.setAttribute("list", list);
		
		logger.info("list.isEmpty(): "+list.isEmpty());
		request.setAttribute("list",list);
		if(CommonFunction.checkNull(request.getAttribute("flag")).toString().equalsIgnoreCase("yes")){
			request.setAttribute("sms","No");
		}
		
		//return mapping.getInputForward();
	    return mapping.findForward("success");


	}
	
	
	public ActionForward updateRepoDetailByStockyard(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse resopnse) throws Exception{
			ServletContext context = getServlet().getServletContext();
			//HttpSession session=request.getSession(false);
			HttpSession session = request.getSession();
			boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			String strFlag="";
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
			String userId="";
			String bDate="";
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bDate=userobj.getBusinessdate();
			}
	
		DynaValidatorForm dynaForm= (DynaValidatorForm)form;
		RepoDetailStockyardVo vo = new RepoDetailStockyardVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, dynaForm);
		

		vo.setMakerId(CommonFunction.checkNull(userId));
		vo.setMakerDate(CommonFunction.checkNull(bDate));
		
		/*		
		Properties props = new Properties();
		props.load(request.getSession().getServletContext().getResourceAsStream("/WEB-INF/jndi.properties"));   
        InitialContext ic = new InitialContext(props);
        String applName=props.getProperty("enterprise.application.name");
        String remoteBean = props.getProperty("repo.transaction.business.session.bean.remote");
        logger.info("remoteBean : "+remoteBean);
        logger.info("applName : "+applName);
        String remoteBeanName=CommonFunction.checkNull(applName)+CommonFunction.checkNull(remoteBean);
        logger.info("remoteBeanName: "+remoteBeanName);
        RepoTransactionBusinessSessionBeanRemote bp=(RepoTransactionBusinessSessionBeanRemote)ic.lookup(remoteBeanName);
		*/
		
		RepoTransactionBusinessSessionBeanRemote bp = (RepoTransactionBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(RepoTransactionBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
		
		String sms="";
		 String assetCheckList  = request.getParameter("assetCheckList"); 			
	        String[] checkList= assetCheckList.split("\\|"); 
	        
	        String checkListStatus  = request.getParameter("checkListStatus"); 			
	        String[] checkListStatusList= checkListStatus.split("\\|"); 
	        
	        String checkListRemarks  = request.getParameter("checkListRemarks"); 			
	        String[] checkListRemarksList= checkListRemarks.split("\\|");
		
		logger.info("## In updateRepoDetailByStockyard(): Before calling insertRepoDetailByStockyard () :");
	
		boolean status = bp.insertRepoDetailByStockyard(vo,checkList,checkListStatusList,checkListRemarksList);
		logger.info("Inside Country Master Action.....displaying status...."+status);
		
		if(status){
		
			request.setAttribute("repoId",CommonFunction.checkNull(vo.getRepoId()));	
			
			logger.info("## In saveRepoDetailsByAgency() : repoId : ==>>"+request.getAttribute("repoId"));
			
			if(CommonFunction.checkNull(vo.getUpdateForwardFlag()).equalsIgnoreCase("U"))
			{
				request.setAttribute("sms","S");
			}
			else if(CommonFunction.checkNull(vo.getUpdateForwardFlag()).equalsIgnoreCase("F"))
			{
				request.setAttribute("sms","F");
			}
		
		}
		else{
			sms="E";
			request.setAttribute("sms",sms);
			request.setAttribute("save", "save");
		}
		logger.info("status"+status);
		return mapping.getInputForward();
	}
	
	
	public ActionForward openEditRepoDetailByStockyard(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception { 
		ServletContext context = getServlet().getServletContext();
		RepoDetailStockyardVo vo=new RepoDetailStockyardVo(); 
						logger.info("In openEditRepoDetailByStockyard");
						
						HttpSession session = request.getSession();
						
						UserObject userobj=(UserObject)session.getAttribute("userobject");
						Object sessionId = session.getAttribute("sessionID");
						//for check User session start
						String strFlag="";
						if(sessionId!=null)
						{
							strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
						}
						
						logger.info("strFlag .............. "+strFlag);
						if(!strFlag.equalsIgnoreCase(""))
						{
							if(strFlag.equalsIgnoreCase("sameUserSession"))
							{
								context.removeAttribute("msg");
								context.removeAttribute("msg1");
							}
							else if(strFlag.equalsIgnoreCase("BODCheck"))
							{
								context.setAttribute("msg", "B");
							}
							return mapping.findForward("logout");
						}
						
						vo.setRepoId(request.getParameter("repoId"));
						logger.info("In openEditRepoDetailByStockyard---status---- by getpara-"+request.getParameter("repoId"));  
						logger.info("In openEditRepoDetailByStockyard---status---- by getpara by vo-"+vo.getRepoId());
						
						/*						
						Properties props = new Properties();
						props.load(request.getSession().getServletContext().getResourceAsStream("/WEB-INF/jndi.properties"));   
				        InitialContext ic = new InitialContext(props);
				        String applName=props.getProperty("enterprise.application.name");
				        String remoteBean = props.getProperty("repo.transaction.business.session.bean.remote");
				        logger.info("remoteBean : "+remoteBean);
				        logger.info("applName : "+applName);
				        String remoteBeanName=CommonFunction.checkNull(applName)+CommonFunction.checkNull(remoteBean);
				        logger.info("remoteBeanName: "+remoteBeanName);
				        RepoTransactionBusinessSessionBeanRemote bp=(RepoTransactionBusinessSessionBeanRemote)ic.lookup(remoteBeanName);
						*/
						
						RepoTransactionBusinessSessionBeanRemote bp = (RepoTransactionBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(RepoTransactionBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
						
						ArrayList<RepoDetailStockyardVo> list = bp.openEditRepoDetailByStockyard(vo);
						logger.info("In openEditRepoDetailByStockyard RepoDetailStockyardVo list"+list.size());
						
					
						ArrayList<RepoDetailStockyardVo> checkList = bp.getCheckListForStockyard(vo);
						
					
						//session.setAttribute("status", vo.getRecStatus());
						request.setAttribute("editVal", "editVal");
						request.setAttribute("repoId", vo.getRepoId());
						request.setAttribute("loanId", vo.getLoanId());
						request.setAttribute("list", list);
						request.setAttribute("checkList", checkList);
						
					   return mapping.findForward("edit");	
		}
	
	
	
}