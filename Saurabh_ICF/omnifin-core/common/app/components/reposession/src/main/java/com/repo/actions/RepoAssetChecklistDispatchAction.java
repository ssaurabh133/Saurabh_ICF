/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.repo.actions;

import java.util.ArrayList;
import java.util.Properties;

import javax.naming.InitialContext;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.business.legalMasterBussiness.LegalMasterBusinessSessionBeanRemote;
import com.business.repoMasterBussiness.RepoMasterBusinessSessionBeanRemote;
import com.connect.CommonFunction;
import com.connect.LookUpInstanceFactory;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.repo.vo.RepoAssetChecklistVo;

public class RepoAssetChecklistDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(RepoAssetChecklistDispatchAction.class.getName());
	private static final Object repoAssetChecklistDynaValidatorForm = null;
	
	public ActionForward searchRepoAsset(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession session = request.getSession();
		boolean flag=false;
		String bDate="";
		String companyId="";
		String status ="";
		String userId="";
		UserObject userobj=(UserObject)session.getAttribute("userobject");		
		if(userobj!=null)
		{
			bDate=userobj.getBusinessdate();
			companyId=""+userobj.getCompanyId();
			userId=userobj.getUserId();
		}
		else
		{
			logger.info("here in execute method of StageMoveBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		RepoAssetChecklistVo vo = new RepoAssetChecklistVo(); //change
        
		DynaValidatorForm dyanForm= (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, dyanForm);
	
		/*
		Properties props = new Properties();
		props.load(request.getSession().getServletContext().getResourceAsStream("/WEB-INF/jndi.properties"));   
        InitialContext ic = new InitialContext(props);
        String applName=props.getProperty("enterprise.application.name");
        String remoteBean = props.getProperty("repo.master.business.session.bean.remote");
        logger.info("remoteBean : "+remoteBean);
        logger.info("applName : "+applName);
        String remoteBeanName=CommonFunction.checkNull(applName)+CommonFunction.checkNull(remoteBean);
        logger.info("remoteBeanName: "+remoteBeanName);
        RepoMasterBusinessSessionBeanRemote bp=(RepoMasterBusinessSessionBeanRemote)ic.lookup(remoteBeanName);
        
        */
        
        RepoMasterBusinessSessionBeanRemote bp = (RepoMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(RepoMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
        
        ArrayList list=new ArrayList();
        ArrayList list1=new ArrayList();
		
		logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
		
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));
		
		vo.setCurrentPageLink(currentPageLink);
		//vo1.setCurrentPageLink(currentPageLink);
		
		
		
		//change from here
		list1= bp.getAssetClass();
		list= bp.searchRepoAsset(vo);
		logger.info("In CaseTypeMasterBehindAction....list"+list.size());
		
	    request.setAttribute("list", list);
	  
	    request.setAttribute("assetList",list1);
	    
		logger.info("list.isEmpty(): "+list.isEmpty());
		request.setAttribute("list",list);
		if(CommonFunction.checkNull(request.getAttribute("flag")).toString().equalsIgnoreCase("yes")){
			request.setAttribute("sms","No");
		}
	    return mapping.findForward("search");

	}
	
	public ActionForward addRepoAsset(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception
			{
				logger.info(" in addRepoAsset()");
				ServletContext context = getServlet().getServletContext();
				HttpSession session = request.getSession();
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				String strFlag=null;
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				
				DynaValidatorForm repoAssetChecklistDynaValidatorForm= (DynaValidatorForm)form;
				RepoAssetChecklistVo vo = new RepoAssetChecklistVo();
				org.apache.commons.beanutils.BeanUtils.copyProperties(vo, repoAssetChecklistDynaValidatorForm);
				
				/*
				
				Properties props = new Properties();
				props.load(request.getSession().getServletContext().getResourceAsStream("/WEB-INF/jndi.properties"));   
		        InitialContext ic = new InitialContext(props);
		        String applName=props.getProperty("enterprise.application.name");
		        String remoteBean = props.getProperty("repo.master.business.session.bean.remote");
		        logger.info("remoteBean : "+remoteBean);
		        logger.info("applName : "+applName);
		        String remoteBeanName=CommonFunction.checkNull(applName)+CommonFunction.checkNull(remoteBean);
		        logger.info("remoteBeanName: "+remoteBeanName);
		        RepoMasterBusinessSessionBeanRemote bp=(RepoMasterBusinessSessionBeanRemote)ic.lookup(remoteBeanName);
		        
		        */
		        
		        RepoMasterBusinessSessionBeanRemote bp = (RepoMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(RepoMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
		        
		        ArrayList list=new ArrayList();
		        
		        list= bp.getAssetClass();
		        
		        request.setAttribute("assetList",list);
		        
		        request.setAttribute("save", "save");
			    return mapping.findForward("openAdd");	
			}
	
	
	public ActionForward saveRepoAsset(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse resopnse) throws Exception{
			ServletContext context = getServlet().getServletContext();
			//HttpSession session=request.getSession(false);
			HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			String strFlag=null;
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
			String userId=null;
			String bDate=null;
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bDate=userobj.getBusinessdate();
			}
	
		DynaValidatorForm repoAssetChecklistDyanavalidatiorForm= (DynaValidatorForm)form;
		RepoAssetChecklistVo vo = new RepoAssetChecklistVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, repoAssetChecklistDyanavalidatiorForm);
		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		
		/*
		Properties props = new Properties();
		props.load(request.getSession().getServletContext().getResourceAsStream("/WEB-INF/jndi.properties"));   
        InitialContext ic = new InitialContext(props);
        String applName=props.getProperty("enterprise.application.name");
        String remoteBean = props.getProperty("repo.master.business.session.bean.remote");
        logger.info("remoteBean : "+remoteBean);
        logger.info("applName : "+applName);
        String remoteBeanName=CommonFunction.checkNull(applName)+CommonFunction.checkNull(remoteBean);
        logger.info("remoteBeanName: "+remoteBeanName);
        RepoMasterBusinessSessionBeanRemote bp=(RepoMasterBusinessSessionBeanRemote)ic.lookup(remoteBeanName);
        */
        
        RepoMasterBusinessSessionBeanRemote bp = (RepoMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(RepoMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
        
        String sms=null;
		
        String checkListIds = request.getParameter("checkListIds");
		logger.info("## In saveRepoAsset(): checkListIds :==>> "+checkListIds);
        String[] checkList= checkListIds.split("\\|");
        
        if(CommonFunction.checkNull(checkList).equalsIgnoreCase(""))
        	logger.info("docId is blank");
        
        if(checkList!=null)
        logger.info("## In saveRepoAsset(): docId :==>> "+checkList.length);
        ArrayList list= new ArrayList();
        list.add(vo);
     
		boolean status = bp.insertRepoAsset(vo,checkList);
		logger.info("Inside " +"Repo Asset Dispatch Action.....displaying status...."+status);
		if(status){
			
			
			
			sms="S";
			request.setAttribute("sms",sms);
			
			logger.info("## In saveRepoAsset() : sms : ==>> " +sms);
			logger.info("## In saveRepoAsset() : request.getAttribute(sms) : ==>> " +request.getAttribute(sms));
		}
		else{
			sms="E";
			request.setAttribute("sms",sms);
			request.setAttribute("save", "save");
			 ArrayList list1=new ArrayList();
			 list1= bp.getAssetClass();
			 request.setAttribute("assetList",list1);
			
		}
		logger.info("status"+status);
		  return mapping.findForward("openAdd");
	}
	
	
	public ActionForward openEditRepoAsset(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception { 
		
		
					ServletContext context = getServlet().getServletContext();		
						logger.info("In openEditRepoAsset");						
						HttpSession session = request.getSession();
						UserObject userobj=(UserObject)session.getAttribute("userobject");
						Object sessionId = session.getAttribute("sessionID");
						//for check User session start
						String strFlag=null;
						if(sessionId!=null)
						{
							strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
						}
						
						logger.info("strFlag .............. "+strFlag);
						if(!strFlag.equalsIgnoreCase(""))
						{
							if(strFlag.equalsIgnoreCase("sameUserSession"))
							{
								context.removeAttribute("msg");
								context.removeAttribute("msg1");
							}
							else if(strFlag.equalsIgnoreCase("BODCheck"))
							{
								context.setAttribute("msg", "B");
							}
							return mapping.findForward("logout");
						}
 
						/*					
						Properties props = new Properties();
						props.load(request.getSession().getServletContext().getResourceAsStream("/WEB-INF/jndi.properties"));   
				        InitialContext ic = new InitialContext(props);
				        String applName=props.getProperty("enterprise.application.name");
				        String remoteBean = props.getProperty("repo.master.business.session.bean.remote");
				        logger.info("remoteBean : "+remoteBean);
				        logger.info("applName : "+applName);
				        String remoteBeanName=CommonFunction.checkNull(applName)+CommonFunction.checkNull(remoteBean);
				        logger.info("remoteBeanName: "+remoteBeanName);
				        RepoMasterBusinessSessionBeanRemote bp=(RepoMasterBusinessSessionBeanRemote)ic.lookup(remoteBeanName);
				        */
				        RepoMasterBusinessSessionBeanRemote bp = (RepoMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(RepoMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
				       					
						
						RepoAssetChecklistVo vo=new RepoAssetChecklistVo(); 
						vo.setRepoProduct(request.getParameter("product"));
						vo.setAssetClassId(request.getParameter("assetClass"));
										       
						ArrayList<RepoAssetChecklistVo> list = bp.openEditRepoAsset(vo);
						
						ArrayList checklist = bp.getChecklistOnEdit(vo);
						logger.info("In openEditRepoAsset RepoAssetChecklistVo list"+list.size());
						logger.info("In openEditRepoAsset check box value list"+list.get(0).getRecStatus());
						
						request.setAttribute("checklist", checklist);	
					
						request.setAttribute("status", list.get(0).getRecStatus());
						
						request.setAttribute("assetList",list);
						request.setAttribute("list", list);
						
						request.setAttribute("editVal", "editVal");
					   return mapping.findForward("edit");	
					}
	
	
	public ActionForward updateRepoAsset(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ServletContext context = getServlet().getServletContext();
		logger.info("In updateStage.......");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		String strFlag=null;
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		String userId=null;
		String bDate=null;
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
		}
		
		RepoAssetChecklistVo repoAssetChecklistVo=new RepoAssetChecklistVo(); 
		DynaValidatorForm repoAssetChecklistDyanavalidatiorForm = (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(repoAssetChecklistVo, repoAssetChecklistDyanavalidatiorForm);	

		logger.info("In updateRepoAsset---------");  
		
		repoAssetChecklistVo.setMakerId(CommonFunction.checkNull(userId));
		repoAssetChecklistVo.setMakerDate(CommonFunction.checkNull(bDate));
		
		/*
		Properties props = new Properties();
		props.load(request.getSession().getServletContext().getResourceAsStream("/WEB-INF/jndi.properties"));   
        InitialContext ic = new InitialContext(props);
        String applName=props.getProperty("enterprise.application.name");
        String remoteBean = props.getProperty("repo.master.business.session.bean.remote");
        logger.info("remoteBean : "+remoteBean);
        logger.info("applName : "+applName);
        String remoteBeanName=CommonFunction.checkNull(applName)+CommonFunction.checkNull(remoteBean);
        logger.info("remoteBeanName: "+remoteBeanName);
        RepoMasterBusinessSessionBeanRemote bp=(RepoMasterBusinessSessionBeanRemote)ic.lookup(remoteBeanName);
        */
		
		RepoMasterBusinessSessionBeanRemote bp = (RepoMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(RepoMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
		
       String sms=null;
       String checkListIds = request.getParameter("checkListIds");
		logger.info("## In updateRepoAsset(): checkListIds :==>> "+checkListIds);
       String[] checkList= checkListIds.split("\\|");
       logger.info("## In updateRepoAsset::::::::::::");
        boolean status=bp.updateRepoAsset(repoAssetChecklistVo,checkList);
        
        if(status){
			sms="M";
			request.setAttribute("sms",sms);
			request.setAttribute("editVal", "editVal");
		}
		else{
			sms="E";
			request.setAttribute("sms",sms);
			ArrayList<RepoAssetChecklistVo> list =new ArrayList<RepoAssetChecklistVo>();
			list.add(repoAssetChecklistVo);
			logger.info("In updateRepoAsset list"+ list.size());
			logger.info("In updateRepoAsset list chack box value is :::::::"+ repoAssetChecklistVo.getRecStatus());
			
			String checkVal="";
			if (repoAssetChecklistVo.getRecStatus() != null
					&& repoAssetChecklistVo.getRecStatus().equals("on")) {
				checkVal = "A";
			} else {
				checkVal = "X";
			}
			 ArrayList list1=new ArrayList();
			 list1= bp.getAssetClass();
			 request.setAttribute("assetList",list1);
			
			request.setAttribute("editVal", "editVal");
			request.setAttribute("list", list);
			
			request.setAttribute("status", checkVal);
			
		}
      
		logger.info("In updateRepoAsset---status-----"+repoAssetChecklistVo.getRecStatus());
		return mapping.findForward("openAdd");
      
		
	}
				
}