/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.repo.actions;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.PrintWriter;
import java.sql.Connection;
import java.util.HashMap;
import java.util.Map;
import java.util.ResourceBundle;

import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.engine.export.JRHtmlExporterParameter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;
import net.sf.jasperreports.j2ee.servlets.ImageServlet;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.connect.ConnectionDAO;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.repo.vo.RepoReportVo;

public class RepoRepossessedRejectMisDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(RepoRepossessedRejectMisDispatchAction.class.getName());
	
	public ActionForward openRepossessedRejectCaseMISSearchPage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception
			{
				logger.info("## In openAdvocateCaseMisSearchPage()");
				ServletContext context = getServlet().getServletContext();
				HttpSession session = request.getSession();
				boolean flag=false;
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				String strFlag="";
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				
				
			    return mapping.findForward("success");	
			}
	
	
	public ActionForward generateRepoRejectedCaseMis(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{	
		logger.info("In generateLegalAdvocateCaseReprot.........");
		try
		{
				HttpSession session = request.getSession();
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				String userId="";
				if(userobj!=null){
					userId= userobj.getUserId();
				}else{
					logger.info(" in execute method of ReportActionForCP action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
				Object sessionId = session.getAttribute("sessionID");
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				
				RepoReportVo vo = new RepoReportVo(); //change
		        
				DynaValidatorForm dyanForm= (DynaValidatorForm)form;
				org.apache.commons.beanutils.BeanUtils.copyProperties(vo, dyanForm);

				
				ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");
				
				String dateFormat=resource.getString("lbl.dateInDao");
				String dbType=resource.getString("lbl.dbType");
				
				String reportName="repossessedRejectCaseMis";
				String reporttype="P";
				
				String p_company_logo=getServlet().getServletContext().getRealPath("/")+"reports/logo.bmp";
		

				String reportPath="/reports/";
				
				
				if(dbType.equalsIgnoreCase("MSSQL"))
					reportPath=reportPath+"MSSQLREPORTS/";
				else
					reportPath=reportPath+"MYSQLREPORTS/";
					
				
				
				Connection connectDatabase = ConnectionDAO.getConnection();
				
				logger.info("connectDatabase : ==>> "+connectDatabase);
				
				Map<Object,Object> hashMap = new HashMap<Object,Object>();
				
				int company_id=0;
				String userID="";
				String p_company_name="";
				String userName="";
				String p_business_date="";
				
				if(userobj !=null)
				{
					p_company_name=userobj.getConpanyName()+" ";			
					userName = userobj.getUserName()+" ";
					p_business_date=userobj.getBusinessdate();
					company_id=userobj.getCompanyId();
					userID=userobj.getUserId();
				}
				else
				{
					logger.info(" in execute method of ReportActionForCP  action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
				
				logger.info("reportPath : ==>> "+reportPath);
				logger.info("reportName : ==>> "+reportName);
				logger.info("reportName : ==>> "+reportPath+reportName+".jasper");
				
				
	
				hashMap.put("p_company_logo",p_company_logo);
				hashMap.put("p_company_name",p_company_name+" "); 
				hashMap.put("p_report_format",reporttype);
				
				hashMap.put("p_loan_id",vo.getLbxLoanId());
				hashMap.put("p_repossession_date",vo.getRepossessionDate()); 
				hashMap.put("p_agency_id",vo.getLbxAgencyId());
				hashMap.put("p_stockyard_id",vo.getLbxStockYard());
				hashMap.put("p_approver_name",vo.getLbxUserId());
		
				
				
				InputStream reportStream = getServlet().getServletConfig().getServletContext().getResourceAsStream(reportPath+reportName+".jasper");
				
				logger.info("reportStream : ==>> "+reportStream);
				
				JasperPrint jasperPrint = null;
				
				try
				{
					jasperPrint = JasperFillManager.fillReport(reportStream, hashMap,connectDatabase);
					
					logger.info("jasperPrint : ==>> "+jasperPrint);
					
					if(reporttype.equals("P"))
						methodForPDF(reportName,hashMap,connectDatabase,response, jasperPrint,request);
					if(reporttype.equals("E"))				
						methodForExcel(reportName,hashMap,connectDatabase,response, jasperPrint);
					if(reporttype.equals("H"))				
						methodForHTML(reportName,hashMap,connectDatabase,response, jasperPrint,request);
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
				finally
				{
					ConnectionDAO.closeConnection(connectDatabase, null);
					hashMap.clear();
					
				}
				
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}		
		return null;
		}
	
	
	public void methodForPDF(String reportName,Map<Object,Object> hashMap,Connection connectDatabase,HttpServletResponse response,JasperPrint jasperPrint, HttpServletRequest request)throws Exception
	{
		JasperExportManager.exportReportToPdfFile(jasperPrint,request.getRealPath("/reports") + "/" +reportName+".pdf");
		File f=new File(request.getRealPath("/reports") + "/" +reportName+".pdf");
		FileInputStream fin = new FileInputStream(f);
		ServletOutputStream outStream = response.getOutputStream();
		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename='"+reportName+"'.pdf");
		byte[] buffer = new byte[1024];
		int n = 0;
		while ((n = fin.read(buffer)) != -1) 
			outStream.write(buffer, 0, n);			
		outStream.flush();
		fin.close();
		outStream.close();
	}	
	public void methodForExcel(String reportName,Map<Object,Object> hashMap,Connection connectDatabase,HttpServletResponse response,JasperPrint jasperPrint)throws Exception
	{
		String excelReportFileName=reportName+".xls";		
		JExcelApiExporter exporterXLS = new JExcelApiExporter();
		exporterXLS.setParameter(JRXlsExporterParameter.JASPER_PRINT, jasperPrint);
		exporterXLS.setParameter(JRXlsExporterParameter.IS_DETECT_CELL_TYPE, Boolean.TRUE);
		exporterXLS.setParameter(JRXlsExporterParameter.IS_WHITE_PAGE_BACKGROUND, Boolean.FALSE);
		exporterXLS.setParameter(JRXlsExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS, Boolean.TRUE);
		exporterXLS.setParameter(JRXlsExporterParameter.OUTPUT_STREAM, response.getOutputStream());
		response.setHeader("Content-Disposition", "attachment;filename=" + excelReportFileName);
		response.setContentType("application/vnd.ms-excel");
		exporterXLS.exportReport();
	}	
	public  void methodForHTML(String reportName,Map<Object,Object> hashMap,Connection connectDatabase,HttpServletResponse response,JasperPrint jasperPrint,HttpServletRequest request)throws Exception
	{
		PrintWriter out=response.getWriter();
	    out.append("<head><script type='text/javascript' src='"+request.getContextPath()+"/js/report/report.js'></script></head>");
	   	response.setContentType("text/html");
	   	
		String htmlReportFileName=reportName+".html";
		JRHtmlExporter exporter = new JRHtmlExporter();			
		response.setContentType("text/html");
        request.getSession().setAttribute(ImageServlet.DEFAULT_JASPER_PRINT_SESSION_ATTRIBUTE,jasperPrint);			
		float f1=1.4f;
		Map imagesMap = new HashMap();
        request.getSession().setAttribute("IMAGES_MAP", imagesMap);
        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
        exporter.setParameter(JRHtmlExporterParameter.IS_USING_IMAGES_TO_ALIGN ,Boolean.FALSE);
        exporter.setParameter(JRHtmlExporterParameter.IGNORE_PAGE_MARGINS ,Boolean.TRUE); 
        exporter.setParameter(JRHtmlExporterParameter.IS_WHITE_PAGE_BACKGROUND,Boolean.FALSE);
        exporter.setParameter(JRHtmlExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS,Boolean.TRUE);
        exporter.setParameter(JRHtmlExporterParameter.IS_OUTPUT_IMAGES_TO_DIR, Boolean.TRUE);
        exporter.setParameter(JRHtmlExporterParameter.BETWEEN_PAGES_HTML,"");
        exporter.setParameter(JRExporterParameter.OUTPUT_WRITER, response.getWriter());
        exporter.setParameter(JRHtmlExporterParameter.IMAGES_MAP, imagesMap);
        exporter.setParameter(JRHtmlExporterParameter.ZOOM_RATIO ,f1);
        ServletContext context = this.getServlet().getServletContext();
        File reportFile = new File(context.getRealPath("/reports/"));
        String image = reportFile.getPath();
        exporter.setParameter(JRHtmlExporterParameter.IMAGES_DIR_NAME,image);
        exporter.setParameter(JRHtmlExporterParameter.IMAGES_URI,image + "/");
        exporter.exportReport();     
	}
				
}