/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.caps.action;

import java.util.ArrayList;
import java.util.logging.Logger;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.logger.LoggerMsg;
import com.caps.VO.EscalationMatrixVo;
import com.caps.dao.CollDAO;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

public class EscalationMatrixBehindDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(AllocationMasterDispatchAction.class.getName());
	
	
	
public ActionForward openJsp(ActionMapping mapping, ActionForm form,			
			HttpServletRequest request, HttpServletResponse response) throws Exception {
				
	            LoggerMsg.info("In EscalationMatrixBehindDispatchAction:::::::::::");
				HttpSession session = request.getSession();
				boolean flag=false;
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				String userId="";
				String bDate="";
				if(userobj!=null)
				{
					userId=userobj.getUserId();
					bDate=userobj.getBusinessdate();
				}else{
					logger.info("here openJsp method of  EscalationMatrixBehindDispatchAction action the session is out----------------");
					return mapping.findForward("sessionOut");
				}	
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				DynaValidatorForm EscalationMatrixDyanavalidatiorForm= (DynaValidatorForm)form;
				EscalationMatrixVo escalationVo=new EscalationMatrixVo();
				
				org.apache.commons.beanutils.BeanUtils.copyProperties(escalationVo, EscalationMatrixDyanavalidatiorForm);
				CollDAO collDAO=(CollDAO)DaoImplInstanceFactory.getDaoImplInstance(CollDAO.IDENTITY);
				  logger.info("Implementation class: "+collDAO.getClass());
				ArrayList<EscalationMatrixVo> custcatList=collDAO.escCustcategory();
				ArrayList<EscalationMatrixVo> npastageList=collDAO.escNPAstage();
				ArrayList<EscalationMatrixVo> productList=collDAO.escProduct();
				
				request.setAttribute("customercatList",custcatList);
				request.setAttribute("npastageList",npastageList);
				request.setAttribute("productList",productList);
				
				 logger.info("current page link .......... "+request.getParameter("d-49520-p"));
					
				 int currentPageLink = 0;
					if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
					{
						currentPageLink=1;
					}
					else
					{
						currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
					}

						
					
					
					escalationVo.setCurrentPageLink(currentPageLink);
					escalationVo.setCurreentdate(bDate);	
					escalationVo.setMakerId(userId);
					ArrayList<EscalationMatrixVo> detailList=new ArrayList<EscalationMatrixVo>();
					
					detailList= collDAO.escalationGrid(escalationVo);
				
					if(detailList.size()>0)
				    {
					 request.setAttribute("list", detailList);
				    }
				else
				  {
					 request.setAttribute("sms","No");
				  }
				/*if(CommonFunction.checkNull(request.getAttribute("flag")).toString().equalsIgnoreCase("yes")){
					request.setAttribute("sms","No");
				}*/
				
		        return mapping.findForward("escalationBehind");
		
	}
	

public ActionForward openEsclationJsp(ActionMapping mapping, ActionForm form,			
		HttpServletRequest request, HttpServletResponse response) throws Exception {
			
            LoggerMsg.info("In EscalationMatrixBehindDispatchAction:::::::::::");
			HttpSession session = request.getSession();
			boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			if(userobj==null){
				logger.info("here openEsclationJsp method of EscalationMatrixBehindDispatchAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			DynaValidatorForm EscalationMatrixDyanavalidatiorForm= (DynaValidatorForm)form;
			EscalationMatrixVo escalationVo=new EscalationMatrixVo();
			
			org.apache.commons.beanutils.BeanUtils.copyProperties(escalationVo, EscalationMatrixDyanavalidatiorForm);
			CollDAO collDAO=(CollDAO)DaoImplInstanceFactory.getDaoImplInstance(CollDAO.IDENTITY);
			  logger.info("Implementation class: "+collDAO.getClass());
			ArrayList<EscalationMatrixVo> custcatList=collDAO.escCustcategory();
			ArrayList<EscalationMatrixVo> npastageList=collDAO.escNPAstage();
			ArrayList<EscalationMatrixVo> productList=collDAO.escProduct();
			
			request.setAttribute("customercatList",custcatList);
			request.setAttribute("npastageList",npastageList);
			request.setAttribute("productList",productList);
			
			 logger.info("current page link .......... "+request.getParameter("d-49520-p"));
				
				int currentPageLink = 0;
				if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
				{
					currentPageLink=1;
				}
				else
				{
					currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
				}
				
				logger.info("current page link ................ "+request.getParameter("d-49520-p"));
			
			

				if(CommonFunction.checkNull(request.getAttribute("flag")).toString().equalsIgnoreCase("yes")){
					request.setAttribute("sms","No");
				}
	
	        return mapping.findForward("escalationBehind");
	
}




public ActionForward searchEscalationsMatrix(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)	throws Exception {
	logger.info("In searchEscalationsMatrix");
	HttpSession session = request.getSession();
	boolean flag=false;
	UserObject userobj=(UserObject)session.getAttribute("userobject");
	String userId="";
	String bDate="";
	if(userobj!=null)
	{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
	}else{
		logger.info("here in searchEscalationsMatrix method of  EscalationMatrixBehindDispatchAction action the session is out----------------");
		return mapping.findForward("sessionOut");
	}
	Object sessionId = session.getAttribute("sessionID");
	//for check User session start
	ServletContext context = getServlet().getServletContext();
	String strFlag="";	
	if(sessionId!=null)
	{
		strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
	}
	
	logger.info("strFlag .............. "+strFlag);
	if(!strFlag.equalsIgnoreCase(""))
	{
		if(strFlag.equalsIgnoreCase("sameUserSession"))
		{
			context.removeAttribute("msg");
			context.removeAttribute("msg1");
		}
		else if(strFlag.equalsIgnoreCase("BODCheck"))
		{
			context.setAttribute("msg", "B");
		}
		return mapping.findForward("logout");
	}
	 logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
		
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));

	EscalationMatrixVo escalationVo=new EscalationMatrixVo();
	DynaValidatorForm EscalationMatrixDyanavalidatiorForm= (DynaValidatorForm)form;
	org.apache.commons.beanutils.BeanUtils.copyProperties(escalationVo, EscalationMatrixDyanavalidatiorForm);

	ArrayList<EscalationMatrixVo> detailList=new ArrayList<EscalationMatrixVo>();


	
	logger.info("queueadate:::::::::::::::::::::::::::::::::::::::"+bDate);

	
	escalationVo.setCurreentdate(bDate);	
	escalationVo.setUserID(userId);
	escalationVo.setMakerId(userId);
	logger.info("Curreentdate::"+escalationVo.getCurreentdate()+"And UserID::"+escalationVo.getUserID());
	CollDAO collDAO=(CollDAO)DaoImplInstanceFactory.getDaoImplInstance(CollDAO.IDENTITY);
	  logger.info("Implementation class: "+collDAO.getClass());
	 int count =0;
	if(!(escalationVo.getActionNotTaken().toString().equalsIgnoreCase("")))
	{ 
		count=Integer.parseInt(collDAO.queueActionDate(bDate));
		if(count>0)
		{
			detailList= collDAO.escalationGrid(escalationVo);
			if(detailList.size()>0)
			    {
				 request.setAttribute("list", detailList);
			    }
			else
			  {
				request.setAttribute("sms","No");
			  }
         }
    }
	else
       {
    	 detailList= collDAO.escalationGrid(escalationVo);
    	 if (detailList.size() > 0) 
    	   {
			 request.setAttribute("list", detailList);
				
		   }
    	 else
    	   {
			request.setAttribute("sms","No");
		   }
		}	
	 return mapping.findForward("escalationSearch");
    
		}

}