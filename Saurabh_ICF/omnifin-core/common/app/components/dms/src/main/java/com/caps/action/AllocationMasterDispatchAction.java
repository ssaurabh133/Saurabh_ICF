/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.caps.action;

import java.util.ArrayList;
import org.apache.log4j.Logger;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.business.ejbClient.DebtManagementBussinessSessionBeanRemote;
import com.connect.CommonFunction;
import com.connect.LookUpInstanceFactory;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.masters.capsVO.AllocationMasterVo;


public class AllocationMasterDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(AllocationMasterDispatchAction.class.getName());
	
	public ActionForward saveQueueAllocation(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		HttpSession session = request.getSession();
		boolean flag=false;
		String userId="";
		String bDate="";
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			bDate=userobj.getBusinessdate();
		}else{
			logger.info("here saveQueueAllocation method of  AllocationMasterDispatchAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		DynaValidatorForm AllocationAddDynaValidatorForm= (DynaValidatorForm)form;
		AllocationMasterVo collVo = new AllocationMasterVo();
		//logger.info("saveQueueAllocation.....displaying status...."+collVo.getStatus());
		
	
		collVo.setMakerId(userId);
		collVo.setMakerDate(bDate);
		
		org.apache.commons.beanutils.BeanUtils.copyProperties(collVo, AllocationAddDynaValidatorForm);	
        logger.info("REC Status:----------------------"+collVo.getRecStatus());
		
              DebtManagementBussinessSessionBeanRemote dm = (DebtManagementBussinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(DebtManagementBussinessSessionBeanRemote.REMOTE_IDENTITY, request);
              
		String sms="";
		String percentage  =request.getParameter("newcheckval");
		String[] percent = percentage.split("/");
		logger.info("newuserval"+request.getParameter("newuserval"));
		String newUser =request.getParameter("newuserval");
		String[] queueuser=newUser.split("/");
		
		int total=0;
		if(!CommonFunction.checkNull(request.getParameter("total")).equalsIgnoreCase(""))
		{
			total = Integer.parseInt(request.getParameter("total"));
		}
		logger.info("branchs"+request.getParameter("branchs"));
		String branchs =request.getParameter("branchs");
		String[] branchList = null;
		if(!CommonFunction.checkNull(branchs).equals(""))
		{
		String branchList1=branchs.replace(",","");
		 branchList=branchList1.split("\\|");
		}
		logger.info("total--->"+total);
		logger.info("getAllocId-->"+collVo.getAllocId());
	
		String flagreturn = dm.saveQueueAllocation(collVo,percent,total,queueuser,branchList);
			/*if(flag1.equalsIgnoreCase("N"))
			{
				String flag1return = dm.saveBranch(collVo,branchName);
			}*/
			
		logger.info("saveQueueAllocation.....displaying status...."+flagreturn);
		if(flagreturn.equalsIgnoreCase("SAVE"))
		{
			sms="S";
			request.setAttribute("sms",sms);
			request.setAttribute("default", "defaultList");
			request.setAttribute("errorStr",flagreturn);
		}
		else if(flagreturn.equalsIgnoreCase("PERCENT"))
		{
			request.setAttribute("PERCENT","P");
		}
		else
		{
			sms="E";
			request.setAttribute("sms",sms);
			request.setAttribute("errorStr",flagreturn);
		}
		
		return mapping.findForward("openAdd");
	}	
//	public ActionForward updateQueueAllocation(ActionMapping mapping, ActionForm form,
//			HttpServletRequest request, HttpServletResponse response) throws Exception {
//		logger.info("In updateQueueAllocation.......");
//		HttpSession session = request.getSession();
//		boolean flag=false;
//		UserObject userobj=(UserObject)session.getAttribute("userobject");
//		Object sessionId = session.getAttribute("sessionID");
//		//for check User session start
//		if(sessionId!=null)
//		{
//			flag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString());
//		}
//		
//		if(flag)
//		{
//			logger.info("logout in action");
//			return mapping.findForward("logout");
//		}
//		String userId=userobj.getUserId();
//		DynaValidatorForm AllocationAddDynaValidatorForm= (DynaValidatorForm)form;
//		AllocationMasterVo collVo = new AllocationMasterVo();
//	
//		org.apache.commons.beanutils.BeanUtils.copyProperties(collVo, AllocationAddDynaValidatorForm);	
//		collVo.setUser(request.getParameter("user"));
//		collVo.setMakerId(userId);
//		collVo.setMakerDate(userobj.getBusinessdate());
//		String checkbox[] = request.getParameterValues("chkCases");
//		
//	      String sms="";
//			String percentage =request.getParameter("newcheckval");
//			String[] abc = percentage.split("/");
//	int total=Integer.parseInt(request.getParameter("total"));
//
//
//     String User=collVo.getLbxUserSearchId().toString();
//        String flagreturn=collDAO.modifyqueueAllocation(collVo,checkbox,abc,total);
//
//    	logger.info("updateQueueAllocation.....displaying status...."+flagreturn);
//	   if(flagreturn.equalsIgnoreCase("Modify")){
//			sms="M";
//			request.setAttribute("sms",sms);
//		  }
//		
//	 else if(flagreturn.equalsIgnoreCase("PERCENT"))
//		{
//			request.setAttribute("PERCENT","P");
//			ArrayList<AllocationMasterVo> queueAllocationEdit = collDAO.searchQueueAllocationEdit(User);
//			ArrayList<AllocationMasterVo> queueEdit = collDAO.searchQueueEdit(User);
//			request.setAttribute("status", queueAllocationEdit.get(0).getQueueStatus());
//		
//			request.setAttribute("list", queueAllocationEdit);
//			request.setAttribute("queueList", queueEdit);
//		
//			request.setAttribute("editMode", "editMode");
//		}
//	 else{
//			sms="E";
//			request.setAttribute("sms",sms);
//		}
//        return mapping.findForward("success");
//       
//	}
	public ActionForward searchAllocationByQueue(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception {
	
		logger.info("In searchAllocationByQueue");
	    
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here searchAllocationByQueue method of AllocationMasterDispatchAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		DynaValidatorForm AllocationAddDynaValidatorForm= (DynaValidatorForm)form;
		AllocationMasterVo allocationVo = new AllocationMasterVo();
	
		org.apache.commons.beanutils.BeanUtils.copyProperties(allocationVo, AllocationAddDynaValidatorForm);
		
		DebtManagementBussinessSessionBeanRemote dm = (DebtManagementBussinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(DebtManagementBussinessSessionBeanRemote.REMOTE_IDENTITY, request);
		
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
	
	//	String userId=request.getParameter("userId");
		ArrayList<AllocationMasterVo> searchAllocationByQueue = dm.searchQueueAllocationData(allocationVo);
		if(searchAllocationByQueue.get(0).getFlagval().equalsIgnoreCase("Noval")){
		
			request.setAttribute("queuecode",searchAllocationByQueue.get(0).getLbxQueuesearchId());
			request.setAttribute("queuedesc",searchAllocationByQueue.get(0).getQueuedesc());
			logger.info("queuecode---->"+request.getAttribute("queuecode"));
			logger.info("queuedesc---->"+request.getAttribute("queuedesc"));
			request.setAttribute("sms","No");
			
		}else{
			request.setAttribute("searchList", searchAllocationByQueue);
		}
		return mapping.findForward("success");	
	}
	
//Ritu
	public ActionForward openEditAllocation(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception {
				AllocationMasterVo vo = new AllocationMasterVo();
		        ServletContext context = getServlet().getServletContext();
				logger.info("In openEditAllocation");
				HttpSession session = request.getSession();
				boolean flag=false;
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
                String allocId = request.getParameter("allocId");
				vo.setAllocationId(allocId);
				DebtManagementBussinessSessionBeanRemote dm = (DebtManagementBussinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(DebtManagementBussinessSessionBeanRemote.REMOTE_IDENTITY, request);
				
		        String branchId="";
		        branchId=CommonFunction.checkNull(request.getParameter("branchId"));
				vo.setLbxQueuesearchId(request.getParameter("queueId"));
				String queue_code=request.getParameter("queueId");
				String groupId=request.getParameter("groupId");
				if(StringUtils.isBlank(groupId)){
					groupId="0";
				}
				groupId=groupId.trim();
				vo.setGroupId(groupId);
				request.setAttribute("groupId",groupId);
				ArrayList<AllocationMasterVo> branchListForAlloc = dm.getresultForBranchAllcation(""+allocId);
				request.setAttribute("branchList", branchListForAlloc);

				String areaCode="";
				areaCode=CommonFunction.checkNull(request.getParameter("areaCode"));
				vo.setLbxareaCodeVal(areaCode);
				
				String allcId=CommonFunction.checkNull(request.getParameter("allocId"));
				vo.setAllocId(allcId);
				vo.setLbxareaCodeVal(areaCode);
				logger.info("In openEditAllocation---queueId---- by getpara-"+request.getParameter("queueId"));  
				logger.info("In openEditAllocation---QueueIdSearch---- by getpara by vo-"+vo.getQueueIdSearch());
				logger.info("In openEditAllocation---areaCode---- by getpara by vo-"+vo.getLbxareaCodeVal());
				
				ArrayList<AllocationMasterVo> searchAllocationByQueue = dm.searchQueueAllocationData(vo);
				ArrayList<AllocationMasterVo> allocatedCollQueueDataList = dm.allocatedCollQueueData(vo);
				if(searchAllocationByQueue.get(0).getFlagval().equalsIgnoreCase("Noval")){
				
					request.setAttribute("queuecode",searchAllocationByQueue.get(0).getLbxQueuesearchId());
					request.setAttribute("queuedesc",searchAllocationByQueue.get(0).getQueuedesc());
					logger.info("queuecode---->"+request.getAttribute("queuecode"));
					logger.info("queuedesc---->"+request.getAttribute("queuedesc"));
					request.setAttribute("sms","No");
					
				}else{
					
					request.setAttribute("searchList", searchAllocationByQueue);
					if(Integer.parseInt(groupId)>0){
						request.setAttribute("allocatedCollQueueDataList", allocatedCollQueueDataList);
					}
					else{
						request.setAttribute("allocatedCollQueueDataList", searchAllocationByQueue);
					}
				}
				request.setAttribute("recStatus", searchAllocationByQueue.get(0).getRecStatus());
//				ArrayList<AllocationMasterVo> list = collDAO.searchQueueAllocationData(vo);
//				
//				
//				logger.info("In openEditAllocation vo list"+list.size());
//				request.setAttribute("list", list);
//				
//				AllocationMasterVo mVo=new AllocationMasterVo();
//				mVo=list.get(0);
				
				//ArrayList list1 = masterDAO.getAgency();
				request.setAttribute("modify", "modify");
			   return mapping.findForward("openAdd");	
			}
	
	public ActionForward openAddAllocation(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception {
		ServletContext context = getServlet().getServletContext();
				logger.info(" in openAddAllocation()");
				AllocationMasterVo vo = new AllocationMasterVo();
					
				HttpSession session = request.getSession();
				boolean flag=false;
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				request.setAttribute("defaultbranchId", userobj.getBranchId());
				request.setAttribute("defaultbranch", userobj.getBranchName());
			    return mapping.findForward("openAdd");	
			}
	
	public ActionForward modifyQueueAllocation(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
			
			HttpSession session = request.getSession();
			boolean flag=false;
			String userId="";
			String bDate="";
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			if(userobj!=null)
			{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
			}else{
				logger.info("here modifyQueueAllocation method of  AllocationMasterDispatchAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
			DynaValidatorForm AllocationAddDynaValidatorForm= (DynaValidatorForm)form;
			AllocationMasterVo collVo = new AllocationMasterVo();
			//logger.info("saveQueueAllocation.....displaying status...."+collVo.getStatus());
			
		
			collVo.setMakerId(userId);
			collVo.setMakerDate(bDate);
			
	        org.apache.commons.beanutils.BeanUtils.copyProperties(collVo, AllocationAddDynaValidatorForm);	
	        logger.info("REc Status:----------------------"+collVo.getRecStatus());
			
	              DebtManagementBussinessSessionBeanRemote dm = (DebtManagementBussinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(DebtManagementBussinessSessionBeanRemote.REMOTE_IDENTITY, request);
	        //
	        String alloctionGroupId=request.getParameter("alloctionGroupId");
	        if(StringUtils.isBlank(alloctionGroupId)){
	        	alloctionGroupId="0";
	        }
	        alloctionGroupId=alloctionGroupId.trim();
	        //
			String sms="";
			String recStatus=request.getParameter("recStatus");
			if(StringUtils.isBlank(recStatus)){
				recStatus="X";
			}
			recStatus=recStatus.trim();
			
			collVo.setRecStatus(recStatus);
			collVo.setAlloctionGroupId(alloctionGroupId);
			String[] percent=null;
			int total=0;
			String[] queueuser=null;
			String[] branchList = null;
			
			if(StringUtils.equalsIgnoreCase(recStatus,"A")){
				String percentage  =request.getParameter("newcheckval");
				percent = percentage.split("/");
				logger.info("newuserval"+request.getParameter("newuserval"));
				String newUser =request.getParameter("newuserval");
				queueuser=newUser.split("/");
				if(!CommonFunction.checkNull(request.getParameter("total")).equalsIgnoreCase("")){
					total = Integer.parseInt(request.getParameter("total"));
				}
				logger.info("branchs"+request.getParameter("branchs"));
				String branchs =request.getParameter("branchs");
				if(!CommonFunction.checkNull(branchs).equals("")){
					String branchList1=branchs.replace(",","");
					branchList=branchList1.split("\\|");
				}
			}
			String flagreturn = dm.modifyQueueAllocationDtl(collVo,percent,total,queueuser,branchList);
			logger.info("saveQueueAllocation.....displaying status...."+flagreturn);
			if(flagreturn.equalsIgnoreCase("SAVE")){
				sms="M";
				request.setAttribute("sms",sms);
				request.setAttribute("default", "defaultList");
				request.setAttribute("errorStr",flagreturn);
			}else if(flagreturn.equalsIgnoreCase("PERCENT")){
				request.setAttribute("PERCENT","P");
			}else{
				sms="E";
				request.setAttribute("sms",sms);
				request.setAttribute("errorStr",flagreturn);
			}
			return mapping.findForward("openAdd");
		}
}