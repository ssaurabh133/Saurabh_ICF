/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.caps.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.lang.reflect.InvocationTargetException;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.ResourceBundle;

import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.VO.CustomerSaveVo;
import com.caps.VO.CRFollowUpTrailsDtlVO;
import com.caps.VO.CollCommonVO;
import com.caps.VO.CollCustomerAddressVo;
import com.caps.VO.ViewpayableRecievableVo;
import com.caps.dao.CollDAO;
import com.cm.actionform.ReportsForm;
import com.cm.dao.EarlyClosureDAO;
import com.cm.dao.ReportsDAO;
//import com.cm.dao.EarlyClosureDAOImpl;
import com.cm.vo.ClosureVO;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.logger.LoggerMsg;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 02-09-2011
 * 
 * XDoclet definition:
 * @struts.action input="/JSP/gcdJSP/corporateCustomerAddress.jsp" parameter="method" scope="request" validate="true"
 */
public class ContactRecordingButtonsAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(ContactRecordingButtonsAction.class.getName());

	
	
	public ActionForward followUpTrailDetailedData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IllegalAccessException, InvocationTargetException,Exception {
		
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here followUpTrailDetailedData method of ContactRecordingButtonsAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		DynaValidatorForm FollowUpDynaValidatorForm = (DynaValidatorForm) form;
		
		String loanId="";
		if(!CommonFunction.checkNull(request.getParameter("loanid")).equalsIgnoreCase(""))
			loanId = request.getParameter("loanid");
			
		CRFollowUpTrailsDtlVO vo=new CRFollowUpTrailsDtlVO();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,FollowUpDynaValidatorForm);
		vo.setLoanId(loanId);
		logger.info("In followUpTrailDetailedData()............");
		 CollDAO coll=(CollDAO)DaoImplInstanceFactory.getDaoImplInstance(CollDAO.IDENTITY);
		  logger.info("Implementation class: "+coll.getClass());
		ArrayList<CRFollowUpTrailsDtlVO> followUpTrailDetail=coll.followUpTrailsDtlData(vo);
		int followUpTrailDetailSize = followUpTrailDetail.size();
		if(followUpTrailDetailSize>0){
		request.setAttribute("followUpTrailDetail", followUpTrailDetail);

		}else{
			request.setAttribute("sms", "N");	
		}
		return mapping.findForward("followUp");
	}
	
	public ActionForward foreClosureData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IllegalAccessException, InvocationTargetException,Exception {
		
		HttpSession session = request.getSession();
		logger.info("In foreClosureData()............");
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String companyId="";
		String effectiveDate="";
		String businessDate="";
		if(userobj!=null)
		{
			companyId=userobj.getCompanyId()+"";
			businessDate=userobj.getBusinessdate();
		}else{
			logger.info("here foreClosureData method of  ContactRecordingButtonsAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		ClosureVO vo1=new ClosureVO();
		String loanId="";
		if(!CommonFunction.checkNull(request.getParameter("loanId")).equalsIgnoreCase(""))
			loanId = request.getParameter("loanId");
		//&loanId="+loanId+"&foreclosureType="+foreclosureType+"&loanN="+loanNo
		String closureType=request.getParameter("foreclosureType");
		effectiveDate=request.getParameter("effectiveDate");
		String loanno=request.getParameter("loanNumber");
		//ArrayList<ForeClosureVo>  closureDetail=coll.foreClosureData(companyId,loanId,effectiveDate,closureType);
		logger.info("effectiveDate:-"+effectiveDate);
		//EarlyClosureDAO dao=(EarlyClosureDAO)DaoImplInstanceFactory.getDaoImplInstance(EarlyClosureDAO.IDENTITY);
		 CollDAO dao=(CollDAO)DaoImplInstanceFactory.getDaoImplInstance(CollDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 
		//EarlyClosureDAO dao = new EarlyClosureDAOImpl();
		 ArrayList<ClosureVO> closureDetail= dao.getDuesRefundsList(companyId,loanId,effectiveDate,closureType,"cs");
		
		request.setAttribute("loanId", loanId);
		request.setAttribute("loanno", loanno);
		request.setAttribute("effectiveDate", effectiveDate);
		
		int closureDetailSize = closureDetail.size();
		if(closureDetailSize>0){
		request.setAttribute("closureData", closureDetail);
		}else{
			request.setAttribute("loanno", loanno);
			request.setAttribute("loanId", loanId);
			request.setAttribute("effectiveDate", effectiveDate);
			request.setAttribute("sms", "N");	
		}
		return mapping.findForward("foreClosure");
	}
	
	public ActionForward foreClosureJsp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IllegalAccessException, InvocationTargetException,Exception {
		
		HttpSession session = request.getSession();
		logger.info("In foreClosureJsp()............");
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String bdate="";
		int companyId=0;
		String p_company_name="";
		String userID="";
		if(userobj!=null){
			bdate=userobj.getBusinessdate();
			companyId=userobj.getCompanyId();
			p_company_name=userobj.getConpanyName();
			userID=userobj.getUserId();
		}else{
			logger.info("here foreClosureJsp method of  ContactRecordingButtonsAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}

		/*String loanId=request.getParameter("loanid");
		String loanno=request.getParameter("loanno");
		logger.info("In foreClosureJsp()....loanno........"+loanno);
		request.setAttribute("loanId", loanId);
		request.setAttribute("loanno", loanno);
		request.setAttribute("effectiveDate", effectiveDate);
		return mapping.findForward("foreClosure");
	}*/
		//mradul starts 
		Connection connectDatabase = ConnectionDAO.getConnection();		
		Map<Object,Object> hashMap = new HashMap<Object,Object>();
		String as_on_date="";
		String loanId = CommonFunction.checkNull(request.getParameter("loanId"));
		ArrayList<Object> in =new ArrayList<Object>();
		ArrayList<Object> out =new ArrayList<Object>();       
		ArrayList outMessages = new ArrayList();
		String s1="";
		String s2="";
		in.add(companyId);
		in.add(Integer.parseInt(loanId));
		as_on_date=CommonFunction.changeFormat(bdate);
		in.add(as_on_date);
		in.add(userID);
		out.add(s1);
		out.add(s2);  
		try
		{
			logger.info("Early_Closure_Detail_Report ("+in.toString()+","+out.toString());
			outMessages=(ArrayList) ConnectionDAO.callSP("Early_Closure_Detail_Report",in,out);
			s1=CommonFunction.checkNull(outMessages.get(0));
			s2=CommonFunction.checkNull(outMessages.get(1));
	        logger.info("s1  : "+s1);
	        logger.info("s2  : "+s2);	
	        if(s1.equalsIgnoreCase("E"))
	        {        	
				hashMap.clear();
	        	request.setAttribute("error", s2);
	        	logger.info("In Early_Closure_Detail_Report reports can't be generate ");        
	        	return mapping.findForward("errorInProcedure");    	   
	        }
	    }
		catch (Exception e) 
		{
			e.printStackTrace();
		}	
		ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");
		String dbType=resource.getString("lbl.dbType");
		String reportPath="/reports/";
		if(dbType.equalsIgnoreCase("MSSQL"))
			reportPath=reportPath+"MSSQLREPORTS/";
		else
			reportPath=reportPath+"MYSQLREPORTS/";
		String p_msg="";
		String p_address1="";
		String p_email="";
		String p_email1="";
		String p_loan_id=loanId;
		String reporttype="P";
		String p_company_logo=getServlet().getServletContext().getRealPath("/")+"reports/logo.bmp";
		ReportsDAO dao = (ReportsDAO)DaoImplInstanceFactory.getDaoImplInstance(ReportsDAO.IDENTITY);
		ArrayList<ReportsForm> list=dao.getCompanyAddress(companyId);
		ReportsForm frm = new ReportsForm();
		frm=list.get(0);
		p_msg=frm.getMsg();
		p_address1=frm.getAddress1()+" "+frm.getCity()+" "+frm.getPincode()+" "+frm.getPhone()+" "+frm.getFax();
		p_email=frm.getEmail()+" "+frm.getWebsite();
		p_email1=frm.getEmail(); 
		
		hashMap.put("p_company_name",p_company_name );
		hashMap.put("p_loan_id",p_loan_id );
		hashMap.put("p_company_logo",p_company_logo );
		hashMap.put("p_user_id",userID );
		hashMap.put("p_address1",p_address1 );
		hashMap.put("p_email",p_email );
		hashMap.put("p_email1",p_email1 );
		hashMap.put("IS_IGNORE_PAGINATION",false);
		String reportName="foreClosure_simulation_report";
		logger.info("report Name  :  "+ reportName + ".jasper");
		InputStream reportStream = getServlet().getServletConfig().getServletContext().getResourceAsStream(reportPath+reportName+".jasper");
		JasperPrint jasperPrint = null;				
		try
		{
			jasperPrint = JasperFillManager.fillReport(reportStream, hashMap,connectDatabase);
			methodForPDF(reportName,hashMap,connectDatabase,response, jasperPrint,request);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			ConnectionDAO.closeConnection(connectDatabase, null);
			hashMap.clear();			
		}
		return null;
	}
	//mradul ends
	public ActionForward paymentDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			 HttpServletResponse response) throws Exception{
	    logger.info("In showAddressDetails()...................");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here paymentDetails method of ContactRecordingButtonsAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		ArrayList list=new ArrayList();
		  logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		  String loanId=request.getParameter("loanId");
		  logger.info("loanId::::::::::::::::::::::"+loanId);
		  CollDAO coll=(CollDAO)DaoImplInstanceFactory.getDaoImplInstance(CollDAO.IDENTITY);
		  logger.info("Implementation class: "+coll.getClass());
   	      list= coll.paymentDetails(loanId);
			int listSize = list.size();
			if (listSize> 0) {
				 request.setAttribute("list", list);
					logger.info("list.isEmpty(): "+list.isEmpty());
					request.setAttribute("list",list);
			}else{
				request.setAttribute("sms","No");
			}
		
		return mapping.findForward("paymentSuccess");	
		
	}
	
	
	public ActionForward bounceDetails(ActionMapping mapping, ActionForm form, HttpServletRequest request,
			 HttpServletResponse response) throws Exception{
	    logger.info("In bounceDetails()...................");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here bounceDetails method of ContactRecordingButtonsAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		ArrayList list=new ArrayList();
		  logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		  String loanId=request.getParameter("loanId");
		  logger.info("loanId::::::::::::::::::::::"+loanId);
		  CollDAO coll=(CollDAO)DaoImplInstanceFactory.getDaoImplInstance(CollDAO.IDENTITY);
		  logger.info("Implementation class: "+coll.getClass());
   	     list= coll.bounceDetails(loanId);
   	  int listSize = list.size();
		if (listSize> 0) {
				 request.setAttribute("list", list);
					logger.info("list.isEmpty(): "+list.isEmpty());
					request.setAttribute("list",list);
			}else{
				request.setAttribute("sms","No");
			}
		
		return mapping.findForward("bounceSuccess");	
		
	}
	
	public ActionForward viewPaybleReceivable(ActionMapping mapping,ActionForm form,
			HttpServletRequest request,HttpServletResponse response)
	throws Exception {
		LoggerMsg.info("In  ContactRecordingButtonsAction viewPaybleReceivable()----------------------------"); 
		HttpSession session=request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here viewPaybleReceivable method of ContactRecordingButtonsAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
	
		 String loanId=request.getParameter("loanId");
		  logger.info("loanId::::::::::::::::::::::"+loanId);
		  ViewpayableRecievableVo vo =new ViewpayableRecievableVo();
		  CollDAO coll=(CollDAO)DaoImplInstanceFactory.getDaoImplInstance(CollDAO.IDENTITY);
		  logger.info("Implementation class: "+coll.getClass());
		ArrayList<ViewpayableRecievableVo> viewReceivablePayableList= coll.viewPayableReceivable(vo,loanId);
		if(viewReceivablePayableList.size()>0){
		request.setAttribute("list", viewReceivablePayableList);
		}
		return mapping.findForward("viewPaybleReceivable");
		
		
	}
	public ActionForward showBankInfo(ActionMapping mapping,ActionForm form,
			HttpServletRequest request,HttpServletResponse response)
	throws Exception {
		LoggerMsg.info("In  ContactRecordingButtonsAction showBankInfo()----------------------------"); 
		HttpSession session=request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here showBankInfo method of ContactRecordingButtonsAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
	
		 String loanId=request.getParameter("loanId");
		  logger.info("loanId::::::::::::::::::::::"+loanId);
		  ViewpayableRecievableVo vo =new ViewpayableRecievableVo();
		  CollDAO coll=(CollDAO)DaoImplInstanceFactory.getDaoImplInstance(CollDAO.IDENTITY);
		  logger.info("Implementation class: "+coll.getClass());
		ArrayList<CollCommonVO> bankInfoList= coll.getBankInfo(loanId);
		if(bankInfoList.size()>0){
		request.setAttribute("list", bankInfoList);
		}else{
			request.setAttribute("sms", "No");	
		}
		request.setAttribute("totalRecordSize", bankInfoList.size());
		request.setAttribute("bankInfo", "Yes");	
		return mapping.findForward("viewBankInfo");
		
		
	}
	public ActionForward showGuarantorInfo(ActionMapping mapping,ActionForm form,
			HttpServletRequest request,HttpServletResponse response)
	throws Exception {
		LoggerMsg.info("In  ContactRecordingButtonsAction showGuarantorInfo()----------------------------"); 
		HttpSession session=request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here showGuarantorInfo method of ContactRecordingButtonsAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
	
		 String loanId=request.getParameter("loanId");
		  logger.info("loanId::::::::::::::::::::::"+loanId);
		  ViewpayableRecievableVo vo =new ViewpayableRecievableVo();
		  CollDAO coll=(CollDAO)DaoImplInstanceFactory.getDaoImplInstance(CollDAO.IDENTITY);
		  logger.info("Implementation class: "+coll.getClass());
		ArrayList<CollCustomerAddressVo> gaurentorInfoList= coll.getGuarantorInfo(loanId);
		if(gaurentorInfoList.size()>0){
		request.setAttribute("list", gaurentorInfoList);
		}else{
			request.setAttribute("sms", "No");	
		}
		request.setAttribute("totalRecordSize", gaurentorInfoList.size());
		request.setAttribute("gaurentorInfo", "Yes");	
		return mapping.findForward("viewBankInfo");
		
		
	}
	public ActionForward showSuplierInfo(ActionMapping mapping,ActionForm form,
			HttpServletRequest request,HttpServletResponse response)
	throws Exception {
		logger.info("In  ContactRecordingButtonsAction showBankInfo()----------------------------"); 
		HttpSession session=request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here showSuplierInfo method of ContactRecordingButtonsAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		 String loanId=request.getParameter("loanId");
		  logger.info("loanId::::::::::::::::::::::"+loanId);
		  ViewpayableRecievableVo vo =new ViewpayableRecievableVo();
		  CollDAO coll=(CollDAO)DaoImplInstanceFactory.getDaoImplInstance(CollDAO.IDENTITY);
		  logger.info("Implementation class: "+coll.getClass());
		ArrayList<CollCustomerAddressVo> suplierInfoList= coll.getSuplierInfo(loanId);
		if(suplierInfoList.size()>0){
		request.setAttribute("list", suplierInfoList);
		}else{
			request.setAttribute("sms", "No");	
		}
		request.setAttribute("totalRecordSize", suplierInfoList.size());
		request.setAttribute("suplierInfo", "Yes");	
		return mapping.findForward("viewBankInfo");
	
	}
	/*Code By Arun on 21/06/2012 Starts Here*/
	
	public ActionForward showRefrenceInfo(ActionMapping mapping,ActionForm form,
			HttpServletRequest request,HttpServletResponse response)
	throws Exception {
		LoggerMsg.info("In  ContactRecordingButtonsAction showRefrenceInfo()----------------------------"); 
		HttpSession session=request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here showRefrenceInfo method of ContactRecordingButtonsAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
	
		 String loanId=request.getParameter("loanId");
		  logger.info("loanId::::::::::::::::::::::"+loanId);
		  CollDAO coll=(CollDAO)DaoImplInstanceFactory.getDaoImplInstance(CollDAO.IDENTITY);
		  logger.info("Implementation class: "+coll.getClass());
		 ArrayList<CustomerSaveVo> referenceList= coll.getRefrencesInfo(loanId);
		if(referenceList.size()>0){
			logger.info("referenceList size is >0");
		request.setAttribute("list", referenceList);
		}else{
			request.setAttribute("sms", "No");	
		}
		request.setAttribute("totalRecordSize", referenceList.size());
		request.setAttribute("referenceInfo", "Yes");	
		return mapping.findForward("viewBankInfo");
				
	}
	
	public ActionForward showCoApplicantInfo(ActionMapping mapping,ActionForm form,
			HttpServletRequest request,HttpServletResponse response)
	throws Exception {
		LoggerMsg.info("In  ContactRecordingButtonsAction showCoApplicentInfo()----------------------------"); 
		HttpSession session=request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here showCoApplicentInfo method of ContactRecordingButtonsAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
	
		 String loanId=request.getParameter("loanId");
		  logger.info("loanId::::::::::::::::::::::"+loanId);
		  CollDAO coll=(CollDAO)DaoImplInstanceFactory.getDaoImplInstance(CollDAO.IDENTITY);
		  logger.info("Implementation class: "+coll.getClass());
		 ArrayList<CollCustomerAddressVo> coApplicantList= coll.getCoApplicantInfo(loanId);
		if(coApplicantList.size()>0){
		logger.info("coApplicantList size is >0");
		request.setAttribute("list", coApplicantList);
		}else{
			request.setAttribute("sms", "No");	
		}
		request.setAttribute("totalRecordSize", coApplicantList.size());
		request.setAttribute("coApplicantList", "Yes");	
		return mapping.findForward("viewBankInfo");
				
	}
	/*Code By Arun on 21/06/2012 Ends Here*/
	public void methodForPDF(String reportName,Map<Object,Object> hashMap,Connection connectDatabase,HttpServletResponse response,JasperPrint jasperPrint, HttpServletRequest request)throws Exception
	{
		
		 
		JasperExportManager.exportReportToPdfFile(jasperPrint,request.getRealPath("/reports") + "/" +reportName+".pdf");
		File f=new File(request.getRealPath("/reports") + "/" +reportName+".pdf");
		FileInputStream fin = new FileInputStream(f);
		ServletOutputStream outStream = response.getOutputStream();
		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename='"+reportName+"'.pdf");
		byte[] buffer = new byte[1024];
		int n = 0;
		while ((n = fin.read(buffer)) != -1) 
			outStream.write(buffer, 0, n);			
		outStream.flush();
		fin.close();
		outStream.close();
	}
}
