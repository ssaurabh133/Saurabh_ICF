/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.caps.action;

import java.lang.reflect.InvocationTargetException;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.caps.VO.CollCustomerAddressVo;
import com.caps.dao.CollDAO;
import com.connect.DaoImplInstanceFactory;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

public class CollAddressAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(CollAddressAction.class.getName());


	
	
	public ActionForward save_address(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IllegalAccessException, InvocationTargetException,Exception {
		
		    logger.info("In CustomerAddressAction in save_address");
	 
		    boolean flag =false;
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			String userId="";
			String bDate="";
			if(userobj!=null)
			{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
			}else{
				logger.info("here save_address method of  CollAddressAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			DynaValidatorForm CollAddressValidatorForm= (DynaValidatorForm)form;
			boolean status=false;
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
		CollCustomerAddressVo vo = new CollCustomerAddressVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, CollAddressValidatorForm);
		logger.info("getBpid"+vo.getBpid());
		vo.setAuthorid(userId);
		vo.setAuthordate(bDate);
		vo.setMakerid(userId);
		vo.setMakerdate(bDate);
		 CollDAO coll=(CollDAO)DaoImplInstanceFactory.getDaoImplInstance(CollDAO.IDENTITY);
		  logger.info("Implementation class: "+coll.getClass());
		status = coll.saveCustomerAddress(vo);
		
		if(status){
			request.setAttribute("sms", "S");
			CollAddressValidatorForm.reset(mapping, request);
		}else{
			request.setAttribute("sms", "E");
		}
		 logger.info("status: "+status);
		
		return mapping.findForward("openjsp");
	}
	

	
}