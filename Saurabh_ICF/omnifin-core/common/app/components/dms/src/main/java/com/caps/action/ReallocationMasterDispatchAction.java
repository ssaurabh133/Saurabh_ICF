/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.caps.action;

import java.util.ArrayList;
import org.apache.log4j.Logger;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.caps.VO.ReallocationGridVo;
import com.caps.VO.ReallocationMasterVo;
import com.caps.dao.CollDAO;
import com.connect.DaoImplInstanceFactory;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;


public class ReallocationMasterDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(ReallocationMasterDispatchAction.class.getName());
	
	
	public ActionForward openJsp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception {
		logger.info("openJsp()....");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");

		String userId="";
		if(userobj!=null)
		{
			userId=userobj.getUserId();
		}else{
			logger.info("here openJsp method of  ReallocationMasterDispatchAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
if(request.getAttribute("flagg")!=null){
if(request.getAttribute("flagg").toString().equalsIgnoreCase("No")){
	request.setAttribute("sms","N");  	  
}
}		CollDAO collDAO=(CollDAO)DaoImplInstanceFactory.getDaoImplInstance(CollDAO.IDENTITY);
logger.info("Implementation class: "+collDAO.getClass());
       ArrayList<ReallocationMasterVo> custcatList=collDAO.custcategory();
		ArrayList<ReallocationMasterVo> npastageList=collDAO.npastage();
		ArrayList<ReallocationMasterVo> productList=collDAO.product();
		request.setAttribute("customercatList",custcatList);
		request.setAttribute("npastageList",npastageList);
		request.setAttribute("productList",productList);
		 logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		
			int currentPageLink = 0;
			if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
			{
				currentPageLink=1;
			}
			else
			{
				currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
			}
			
			logger.info("current page link ................ "+request.getParameter("d-49520-p"));
			ReallocationMasterVo reallocVo=new ReallocationMasterVo();
			reallocVo.setMakerId(userId);
			ArrayList<ReallocationGridVo> detailList=new ArrayList<ReallocationGridVo>();
		
			detailList= collDAO.reallocationGrid(reallocVo);
			if(detailList.size()>0){
				 request.setAttribute("list", detailList);
					
					logger.info("list.isEmpty(): "+detailList.isEmpty());
					request.setAttribute("list",detailList);
			}else{
				
					logger.info("In openJsp....");
				
					request.setAttribute("flagg","No");  	  
				
			}
			
			
        return mapping.findForward("success");
			}
	
	public ActionForward updatereAllocation(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		logger.info("In updatereAllocation.......");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
	
		//for check User session start
		
			String bDate="";
			if(userobj!=null)
			{	
				bDate=userobj.getBusinessdate();
			}else{
				logger.info("here updatereAllocation method of  ReallocationMasterDispatchAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		DynaValidatorForm ReallocationDynaValidatorForm= (DynaValidatorForm)form;
		ReallocationGridVo reallocVo=new ReallocationGridVo();
//		ArrayList<ReallocationGridVo> detailList=new ArrayList<ReallocationGridVo>();
		org.apache.commons.beanutils.BeanUtils.copyProperties(reallocVo, ReallocationDynaValidatorForm);
		reallocVo.setAllocationdate(bDate);
		String checkbox[] = request.getParameterValues("checkId");
	String sms="";
	CollDAO collDAO=(CollDAO)DaoImplInstanceFactory.getDaoImplInstance(CollDAO.IDENTITY);
	  logger.info("Implementation class: "+collDAO.getClass());
          boolean status = collDAO.updatereallocation(reallocVo,checkbox);
			
			logger.info("updatereAllocation.....displaying status...."+status);
			if(status)
			{
					sms="M";
					ReallocationDynaValidatorForm.reset(mapping, request);
					request.setAttribute("result",sms);
				}
			else
			{
				sms="E";
				request.setAttribute("result",sms);
			}
			logger.info("result"+request.getAttribute("result"));
		
        return mapping.findForward("success1");
       
	}
	public ActionForward openReallocationJsp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception {
		logger.info("openReallocationJsp()---->");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		if(userobj!=null)
		{
			userId=userobj.getUserId();
		}else{
			logger.info("here openReallocationJsp method of  ReallocationMasterDispatchAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
if(request.getAttribute("flagg")!=null){
if(request.getAttribute("flagg").toString().equalsIgnoreCase("No")){
	request.setAttribute("sms","N");  	  
}
}		CollDAO collDAO=(CollDAO)DaoImplInstanceFactory.getDaoImplInstance(CollDAO.IDENTITY);
        logger.info("Implementation class: "+collDAO.getClass());
        ArrayList<ReallocationMasterVo> custcatList=collDAO.custcategory();
		ArrayList<ReallocationMasterVo> npastageList=collDAO.npastage();
		ArrayList<ReallocationMasterVo> productList=collDAO.product();
		request.setAttribute("customercatList",custcatList);
		request.setAttribute("npastageList",npastageList);
		request.setAttribute("productList",productList);
		 logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		
			int currentPageLink = 0;
			if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
			{
				currentPageLink=1;
			}
			else
			{
				currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
			}
			
			logger.info("current page link ................ "+request.getParameter("d-49520-p"));
			ReallocationMasterVo reallocVo=new ReallocationMasterVo();
			reallocVo.setMakerId(userId);
			ArrayList<ReallocationGridVo> detailList=new ArrayList<ReallocationGridVo>();

			detailList= collDAO.reallocationGrid(reallocVo);
			if(detailList.size()>0){
				 request.setAttribute("list", detailList);
					
					logger.info("list.isEmpty(): "+detailList.isEmpty());
					request.setAttribute("list",detailList);
			}else{
				
					logger.info("In openJsp....");
				
					request.setAttribute("flagg","No");  	  
				
			}
        return mapping.findForward("success");
			}
	
}