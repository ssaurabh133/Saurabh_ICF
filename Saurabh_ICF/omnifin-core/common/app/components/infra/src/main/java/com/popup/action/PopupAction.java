/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.popup.action;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Logger;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringEscapeUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.login.roleManager.UserObject;
import com.popup.dao.popupDao;
import com.popup.vo.PopupVo;
import com.popup.vo.TableVo;

/** 
 * MyEclipse Struts
 * Creation date: 03-08-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class PopupAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(PopupAction.class.getName());
	
	public ActionForward CodeDetails(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response) 
	{
		logger.info("In CodeDetails ........................... ");
		ArrayList<Object> list = new ArrayList<Object>();
		ArrayList<PopupVo> list1 = new ArrayList<PopupVo>();
		ArrayList<TableVo> list2 = new ArrayList<TableVo>();
		HttpSession session = request.getSession();
		String lovId = "";
		if(request.getParameter("hdnLOVId")!=null)
		{
			session.setAttribute("hdnLOVId", request.getParameter("hdnLOVId"));
			lovId = request.getParameter("hdnLOVId");
		}
		popupDao popup=(popupDao) DaoImplInstanceFactory.getDaoImplInstance(popupDao.IDENTITY);
        logger.info("Implementation class: "+popup.getClass()); 
		if(request.getParameter("targetFieldNameLOV")!=null)
			request.setAttribute("targetFieldNameLOV",request.getParameter("targetFieldNameLOV"));
		if(request.getParameter("secondTargetField")!=null)
			request.setAttribute("secondTargetField", request.getParameter("secondTargetField"));
		if(request.getParameter("thirdTargetField")!=null)
			request.setAttribute("thirdTargetField", request.getParameter("thirdTargetField"));
		if(request.getParameter("fourthTargetField")!=null)
			request.setAttribute("fourthTargetField", request.getParameter("fourthTargetField"));
		
		String pParentGroupArr[] ;
		String strParentOptionArr[] ;
		String pParentGroup="" ;
		String strParentOption="" ;
		String strMethod="";
		
		if(request.getParameter("pParentGroup")!=null && request.getParameter("pParentGroup").trim().length()>0)
		{
			pParentGroup=request.getParameter("pParentGroup");
			pParentGroupArr=request.getParameter("pParentGroup").split(",");
			if(pParentGroupArr.length>0)
					session.setAttribute("pParentGroup", pParentGroupArr[0]);
			for(int i=1;i<pParentGroupArr.length;i++)
					session.setAttribute("pParentGroup"+i, pParentGroupArr[i]);
		}
		if(request.getParameter("strParentOption")!=null && request.getParameter("strParentOption").trim().length()>0)
		{
			strParentOption=request.getParameter("strParentOption");
			strParentOptionArr=request.getParameter("strParentOption").split(",");
			if(strParentOptionArr.length>0)
				session.setAttribute("strParentOption", strParentOptionArr[0]);
			for(int i=1;i<strParentOptionArr.length;i++)
				session.setAttribute("strParentOption"+i, strParentOptionArr[i]);
		}
		String method="";
		if(request.getParameter("strMethod")!=null)
		{
			method=request.getParameter("strMethod");
			request.setAttribute("strMethod", request.getParameter("strMethod"));
		}
		String branchId="";
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj!=null && userobj.getBranchId()!=null)
			branchId=userobj.getBranchId();
		ArrayList childLOVParam = new ArrayList();
		try 
		{
			ArrayList mainlist = new ArrayList();
			ArrayList subList = new ArrayList();			
			String variableName="";
			String variableType="";
			String variableValue="";
			String childLOVValue="";
			String query = "SELECT VARIABLE_NAME,TYPE,VALUE FROM lov_child_table WHERE LOV_ID='"+lovId+"' order by LOV_ID";
			logger.info("query "+query);
			mainlist = ConnectionDAO.sqlSelect(query);
			for (int i = 0; i < mainlist.size(); i++) 
			{
				subList = (ArrayList) mainlist.get(i);
				if (subList.size() > 0)
				{
					ArrayList subChildLOVParam = new ArrayList();
					variableName =StringEscapeUtils.escapeHtml(CommonFunction.checkNull(subList.get(0))).trim();
					variableType=StringEscapeUtils.escapeHtml(CommonFunction.checkNull(subList.get(1))).trim();
					variableValue=StringEscapeUtils.escapeHtml(CommonFunction.checkNull(subList.get(2))).trim();
					subChildLOVParam.add(variableName);
					if(CommonFunction.checkNull(variableType).equalsIgnoreCase("request"))
						subChildLOVParam.add(request.getParameter(variableValue));
					else if(CommonFunction.checkNull(variableType).equalsIgnoreCase("session"))
					{
						if(!CommonFunction.checkNull(session.getAttribute(variableValue)).equalsIgnoreCase(""))
							subChildLOVParam.add(session.getAttribute(variableValue));
					}
					childLOVParam.add(subChildLOVParam);
				}
			}
		} 
		catch (Exception e) 
		{e.printStackTrace();}
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
			currentPageLink=1;
		else
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		
		ArrayList resultList = new 	ArrayList();
		int lovCount=0;
		String lct=CommonFunction.checkNull(session.getAttribute("lovCount"));
		if(CommonFunction.checkNull(lct).trim().equalsIgnoreCase(""))
			lovCount=0;
		else
			lovCount=Integer.parseInt(lct);		
		
		resultList = popup.fetchData(request.getParameter("hdnLOVId"),pParentGroup,strParentOption,branchId, currentPageLink,method,childLOVParam,lovCount);
		lovCount=(Integer)resultList.get(0);
		list=(ArrayList)resultList.get(1);
		session.removeAttribute("lovCount");
		session.setAttribute("lovCount",lovCount);
		Iterator<Object> it = list.iterator();
		int i=0;
		while(i<list.size()-1)
		{
			list1.add((PopupVo) it.next());
			i++;
		}
		list2.add((TableVo) it.next());
		
		Iterator<TableVo> it2 = list2.iterator();
		TableVo  tb1 = (TableVo) it2.next();
		
		String noOfColumn =tb1.getNoOfColumn();
		int totalRecords =tb1.getTotalRecordSize();
		request.setAttribute("noOfColumn", noOfColumn);
			
		if(noOfColumn=="2")
		{
			session.setAttribute("two", "two");
			session.removeAttribute("three");
			session.removeAttribute("four");
			session.removeAttribute("five");
		}
		else if(noOfColumn=="3")
		{
			session.setAttribute("three", "three");
			session.removeAttribute("two");
			session.removeAttribute("four");
			session.removeAttribute("five");
		}
		else if(noOfColumn=="4")
		{
			session.setAttribute("four", "four");
			session.removeAttribute("two");
			session.removeAttribute("three");
			session.removeAttribute("five");
		}
		else if(noOfColumn=="5")
		{
			session.setAttribute("five", "five");
			session.removeAttribute("two");
			session.removeAttribute("three");
			session.removeAttribute("four");
		}
		request.setAttribute("list",list1);	
		session.setAttribute("listForTable",list2.get(0));		
		return mapping.findForward("success");
	}
	
	public ActionForward CodeDetailsByParameter(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response) 
	{
		logger.info("In CodeDetailsByParameter ........................... ");
		HttpSession session = request.getSession();
		String lovId = "";
		String nextField ="";
		String lovDesc ="";
		String recordId="";		
		String branchId="";
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj!=null && userobj.getBranchId()!=null)
			branchId=userobj.getBranchId();
		popupDao popup=(popupDao)DaoImplInstanceFactory.getDaoImplInstance(popupDao.IDENTITY);
        logger.info("Implementation class: "+popup.getClass()); 
				
		if(request.getParameter("targetFieldNameLOV")!=null)
			request.setAttribute("targetFieldNameLOV",request.getParameter("targetFieldNameLOV"));
		if(request.getParameter("secondTargetField")!=null)
			request.setAttribute("secondTargetField", request.getParameter("secondTargetField"));
		if(request.getParameter("thirdTargetField")!=null)
			request.setAttribute("thirdTargetField", request.getParameter("thirdTargetField"));
		if(request.getParameter("fourthTargetField")!=null)
			request.setAttribute("fourthTargetField", request.getParameter("fourthTargetField"));
		
		String pParentGroup ="";
		String strParentOption ="";
		String strMethod="";
		if(request.getParameter("pParentGroup")!=null && !request.getParameter("pParentGroup").equals(""))
		{
			pParentGroup=request.getParameter("pParentGroup");
			session.setAttribute("pParentGroup", request.getParameter("pParentGroup"));
		}				
		if(session.getAttribute("pParentGroup1")!=null)
			pParentGroup=pParentGroup+","+session.getAttribute("pParentGroup1").toString();
		if(session.getAttribute("pParentGroup2")!=null)
			pParentGroup=pParentGroup+","+session.getAttribute("pParentGroup2").toString();
		if(session.getAttribute("strParentOption")!=null)
			strParentOption=session.getAttribute("strParentOption").toString();
		if(session.getAttribute("strParentOption1")!=null)
			strParentOption=strParentOption+","+session.getAttribute("strParentOption1").toString();
		if(session.getAttribute("strParentOption2")!=null)
			strParentOption=strParentOption+","+session.getAttribute("strParentOption2").toString();
		String method="";
		if(request.getParameter("strMethod")!=null)
		{
			method=request.getParameter("strMethod");
			request.setAttribute("strMethod", request.getParameter("strMethod"));
		}
		if(session.getAttribute("hdnLOVId")!=null)
			lovId = session.getAttribute("hdnLOVId").toString();
		ArrayList childLOVParam = new ArrayList();
		
		try {

			ArrayList mainlist = new ArrayList();
			ArrayList subList = new ArrayList();
			
			String variableName="";
			String variableType="";
			String variableValue="";
			String childLOVValue="";
			String query = "SELECT VARIABLE_NAME,TYPE,VALUE FROM lov_child_table WHERE LOV_ID='"+lovId+"'";
			logger.info("query lov_child_table  : "+query);
			mainlist = ConnectionDAO.sqlSelect(query);
			for (int i = 0; i < mainlist.size(); i++) 
			{
				subList = (ArrayList) mainlist.get(i);
				if (subList.size() > 0)
				{
					ArrayList subChildLOVParam = new ArrayList();
					variableName =StringEscapeUtils.escapeHtml(CommonFunction.checkNull(subList.get(0))).trim();
					variableType=StringEscapeUtils.escapeHtml(CommonFunction.checkNull(subList.get(1))).trim();
					variableValue=StringEscapeUtils.escapeHtml(CommonFunction.checkNull(subList.get(2))).trim();
					subChildLOVParam.add(variableName);
					if(variableType.equalsIgnoreCase("request"))
						subChildLOVParam.add(request.getParameter(variableValue));
					else if(variableType.equalsIgnoreCase("session"))
						subChildLOVParam.add(session.getAttribute(variableValue).toString());
					childLOVParam.add(subChildLOVParam);
				}
			}
		} 
		catch (Exception e) 
		{e.printStackTrace();}
		
		
		String LovListItemsIds="";
		if(request.getParameter("LovListItemsIds")!=null)
		{
			LovListItemsIds=request.getParameter("LovListItemsIds");
			request.setAttribute("LovListItemsIds", LovListItemsIds);			
		}		
		if(request.getParameter("nextField")!=null)
			nextField = request.getParameter("nextField");
		if(request.getParameter("lovDesc")!=null && request.getParameter("lovDesc").length()>0)
			lovDesc = request.getParameter("lovDesc");
		ArrayList<PopupVo> list1 = new ArrayList<PopupVo>();
		ArrayList<TableVo> list2 = new ArrayList<TableVo>();		
		logger.info("page number is ................ "+request.getParameter("hdCurrPg"));
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
			currentPageLink=1;
		else
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		String multiLoveFlag="";
		ArrayList<Object> list= new ArrayList<Object>();
		if(request.getParameter("multiLoveFlag")!=null && request.getParameter("multiLoveFlag")!="")
		{
			multiLoveFlag=request.getParameter("multiLoveFlag");
			list =popup.MultiSelectfetchDataByParameter(lovDesc,nextField,lovId,strParentOption,currentPageLink,method,LovListItemsIds,branchId,childLOVParam);
		}
		else
		{
			int lovCount=0;
			String lct=CommonFunction.checkNull(session.getAttribute("lovCount"));
			if(CommonFunction.checkNull(lct).trim().equalsIgnoreCase(""))
				lovCount=0;
			else
				lovCount=Integer.parseInt(lct);	
			ArrayList resultList=new ArrayList();
			resultList =popup.fetchDataByParameter(lovDesc,nextField,lovId,strParentOption,currentPageLink,method,branchId,childLOVParam,lovCount);
			lovCount=(Integer)resultList.get(0);
			list=(ArrayList)resultList.get(1);
			session.removeAttribute("lovCount");
			session.setAttribute("lovCount",lovCount);			
		}
		Iterator<Object> it = list.iterator();
		int i=0;
		while(i<list.size()-1)
		{
			
			list1.add((PopupVo) it.next());
			i++;
		}		
		list2.add((TableVo) it.next());
		Iterator<TableVo> it2 = list2.iterator();
		TableVo  tb1 = (TableVo) it2.next();
		String noOfColumn =tb1.getNoOfColumn();
		request.setAttribute("noOfColumn", noOfColumn);
		if(noOfColumn=="2")
		{
			session.setAttribute("two", "two");
			session.removeAttribute("three");
			session.removeAttribute("four");
			session.removeAttribute("five");
		}
		else if(noOfColumn=="3")
		{
			session.setAttribute("three", "three");
			session.removeAttribute("two");
			session.removeAttribute("four");
			session.removeAttribute("five");
		}
		else if(noOfColumn=="4")
		{
			session.setAttribute("four", "four");
			session.removeAttribute("two");
			session.removeAttribute("three");
			session.removeAttribute("five");
		}
		else if(noOfColumn=="5")
		{
			session.setAttribute("five", "five");
			session.removeAttribute("two");
			session.removeAttribute("three");
			session.removeAttribute("four");
		}
		request.setAttribute("list",list1);
		session.setAttribute("listForTable",list2.get(0));
			
		//request.setAttribute("list", list);
		
		if(multiLoveFlag.equalsIgnoreCase(""))
		{
			return mapping.findForward("success");
		}
		else
		{
			return mapping.findForward("multiSuccess");
		}
		
	}
	
	
	// Multi Select LOV Methods
	
	public ActionForward MultiSelectCodeDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		logger.info("In MultiSelectCodeDetails ........................... ");
		ArrayList<Object> list = new ArrayList<Object>();
		ArrayList<PopupVo> list1 = new ArrayList<PopupVo>();
		ArrayList<TableVo> list2 = new ArrayList<TableVo>();
		HttpSession session = request.getSession();
		
		String lovId = "";
		if(request.getParameter("hdnLOVId")!=null)
		{
			session.setAttribute("hdnLOVId", request.getParameter("hdnLOVId"));
			lovId = request.getParameter("hdnLOVId");
		}
		
		
		
		popupDao popup=(popupDao)DaoImplInstanceFactory.getDaoImplInstance(popupDao.IDENTITY);
        logger.info("Implementation class: "+popup.getClass()); 
		//com.popup.dao.popupDaoImpl popup =  new popupDaoImpl();
		if(request.getParameter("targetFieldNameLOV")!=null)
		{
			request.setAttribute("targetFieldNameLOV",request.getParameter("targetFieldNameLOV"));
			logger.info("targetFieldNameLOV................................ "+request.getParameter("targetFieldNameLOV"));
		}
		String pParentGroup ="";
		String strParentOption ="";
		String strMethod="";
		String LovListItemsIds="";
		if(request.getParameter("pParentGroup")!=null)
		{
			pParentGroup=request.getParameter("pParentGroup");
			session.setAttribute("pParentGroup", request.getParameter("pParentGroup"));
		}
		if(request.getParameter("strParentOption")!=null)
		{
			strParentOption=request.getParameter("strParentOption");
			session.setAttribute("strParentOption", request.getParameter("strParentOption"));
		}
		
		
		if(request.getParameter("LovListItemsIds")!=null)
		{
			
			LovListItemsIds=request.getParameter("LovListItemsIds");
			request.setAttribute("LovListItemsIds", LovListItemsIds);
		}
		//logger.info("LovListItemsIds ******************************* "+LovListItemsIds);
		//logger.info("pParentGroup................................ "+pParentGroup);
		//logger.info("strParentOption................................ "+strParentOption);
		
		if(request.getParameter("strMethod")!=null)
		{
			request.setAttribute("strMethod", request.getParameter("strMethod"));
		}
		String branchId="";
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		branchId=userobj.getBranchId();
		
		ArrayList childLOVParam = new ArrayList();
		
		try {

			ArrayList mainlist = new ArrayList();
			ArrayList subList = new ArrayList();
			
			String variableName="";
			String variableType="";
			String variableValue="";
			String childLOVValue="";
			String query = "SELECT VARIABLE_NAME,TYPE,VALUE FROM lov_child_table WHERE LOV_ID='"+lovId+"'";
			logger.info("query "+query);
			mainlist = ConnectionDAO.sqlSelect(query);
			for (int i = 0; i < mainlist.size(); i++) 
			{
				subList = (ArrayList) mainlist.get(i);
				if (subList.size() > 0)
				{
					ArrayList subChildLOVParam = new ArrayList();
					variableName =StringEscapeUtils.escapeHtml(CommonFunction.checkNull(subList.get(0))).trim();
					variableType=StringEscapeUtils.escapeHtml(CommonFunction.checkNull(subList.get(1))).trim();
					variableValue=StringEscapeUtils.escapeHtml(CommonFunction.checkNull(subList.get(2))).trim();
					subChildLOVParam.add(variableName);
					if(variableType.equalsIgnoreCase("request"))
					{
						subChildLOVParam.add(request.getParameter(variableValue));
						logger.info("request ................ "+request.getParameter(variableValue));
					}
					else if(variableType.equalsIgnoreCase("session"))
					{
						subChildLOVParam.add(session.getAttribute(variableValue).toString());
						logger.info("session ................ "+session.getAttribute(variableValue).toString());
					}
					childLOVParam.add(subChildLOVParam);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		
		list = popup.multiSelectFetchData(request.getParameter("hdnLOVId"),pParentGroup,strParentOption,branchId,LovListItemsIds,childLOVParam);
		
		Iterator<Object> it = list.iterator();
		int i=0;
		while(i<list.size()-1)
		{
			
			list1.add((PopupVo) it.next());
			i++;
		}
		list2.add((TableVo) it.next());
		
		Iterator<TableVo> it2 = list2.iterator();
		String noOfColumn =((TableVo) it2.next()).getNoOfColumn();
		request.setAttribute("noOfColumn", noOfColumn);
		//LoggerMsg.info("no of column in action ........................... "+noOfColumn);
		
		if(noOfColumn=="2")
		{
			session.setAttribute("two", "two");
			session.removeAttribute("three");
			session.removeAttribute("four");
			session.removeAttribute("five");
		}
		else if(noOfColumn=="3")
		{
			session.setAttribute("three", "three");
			session.removeAttribute("two");
			session.removeAttribute("four");
			session.removeAttribute("five");
		}
		
		request.setAttribute("list",list1);
		session.setAttribute("listForTable",list2.get(0));
		
		return mapping.findForward("success");
	}
	
	
}