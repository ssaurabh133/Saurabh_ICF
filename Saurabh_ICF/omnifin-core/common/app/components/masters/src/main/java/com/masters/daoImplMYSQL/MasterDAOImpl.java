package com.masters.daoImplMYSQL;

import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.ConnectionDAOforEJB;
import com.connect.PrepStmtObject;
import com.connect.md5;
import com.cp.util.ValidationUtility;
import com.masters.dao.MasterDAO;
import com.masters.vo.ApprovalLevelDefVo;
import com.masters.vo.AutoAllocationDefinitionVo;
import com.masters.vo.BankAccountMasterVo;
import com.masters.vo.BankBranchMasterVo;
import com.masters.vo.BankMasterVo;
import com.masters.vo.BaseRateMasterVo;
import com.masters.vo.BenchmarkRatioVo;
import com.masters.vo.BranchMasterAreaCodeVo;
import com.masters.vo.BranchMasterVo;
import com.masters.vo.BusinessClosureVo;
import com.masters.vo.ChangePasswordMasterVo;
import com.masters.vo.ChargeCodeMasterVo;
import com.masters.vo.ChargeMasterVo;
import com.masters.vo.ConsortiumPartnerVo;
import com.masters.vo.CountryMasterVo;
import com.masters.vo.CrSchemeMasterVo;
import com.masters.vo.DealerMasterVo;
import com.masters.vo.DepartmentMasterVo;
import com.masters.vo.DistrictMasterVo;
import com.masters.vo.DocChildMasterVo;
import com.masters.vo.DocumentChecklistMasterVo;
import com.masters.vo.DocumentMasterVo;
import com.masters.vo.FinancialAnalysisVo;
import com.masters.vo.FinancialPramMasterVo;
import com.masters.vo.GcdGroupMasterVo;
import com.masters.vo.GenericMasterVo;
import com.masters.vo.GoldOrnamentMasterVo;
import com.masters.vo.IndustryMasterVo;
import com.masters.vo.IrrCalculationMasterVo;
import com.masters.vo.MakeModelmasterVO;
import com.masters.vo.MasterVo;
import com.masters.vo.MobileUserMappingVo;
import com.masters.vo.NPAMasterVo;
import com.masters.vo.ProductMasterVo;
import com.masters.vo.RateApprovalVo;
import com.masters.vo.ReasonMasterVo;
import com.masters.vo.RegionMasterVo;
import com.masters.vo.RoleAccessMasterVo;
import com.masters.vo.RoleMasterVo;
import com.masters.vo.SalesExecutiveMasterVo;
import com.masters.vo.ScoringBenchmarkMasterVo;
import com.masters.vo.StateMasterVo;
import com.masters.vo.SubDealerMasterVo;
import com.masters.vo.SubIndustryMasterVo;
import com.masters.vo.UnlockUserVo;
import com.masters.vo.UsedVehiclePricingVo;
import com.masters.vo.UserAccessMasterVo;
import com.masters.vo.UserBranchMasterVo;
import com.masters.vo.UserMasterVo;
import com.masters.vo.VerificationQuestionVo;
import com.masters.vo.pcdMasterVo;
import com.masters.vo.scoreCardMasterVo;
import java.io.PrintStream;
import java.net.URLEncoder;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Random;
import java.util.ResourceBundle;
import java.util.logging.Logger;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.servlet.http.HttpServletRequest;
import org.apache.commons.lang.StringEscapeUtils;
import org.apache.commons.lang.StringUtils;

public class MasterDAOImpl
  implements MasterDAO
{
  private static final Logger logger = Logger.getLogger(MasterDAOImpl.class.getName());
  ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");
  String dateFormatWithTime = this.resource.getString("lbl.dateWithTimeInDao");
  String dateFormat = this.resource.getString("lbl.dateInDao");

  DecimalFormat myFormatter = new DecimalFormat("###,##0.00######");
  int no = Integer.parseInt(this.resource.getString("msg.pageSizeForMaster"));
  Connection con = null;
  ResultSet rs = null;
  Statement stmt = null;

  public ArrayList<BankBranchMasterVo> modifyBankDetailsDao(Object ob) { BankBranchMasterVo bankBranchMasterVo = (BankBranchMasterVo)ob;

    ArrayList searchlist = new ArrayList();
    String bankBranchID = "";
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In modifyBankDetailsDao()....................");
      StringBuffer bufInsSql = new StringBuffer();
      bankBranchID = CommonFunction.checkNull(StringEscapeUtils.escapeSql(bankBranchMasterVo.getBankBranchId()));

      bufInsSql.append("SELECT BANK_BRANCH_CODE,BANK_BRANCH_NAME,BRANCH_MICR_CODE,BRANCH_IFCS_CODE,");
      bufInsSql.append(" BANK_ID,(SELECT E.BANK_NAME FROM com_bank_m  E WHERE  E.BANK_ID=D.BANK_ID ) AS BANK_DESC, ");
      bufInsSql.append(" CONTACT_PERSON,PERSON_DESIGNATION,ADDRESS_1,ADDRESS_2,ADDRESS_3,");
      bufInsSql.append(" CITY_ID,(SELECT A.DISTRICT_DESC FROM com_district_m A WHERE  A.DISTRICT_ID=D.CITY_ID ) AS CITY_DESC,");
      bufInsSql.append(" STATE_ID,(SELECT B.STATE_DESC FROM com_state_m B WHERE  B.STATE_ID=D.STATE_ID ) AS STATE_DESC,");
      bufInsSql.append(" COUNTRY_ID,(SELECT C.COUNTRY_DESC FROM com_country_m C WHERE  C.COUNTRY_ID=D.COUNTRY_ID ) AS COUNTRY_DESC,");
      bufInsSql.append(new StringBuilder().append(" ZIP_CODE,PHONE1,PHONE2,FAX,EMAIL_ID,IF(REC_STATUS='A','Active','Inactive')AS REC_STATUS,ECS_Status,ACH_STATUS FROM com_bankbranch_m D WHERE BANK_BRANCH_ID='").append(bankBranchID).append("' ").toString());

      logger.info(new StringBuilder().append("Query: ").append(bufInsSql.toString()).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("searchBankBranchDaoData size is....").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0)
        {
          bankBranchMasterVo.setBankBranchCodeModify(new StringBuilder().append("<a href=bankbranchMasterSearch.do?method=modifyDetails&bankbranchSearchId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          bankBranchMasterVo.setBankBranchCode(CommonFunction.checkNull(data.get(0)).toString());
          bankBranchMasterVo.setBankBranchName(CommonFunction.checkNull(data.get(1)).toString());
          bankBranchMasterVo.setBranchMICRCode(CommonFunction.checkNull(data.get(2)).toString());
          bankBranchMasterVo.setBranchIFCSCode(CommonFunction.checkNull(data.get(3)).toString());

          bankBranchMasterVo.setLbxBankID(CommonFunction.checkNull(data.get(4)).toString());
          bankBranchMasterVo.setBank(CommonFunction.checkNull(data.get(5)).toString());

          bankBranchMasterVo.setContactPerson(CommonFunction.checkNull(data.get(6)).toString());
          bankBranchMasterVo.setPersonDesignation(CommonFunction.checkNull(data.get(7)).toString());
          bankBranchMasterVo.setAddress1(CommonFunction.checkNull(data.get(8)).toString());
          bankBranchMasterVo.setAddress2(CommonFunction.checkNull(data.get(9)).toString());
          bankBranchMasterVo.setAddress3(CommonFunction.checkNull(data.get(10)).toString());

          bankBranchMasterVo.setTxtDistCode(CommonFunction.checkNull(data.get(11)).toString());
          bankBranchMasterVo.setDist(CommonFunction.checkNull(data.get(12)).toString());

          bankBranchMasterVo.setTxtStateCode(CommonFunction.checkNull(data.get(13)).toString());
          bankBranchMasterVo.setState(CommonFunction.checkNull(data.get(14)).toString());

          bankBranchMasterVo.setTxtDistCode(CommonFunction.checkNull(data.get(15)).toString());
          bankBranchMasterVo.setCountry(CommonFunction.checkNull(data.get(16)).toString());

          bankBranchMasterVo.setZipCode(CommonFunction.checkNull(data.get(17)).toString());
          bankBranchMasterVo.setPhone1(CommonFunction.checkNull(data.get(18)).toString());
          bankBranchMasterVo.setPhone2(CommonFunction.checkNull(data.get(19)).toString());
          bankBranchMasterVo.setFax(CommonFunction.checkNull(data.get(20)).toString());
          bankBranchMasterVo.setEmail(CommonFunction.checkNull(data.get(21)).toString());
          bankBranchMasterVo.setBankBranchStatus(CommonFunction.checkNull(data.get(22)).toString());
          bankBranchMasterVo.setEcsStatus(CommonFunction.checkNull(data.get(23)).toString());
          bankBranchMasterVo.setAchStatus(CommonFunction.checkNull(data.get(24)).toString());
          bankBranchMasterVo.setBankBranchId(bankBranchID);
          detailList.add(bankBranchMasterVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean insertBankBranchMaster(Object ob)
  {
    boolean status = false;
    BankBranchMasterVo bankBranchMasterVo = (BankBranchMasterVo)ob;
    String query = new StringBuilder().append("SELECT BANK_BRANCH_CODE FROM com_bankbranch_m where  BANK_BRANCH_CODE='").append(StringEscapeUtils.escapeSql(bankBranchMasterVo.getBankBranchCode().trim())).append("' and  BANK_ID='").append(StringEscapeUtils.escapeSql(bankBranchMasterVo.getLbxBankID().trim())).append("'").toString();

    logger.info(new StringBuilder().append("in insert bank branch master dao Impl..").append(query).toString());
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    boolean st = ConnectionDAOforEJB.checkStatus(query);
    String stat = "X";
    String ecsStatus = "X";
    String achStatus = "X";
    logger.info(new StringBuilder().append("in insert bank branch bankBranchMasterVo.getBankBranchStatus()..").append(bankBranchMasterVo.getBankBranchStatus()).toString());

    logger.info(new StringBuilder().append("in bankBranchMasterVo.getEcsStatus()..").append(bankBranchMasterVo.getEcsStatus()).toString());
    try
    {
      if (!st) {
        if ((bankBranchMasterVo.getBankBranchStatus() != null) && (bankBranchMasterVo.getBankBranchStatus().equalsIgnoreCase("on")))
        {
          stat = "A";
        }
        else stat = "X";

        if ((bankBranchMasterVo.getEcsStatus() != null) && (bankBranchMasterVo.getEcsStatus().equalsIgnoreCase("on")))
        {
          ecsStatus = "A";
        }
        else ecsStatus = "X";

        if ((bankBranchMasterVo.getAchStatus() != null) && (bankBranchMasterVo.getAchStatus().equalsIgnoreCase("on")))
        {
          achStatus = "A";
        }
        else achStatus = "X";

        logger.info("In insertBankBranchMaster()........");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("INSERT INTO com_bankbranch_m(BANK_BRANCH_CODE,BANK_BRANCH_NAME,BRANCH_MICR_CODE,BRANCH_IFCS_CODE,BANK_ID, ");
        bufInsSql.append(" CONTACT_PERSON,PERSON_DESIGNATION,ADDRESS_1,ADDRESS_2,ADDRESS_3,CITY_ID,STATE_ID,COUNTRY_ID,ZIP_CODE,PHONE1,");
        bufInsSql.append(" PHONE2,FAX,EMAIL_ID,ECS_Status,ACH_STATUS,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

        if (CommonFunction.checkNull(bankBranchMasterVo.getBankBranchCode()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getBankBranchCode().trim());

        if (CommonFunction.checkNull(bankBranchMasterVo.getBankBranchName()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getBankBranchName().trim());

        if (CommonFunction.checkNull(bankBranchMasterVo.getBranchMICRCode()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getBranchMICRCode().trim());

        if (CommonFunction.checkNull(bankBranchMasterVo.getBranchIFCSCode()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getBranchIFCSCode().trim());

        if (CommonFunction.checkNull(bankBranchMasterVo.getLbxBankID()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getLbxBankID().trim());

        if (CommonFunction.checkNull(bankBranchMasterVo.getContactPerson()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getContactPerson().trim());

        if (CommonFunction.checkNull(bankBranchMasterVo.getPersonDesignation()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getPersonDesignation().trim());

        if (CommonFunction.checkNull(bankBranchMasterVo.getAddress1()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getAddress1().trim());

        if (CommonFunction.checkNull(bankBranchMasterVo.getAddress2()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getAddress2().trim());

        if (CommonFunction.checkNull(bankBranchMasterVo.getAddress3()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getAddress3().trim());

        if (CommonFunction.checkNull(bankBranchMasterVo.getTxtDistCode()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getTxtDistCode().trim());

        if (CommonFunction.checkNull(bankBranchMasterVo.getTxtStateCode()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getTxtStateCode().trim());

        if (CommonFunction.checkNull(bankBranchMasterVo.getTxtCountryCode()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getTxtCountryCode().trim());

        if (CommonFunction.checkNull(bankBranchMasterVo.getZipCode()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getZipCode().trim());

        if (CommonFunction.checkNull(bankBranchMasterVo.getPhone1()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getPhone1().trim());

        if (CommonFunction.checkNull(bankBranchMasterVo.getPhone2()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getPhone2().trim());

        if (CommonFunction.checkNull(bankBranchMasterVo.getFax()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getFax().trim());

        if (CommonFunction.checkNull(bankBranchMasterVo.getEmail()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getEmail().trim());

        if (CommonFunction.checkNull(ecsStatus).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(ecsStatus);

        if (CommonFunction.checkNull(achStatus).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(achStatus);

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(bankBranchMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getMakerId());

        if (CommonFunction.checkNull(bankBranchMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getMakerDate());

        if (CommonFunction.checkNull(bankBranchMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getMakerId());

        if (CommonFunction.checkNull(bankBranchMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankBranchMasterVo.getMakerDate());

        insertPrepStmtObject.setSql(bufInsSql.toString());

        logger.info(new StringBuilder().append("IN insertBankBranchMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);

        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In insertBankBranchMaster status is.................").append(status).toString());
        bufInsSql = null;
        insertPrepStmtObject = null;

        if (status)
        {
          ArrayList qryList1 = new ArrayList();
          insertPrepStmtObject = new PrepStmtObject();
          String qry = " SELECT MAX(BANK_BRANCH_ID) FROM  com_bankbranch_m for update ";
          String bank_branch_id = ConnectionDAO.singleReturn(qry);

          String qryupdate = new StringBuilder().append(" UPDATE com_bankbranch_m SET BANK_BRANCH_CODE='").append(bank_branch_id).append("' WHERE BANK_BRANCH_ID='").append(bank_branch_id).append("'").toString();

          insertPrepStmtObject.setSql(qryupdate.toString());
          logger.info(new StringBuilder().append("IN insertBankBranchMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
          qryList1.add(insertPrepStmtObject);
          status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList1);
          logger.info(new StringBuilder().append("updateStatus for bank_branch_code>>-----------!!!").append(qryupdate).toString());
          qryList1.clear();
          qryList1 = null;
          insertPrepStmtObject = null;
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public boolean saveModifyBankDetailsDao(Object ob)
  {
    boolean status = false;
    BankBranchMasterVo bankBranchMasterVo = (BankBranchMasterVo)ob;
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "";
    String ecsStatus = "";
    String achStatus = "";
    try {
      String bankBranchId = CommonFunction.checkNull(bankBranchMasterVo.getBankBranchId());
      String query = new StringBuilder().append("SELECT BANK_BRANCH_CODE FROM com_bankbranch_m where  BANK_BRANCH_CODE='").append(StringEscapeUtils.escapeSql(bankBranchMasterVo.getBankBranchCode().trim())).append("' and  ").append("BANK_ID='").append(StringEscapeUtils.escapeSql(bankBranchMasterVo.getLbxBankID().trim())).append("' and BANK_BRANCH_ID <> '").append(bankBranchId).append("'").toString();

      logger.info(new StringBuilder().append("query------------>").append(query).toString());
      boolean st = ConnectionDAOforEJB.checkStatus(query);
      if (!st) {
        if ((bankBranchMasterVo.getBankBranchStatus() != null) && (bankBranchMasterVo.getBankBranchStatus().equalsIgnoreCase("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info(new StringBuilder().append("in bankBranchMasterVo.getEcsStatus()..").append(bankBranchMasterVo.getEcsStatus()).toString());
        if ((bankBranchMasterVo.getEcsStatus() != null) && (bankBranchMasterVo.getEcsStatus().equalsIgnoreCase("on")))
        {
          ecsStatus = "A";
        }
        else ecsStatus = "X";

        if ((bankBranchMasterVo.getAchStatus() != null) && (bankBranchMasterVo.getAchStatus().equalsIgnoreCase("on")))
        {
          achStatus = "A";
        }
        else achStatus = "X";

        logger.info("In saveModifyBankDetailsDao()........");
        StringBuffer bufInsSql = new StringBuffer();

        bufInsSql.append("UPDATE com_bankbranch_m SET BANK_BRANCH_NAME=?,BRANCH_MICR_CODE=?,BRANCH_IFCS_CODE=?,BANK_ID=?,CONTACT_PERSON=?,PERSON_DESIGNATION=?,ADDRESS_1=?,ADDRESS_2=?,ADDRESS_3=?,CITY_ID=?,STATE_ID=?,COUNTRY_ID=?,ZIP_CODE=?,PHONE1=?,");
        bufInsSql.append(new StringBuilder().append(" PHONE2=?,FAX=?,EMAIL_ID=?,ECS_Status=?,ACH_STATUS=?,REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) WHERE BANK_BRANCH_ID='").append(bankBranchId).append("' ").toString());

        if (CommonFunction.checkNull(bankBranchMasterVo.getBankBranchName()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(bankBranchMasterVo.getBankBranchName().trim());
        }
        if (CommonFunction.checkNull(bankBranchMasterVo.getBranchMICRCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(bankBranchMasterVo.getBranchMICRCode().trim());
        }
        if (CommonFunction.checkNull(bankBranchMasterVo.getBranchIFCSCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(bankBranchMasterVo.getBranchIFCSCode().trim());
        }
        if (CommonFunction.checkNull(bankBranchMasterVo.getLbxBankID()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(bankBranchMasterVo.getLbxBankID().trim());
        }
        if (CommonFunction.checkNull(bankBranchMasterVo.getContactPerson()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(bankBranchMasterVo.getContactPerson().trim());
        }
        if (CommonFunction.checkNull(bankBranchMasterVo.getPersonDesignation()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(bankBranchMasterVo.getPersonDesignation().trim());
        }
        if (CommonFunction.checkNull(bankBranchMasterVo.getAddress1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(bankBranchMasterVo.getAddress1().trim());
        }
        if (CommonFunction.checkNull(bankBranchMasterVo.getAddress2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(bankBranchMasterVo.getAddress2().trim());
        }
        if (CommonFunction.checkNull(bankBranchMasterVo.getAddress3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(bankBranchMasterVo.getAddress3().trim());
        }
        if (CommonFunction.checkNull(bankBranchMasterVo.getTxtDistCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(bankBranchMasterVo.getTxtDistCode().trim());
        }
        if (CommonFunction.checkNull(bankBranchMasterVo.getTxtStateCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(bankBranchMasterVo.getTxtStateCode().trim());
        }
        if (CommonFunction.checkNull(bankBranchMasterVo.getTxtCountryCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(bankBranchMasterVo.getTxtCountryCode().trim());
        }
        if (CommonFunction.checkNull(bankBranchMasterVo.getZipCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(bankBranchMasterVo.getZipCode().trim());
        }
        if (CommonFunction.checkNull(bankBranchMasterVo.getPhone1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(bankBranchMasterVo.getPhone1().trim());
        }
        if (CommonFunction.checkNull(bankBranchMasterVo.getPhone2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(bankBranchMasterVo.getPhone2().trim());
        }
        if (CommonFunction.checkNull(bankBranchMasterVo.getFax()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(bankBranchMasterVo.getFax().trim());
        }
        if (CommonFunction.checkNull(bankBranchMasterVo.getEmail()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(bankBranchMasterVo.getEmail().trim());
        }
        logger.info(new StringBuilder().append("ecsStatus..").append(ecsStatus).toString());
        if (CommonFunction.checkNull(ecsStatus).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(ecsStatus);

        if (CommonFunction.checkNull(achStatus).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(achStatus);

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(bankBranchMasterVo.getMakerId())).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(bankBranchMasterVo.getMakerId()).trim());
        if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(bankBranchMasterVo.getMakerDate()).trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(bankBranchMasterVo.getMakerDate()).trim());
        }

        insertPrepStmtObject.setSql(bufInsSql.toString());

        logger.info(new StringBuilder().append("IN insertBankBranchMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In insertBankBranchMaster status is.................").append(status).toString());
        bufInsSql = null;
        insertPrepStmtObject = null;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList searchBankBranchDao(Object ob)
  {
    ArrayList searchlist = new ArrayList();
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    String bankBranchCode = "";
    String bankBranchName = "";
    String branchMICRCode = "";
    String branchIFCSCode = "";
    BankBranchMasterVo bankBranchMasterVo = (BankBranchMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchBankBranchDao...............");
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bankBranchCode = StringEscapeUtils.escapeSql(CommonFunction.checkNull(bankBranchMasterVo.getBankBranchSearchCode())).trim();
      bankBranchName = StringEscapeUtils.escapeSql(CommonFunction.checkNull(bankBranchMasterVo.getBankBranchSearchName())).trim();
      branchMICRCode = StringEscapeUtils.escapeSql(CommonFunction.checkNull(bankBranchMasterVo.getBranchMICRCode())).trim();
      branchIFCSCode = StringEscapeUtils.escapeSql(CommonFunction.checkNull(bankBranchMasterVo.getBranchIFCSCode())).trim();

      bufInsSql.append("SELECT BANK_BRANCH_ID,BANK_BRANCH_NAME,BRANCH_MICR_CODE,BRANCH_IFCS_CODE,IF(B.REC_STATUS='A','Active','Inactive')AS REC_STATUS,BANK_BRANCH_ID,A.BANK_NAME ");
      bufInsSql.append(" FROM com_bankbranch_m B,COM_BANK_M A WHERE A.BANK_ID=B.BANK_ID  ");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM com_bankbranch_m B,COM_BANK_M A WHERE A.BANK_ID=B.BANK_ID ");

      if (!bankBranchCode.equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" AND A.BANK_NAME LIKE '%").append(bankBranchCode).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("  AND A.BANK_NAME LIKE '%").append(bankBranchCode).append("%'").toString());
      }
      if (!bankBranchName.equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" AND BANK_BRANCH_NAME like '%").append(bankBranchName).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("  AND BANK_BRANCH_NAME like '%").append(bankBranchName).append("%' ").toString());
      }
      if (!branchMICRCode.equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" AND BRANCH_MICR_CODE LIKE '%").append(branchMICRCode).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND BRANCH_MICR_CODE LIKE '%").append(branchMICRCode).append("%' ").toString());
      }
      if (!branchIFCSCode.equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" AND BRANCH_IFCS_CODE like '%").append(branchIFCSCode).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND BRANCH_IFCS_CODE like '%").append(branchIFCSCode).append("%' ").toString());
      }

      bufInsSql.append(" ORDER BY BANK_BRANCH_CODE");

      logger.info(new StringBuilder().append("IN searchBankBranchDao() search query1 ### ").append(bufInsSql.toString()).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((bankBranchCode.trim() == null) && (bankBranchName.trim() == null)) || ((bankBranchCode.trim().equalsIgnoreCase("")) && (bankBranchName.trim().equalsIgnoreCase(""))) || (bankBranchMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(bankBranchMasterVo.getCurrentPageLink()).toString());
        if (bankBranchMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (bankBranchMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      for (int i = 0; i < searchlist.size(); i++) {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          BankBranchMasterVo bankVo = new BankBranchMasterVo();

          bankVo.setBankBranchCodeModify(new StringBuilder().append("<a href=bankbranchMasterSearch.do?method=modifyDetails&bankbranchSearchId=").append(CommonFunction.checkNull(data.get(5)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          bankVo.setBankBranchCode(CommonFunction.checkNull(data.get(0)).toString());
          bankVo.setBankBranchName(CommonFunction.checkNull(data.get(1)).toString());
          bankVo.setBranchMICRCode(CommonFunction.checkNull(data.get(2)).toString());
          bankVo.setBranchIFCSCode(CommonFunction.checkNull(data.get(3)).toString());
          bankVo.setBankBranchStatus(CommonFunction.checkNull(data.get(4)).toString());
          bankVo.setBank(CommonFunction.checkNull(data.get(6)).toString());
          bankVo.setTotalRecordSize(count);
          detailList.add(bankVo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return detailList;
  }

  public String insertGroupCodeMaster(GcdGroupMasterVo gcdGroupMasterVo)
  {
    boolean status = false;
    logger.info(new StringBuilder().append("In insertGcdGroupMaster..........").append(gcdGroupMasterVo.getGroupDescription()).toString());

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String groupId = "";
    StringBuffer query = new StringBuffer();
    StringBuffer bufInsSql = new StringBuffer();
    try {
      query.append(new StringBuilder().append("SELECT GROUP_DESC FROM gcd_group_m where  GROUP_DESC='").append(StringEscapeUtils.escapeSql(gcdGroupMasterVo.getGroupDescription().trim())).append("'").toString());
      logger.info(new StringBuilder().append("In insertGcdGroupMaster.....................................Dao Impl").append(query).toString());
      boolean st = ConnectionDAOforEJB.checkStatus(query.toString());
      logger.info(new StringBuilder().append("st -----").append(st).toString());
      if (st)
      {
        groupId = "EX";
      }

      if (!st) {
        if ((gcdGroupMasterVo.getRecStatus() != null) && (gcdGroupMasterVo.getRecStatus().equalsIgnoreCase("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info("In insert Gcd Group  master");

        bufInsSql.append("INSERT INTO gcd_group_m(GROUP_DESC,GROUP_EXPOSURE_LIMIT,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

        if (CommonFunction.checkNull(gcdGroupMasterVo.getGroupDescription()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(gcdGroupMasterVo.getGroupDescription().toUpperCase().trim());

        if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(gcdGroupMasterVo.getGroupExposureLimit()).trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(gcdGroupMasterVo.getGroupExposureLimit()).trim()).toString());
        }

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(gcdGroupMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(gcdGroupMasterVo.getMakerId());

        if (CommonFunction.checkNull(gcdGroupMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(gcdGroupMasterVo.getMakerDate());

        if (CommonFunction.checkNull(gcdGroupMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(gcdGroupMasterVo.getMakerId());

        if (CommonFunction.checkNull(gcdGroupMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(gcdGroupMasterVo.getMakerDate());

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN insertGroupCodeMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In insertGroupCodeMaster status.....................").append(status).toString());
        if (status)
        {
          String query1 = "select max(GROUP_ID) FROM gcd_group_m for update";
          groupId = ConnectionDAOforEJB.singleReturn(query1);
          if (!groupId.equalsIgnoreCase("")) {
            groupId = "S";
          }
          query1 = null;
        }
        else {
          groupId = "E";
        }
      }
    } catch (Exception e) {
      groupId = "E";
      e.printStackTrace();
    }

    return groupId;
  }

  public ArrayList<GcdGroupMasterVo> modifyGcdGroupDetailsDao(Object ob)
  {
    GcdGroupMasterVo gcdGroupMasterVo = (GcdGroupMasterVo)ob;
    ArrayList searchlist = new ArrayList();
    String groupId = "";
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchBankBranchDao()....................");
      StringBuffer bufInsSql = new StringBuffer();
      groupId = CommonFunction.checkNull(StringEscapeUtils.escapeSql(gcdGroupMasterVo.getGcdgroupId()));

      bufInsSql.append(" SELECT GROUP_ID,GROUP_DESC,GROUP_EXPOSURE_LIMIT,IF(REC_STATUS='A','Active','Inactive')AS REC_STATUS ");

      bufInsSql.append(new StringBuilder().append(" FROM gcd_group_m WHERE GROUP_ID='").append(groupId).append("' ORDER BY GROUP_ID").toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("searchGcdGroupDaoData size is....").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("searchGcdGroupDaoList ").append(searchlist.get(i).toString()).toString());

        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0)
        {
          gcdGroupMasterVo.setGcdgroupIdModify(new StringBuilder().append("<a href=gcdGroupMasterSearch.do?method=modifyDetails&gcdgroupId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          gcdGroupMasterVo.setGcdgroupId(CommonFunction.checkNull(data.get(0)).toString());

          gcdGroupMasterVo.setGroupDescription(CommonFunction.checkNull(data.get(1)).toString());

          if (!CommonFunction.checkNull(data.get(2)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(data.get(2)).trim());
            gcdGroupMasterVo.setGroupExposureLimit(this.myFormatter.format(reconNum));
          }

          gcdGroupMasterVo.setRecStatus(CommonFunction.checkNull(data.get(3)).toString());

          detailList.add(gcdGroupMasterVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public String saveModifyGcdGroupDao(Object ob) {
    String stat = "X";
    String result = "";
    boolean status = false;
    GcdGroupMasterVo gcdGroupMasterVo = (GcdGroupMasterVo)ob;
    logger.info(new StringBuilder().append("gcdGroupMasterVo.getRecStatus()aaaaaaaaaaaaaaaaaaaaaa  saveModifyGcdGroupDao:-").append(gcdGroupMasterVo.getRecStatus()).toString());

    ArrayList qryList = new ArrayList();
    String groupId = CommonFunction.checkNull(gcdGroupMasterVo.getGcdgroupId());

    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    try {
      String query = new StringBuilder().append("SELECT GROUP_DESC FROM gcd_group_m where  GROUP_DESC='").append(StringEscapeUtils.escapeSql(gcdGroupMasterVo.getGroupDescription().trim())).append("' AND GROUP_ID<>").append(groupId).append(" LIMIT 1").toString();

      logger.info(new StringBuilder().append("In saveModifyGcdGroupDao...................Dao Impl").append(query).toString());
      boolean st = ConnectionDAOforEJB.checkStatus(query);
      logger.info(new StringBuilder().append("st -----").append(st).toString());
      if (st) {
        result = "EX";
      }

      if (!st) {
        if ((gcdGroupMasterVo.getRecStatus() != null) && (gcdGroupMasterVo.getRecStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info("In saveModifyGcdGroupDetailsDao()........");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("UPDATE gcd_group_m SET GROUP_EXPOSURE_LIMIT=?,");
        bufInsSql.append("GROUP_DESC=?,");
        bufInsSql.append("GROUP_DESC_L=?,");
        bufInsSql.append(new StringBuilder().append("REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?,'").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),AUTHOR_ID=?,AUTHOR_DATE=DATE_ADD(STR_TO_DATE(?,'").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND)").toString());
        bufInsSql.append(" WHERE GROUP_ID=? ");

        if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(gcdGroupMasterVo.getGroupExposureLimit()).trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(gcdGroupMasterVo.getGroupExposureLimit()).trim()).toString());
        }

        if (CommonFunction.checkNull(gcdGroupMasterVo.getGroupDescription()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(gcdGroupMasterVo.getGroupDescription());
        }

        if (CommonFunction.checkNull(gcdGroupMasterVo.getGroupDescription()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(gcdGroupMasterVo.getGroupDescription());
        }

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }

        if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(gcdGroupMasterVo.getMakerId()).trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(gcdGroupMasterVo.getMakerId()).trim()));
        if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(gcdGroupMasterVo.getMakerDate()).trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(gcdGroupMasterVo.getMakerDate()).trim()));
        }
        if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(gcdGroupMasterVo.getMakerId()).trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(gcdGroupMasterVo.getMakerId()).trim()));
        if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(gcdGroupMasterVo.getMakerDate()).trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(gcdGroupMasterVo.getMakerDate()).trim()));
        }

        if (CommonFunction.checkNull(groupId).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(groupId);
        }
        insertPrepStmtObject.setSql(bufInsSql.toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveModifyChargegcdGroupDao status is.................").append(status).toString());
        if (status) {
          result = "S";
        }
        else {
          result = "E";
        }
        bufInsSql = null;
        insertPrepStmtObject = null;
      }
    }
    catch (Exception e) {
      result = "E";
      e.printStackTrace();
    }

    return result;
  }

  public ArrayList<GcdGroupMasterVo> searchGcdGroupData(Object ob) {
    ArrayList searchlist = new ArrayList();
    String groupDesc = "";
    String groupId = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    GcdGroupMasterVo gcdGroupMasterVo = (GcdGroupMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchGcdGroupDao...............");
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      groupDesc = StringEscapeUtils.escapeSql(CommonFunction.checkNull(gcdGroupMasterVo.getGroupSearchDescription())).trim();
      groupId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(gcdGroupMasterVo.getGcdgroupId())).trim();

      bufInsSql.append(" SELECT GROUP_ID,GROUP_DESC,GROUP_EXPOSURE_LIMIT,IF(REC_STATUS='A','Active','Inactive')AS REC_STATUS ");
      bufInsSql.append(" FROM gcd_group_m ");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM gcd_group_m ");

      if ((!groupId.equals("")) && (!groupDesc.equals(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE GROUP_ID = '").append(groupId).append("' AND GROUP_DESC like '%").append(groupDesc).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE GROUP_ID = '").append(groupId).append("' AND GROUP_DESC like '%").append(groupDesc).append("%' ").toString());
      }
      else if (!groupId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE GROUP_ID = '").append(groupId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE GROUP_ID = '").append(groupId).append("' ").toString());
      }
      else if (!groupDesc.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE GROUP_DESC like '%").append(groupDesc).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE GROUP_DESC like '%").append(groupDesc).append("%' ").toString());
      }
      bufInsSql.append(" ORDER BY GROUP_ID");

      logger.info(new StringBuilder().append("IN searchGcdGroupDao() search query1 ### ").append(bufInsSql.toString()).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((groupId.trim() == null) && (groupDesc.trim() == null)) || ((groupId.trim().equalsIgnoreCase("")) && (groupDesc.trim().equalsIgnoreCase(""))) || (gcdGroupMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(gcdGroupMasterVo.getCurrentPageLink()).toString());
        if (gcdGroupMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (gcdGroupMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("searchGcdGroupDao size is....").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          GcdGroupMasterVo gcdGroupMVo = new GcdGroupMasterVo();

          gcdGroupMVo.setGcdgroupIdModify(new StringBuilder().append("<a href=gcdGroupMasterSearch.do?method=modifyDetails&gcdgroupId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          gcdGroupMVo.setGcdgroupId(CommonFunction.checkNull(data.get(0)).toString());
          gcdGroupMVo.setGroupDescription(CommonFunction.checkNull(data.get(1)).toString());
          if (!CommonFunction.checkNull(data.get(2)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(data.get(2)).trim());
            gcdGroupMVo.setGroupExposureLimit(this.myFormatter.format(reconNum));
          }

          gcdGroupMVo.setRecStatus(CommonFunction.checkNull(data.get(3)).toString());
          gcdGroupMVo.setTotalRecordSize(count);
          detailList.add(gcdGroupMVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public String insertBankMaster(Object ob)
  {
    BankMasterVo vo = (BankMasterVo)ob;
    boolean status = false;
    StringBuffer query = new StringBuffer();
    String result = "";
    logger.info(new StringBuilder().append("In insertBankMaster.....................................Dao Impl").append(vo.getBankStatus()).toString());
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    try {
      query.append(new StringBuilder().append("select BANK_CODE,BANK_NAME from com_bank_m where BANK_CODE='").append(StringEscapeUtils.escapeSql(vo.getBankCode().trim())).append("'").toString());

      logger.info(new StringBuilder().append("In insertBankMaster.....................................Dao Impl").append(query).toString());
      boolean st = ConnectionDAOforEJB.checkStatus(query.toString());
      if (st)
      {
        result = "EX";
      }
      if (!st) {
        if ((vo.getBankStatus() != null) && (vo.getBankStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info("In insert bank master");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("insert into com_bank_m(BANK_CODE,BANK_NAME,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");

        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");

        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());
        if (CommonFunction.checkNull(vo.getBankCode()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getBankCode().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getBankName()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getBankName().toUpperCase().trim());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());

        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());

        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN insertBankMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveBankMasterData......................").append(status).toString());

        if (status) {
          result = "S";
        }
        else
          result = "E";
      }
    }
    catch (Exception e)
    {
      result = "E";
      e.printStackTrace();
    }

    return result;
  }

  public ArrayList<BankMasterVo> searchBankData(Object ob)
  {
    String bankCode = "";
    String bankName = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    ArrayList searchlist = new ArrayList();
    BankMasterVo bankMasterVo = (BankMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In searchBankData().....................................Dao Impl");

      bankCode = StringEscapeUtils.escapeSql(CommonFunction.checkNull(bankMasterVo.getBankSearchCode())).trim();
      bankName = StringEscapeUtils.escapeSql(CommonFunction.checkNull(bankMasterVo.getBankSearchName())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("select BANK_CODE,BANK_NAME,if(REC_STATUS='A','Active','Inactive')as Status FROM com_bank_m ");
      bufInsSqlTempCount.append("SELECT COUNT(1) FROM com_bank_m");

      if ((!bankCode.equalsIgnoreCase("")) && (!bankName.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE BANK_NAME like '%").append(bankName).append("%' AND BANK_CODE='").append(bankCode).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE BANK_NAME like '%").append(bankName).append("%' AND BANK_CODE='").append(bankCode).append("' ").toString());
      }
      else if (!bankName.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE BANK_NAME LIKE '%").append(bankName).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE BANK_NAME LIKE '%").append(bankName).append("%' ").toString());
      }
      else if (!bankCode.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE BANK_CODE = '").append(bankCode).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE BANK_CODE = '").append(bankCode).append("' ").toString());
      }
      bufInsSql.append(" ORDER by BANK_ID");

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());

      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((bankCode.trim() == null) && (bankName.trim() == null)) || ((bankCode.trim().equalsIgnoreCase("")) && (bankName.trim().equalsIgnoreCase(""))) || (bankMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(bankMasterVo.getCurrentPageLink()).toString());
        if (bankMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (bankMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }
      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("searchBankData ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          BankMasterVo bankMVO = new BankMasterVo();

          bankMVO.setBankCodeModify(new StringBuilder().append("<a href=bankMasterSearch.do?method=openEditBank&bankSearchCode=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          bankMVO.setBankCode(CommonFunction.checkNull(data.get(0)).toString());
          bankMVO.setBankName(CommonFunction.checkNull(data.get(1)).toString());
          bankMVO.setBankStatus(CommonFunction.checkNull(data.get(2)).toString());
          bankMVO.setTotalRecordSize(count);
          detailList.add(bankMVO);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean updateBankData(Object ob) {
    BankMasterVo vo = (BankMasterVo)ob;
    String bankCode = vo.getBankCode();
    logger.info(new StringBuilder().append("vo.getBankStatus():-").append(vo.getBankStatus()).toString());
    ArrayList updatelist = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    boolean status = false;
    String stat = "";
    try {
      if ((vo.getBankStatus() != null) && (vo.getBankStatus().equals("on")))
        stat = "A";
      else {
        stat = "X";
      }

      StringBuffer bufInsSql = new StringBuffer();
      logger.info("In updateBankData.....................................Dao Impl");

      bufInsSql.append(new StringBuilder().append("UPDATE com_bank_m set BANK_NAME=?,REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) where BANK_CODE=?").toString());

      if (CommonFunction.checkNull(vo.getBankName()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getBankName().toUpperCase().trim());
      }

      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat);
      }
      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getMakerId())).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(vo.getMakerId()).trim());
      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getMakerDate()).trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getMakerDate()).trim());
      }

      if (CommonFunction.checkNull(vo.getBankCode()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getBankCode().trim());
      }
      insertPrepStmtObject.setSql(bufInsSql.toString());
      updatelist.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("In getListOfValues").append(bufInsSql.toString()).toString());
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
      bufInsSql = null;
      insertPrepStmtObject = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return status;
  }

  public String insertchagreCodeMaster(Object ob)
  {
    ChargeCodeMasterVo chargeCodeMasterVo = (ChargeCodeMasterVo)ob;
    boolean status = false;
    logger.info(new StringBuilder().append("In insertChargeCodeMaster.....................................Dao Impl").append(chargeCodeMasterVo.getRecStatus()).toString());

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String stat1 = "N";
    String stat2 = "N";
    String result = null;
    String query = new StringBuilder().append("select CHARGE_DESC from com_charge_code_m where CHARGE_DESC='").append(StringEscapeUtils.escapeSql(chargeCodeMasterVo.getChargeDescription().trim())).append("'").toString();
    logger.info(new StringBuilder().append("In insert Charge Code Master.....................................Dao Impl").append(query).toString());
    boolean st = ConnectionDAOforEJB.checkStatus(query);
    try
    {
      if (!st) {
        if ((chargeCodeMasterVo.getRecStatus() != null) && (chargeCodeMasterVo.getRecStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        if ((chargeCodeMasterVo.getManualAdviceFlag() != null) && (chargeCodeMasterVo.getManualAdviceFlag().equals("on")))
        {
          stat1 = "Y";
        }
        else stat1 = "N";

        if ((chargeCodeMasterVo.getWaveOffFlag() != null) && (chargeCodeMasterVo.getWaveOffFlag().equals("on")))
        {
          stat2 = "Y";
        }
        else stat2 = "N";

        logger.info("In insert Charge Code Master");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("insert into com_charge_code_m(CHARGE_DESC,MANUAL_ADVICE_FLAG,WAIVE_OFF_FLAG,REC_STATUS,CHARGE_DESC_L,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,SYSTEM_DEFINED,TAX_CHARGE_CODE1,TAX_CHARGE_CODE2,TAX_CHARGE_CODE3,CGST_CODE,SGST_CODE,IGST_CODE,UTGST_CODE,DUE_RECEIPT_BASIS,HSC_SCN_DESCRIPTION,HSC_SCN_CODE,GLOBAL_TAX_APPLICABLE,GLOBAL_TAX_RATE1,GLOBAL_TAX_RATE2)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND), ").toString());
        bufInsSql.append(" 'N',");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?)");
        if (CommonFunction.checkNull(chargeCodeMasterVo.getChargeDescription()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeCodeMasterVo.getChargeDescription().toUpperCase().trim());

        if (CommonFunction.checkNull(stat1).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat1);
        }
        if (CommonFunction.checkNull(stat2).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat2);
        }
        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(chargeCodeMasterVo.getChargeDescription()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeCodeMasterVo.getChargeDescription().toUpperCase().trim());

        if (CommonFunction.checkNull(chargeCodeMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeCodeMasterVo.getMakerId());

        if (CommonFunction.checkNull(chargeCodeMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeCodeMasterVo.getMakerDate());

        if (CommonFunction.checkNull(chargeCodeMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeCodeMasterVo.getMakerId());

        if (CommonFunction.checkNull(chargeCodeMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeCodeMasterVo.getMakerDate());

        if (CommonFunction.checkNull(chargeCodeMasterVo.getTaxdescription1()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeCodeMasterVo.getTaxdescription1());

        if (CommonFunction.checkNull(chargeCodeMasterVo.getTaxdescription2()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeCodeMasterVo.getTaxdescription2());

        if (CommonFunction.checkNull(chargeCodeMasterVo.getTaxdescription3()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeCodeMasterVo.getTaxdescription3());

        if (CommonFunction.checkNull(chargeCodeMasterVo.getCgstId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeCodeMasterVo.getCgstId());

        if (CommonFunction.checkNull(chargeCodeMasterVo.getSgstId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeCodeMasterVo.getSgstId());

        if (CommonFunction.checkNull(chargeCodeMasterVo.getIgstId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeCodeMasterVo.getIgstId());

        if (CommonFunction.checkNull(chargeCodeMasterVo.getUgstId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeCodeMasterVo.getUgstId());

        if (CommonFunction.checkNull(chargeCodeMasterVo.getDueReceiptBasis()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeCodeMasterVo.getDueReceiptBasis());

        if (CommonFunction.checkNull(chargeCodeMasterVo.getHscscn()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeCodeMasterVo.getHscscn());

        if (CommonFunction.checkNull(chargeCodeMasterVo.getHscscnc()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeCodeMasterVo.getHscscnc());

        if (CommonFunction.checkNull(chargeCodeMasterVo.getTaxapp()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeCodeMasterVo.getTaxapp());

        if (CommonFunction.checkNull(chargeCodeMasterVo.getTaxrate1()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeCodeMasterVo.getTaxrate1());

        if (CommonFunction.checkNull(chargeCodeMasterVo.getTaxrate2()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeCodeMasterVo.getTaxrate2());

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN insertChargeCodeMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        if (status)
          result = "datasaved";
        else
          result = "datanotsaved";
      }
      else {
        result = "dataexist";
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    logger.info(new StringBuilder().append("In saveChargeCodeData......................").append(status).toString());
    return result;
  }

  public boolean saveModifyChargeCodeDetailsDao(Object ob)
  {
    ChargeCodeMasterVo chargeCodeMasterVo = (ChargeCodeMasterVo)ob;
    String chargeCode = chargeCodeMasterVo.getChargeCode();
    logger.info(new StringBuilder().append("chargeCodeMasterVo.getChargeCode():-").append(chargeCodeMasterVo.getChargeCode()).toString());

    ArrayList updatelist = new ArrayList();

    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

    boolean status = false;
    String stat = "";
    String stat1 = "";
    String stat2 = "";
    try
    {
      if ((chargeCodeMasterVo.getRecStatus() != null) && (chargeCodeMasterVo.getRecStatus().equals("on")))
      {
        stat = "A";
      }
      else stat = "X";

      if ((chargeCodeMasterVo.getManualAdviceFlag() != null) && (chargeCodeMasterVo.getManualAdviceFlag().equals("on")))
      {
        stat1 = "Y";
      }
      else stat1 = "N";

      if ((chargeCodeMasterVo.getWaveOffFlag() != null) && (chargeCodeMasterVo.getWaveOffFlag().equals("on")))
      {
        stat2 = "Y";
      }
      else stat2 = "N";

      StringBuffer bufInsSql = new StringBuffer();
      logger.info("In saveModifyChargeCodeDetailsDao.....................................Dao Impl");

      bufInsSql.append("UPDATE com_charge_code_m set CHARGE_DESC=?,MANUAL_ADVICE_FLAG=?,");
      bufInsSql.append(new StringBuilder().append("WAIVE_OFF_FLAG=?, REC_STATUS=?,CHARGE_DESC_L=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),TAX_CHARGE_CODE1=?,TAX_CHARGE_CODE2=?,TAX_CHARGE_CODE3=?,CGST_CODE=?,SGST_CODE=?,IGST_CODE=?,UTGST_CODE=?,DUE_RECEIPT_BASIS=?,HSC_SCN_DESCRIPTION=?,HSC_SCN_CODE=?,GLOBAL_TAX_APPLICABLE=?,GLOBAL_TAX_RATE1=?,GLOBAL_TAX_RATE2=? where CHARGE_CODE=?").toString());

      if (CommonFunction.checkNull(chargeCodeMasterVo.getChargeDescription()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeCodeMasterVo.getChargeDescription().toUpperCase().trim());

      if (CommonFunction.checkNull(stat1).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat1);
      }
      if (CommonFunction.checkNull(stat2).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat2);
      }
      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat);
      }
      if (CommonFunction.checkNull(chargeCodeMasterVo.getChargeDescription()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeCodeMasterVo.getChargeDescription().toUpperCase().trim());

      if (CommonFunction.checkNull(chargeCodeMasterVo.getMakerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeCodeMasterVo.getMakerId());

      if (CommonFunction.checkNull(chargeCodeMasterVo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeCodeMasterVo.getMakerDate());

      if (CommonFunction.checkNull(chargeCodeMasterVo.getTaxdescription1()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeCodeMasterVo.getTaxdescription1());

      if (CommonFunction.checkNull(chargeCodeMasterVo.getTaxdescription2()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeCodeMasterVo.getTaxdescription2());

      if (CommonFunction.checkNull(chargeCodeMasterVo.getTaxdescription3()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeCodeMasterVo.getTaxdescription3());

      if (CommonFunction.checkNull(chargeCodeMasterVo.getCgstId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeCodeMasterVo.getCgstId());

      if (CommonFunction.checkNull(chargeCodeMasterVo.getSgstId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeCodeMasterVo.getSgstId());

      if (CommonFunction.checkNull(chargeCodeMasterVo.getIgstId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeCodeMasterVo.getIgstId());

      if (CommonFunction.checkNull(chargeCodeMasterVo.getUgstId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeCodeMasterVo.getUgstId());

      if (CommonFunction.checkNull(chargeCodeMasterVo.getDueReceiptBasis()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeCodeMasterVo.getDueReceiptBasis());

      if (CommonFunction.checkNull(chargeCodeMasterVo.getHscscn()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeCodeMasterVo.getHscscn());

      if (CommonFunction.checkNull(chargeCodeMasterVo.getHscscnc()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeCodeMasterVo.getHscscnc());

      if (CommonFunction.checkNull(chargeCodeMasterVo.getTaxapp()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeCodeMasterVo.getTaxapp());

      if (CommonFunction.checkNull(chargeCodeMasterVo.getTaxrate1()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeCodeMasterVo.getTaxrate1());

      if (CommonFunction.checkNull(chargeCodeMasterVo.getTaxrate2()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeCodeMasterVo.getTaxrate2());

      if (CommonFunction.checkNull(chargeCodeMasterVo.getChargeCode()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeCodeMasterVo.getChargeCode().toUpperCase().trim());

      insertPrepStmtObject.setSql(bufInsSql.toString());

      updatelist.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("In saveModifyChargeCodeDetailsDao").append(bufInsSql.toString()).toString());

      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList<ChargeCodeMasterVo> searchChargeCodeDao(Object ob) {
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    String chargeCode = "";
    String chargeCodeDesc = "";
    ArrayList searchlist = new ArrayList();
    ChargeCodeMasterVo chargeCodeMasterVo = (ChargeCodeMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchChargeCodeDao...............");
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      chargeCode = StringEscapeUtils.escapeSql(CommonFunction.checkNull(chargeCodeMasterVo.getChargeCode())).trim();
      chargeCodeDesc = StringEscapeUtils.escapeSql(CommonFunction.checkNull(chargeCodeMasterVo.getChargeSearchDescription())).trim();

      bufInsSql.append("select CHARGE_CODE,CHARGE_DESC,if(MANUAL_ADVICE_FLAG='Y','Yes','No')as ManualAdvice_Flag,if(WAIVE_OFF_FLAG='Y','Yes','No')as WaveOff_Flag,if(REC_STATUS='A','Active','Inactive')as status,if(SYSTEM_DEFINED='Y','Yes','No')as SYSTEM_DEFINED FROM com_charge_code_m  ");
      bufInsSqlTempCount.append("SELECT COUNT(1) FROM com_charge_code_m");

      if ((!chargeCode.equals("")) && (!chargeCodeDesc.equals(""))) {
        bufInsSql.append(new StringBuilder().append(" where CHARGE_CODE = '").append(chargeCode).append("' AND CHARGE_DESC like '%").append(chargeCodeDesc).append("%'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" where CHARGE_CODE = '").append(chargeCode).append("' AND CHARGE_DESC like '%").append(chargeCodeDesc).append("%'").toString());
      }
      else if (!chargeCode.equals("")) {
        bufInsSql.append(new StringBuilder().append(" where CHARGE_CODE = '").append(chargeCode).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" where CHARGE_CODE = '").append(chargeCode).append("' ").toString());
      }
      else if (!chargeCodeDesc.equals("")) {
        bufInsSql.append(new StringBuilder().append(" where CHARGE_DESC like '%").append(chargeCodeDesc).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" where CHARGE_DESC like '%").append(chargeCodeDesc).append("%' ").toString());
      }
      bufInsSql.append(" ORDER BY CHARGE_CODE");

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((chargeCode.trim() == null) && (chargeCodeDesc.trim() == null)) || ((chargeCode.trim().equalsIgnoreCase("")) && (chargeCodeDesc.trim().equalsIgnoreCase(""))) || (chargeCodeMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(chargeCodeMasterVo.getCurrentPageLink()).toString());
        if (chargeCodeMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (chargeCodeMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchChargeCodeDao() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("searchChargeCodeDao Data size is....").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++) {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          ChargeCodeMasterVo chargeCodeVo = new ChargeCodeMasterVo();

          chargeCodeVo.setChargeCodeModify(new StringBuilder().append("<a href=chargeCodeMasterSearch.do?method=modifyDetails&chargeCode=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          chargeCodeVo.setChargeCode(CommonFunction.checkNull(data.get(0)).toString());
          chargeCodeVo.setChargeDescription(CommonFunction.checkNull(data.get(1)).toString());
          chargeCodeVo.setManualAdviceFlag(CommonFunction.checkNull(data.get(2)).toString());
          chargeCodeVo.setWaveOffFlag(CommonFunction.checkNull(data.get(3)).toString());
          chargeCodeVo.setRecStatus(CommonFunction.checkNull(data.get(4)).toString());
          chargeCodeVo.setSystemDefinedFlag(CommonFunction.checkNull(data.get(5)).toString());
          chargeCodeVo.setTotalRecordSize(count);
          detailList.add(chargeCodeVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public ArrayList<ChargeCodeMasterVo> modifyChargeCodeDetailsDao(Object ob)
  {
    ChargeCodeMasterVo chargeCodeMasterVo = (ChargeCodeMasterVo)ob;
    ArrayList searchlist = new ArrayList();
    String chargeCode = "";
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchBankBranchDao()....................");
      StringBuffer bufInsSql = new StringBuffer();
      chargeCode = CommonFunction.checkNull(chargeCodeMasterVo.getChargeCode());

      bufInsSql.append("SELECT CHARGE_CODE,CHARGE_DESC,MANUAL_ADVICE_FLAG,WAIVE_OFF_FLAG,REC_STATUS,SYSTEM_DEFINED,TAX_CHARGE_CODE1,TAX_CHARGE_CODE2,TAX_CHARGE_CODE3,CGST_CODE,SGST_CODE,IGST_CODE,UTGST_CODE,HSC_SCN_DESCRIPTION,HSC_SCN_CODE,DUE_RECEIPT_BASIS,GLOBAL_TAX_APPLICABLE,GLOBAL_TAX_RATE1,GLOBAL_TAX_RATE2 ");

      bufInsSql.append(new StringBuilder().append(" FROM com_charge_code_m  WHERE CHARGE_CODE='").append(chargeCode).append("' ORDER BY CHARGE_CODE ").toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("searchBankBranchDaoData size is....").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0)
        {
          chargeCodeMasterVo.setChargeCodeModify(new StringBuilder().append("<a href=chargeCodeMasterSearch.do?method=modifyDetails&chargeCode=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          chargeCodeMasterVo.setChargeCode(CommonFunction.checkNull(data.get(0)).toString());

          chargeCodeMasterVo.setChargeDescription(CommonFunction.checkNull(data.get(1)).toString());

          chargeCodeMasterVo.setManualAdviceFlag(CommonFunction.checkNull(data.get(2)).toString());

          chargeCodeMasterVo.setWaveOffFlag(CommonFunction.checkNull(data.get(3)).toString());

          chargeCodeMasterVo.setRecStatus(CommonFunction.checkNull(data.get(4)).toString());

          chargeCodeMasterVo.setSystemDefinedFlag(CommonFunction.checkNull(data.get(5)).toString());

          chargeCodeMasterVo.setTaxdescription1(CommonFunction.checkNull(data.get(6)).toString());

          chargeCodeMasterVo.setLbxTaxdescription1(CommonFunction.checkNull(data.get(6)).toString());

          chargeCodeMasterVo.setTaxdescription2(CommonFunction.checkNull(data.get(7)).toString());

          chargeCodeMasterVo.setLbxTaxdescription2(CommonFunction.checkNull(data.get(7)).toString());

          chargeCodeMasterVo.setTaxdescription3(CommonFunction.checkNull(data.get(8)).toString());

          chargeCodeMasterVo.setLbxTaxdescription3(CommonFunction.checkNull(data.get(8)).toString());

          chargeCodeMasterVo.setCgstId(CommonFunction.checkNull(data.get(9)).toString());

          chargeCodeMasterVo.setSgstId(CommonFunction.checkNull(data.get(10)).toString());

          chargeCodeMasterVo.setIgstId(CommonFunction.checkNull(data.get(11)).toString());

          chargeCodeMasterVo.setUgstId(CommonFunction.checkNull(data.get(12)).toString());

          chargeCodeMasterVo.setHscscn(CommonFunction.checkNull(data.get(13)).toString());

          chargeCodeMasterVo.setHscscnc(CommonFunction.checkNull(data.get(14)).toString());

          if (CommonFunction.checkNull(data.get(15)).equalsIgnoreCase(""))
          {
            chargeCodeMasterVo.setDueReceiptBasis("D");
          }
          else chargeCodeMasterVo.setDueReceiptBasis(CommonFunction.checkNull(data.get(15)).toString());

          if (CommonFunction.checkNull(data.get(16)).trim().equals(""))
          {
            chargeCodeMasterVo.setTaxapp("N");
          }
          else
          {
            chargeCodeMasterVo.setTaxapp(CommonFunction.checkNull(data.get(16)).toString());
          }

          chargeCodeMasterVo.setTaxrate1(CommonFunction.checkNull(data.get(17)).toString());

          chargeCodeMasterVo.setTaxrate2(CommonFunction.checkNull(data.get(18)).toString());

          detailList.add(chargeCodeMasterVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public ArrayList searchUserEdit(String dealerId)
  {
    ArrayList searchlist = new ArrayList();
    DealerMasterVo vo = new DealerMasterVo();
    ArrayList levelDescList = new ArrayList();
    try
    {
      logger.info("In searchUserLevelEdit().....................................Dao Impl");

      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append(new StringBuilder().append("select b.user_id,a. user_name from cr_dsa_dealer_user_m b join sec_user_m a on  a.user_id=b.user_id where b.DEALER_ID='").append(StringEscapeUtils.escapeSql(dealerId)).append("'").toString());

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN searchUserLevelEdit() search query1 ### ").append(bufInsSql.toString()).toString());

      logger.info(new StringBuilder().append("searchUserLevelEdit ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("branchDescList ").append(searchlist.get(i).toString()).toString());

        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          DealerMasterVo dealerMasterVo = new DealerMasterVo();
          dealerMasterVo.setUserId(CommonFunction.checkNull(data.get(0)).toString());
          dealerMasterVo.setUserDesc(CommonFunction.checkNull(data.get(1)).toString());
          levelDescList.add(dealerMasterVo);
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return levelDescList;
  }

  public String insertDealerMaster(Object ob, String userId) {
    DealerMasterVo vo = (DealerMasterVo)ob;
    String provcal = "";
    boolean status = false;
    boolean st = true;
    int count = 0;
    String date = CommonFunction.changeFormat(vo.getMakerDate());
    logger.info(new StringBuilder().append("userId......").append(userId).toString());
    logger.info(new StringBuilder().append("In insertDealerMaster...........inside ejb server file...........Dao Impl").append(vo.getDealerStatus()).toString());
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String empnl = " ";
    String query = new StringBuilder().append("select bp_type from cr_dsa_dealer_m where DEALER_DESC='").append(StringEscapeUtils.escapeSql(vo.getDealerDes().trim())).append("'").toString();

    logger.info(new StringBuilder().append("query......").append(query).toString());
    try
    {
      ArrayList bpTypeList = ConnectionDAOforEJB.sqlSelect(query);
      logger.info(new StringBuilder().append("bpTypeList size: ").append(bpTypeList.size()).toString());
      for (int i = 0; i < bpTypeList.size(); i++) {
        logger.info(new StringBuilder().append("bpTypeList ").append(bpTypeList.get(i).toString()).toString());
        logger.info(new StringBuilder().append("vo.getLbxdealerType(): ").append(vo.getLbxdealerType()).toString());
        ArrayList data = (ArrayList)bpTypeList.get(i);
        if (data.contains(vo.getLbxdealerType()))
        {
          count++;
          logger.info("BP Type Match");
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    if (count == 0)
      st = false;
    else {
      st = true;
    }

    try
    {
      if (!st) {
        if ((vo.getDealerStatus() != null) && (vo.getDealerStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        if ((vo.getEmpanelStatus() != null) && (vo.getEmpanelStatus().equals("on")))
        {
          empnl = "Y";
        }
        else {
          empnl = "N";
        }

        logger.info("In insertDEALERMaster()........");
        logger.info("In DSA_DEALER_SAVE.....Procedure...");
        ArrayList in = new ArrayList();
        ArrayList out = new ArrayList();
        ArrayList outMessages = new ArrayList();
        String s1 = "";
        String s2 = "";
        try
        {
          in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getDealerDes()).trim()));
          in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxdealerType()).trim()));
          in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(stat).trim()));
          if (vo.getLbxBankID().equalsIgnoreCase("")) {
            in.add(Integer.valueOf(0));
          }
          else {
            in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxBankID()).trim()));
          }
          if (vo.getLbxBranchID().equalsIgnoreCase("")) {
            in.add(Integer.valueOf(0));
          }
          else {
            in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxBranchID()).trim()));
          }
          in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAccountNo()).trim()));

          in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAddressDealer1()).trim()));
          in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAddressDealer2()).trim()));
          in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAddressDealer3()).trim()));
          if (vo.getTxtCountryCode().equalsIgnoreCase(""))
            in.add(Integer.valueOf(0));
          else {
            in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getTxtCountryCode()).trim()));
          }
          if (vo.getTxtStateCode().equalsIgnoreCase(""))
            in.add(Integer.valueOf(0));
          else {
            in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getTxtStateCode()).trim()));
          }
          if (vo.getTxtDistCode().equalsIgnoreCase(""))
            in.add(Integer.valueOf(0));
          else {
            in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getTxtDistCode()).trim()));
          }
          in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getPincode()).trim()));
          in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getContractPerson()).trim()));
          in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getPhoneOff()).trim()));
          in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getPhoneRes()).trim()));
          in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getEmail()).trim()));
          in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getRegistrationNo()).trim()));

          in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(empnl).trim()));
          in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getMakerId()).trim()));
          in.add(date);
          in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getMakerId()).trim()));
          in.add(date);
          in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(userId).trim()));

          in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getPan()).trim()));

          out.add(s1);
          out.add(s2);

          logger.info(new StringBuilder().append("DSA_DEALER_SAVE(").append(in.toString()).append(",").append(out.toString()).append(")").toString());
          outMessages = (ArrayList)ConnectionDAOforEJB.callSP("DSA_DEALER_SAVE", in, out);
          s1 = CommonFunction.checkNull(outMessages.get(0));
          s2 = CommonFunction.checkNull(outMessages.get(1));
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }

        if (s1.equalsIgnoreCase("S"))
        {
          status = true;
          provcal = s1;
        }
        else {
          status = false;
        }provcal = s2;
      } else {
        provcal = "dataExist";
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return provcal;
  }

  public ArrayList searchDealerData(Object ob) {
    String dealerId = "";
    String dealerDesc = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    String bankID = "";
    String branchID = "";

    ArrayList searchlist = new ArrayList();
    DealerMasterVo dealerMasterVo = (DealerMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In searchDealerData.............inside ejb server file...........Dao Impl");
      dealerId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealerMasterVo.getDealerId())).trim();
      dealerDesc = StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealerMasterVo.getDealerSearchDes())).trim();
      bankID = StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealerMasterVo.getLbxBankID())).trim();
      branchID = StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealerMasterVo.getLbxBranchID())).trim();
      logger.info(new StringBuilder().append("bankID..").append(bankID).append("..branchID..").append(branchID).toString());
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("select B.DEALER_ID,B.DEALER_DESC,B.BP_TYPE,");
      bufInsSql.append("(SELECT A.DESCRIPTION FROM generic_master A where GENERIC_KEY='BPTYPE' AND A.VALUE=B.BP_TYPE) sup,");
      bufInsSql.append("b.BANK_ID,b.BANK_BRANCH_ID,");
      bufInsSql.append("if(B.REC_STATUS='A','Active','Inactive')as Status, ");

      bufInsSql.append("c.BANK_NAME ,d.BANK_BRANCH_NAME ,b.BANK_ACCOUNT,b.ADDRESS_LINE1,b.ADDRESS_LINE2,b.ADDRESS_LINE3,b.COUNTRY,(SELECT COUNTRY_DESC from com_country_m WHERE REC_STATUS='A' AND COUNTRY_ID=IFNULL(B.COUNTRY,0))AS COUNTRY_DESC,b.STATE,(SELECT STATE_DESC from com_state_m WHERE REC_STATUS='A' AND COUNTRY_ID=IFNULL(B.COUNTRY,0) AND STATE_ID=IFNULL(B.STATE,0))AS STATE_DESC,b.DISTRICT,(SELECT DISTRICT_DESC from com_district_m WHERE REC_STATUS='A' AND STATE_ID=IFNULL(B.STATE,0) AND DISTRICT_ID=IFNULL(B.DISTRICT,0))AS DISTRICT_DESC,b.PINCODE,b.CONTRACT_PERSON,b.MOBILE_NO,b.LANDLINE_NO,b.EMAIL,b.REGISTRATION_NO,b.pan,EMPANELLED_STATUS ");
      bufInsSql.append(" FROM cr_dsa_dealer_m b left join COM_BANK_M c on b.BANK_ID=c.BANK_ID ");
      bufInsSql.append("left join COM_BANKBRANCH_M d on d.BANK_BRANCH_ID=b.BANK_BRANCH_ID ");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM cr_dsa_dealer_m B ");

      if ((!dealerId.equals("")) && (!dealerDesc.equals(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE DEALER_ID = '").append(dealerId).append("' AND DEALER_DESC like '%").append(dealerDesc).append("%'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE DEALER_ID = '").append(dealerId).append("' AND DEALER_DESC like '%").append(dealerDesc).append("%'").toString());
      }
      else if (!dealerId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE DEALER_ID = '").append(dealerId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE DEALER_ID = '").append(dealerId).append("' ").toString());
      }
      else if (!dealerDesc.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE DEALER_DESC like '%").append(dealerDesc).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE DEALER_DESC like '%").append(dealerDesc).append("%' ").toString());
      }
      bufInsSql.append(" ORDER BY DEALER_ID");
      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((dealerId.trim() == null) && (dealerDesc.trim() == null)) || ((dealerId.trim().equalsIgnoreCase("")) && (dealerDesc.trim().equalsIgnoreCase(""))) || (dealerMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(dealerMasterVo.getCurrentPageLink()).toString());
        if (dealerMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (dealerMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchDealerData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info("In searchDealerData.....................................Dao Impl");
      logger.info(new StringBuilder().append("searchDealerData ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++) {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          DealerMasterVo bankMVO = new DealerMasterVo();

          bankMVO.setDealerIdModify(new StringBuilder().append("<a href=dealerMasterSearch.do?method=openEditDealer&dealerId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          bankMVO.setDealerId(CommonFunction.checkNull(data.get(0)).toString());
          bankMVO.setDealerDes(CommonFunction.checkNull(data.get(1)).toString());
          bankMVO.setDealerType(CommonFunction.checkNull(data.get(2)).toString());
          bankMVO.setLbxdealerType(CommonFunction.checkNull(data.get(3)).toString());
          bankMVO.setLbxBankID(CommonFunction.checkNull(data.get(4)).toString());
          bankMVO.setLbxBranchID(CommonFunction.checkNull(data.get(5)).toString());
          bankMVO.setDealerStatus(CommonFunction.checkNull(data.get(6)).toString());
          bankMVO.setBankCode(CommonFunction.checkNull(data.get(7)).toString());
          bankMVO.setBankBranchName(CommonFunction.checkNull(data.get(8)).toString());
          bankMVO.setAccountNo(CommonFunction.checkNull(data.get(9)).toString());

          bankMVO.setAddressDealer1(CommonFunction.checkNull(data.get(10)).toString());
          bankMVO.setAddressDealer2(CommonFunction.checkNull(data.get(11)).toString());
          bankMVO.setAddressDealer3(CommonFunction.checkNull(data.get(12)).toString());
          bankMVO.setTxtCountryCode(CommonFunction.checkNull(data.get(13)).toString());
          bankMVO.setCountry(CommonFunction.checkNull(data.get(14)).toString());
          bankMVO.setTxtStateCode(CommonFunction.checkNull(data.get(15)).toString());
          bankMVO.setState(CommonFunction.checkNull(data.get(16)).toString());
          bankMVO.setTxtDistCode(CommonFunction.checkNull(data.get(17)).toString());
          bankMVO.setDist(CommonFunction.checkNull(data.get(18)).toString());
          bankMVO.setPincode(CommonFunction.checkNull(data.get(19)).toString());
          bankMVO.setContractPerson(CommonFunction.checkNull(data.get(20)).toString());
          bankMVO.setPhoneOff(CommonFunction.checkNull(data.get(21)).toString());
          bankMVO.setPhoneRes(CommonFunction.checkNull(data.get(22)).toString());
          bankMVO.setEmail(CommonFunction.checkNull(data.get(23)).toString());
          bankMVO.setRegistrationNo(CommonFunction.checkNull(data.get(24)).toString());

          bankMVO.setPan(CommonFunction.checkNull(data.get(25)).toString());

          bankMVO.setEmpanelStatus(CommonFunction.checkNull(data.get(26)).toString());

          bankMVO.setTotalRecordSize(count);
          detailList.add(bankMVO);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public String updateDealerData(Object ob, String[] userName)
  {
    DealerMasterVo vo = (DealerMasterVo)ob;
    String dealerId = vo.getDealerId();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    logger.info(new StringBuilder().append("vo.getdealerStatus():-").append(vo.getDealerStatus()).toString());
    ArrayList updatelist = new ArrayList();
    String selquery = new StringBuilder().append("select BP_TYPE from cr_dsa_dealer_m where DEALER_ID<>'").append(dealerId).append("' AND DEALER_DESC='").append(StringEscapeUtils.escapeSql(vo.getDealerDes())).append("'").toString();
    logger.info(new StringBuilder().append("In updateDealerData.............inside ejb server file...........Dao Impl").append(selquery).toString());
    boolean st = false;
    int count = 0;
    String result = "";
    boolean status = false;
    String stat = "";
    try
    {
      ArrayList bpTypeList = ConnectionDAOforEJB.sqlSelect(selquery);
      logger.info(new StringBuilder().append("bpTypeList size: ").append(bpTypeList.size()).toString());
      for (int i = 0; i < bpTypeList.size(); i++) {
        logger.info(new StringBuilder().append("bpTypeList ").append(bpTypeList.get(i).toString()).toString());
        logger.info(new StringBuilder().append("vo.getLbxdealerType(): ").append(vo.getLbxdealerType()).toString());
        ArrayList data = (ArrayList)bpTypeList.get(i);
        if (data.contains(vo.getLbxdealerType()))
        {
          count++;
          logger.info("BP Type Match");
        }
      }
      if (count == 0)
        st = false;
      else {
        st = true;
      }
      if (!st) {
        if ((vo.getDealerStatus() != null) && (vo.getDealerStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        String empnl = "";
        if ((vo.getEmpanelStatus() != null) && (vo.getEmpanelStatus().equals("on")))
          empnl = "Y";
        else {
          empnl = "N";
        }

        StringBuffer bufInsSql = new StringBuffer();
        logger.info("In updateDealerData.............inside ejb server file...........Dao Impl");
        bufInsSql.append("UPDATE cr_dsa_dealer_m set DEALER_DESC=?, BP_TYPE=?,BANK_ID=?,BANK_BRANCH_ID=?,BANK_ACCOUNT=?,");
        bufInsSql.append(new StringBuilder().append("REC_STATUS=?, DEALER_DESC_L=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),AUTHOR_ID=?,AUTHOR_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND)").toString());
        bufInsSql.append(",ADDRESS_LINE1=?,ADDRESS_LINE2=?,ADDRESS_LINE3=?,COUNTRY=?,STATE=?,DISTRICT=?,PINCODE=?,CONTRACT_PERSON=?,MOBILE_NO=?,LANDLINE_NO=?,EMAIL=?,REGISTRATION_NO=?,PAN=?,EMPANELLED_STATUS=? where DEALER_ID=?");

        if (CommonFunction.checkNull(vo.getDealerDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getDealerDes().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getLbxdealerType()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getLbxdealerType().trim());

        if (CommonFunction.checkNull(vo.getLbxBankID()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getLbxBankID().trim());
        if (CommonFunction.checkNull(vo.getLbxBranchID()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getLbxBranchID().trim());
        if (CommonFunction.checkNull(vo.getAccountNo()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getAccountNo().trim());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(vo.getDealerDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getDealerDes().toUpperCase());

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerId());
        }
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerDate());
        }
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerId());
        }
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerDate());
        }

        if (CommonFunction.checkNull(vo.getAddressDealer1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getAddressDealer1());
        }
        if (CommonFunction.checkNull(vo.getAddressDealer2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getAddressDealer2());
        }
        if (CommonFunction.checkNull(vo.getAddressDealer3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getAddressDealer3());
        }
        if (CommonFunction.checkNull(vo.getTxtCountryCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getTxtCountryCode());
        }
        if (CommonFunction.checkNull(vo.getTxtStateCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getTxtStateCode());
        }
        if (CommonFunction.checkNull(vo.getTxtDistCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getTxtDistCode());
        }
        if (CommonFunction.checkNull(vo.getPincode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getPincode());
        }
        if (CommonFunction.checkNull(vo.getContractPerson()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getContractPerson());
        }
        if (CommonFunction.checkNull(vo.getPhoneOff()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getPhoneOff());
        }
        if (CommonFunction.checkNull(vo.getPhoneRes()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getPhoneRes());
        }
        if (CommonFunction.checkNull(vo.getEmail()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getEmail());
        }
        if (CommonFunction.checkNull(vo.getRegistrationNo()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getRegistrationNo());
        }

        if (CommonFunction.checkNull(vo.getPan()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getPan());
        }

        if (CommonFunction.checkNull(empnl).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(empnl);
        }
        if (CommonFunction.checkNull(vo.getDealerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getDealerId().toUpperCase().trim());
        }

        insertPrepStmtObject.setSql(bufInsSql.toString());

        updatelist.add(insertPrepStmtObject);
        logger.info(new StringBuilder().append("In getListOfValues").append(bufInsSql.toString()).toString());

        insertPrepStmtObject = null;
        insertPrepStmtObject = new PrepStmtObject();
        bufInsSql = null;
        bufInsSql = new StringBuffer();

        String query = new StringBuilder().append("DELETE FROM cr_dsa_dealer_user_m WHERE DEALER_ID='").append(dealerId).append("'").toString();
        logger.info(new StringBuilder().append("In insertUserBranchMaster.....................................Dao Impl").append(query).toString());
        insertPrepStmtObject.setSql(query);
        updatelist.add(insertPrepStmtObject);

        if ((vo.getDealerStatus() != null) && (vo.getDealerStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        if ((userName != null) && 
          (userName.length > 0)) {
          for (int i = 0; i < userName.length; i++) {
            logger.info(new StringBuilder().append("userName[i]").append(userName[i]).toString());

            insertPrepStmtObject = null;
            insertPrepStmtObject = new PrepStmtObject();
            bufInsSql = null;
            bufInsSql = new StringBuffer();
            bufInsSql.append("INSERT INTO cr_dsa_dealer_user_m(DEALER_ID,user_id,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");
            bufInsSql.append(" values ( ");
            bufInsSql.append(" ?,");
            bufInsSql.append(" ?,");
            bufInsSql.append(" ?,");
            bufInsSql.append(" ?,");
            bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
            bufInsSql.append(" ?,");
            bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND))").toString());

            if (CommonFunction.checkNull(vo.getDealerId()).equalsIgnoreCase(""))
            {
              insertPrepStmtObject.addNull();
            }
            else insertPrepStmtObject.addString(vo.getDealerId().toUpperCase());

            if (CommonFunction.checkNull(userName[i]).equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else {
              insertPrepStmtObject.addString(userName[i]);
            }

            if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else {
              insertPrepStmtObject.addString(stat);
            }
            if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else
              insertPrepStmtObject.addString(vo.getMakerId());
            if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
            {
              insertPrepStmtObject.addNull();
            }
            else insertPrepStmtObject.addString(vo.getMakerDate());

            if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else
              insertPrepStmtObject.addString(vo.getMakerId());
            if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
            {
              insertPrepStmtObject.addNull();
            }
            else insertPrepStmtObject.addString(vo.getMakerDate());

            insertPrepStmtObject.setSql(bufInsSql.toString());
            logger.info(new StringBuilder().append("IN insertUserMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

            updatelist.add(insertPrepStmtObject);
          }

        }

        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);

        if (status)
          result = "saved";
        else {
          result = "notsaved";
        }
      }
      else
      {
        result = "dataExist";
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return result;
  }

  public String insertDepartmentMaster(Object ob)
  {
    DepartmentMasterVo vo = (DepartmentMasterVo)ob;
    boolean status = false;
    String result = "";
    logger.info(new StringBuilder().append("In insertDepartmentMaster............inside ejb server file...........Dao Impl").append(vo.getDepartmentStatus()).toString());
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String query = new StringBuilder().append("select DEPARTMENT_ID,DEPARTMENT_DESC from com_department_m where DEPARTMENT_ID='").append(StringEscapeUtils.escapeSql(vo.getDepartmentId().trim())).append("' OR DEPARTMENT_DESC='").append(StringEscapeUtils.escapeSql(vo.getDepartmentDes().trim())).append("'").toString();

    logger.info(new StringBuilder().append("In insertDepartmentMaster...........inside ejb server file.............Dao Impl").append(query).toString());

    boolean st = ConnectionDAOforEJB.checkStatus(query);
    try
    {
      if (!st) {
        if ((vo.getDepartmentStatus() != null) && (vo.getDepartmentStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info("In insert Department master");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("insert into com_department_m(DEPARTMENT_DESC,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");

        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

        if (CommonFunction.checkNull(vo.getDepartmentDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getDepartmentDes().toUpperCase().trim());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(stat);
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN insertDepartmentMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        if (status)
          result = "saved";
        else {
          result = "notsaved";
        }
        logger.info(new StringBuilder().append("In saveDepartmentData......................").append(status).toString());
      }
      else
      {
        result = "dataExist";
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return result;
  }

  public ArrayList searchDepartmentData(Object ob)
  {
    String DepartmentId = "";
    String DepartmentDes = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    ArrayList searchlist = new ArrayList();
    DepartmentMasterVo DepartmentMasterVo = (DepartmentMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In searchDepartmentData()...............inside ejb server file.............Dao Impl");
      DepartmentId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(DepartmentMasterVo.getDepartmentId())).trim();
      DepartmentDes = StringEscapeUtils.escapeSql(CommonFunction.checkNull(DepartmentMasterVo.getDepartmentSearchDes())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append(" select Department_ID,Department_DESC,");
      bufInsSql.append(" if(REC_STATUS='A','Active','Inactive')as Status FROM com_department_m ");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM com_department_m ");

      if ((!DepartmentId.equalsIgnoreCase("")) && (!DepartmentDes.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append("WHERE Department_DESC like '%").append(DepartmentDes).append("%' AND DEPARTMENT_ID='").append(DepartmentId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE Department_DESC like '%").append(DepartmentDes).append("%' AND DEPARTMENT_ID='").append(DepartmentId).append("'").toString());
      }
      else if (!DepartmentDes.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE Department_DESC LIKE '%").append(DepartmentDes).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE Department_DESC LIKE '%").append(DepartmentDes).append("%' ").toString());
      }
      else if (!DepartmentId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE DEPARTMENT_ID = '").append(DepartmentId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE DEPARTMENT_ID = '").append(DepartmentId).append("' ").toString());
      }
      bufInsSql.append(" ORDER BY DEPARTMENT_ID");

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((DepartmentId.trim() == null) && (DepartmentDes.trim() == null)) || ((DepartmentId.trim().equalsIgnoreCase("")) && (DepartmentDes.trim().equalsIgnoreCase(""))) || (DepartmentMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(DepartmentMasterVo.getCurrentPageLink()).toString());
        if (DepartmentMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (DepartmentMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchDepartmentData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info("In searchDepartmentData...........inside ejb server file............Dao Impl");
      logger.info(new StringBuilder().append("searchDepartmentData ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          DepartmentMasterVo deptMVO = new DepartmentMasterVo();

          deptMVO.setDepartmentIdModify(new StringBuilder().append("<a href=departmentMasterSearch.do?method=openEditDepartment&DepartmentId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          deptMVO.setDepartmentId(CommonFunction.checkNull(data.get(0)).toString());
          deptMVO.setDepartmentDes(CommonFunction.checkNull(data.get(1)).toString());
          deptMVO.setDepartmentStatus(CommonFunction.checkNull(data.get(2)).toString());
          deptMVO.setTotalRecordSize(count);
          detailList.add(deptMVO);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean updateDepartmentData(Object ob) {
    DepartmentMasterVo vo = (DepartmentMasterVo)ob;
    logger.info(new StringBuilder().append("vo.getDepartmentStatus():-").append(vo.getDepartmentStatus()).toString());
    ArrayList updatelist = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

    boolean status = false;
    String stat = "";
    try
    {
      if ((vo.getDepartmentStatus() != null) && (vo.getDepartmentStatus().equals("on")))
      {
        stat = "A";
      }
      else stat = "X";

      logger.info("In updateDepartmentData...........inside ejb server file........Dao Impl");

      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append(new StringBuilder().append(" UPDATE com_department_m set Department_DESC=?,REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) ").toString());

      bufInsSql.append("where DEPARTMENT_ID=?");

      if (CommonFunction.checkNull(vo.getDepartmentDes()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getDepartmentDes().toUpperCase().trim());

      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat);
      }
      if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getMakerId());
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerDate());
      }
      if (CommonFunction.checkNull(vo.getDepartmentId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getDepartmentId().toUpperCase().trim());

      insertPrepStmtObject.setSql(bufInsSql.toString());

      updatelist.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("In getListOfValues").append(bufInsSql).toString());
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public String insertReasonMaster(Object ob)
  {
    ReasonMasterVo vo = (ReasonMasterVo)ob;
    StringBuilder query = new StringBuilder();
    String result = "";
    boolean status = false;
    logger.info(new StringBuilder().append("In insertReasonMaster..........inside ejb server file...........Dao Impl").append(vo.getRecStatus()).toString());

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String stat1 = "N";
    try {
      query.append(new StringBuilder().append("select REASON_TYPE from com_reason_m where REASON_TYPE='").append(StringEscapeUtils.escapeSql(vo.getLbxReason().trim())).append("' AND ").toString());
      query.append(new StringBuilder().append("REASON_DESC='").append(StringEscapeUtils.escapeSql(vo.getReasonDes())).append("' ").toString());
      logger.info(new StringBuilder().append("In insertReasonMaster..........inside ejb server file...........Dao Impl").append(query).toString());
      boolean st = ConnectionDAOforEJB.checkStatus(query.toString());
      if (st)
      {
        result = "EX";
      }

      if (!st) {
        if ((vo.getRecStatus() != null) && (vo.getRecStatus().equals("on")))
          stat = "A";
        else {
          stat = "X";
        }

        if ((vo.getChargeFlag() != null) && (vo.getChargeFlag().equals("on")))
        {
          stat1 = "Y";
        }
        else stat1 = "N";

        logger.info("In insert Reason master");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("insert into com_reason_m(REASON_TYPE,REASON_DESC,CHARGE_FLAG,REC_STATUS,REASON_DESC_L,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,REASON_SHORT_CODE)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) ,").toString());
        bufInsSql.append("?)");

        logger.info(new StringBuilder().append("In insertReasonMaster...............adaf......................Dao Impl").append(vo.getLbxReason()).toString());

        if (CommonFunction.checkNull(vo.getLbxReason()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getLbxReason().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getReasonDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getReasonDes().toUpperCase().trim());

        if (CommonFunction.checkNull(stat1).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat1);
        }
        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(vo.getReasonDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getReasonDes().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        if (CommonFunction.checkNull(vo.getReasonShortcode()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getReasonShortcode().toUpperCase().trim());

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN insertReasonMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveReasonData111......................").append(status).toString());

        if (status)
        {
          result = "S";
        }
        else
        {
          result = "E";
        }
      }
    }
    catch (Exception e) {
      result = "E";
      e.printStackTrace();
    }

    return result;
  }

  public ArrayList searchReasonData(Object ob)
  {
    String reasonId = "";
    String reasonDes = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    ArrayList searchlist = new ArrayList();
    ReasonMasterVo reasonMasterVo = (ReasonMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchReasonData()........inside ejb server file...........Dao Impl");
      reasonId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(reasonMasterVo.getReasonId())).trim();
      reasonDes = StringEscapeUtils.escapeSql(CommonFunction.checkNull(reasonMasterVo.getReasonSearchDes())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("SELECT REASON_ID,(SELECT A.DESCRIPTION FROM GENERIC_MASTER A WHERE GENERIC_KEY='REASON_TYPE' AND A.VALUE=B.REASON_TYPE)AS REASON_TYPE,");
      bufInsSql.append(" REASON_DESC,if(CHARGE_FLAG='Y','Yes','No')as CHARGE_FLAG, ");
      bufInsSql.append("if(REC_STATUS='A','Active','Inactive')as REC_STATUS ,REASON_TYPE,REASON_SHORT_CODE");
      bufInsSql.append(" from com_reason_m B ");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM com_reason_m B ");

      if ((!reasonId.equalsIgnoreCase("")) && (!reasonDes.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE REASON_ID='").append(reasonId).append("' AND REASON_DESC like '%").append(reasonDes).append("%'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE REASON_ID='").append(reasonId).append("' AND REASON_DESC like '%").append(reasonDes).append("%'").toString());
      }
      else if (!reasonId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE REASON_ID = '").append(reasonId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE REASON_ID = '").append(reasonId).append("' ").toString());
      }
      else if (!reasonDes.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE REASON_DESC LIKE '%").append(reasonDes).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE REASON_DESC LIKE '%").append(reasonDes).append("%' ").toString());
      }
      bufInsSql.append(" ORDER BY REASON_ID");

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((reasonId.trim() == null) && (reasonDes.trim() == null)) || ((reasonId.trim().equalsIgnoreCase("")) && (reasonDes.trim().equalsIgnoreCase(""))) || (reasonMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(reasonMasterVo.getCurrentPageLink()).toString());
        if (reasonMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (reasonMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchReasonData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info("In searchReasonData...........inside ejb server file..........Dao Impl");
      logger.info(new StringBuilder().append("searchReasonData ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++) {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          ReasonMasterVo deptMVO = new ReasonMasterVo();

          deptMVO.setReasonIdModify(new StringBuilder().append("<a href=reasonMasterSearch.do?method=openEditReason&ReasonId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(6)).toString()).append("</a>").toString());

          deptMVO.setReasonId(CommonFunction.checkNull(data.get(0)).toString());
          deptMVO.setLbxReason(CommonFunction.checkNull(data.get(1)).toString());
          deptMVO.setReasonDes(CommonFunction.checkNull(data.get(2)).toString());
          deptMVO.setChargeFlag(CommonFunction.checkNull(data.get(3)).toString());
          deptMVO.setRecStatus(CommonFunction.checkNull(data.get(4)).toString());
          deptMVO.setReasonType(CommonFunction.checkNull(data.get(5)).toString());
          deptMVO.setReasonShortcode(CommonFunction.checkNull(data.get(6)).toString());
          deptMVO.setTotalRecordSize(count);
          detailList.add(deptMVO);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean updateReasonData(Object ob) {
    ReasonMasterVo vo = (ReasonMasterVo)ob;
    String reasonId = vo.getReasonId();
    logger.info(new StringBuilder().append("vo.getRecStatus():-").append(vo.getRecStatus()).toString());
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();
    boolean status = false;
    String stat = "";
    String stat1 = "";
    try {
      if ((vo.getRecStatus() != null) && (vo.getRecStatus().equals("on")))
        stat = "A";
      else {
        stat = "X";
      }

      if ((vo.getChargeFlag() != null) && (vo.getChargeFlag().equals("on")))
        stat1 = "Y";
      else {
        stat1 = "N";
      }

      logger.info(new StringBuilder().append("1.Reason type Id is...........").append(vo.getLbxReason()).toString());

      logger.info(new StringBuilder().append("2.reason type is.............").append(vo.getReasonType()).toString());

      logger.info("In updateReasonData..........inside ejb server file...........Dao Impl");

      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("UPDATE com_reason_m set REASON_TYPE=?,REASON_DESC=?,CHARGE_FLAG=?,REASON_SHORT_CODE=?,");
      bufInsSql.append(new StringBuilder().append(" REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) ").toString());
      bufInsSql.append(" where Reason_ID=?");

      if (CommonFunction.checkNull(vo.getLbxReason()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getLbxReason().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getReasonDes()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getReasonDes().toUpperCase().trim());

      if (CommonFunction.checkNull(stat1).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat1);
      }
      if (CommonFunction.checkNull(vo.getReasonShortcode()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getReasonShortcode());
      }

      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat);
      }

      if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getMakerId());
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerDate());
      }

      if (CommonFunction.checkNull(vo.getReasonId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getReasonId().toUpperCase().trim());
      }

      insertPrepStmtObject.setSql(bufInsSql.toString());

      updatelist.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("In getListOfValues").append(bufInsSql.toString()).toString());
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return status;
  }

  public boolean insertCountryMaster(Object ob)
  {
    CountryMasterVo vo = (CountryMasterVo)ob;
    boolean status = false;

    logger.info(new StringBuilder().append("In insertCountryMaster.........inside ejb server file...........Dao Impl").append(vo.getCountryStatus()).toString());

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";

    String query = new StringBuilder().append("select COUNTRY_DESC from com_country_m where COUNTRY_DESC='").append(StringEscapeUtils.escapeSql(vo.getCountryDes().trim())).append("'").toString();

    logger.info(new StringBuilder().append("In insertCountryMaster.......inside ejb server file..........Dao Impl").append(query).toString());

    boolean st = ConnectionDAOforEJB.checkStatus(query);
    try
    {
      if (!st) {
        if ((vo.getCountryStatus() != null) && (vo.getCountryStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info("In insert Country master");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("insert into com_country_m(COUNTRY_DESC,CURRENCY_ID,REC_STATUS,COUNTRY_DESC_L,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

        if (CommonFunction.checkNull(vo.getCountryDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getCountryDes().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getcurrencyId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getcurrencyId().toUpperCase().trim());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(vo.getCountryDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getCountryDes().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN insertCountryMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveCountryData......................").append(status).toString());
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList searchCountryData(Object ob)
  {
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    String countryId = "";
    String countryDesc = "";
    ArrayList searchlist = new ArrayList();
    CountryMasterVo countryMasterVo = (CountryMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In searchCountryData()..............inside ejb server file.......................Dao Impl");

      countryId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(countryMasterVo.getCountryId())).trim();
      countryDesc = StringEscapeUtils.escapeSql(CommonFunction.checkNull(countryMasterVo.getCountrySearchDes())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("SELECT COUNTRY_ID,COUNTRY_DESC,CURRENCY_ID,");
      bufInsSql.append("if(REC_STATUS='A','Active','Inactive')as REC_STATUS ");
      bufInsSql.append(" FROM com_country_m ");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM com_country_m ");

      if ((!countryId.equals("")) && (!countryDesc.equals(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE COUNTRY_ID = '").append(countryId).append("' AND COUNTRY_DESC like '%").append(countryDesc).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE COUNTRY_ID = '").append(countryId).append("' AND COUNTRY_DESC like '%").append(countryDesc).append("%' ").toString());
      }
      else if (!countryId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE COUNTRY_ID = '").append(countryId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE COUNTRY_ID = '").append(countryId).append("' ").toString());
      }
      else if (!countryDesc.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE COUNTRY_DESC like '%").append(countryDesc).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE COUNTRY_DESC like '%").append(countryDesc).append("%' ").toString());
      }
      bufInsSql.append("ORDER BY COUNTRY_ID");
      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());

      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((countryId.trim() == null) && (countryDesc.trim() == null)) || ((countryId.trim().equalsIgnoreCase("")) && (countryDesc.trim().equalsIgnoreCase(""))) || (countryMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(countryMasterVo.getCurrentPageLink()).toString());
        if (countryMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (countryMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchCountryData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info("In searchCountryData.....................................Dao Impl");
      logger.info(new StringBuilder().append("searchCountryData ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          CountryMasterVo deptMVO = new CountryMasterVo();
          deptMVO.setCountryIdModify(new StringBuilder().append("<a href=countryMaster.do?method=openEditCountry&CountryId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          deptMVO.setCountryId(CommonFunction.checkNull(data.get(0)).toString());
          deptMVO.setCountryDes(CommonFunction.checkNull(data.get(1)).toString());
          deptMVO.setcurrencyId(CommonFunction.checkNull(data.get(2)).toString());
          deptMVO.setCountryStatus(CommonFunction.checkNull(data.get(3)).toString());
          deptMVO.setTotalRecordSize(count);
          detailList.add(deptMVO);
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean updateCountryData(Object ob) {
    CountryMasterVo vo = (CountryMasterVo)ob;
    String countryId = vo.getCountryId();
    logger.info(new StringBuilder().append("vo.getCountryStatus():-").append(vo.getCountryStatus()).toString());
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();
    String selquery = new StringBuilder().append("select COUNTRY_ID,COUNTRY_DESC from com_country_m where COUNTRY_ID<>'").append(vo.getCountryId()).append("' AND COUNTRY_DESC='").append(StringEscapeUtils.escapeSql(vo.getCountryDes())).append("'").toString();
    logger.info(new StringBuilder().append("In updateCountryMaster.......inside ejb server file.......................Dao Impl").append(selquery).toString());
    boolean st = ConnectionDAOforEJB.checkStatus(selquery);
    boolean status = false;
    String stat = "";
    try
    {
      if (!st) {
        if ((vo.getCountryStatus() != null) && (vo.getCountryStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        StringBuffer bufInsSql = new StringBuffer();
        logger.info("In updateCountryData..........inside ejb server file............Dao Impl");

        bufInsSql.append(" UPDATE com_country_m set COUNTRY_DESC=?,CURRENCY_ID=?,");

        bufInsSql.append(new StringBuilder().append(" REC_STATUS=?,COUNTRY_DESC_L=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) where COUNTRY_ID=?").toString());

        if (CommonFunction.checkNull(vo.getCountryDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getCountryDes().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getcurrencyId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getcurrencyId().toUpperCase().trim());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(vo.getCountryDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getCountryDes().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        if (CommonFunction.checkNull(vo.getCountryId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getCountryId());

        insertPrepStmtObject.setSql(bufInsSql.toString());

        updatelist.add(insertPrepStmtObject);
        logger.info(new StringBuilder().append("In getListOfValues").append(bufInsSql.toString()).toString());
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return status;
  }

  public boolean insertRegionMaster(Object ob)
  {
    RegionMasterVo vo = (RegionMasterVo)ob;
    boolean status = false;
    logger.info(new StringBuilder().append("In insertCountryMaster............inside ejb server file.............Dao Impl").append(vo.getRegionStatus()).toString());

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String query = new StringBuilder().append("select REGION_ID,REGION_DESC from com_region_m where REGION_DESC='").append(StringEscapeUtils.escapeSql(vo.getRegionDes().trim())).append("'").toString();

    logger.info(new StringBuilder().append("In insertCountryMaster.........inside ejb server file...............Dao Impl").append(query).toString());

    boolean st = ConnectionDAOforEJB.checkStatus(query);
    try
    {
      if (!st) {
        if ((vo.getRegionStatus() != null) && (vo.getRegionStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info("In insert Region master");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("insert into com_region_m(REGION_DESC,REC_STATUS,REGION_DESC_L,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");

        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

        if (CommonFunction.checkNull(vo.getRegionDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getRegionDes().toUpperCase().trim());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(vo.getRegionDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getRegionDes().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN insertRegionMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveRegionData.............inside ejb server file.........").append(status).toString());
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList searchRegionData(Object ob)
  {
    String regionId = "";
    String regionDes = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    ArrayList searchlist = new ArrayList();
    RegionMasterVo regionMasterVo = (RegionMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In searchRegionData()........inside ejb server file...........Dao Impl");

      regionId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(regionMasterVo.getRegionId())).trim();
      regionDes = StringEscapeUtils.escapeSql(CommonFunction.checkNull(regionMasterVo.getRegionSearchDes())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("SELECT REGION_ID,REGION_DESC,");
      bufInsSql.append("if(REC_STATUS='A','Active','Inactive')as REC_STATUS ");
      bufInsSql.append(" FROM com_region_m ");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM com_region_m ");

      if ((!regionId.equalsIgnoreCase("")) && (!regionDes.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append("WHERE REGION_DESC like '%").append(regionDes).append("%' AND REGION_ID='").append(regionId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE REGION_DESC like '%").append(regionDes).append("%' AND REGION_ID='").append(regionId).append("'").toString());
      }
      else if (!regionDes.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE REGION_DESC LIKE '%").append(regionDes).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE REGION_DESC LIKE '%").append(regionDes).append("%' ").toString());
      }
      else if (!regionId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE REGION_ID = '").append(regionId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE REGION_ID = '").append(regionId).append("' ").toString());
      }
      bufInsSql.append("ORDER BY REGION_ID");

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((regionDes.trim() == null) && (regionId.trim() == null)) || ((regionDes.trim().equalsIgnoreCase("")) && (regionId.trim().equalsIgnoreCase(""))) || (regionMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(regionMasterVo.getCurrentPageLink()).toString());
        if (regionMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (regionMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchRegionData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info("In searchRegionData.....................................Dao Impl");
      logger.info(new StringBuilder().append("searchRegionData ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          RegionMasterVo deptMVO = new RegionMasterVo();

          deptMVO.setRegionIdModify(new StringBuilder().append("<a href=regionMasterSearch.do?method=openEditRegion&RegionId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          deptMVO.setRegionId(CommonFunction.checkNull(data.get(0)).toString());
          deptMVO.setRegionDes(CommonFunction.checkNull(data.get(1)).toString());
          deptMVO.setRegionStatus(CommonFunction.checkNull(data.get(2)).toString());
          deptMVO.setTotalRecordSize(count);
          detailList.add(deptMVO);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean updateRegionData(Object ob) {
    RegionMasterVo vo = (RegionMasterVo)ob;
    String regionId = vo.getRegionId();
    logger.info(new StringBuilder().append("vo.getRegionStatus():-").append(vo.getRegionStatus()).toString());
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();

    boolean status = false;
    String stat = "";
    String query = new StringBuilder().append("select REGION_ID,REGION_DESC from com_region_m where REGION_ID <> '").append(StringEscapeUtils.escapeSql(vo.getRegionId().trim())).append("' AND REGION_DESC = '").append(StringEscapeUtils.escapeSql(vo.getRegionDes().trim())).append("'").toString();
    logger.info(new StringBuilder().append("In updateRegionData............inside ejb server file...............Dao Impl").append(query).toString());
    boolean st = ConnectionDAOforEJB.checkStatus(query);
    try
    {
      if (!st) {
        if ((vo.getRegionStatus() != null) && (vo.getRegionStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        StringBuffer bufInsSql = new StringBuffer();

        logger.info("In updateRegionData.....................................Dao Impl");

        bufInsSql.append("UPDATE com_region_m set Region_DESC=?,");
        bufInsSql.append(new StringBuilder().append(" REC_STATUS=?,REGION_DESC_L=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND)  where REGION_ID=?").toString());

        if (CommonFunction.checkNull(vo.getRegionDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getRegionDes().toUpperCase().trim());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(vo.getRegionDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getRegionDes().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        if (CommonFunction.checkNull(vo.getRegionId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getRegionId().toUpperCase().trim());
        }

        insertPrepStmtObject.setSql(bufInsSql.toString());
        updatelist.add(insertPrepStmtObject);
        logger.info(new StringBuilder().append("In getListOfValues").append(bufInsSql.toString()).toString());
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return status;
  }

  public boolean insertDistrictMaster(Object ob)
  {
    DistrictMasterVo vo = (DistrictMasterVo)ob;
    boolean status = false;
    logger.info(new StringBuilder().append("In insertDistrictMaster.........inside ejb server file.............Dao Impl").append(vo.getDistrictStatus()).toString());

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";

    String query = new StringBuilder().append("select DISTRICT_DESC from com_district_m where DISTRICT_DESC='").append(StringEscapeUtils.escapeSql(vo.getDistrictDes().trim())).append("'").toString();

    logger.info(new StringBuilder().append("In insertDistrictMaster.........inside ejb server file.............Dao Impl").append(query).toString());

    boolean st = ConnectionDAOforEJB.checkStatus(query);
    try {
      if (!st) {
        if ((vo.getDistrictStatus() != null) && (vo.getDistrictStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info("In insert District master");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("insert into com_district_m(DISTRICT_DESC,STATE_ID,REC_STATUS,DISTRICT_DESC_L,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");

        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

        if (CommonFunction.checkNull(vo.getDistrictDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getDistrictDes().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getLbxStateId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getLbxStateId().toUpperCase());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(vo.getDistrictDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getDistrictDes().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN insertDistrictMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveDistrictData......................").append(status).toString());
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return status;
  }

  public ArrayList searchDistrictData(Object ob) {
    String districtId = "";
    String districtDes = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    ArrayList searchlist = new ArrayList();
    DistrictMasterVo districtMasterVo = (DistrictMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchDistrictData().........inside ejb server file..........Dao Impl");
      districtId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(districtMasterVo.getDistrictId())).trim();
      districtDes = StringEscapeUtils.escapeSql(CommonFunction.checkNull(districtMasterVo.getDistrictSearchDes())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("SELECT DISTRICT_ID,DISTRICT_DESC,");
      bufInsSql.append(" STATE_ID,(SELECT A.STATE_DESC FROM com_state_m A WHERE STATE_ID=B.STATE_ID)AS State,");
      bufInsSql.append(" if(REC_STATUS='A','Active','Inactive')as REC_STATUS ");
      bufInsSql.append(" FROM com_district_m B ");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM com_district_m B ");

      if ((!districtId.equalsIgnoreCase("")) && (!districtDes.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE DISTRICT_DESC like '%").append(districtDes).append("%' AND DISTRICT_ID='").append(districtId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE DISTRICT_DESC like '%").append(districtDes).append("%' AND DISTRICT_ID='").append(districtId).append("'").toString());
      }
      else if (!districtDes.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE DISTRICT_DESC LIKE '%").append(districtDes).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE DISTRICT_DESC LIKE '%").append(districtDes).append("%' ").toString());
      }
      else if (!districtId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE DISTRICT_ID = '").append(districtId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE DISTRICT_ID = '").append(districtId).append("' ").toString());
      }

      bufInsSql.append(" ORDER BY DISTRICT_ID");

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((districtId.trim() == null) && (districtDes.trim() == null)) || ((districtId.trim().equalsIgnoreCase("")) && (districtDes.trim().equalsIgnoreCase(""))) || (districtMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(districtMasterVo.getCurrentPageLink()).toString());
        if (districtMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (districtMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchDistrictData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info("In searchDistrictData.........inside ejb server file..........Dao Impl");
      logger.info(new StringBuilder().append("searchDistrictData ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          DistrictMasterVo dMVO = new DistrictMasterVo();

          dMVO.setDistrictIdModify(new StringBuilder().append("<a href=districtMasterSearch.do?method=openEditDistrict&DistrictId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          dMVO.setDistrictId(CommonFunction.checkNull(data.get(0)).toString());
          dMVO.setDistrictDes(CommonFunction.checkNull(data.get(1)).toString());
          dMVO.setLbxStateId(CommonFunction.checkNull(data.get(2)).toString());
          dMVO.setStateId(CommonFunction.checkNull(data.get(3)).toString());
          dMVO.setDistrictStatus(CommonFunction.checkNull(data.get(4)).toString());
          dMVO.setTotalRecordSize(count);
          detailList.add(dMVO);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean updateDistrictData(Object ob) {
    DistrictMasterVo vo = (DistrictMasterVo)ob;
    String districtId = vo.getDistrictId();
    logger.info(new StringBuilder().append("vo.getDistrictStatus():-").append(vo.getDistrictStatus()).toString());
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();
    String selquery = new StringBuilder().append("SELECT DISTRICT_ID,DISTRICT_DESC from com_district_m where DISTRICT_ID<>'").append(vo.getDistrictId()).append("' AND DISTRICT_DESC='").append(StringEscapeUtils.escapeSql(vo.getDistrictDes())).append("'").toString();
    logger.info(new StringBuilder().append("In updateDistrictMaster........inside ejb server file.............Dao Impl").append(selquery).toString());

    boolean status = false;
    String stat = "";
    boolean st = ConnectionDAOforEJB.checkStatus(selquery);
    try
    {
      if (!st) {
        if ((vo.getDistrictStatus() != null) && (vo.getDistrictStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info("In updateDistrictData........inside ejb server file............Dao Impl");

        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append(new StringBuilder().append(" UPDATE com_district_m set DISTRICT_DESC=?,STATE_ID=?, REC_STATUS=?,DISTRICT_DESC_L=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) ").toString());

        bufInsSql.append(" where DISTRICT_ID=?");

        if (CommonFunction.checkNull(vo.getDistrictDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getDistrictDes().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getLbxStateId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getLbxStateId().toUpperCase());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(vo.getDistrictDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getDistrictDes().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        if (CommonFunction.checkNull(vo.getDistrictId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getDistrictId());

        insertPrepStmtObject.setSql(bufInsSql.toString());

        updatelist.add(insertPrepStmtObject);
        logger.info(new StringBuilder().append("In getListOfValues").append(bufInsSql.toString()).toString());
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return status;
  }

  public boolean insertStateMaster(Object ob)
  {
    StateMasterVo vo = (StateMasterVo)ob;
    boolean status = false;
    logger.info(new StringBuilder().append("In insertStateMaster........inside ejb server file............Dao Impl").append(vo.getStateStatus()).toString());

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";

    String query = new StringBuilder().append("select STATE_DESC from com_state_m where STATE_DESC='").append(StringEscapeUtils.escapeSql(vo.getStateDes().trim())).append("'").toString();
    logger.info(new StringBuilder().append("In insertStateMaster........inside ejb server file...........Dao Impl").append(query).toString());

    boolean st = ConnectionDAOforEJB.checkStatus(query);
    try {
      if (!st) {
        if ((vo.getStateStatus() != null) && (vo.getStateStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info(new StringBuilder().append("In insert State master-->").append(vo.getVatPercent()).toString());
        logger.info(new StringBuilder().append("In service tax State master-->").append(vo.getServiceTax()).toString());
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("insert into com_state_m(STATE_DESC,COUNTRY_ID,REC_STATUS,STATE_DESC_L,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,VAT_PERCENT,SERVICE_TAX,GST_NO,UNIONTERRITORY,GST_STATE_ID)");

        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) ,").toString());
        bufInsSql.append(" ?, ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?)");

        if (CommonFunction.checkNull(vo.getStateDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getStateDes().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getTxtCountryCode()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getTxtCountryCode().toUpperCase().trim());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(vo.getStateDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getStateDes().toUpperCase().trim());

        insertPrepStmtObject.setSql(bufInsSql.toString());

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        if (CommonFunction.checkNull(vo.getVatPercent()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getVatPercent());
        }

        if (CommonFunction.checkNull(vo.getServiceTax()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getServiceTax());
        }
        if (CommonFunction.checkNull(vo.getGstId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getGstId());
        if (CommonFunction.checkNull(vo.getUnionterritory()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getUnionterritory());

        if (CommonFunction.checkNull(vo.getGstCode()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getGstCode());

        logger.info(new StringBuilder().append("IN insertStateMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveStateData......................").append(status).toString());
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return status;
  }

  public ArrayList searchStateData(Object ob) {
    String stateId = "";
    String stateDes = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    String gstId = "";
    String unionterritory = "";
    String gstCode = "";
    ArrayList searchlist = new ArrayList();
    StateMasterVo stateMasterVo = (StateMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchStateData().......................inside ejb server file.......................Dao Impl");
      stateId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(stateMasterVo.getStateId())).trim();
      stateDes = StringEscapeUtils.escapeSql(CommonFunction.checkNull(stateMasterVo.getStateSearchDes())).trim();
      gstId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(stateMasterVo.getGstId())).trim();
      unionterritory = StringEscapeUtils.escapeSql(CommonFunction.checkNull(stateMasterVo.getUnionterritory())).trim();
      gstCode = StringEscapeUtils.escapeSql(CommonFunction.checkNull(stateMasterVo.getGstCode())).trim();
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("SELECT STATE_ID,STATE_DESC,COUNTRY_ID,");
      bufInsSql.append("(SELECT A.COUNTRY_DESC FROM COM_COUNTRY_M A WHERE A.COUNTRY_ID=B.COUNTRY_ID)AS COUNTRY,");
      bufInsSql.append("if(REC_STATUS='A','Active','Inactive')as REC_STATUS ,VAT_PERCENT,SERVICE_TAX,GST_NO,UNIONTERRITORY,GST_STATE_ID");
      bufInsSql.append(" FROM COM_STATE_M B ");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM COM_STATE_M B ");

      if ((!stateId.equalsIgnoreCase("")) && (!stateDes.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append("WHERE STATE_DESC like '%").append(stateDes).append("%' AND STATE_ID='").append(stateId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE STATE_DESC like '%").append(stateDes).append("%' AND STATE_ID='").append(stateId).append("'").toString());
      }
      else if (!stateDes.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE STATE_DESC LIKE '%").append(stateDes).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE STATE_DESC LIKE '%").append(stateDes).append("%' ").toString());
      }
      else if (!stateId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE STATE_ID = '").append(stateId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE STATE_ID = '").append(stateId).append("' ").toString());
      }
      bufInsSql.append(" ORDER BY STATE_ID");

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((stateId.trim() == null) && (stateDes.trim() == null)) || ((stateId.trim().equalsIgnoreCase("")) && (stateDes.trim().equalsIgnoreCase(""))) || (stateMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(stateMasterVo.getCurrentPageLink()).toString());
        if (stateMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (stateMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchStateData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("searchStateData ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          StateMasterVo deptMVO = new StateMasterVo();

          deptMVO.setStateIdModify(new StringBuilder().append("<a href=stateMasterSearch.do?method=openEditState&StateId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          deptMVO.setStateId(CommonFunction.checkNull(data.get(0)).toString());
          deptMVO.setStateDes(CommonFunction.checkNull(data.get(1)).toString());
          deptMVO.setTxtCountryCode(CommonFunction.checkNull(data.get(2)).toString());
          deptMVO.setCountryId(CommonFunction.checkNull(data.get(3)).toString());
          deptMVO.setStateStatus(CommonFunction.checkNull(data.get(4)).toString());
          deptMVO.setVatPercent(CommonFunction.checkNull(data.get(5)).toString());
          deptMVO.setServiceTax(CommonFunction.checkNull(data.get(6)).toString());
          deptMVO.setGstId(CommonFunction.checkNull(data.get(7)).toString());
          if (CommonFunction.checkNull(data.get(8)).trim().equals(""))
          {
            deptMVO.setUnionterritory("N");
          }
          else
          {
            deptMVO.setUnionterritory(CommonFunction.checkNull(data.get(8)).toString());
          }

          deptMVO.setGstCode(CommonFunction.checkNull(data.get(9)).toString());
          deptMVO.setTotalRecordSize(count);
          detailList.add(deptMVO);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean updateStateData(Object ob) {
    StateMasterVo vo = (StateMasterVo)ob;
    String stateId = vo.getStateId();
    logger.info(new StringBuilder().append("vo.getStateStatus():-").append(vo.getStateStatus()).toString());
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();
    String selquery = new StringBuilder().append("select STATE_DESC from com_state_m where STATE_ID<>'").append(vo.getStateId()).append("' AND STATE_DESC='").append(vo.getStateDes()).append("'").toString();
    logger.info(new StringBuilder().append("In updateStateMaster............inside ejb server file.......................Dao Impl").append(selquery).toString());

    boolean status = false;
    String stat = "";
    boolean st = ConnectionDAOforEJB.checkStatus(selquery);
    try
    {
      if (!st) {
        if ((vo.getStateStatus() != null) && (vo.getStateStatus().equals("on")))
          stat = "A";
        else {
          stat = "X";
        }

        logger.info("In updateStateData...........inside ejb server file...........................Dao Impl");

        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append(new StringBuilder().append(" UPDATE com_state_m set STATE_DESC=?,COUNTRY_ID=?, REC_STATUS=?,STATE_DESC_L=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),VAT_PERCENT=?, service_tax=?,GST_NO=?,UNIONTERRITORY=?,GST_STATE_ID=? ").toString());

        bufInsSql.append("where STATE_ID=?");

        if (CommonFunction.checkNull(vo.getStateDes()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getStateDes().toUpperCase().trim());
        }

        if (CommonFunction.checkNull(vo.getTxtCountryCode()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getTxtCountryCode().toUpperCase().trim());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(vo.getStateDes()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getStateDes().toUpperCase().trim());
        }

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        if (CommonFunction.checkNull(vo.getVatPercent()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getVatPercent());

        if (CommonFunction.checkNull(vo.getServiceTax()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getServiceTax());

        if (CommonFunction.checkNull(vo.getGstId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getGstId());
        if (CommonFunction.checkNull(vo.getUnionterritory()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getUnionterritory());

        if (CommonFunction.checkNull(vo.getGstCode()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getGstCode());
        insertPrepStmtObject.setSql(bufInsSql.toString());

        if (CommonFunction.checkNull(vo.getStateId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getStateId());
        }
        insertPrepStmtObject.setSql(bufInsSql.toString());
        updatelist.add(insertPrepStmtObject);
        logger.info(new StringBuilder().append("In getListOfValues").append(bufInsSql).toString());
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return status;
  }

  public String insertAgencyMaster(Object ob, String[] userMapping)
  {
    MasterVo vo = (MasterVo)ob;
    boolean status = false;
    StringBuffer query = new StringBuffer();
    String result = "";
    logger.info(new StringBuilder().append("In insertAgencyMaster.............inside ejb server file............Dao Impl ").append(vo.getAgencyStatus()).toString());
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    PrepStmtObject insertPrepMappObject = null;
    StringBuffer bufInsSqlMapping = null;
    String stat = "X";
    String agencyType = CommonFunction.checkNull(vo.getAgencyType());
    try {
      query.append(new StringBuilder().append("select AGENCY_CODE,AGENCY_NAME from com_agency_m where  AGENCY_CODE='").append(StringEscapeUtils.escapeSql(vo.getAgencyCode().trim())).append("'").toString());

      logger.info(new StringBuilder().append("In insertAgencyMaster..............inside ejb server file............Dao Impl").append(query).toString());
      boolean st = ConnectionDAOforEJB.checkStatus(query.toString());
      if (st)
      {
        result = "EX";
      }

      if (!st) {
        if ((vo.getAgencyStatus() != null) && (vo.getAgencyStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info("In insert agency master");
        StringBuffer bufInsSql = new StringBuffer();

        if (agencyType.contains("EA"))
        {
          logger.info("In insert agency master Mapping");
          for (int i = 0; i < userMapping.length; i++) {
            bufInsSqlMapping = new StringBuffer();
            insertPrepMappObject = new PrepStmtObject();

            bufInsSqlMapping.append("Insert into com_agency_user_mapping(AGENCY_CODE,USER_ID,REC_STATUS)");
            bufInsSqlMapping.append(" values ( ");
            bufInsSqlMapping.append(" ?,");
            bufInsSqlMapping.append(" ?,");
            bufInsSqlMapping.append(" ?)");

            if (CommonFunction.checkNull(vo.getAgencyCode()).equalsIgnoreCase(""))
              insertPrepMappObject.addNull();
            else {
              insertPrepMappObject.addString(vo.getAgencyCode().toUpperCase().trim());
            }
            if (CommonFunction.checkNull(userMapping[i]).equalsIgnoreCase(""))
              insertPrepMappObject.addNull();
            else {
              insertPrepMappObject.addString(userMapping[i].toUpperCase().trim());
            }
            if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
              insertPrepMappObject.addNull();
            else {
              insertPrepMappObject.addString(stat);
            }
            insertPrepMappObject.setSql(bufInsSqlMapping.toString());
            qryList.add(insertPrepMappObject);
          }
        }
        bufInsSql.append("insert into com_agency_m(AGENCY_CODE,AGENCY_NAME,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,AGENCY_TYPE)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ? )");
        if (CommonFunction.checkNull(vo.getAgencyCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getAgencyCode().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getAgencyDesc()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getAgencyDesc().toUpperCase().trim());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());

        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());

        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        if (CommonFunction.checkNull(vo.getAgencyType()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getAgencyType());

        insertPrepStmtObject.setSql(bufInsSql.toString());

        logger.info(new StringBuilder().append("IN insertAgencyMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveAgencyMasterData......................").append(status).toString());

        if (status)
        {
          result = "S";
        }
        else
        {
          result = "E";
        }
      }
    } catch (Exception e) {
      result = "E";
      e.printStackTrace();
    }

    return result;
  }

  public ArrayList searchAgencyData(Object ob)
  {
    String agencyCode = "";
    String agencyDesc = "";
    String query1 = "";

    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    ArrayList searchlist = new ArrayList();
    MasterVo masterVo = (MasterVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      agencyCode = StringEscapeUtils.escapeSql(CommonFunction.checkNull(masterVo.getAgencySearchCode())).trim();
      agencyDesc = StringEscapeUtils.escapeSql(CommonFunction.checkNull(masterVo.getAgencySearchDesc())).trim();

      logger.info("In searchAgencyData()...........inside ejb server file............Dao Impl");

      bufInsSql.append("SELECT AGENCY_CODE,AGENCY_NAME,if(REC_STATUS='A','Active','Inactive')as Status,AGENCY_TYPE FROM COM_AGENCY_M ");
      bufInsSqlTempCount.append("SELECT COUNT(1) FROM COM_AGENCY_M ");

      if ((!agencyCode.equalsIgnoreCase("")) && (!agencyDesc.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append("WHERE AGENCY_NAME like '%").append(agencyDesc).append("%' AND AGENCY_CODE='").append(agencyCode).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE AGENCY_NAME like '%").append(agencyDesc).append("%' AND AGENCY_CODE='").append(agencyCode).append("'").toString());
      }
      else if (!agencyDesc.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE AGENCY_NAME LIKE '%").append(agencyDesc).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE AGENCY_NAME LIKE '%").append(agencyDesc).append("%' ").toString());
      }
      else if (!agencyCode.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE AGENCY_CODE = '").append(agencyCode).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE AGENCY_CODE = '").append(agencyCode).append("' ").toString());
      }
      bufInsSql.append(" ORDER BY AGENCY_CODE");

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((agencyCode.trim() == null) && (agencyDesc.trim() == null)) || ((agencyCode.trim().equalsIgnoreCase("")) && (agencyDesc.trim().equalsIgnoreCase(""))) || (masterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(masterVo.getCurrentPageLink()).toString());
        if (masterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (masterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("searchAgencyData ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++) {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          MasterVo mVo = new MasterVo();

          mVo.setAgencyCodeModify(new StringBuilder().append("<a href=agencyMasterSearch.do?method=openEditAgency&agencySearchCode=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          mVo.setAgencyCode(CommonFunction.checkNull(data.get(0)).toString());
          mVo.setAgencyDesc(CommonFunction.checkNull(data.get(1)).toString());
          mVo.setAgencyStatus(CommonFunction.checkNull(data.get(2)).toString());
          mVo.setAgencyType(CommonFunction.checkNull(data.get(3)).toString());
          detailList.add(mVo);
          mVo.setTotalRecordSize(count);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public ArrayList<UnlockUserVo> searchUnlockuser(UnlockUserVo vo)
  {
    String userCode = "";
    String userName = "";
    String query1 = "";

    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    ArrayList searchlist = new ArrayList();
    logger.info("In searchUnlockuser().....................................Dao Impl");
    ArrayList detailList = new ArrayList();
    try
    {
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      userCode = StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getUserId())).trim();
      userName = StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getUserName())).trim();

      logger.info(new StringBuilder().append("userCode.->.......Dao Impl").append(userCode).toString());
      logger.info(new StringBuilder().append("userName-------------->Dao Impl").append(userName).toString());
      bufInsSql.append("select USER_ID,USER_NAME from sec_user_m  WHERE  ACCOUNT_STATUS ='L' AND REC_STATUS='A' ");

      if ((!userCode.equalsIgnoreCase("")) && (!userName.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append("AND USER_NAME like '%").append(userName).append("%' AND USER_ID='").append(userCode).append("'").toString());
      }
      else if (!userName.equals("")) {
        bufInsSql.append(new StringBuilder().append(" AND USER_NAME LIKE '%").append(userName).append("%' ").toString());
      }
      else if (!userCode.equals("")) {
        bufInsSql.append(new StringBuilder().append(" AND USER_ID = '").append(userCode).append("' ").toString());
      }

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());

      searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("searchUnlockuser ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("searchUnlockuserliST ").append(searchlist.get(i).toString()).toString());

        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          UnlockUserVo mVo = new UnlockUserVo();

          mVo.setUserId(CommonFunction.checkNull(data.get(0)).toString());
          mVo.setUserName(CommonFunction.checkNull(data.get(1)).toString());

          detailList.add(mVo);
          mVo.setTotalRecordSize(count);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean updateUnlockuser(UnlockUserVo vo, String[] users)
  {
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    PrepStmtObject insertPrepMappObject = null;
    StringBuffer bufInsSqlMapping = null;
    ArrayList updatelist = new ArrayList();
    ArrayList deletList = new ArrayList();
    StringBuffer bufInsSql = new StringBuffer();
    boolean status = false;
    String stat = "";
    try
    {
      logger.info(new StringBuilder().append("users.length").append(users.length).toString());
      for (int i = 0; i < users.length; i++) {
        logger.info(new StringBuilder().append("users[i]").append(users[i]).toString());
        insertPrepStmtObject = null;
        bufInsSql = null;
        bufInsSql = new StringBuffer();
        insertPrepStmtObject = new PrepStmtObject();
        logger.info("In updateUnlockuser.....................................Dao Impl");
        bufInsSql.append(new StringBuilder().append("UPDATE sec_user_m SET ACCOUNT_STATUS='U' ,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?,'").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),AUTHOR_ID=?,AUTHOR_DATE=DATE_ADD(STR_TO_DATE(?,'").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) where USER_ID=?").toString());

        if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getMakerId()).trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getMakerId()).trim()));
        if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getMakerDate()).trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getMakerDate()).trim()));
        if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getMakerId()).trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getMakerId()).trim()));
        if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getMakerDate()).trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getMakerDate()).trim()));
        }

        if (CommonFunction.checkNull(users[i]).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(users[i]);
        }
      }
      insertPrepStmtObject.setSql(bufInsSql.toString());
      updatelist.add(insertPrepStmtObject);
      logger.info(insertPrepStmtObject.printQuery());
      logger.info(new StringBuilder().append("In getListOfValues").append(bufInsSql.toString()).toString());
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(updatelist);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally {
      bufInsSql = null;
      insertPrepStmtObject = null;
    }
    return status;
  }

  public ArrayList searchAgencyDataMapping(Object ob) {
    String agencyCode = "";

    ArrayList searchlist = new ArrayList();
    MasterVo masterVo = (MasterVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      agencyCode = StringEscapeUtils.escapeSql(CommonFunction.checkNull(masterVo.getAgencySearchCode())).trim();
      logger.info(new StringBuilder().append("In searchAgencyDataMapping().....................").append(agencyCode).toString());
      logger.info("In searchAgencyDataMapping()...........inside ejb server file............Dao Impl");
      bufInsSql.append(new StringBuilder().append("SELECT A.USER_NAME,B.USER_ID FROM sec_user_m A,com_agency_user_mapping B WHERE A.USER_ID=B.USER_ID AND AGENCY_CODE='").append(agencyCode).append("' ").toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("searchAgencyData ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("searchAgencyDataMappingList ").append(searchlist.get(i).toString()).toString());
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          MasterVo mVo = new MasterVo();
          mVo.setUserName(CommonFunction.checkNull(data.get(0)).toString());
          mVo.setLbxUserIds(CommonFunction.checkNull(data.get(1)).toString());
          detailList.add(mVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean updateAgencyData(Object ob, String[] userMapping)
  {
    MasterVo vo = (MasterVo)ob;
    String agencyCode = vo.getAgencyCode();
    logger.info(new StringBuilder().append("vo.getAgencyStatus():-").append(vo.getAgencyStatus()).toString());
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    PrepStmtObject insertPrepMappObject = null;
    StringBuffer bufInsSqlMapping = null;
    ArrayList updatelist = new ArrayList();
    ArrayList deletList = new ArrayList();
    String agencyType = CommonFunction.checkNull(vo.getAgencyType());
    boolean status = false;
    String stat = "";
    try
    {
      if ((vo.getAgencyStatus() != null) && (vo.getAgencyStatus().equals("on")))
        stat = "A";
      else {
        stat = "X";
      }

      StringBuffer bufInsSql = new StringBuffer();

      String delQuery = new StringBuilder().append("DELETE from com_agency_user_mapping where AGENCY_CODE='").append(vo.getAgencyCode()).append("' ").toString();
      deletList.add(delQuery);
      status = ConnectionDAOforEJB.sqlInsUpdDelete(deletList);
      logger.info("In insert agency master Mapping");
      if (agencyType.contains("EA"))
      {
        for (int i = 0; i < userMapping.length; i++) {
          bufInsSqlMapping = new StringBuffer();
          insertPrepMappObject = new PrepStmtObject();

          bufInsSqlMapping.append("Insert into com_agency_user_mapping(AGENCY_CODE,USER_ID,REC_STATUS)");
          bufInsSqlMapping.append(" values ( ");
          bufInsSqlMapping.append(" ?,");
          bufInsSqlMapping.append(" ?,");
          bufInsSqlMapping.append(" ?)");

          if (CommonFunction.checkNull(vo.getAgencyCode()).equalsIgnoreCase(""))
            insertPrepMappObject.addNull();
          else {
            insertPrepMappObject.addString(vo.getAgencyCode().toUpperCase().trim());
          }
          if (CommonFunction.checkNull(userMapping[i]).equalsIgnoreCase(""))
            insertPrepMappObject.addNull();
          else {
            insertPrepMappObject.addString(userMapping[i].toUpperCase().trim());
          }
          if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
            insertPrepMappObject.addNull();
          else {
            insertPrepMappObject.addString(stat);
          }
          insertPrepMappObject.setSql(bufInsSqlMapping.toString());
          updatelist.add(insertPrepMappObject);
        }
      }

      logger.info("In updateAgencyData...........inside ejb server file............Dao Impl");
      bufInsSql.append(new StringBuilder().append("UPDATE COM_AGENCY_M SET AGENCY_NAME=?,REC_STATUS=?,AGENCY_TYPE=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?,'").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),AUTHOR_ID=?,AUTHOR_DATE=DATE_ADD(STR_TO_DATE(?,'").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) where AGENCY_CODE=?").toString());

      if (CommonFunction.checkNull(vo.getAgencyDesc()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAgencyDesc());
      }
      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat);
      }
      if (CommonFunction.checkNull(vo.getAgencyType()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAgencyType().toUpperCase().trim());
      }

      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getMakerId()).trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getMakerId()).trim()));
      }
      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getMakerDate()).trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getMakerDate()).trim()));
      }
      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getMakerId()).trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getMakerId()).trim()));
      }
      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getMakerDate()).trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getMakerDate()).trim()));
      }

      if (CommonFunction.checkNull(vo.getAgencyCode()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAgencyCode().toUpperCase().trim());
      }
      insertPrepStmtObject.setSql(bufInsSql.toString());
      updatelist.add(insertPrepStmtObject);
      logger.info(insertPrepStmtObject.printQuery());
      logger.info(new StringBuilder().append("In getListOfValues").append(bufInsSql.toString()).toString());
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList getAgency()
  {
    ArrayList list = new ArrayList();
    try {
      logger.info("In getAgency.............inside ejb server file............Dao Impl");
      String query = "select DESCRIPTION,VALUE FROM GENERIC_MASTER WHERE GENERIC_KEY='AGENCY_TYPE' and rec_status ='A'";
      MasterVo vO = null;
      ArrayList agency = ConnectionDAOforEJB.sqlSelect(query);
      logger.info(new StringBuilder().append("getAgency ").append(agency.size()).toString());
      for (int i = 0; i < agency.size(); i++) {
        logger.info(new StringBuilder().append("getAgency ").append(CommonFunction.checkNull(agency.get(i)).toString()).toString());

        ArrayList data = (ArrayList)agency.get(i);
        for (int k = 0; k < data.size(); k++) {
          logger.info(new StringBuilder().append("getAgency ").append(CommonFunction.checkNull(data.get(k)).toString()).toString());

          vO = new MasterVo();
          vO.setAgencyDescription(data.get(0).toString());
          vO.setAgencyValue(data.get(1).toString());
        }
        list.add(vO);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public String insertBranchMaster(Object ob)
  {
    BranchMasterVo branchMastervo = (BranchMasterVo)ob;
    boolean status = false;
    logger.info("In insert branch master");
    logger.info(new StringBuilder().append("In insertBranchMaster..........").append(branchMastervo.getBranchStatus()).toString());
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String result = "";
    String query = new StringBuilder().append("SELECT BRANCH_DESC,BRANCH_ACCOUNT,BRANCH_SHORT_CODE FROM COM_BRANCH_M where  BRANCH_DESC='").append(StringEscapeUtils.escapeSql(branchMastervo.getBranchDesc().trim())).append("' OR BRANCH_SHORT_CODE='").append(StringEscapeUtils.escapeSql(branchMastervo.getBranchShortCode().trim())).append("' ").toString();

    boolean st = ConnectionDAOforEJB.checkStatus(query);
    try
    {
      if (!st) {
        if ((branchMastervo.getBranchStatus() != null) && (branchMastervo.getBranchStatus().equals("on")))
          stat = "A";
        else {
          stat = "X";
        }

        insertPrepStmtObject = new PrepStmtObject();
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("INSERT INTO COM_BRANCH_M(BRANCH_SHORT_CODE,BRANCH_DESC,BRANCH_ACCOUNT,COMPANY_ID,REGION_ID,REC_STATUS,BRANCH_DESC_L,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,COUNTRY_ID,STATE_ID,DISTRICT_ID,ZONE_ID,CLUSTER_ID,BRANCH_ADDRESS_LINE1,BRANCH_ADDRESS_LINE2,BRANCH_ADDRESS_LINE3,BRANCH_PINCODE)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) ,").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) ,").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");

        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?)");

        if (CommonFunction.checkNull(branchMastervo.getBranchShortCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getBranchShortCode().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(branchMastervo.getBranchDesc()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getBranchDesc().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(branchMastervo.getBranchAccount()).equalsIgnoreCase(""))
          insertPrepStmtObject.addInt(0L);
        else {
          insertPrepStmtObject.addString(branchMastervo.getBranchAccount().trim());
        }
        if (CommonFunction.checkNull(branchMastervo.getLbxCompanyID()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getLbxCompanyID());
        }
        if (CommonFunction.checkNull(branchMastervo.getLbxRegionID()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getLbxRegionID());
        }
        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(branchMastervo.getBranchDesc()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getBranchDesc().trim());
        }
        if (CommonFunction.checkNull(branchMastervo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getMakerId());
        }
        if (CommonFunction.checkNull(branchMastervo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getMakerDate());
        }
        if (CommonFunction.checkNull(branchMastervo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getMakerId());
        }
        if (CommonFunction.checkNull(branchMastervo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getMakerDate());
        }
        if (CommonFunction.checkNull(branchMastervo.getTxtCountryCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getTxtCountryCode());
        }
        if (CommonFunction.checkNull(branchMastervo.getTxtStateCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getTxtStateCode());
        }
        if (CommonFunction.checkNull(branchMastervo.getTxtDistCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getTxtDistCode());
        }

        if (CommonFunction.checkNull(branchMastervo.getTxtZoneCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getTxtZoneCode());
        }
        if (CommonFunction.checkNull(branchMastervo.getTxtclusterCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getTxtclusterCode());
        }
        if (CommonFunction.checkNull(branchMastervo.getBranchAddress1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(branchMastervo.getBranchAddress1());
        if (CommonFunction.checkNull(branchMastervo.getBranchAddress2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(branchMastervo.getBranchAddress2());
        if (CommonFunction.checkNull(branchMastervo.getBranchAddress3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(branchMastervo.getBranchAddress3());
        if (CommonFunction.checkNull(branchMastervo.getBranchPincode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(branchMastervo.getBranchPincode());
        insertPrepStmtObject.setSql(bufInsSql.toString());
        qryList.add(insertPrepStmtObject);

        logger.info(new StringBuilder().append("IN insertBranchMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveBranchMasterData......................").append(status).toString());
        if (status) {
          String q1 = "select max(BRANCH_ID) from com_branch_m for update";
          result = ConnectionDAOforEJB.singleReturn(q1);
        }
      } else {
        status = false;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return result;
  }

  public ArrayList searchBranchData(Object ob) {
    String branchId = "";
    String branchDesc = "";

    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    ArrayList searchlist = new ArrayList();
    BranchMasterVo branchMasterVo = (BranchMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchBranchData()............inside ejb server file............Dao Impl");
      branchId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(branchMasterVo.getBranchId())).trim();
      branchDesc = StringEscapeUtils.escapeSql(CommonFunction.checkNull(branchMasterVo.getBranchSearchDesc())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("SELECT BRANCH_ID,BRANCH_DESC,BRANCH_ACCOUNT,");
      bufInsSql.append("COMPANY_ID,(SELECT A.COMPANY_DESC FROM COM_COMPANY_M A WHERE  A.COMPANY_ID=C.COMPANY_ID ) AS COMPANY_DESC,");
      bufInsSql.append("REGION_ID,(SELECT B.REGION_DESC FROM COM_REGION_M B WHERE B.REGION_ID=C.REGION_ID ) AS REGION_DESC,");
      bufInsSql.append("if(REC_STATUS='A','Active','Inactive')as Status,BRANCH_SHORT_CODE,");
      bufInsSql.append("COUNTRY_ID,(SELECT E.COUNTRY_DESC FROM com_country_m E WHERE  E.COUNTRY_ID=C.COUNTRY_ID ) AS COUNTRY_DESC,");
      bufInsSql.append("STATE_ID,(SELECT D.STATE_DESC FROM com_state_m D WHERE  D.STATE_ID=C.STATE_ID ) AS STATE_DESC,");
      bufInsSql.append("DISTRICT_ID,(SELECT E.DISTRICT_DESC FROM com_district_m E WHERE  E.DISTRICT_ID=C.DISTRICT_ID ) AS DISTRICT_DESC,ZONE_ID,(SELECT S.ZONE_DESC FROM com_ZONE_m S WHERE  S.ZONE_ID=C.ZONE_ID ) AS ZONE_DESC,CLUSTER_ID,(SELECT T.CLUSTER_DESC FROM com_CLUSTER_m T WHERE  T.CLUSTER_ID=C.CLUSTER_ID ) AS CLUSTER_DESC,C.BRANCH_ADDRESS_LINE1 BRANCH_ADDRESS_LINE1,C.BRANCH_ADDRESS_LINE2 BRANCH_ADDRESS_LINE2,C.BRANCH_ADDRESS_LINE3 BRANCH_ADDRESS_LINE3,C.BRANCH_PINCODE BRANCH_PINCODE FROM COM_BRANCH_M C ");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM COM_BRANCH_M C ");

      if ((!branchId.equalsIgnoreCase("")) && (!branchDesc.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append("WHERE C.BRANCH_DESC like '%").append(branchDesc).append("%' AND C.BRANCH_ID='").append(branchId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE C.BRANCH_DESC like '%").append(branchDesc).append("%' AND C.BRANCH_ID='").append(branchId).append("'").toString());
      }
      else if (!branchId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE C.BRANCH_ID = '").append(branchId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE C.BRANCH_ID = '").append(branchId).append("' ").toString());
      }
      else if (!branchDesc.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE C.BRANCH_DESC LIKE '%").append(branchDesc).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE C.BRANCH_DESC LIKE '%").append(branchDesc).append("%' ").toString());
      }

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());

      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((branchId.trim() == null) && (branchDesc.trim() == null)) || ((branchId.trim().equalsIgnoreCase("")) && (branchDesc.trim().equalsIgnoreCase(""))) || (branchMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(branchMasterVo.getCurrentPageLink()).toString());
        if (branchMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (branchMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchBranchData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("searchBranchData list size-------->").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++) {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0)
        {
          BranchMasterVo branchMVo = new BranchMasterVo();
          branchMVo.setBranchIdModify(new StringBuilder().append("<a href=branchMasterSearch.do?method=openEditBranch&branchId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          branchMVo.setBranchId(CommonFunction.checkNull(data.get(0)).toString());
          branchMVo.setBranchDesc(CommonFunction.checkNull(data.get(1)).toString());
          branchMVo.setBranchAccount(CommonFunction.checkNull(data.get(2)).toString());
          branchMVo.setCompanyId(CommonFunction.checkNull(data.get(3)).toString());
          branchMVo.setLbxCompanyID(CommonFunction.checkNull(data.get(4)).toString());
          branchMVo.setRegionId(CommonFunction.checkNull(data.get(5)).toString());
          branchMVo.setLbxRegionID(CommonFunction.checkNull(data.get(6)).toString());
          branchMVo.setBranchStatus(CommonFunction.checkNull(data.get(7)).toString());
          branchMVo.setBranchShortCode(CommonFunction.checkNull(data.get(8)).toString());

          branchMVo.setTxtCountryCode(CommonFunction.checkNull(data.get(9)).toString());
          branchMVo.setCountry(CommonFunction.checkNull(data.get(10)).toString());
          branchMVo.setTxtStateCode(CommonFunction.checkNull(data.get(11)).toString());
          branchMVo.setState(CommonFunction.checkNull(data.get(12)).toString());
          branchMVo.setTxtDistCode(CommonFunction.checkNull(data.get(13)).toString());
          branchMVo.setDistrict(CommonFunction.checkNull(data.get(14)).toString());
          branchMVo.setTxtZoneCode(CommonFunction.checkNull(data.get(15)).toString());
          branchMVo.setZone(CommonFunction.checkNull(data.get(16)).toString());
          branchMVo.setTxtclusterCode(CommonFunction.checkNull(data.get(17)).toString());
          branchMVo.setCluster(CommonFunction.checkNull(data.get(18)).toString());

          branchMVo.setBranchAddress1(CommonFunction.checkNull(data.get(19)).toString());
          branchMVo.setBranchAddress2(CommonFunction.checkNull(data.get(20)).toString());
          branchMVo.setBranchAddress3(CommonFunction.checkNull(data.get(21)).toString());
          branchMVo.setBranchPincode(CommonFunction.checkNull(data.get(22)).toString());
          detailList.add(branchMVo);
          branchMVo.setTotalRecordSize(count);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean updateBranchData(Object ob) {
    BranchMasterVo branchMastervo = (BranchMasterVo)ob;
    String branchId = branchMastervo.getBranchId();
    String branchShortCode = branchMastervo.getBranchShortCode();

    logger.info(new StringBuilder().append("updateBranchData():-").append(branchMastervo.getBranchStatus()).toString());
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();
    String selquery = new StringBuilder().append("SELECT BRANCH_ID FROM COM_BRANCH_M WHERE BRANCH_ID<>'").append(branchId).append("' AND BRANCH_SHORT_CODE='").append(branchShortCode).append("'").toString();
    logger.info(new StringBuilder().append("In updateBranchMaster...........inside ejb server file.............Dao Impl").append(selquery).toString());
    boolean st = ConnectionDAOforEJB.checkStatus(selquery);
    boolean status = false;
    String stat = "";
    try {
      if (!st)
      {
        if ((branchMastervo.getBranchStatus() != null) && (branchMastervo.getBranchStatus().equals("on")))
          stat = "A";
        else {
          stat = "X";
        }

        StringBuffer bufInsSql = new StringBuffer();
        logger.info("In updateBranchData............inside ejb server file..............Dao Impl");
        bufInsSql.append("UPDATE COM_BRANCH_M SET BRANCH_SHORT_CODE=?,BRANCH_DESC=?,BRANCH_ACCOUNT=?,");
        bufInsSql.append("COMPANY_ID=?,REGION_ID=?,");
        bufInsSql.append(new StringBuilder().append("REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append("COUNTRY_ID=?,STATE_ID=?,DISTRICT_ID=?,");
        bufInsSql.append("ZONE_ID=?,CLUSTER_ID=?,BRANCH_ADDRESS_LINE1=?,BRANCH_ADDRESS_LINE2=?,BRANCH_ADDRESS_LINE3=?,BRANCH_PINCODE=? where BRANCH_ID=?");

        if (CommonFunction.checkNull(branchMastervo.getBranchShortCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addInt(0L);
        else {
          insertPrepStmtObject.addString(branchMastervo.getBranchShortCode().trim());
        }
        if (CommonFunction.checkNull(branchMastervo.getBranchDesc()).equalsIgnoreCase(""))
          insertPrepStmtObject.addInt(0L);
        else {
          insertPrepStmtObject.addString(branchMastervo.getBranchDesc().trim());
        }
        if (CommonFunction.checkNull(branchMastervo.getBranchAccount()).equalsIgnoreCase(""))
          insertPrepStmtObject.addInt(0L);
        else {
          insertPrepStmtObject.addString(branchMastervo.getBranchAccount().trim());
        }
        if (CommonFunction.checkNull(branchMastervo.getLbxCompanyID()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getLbxCompanyID());
        }
        if (CommonFunction.checkNull(branchMastervo.getLbxRegionID()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getLbxRegionID());
        }
        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(branchMastervo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(branchMastervo.getMakerId());
        if (CommonFunction.checkNull(branchMastervo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(branchMastervo.getMakerDate());

        if (CommonFunction.checkNull(branchMastervo.getTxtCountryCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addInt(0L);
        else {
          insertPrepStmtObject.addString(branchMastervo.getTxtCountryCode().trim());
        }
        if (CommonFunction.checkNull(branchMastervo.getTxtStateCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addInt(0L);
        else {
          insertPrepStmtObject.addString(branchMastervo.getTxtStateCode().trim());
        }
        if (CommonFunction.checkNull(branchMastervo.getTxtDistCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addInt(0L);
        else {
          insertPrepStmtObject.addString(branchMastervo.getTxtDistCode().trim());
        }
        if (CommonFunction.checkNull(branchMastervo.getTxtZoneCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getTxtZoneCode());
        }
        if (CommonFunction.checkNull(branchMastervo.getTxtclusterCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getTxtclusterCode());
        }

        if (CommonFunction.checkNull(branchMastervo.getBranchAddress1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getBranchAddress1());
        }
        if (CommonFunction.checkNull(branchMastervo.getBranchAddress2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getBranchAddress2());
        }
        if (CommonFunction.checkNull(branchMastervo.getBranchAddress3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getBranchAddress3());
        }
        if (CommonFunction.checkNull(branchMastervo.getBranchPincode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchMastervo.getBranchPincode());
        }

        if (CommonFunction.checkNull(branchId).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branchId);
        }
        insertPrepStmtObject.setSql(bufInsSql.toString());

        updatelist.add(insertPrepStmtObject);
        logger.info(new StringBuilder().append("In updateBranchData update Query:").append(bufInsSql.toString()).toString());
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList defaultCountry()
  {
    ArrayList list = new ArrayList();
    try {
      logger.info("In defaultCountry()...........inside ejb server file..........DAOImpl");
      StringBuilder query = new StringBuilder();

      query.append("SELECT PARAMETER_VALUE,PARAMETER_DESC FROM parameter_mst WHERE PARAMETER_KEY='DEFAULT_COUNTRY'");
      logger.info(new StringBuilder().append("In defaultCountry...............query...........DAOImpl").append(query).toString());
      BranchMasterVo vo = null;
      ArrayList country = ConnectionDAOforEJB.sqlSelect(query.toString());

      query = null;

      logger.info(new StringBuilder().append("defaultCountry() ").append(country.size()).toString());
      for (int i = 0; i < country.size(); i++) {
        logger.info(new StringBuilder().append("defaultCountry()...Outer FOR loop ").append(CommonFunction.checkNull(country.get(i)).toString()).toString());
        ArrayList data = (ArrayList)country.get(i);
        if (data.size() > 0) {
          vo = new BranchMasterVo();
          vo.setDefaultcountryid(CommonFunction.checkNull(data.get(0)).trim());
          vo.setDefaultcountryname(CommonFunction.checkNull(data.get(1)).trim());
          list.add(vo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public String insertIndustryMaster(Object ob)
  {
    IndustryMasterVo industryMasterVo = (IndustryMasterVo)ob;
    boolean status = false;
    String result = "";
    logger.info(new StringBuilder().append("In insertIndustryMaster.........inside ejb server file...........Dao Impl").append(industryMasterVo.getIndustryStatus()).toString());
    ArrayList qryList = new ArrayList();
    StringBuffer query = new StringBuffer();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    try {
      query.append(new StringBuilder().append("SELECT INDUSTRY_DESC FROM COM_INDUSTRY_M where  INDUSTRY_DESC='").append(StringEscapeUtils.escapeSql(industryMasterVo.getIndustryDesc().trim())).append("'").toString());
      logger.info(new StringBuilder().append("In insertIndustryMaster............inside ejb server file...........Dao Impl").append(query).toString());
      boolean st = ConnectionDAOforEJB.checkStatus(query.toString());
      logger.info(new StringBuilder().append("st -----").append(st).toString());
      if (st) {
        result = "EX";
      }

      if (!st) {
        if ((industryMasterVo.getIndustryStatus() != null) && (industryMasterVo.getIndustryStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info("In insert Industry master");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("INSERT INTO COM_INDUSTRY_M(INDUSTRY_DESC,REC_STATUS,MANUFACTURER,TRADER,SERVICE,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());
        if (CommonFunction.checkNull(industryMasterVo.getIndustryDesc()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(industryMasterVo.getIndustryDesc().toUpperCase().trim());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }

        if (CommonFunction.checkNull(industryMasterVo.getManufacturer()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(industryMasterVo.getManufacturer());

        if (CommonFunction.checkNull(industryMasterVo.getTrader()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(industryMasterVo.getTrader());

        if (CommonFunction.checkNull(industryMasterVo.getService()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(industryMasterVo.getService());

        if (CommonFunction.checkNull(industryMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(industryMasterVo.getMakerId());

        if (CommonFunction.checkNull(industryMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(industryMasterVo.getMakerDate());

        if (CommonFunction.checkNull(industryMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(industryMasterVo.getMakerId());

        if (CommonFunction.checkNull(industryMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(industryMasterVo.getMakerDate());

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN insertIndustryMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveIndustryMasterData..........inside ejb server file...........Dao Impl").append(status).toString());
        if (status) {
          result = "S";
        }
        else
          result = "E";
      }
    }
    catch (Exception e) {
      result = "E";
      e.printStackTrace();
    }

    return result;
  }

  public ArrayList searchIndustryData(Object ob) {
    String industryDesc = "";
    String industryId = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    ArrayList searchlist = new ArrayList();
    IndustryMasterVo industryMasterVo = (IndustryMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      industryId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(industryMasterVo.getIndustryId())).trim();
      industryDesc = StringEscapeUtils.escapeSql(CommonFunction.checkNull(industryMasterVo.getIndustrySearchDesc())).trim();

      logger.info("In searchIndustryData()..........inside ejb server file...........Dao Impl");

      bufInsSql.append("SELECT INDUSTRY_ID,INDUSTRY_DESC,if(REC_STATUS='A','Active','Inactive')as Status,MANUFACTURER,TRADER,SERVICE FROM COM_INDUSTRY_M ");
      bufInsSqlTempCount.append("SELECT COUNT(1) FROM COM_INDUSTRY_M ");

      if ((!industryId.equalsIgnoreCase("")) && (!industryDesc.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append("WHERE INDUSTRY_DESC like '%").append(industryDesc).append("%' AND INDUSTRY_ID='").append(industryId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE INDUSTRY_DESC like '%").append(industryDesc).append("%' AND INDUSTRY_ID='").append(industryId).append("'").toString());
      }
      else if (!industryDesc.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE INDUSTRY_DESC LIKE '%").append(industryDesc).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE INDUSTRY_DESC LIKE '%").append(industryDesc).append("%' ").toString());
      }
      else if (!industryId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE INDUSTRY_ID = '").append(industryId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE INDUSTRY_ID = '").append(industryId).append("' ").toString());
      }
      bufInsSql.append(" ORDER BY INDUSTRY_ID");

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((industryId.trim() == null) && (industryDesc.trim() == null)) || ((industryId.trim().equalsIgnoreCase("")) && (industryDesc.trim().equalsIgnoreCase(""))) || (industryMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(industryMasterVo.getCurrentPageLink()).toString());
        if (industryMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (industryMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("searchIndustryData ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++) {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0)
        {
          IndustryMasterVo industryMVo = new IndustryMasterVo();

          industryMVo.setIndustryIdModify(new StringBuilder().append("<a href=industryMasterSearch.do?method=openEditIndustry&industryId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          industryMVo.setIndustryId(CommonFunction.checkNull(data.get(0)).toString());
          industryMVo.setIndustryDesc(CommonFunction.checkNull(data.get(1)).toString());
          industryMVo.setIndustryStatus(CommonFunction.checkNull(data.get(2)).toString());
          industryMVo.setManufacturer(CommonFunction.checkNull(data.get(3)).toString());
          industryMVo.setTrader(CommonFunction.checkNull(data.get(4)).toString());
          industryMVo.setService(CommonFunction.checkNull(data.get(5)).toString());
          industryMVo.setTotalRecordSize(count);
          detailList.add(industryMVo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean updateIndustryData(Object ob) {
    IndustryMasterVo industryMasterVo = (IndustryMasterVo)ob;
    String industryDesc = industryMasterVo.getIndustryDesc();
    logger.info(new StringBuilder().append("vo.getIndustryStatus():-").append(industryMasterVo.getIndustryStatus()).toString());

    ArrayList updatelist = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

    boolean status = false;
    String stat = "";
    try
    {
      if ((industryMasterVo.getIndustryStatus() != null) && (industryMasterVo.getIndustryStatus().equals("on")))
      {
        stat = "A";
      }
      else stat = "X";

      StringBuffer bufInsSql = new StringBuffer();
      logger.info("In updateIndustryData.............inside ejb server file...........Dao Impl");
      bufInsSql.append(new StringBuilder().append("UPDATE COM_INDUSTRY_M SET INDUSTRY_DESC=?,REC_STATUS=?,MANUFACTURER=?,TRADER=?,SERVICE=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) where INDUSTRY_ID=?").toString());

      if (CommonFunction.checkNull(industryMasterVo.getIndustryDesc()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(industryMasterVo.getIndustryDesc().toUpperCase().trim());

      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat);
      }
      if (CommonFunction.checkNull(industryMasterVo.getManufacturer()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(industryMasterVo.getManufacturer());
      }
      if (CommonFunction.checkNull(industryMasterVo.getTrader()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(industryMasterVo.getTrader());
      }
      if (CommonFunction.checkNull(industryMasterVo.getService()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(industryMasterVo.getService());
      }

      if (CommonFunction.checkNull(industryMasterVo.getMakerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(industryMasterVo.getMakerId());
      if (CommonFunction.checkNull(industryMasterVo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(industryMasterVo.getMakerDate());

      if (CommonFunction.checkNull(industryMasterVo.getIndustryId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(industryMasterVo.getIndustryId().toUpperCase().trim());

      insertPrepStmtObject.setSql(bufInsSql.toString());
      updatelist.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("In getListOfValues").append(bufInsSql).toString());
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public String insertSubIndustryMaster(Object ob)
  {
    SubIndustryMasterVo subIndustryMasterVo = (SubIndustryMasterVo)ob;
    boolean status = false;
    StringBuffer query = new StringBuffer();
    String result = "";
    logger.info(new StringBuilder().append("In insertSubIndustryMaster.........inside ejb server file...........Dao Impl").append(subIndustryMasterVo.getSubIndustryStatus()).toString());

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    try {
      query.append(new StringBuilder().append("SELECT SUB_INDUSTRY_DESC FROM COM_SUB_INDUSTRY_M where  SUB_INDUSTRY_DESC='").append(StringEscapeUtils.escapeSql(subIndustryMasterVo.getSubIndustryDesc().trim())).append("'").toString());
      logger.info(new StringBuilder().append("In insertSubIndustryMaster..........inside ejb server file...........Dao Impl").append(query).toString());

      boolean st = ConnectionDAOforEJB.checkStatus(query.toString());
      logger.info(new StringBuilder().append("st -----").append(st).toString());

      if (st) {
        result = "EX";
      }
      if (!st) {
        if ((subIndustryMasterVo.getSubIndustryStatus() != null) && (subIndustryMasterVo.getSubIndustryStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info("In insert Sub Industry master");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("INSERT INTO COM_SUB_INDUSTRY_M(SUB_INDUSTRY_DESC,INDUSTRY_ID,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");

        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());
        if (CommonFunction.checkNull(subIndustryMasterVo.getSubIndustryDesc()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(subIndustryMasterVo.getSubIndustryDesc().toUpperCase().trim());

        if (CommonFunction.checkNull(subIndustryMasterVo.getLbxIndustry()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(subIndustryMasterVo.getLbxIndustry());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(subIndustryMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(subIndustryMasterVo.getMakerId());

        if (CommonFunction.checkNull(subIndustryMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(subIndustryMasterVo.getMakerDate());

        if (CommonFunction.checkNull(subIndustryMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(subIndustryMasterVo.getMakerId());

        if (CommonFunction.checkNull(subIndustryMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(subIndustryMasterVo.getMakerDate());

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN insertSubIndustryMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveSubIndustryMasterData............inside ejb server file...........Dao Impl").append(status).toString());

        if (status) {
          result = "S";
        }
        else
          result = "E";
      }
    }
    catch (Exception e) {
      result = "E";
      e.printStackTrace();
    }

    return result;
  }

  public ArrayList searchSubIndustryData(Object ob) {
    String subIndustryDesc = "";
    String subIndustryId = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    ArrayList searchlist = new ArrayList();
    SubIndustryMasterVo subIndustryMasterVo = (SubIndustryMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      subIndustryId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(subIndustryMasterVo.getSubIndustryId())).trim();
      subIndustryDesc = StringEscapeUtils.escapeSql(CommonFunction.checkNull(subIndustryMasterVo.getSubIndustrySearchDesc())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      logger.info("In searchSubIndustryData().............inside ejb server file...........Dao Impl");
      bufInsSql.append("SELECT SUB_INDUSTRY_ID,SUB_INDUSTRY_DESC,");
      bufInsSql.append(" INDUSTRY_ID,(SELECT B.INDUSTRY_DESC FROM COM_INDUSTRY_M B WHERE B.INDUSTRY_ID=A.INDUSTRY_ID ) AS INDUSTRY_DESC,");
      bufInsSql.append(" if(REC_STATUS='A','Active','Inactive')as Status FROM COM_SUB_INDUSTRY_M A ");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM COM_SUB_INDUSTRY_M A ");

      if ((!subIndustryId.equalsIgnoreCase("")) && (!subIndustryDesc.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append("WHERE SUB_INDUSTRY_DESC like '%").append(subIndustryDesc).append("%' AND SUB_INDUSTRY_ID='").append(subIndustryId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE SUB_INDUSTRY_DESC like '%").append(subIndustryDesc).append("%' AND SUB_INDUSTRY_ID='").append(subIndustryId).append("'").toString());
      }
      else if (!subIndustryDesc.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE A.SUB_INDUSTRY_DESC LIKE '%").append(subIndustryDesc).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE A.SUB_INDUSTRY_DESC LIKE '%").append(subIndustryDesc).append("%' ").toString());
      }
      else if (!subIndustryId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE A.SUB_INDUSTRY_ID = '").append(subIndustryId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE A.SUB_INDUSTRY_ID = '").append(subIndustryId).append("' ").toString());
      }
      bufInsSql.append(" ORDER BY SUB_INDUSTRY_ID");
      logger.info(new StringBuilder().append("search query........").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((subIndustryDesc.trim() == null) && (subIndustryId.trim() == null)) || ((subIndustryDesc.trim().equalsIgnoreCase("")) && (subIndustryId.trim().equalsIgnoreCase(""))) || (subIndustryMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(subIndustryMasterVo.getCurrentPageLink()).toString());
        if (subIndustryMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (subIndustryMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("searchSubIndustryData ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++) {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          SubIndustryMasterVo subIndustryMVo = new SubIndustryMasterVo();

          subIndustryMVo.setSubIndustryIdModify(new StringBuilder().append("<a href=subIndustryMasterSearch.do?method=openEditSubIndustry&subIndustryId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          subIndustryMVo.setSubIndustryId(CommonFunction.checkNull(data.get(0)).toString());
          subIndustryMVo.setSubIndustryDesc(CommonFunction.checkNull(data.get(1)).toString());
          subIndustryMVo.setIndustryId(CommonFunction.checkNull(data.get(2)).toString());
          subIndustryMVo.setLbxIndustry(CommonFunction.checkNull(data.get(3)).toString());
          subIndustryMVo.setSubIndustryStatus(CommonFunction.checkNull(data.get(4)).toString());
          subIndustryMVo.setTotalRecordSize(count);
          detailList.add(subIndustryMVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean updateSubIndustryData(Object ob) {
    SubIndustryMasterVo subIndustryMasterVo = (SubIndustryMasterVo)ob;
    String subIndustryId = subIndustryMasterVo.getSubIndustryId();
    logger.info(new StringBuilder().append("vo.getSubIndustryId..:-").append(subIndustryId).toString());
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();

    boolean status = false;
    String stat = "";
    try
    {
      if ((subIndustryMasterVo.getSubIndustryStatus() != null) && (subIndustryMasterVo.getSubIndustryStatus().equals("on")))
      {
        stat = "A";
      }
      else stat = "X";

      StringBuffer bufInsSql = new StringBuffer();
      logger.info("In updateSubIndustryData............inside ejb server file...........Dao Impl");

      bufInsSql.append(new StringBuilder().append("UPDATE COM_SUB_INDUSTRY_M SET SUB_INDUSTRY_DESC=?,INDUSTRY_ID=?,REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) where sub_industry_id=?").toString());

      logger.info(new StringBuilder().append("In getListOfValues.........").append(bufInsSql).toString());

      if (CommonFunction.checkNull(subIndustryMasterVo.getSubIndustryDesc()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(subIndustryMasterVo.getSubIndustryDesc().toUpperCase().trim());

      if (CommonFunction.checkNull(subIndustryMasterVo.getLbxIndustry()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(subIndustryMasterVo.getLbxIndustry());

      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat);
      }
      if (CommonFunction.checkNull(subIndustryMasterVo.getMakerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(subIndustryMasterVo.getMakerId());
      if (CommonFunction.checkNull(subIndustryMasterVo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(subIndustryMasterVo.getMakerDate());

      if (CommonFunction.checkNull(subIndustryMasterVo.getSubIndustryId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(subIndustryMasterVo.getSubIndustryId());

      insertPrepStmtObject.setSql(bufInsSql.toString());

      updatelist.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("In getListOfValues.........").append(bufInsSql).toString());
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public boolean insertDocumentMaster(Object ob)
  {
    DocumentMasterVo documentMastervo = (DocumentMasterVo)ob;
    boolean status = false;
    logger.info(new StringBuilder().append("In insertDocumentMaster..........").append(documentMastervo.getDocumentStatus()).toString());

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String query = new StringBuilder().append("SELECT DOC_DESC FROM CR_DOCUMENT_M where  DOC_DESC='").append(StringEscapeUtils.escapeSql(documentMastervo.getDocumentDesc().trim())).append("'").toString();

    logger.info(new StringBuilder().append("In insertDocumentMaster.....................................Dao Impl").append(query).toString());

    boolean st = ConnectionDAOforEJB.checkStatus(query);
    try
    {
      if (!st) {
        if ((documentMastervo.getDocumentStatus() != null) && (documentMastervo.getDocumentStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info("In insert document master");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("INSERT INTO CR_DOCUMENT_M(DOC_DESC,REC_STATUS,DOC_DESC_L,DOCUMENT_CATEGORY,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");

        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());

        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

        if (CommonFunction.checkNull(documentMastervo.getDocumentDesc()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(documentMastervo.getDocumentDesc().toUpperCase().trim());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(documentMastervo.getDocumentDesc()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(documentMastervo.getDocumentDesc().toUpperCase().trim());

        if (CommonFunction.checkNull(documentMastervo.getDocumentCategory()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(documentMastervo.getDocumentCategory().toUpperCase().trim());
        }

        if (CommonFunction.checkNull(documentMastervo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(documentMastervo.getMakerId());

        if (CommonFunction.checkNull(documentMastervo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(documentMastervo.getMakerDate());

        if (CommonFunction.checkNull(documentMastervo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(documentMastervo.getMakerId());

        if (CommonFunction.checkNull(documentMastervo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(documentMastervo.getMakerDate());

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN insertDocumentMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In insertDocumentMaster......................").append(status).toString());
      }
      else
      {
        status = false;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList<DocumentMasterVo> getDocumentData() {
    ArrayList list = new ArrayList();
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In getDocumentData()..............Dao Impl");
      String query = "SELECT DOC_ID,DOC_DESC, if(REC_STATUS='A','Active','Inactive')as Status FROM CR_DOCUMENT_M ORDER BY DOC_ID";

      list = ConnectionDAOforEJB.sqlSelect(query);
      logger.info(new StringBuilder().append("getDocumentData ").append(list.size()).toString());

      for (int i = 0; i < list.size(); i++) {
        logger.info(new StringBuilder().append("getDocumentDataList ").append(list.get(i).toString()).toString());

        ArrayList data = (ArrayList)list.get(i);

        if (data.size() > 0) {
          DocumentMasterVo documentMasterVo = new DocumentMasterVo();

          documentMasterVo.setDocumentIdModify(new StringBuilder().append("<a href=documentMasterSearch.do?method=openEditDocument&documentId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          documentMasterVo.setDocumentId(CommonFunction.checkNull(data.get(0)).toString());

          documentMasterVo.setDocumentDesc(CommonFunction.checkNull(data.get(1)).toString());

          documentMasterVo.setDocumentStatus(CommonFunction.checkNull(data.get(2)).toString());

          detailList.add(documentMasterVo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return detailList;
  }

  public ArrayList<DocumentMasterVo> searchDocumentData(Object ob) {
    String documentId = "";
    String documentDesc = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    ArrayList searchlist = new ArrayList();
    DocumentMasterVo documentMasterVo = (DocumentMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchDocumentData().....................................Dao Impl");
      documentId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(documentMasterVo.getDocumentId())).trim();
      documentDesc = StringEscapeUtils.escapeSql(CommonFunction.checkNull(documentMasterVo.getDocumentSearchDesc())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();
      bufInsSql.append("SELECT DOC_ID,DOC_DESC,if(REC_STATUS='A','Active','Inactive')as Status,Document_category FROM CR_DOCUMENT_M ");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM CR_DOCUMENT_M ");

      if ((!documentId.equalsIgnoreCase("")) && (!documentDesc.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append("WHERE DOC_DESC like '%").append(documentDesc).append("%' AND DOC_ID='").append(documentId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE DOC_DESC like '%").append(documentDesc).append("%' AND DOC_ID='").append(documentId).append("'").toString());
      }
      else if (!documentDesc.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE DOC_DESC LIKE '%").append(documentDesc).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE DOC_DESC LIKE '%").append(documentDesc).append("%' ").toString());
      }
      else if (!documentId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE DOC_ID = '").append(documentId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE DOC_ID = '").append(documentId).append("' ").toString());
      }
      bufInsSql.append(" ORDER BY DOC_ID");
      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((documentId.trim() == null) && (documentDesc.trim() == null)) || ((documentId.trim().equalsIgnoreCase("")) && (documentDesc.trim().equalsIgnoreCase(""))) || (documentMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(documentMasterVo.getCurrentPageLink()).toString());
        if (documentMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (documentMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchDocumentData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("searchDocumentData ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          DocumentMasterVo documentMVo = new DocumentMasterVo();

          documentMVo.setDocumentIdModify(new StringBuilder().append("<a href=documentMasterSearch.do?method=openEditDocument&documentId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          documentMVo.setDocumentId(CommonFunction.checkNull(data.get(0)).toString());
          documentMVo.setDocumentDesc(CommonFunction.checkNull(data.get(1)).toString());
          documentMVo.setDocumentStatus(CommonFunction.checkNull(data.get(2)).toString());
          documentMVo.setDocumentCategory(CommonFunction.checkNull(data.get(3)).toString());
          documentMVo.setTotalRecordSize(count);
          detailList.add(documentMVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean updateDocumentData(Object ob) {
    DocumentMasterVo documentMasterVo = (DocumentMasterVo)ob;
    String documentDesc = documentMasterVo.getDocumentDesc();
    logger.info(new StringBuilder().append("vo.getDocumentStatus():-").append(documentMasterVo.getDocumentStatus()).toString());

    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();

    boolean status = false;
    String stat = "";
    try
    {
      if ((documentMasterVo.getDocumentStatus() != null) && (documentMasterVo.getDocumentStatus().equals("on")))
      {
        stat = "A";
      }
      else stat = "X";

      StringBuffer bufInsSql = new StringBuffer();
      logger.info("In updateDocumentData.....................................Dao Impl");

      bufInsSql.append(new StringBuilder().append("UPDATE CR_DOCUMENT_M SET DOC_DESC_L=?,REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),DOCUMENT_CATEGORY=? where DOC_ID=?").toString());

      logger.info("In updateDocumentData.....................................Dao Impl");

      if (CommonFunction.checkNull(documentMasterVo.getDocumentDesc()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(documentMasterVo.getDocumentDesc().toUpperCase().trim());

      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat);
      }
      if (CommonFunction.checkNull(documentMasterVo.getMakerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(documentMasterVo.getMakerId());
      if (CommonFunction.checkNull(documentMasterVo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(documentMasterVo.getMakerDate());

      if (CommonFunction.checkNull(documentMasterVo.getDocumentCategory()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(documentMasterVo.getDocumentCategory().toUpperCase().trim());
      }

      if (CommonFunction.checkNull(documentMasterVo.getDocumentId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(documentMasterVo.getDocumentId().toUpperCase().trim());

      insertPrepStmtObject.setSql(bufInsSql.toString());
      updatelist.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("In getListOfValues").append(bufInsSql.toString()).toString());
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public boolean insertBaseRateMaster(Object ob)
  {
    BaseRateMasterVo baseRateMastervo = (BaseRateMasterVo)ob;
    boolean status = false;
    logger.info(new StringBuilder().append("In insertBaseRateMaster..........").append(baseRateMastervo.getBaseRateStatus()).toString());

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";

    String query1 = new StringBuilder().append("SELECT BASE_RATE_TYPE FROM CR_BASE_RATE_M WHERE BASE_RATE_TYPE='").append(StringEscapeUtils.escapeSql(baseRateMastervo.getBaseRateType().trim())).append("' AND EFFECTIVE_FROM = STR_TO_DATE('").append(baseRateMastervo.getEffectiveFromDate().trim()).append("','").append(this.dateFormat).append("') ").toString();

    logger.info(new StringBuilder().append("In insertBaseRateMaster.....................................Dao Impl").append(query1).toString());

    boolean st1 = ConnectionDAOforEJB.checkStatus(query1);
    try
    {
      if (!st1) {
        if ((baseRateMastervo.getBaseRateStatus() != null) && (baseRateMastervo.getBaseRateStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info("In insert Base Rate master");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("INSERT INTO CR_BASE_RATE_M(BASE_RATE_TYPE,EFFECTIVE_FROM,BASE_RATE,BASE_RATE_DESC,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

        if (CommonFunction.checkNull(baseRateMastervo.getBaseRateType()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(baseRateMastervo.getBaseRateType().toUpperCase().trim());
        }

        if (CommonFunction.checkNull(baseRateMastervo.getEffectiveFromDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(baseRateMastervo.getEffectiveFromDate().trim());
        }

        if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(baseRateMastervo.getBaseRate()).trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(baseRateMastervo.getBaseRate()).trim()).toString());
        }

        if (CommonFunction.checkNull(baseRateMastervo.getBaseRateDesc()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(baseRateMastervo.getBaseRateDesc().toUpperCase().trim());
        }

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(baseRateMastervo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(baseRateMastervo.getMakerId());
        }

        if (CommonFunction.checkNull(baseRateMastervo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(baseRateMastervo.getMakerDate());
        }

        if (CommonFunction.checkNull(baseRateMastervo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(baseRateMastervo.getMakerId());
        }

        if (CommonFunction.checkNull(baseRateMastervo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(baseRateMastervo.getMakerDate());
        }

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN insertBaseRateMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In insertBaseRateMaster......................").append(status).toString());
      } else {
        status = false;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList<BaseRateMasterVo> getBaseRateData() {
    ArrayList list = new ArrayList();
    ArrayList detailList = new ArrayList();
    try
    {
      StringBuffer bufInsSql = new StringBuffer();
      logger.info("In getBaseRateData()..............Dao Impl");
      bufInsSql.append(new StringBuilder().append("SELECT BASE_RATE_TYPE,DATE_FORMAT(EFFECTIVE_FROM,'").append(this.dateFormat).append("'),BASE_RATE,BASE_RATE_DESC,").toString());

      bufInsSql.append(" if(REC_STATUS='A','Active','Inactive')as Status FROM CR_BASE_RATE_M ORDER BY BASE_RATE_TYPE");

      list = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("getBaseRateData ").append(list.size()).toString());

      for (int i = 0; i < list.size(); i++) {
        logger.info(new StringBuilder().append("getBaseRateDataList ").append(list.get(i).toString()).toString());

        ArrayList data = (ArrayList)list.get(i);

        if (data.size() > 0) {
          BaseRateMasterVo baseRateMasterVo = new BaseRateMasterVo();

          baseRateMasterVo.setBaseRateTypeModify(new StringBuilder().append("<a href=baseRateMasterSearch.do?method=openEditBaseRate&baseRateTypeSearch=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          baseRateMasterVo.setBaseRateType(CommonFunction.checkNull(data.get(0)).toString());

          baseRateMasterVo.setEffectiveFromDate(CommonFunction.checkNull(data.get(1)).toString());

          baseRateMasterVo.setBaseRate(CommonFunction.checkNull(data.get(2)).toString());

          baseRateMasterVo.setBaseRateDesc(CommonFunction.checkNull(data.get(3)).toString());

          baseRateMasterVo.setBaseRateStatus(CommonFunction.checkNull(data.get(4)).toString());

          detailList.add(baseRateMasterVo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return detailList;
  }

  public ArrayList<BaseRateMasterVo> searchBaseRateData(Object ob)
  {
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    String baseRateType = "";
    String effectiveFrom = "";
    String baseRateDesc = "";
    ArrayList searchlist = new ArrayList();
    BaseRateMasterVo baseRateMasterVo = (BaseRateMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchBaseRateData().....................................Dao Impl");
      logger.info(new StringBuilder().append("Value: ").append(baseRateMasterVo.getBaseRateTypeSearch()).toString());

      baseRateType = CommonFunction.checkNull(baseRateMasterVo.getBaseRateTypeSearch()).trim();
      effectiveFrom = CommonFunction.checkNull(baseRateMasterVo.getEffectiveFromDateSearch()).trim();
      baseRateDesc = CommonFunction.checkNull(baseRateMasterVo.getBaseRateDescSearch()).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("SELECT brm.BASE_RATE_TYPE,");
      bufInsSql.append(new StringBuilder().append("DATE_FORMAT(brm.EFFECTIVE_FROM,'").append(this.dateFormat).append("') as EFFECTIVE_FROM,brm.BASE_RATE,brm.BASE_RATE_DESC,").toString());
      bufInsSql.append("case when brm.REC_STATUS='A' then 'Active' else 'Inactive' end as Status,gm.DESCRIPTION ");
      bufInsSql.append(" FROM CR_BASE_RATE_M brm ");
      bufInsSql.append("left outer join generic_master gm on gm.VALUE = brm.BASE_RATE_TYPE and  GENERIC_KEY='BASE_RATE_TYPE' and gm.REC_STATUS='A' ");
      bufInsSqlTempCount.append("SELECT COUNT(1) FROM CR_BASE_RATE_M ");

      if ((!baseRateType.equalsIgnoreCase("")) && (!effectiveFrom.equalsIgnoreCase("")) && (!baseRateDesc.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append("WHERE BASE_RATE_TYPE='").append(baseRateType).append("' AND EFFECTIVE_FROM=STR_TO_DATE('").append(effectiveFrom).append("','").append(this.dateFormat).append("') AND BASE_RATE_DESC like '%").append(baseRateDesc).append("%'").toString());

        bufInsSqlTempCount.append(new StringBuilder().append("WHERE BASE_RATE_TYPE='").append(baseRateType).append("' AND EFFECTIVE_FROM=STR_TO_DATE('").append(effectiveFrom).append("','").append(this.dateFormat).append("') AND BASE_RATE_DESC like '%").append(baseRateDesc).append("%'").toString());
      }
      else if ((!effectiveFrom.equalsIgnoreCase("")) && (!baseRateDesc.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append("WHERE EFFECTIVE_FROM=STR_TO_DATE('").append(effectiveFrom).append("','").append(this.dateFormat).append("')  AND BASE_RATE_DESC like '%").append(baseRateDesc).append("%'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE EFFECTIVE_FROM=STR_TO_DATE('").append(effectiveFrom).append("','").append(this.dateFormat).append("')  AND BASE_RATE_DESC like '%").append(baseRateDesc).append("%'").toString());
      }
      else if ((!baseRateType.equalsIgnoreCase("")) && (!effectiveFrom.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append("WHERE BASE_RATE_TYPE='").append(baseRateType).append("' AND EFFECTIVE_FROM=STR_TO_DATE('").append(effectiveFrom).append("','").append(this.dateFormat).append("') ").toString());

        bufInsSqlTempCount.append(new StringBuilder().append("WHERE BASE_RATE_TYPE='").append(baseRateType).append("' AND EFFECTIVE_FROM=STR_TO_DATE('").append(effectiveFrom).append("','").append(this.dateFormat).append("') ").toString());
      }
      else if ((!baseRateType.equalsIgnoreCase("")) && (!baseRateDesc.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append("WHERE BASE_RATE_TYPE='").append(baseRateType).append("' AND BASE_RATE_DESC like '%").append(baseRateDesc).append("%'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE BASE_RATE_TYPE='").append(baseRateType).append("' AND BASE_RATE_DESC like '%").append(baseRateDesc).append("%'").toString());
      }
      else if (!baseRateType.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE BASE_RATE_TYPE='").append(baseRateType).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE BASE_RATE_TYPE='").append(baseRateType).append("' ").toString());
      }
      else if (!effectiveFrom.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE EFFECTIVE_FROM=STR_TO_DATE('").append(effectiveFrom).append("','").append(this.dateFormat).append("')  ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE EFFECTIVE_FROM=STR_TO_DATE('").append(effectiveFrom).append("','").append(this.dateFormat).append("')  ").toString());
      }
      else if (!baseRateDesc.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE BASE_RATE_DESC like '%").append(baseRateDesc).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE BASE_RATE_DESC like '%").append(baseRateDesc).append("%' ").toString());
      }
      bufInsSql.append(" ORDER BY BASE_RATE_TYPE");
      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((baseRateType.trim() == null) && (effectiveFrom.trim() == null) && (baseRateDesc.trim() == null)) || ((baseRateType.trim().equalsIgnoreCase("")) && (effectiveFrom.trim().equalsIgnoreCase("")) && (baseRateDesc.trim().equalsIgnoreCase(""))) || (baseRateMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(baseRateMasterVo.getCurrentPageLink()).toString());
        if (baseRateMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (baseRateMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }
        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchBaseRateData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("searchBaseRateData ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          BaseRateMasterVo baseRateMVo = new BaseRateMasterVo();

          baseRateMVo.setBaseRateTypeModify(new StringBuilder().append("<a href=baseRateMasterSearch.do?method=openEditBaseRate&baseRateTypeSearch=").append(CommonFunction.checkNull(data.get(0)).toString()).append("&effectiveFromDateSearch=").append(CommonFunction.checkNull(data.get(1)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          baseRateMVo.setBaseRateType(CommonFunction.checkNull(data.get(0)).toString());
          baseRateMVo.setEffectiveFromDate(CommonFunction.checkNull(data.get(1)).toString());

          if (!CommonFunction.checkNull(data.get(2)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(data.get(2)).trim());
            baseRateMVo.setBaseRate(this.myFormatter.format(reconNum));
          }
          baseRateMVo.setBaseRateDesc(CommonFunction.checkNull(data.get(3)).toString());
          baseRateMVo.setBaseRateStatus(CommonFunction.checkNull(data.get(4)).toString());
          baseRateMVo.setBaseRateTypeSearch(CommonFunction.checkNull(data.get(5)).toString());
          detailList.add(baseRateMVo);
          baseRateMVo.setTotalRecordSize(count);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean updateBaseRateData(Object ob) {
    BaseRateMasterVo baseRateMasterVo = (BaseRateMasterVo)ob;
    String baseRateType = baseRateMasterVo.getBaseRateType();
    logger.info(new StringBuilder().append("vo.getBaseRateStatus():-").append(baseRateMasterVo.getBaseRateStatus()).toString());

    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();

    boolean status = false;
    String stat = "";
    try
    {
      if ((baseRateMasterVo.getBaseRateStatus() != null) && (baseRateMasterVo.getBaseRateStatus().equals("on")))
      {
        stat = "A";
      }
      else stat = "X";

      StringBuffer bufInsSql = new StringBuffer();

      logger.info("In updateBaseRateData.....................................Dao Impl");
      bufInsSql.append(new StringBuilder().append("UPDATE CR_BASE_RATE_M SET BASE_RATE_DESC=?,REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) WHERE BASE_RATE_TYPE=? and EFFECTIVE_FROM = STR_TO_DATE(?,'").append(this.dateFormat).append("')").toString());

      if (CommonFunction.checkNull(baseRateMasterVo.getBaseRateDesc()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(baseRateMasterVo.getBaseRateDesc().toUpperCase().trim());

      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat);
      }
      if (CommonFunction.checkNull(baseRateMasterVo.getMakerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(baseRateMasterVo.getMakerId());
      if (CommonFunction.checkNull(baseRateMasterVo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(baseRateMasterVo.getMakerDate());

      if (CommonFunction.checkNull(baseRateMasterVo.getBaseRateType()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(baseRateMasterVo.getBaseRateType().toUpperCase().trim());

      if (CommonFunction.checkNull(baseRateMasterVo.getEffectiveFromDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(baseRateMasterVo.getEffectiveFromDate().trim());

      insertPrepStmtObject.setSql(bufInsSql.toString());

      logger.info(new StringBuilder().append("In getListOfValues").append(insertPrepStmtObject.printQuery()).toString());

      updatelist.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("In getListOfValues").append(updatelist.toString()).toString());
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public boolean insertChargeMaster(Object ob)
  {
    ChargeMasterVo chargeMasterVo = (ChargeMasterVo)ob;
    boolean status = false;

    logger.info(new StringBuilder().append("In insertChargeMaster..........").append(chargeMasterVo.getLbxCharge()).toString());

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String chargeStatus = "X";
    String tdsStatus = "N";
    String taxInclusiveStatus = "N";
    String taxApplicableStatus = "N";

    String query = "";
    if (!CommonFunction.checkNull(chargeMasterVo.getLbxScheme()).equalsIgnoreCase(""))
    {
      query = new StringBuilder().append("SELECT count(CHARGE_ID) FROM COM_CHARGES_M WHERE product_id='").append(StringEscapeUtils.escapeSql(chargeMasterVo.getLbxProductID().trim())).append("' ").append("and scheme_id='").append(StringEscapeUtils.escapeSql(chargeMasterVo.getLbxScheme().trim())).append("' ").append("and charge_code=").append(StringEscapeUtils.escapeSql(chargeMasterVo.getLbxCharge().trim())).append("  ").toString();
    }
    else
    {
      query = new StringBuilder().append("SELECT count(CHARGE_ID) FROM COM_CHARGES_M WHERE product_id='").append(StringEscapeUtils.escapeSql(chargeMasterVo.getLbxProductID().trim())).append("' ").append("and charge_code=").append(StringEscapeUtils.escapeSql(chargeMasterVo.getLbxCharge().trim())).append("  ").toString();
    }

    logger.info(new StringBuilder().append("In insertChargeMaster.....................................Dao Impl").append(query).toString());
    boolean st = false;
    String countStr = CommonFunction.checkNull(ConnectionDAOforEJB.singleReturn(query));
    int count = 0;
    if (!countStr.equalsIgnoreCase(""))
      count = Integer.parseInt(countStr);
    if (count > 0) {
      st = true;
    }
    try
    {
      if (!st) {
        if ((chargeMasterVo.getChargeStatus() != null) && (chargeMasterVo.getChargeStatus().equals("on")))
        {
          chargeStatus = "A";
        }
        else chargeStatus = "X";

        if ((chargeMasterVo.getTdsStatus() != null) && (chargeMasterVo.getTdsStatus().equals("on")))
        {
          tdsStatus = "Y";
        }
        else tdsStatus = "N";

        if ((chargeMasterVo.getTaxInclusiveStatus() != null) && (chargeMasterVo.getTaxInclusiveStatus().equals("on")))
        {
          taxInclusiveStatus = "Y";
        }
        else taxInclusiveStatus = "N";

        if ((chargeMasterVo.getTaxStatus() != null) && (chargeMasterVo.getTaxStatus().equals("on")))
        {
          taxApplicableStatus = "Y";
        }
        else taxApplicableStatus = "N";

        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("INSERT INTO COM_CHARGES_M(PRODUCT_ID,SCHEME_ID,DEF_STAGE_ID,APP_STAGE_ID,CHARGE_BP_TYPE,CHARGE_CODE,CHARGE_TYPE,CHARGE_METHOD,CHARGE_AMOUNT,CALCULATED_ON,TDS_APPLICABLE,TDS_RATE,TAX_APPLICABLE,TAX_INCLUSIVE,TAX_RATE1,TAX_RATE2,MIN_CHARGE_AMOUNT,REC_STATUS,MIN_CHARGE_METHOD,MIN_CHARGE_CALCULATED,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");

        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

        if (CommonFunction.checkNull(chargeMasterVo.getLbxProductID()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeMasterVo.getLbxProductID());

        if (CommonFunction.checkNull(chargeMasterVo.getLbxScheme()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeMasterVo.getLbxScheme());

        if (CommonFunction.checkNull(chargeMasterVo.getLbxStage()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeMasterVo.getLbxStage().toUpperCase());

        if (CommonFunction.checkNull(chargeMasterVo.getLbxAppStage()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeMasterVo.getLbxAppStage().toUpperCase());

        if (CommonFunction.checkNull(chargeMasterVo.gethBuyerSupplierBPType()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeMasterVo.gethBuyerSupplierBPType().toUpperCase());

        if (CommonFunction.checkNull(chargeMasterVo.getLbxCharge()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeMasterVo.getLbxCharge().toUpperCase());

        if (CommonFunction.checkNull(chargeMasterVo.getChargeType()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeMasterVo.getChargeType());

        if (CommonFunction.checkNull(chargeMasterVo.getChargeMethod()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(chargeMasterVo.getChargeMethod());
        }
        if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(chargeMasterVo.getChargeAmount()).trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(chargeMasterVo.getChargeAmount()).trim()).toString());
        }

        if (CommonFunction.checkNull(chargeMasterVo.getLbxCalculatedOn()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeMasterVo.getLbxCalculatedOn());

        if (CommonFunction.checkNull(tdsStatus).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(tdsStatus);
        }
        if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(chargeMasterVo.getTdsRate()).trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.0");
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(chargeMasterVo.getTdsRate()).trim()).toString());
        }

        if (CommonFunction.checkNull(taxApplicableStatus).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(taxApplicableStatus);

        if (CommonFunction.checkNull(taxInclusiveStatus).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(taxInclusiveStatus);

        if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(chargeMasterVo.getTaxRate1()).trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(chargeMasterVo.getTaxRate1()).trim()).toString());
        }

        if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(chargeMasterVo.getTaxRate2()).trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(chargeMasterVo.getTaxRate2()).trim()).toString());
        }

        if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(chargeMasterVo.getMinChargeAmount()).trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(chargeMasterVo.getMinChargeAmount()).trim()).toString());
        }

        if (CommonFunction.checkNull(chargeStatus).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(chargeStatus);
        }
        if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(chargeMasterVo.getChargeMethod()).trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(chargeMasterVo.getChargeMethod());
        }
        if (CommonFunction.checkNull(chargeMasterVo.getLbxCalculatedOn()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeMasterVo.getLbxCalculatedOn());

        if (CommonFunction.checkNull(chargeMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeMasterVo.getMakerId());

        if (CommonFunction.checkNull(chargeMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeMasterVo.getMakerDate());

        if (CommonFunction.checkNull(chargeMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeMasterVo.getMakerId());

        if (CommonFunction.checkNull(chargeMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(chargeMasterVo.getMakerDate());

        insertPrepStmtObject.setSql(bufInsSql.toString());

        logger.info(new StringBuilder().append("IN insertBaseRateMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);

        logger.info(new StringBuilder().append("In insertBaseRateMaster......................").append(status).toString());
      } else {
        status = false;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList<ChargeMasterVo> getChargeData() {
    ArrayList list = new ArrayList();
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In getChargeData()..............Dao Impl");
      String query = "SELECT CHARGE_ID,(SELECT A.CHARGE_DESC FROM COM_CHARGE_CODE_M A WHERE A.CHARGE_CODE=V.CHARGE_CODE ) AS CHARGE_DESC,PRODUCT_ID,(SELECT B.PRODUCT_DESC FROM CR_PRODUCT_M B WHERE B.PRODUCT_ID=V.PRODUCT_ID ) AS PRODUCT_DESC,SCHEME_ID,(SELECT C.SCHEME_DESC FROM CR_SCHEME_M C WHERE C.SCHEME_ID=V.SCHEME_ID) AS SCHEME_DESC,DEF_STAGE_ID,(SELECT D.STAGE_DESC FROM CR_STAGE_M D WHERE D.STAGE_ID=V.APP_STAGE_ID ) AS DEF_STAGE_DESC,APP_STAGE_ID,(SELECT D.STAGE_DESC FROM CR_STAGE_M D WHERE D.STAGE_ID=V.APP_STAGE_ID ) AS APP_STAGE_ID,CHARGE_BP_TYPE,(SELECT E.DESCRIPTION FROM GENERIC_MASTER E WHERE E.VALUE=V.CHARGE_BP_TYPE  AND GENERIC_KEY='BPTYPE') AS CHARGE_BP_TYPE_DESC,CHARGE_CODE,CHARGE_TYPE,CHARGE_METHOD,CHARGE_AMOUNT,CALCULATED_ON,TDS_APPLICABLE,TDS_RATE,TAX_APPLICABLE,TAX_INCLUSIVE,TAX_RATE1,TAX_RATE2,MIN_CHARGE_AMOUNT, if(REC_STATUS='A','Active','Inactive')as Status,MIN_CHARGE_METHOD,MIN_CHARGE_CALCULATED FROM COM_CHARGES_M V ORDER BY CHARGE_ID";

      list = ConnectionDAOforEJB.sqlSelect(query);
      logger.info(new StringBuilder().append("getChargeData ").append(list.size()).toString());

      for (int i = 0; i < list.size(); i++) {
        logger.info(new StringBuilder().append("getChargeDataList ").append(list.get(i).toString()).toString());

        ArrayList data = (ArrayList)list.get(i);

        if (data.size() > 0) {
          ChargeMasterVo chargeMVo = new ChargeMasterVo();

          chargeMVo.setLbxChargeModify(new StringBuilder().append("<a href=chargeMasterSearch.do?method=openEditCharge&chargeSearchId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(1)).toString()).append("</a>").toString());

          chargeMVo.setLbxCharge(CommonFunction.checkNull(data.get(0)).toString());

          chargeMVo.setChargeId(CommonFunction.checkNull(data.get(1)).toString());

          chargeMVo.setLbxProductID(CommonFunction.checkNull(data.get(2)).toString());

          chargeMVo.setProductId(CommonFunction.checkNull(data.get(3)).toString());

          chargeMVo.setLbxScheme(CommonFunction.checkNull(data.get(4)).toString());

          chargeMVo.setSchemeId(CommonFunction.checkNull(data.get(5)).toString());

          chargeMVo.setLbxStage(CommonFunction.checkNull(data.get(6)).toString());

          chargeMVo.setStageId(CommonFunction.checkNull(data.get(7)).toString());

          chargeMVo.setLbxAppStage(CommonFunction.checkNull(data.get(8)).toString());

          chargeMVo.setAppStageId(CommonFunction.checkNull(data.get(9)).toString());

          chargeMVo.sethBuyerSupplierBPType(CommonFunction.checkNull(data.get(10)).toString());

          chargeMVo.setChargeBPType(CommonFunction.checkNull(data.get(11)).toString());

          chargeMVo.setChargeCode(CommonFunction.checkNull(data.get(12)).toString());

          chargeMVo.setChargeType(CommonFunction.checkNull(data.get(13)).toString());

          chargeMVo.setChargeMethod(CommonFunction.checkNull(data.get(14)).toString());

          chargeMVo.setChargeAmount(CommonFunction.checkNull(data.get(15)).toString());

          chargeMVo.setCalculatedOn(CommonFunction.checkNull(data.get(16)).toString());

          chargeMVo.setTdsStatus(CommonFunction.checkNull(data.get(17)).toString());

          chargeMVo.setTdsRate(CommonFunction.checkNull(data.get(18)).toString());

          chargeMVo.setTaxStatus(CommonFunction.checkNull(data.get(19)).toString());

          chargeMVo.setTaxInclusiveStatus(CommonFunction.checkNull(data.get(20)).toString());

          chargeMVo.setTaxRate1(CommonFunction.checkNull(data.get(21)).toString());

          chargeMVo.setTaxRate2(CommonFunction.checkNull(data.get(22)).toString());

          chargeMVo.setMinChargeAmount(CommonFunction.checkNull(data.get(23)).toString());

          chargeMVo.setChargeStatus(CommonFunction.checkNull(data.get(24)).toString());

          chargeMVo.setMinchargeMethod(CommonFunction.checkNull(data.get(25)).toString());

          chargeMVo.setMinCalculatedOn(CommonFunction.checkNull(data.get(26)).toString());

          detailList.add(chargeMVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return detailList;
  }

  public boolean updateChargeData(Object ob, String chargeId) {
    ChargeMasterVo chargeMasterVo = (ChargeMasterVo)ob;
    String lbxCharge = chargeMasterVo.getLbxCharge();
    logger.info(new StringBuilder().append("vo.getChargeStatus():-").append(chargeMasterVo.getChargeStatus()).toString());

    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();

    StringBuffer bufInsSql = new StringBuffer();
    boolean status = false;
    String chargeStatus = "X";
    String tdsStatus = "N";
    String taxInclusiveStatus = "N";
    String taxApplicableStatus = "N";
    try {
      if ((chargeMasterVo.getChargeStatus() != null) && (chargeMasterVo.getChargeStatus().equals("on")))
      {
        chargeStatus = "A";
      }
      else chargeStatus = "X";

      if ((chargeMasterVo.getTdsStatus() != null) && (chargeMasterVo.getTdsStatus().equals("on")))
      {
        tdsStatus = "Y";
      }
      else tdsStatus = "N";

      if ((chargeMasterVo.getTaxInclusiveStatus() != null) && (chargeMasterVo.getTaxInclusiveStatus().equals("on")))
      {
        taxInclusiveStatus = "Y";
      }
      else taxInclusiveStatus = "N";

      if ((chargeMasterVo.getTaxStatus() != null) && (chargeMasterVo.getTaxStatus().equals("on")))
      {
        taxApplicableStatus = "Y";
      }
      else taxApplicableStatus = "N";

      logger.info(new StringBuilder().append("In updateChargeData.....................................Dao Impl--tdsRate------").append(chargeMasterVo.getTdsRate()).toString());

      bufInsSql.append(new StringBuilder().append("UPDATE COM_CHARGES_M SET SCHEME_ID=?,DEF_STAGE_ID=?,APP_STAGE_ID=?,CHARGE_BP_TYPE=?,CHARGE_TYPE=?,CHARGE_METHOD=?,CHARGE_AMOUNT=?,CALCULATED_ON=?,TDS_APPLICABLE=?,TDS_RATE=?,TAX_APPLICABLE=?,TAX_INCLUSIVE=?,TAX_RATE1=?,TAX_RATE2=?,MIN_CHARGE_METHOD=?,MIN_CHARGE_AMOUNT=?,REC_STATUS=?,MIN_CHARGE_CALCULATED=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) WHERE CHARGE_ID=?").toString());

      if (CommonFunction.checkNull(chargeMasterVo.getLbxScheme()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeMasterVo.getLbxScheme().toUpperCase());

      if (CommonFunction.checkNull(chargeMasterVo.getLbxStage()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeMasterVo.getLbxStage().toUpperCase());

      if (CommonFunction.checkNull(chargeMasterVo.getLbxAppStage()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeMasterVo.getLbxAppStage().toUpperCase());

      logger.info(new StringBuilder().append("chargeMasterVo.getLbxAppStage()........").append(chargeMasterVo.getLbxAppStage()).toString());

      if (CommonFunction.checkNull(chargeMasterVo.gethBuyerSupplierBPType()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeMasterVo.gethBuyerSupplierBPType().toUpperCase());

      if (CommonFunction.checkNull(chargeMasterVo.getChargeType()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeMasterVo.getChargeType());

      if (CommonFunction.checkNull(chargeMasterVo.getChargeMethod()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeMasterVo.getChargeMethod());

      if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(chargeMasterVo.getChargeAmount()).trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(chargeMasterVo.getChargeAmount()).trim()).toString());
      }

      if (CommonFunction.checkNull(chargeMasterVo.getLbxCalculatedOn()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeMasterVo.getLbxCalculatedOn());

      if (CommonFunction.checkNull(tdsStatus).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(tdsStatus);
      }
      if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(chargeMasterVo.getTdsRate()).trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(chargeMasterVo.getTdsRate()).trim()).toString());
      }

      if (CommonFunction.checkNull(taxApplicableStatus).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(taxApplicableStatus);

      if (CommonFunction.checkNull(taxInclusiveStatus).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(taxInclusiveStatus);

      if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(chargeMasterVo.getTaxRate1()).trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(chargeMasterVo.getTaxRate1()).trim()).toString());
      }

      if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(chargeMasterVo.getTaxRate2()).trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(chargeMasterVo.getTaxRate2()).trim()).toString());
      }

      if (CommonFunction.checkNull(chargeMasterVo.getChargeMethod()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(chargeMasterVo.getChargeMethod());
      }

      if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(chargeMasterVo.getMinChargeAmount()).trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(chargeMasterVo.getMinChargeAmount()).trim()).toString());
      }

      if (CommonFunction.checkNull(chargeStatus).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(chargeStatus);
      }
      if (CommonFunction.checkNull(chargeMasterVo.getLbxCalculatedOn()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeMasterVo.getLbxCalculatedOn());

      if (CommonFunction.checkNull(chargeMasterVo.getMakerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeMasterVo.getMakerId());
      if (CommonFunction.checkNull(chargeMasterVo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(chargeMasterVo.getMakerDate());

      if (CommonFunction.checkNull(chargeId).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(chargeId);
      }
      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN insertBankBranchMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

      updatelist.add(insertPrepStmtObject);

      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList<ChargeMasterVo> searchChargeData(Object ob) {
    String productId = "";
    String schemeId = "";
    String chargeId = "";
    String chargeCode = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    ArrayList searchlist = new ArrayList();
    ChargeMasterVo chargeMasterVo = (ChargeMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchChargeData()............Inside ejb server file........Dao Impl");
      productId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(chargeMasterVo.getLbxProductSearchID())).trim();
      schemeId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(chargeMasterVo.getLbxSchemeSearch())).trim();
      chargeId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(chargeMasterVo.getLbxChargeSearch())).trim();
      String charge = StringEscapeUtils.escapeSql(CommonFunction.checkNull(chargeMasterVo.getCharge())).trim();
      logger.info(new StringBuilder().append("In searchChargeData charge---- ").append(charge).toString());
      logger.info(new StringBuilder().append("In searchChargeData chargeId---- ").append(chargeId).toString());
      boolean appendSQL = false;
      StringBuffer sbAppendToSQLCount = new StringBuffer();
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("SELECT V.CHARGE_CODE,(SELECT A.CHARGE_DESC FROM COM_CHARGE_CODE_M A WHERE A.CHARGE_CODE=V.CHARGE_CODE ) AS CHARGE_DESC,PRODUCT_ID,(SELECT B.PRODUCT_DESC FROM CR_PRODUCT_M B WHERE B.PRODUCT_ID=V.PRODUCT_ID ) AS PRODUCT_DESC,SCHEME_ID,(SELECT C.SCHEME_DESC FROM CR_SCHEME_M C WHERE C.SCHEME_ID=V.SCHEME_ID) AS SCHEME_DESC,DEF_STAGE_ID,(SELECT D.STAGE_DESC FROM CR_STAGE_M D WHERE D.STAGE_ID=V.DEF_STAGE_ID ) AS DEF_STAGE_DESC,APP_STAGE_ID,(SELECT D.STAGE_DESC FROM CR_STAGE_M D WHERE D.STAGE_ID=V.APP_STAGE_ID ) AS APP_STAGE_DESC,CHARGE_BP_TYPE,(SELECT E.DESCRIPTION FROM GENERIC_MASTER E WHERE E.VALUE=V.CHARGE_BP_TYPE AND GENERIC_KEY='BPTYPE' ) AS CHARGE_BP_TYPE_DESC,V.CHARGE_CODE,CHARGE_TYPE,CHARGE_METHOD,CHARGE_AMOUNT,CALCULATED_ON,(SELECT F.CHARGE_DESC FROM COM_CHARGE_CODE_M F WHERE F.CHARGE_CODE=V.CALCULATED_ON) AS CALCULATED_ON_DESC,TDS_APPLICABLE,TDS_RATE,TAX_APPLICABLE,TAX_INCLUSIVE,TAX_RATE1,TAX_RATE2,MIN_CHARGE_AMOUNT,if(V.REC_STATUS='A','Active','Inactive')as Status,V.CHARGE_ID,MIN_CHARGE_METHOD,MIN_CHARGE_CALCULATED,(SELECT F.CHARGE_DESC FROM COM_CHARGE_CODE_M F WHERE F.CHARGE_CODE=V.MIN_CHARGE_CALCULATED) AS MIN_CHARGE_CALCULATED_DESC FROM COM_CHARGES_M V, COM_CHARGE_CODE_M R");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM COM_CHARGES_M V,COM_CHARGE_CODE_M R");

      bufInsSql.append(" WHERE V.CHARGE_CODE=R.CHARGE_CODE AND R.SYSTEM_DEFINED='N'");
      bufInsSqlTempCount.append(" WHERE V.CHARGE_CODE=R.CHARGE_CODE AND R.SYSTEM_DEFINED='N'");

      if ((!productId.equalsIgnoreCase("")) && (!schemeId.equalsIgnoreCase("")) && (!chargeId.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append("AND PRODUCT_ID='").append(productId).append("' AND SCHEME_ID='").append(schemeId).append("'  AND V.CHARGE_CODE ='").append(chargeId).append("'").toString());

        bufInsSqlTempCount.append(new StringBuilder().append("AND PRODUCT_ID='").append(productId).append("' AND SCHEME_ID='").append(schemeId).append("'  AND V.CHARGE_CODE ='").append(chargeId).append("'").toString());
      }

      if ((!productId.equalsIgnoreCase("")) || (!schemeId.equalsIgnoreCase("")) || (!chargeId.equalsIgnoreCase(""))) {
        appendSQL = true;
      }

      if (appendSQL) {
        bufInsSql.append(" AND ");
        bufInsSqlTempCount.append(" AND ");
      }

      if (!productId.equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" PRODUCT_ID='").append(productId).append("' AND").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" PRODUCT_ID='").append(productId).append("' AND").toString());
        appendSQL = true;
      }

      if (!schemeId.equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" SCHEME_ID='").append(schemeId).append("' AND").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" SCHEME_ID='").append(schemeId).append("' AND").toString());
        appendSQL = true;
      }

      if (!chargeId.equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" V.CHARGE_CODE='").append(chargeId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" V.CHARGE_CODE='").append(chargeId).append("'").toString());
        appendSQL = true;
      }
      if (!charge.equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND CHARGE_ID='").append(charge).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND CHARGE_ID='").append(charge).append("'").toString());
        appendSQL = true;
      }

      logger.info(new StringBuilder().append("In appendSQL true---- ").append(appendSQL).toString());

      if (appendSQL) {
        logger.info("In appendSQL true---- ");
        String tmp = bufInsSql.toString();
        String tmp1 = bufInsSqlTempCount.toString();

        logger.info(new StringBuilder().append("In setSearchCharge() ## tmp ## ").append(tmp).toString());
        logger.info(new StringBuilder().append("In appendSQL true----  in check index Of").append(tmp.lastIndexOf("AND")).append("------").append(tmp.length() - 3).toString());

        if ((tmp.lastIndexOf("AND") == tmp.length() - 3) && (tmp1.lastIndexOf("AND") == tmp1.length() - 3))
        {
          logger.info("In appendSQL true----  in check index Of");

          tmp = tmp.substring(0, tmp.length() - 4);
          tmp1 = tmp1.substring(0, tmp1.length() - 4);
          logger.info(new StringBuilder().append("search Query...tmp.").append(tmp).append(" ORDER BY CHARGE_ID").toString());

          searchlist = ConnectionDAOforEJB.sqlSelect(new StringBuilder().append(tmp).append(" ORDER BY CHARGE_ID").toString());

          count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(tmp1.toString()));
        }
        else
        {
          logger.info(new StringBuilder().append("search Query...tmp.").append(tmp).append(" ORDER BY CHARGE_ID").toString());
          searchlist = ConnectionDAOforEJB.sqlSelect(new StringBuilder().append(tmp).append(" ORDER BY CHARGE_ID").toString());

          count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));
        }
      }
      else {
        logger.info(new StringBuilder().append("search Query...else-------.").append(bufInsSql).toString());
        logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());

        count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

        if (((productId.trim() == null) && (schemeId.trim() == null) && (chargeId.trim() == null)) || ((productId.trim().equalsIgnoreCase("")) && (schemeId.trim().equalsIgnoreCase("")) && (chargeId.trim().equalsIgnoreCase(""))) || (chargeMasterVo.getCurrentPageLink() > 1))
        {
          logger.info(new StringBuilder().append("current PAge Link no .................... ").append(chargeMasterVo.getCurrentPageLink()).toString());
          if (chargeMasterVo.getCurrentPageLink() > 1)
          {
            startRecordIndex = (chargeMasterVo.getCurrentPageLink() - 1) * this.no;
            endRecordIndex = this.no;
            logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
            logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
          }

          bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
        }

        logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());

        searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      }
      logger.info(new StringBuilder().append("searchChargeData ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          ChargeMasterVo chargeMVo = new ChargeMasterVo();

          chargeMVo.setLbxChargeModify(new StringBuilder().append("<a href=chargeMasterSearch.do?method=openEditCharge&chargeSearchId=").append(CommonFunction.checkNull(data.get(26)).toString()).append(">").append(CommonFunction.checkNull(data.get(1)).toString()).append("</a>").toString());

          chargeMVo.setLbxCharge(CommonFunction.checkNull(data.get(0)).toString());
          chargeMVo.setChargeId(CommonFunction.checkNull(data.get(1)).toString());
          chargeMVo.setLbxProductID(CommonFunction.checkNull(data.get(2)).toString());
          chargeMVo.setProductId(CommonFunction.checkNull(data.get(3)).toString());
          chargeMVo.setLbxScheme(CommonFunction.checkNull(data.get(4)).toString());
          chargeMVo.setSchemeId(CommonFunction.checkNull(data.get(5)).toString());
          chargeMVo.setLbxStage(CommonFunction.checkNull(data.get(6)).toString());
          chargeMVo.setStageId(CommonFunction.checkNull(data.get(7)).toString());
          chargeMVo.setLbxAppStage(CommonFunction.checkNull(data.get(8)).toString());
          chargeMVo.setAppStageId(CommonFunction.checkNull(data.get(9)).toString());
          chargeMVo.setChargeBPType(CommonFunction.checkNull(data.get(10)).toString());
          chargeMVo.sethBuyerSupplierBPType(CommonFunction.checkNull(data.get(11)).toString());
          chargeMVo.setChargeCode(CommonFunction.checkNull(data.get(12)).toString());
          chargeMVo.setChargeType(CommonFunction.checkNull(data.get(13)).toString());
          chargeMVo.setChargeMethod(CommonFunction.checkNull(data.get(14)).toString());
          if (!CommonFunction.checkNull(data.get(15)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(data.get(15)).trim());
            chargeMVo.setChargeAmount(this.myFormatter.format(reconNum));
          }

          chargeMVo.setLbxCalculatedOn(CommonFunction.checkNull(data.get(16)).toString());
          chargeMVo.setCalculatedOn(CommonFunction.checkNull(data.get(17)).toString());
          chargeMVo.setTdsStatus(CommonFunction.checkNull(data.get(18)).toString());
          if (!CommonFunction.checkNull(data.get(19)).equalsIgnoreCase(""))
          {
            Number reconNum1 = this.myFormatter.parse(CommonFunction.checkNull(data.get(19)).trim());
            chargeMVo.setTdsRate(this.myFormatter.format(reconNum1));
          }

          chargeMVo.setTaxStatus(CommonFunction.checkNull(data.get(20)).toString());
          chargeMVo.setTaxInclusiveStatus(CommonFunction.checkNull(data.get(21)).toString());
          if (!CommonFunction.checkNull(data.get(22)).equalsIgnoreCase(""))
          {
            Number reconNum2 = this.myFormatter.parse(CommonFunction.checkNull(data.get(22)).trim());
            chargeMVo.setTaxRate1(this.myFormatter.format(reconNum2));
          }

          if (!CommonFunction.checkNull(data.get(23)).equalsIgnoreCase(""))
          {
            Number reconNum3 = this.myFormatter.parse(CommonFunction.checkNull(data.get(23)).trim());
            chargeMVo.setTaxRate2(this.myFormatter.format(reconNum3));
          }

          if (!CommonFunction.checkNull(data.get(24)).equalsIgnoreCase(""))
          {
            Number reconNum4 = this.myFormatter.parse(CommonFunction.checkNull(data.get(24)).trim());
            chargeMVo.setMinChargeAmount(this.myFormatter.format(reconNum4));
          }

          chargeMVo.setChargeStatus(CommonFunction.checkNull(data.get(25)).toString());
          chargeMVo.setCharge(CommonFunction.checkNull(data.get(26)).toString());
          chargeMVo.setMinchargeMethod(CommonFunction.checkNull(data.get(27)).toString());
          chargeMVo.setLbxminCalculatedOn(CommonFunction.checkNull(data.get(28)).toString());
          chargeMVo.setMinCalculatedOn(CommonFunction.checkNull(data.get(29)).toString());
          chargeMVo.setTotalRecordSize(count);
          detailList.add(chargeMVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean insertRoleMaster(Object ob)
  {
    RoleMasterVo roleMasterVo = (RoleMasterVo)ob;
    boolean status = false;
    logger.info(new StringBuilder().append("In insertRoleMaster..........").append(roleMasterVo.getRoleStatus()).toString());
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String query = new StringBuilder().append("SELECT ROLE_DESC FROM SEC_ROLE_M WHERE ROLE_DESC='").append(StringEscapeUtils.escapeSql(roleMasterVo.getRoleDesc().trim())).append("' AND MODULE_ID='").append(StringEscapeUtils.escapeSql(roleMasterVo.getLbxModule().trim())).append("'").toString();

    logger.info(new StringBuilder().append("In insertRoleMaster.....................................Dao Impl").append(query).toString());
    boolean st = ConnectionDAOforEJB.checkStatus(query);
    try
    {
      if (!st) {
        if ((roleMasterVo.getRoleStatus() != null) && (roleMasterVo.getRoleStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info("In insert role master");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("INSERT INTO SEC_ROLE_M(ROLE_DESC,MODULE_ID,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");

        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());
        if (CommonFunction.checkNull(roleMasterVo.getRoleDesc()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(roleMasterVo.getRoleDesc().toUpperCase().trim());

        if (CommonFunction.checkNull(roleMasterVo.getLbxModule()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(roleMasterVo.getLbxModule());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(roleMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(roleMasterVo.getMakerId());

        if (CommonFunction.checkNull(roleMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(roleMasterVo.getMakerDate());
        if (CommonFunction.checkNull(roleMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(roleMasterVo.getMakerId());

        if (CommonFunction.checkNull(roleMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(roleMasterVo.getMakerDate());

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN insertRoleMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In insertRoleMaster......................").append(status).toString());
      } else {
        status = false;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList<RoleMasterVo> searchRoleData(Object ob) {
    String roleId = "";
    String roleDesc = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    ArrayList searchlist = new ArrayList();
    RoleMasterVo roleMasterVo = (RoleMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchRoleData().....................................Dao Impl");
      roleId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(roleMasterVo.getRoleId())).trim();
      roleDesc = StringEscapeUtils.escapeSql(CommonFunction.checkNull(roleMasterVo.getRoleSearchDesc())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append(" SELECT ROLE_ID,ROLE_DESC,");
      bufInsSql.append(" MODULE_ID,(SELECT A.MODULE_DESC FROM SEC_MODULE_M A WHERE A.MODULE_ID=V.MODULE_ID ) AS MODULE_DESC,");
      bufInsSql.append(" if(REC_STATUS='A','Active','Inactive')AS STATUS FROM SEC_ROLE_M V ");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM SEC_ROLE_M V ");

      if ((!roleId.equalsIgnoreCase("")) && (!roleDesc.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE ROLE_DESC like '%").append(roleDesc).append("%' AND ROLE_ID='").append(roleId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE ROLE_DESC like '%").append(roleDesc).append("%' AND ROLE_ID='").append(roleId).append("'").toString());
      }
      else if (!roleDesc.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE ROLE_DESC LIKE '%").append(roleDesc).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE ROLE_DESC LIKE '%").append(roleDesc).append("%' ").toString());
      }
      else if (!roleId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE ROLE_ID = '").append(roleId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE ROLE_ID = '").append(roleId).append("' ").toString());
      }
      bufInsSql.append(" ORDER BY ROLE_ID");

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((roleId.trim() == null) && (roleDesc.trim() == null)) || ((roleId.trim().equalsIgnoreCase("")) && (roleDesc.trim().equalsIgnoreCase(""))) || (roleMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(roleMasterVo.getCurrentPageLink()).toString());
        if (roleMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (roleMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchRoleData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("searchRoleData ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          RoleMasterVo roleMVo = new RoleMasterVo();

          roleMVo.setRoleIdModify(new StringBuilder().append("<a href=roleMasterSearch.do?method=openEditRole&roleId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          roleMVo.setRoleId(CommonFunction.checkNull(data.get(0)).toString());
          roleMVo.setRoleDesc(CommonFunction.checkNull(data.get(1)).toString());
          roleMVo.setLbxModule(CommonFunction.checkNull(data.get(2)).toString());
          roleMVo.setModuleId(CommonFunction.checkNull(data.get(3)).toString());
          roleMVo.setRoleStatus(CommonFunction.checkNull(data.get(4)).toString());
          roleMVo.setTotalRecordSize(count);
          detailList.add(roleMVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean updateRoleData(Object ob) {
    RoleMasterVo roleMasterVo = (RoleMasterVo)ob;
    String roleDesc = roleMasterVo.getRoleDesc().trim();
    logger.info(new StringBuilder().append("vo.getRoleStatus():-").append(roleMasterVo.getRoleStatus()).toString());
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();

    String query = new StringBuilder().append("SELECT ROLE_DESC FROM SEC_ROLE_M WHERE ROLE_DESC='").append(StringEscapeUtils.escapeSql(roleMasterVo.getRoleDesc().trim())).append("' AND MODULE_ID='").append(StringEscapeUtils.escapeSql(roleMasterVo.getLbxModule().trim())).append("' AND ROLE_ID!='").append(roleMasterVo.getRoleId()).append("'").toString();

    logger.info(new StringBuilder().append("In insertRoleMaster.....................................Dao Impl").append(query).toString());

    boolean st = ConnectionDAOforEJB.checkStatus(query);

    boolean status = false;
    String stat = "";
    try {
      if (!st) {
        if ((roleMasterVo.getRoleStatus() != null) && (roleMasterVo.getRoleStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        StringBuffer bufInsSql = new StringBuffer();
        logger.info("In updateRoleData.....................................Dao Impl");

        bufInsSql.append(new StringBuilder().append("UPDATE SEC_ROLE_M SET ROLE_DESC=?,MODULE_ID=?, REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND)  WHERE ROLE_ID=?").toString());

        if (CommonFunction.checkNull(roleMasterVo.getRoleDesc()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(roleMasterVo.getRoleDesc().toUpperCase().trim());

        if (CommonFunction.checkNull(roleMasterVo.getLbxModule()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(roleMasterVo.getLbxModule());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }

        if (CommonFunction.checkNull(roleMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(roleMasterVo.getMakerId());
        if (CommonFunction.checkNull(roleMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(roleMasterVo.getMakerDate());

        if (CommonFunction.checkNull(roleMasterVo.getRoleId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(roleMasterVo.getRoleId());

        insertPrepStmtObject.setSql(bufInsSql.toString());

        updatelist.add(insertPrepStmtObject);
        logger.info(new StringBuilder().append("In getListOfValues").append(bufInsSql.toString()).toString());

        if (stat.equalsIgnoreCase("X")) {
          bufInsSql = new StringBuffer();
          insertPrepStmtObject = new PrepStmtObject();
          bufInsSql.append(new StringBuilder().append("UPDATE SEC_USER_ACCESS_M SET REC_STATUS='X' WHERE  ROLE_ID='").append(roleMasterVo.getRoleId()).append("'").toString());
          logger.info(new StringBuilder().append("yudate query........").append(bufInsSql.toString()).toString());
          insertPrepStmtObject.setSql(bufInsSql.toString());
          updatelist.add(insertPrepStmtObject);
        }

        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
      } else {
        status = false;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList<RoleAccessMasterVo> searchRoleAccessData(Object ob)
  {
    String roleId = "";
    String moduleId = "";
    ArrayList searchlist = new ArrayList();
    RoleAccessMasterVo roleAccessMasterVo = (RoleAccessMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In searchRoleAccessData().....................................Dao Impl");

      roleId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(roleAccessMasterVo.getLbxRoleId())).trim();
      moduleId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(roleAccessMasterVo.getLbxModuleId())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append(" Select SFM.FUNCTION_ID,SFM.FUNCTION_DESC,SRAM.FUNCTION_ID,SFM.PARENT_FUNCTION_ID from sec_function_m SFM");
      bufInsSql.append(" LEFT JOIN  sec_role_access_m SRAM ON SFM.FUNCTION_ID=SRAM.FUNCTION_ID ");
      bufInsSql.append(new StringBuilder().append(" AND SRAM.ROLE_ID='").append(roleId).append("' AND SRAM.MODULE_ID='").append(moduleId).append("' ").toString());
      bufInsSql.append(new StringBuilder().append(" WHERE SFM.MODULE_ID='").append(moduleId).append("' AND SFM.REC_STATUS='A' ORDER BY SFM.SEQUENCE_ID ").toString());

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN searchRoleAccessData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("searchRoleAccessData ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("searchRoleAccessDataList ").append(searchlist.get(i).toString()).toString());
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          RoleAccessMasterVo roleAccessMVo = new RoleAccessMasterVo();
          roleAccessMVo.setFunName(CommonFunction.checkNull(data.get(0)).toString());
          roleAccessMVo.setFunDesc(CommonFunction.checkNull(data.get(1)).toString());
          roleAccessMVo.setFunNameforCheckBox(CommonFunction.checkNull(data.get(2)).toString());
          roleAccessMVo.setParentId(CommonFunction.checkNull(data.get(3)).toString());

          detailList.add(roleAccessMVo);
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean insertRoleAccessMaster(Object ob, String[] checkbox)
  {
    ArrayList qryList = null;
    ArrayList insertList = null;
    StringBuffer bufInsSql = null;
    PrepStmtObject insertPrepStmtObject = null;
    boolean status = false;
    try {
      RoleAccessMasterVo roleAccessMasterVo = (RoleAccessMasterVo)ob;

      String roleId = roleAccessMasterVo.getLbxRoleId();
      String moduleId = roleAccessMasterVo.getLbxModuleId();
      logger.info(new StringBuilder().append("In insertRoleMaster..........").append(roleAccessMasterVo.getFunName()).toString());
      logger.info(new StringBuilder().append("In roleId..........").append(roleId).toString());
      logger.info(new StringBuilder().append("In moduleId..........").append(moduleId).toString());

      qryList = new ArrayList();
      insertList = new ArrayList();

      String stat = "X";
      String query = new StringBuilder().append("DELETE FROM SEC_ROLE_ACCESS_M WHERE ROLE_ID='").append(roleId).append("' AND MODULE_ID='").append(moduleId).append("'").toString();

      logger.info(new StringBuilder().append("In insertRoleAccessMaster....................Dao Impl").append(query).toString());

      qryList.add(query);
      status = ConnectionDAOforEJB.sqlInsUpdDelete(qryList);

      if (status)
      {
        for (int i = 0; i < checkbox.length; i++)
        {
          logger.info("In insert role master");
          logger.info(new StringBuilder().append("In insert getLbxModuleId ... ").append(roleAccessMasterVo.getLbxModuleId()).toString());

          bufInsSql = new StringBuffer();
          insertPrepStmtObject = new PrepStmtObject();

          bufInsSql.append("INSERT INTO SEC_ROLE_ACCESS_M(ROLE_ID,MODULE_ID,");
          bufInsSql.append(" FUNCTION_ID,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");
          bufInsSql.append(" values ( ");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
          bufInsSql.append(" ?,");
          bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

          if (CommonFunction.checkNull(roleAccessMasterVo.getLbxRoleId()).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(roleAccessMasterVo.getLbxRoleId().toUpperCase());
          }
          if (CommonFunction.checkNull(roleAccessMasterVo.getLbxModuleId()).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(roleAccessMasterVo.getLbxModuleId());
          }
          if (CommonFunction.checkNull(checkbox[i]).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(checkbox[i]);
          }
          if (CommonFunction.checkNull(roleAccessMasterVo.getMakerId()).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(roleAccessMasterVo.getMakerId());
          }
          if (CommonFunction.checkNull(roleAccessMasterVo.getMakerDate()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(roleAccessMasterVo.getMakerDate());

          if (CommonFunction.checkNull(roleAccessMasterVo.getMakerId()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(roleAccessMasterVo.getMakerId());

          if (CommonFunction.checkNull(roleAccessMasterVo.getMakerDate()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(roleAccessMasterVo.getMakerDate());

          insertPrepStmtObject.setSql(bufInsSql.toString());
          insertList.add(insertPrepStmtObject);
        }

        logger.info(new StringBuilder().append("IN insertRoleAccessMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(insertList);
        logger.info(new StringBuilder().append("In insertRoleAccessMaster......................").append(status).toString());
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return status;
  }

  public boolean checkEmpIDInEditUserMaster(Object ob)
  {
    boolean empSt = false;
    boolean status = true;
    try {
      UserMasterVo userMasterVo = (UserMasterVo)ob;

      logger.info(new StringBuilder().append("In checkEmpIDInEditUserMaster..........").append(userMasterVo.getUserStatus()).toString());

      String empQuery = new StringBuilder().append("SELECT USER_EMP_ID FROM SEC_USER_M WHERE USER_ID <> '").append(userMasterVo.getUserId()).append("' AND USER_EMP_ID='").append(StringEscapeUtils.escapeSql(userMasterVo.getEmpId().trim())).append("'").toString();

      logger.info(new StringBuilder().append("In checkEmpIDInEditUserMaster.................Dao Impl").append(empQuery).toString());

      empSt = ConnectionDAOforEJB.checkStatus(empQuery);

      if (empSt)
        status = false;
    }
    catch (Exception e)
    {
      logger.info(new StringBuilder().append("Exception in checkEmpIDInEditUserMaster() :: ").append(e.getMessage()).toString());
    }
    return status;
  }

  public boolean checkReportingToUserStatus(Object ob)
  {
    String statusCheck = "";
    boolean status = false;
    UserMasterVo userMasterVo = (UserMasterVo)ob;
    String reportingto = userMasterVo.getLbxReportingUser();
    try
    {
      logger.info(new StringBuilder().append("In checkReportingToUserStatus.....reportingto.....").append(reportingto).toString());
      String statusChkQry = new StringBuilder().append("SELECT rec_status FROM sec_user_m WHERE user_id='").append(CommonFunction.checkNull(reportingto).trim()).append("'").toString();

      statusCheck = ConnectionDAOforEJB.singleReturn(statusChkQry);
      logger.info(new StringBuilder().append("In checkReportingToUserStatus.................Dao Impl").append(statusChkQry).toString());
      logger.info(new StringBuilder().append("In checkReportingToUserStatus.......statusCheck..........Dao Impl").append(statusCheck).toString());

      if (statusCheck.equalsIgnoreCase("A"))
        status = true;
    }
    catch (Exception e)
    {
      logger.info(new StringBuilder().append("Exception in checkEmpIDInEditUserMaster() :: ").append(e.getMessage()).toString());
    }
    return status;
  }

  public boolean checkEmpIDInUserMaster(Object ob) {
    boolean empSt = false;
    boolean status = true;
    try {
      UserMasterVo userMasterVo = (UserMasterVo)ob;

      logger.info(new StringBuilder().append("In checkEmpIDInUserMaster..........").append(userMasterVo.getUserStatus()).toString());

      String empQuery = new StringBuilder().append("SELECT USER_EMP_ID FROM SEC_USER_M WHERE USER_EMP_ID='").append(StringEscapeUtils.escapeSql(userMasterVo.getEmpId().trim())).append("'").toString();

      logger.info(new StringBuilder().append("In checkEmpIDInUserMaster.................Dao Impl").append(empQuery).toString());

      empSt = ConnectionDAOforEJB.checkStatus(empQuery);

      if (empSt)
        status = false;
    }
    catch (Exception e) {
      logger.info(new StringBuilder().append("Exception in checkEmpIDInUserMaster() :: ").append(e.getMessage()).toString());
    }
    return status;
  }

  public String insertUserMaster(Object ob,String[] branchName,String[] levelName) {
    UserMasterVo userMasterVo = (UserMasterVo)ob;
    boolean status = false;
    String result = "";
    logger.info(new StringBuilder().append("In insertUserMaster..........").append(userMasterVo.getUserStatus()).toString());
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String charset = "0123456789abcdefghijklmnopqrstuvwxyz";
    String query = new StringBuilder().append("SELECT USER_ID FROM SEC_USER_M WHERE USER_ID='").append(StringEscapeUtils.escapeSql(userMasterVo.getUserId().trim())).append("'").toString();

    logger.info(new StringBuilder().append("In insertUserMaster.....................................Dao Impl").append(query).toString());

    String generatepass = null;
    boolean st = ConnectionDAOforEJB.checkStatus(query);
    String branchList="";
	String levelList="";
    try
    {
      Random rand = new Random(System.currentTimeMillis());
      StringBuffer sb = new StringBuffer();
      int length = 8;
      for (int i = 0; i < length; i++) {
        int pos = rand.nextInt("0123456789abcdefghijklmnopqrstuvwxyz".length());
        sb.append("0123456789abcdefghijklmnopqrstuvwxyz".charAt(pos));
      }

      logger.info(new StringBuilder().append("password").append(sb.toString()).toString());
      generatepass = sb.toString();
      userMasterVo.setPassword(generatepass);
      String pass = md5.en(sb.toString());

      if (!st) {
        if ((userMasterVo.getUserStatus() != null) && (userMasterVo.getUserStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";
        
        for(String val:branchName) {
			if(StringUtils.isBlank(branchList)) {
				branchList=val;
			}else {
				branchList=branchList+"|"+val;
			}
		}
		for(String val:levelName) {
			if(StringUtils.isBlank(levelList)) {
				levelList=val;
			}else {
				levelList=levelList+"|"+val;
			}
		}
//		String branchQry="SELECT GROUP_CONCAT(BRANCH_ID SEPARATOR '|') FROM SEC_USER_BRANCH_DTL WHERE USER_ID='"+userMasterVo.getUserId()+"' AND REC_STATUS='A'";
//		String levelQry="SELECT GROUP_CONCAT(LEVEL_ID SEPARATOR '|') FROM SEC_USER_LEVEL_DTL WHERE USER_ID='"+userMasterVo.getUserId()+"' AND REC_STATUS='A'";
//		branchList=ConnectionDAOforEJB.singleReturn(branchQry);
//		levelList=ConnectionDAOforEJB.singleReturn(levelQry);
	
        logger.info("In insert USER master");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("INSERT INTO SEC_USER_M(USER_ID,USER_NAME,USER_EMP_ID,USER_DEPARTMENT,USER_DEF_BRANCH,USER_DESIGNATION,");
        bufInsSql.append("USER_PHONE1,USER_PHONE2,USER_EMAIL,USER_PASSWORD,REC_STATUS,MAKER_ID,MAKER_DATE,LAST_PASSWORD_DATE,FORCED_PASSWORD_FLAG,PASS_COUNT,ACCOUNT_STATUS,USER_REPORTING_TO,BRANCH_ACCESS,REMARKS,VALIDITY_DATE,USER_CREATION_DATE,LEVEL_ACCESS,AUTHOR_DATE,MAPPED_BRANCH,MAPPED_LEVEL)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" sysdate() ,");
        bufInsSql.append(" 'Y',");
        bufInsSql.append(" '0',");
        bufInsSql.append(" 'U',");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");//REMARKS
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND),"); // USER_CREATION_DATE
        bufInsSql.append(" ?,");
        bufInsSql.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND),");//AUTHOR_DATE
		bufInsSql.append(" '"+branchList+"',");
		bufInsSql.append(" '"+levelList+"')");
		
        if (CommonFunction.checkNull(userMasterVo.getUserId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(userMasterVo.getUserId().toUpperCase().trim());

        if (CommonFunction.checkNull(userMasterVo.getUserName()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(userMasterVo.getUserName().toUpperCase().trim());

        if (CommonFunction.checkNull(userMasterVo.getEmpId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(userMasterVo.getEmpId().trim());

        if (CommonFunction.checkNull(userMasterVo.getLbxDepartmentId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(userMasterVo.getLbxDepartmentId().trim());

        if (CommonFunction.checkNull(userMasterVo.getLbxBranchId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(userMasterVo.getLbxBranchId().trim());

        if (CommonFunction.checkNull(userMasterVo.getLbxDesignationId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(userMasterVo.getLbxDesignationId());

        if (CommonFunction.checkNull(userMasterVo.getPhone1()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(userMasterVo.getPhone1().trim());

        if (CommonFunction.checkNull(userMasterVo.getPhone2()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(userMasterVo.getPhone2().trim());

        if (CommonFunction.checkNull(userMasterVo.getEmail()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(userMasterVo.getEmail().trim());

        if (CommonFunction.checkNull(pass).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(pass);
        }
        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(userMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(userMasterVo.getMakerId());

        if (CommonFunction.checkNull(userMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(userMasterVo.getMakerDate());

        if (CommonFunction.checkNull(userMasterVo.getLbxReportingUser()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(userMasterVo.getLbxReportingUser());
        }
        if (CommonFunction.checkNull(userMasterVo.getAllselection()[0]).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(userMasterVo.getAllselection()[0]);
        }
        //start by abhishek sharma
        if (CommonFunction.checkNull(userMasterVo.getRemarks()).equalsIgnoreCase(""))    //FOR REMARKS
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString(userMasterVo.getRemarks());
        //end by abhishek sharma
        if (CommonFunction.checkNull(userMasterVo.getValidityDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(userMasterVo.getValidityDate());
        }
        //start by abhishek sharma
        if (CommonFunction.checkNull(userMasterVo.getMakerDate()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString(userMasterVo.getMakerDate());
        //end by abhishek sharma
        logger.info(new StringBuilder().append("IN :::::::::::::").append(userMasterVo.getSelection()).toString());
        logger.info(new StringBuilder().append("IN ::::::[]:::::::").append(userMasterVo.getSelection().length).toString());
        if (userMasterVo.getSelection().length == 0)
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(userMasterVo.getSelection()[0]);
        }
        if (CommonFunction.checkNull(userMasterVo.getMakerDate())
				.equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString(userMasterVo.getMakerDate());
		
        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN insertUserMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In insertUserMaster......................").append(status).toString());
      }
      else
      {
        status = false;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    logger.info(new StringBuilder().append("In insertUserMaster......................").append(status).toString());
    if (status)
      result = generatepass;
    return result;
  }

  public ArrayList<UserMasterVo> searchUserData(Object ob) {
    String userId = "";
    String userName = "";
    String branchId = "";
    String reportingUser = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    ArrayList searchlist = new ArrayList();
    UserMasterVo userMasterVo = (UserMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchUserData().....................................Dao Impl");
      userId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(userMasterVo.getUserSearchId())).trim();
      userName = StringEscapeUtils.escapeSql(CommonFunction.checkNull(userMasterVo.getUserSearchName())).trim();
      branchId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(userMasterVo.getLbxBranchSearchId())).trim();
      reportingUser = StringEscapeUtils.escapeSql(CommonFunction.checkNull(userMasterVo.getLbxUserSearchId())).trim();
      logger.info(new StringBuilder().append("reportingUser...").append(reportingUser).toString());
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append(" SELECT USER_ID,USER_NAME,USER_EMP_ID,");
      bufInsSql.append("USER_DEPARTMENT,(SELECT C.DEPARTMENT_DESC FROM COM_DEPARTMENT_M C WHERE C.DEPARTMENT_ID=V.USER_DEPARTMENT ) AS DEPARTMENT_DESC,");
      bufInsSql.append(" USER_DEF_BRANCH,(SELECT A.BRANCH_DESC FROM COM_BRANCH_M A WHERE A.BRANCH_ID=V.USER_DEF_BRANCH ) AS BRANCH_DESC,");
      bufInsSql.append(" USER_DESIGNATION,(SELECT B.DESCRIPTION FROM GENERIC_MASTER B WHERE GENERIC_KEY='USER_DESIGNATION' AND B.VALUE=V.USER_DESIGNATION ) AS DESIGNATION_DESC,");
      bufInsSql.append(" USER_PHONE1,USER_PHONE2,USER_EMAIL,");
      bufInsSql.append(" if(REC_STATUS='A','Active','Inactive')as Status,USER_REPORTING_TO,");
      bufInsSql.append(new StringBuilder().append("(select  USER_NAME from SEC_USER_M where USER_ID=V.USER_REPORTING_TO) AS REPORTINGNAME,DATE_FORMAT(VALIDITY_DATE,'").append(this.dateFormat).append("'), Remarks FROM SEC_USER_M V ").toString());

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM SEC_USER_M V ");

      if ((!userId.equalsIgnoreCase("")) && (!userName.equalsIgnoreCase("")) && (!branchId.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_NAME like '%").append(userName).append("%' AND USER_ID='").append(userId).append("' AND USER_DEF_BRANCH='").append(branchId).append("' AND USER_REPORTING_TO='").append(reportingUser).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_NAME like '%").append(userName).append("%' AND USER_ID='").append(userId).append("' AND USER_DEF_BRANCH='").append(branchId).append("' AND USER_REPORTING_TO='").append(reportingUser).append("'").toString());
      }
      else if ((!userId.equalsIgnoreCase("")) && (!userName.equalsIgnoreCase("")) && (!branchId.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_NAME like '%").append(userName).append("%' AND USER_ID='").append(userId).append("' AND USER_DEF_BRANCH='").append(branchId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_NAME like '%").append(userName).append("%' AND USER_ID='").append(userId).append("' AND USER_DEF_BRANCH='").append(branchId).append("''").toString());
      }
      else if ((!userId.equalsIgnoreCase("")) && (!userName.equalsIgnoreCase("")) && (!reportingUser.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_NAME like '%").append(userName).append("%' AND USER_ID='").append(userId).append("' AND USER_REPORTING_TO='").append(reportingUser).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_NAME like '%").append(userName).append("%' AND USER_ID='").append(userId).append("' AND USER_REPORTING_TO='").append(reportingUser).append("'").toString());
      }
      else if ((!userName.equalsIgnoreCase("")) && (!reportingUser.equalsIgnoreCase("")) && (!branchId.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_NAME like '%").append(userName).append("%' AND USER_REPORTING_TO='").append(reportingUser).append("' AND USER_DEF_BRANCH='").append(branchId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_NAME like '%").append(userName).append("%' AND USER_REPORTING_TO='").append(reportingUser).append("' AND USER_DEF_BRANCH='").append(branchId).append("''").toString());
      }
      else if ((!branchId.equalsIgnoreCase("")) && (!userId.equalsIgnoreCase("")) && (!reportingUser.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_DEF_BRANCH = '").append(branchId).append("' AND USER_ID='").append(userId).append("' AND USER_REPORTING_TO='").append(reportingUser).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_DEF_BRANCH = '").append(branchId).append("' AND USER_ID='").append(userId).append("' AND USER_REPORTING_TO='").append(reportingUser).append("'").toString());
      }
      else if ((!userId.equalsIgnoreCase("")) && (!userName.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_NAME like '%").append(userName).append("%' AND USER_ID='").append(userId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_NAME like '%").append(userName).append("%' AND USER_ID='").append(userId).append("'").toString());
      }
      else if ((!userName.equalsIgnoreCase("")) && (!branchId.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_NAME like '%").append(userName).append("%' AND USER_DEF_BRANCH='").append(branchId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_NAME like '%").append(userName).append("%' AND USER_DEF_BRANCH='").append(branchId).append("'").toString());
      }
      else if ((!userName.equalsIgnoreCase("")) && (!reportingUser.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_NAME like '%").append(userName).append("%' AND USER_REPORTING_TO='").append(reportingUser).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_NAME like '%").append(userName).append("%' AND USER_REPORTING_TO='").append(reportingUser).append("'").toString());
      }
      else if ((!userId.equalsIgnoreCase("")) && (!branchId.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_ID='").append(userId).append("' AND USER_DEF_BRANCH='").append(branchId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_ID='").append(userId).append("' AND USER_DEF_BRANCH='").append(branchId).append("'").toString());
      }
      else if ((!userId.equalsIgnoreCase("")) && (!reportingUser.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_ID='").append(userId).append("' AND USER_REPORTING_TO='").append(reportingUser).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_ID='").append(userId).append("' AND USER_REPORTING_TO='").append(reportingUser).append("'").toString());
      }
      else if ((!reportingUser.equalsIgnoreCase("")) && (!branchId.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_REPORTING_TO='").append(reportingUser).append("' AND USER_DEF_BRANCH='").append(branchId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_REPORTING_TO='").append(reportingUser).append("' AND USER_DEF_BRANCH='").append(branchId).append("'").toString());
      }
      else if (!userName.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_NAME LIKE '%").append(userName).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_NAME LIKE '%").append(userName).append("%' ").toString());
      }
      else if (!userId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_ID = '").append(userId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_ID = '").append(userId).append("' ").toString());
      }
      else if (!branchId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_DEF_BRANCH = '").append(branchId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_DEF_BRANCH = '").append(branchId).append("' ").toString());
      }
      else if (!reportingUser.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_REPORTING_TO='").append(reportingUser).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_REPORTING_TO='").append(reportingUser).append("'").toString());
      }
      bufInsSql.append(" ORDER BY USER_ID");

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((userName.trim() == null) && (userId.trim() == null) && (branchId.trim() == null)) || ((userName.trim().equalsIgnoreCase("")) && (userId.trim().equalsIgnoreCase("")) && (branchId.trim().equalsIgnoreCase(""))) || (userMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(userMasterVo.getCurrentPageLink()).toString());
        if (userMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (userMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchUserData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("searchUserData ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          UserMasterVo userMVo = new UserMasterVo();

          userMVo.setUserIdModify(new StringBuilder().append("<a href=userMasterSearch.do?method=openEditUser&userSearchId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          userMVo.setUserId(CommonFunction.checkNull(data.get(0)).toString());
          userMVo.setUserName(CommonFunction.checkNull(data.get(1)).toString());
          userMVo.setEmpId(CommonFunction.checkNull(data.get(2)).toString());
          userMVo.setLbxDepartmentId(CommonFunction.checkNull(data.get(3)).toString());
          userMVo.setUserDept(CommonFunction.checkNull(data.get(4)).toString());
          userMVo.setLbxBranchId(CommonFunction.checkNull(data.get(5)).toString());
          userMVo.setBranchId(CommonFunction.checkNull(data.get(6)).toString());
          userMVo.setLbxDesignationId(CommonFunction.checkNull(data.get(7)).toString());
          userMVo.setUserDesg(CommonFunction.checkNull(data.get(8)).toString());
          userMVo.setPhone1(CommonFunction.checkNull(data.get(9)).toString());
          userMVo.setPhone2(CommonFunction.checkNull(data.get(10)).toString());
          userMVo.setEmail(CommonFunction.checkNull(data.get(11)).toString());
          userMVo.setUserStatus(CommonFunction.checkNull(data.get(12)).toString());
          userMVo.setLbxReportingUser(CommonFunction.checkNull(data.get(13)).toString());
          userMVo.setReportingto(CommonFunction.checkNull(data.get(14)).toString());
          userMVo.setValidityDate(CommonFunction.checkNull(data.get(15)).toString());
          userMVo.setRemarks(CommonFunction.checkNull(data.get(16)).toString());
          logger.info(new StringBuilder().append("ValidityDate--data.get(15)-------------").append(CommonFunction.checkNull(data.get(15)).toString()).toString());

          userMVo.setTotalRecordSize(count);
          detailList.add(userMVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean updateUserData(Object ob)
  {
    logger.info("In updateUserData().........");

    UserMasterVo userMasterVo = (UserMasterVo)ob;
    String userId = userMasterVo.getUserId();
    String reportingto = userMasterVo.getReportingto();
    PrepStmtObject updatePrepStmtObject = new PrepStmtObject();
    logger.info(new StringBuilder().append("updateUserData vo.getUserStatus():-").append(userMasterVo.getUserStatus()).toString());
    ArrayList detailList = new ArrayList();
    StringBuffer bufInsSql = null;
    String statusCheck = null;
    ArrayList data = new ArrayList();
    boolean status = false;
    String stat = "";
    ArrayList qryList = new ArrayList();
    String branchList="";
	String levelList="";
    try {
      if ((userMasterVo.getUserStatus() != null) && (userMasterVo.getUserStatus().equals("on")))
      {
        stat = "A";
      }
      else stat = "X";

      String Query = new StringBuilder().append("select USER_PASSWORD,USER_LAST_PASSWORD_1,USER_LAST_PASSWORD_2,USER_LAST_PASSWORD_3,USER_LAST_PASSWORD_4,USER_LAST_PASSWORD_5,LAST_PASSWORD_DATE,SECURITY_QUESTION1,SECURITY_ANSWER1,SECURITY_QUESTION2,SECURITY_ANSWER2,FORCED_PASSWORD_FLAG,ACCOUNT_STATUS,PASS_COUNT from sec_user_m where user_id='").append(CommonFunction.checkNull(userId).trim()).append("'").toString();

      String branchQry="SELECT GROUP_CONCAT(BRANCH_ID SEPARATOR '|') FROM SEC_USER_BRANCH_DTL WHERE USER_ID='"+userId+"' AND REC_STATUS='A'";
		String levelQry="SELECT GROUP_CONCAT(LEVEL_ID SEPARATOR '|') FROM SEC_USER_LEVEL_DTL WHERE USER_ID='"+userId+"' AND REC_STATUS='A'";
		branchList=ConnectionDAOforEJB.singleReturn(branchQry);
		levelList=ConnectionDAOforEJB.singleReturn(levelQry);
		
      detailList = ConnectionDAOforEJB.sqlSelect(Query);
      logger.info(new StringBuilder().append("IN updateUserData() :::::::::::::::detailList::::::::::::::: ").append(Query).toString());

      for (int i = 0; i < detailList.size(); i++)
      {
        data = (ArrayList)detailList.get(i);
      }
      String systemDate = "Select SYSDATE() from dual;";
		String systemDate1 = ConnectionDAO.singleReturn(systemDate);
		logger.info("IN updateUserData() :::::::::::::::systemDate::::::::::::::: "+ systemDate);
		logger.info("IN updateUserData() :::::::::::::::systemDate1::::::::::::::: "+ systemDate1);
		 bufInsSql = new StringBuffer();
		
		bufInsSql.append("UPDATE SEC_USER_M SET USER_NAME=?,USER_EMP_ID=?,USER_DEPARTMENT=?,USER_DEF_BRANCH=?,USER_DESIGNATION=?,USER_PHONE1=?,");
		bufInsSql.append("USER_PHONE2=?,USER_EMAIL=?,REC_STATUS=?,USER_REPORTING_TO=?,BRANCH_ACCESS=?,LEVEL_ACCESS=?,");
		bufInsSql.append("USER_PASSWORD=?,USER_LAST_PASSWORD_1=?,USER_LAST_PASSWORD_2=?,USER_LAST_PASSWORD_3=?,USER_LAST_PASSWORD_4=?,");
		bufInsSql.append("USER_LAST_PASSWORD_5=?,LAST_PASSWORD_DATE=?,SECURITY_QUESTION1=?,SECURITY_ANSWER1=?,SECURITY_QUESTION2=?,SECURITY_ANSWER2=?,FORCED_PASSWORD_FLAG=?,ACCOUNT_STATUS=?,PASS_COUNT=?,REMARKS=?,VALIDITY_DATE=DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND),");
		//bufInsSql.append("MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND),VALIDITY_DATE=DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND),AUTHOR_DATE=DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND),"
		bufInsSql.append("MAPPED_BRANCH='"+branchList+"',MAPPED_LEVEL='"+levelList+"'");
		if (CommonFunction.checkNull(stat).equalsIgnoreCase("X")){
		bufInsSql.append(",USER_DEACTIVATION_DATE=(select parameter_value from parameter_mst where parameter_key='BUSINESS_DATE')");
		}
		bufInsSql.append(" ,OPERATION_DATE='"+systemDate1+"'  WHERE USER_ID=? ");
      if (CommonFunction.checkNull(userMasterVo.getUserName()).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(userMasterVo.getUserName().toUpperCase().trim());
      }
      if (CommonFunction.checkNull(userMasterVo.getEmpId()).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(userMasterVo.getEmpId().trim());
      }
      if (CommonFunction.checkNull(userMasterVo.getLbxDepartmentId()).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(userMasterVo.getLbxDepartmentId().trim());
      }
      if (CommonFunction.checkNull(userMasterVo.getLbxBranchId()).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(userMasterVo.getLbxBranchId().trim());
      }
      if (CommonFunction.checkNull(userMasterVo.getLbxDesignationId()).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(userMasterVo.getLbxDesignationId());
      }
      if (CommonFunction.checkNull(userMasterVo.getPhone1()).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(userMasterVo.getPhone1().trim());
      }
      if (CommonFunction.checkNull(userMasterVo.getPhone2()).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(userMasterVo.getPhone2().trim());
      }
      if (CommonFunction.checkNull(userMasterVo.getEmail()).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(userMasterVo.getEmail().trim());
      }
      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(stat);
      }
      if (CommonFunction.checkNull(userMasterVo.getLbxReportingUser()).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(userMasterVo.getLbxReportingUser());
      }
      if (CommonFunction.checkNull(userMasterVo.getAllselection()[0]).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(userMasterVo.getAllselection()[0]);
      }
      if (userMasterVo.getSelection().length == 0)
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(userMasterVo.getSelection()[0]);
      }
      if (CommonFunction.checkNull(data.get(0)).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(CommonFunction.checkNull(data.get(0)));
      }
      if (CommonFunction.checkNull(data.get(1)).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(CommonFunction.checkNull(data.get(1)));
      }
      if (CommonFunction.checkNull(data.get(2)).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(CommonFunction.checkNull(data.get(2)));
      }
      if (CommonFunction.checkNull(data.get(3)).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(CommonFunction.checkNull(data.get(3)));
      }
      if (CommonFunction.checkNull(data.get(4)).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(CommonFunction.checkNull(data.get(4)));
      }
      if (CommonFunction.checkNull(data.get(5)).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(CommonFunction.checkNull(data.get(5)));
      }
      if (CommonFunction.checkNull(data.get(6)).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(CommonFunction.checkNull(data.get(6)));
      }
      if (CommonFunction.checkNull(data.get(7)).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(CommonFunction.checkNull(data.get(7)));
      }
      if (CommonFunction.checkNull(data.get(8)).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(CommonFunction.checkNull(data.get(8)));
      }
      if (CommonFunction.checkNull(data.get(9)).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(CommonFunction.checkNull(data.get(9)));
      }
      if (CommonFunction.checkNull(data.get(10)).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(CommonFunction.checkNull(data.get(10)));
      }
      if (CommonFunction.checkNull(data.get(11)).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(CommonFunction.checkNull(data.get(11)));
      }
      if (CommonFunction.checkNull(data.get(12)).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(CommonFunction.checkNull(data.get(12)));
      }
      if (CommonFunction.checkNull(data.get(13)).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(CommonFunction.checkNull(data.get(13)));
      }
     /* if (CommonFunction.checkNull(userMasterVo.getMakerId()).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(userMasterVo.getMakerId());
      }
      if (CommonFunction.checkNull(userMasterVo.getMakerDate()).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(userMasterVo.getMakerDate());
      }*/
      //start by abhishek sharma
      if (CommonFunction.checkNull(userMasterVo.getRemarks()).equalsIgnoreCase(""))//REMARKS
			updatePrepStmtObject.addNull();
		else
			updatePrepStmtObject.addString(userMasterVo.getRemarks());
      //end by abhishek sharma
      if (CommonFunction.checkNull(userMasterVo.getValidityDate()).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(userMasterVo.getValidityDate());
      }
      if (CommonFunction.checkNull(userMasterVo.getUserId()).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(userMasterVo.getUserId().toUpperCase().trim());
      }

      updatePrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN updateUserData() update query1 ### ").append(updatePrepStmtObject.printQuery()).toString());
      qryList.add(updatePrepStmtObject);
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      detailList = null;
      qryList = null;
      updatePrepStmtObject = null;
      bufInsSql = null;
      data = null;
    }
    logger.info(new StringBuilder().append("In updateUserData......................").append(status).toString());

    return status;
  }
  
  public boolean deleteUser(String userId) {
		logger.info("In deleteUser().........");
		boolean status = false;
		ArrayList qryList = new ArrayList();
		PrepStmtObject updatePrepStmtObject = new PrepStmtObject();
		try {
			if(StringUtils.isBlank(userId)) {
				userId="";
			}
			userId=userId.trim();
			String bufInsSql="UPDATE SEC_USER_M SET REC_STATUS='X',USER_DEACTIVATION_DATE=(select parameter_value from parameter_mst where parameter_key='BUSINESS_DATE') WHERE USER_ID='"+userId+"'";
			updatePrepStmtObject.setSql(bufInsSql.toString());
			
			logger.info("IN deleteUser() delete user query :" + updatePrepStmtObject.printQuery());
			qryList.add(updatePrepStmtObject);
			status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		finally{
			qryList=null;
			updatePrepStmtObject=null;
		}
		logger.info("IN deleteUser() delete user status : "	+ status);
		return status;
	}

  public int counthieirarchyusers(UserMasterVo vo)
  {
    int countUser = 0;
    String countusers = "";
    try {
      logger.info("In counthieirarchyusers..........................MasterDAOImpl");
      String query = new StringBuilder().append("SELECT count(1) FROM user_group_reporting WHERE REPORTING_TO='").append(vo.getUserId()).append("' AND REC_STATUS='A'").toString();

      logger.info(new StringBuilder().append("In counthieirarchyusers...........query..............").append(query).toString());
      countusers = ConnectionDAOforEJB.singleReturn(query);
      countUser = Integer.parseInt(countusers);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return countUser;
  }

  public String updateUserPassword(Object ob)
  {
    UserMasterVo userMasterVo = (UserMasterVo)ob;
    String userId = userMasterVo.getUserId();
    ArrayList updatelist = new ArrayList();
    ArrayList updatePasslist = new ArrayList();
    String updPassword = null;
    boolean status = false;
    String result = "";

    String charset = "0123456789abcdefghijklmnopqrstuvwxyz";
    try
    {
      int length = 8;
      Random rand = new Random(System.currentTimeMillis());
      StringBuffer sb = new StringBuffer();
      for (int i = 0; i < length; i++) {
        int pos = rand.nextInt("0123456789abcdefghijklmnopqrstuvwxyz".length());
        sb.append("0123456789abcdefghijklmnopqrstuvwxyz".charAt(pos));
      }

      updPassword = sb.toString();
      logger.info(new StringBuilder().append("In updateUserPassword()updPassword:: ").append(updPassword).toString());

      String passQuery = new StringBuilder().append("SELECT USER_PASSWORD,USER_LAST_PASSWORD_1,USER_LAST_PASSWORD_2,USER_LAST_PASSWORD_3,USER_LAST_PASSWORD_4,USER_LAST_PASSWORD_5 FROM SEC_USER_M WHERE USER_ID='").append(userId).append("'").toString();
      logger.info(new StringBuilder().append("passQuery  :  ").append(passQuery).toString());
      updatePasslist = ConnectionDAOforEJB.sqlSelect(passQuery);
      logger.info(new StringBuilder().append("updateUserPass : ").append(updatePasslist.size()).toString());

      for (int i = 0; i < updatePasslist.size(); i++)
      {
        ArrayList data = (ArrayList)updatePasslist.get(i);
        if (data.size() > 0)
        {
          String userPass = CommonFunction.checkNull(data.get(0)).toString();
          String userPass1 = CommonFunction.checkNull(data.get(1)).toString();
          String userPass2 = CommonFunction.checkNull(data.get(2)).toString();
          String userPass3 = CommonFunction.checkNull(data.get(3)).toString();
          String userPass4 = CommonFunction.checkNull(data.get(4)).toString();
          String userPass5 = CommonFunction.checkNull(data.get(5)).toString();
          userMasterVo.setPassword(updPassword);
          String pass = md5.en(updPassword);
          logger.info(new StringBuilder().append("Incript Password   :  ").append(pass).toString());
          String query = new StringBuilder().append("UPDATE SEC_USER_M SET FORCED_PASSWORD_FLAG='Y',LAST_PASSWORD_DATE=sysdate(),USER_LAST_PASSWORD_1='").append(userPass).append("',USER_LAST_PASSWORD_2='").append(userPass1).append("',USER_LAST_PASSWORD_3='").append(userPass2).append("',USER_LAST_PASSWORD_4='").append(userPass3).append("',USER_LAST_PASSWORD_5='").append(userPass4).append("',USER_PASSWORD='").append(pass).append("', ACCOUNT_STATUS='U' WHERE USER_ID='").append(userId).append("'").toString();

          logger.info(new StringBuilder().append("Update password query  :  ").append(query).toString());
          updatelist.add(query);
          status = ConnectionDAOforEJB.sqlInsUpdDelete(updatelist);
          logger.info(new StringBuilder().append("Update status  :  ").append(status).toString());
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    if (status)
      result = updPassword;
    return result;
  }

  public boolean insertUserBranch(Object ob, String[] branch) {
    UserMasterVo userMasterVo = (UserMasterVo)ob;
    boolean status = false;
    logger.info(new StringBuilder().append("In insertUserBranch..........").append(userMasterVo.getUserStatus()).toString());

    ArrayList qryList = new ArrayList();
    StringBuffer bufInsSql = new StringBuffer();
    PrepStmtObject insertPrepStmtObject = null;
    String stat = "X";
    try {
      Connection con = ConnectionDAOforEJB.getConnection();
      Statement st1 = con.createStatement();
      try {
        String query = new StringBuilder().append("SELECT USER_ID FROM SEC_USER_BRANCH_DTL WHERE USER_ID='").append(userMasterVo.getUserId().trim()).append("' ").toString();

        logger.info(new StringBuilder().append("In insertUserMaster.....................................Dao Impl").append(query).toString());

        boolean st = ConnectionDAOforEJB.checkStatus(query);

        if (!st) {
          if ((userMasterVo.getUserStatus() != null) && (userMasterVo.getUserStatus().equals("on")))
          {
            stat = "A";
          }
          else stat = "X";

          logger.info("In insert User Master ");
          if (userMasterVo.getAllselection()[0].equalsIgnoreCase("S"))
          {
            for (int i = 0; i < branch.length; i++) {
              insertPrepStmtObject = new PrepStmtObject();
              bufInsSql = new StringBuffer();
              bufInsSql.append("INSERT INTO SEC_USER_BRANCH_DTL(USER_ID,BRANCH_ID,REC_STATUS,MAKER_ID,MAKER_DATE)");
              bufInsSql.append(" values ( ");
              bufInsSql.append(" ?,");
              bufInsSql.append(" ?,");
              bufInsSql.append(" ?,");
              bufInsSql.append(" ?,");
              bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

              if (CommonFunction.checkNull(userMasterVo.getUserId()).equalsIgnoreCase(""))
              {
                insertPrepStmtObject.addNull();
              }
              else insertPrepStmtObject.addString(userMasterVo.getUserId().toUpperCase());

              if (CommonFunction.checkNull(branch[i]).equalsIgnoreCase(""))
              {
                insertPrepStmtObject.addNull();
              }
              else insertPrepStmtObject.addString(branch[i]);

              if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else {
                insertPrepStmtObject.addString(stat);
              }
              if (CommonFunction.checkNull(userMasterVo.getMakerId()).equalsIgnoreCase(""))
              {
                insertPrepStmtObject.addNull();
              }
              else insertPrepStmtObject.addString(userMasterVo.getMakerId());

              if (CommonFunction.checkNull(userMasterVo.getMakerDate()).equalsIgnoreCase(""))
              {
                insertPrepStmtObject.addNull();
              }
              else insertPrepStmtObject.addString(userMasterVo.getMakerDate());

              insertPrepStmtObject.setSql(bufInsSql.toString());
              logger.info(new StringBuilder().append("IN insertUserMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

              qryList.add(insertPrepStmtObject);
            }

            status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
            logger.info(new StringBuilder().append("In insertUserMaster...S...................").append(status).toString());
          }
          else
          {
            String DeleteBranchQuery = new StringBuilder().append("delete from SEC_USER_BRANCH_DTL where USER_ID='").append(userMasterVo.getUserId()).append("'").toString();
            logger.info(new StringBuilder().append("Delete Query for New User Against Branch Id:").append(DeleteBranchQuery).toString());

            st1 = con.createStatement();
            int a = st1.executeUpdate(DeleteBranchQuery);
            ArrayList updateList = new ArrayList();
            ArrayList branchId = ConnectionDAOforEJB.sqlSelect("select BRANCH_ID from com_branch_m where ifnull(REC_STATUS,'A')='A'");
            if (branchId.size() > 0)
            {
              for (int i = 0; i < branchId.size(); i++) {
                insertPrepStmtObject = new PrepStmtObject();
                bufInsSql = new StringBuffer();
                bufInsSql.append("INSERT INTO SEC_USER_BRANCH_DTL(USER_ID,BRANCH_ID,REC_STATUS,MAKER_ID,MAKER_DATE)");
                bufInsSql.append(" values ( ");
                bufInsSql.append(" ?,");
                bufInsSql.append(" ?,");
                bufInsSql.append(" ?,");
                bufInsSql.append(" ?,");
                bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

                if (CommonFunction.checkNull(userMasterVo.getUserId()).equalsIgnoreCase(""))
                {
                  insertPrepStmtObject.addNull();
                }
                else insertPrepStmtObject.addString(userMasterVo.getUserId().toUpperCase());

                if (CommonFunction.checkNull(((ArrayList)branchId.get(i)).get(0)).equalsIgnoreCase(""))
                  insertPrepStmtObject.addNull();
                else {
                  insertPrepStmtObject.addString(((ArrayList)branchId.get(i)).get(0).toString());
                }

                if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
                  insertPrepStmtObject.addNull();
                else {
                  insertPrepStmtObject.addString(stat);
                }
                if (CommonFunction.checkNull(userMasterVo.getMakerId()).equalsIgnoreCase(""))
                {
                  insertPrepStmtObject.addNull();
                }
                else insertPrepStmtObject.addString(userMasterVo.getMakerId());

                if (CommonFunction.checkNull(userMasterVo.getMakerDate()).equalsIgnoreCase(""))
                {
                  insertPrepStmtObject.addNull();
                }
                else insertPrepStmtObject.addString(userMasterVo.getMakerDate());

                insertPrepStmtObject.setSql(bufInsSql.toString());
                logger.info(new StringBuilder().append("IN insertUserMaster() insert query1 in all case ### ").append(insertPrepStmtObject.printQuery()).toString());

                updateList.add(insertPrepStmtObject);
              }
              status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updateList);
              logger.info(new StringBuilder().append("In insertUserMaster......................").append(status).toString());
            }
          }
        }
        else
        {
          status = false;
        }
      } catch (Exception e) {
        e.printStackTrace();
      }
      finally
      {
        st1.close();
        con.close();
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public boolean insertUserLevel(Object ob, String[] levelName) {
    boolean status = false;
    UserMasterVo userMasterVo = (UserMasterVo)ob;
    logger.info(new StringBuilder().append("In insertUserLevel..........").append(userMasterVo.getUserStatus()).toString());
    ArrayList qryList = new ArrayList();
    StringBuffer bufInsSql = new StringBuffer();
    PrepStmtObject insertPrepStmtObject = null;
    String stat = "X";
    try
    {
      try {
        String query = new StringBuilder().append("SELECT USER_ID FROM sec_user_level_dtl WHERE USER_ID='").append(userMasterVo.getUserId().trim()).append("' ").toString();
        logger.info(new StringBuilder().append("In insertUserLevel.....................................Dao Impl").append(query).toString());
        boolean st = ConnectionDAOforEJB.checkStatus(query);

        if (!st) {
          if ((userMasterVo.getUserStatus() != null) && (userMasterVo.getUserStatus().equals("on")))
            stat = "A";
          else {
            stat = "X";
          }

          logger.info("In 111111111111111111111----insertUserLevel ");
          if (userMasterVo.getSelection()[0].equalsIgnoreCase("S"))
          {
            for (int i = 0; i < levelName.length; i++) {
              insertPrepStmtObject = new PrepStmtObject();

              bufInsSql.append("INSERT INTO sec_user_level_dtl(USER_ID,LEVEL_ID,REC_STATUS,MAKER_ID,MAKER_DATE)");
              bufInsSql.append(" values ( ");
              bufInsSql.append(" ?,");
              bufInsSql.append(" ?,");
              bufInsSql.append(" ?,");
              bufInsSql.append(" ?,");
              bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

              if (CommonFunction.checkNull(userMasterVo.getUserId()).equalsIgnoreCase(""))
              {
                insertPrepStmtObject.addNull();
              }
              else insertPrepStmtObject.addString(userMasterVo.getUserId().toUpperCase());

              if (CommonFunction.checkNull(levelName[i]).equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else {
                insertPrepStmtObject.addString(levelName[i]);
              }

              if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else {
                insertPrepStmtObject.addString(stat);
              }
              if (CommonFunction.checkNull(userMasterVo.getMakerId()).equalsIgnoreCase(""))
              {
                insertPrepStmtObject.addNull();
              }
              else insertPrepStmtObject.addString(userMasterVo.getMakerId());

              if (CommonFunction.checkNull(userMasterVo.getMakerDate()).equalsIgnoreCase(""))
              {
                insertPrepStmtObject.addNull();
              }
              else insertPrepStmtObject.addString(userMasterVo.getMakerDate());

              insertPrepStmtObject.setSql(bufInsSql.toString());
              logger.info(new StringBuilder().append("IN insertUserLevel() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

              qryList.add(insertPrepStmtObject);
            }

            status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
            logger.info(new StringBuilder().append("In insertUserLevel...S...................").append(status).toString());
          }
          else
          {
            logger.info("222222222222222222222222222222");

            ArrayList updateList = new ArrayList();

            ArrayList levelId = ConnectionDAOforEJB.sqlSelect("select VALUE from generic_master where GENERIC_KEY='LEVELS' and REC_STATUS='A'");
            if (levelId.size() > 0)
            {
              for (int i = 0; i < levelId.size(); i++) {
                insertPrepStmtObject = new PrepStmtObject();
                bufInsSql = new StringBuffer();
                bufInsSql.append("INSERT INTO sec_user_level_dtl(USER_ID,LEVEL_ID,REC_STATUS,MAKER_ID,MAKER_DATE)");
                bufInsSql.append(" values ( ");
                bufInsSql.append(" ?,");
                bufInsSql.append(" ?,");
                bufInsSql.append(" ?,");
                bufInsSql.append(" ?,");
                bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

                if (CommonFunction.checkNull(userMasterVo.getUserId()).equalsIgnoreCase(""))
                {
                  insertPrepStmtObject.addNull();
                }
                else insertPrepStmtObject.addString(userMasterVo.getUserId().toUpperCase());

                if (CommonFunction.checkNull(((ArrayList)levelId.get(i)).get(0).toString()).equalsIgnoreCase(""))
                  insertPrepStmtObject.addNull();
                else {
                  insertPrepStmtObject.addString(((ArrayList)levelId.get(i)).get(0).toString());
                }

                if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
                  insertPrepStmtObject.addNull();
                else {
                  insertPrepStmtObject.addString(stat);
                }
                if (CommonFunction.checkNull(userMasterVo.getMakerId()).equalsIgnoreCase(""))
                {
                  insertPrepStmtObject.addNull();
                }
                else insertPrepStmtObject.addString(userMasterVo.getMakerId());

                if (CommonFunction.checkNull(userMasterVo.getMakerDate()).equalsIgnoreCase(""))
                {
                  insertPrepStmtObject.addNull();
                }
                else insertPrepStmtObject.addString(userMasterVo.getMakerDate());

                insertPrepStmtObject.setSql(bufInsSql.toString());
                logger.info(new StringBuilder().append("IN insertUserLevel() insert query1 in all case ### ").append(insertPrepStmtObject.printQuery()).toString());

                updateList.add(insertPrepStmtObject);
              }
              status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updateList);
              logger.info(new StringBuilder().append("In insertUserLevel......................").append(status).toString());
            }
          }
        }
        else
        {
          status = false;
        }
      } catch (Exception e) {
        e.printStackTrace();
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList<UserMasterVo> searchUserBranchEdit(String userId)
  {
    ArrayList searchlist = new ArrayList();
    UserMasterVo userMasterVo = new UserMasterVo();
    ArrayList branchDescList = new ArrayList();
    try
    {
      logger.info("In searchUserBranchEdit().....................................Dao Impl");

      StringBuffer bufInsSql = new StringBuffer();

      bufInsSql.append(new StringBuilder().append("select com_branch_m.BRANCH_ID ,com_branch_m.BRANCH_DESC,s.BRANCH_ACCESS  from com_branch_m inner join sec_user_branch_dtl SUBD on com_branch_m.BRANCH_ID = SUBD.BRANCH_ID  join sec_user_m S on s.user_id=SUBD.USER_ID WHERE SUBD.USER_ID='").append(userId).append("' ").toString());

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN searchUserBranchEdit() search query1 ### ").append(bufInsSql.toString()).toString());

      logger.info(new StringBuilder().append("searchUserBranchEdit ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("branchDescList ").append(searchlist.get(i).toString()).toString());

        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          UserMasterVo userMVo = new UserMasterVo();
          userMVo.setBranchId(CommonFunction.checkNull(data.get(0)).toString());
          userMVo.setBranchDesc(CommonFunction.checkNull(data.get(1)).toString());
          userMVo.setSelectionAccess(CommonFunction.checkNull(data.get(2)).toString());
          branchDescList.add(userMVo);
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return branchDescList;
  }

  public ArrayList<UserMasterVo> searchUserLevelEdit(String userId)
  {
    ArrayList searchlist = new ArrayList();
    UserMasterVo userMasterVo = new UserMasterVo();
    ArrayList levelDescList = new ArrayList();
    try
    {
      logger.info("In searchUserLevelEdit().....................................Dao Impl");

      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append(new StringBuilder().append("select GM.VALUE,GM.DESCRIPTION,S.LEVEL_ACCESS from generic_master GM  inner join sec_user_level_dtl SULD on SULD.LEVEL_ID = GM.VALUE join sec_user_m S on s.user_id=SULD.USER_ID WHERE GM.GENERIC_KEY='LEVELS' AND SULD.USER_ID='").append(userId).append("' ").toString());

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN searchUserLevelEdit() search query1 ### ").append(bufInsSql.toString()).toString());

      logger.info(new StringBuilder().append("searchUserLevelEdit ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("branchDescList ").append(searchlist.get(i).toString()).toString());

        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          UserMasterVo userMVo = new UserMasterVo();
          userMVo.setLevelID(CommonFunction.checkNull(data.get(0)).toString());
          userMVo.setLevelDesc(CommonFunction.checkNull(data.get(1)).toString());
          userMVo.setLevelAccess(CommonFunction.checkNull(data.get(2)).toString());
          levelDescList.add(userMVo);
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return levelDescList;
  }

  public boolean updateUserData1(Object ob, String[] branch) {
    logger.info("In updateUserData1 for inserting in SEC_USER_BRANCH_DTL ");
    UserMasterVo userMasterVo = (UserMasterVo)ob;
    String userId = userMasterVo.getUserId();

    ArrayList updatelist = new ArrayList();

    PrepStmtObject insertPrepStmtObject = null;

    boolean status = false;
    String stat = "";
    try
    {
      if ((userMasterVo.getUserStatus() != null) && (userMasterVo.getUserStatus().equals("on")))
      {
        stat = "A";
      }
      else stat = "X";

      if (userMasterVo.getAllselection()[0].equalsIgnoreCase("S"))
      {
        for (int i = 0; i < branch.length; i++)
        {
          insertPrepStmtObject = new PrepStmtObject();
          StringBuffer bufInsSql = new StringBuffer();
          bufInsSql.append("INSERT INTO SEC_USER_BRANCH_DTL(USER_ID,BRANCH_ID,REC_STATUS,MAKER_ID,MAKER_DATE)");
          bufInsSql.append(" values ( ");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND))").toString());

          if (CommonFunction.checkNull(userMasterVo.getUserId()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(userMasterVo.getUserId().toUpperCase());

          if (CommonFunction.checkNull(branch[i]).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(branch[i]);
          }

          if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(stat);
          }
          if (CommonFunction.checkNull(userMasterVo.getMakerId()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(userMasterVo.getMakerId());
          if (CommonFunction.checkNull(userMasterVo.getMakerDate()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(userMasterVo.getMakerDate());

          insertPrepStmtObject.setSql(bufInsSql.toString());

          updatelist.add(insertPrepStmtObject);
        }
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
        logger.info(new StringBuilder().append("In insertUserMaster......................").append(status).toString());
      }
      else
      {
        ArrayList branchId = ConnectionDAOforEJB.sqlSelect("select BRANCH_ID from com_branch_m where ifnull(REC_STATUS,'A')='A'");
        if (branchId.size() > 0)
        {
          for (int i = 0; i < branchId.size(); i++)
          {
            insertPrepStmtObject = new PrepStmtObject();
            StringBuffer bufInsSql = new StringBuffer();
            bufInsSql.append("INSERT INTO SEC_USER_BRANCH_DTL(USER_ID,BRANCH_ID,REC_STATUS,MAKER_ID,MAKER_DATE)");
            bufInsSql.append(" values ( ");
            bufInsSql.append(" ?,");
            bufInsSql.append(" ?,");
            bufInsSql.append(" ?,");
            bufInsSql.append(" ?,");
            bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND))").toString());

            if (CommonFunction.checkNull(userMasterVo.getUserId()).equalsIgnoreCase(""))
            {
              insertPrepStmtObject.addNull();
            }
            else insertPrepStmtObject.addString(userMasterVo.getUserId().toUpperCase());

            if (CommonFunction.checkNull(((ArrayList)branchId.get(i)).get(0)).equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else {
              insertPrepStmtObject.addString(((ArrayList)branchId.get(i)).get(0).toString());
            }

            if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else
              insertPrepStmtObject.addString(stat);
            if (CommonFunction.checkNull(userMasterVo.getMakerId()).equalsIgnoreCase(""))
            {
              insertPrepStmtObject.addNull();
            }
            else insertPrepStmtObject.addString(userMasterVo.getMakerId());
            if (CommonFunction.checkNull(userMasterVo.getMakerDate()).equalsIgnoreCase(""))
            {
              insertPrepStmtObject.addNull();
            }
            else insertPrepStmtObject.addString(userMasterVo.getMakerDate());
            insertPrepStmtObject.setSql(bufInsSql.toString());

            updatelist.add(insertPrepStmtObject);
          }
          status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
          logger.info(new StringBuilder().append("In insertUserMaster......................").append(status).toString());
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return status;
  }

  public boolean updateUserLevel(Object ob, String[] level)
  {
    logger.info("In  updateUserLevel..");

    UserMasterVo userMasterVo = (UserMasterVo)ob;
    String userId = userMasterVo.getUserId();

    ArrayList updatelist = new ArrayList();
    PrepStmtObject insertPrepStmtObject = null;

    boolean status = false;
    String stat = "";
    try
    {
      if ((userMasterVo.getUserStatus() != null) && (userMasterVo.getUserStatus().equals("on")))
      {
        stat = "A";
      }
      else stat = "X";

      if (userMasterVo.getSelection()[0].equalsIgnoreCase("S"))
      {
        for (int i = 0; i < level.length; i++) {
          insertPrepStmtObject = new PrepStmtObject();
          StringBuffer bufInsSql = new StringBuffer();

          bufInsSql.append("INSERT INTO sec_user_level_dtl(USER_ID,LEVEL_ID,REC_STATUS,MAKER_ID,MAKER_DATE)");
          bufInsSql.append(" values ( ");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

          if (CommonFunction.checkNull(userMasterVo.getUserId()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(userMasterVo.getUserId().toUpperCase());

          if (CommonFunction.checkNull(level[i]).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(level[i]);
          }

          if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(stat);
          }
          if (CommonFunction.checkNull(userMasterVo.getMakerId()).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(userMasterVo.getMakerId());
          }
          if (CommonFunction.checkNull(userMasterVo.getMakerDate()).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(userMasterVo.getMakerDate());
          }
          insertPrepStmtObject.setSql(bufInsSql.toString());

          updatelist.add(insertPrepStmtObject);
        }

        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
        logger.info(new StringBuilder().append("In updateUserLevel...S...................").append(status).toString());
      }
      else
      {
        ArrayList levelId = ConnectionDAOforEJB.sqlSelect("select VALUE from generic_master where GENERIC_KEY='LEVELS' and REC_STATUS='A'");
        if (levelId.size() > 0)
        {
          for (int i = 0; i < levelId.size(); i++) {
            insertPrepStmtObject = new PrepStmtObject();
            StringBuffer bufInsSql = new StringBuffer();
            bufInsSql.append("INSERT INTO sec_user_level_dtl(USER_ID,LEVEL_ID,REC_STATUS,MAKER_ID,MAKER_DATE)");
            bufInsSql.append(" values ( ");
            bufInsSql.append(" ?,");
            bufInsSql.append(" ?,");
            bufInsSql.append(" ?,");
            bufInsSql.append(" ?,");
            bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

            if (CommonFunction.checkNull(userMasterVo.getUserId()).equalsIgnoreCase(""))
            {
              insertPrepStmtObject.addNull();
            }
            else insertPrepStmtObject.addString(userMasterVo.getUserId().toUpperCase());

            if (CommonFunction.checkNull(((ArrayList)levelId.get(i)).get(0).toString()).equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else {
              insertPrepStmtObject.addString(((ArrayList)levelId.get(i)).get(0).toString());
            }

            if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else {
              insertPrepStmtObject.addString(stat);
            }
            if (CommonFunction.checkNull(userMasterVo.getMakerId()).equalsIgnoreCase(""))
            {
              insertPrepStmtObject.addNull();
            }
            else insertPrepStmtObject.addString(userMasterVo.getMakerId());

            if (CommonFunction.checkNull(userMasterVo.getMakerDate()).equalsIgnoreCase(""))
            {
              insertPrepStmtObject.addNull();
            }
            else insertPrepStmtObject.addString(userMasterVo.getMakerDate());

            insertPrepStmtObject.setSql(bufInsSql.toString());

            updatelist.add(insertPrepStmtObject);
          }
          status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
          logger.info(new StringBuilder().append("In updateUserLevel......................").append(status).toString());
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return status;
  }

  public boolean insertUserBranchMaster(Object ob, String[] branch)
  {
    UserBranchMasterVo userBranchMasterVo = (UserBranchMasterVo)ob;
    boolean status = false;
    logger.info(new StringBuilder().append("In insertUserBranchMaster..........").append(userBranchMasterVo.getUserBranchStatus()).toString());

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = null;
    String stat = "X";
    try
    {
      String query = new StringBuilder().append("SELECT USER_ID FROM SEC_USER_BRANCH_DTL WHERE USER_ID='").append(userBranchMasterVo.getLbxUserId().trim()).append("' ").toString();

      logger.info(new StringBuilder().append("In insertUserBranchMaster.....................................Dao Impl").append(query).toString());

      boolean st = ConnectionDAO.checkStatus(query);

      if (!st) {
        if ((userBranchMasterVo.getUserBranchStatus() != null) && (userBranchMasterVo.getUserBranchStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info("In insert User Branch Master ");

        for (int i = 0; i < branch.length; i++)
        {
          insertPrepStmtObject = new PrepStmtObject();
          StringBuffer bufInsSql = new StringBuffer();
          bufInsSql.append("INSERT INTO SEC_USER_BRANCH_DTL(USER_ID,BRANCH_ID,REC_STATUS,MAKER_ID,MAKER_DATE)");

          bufInsSql.append(" values ( ");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

          if (CommonFunction.checkNull(userBranchMasterVo.getLbxUserId()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(userBranchMasterVo.getLbxUserId().toUpperCase());

          if (CommonFunction.checkNull(branch[i]).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(branch[i]);

          if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(stat);
          }
          if (CommonFunction.checkNull(userBranchMasterVo.getMakerId()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(userBranchMasterVo.getMakerId());

          if (CommonFunction.checkNull(userBranchMasterVo.getMakerDate()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(userBranchMasterVo.getMakerDate());

          insertPrepStmtObject.setSql(bufInsSql.toString());
          logger.info(new StringBuilder().append("IN insertUserBranchMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

          qryList.add(insertPrepStmtObject);
        }
        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In insertUserBranchMaster......................").append(status).toString());
      }
      else
      {
        status = false;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList<UserBranchMasterVo> getUserBranchData() {
    ArrayList list = new ArrayList();
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In getUserBranchData()..............Dao Impl");
      String query = "SELECT USER_ID,(SELECT A.USER_NAME FROM SEC_USER_M A WHERE A.USER_ID=V.USER_ID ) AS USRE_DESC,BRANCH_ID,(SELECT B.BRANCH_DESC FROM COM_BRANCH_M B WHERE BRANCH_ID=V.BRANCH_ID ) AS BRANCH_DESC, if(REC_STATUS='A','Active','Inactive')as Status FROM SEC_USER_BRANCH_DTL V ORDER BY USER_ID";

      list = ConnectionDAO.sqlSelect(query);
      logger.info(new StringBuilder().append("getUserBranchData ").append(list.size()).toString());

      for (int i = 0; i < list.size(); i++) {
        logger.info(new StringBuilder().append("getUserBranchDataList ").append(list.get(i).toString()).toString());

        ArrayList data = (ArrayList)list.get(i);

        if (data.size() > 0) {
          UserBranchMasterVo userBranchMasterVo = new UserBranchMasterVo();
          userBranchMasterVo.setLbxUserId(CommonFunction.checkNull(data.get(0)).toString());

          userBranchMasterVo.setUserId(CommonFunction.checkNull(data.get(1)).toString());

          userBranchMasterVo.setLbxBranchId(CommonFunction.checkNull(data.get(2)).toString());

          userBranchMasterVo.setBranchId(CommonFunction.checkNull(data.get(3)).toString());

          userBranchMasterVo.setUserBranchStatus(CommonFunction.checkNull(data.get(4)).toString());

          detailList.add(userBranchMasterVo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return detailList;
  }

  public ArrayList<UserBranchMasterVo> searchUserBranchData(Object ob) {
    String userId = "";
    String branchId = "";
    ArrayList searchlist = new ArrayList();
    UserBranchMasterVo userBranchMasterVo = (UserBranchMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchUserBranchData().....................................Dao Impl");

      userId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(userBranchMasterVo.getLbxUserSearchId())).trim();

      branchId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(userBranchMasterVo.getLbxBranchSearchId())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("SELECT USER_ID,(SELECT A.USER_NAME FROM SEC_USER_M A WHERE A.USER_ID=V.USER_ID ) AS USRE_DESC,BRANCH_ID,(SELECT B.BRANCH_DESC FROM COM_BRANCH_M B WHERE BRANCH_ID=V.BRANCH_ID ) AS BRANCH_DESC, if(REC_STATUS='A','Active','Inactive')as Status FROM SEC_USER_BRANCH_DTL V ");

      if ((!userId.equalsIgnoreCase("")) && (!branchId.equalsIgnoreCase("")))
      {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_ID='").append(userId).append("' AND BRANCH_ID='").append(branchId).append("'").toString());
      }

      if (!userId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_ID='").append(userId).append("' ").toString());
      }

      if (!branchId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE BRANCH_ID = '").append(branchId).append("' ").toString());
      }
      bufInsSql.append(" ORDER BY USER_ID");
      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN searchUserBranchData() search query1 ### ").append(bufInsSql.toString()).toString());

      logger.info(new StringBuilder().append("searchUserBranchData ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("searchUserBranchDataList ").append(searchlist.get(i).toString()).toString());

        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          UserBranchMasterVo userBranchMVo = new UserBranchMasterVo();

          userBranchMVo.setUserIdModify(new StringBuilder().append("<a href=userBranchMasterSearch.do?method=openEditUserBranch&lbxUserSearchId=").append(CommonFunction.checkNull(data.get(0)).toString()).append("&lbxBranchId=").append(CommonFunction.checkNull(data.get(2)).toString()).append(">").append(CommonFunction.checkNull(data.get(1)).toString()).append("</a>").toString());

          userBranchMVo.setLbxUserId(CommonFunction.checkNull(data.get(0)).toString());

          userBranchMVo.setUserId(CommonFunction.checkNull(data.get(1)).toString());

          userBranchMVo.setLbxBranchId(CommonFunction.checkNull(data.get(2)).toString());

          userBranchMVo.setBranchId(CommonFunction.checkNull(data.get(3)).toString());

          userBranchMVo.setUserBranchStatus(CommonFunction.checkNull(data.get(4)).toString());

          detailList.add(userBranchMVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public ArrayList<UserBranchMasterVo> searchUserBranch() {
    ArrayList searchlist = new ArrayList();
    ArrayList branchlList = new ArrayList();
    try
    {
      logger.info("In searchUserBranch().....................................Dao Impl");

      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("SELECT BRANCH_ID,BRANCH_DESC FROM COM_BRANCH_M");

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN searchUserBranch() search query1 ### ").append(bufInsSql.toString()).toString());

      logger.info(new StringBuilder().append("searchUserBranch ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("searchUserBranchList ").append(searchlist.get(i).toString()).toString());

        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          UserBranchMasterVo userBranchMVo = new UserBranchMasterVo();
          userBranchMVo.setBranchId(CommonFunction.checkNull(data.get(0)).toString());

          userBranchMVo.setBranchDesc(CommonFunction.checkNull(data.get(1)).toString());

          branchlList.add(userBranchMVo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return branchlList;
  }

  public ArrayList<UserBranchMasterVo> searchUserBranchDescEdit(String userId)
  {
    ArrayList searchlist = new ArrayList();
    UserBranchMasterVo userBranchMasterVo = new UserBranchMasterVo();
    ArrayList branchDescListEdit = new ArrayList();
    try
    {
      logger.info("In searchUserBranch().....................................Dao Impl");

      StringBuffer bufInsSql = new StringBuffer();

      bufInsSql.append(new StringBuilder().append(" SELECT BRANCH_ID,BRANCH_DESC FROM COM_BRANCH_M WHERE BRANCH_ID IN(SELECT BRANCH_ID FROM SEC_USER_BRANCH_DTL WHERE USER_ID='").append(userId).append("')").toString());

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN searchUserBranchDesc() search query1 ### ").append(bufInsSql.toString()).toString());

      logger.info(new StringBuilder().append("searchUserBranchDesc ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("searchUserBranchDescList ").append(searchlist.get(i).toString()).toString());

        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          UserBranchMasterVo userBranchMVo = new UserBranchMasterVo();
          userBranchMVo.setBranchId(CommonFunction.checkNull(data.get(0)).toString());

          userBranchMVo.setBranchDesc(CommonFunction.checkNull(data.get(1)).toString());

          branchDescListEdit.add(userBranchMVo);
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return branchDescListEdit;
  }

  public ArrayList<UserBranchMasterVo> searchUserBranchDesc(String userId)
  {
    ArrayList searchlist = new ArrayList();
    UserBranchMasterVo userBranchMasterVo = new UserBranchMasterVo();
    ArrayList branchDescList = new ArrayList();
    try
    {
      logger.info("In searchUserBranch().....................................Dao Impl");

      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append(new StringBuilder().append("SELECT B.BRANCH_ID,B.BRANCH_DESC  FROM SEC_USER_BRANCH_DTL A, COM_BRANCH_M B WHERE A.BRANCH_ID=B.BRANCH_ID AND USER_ID='").append(userId).append("'").toString());

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN searchUserBranchDesc() search query1 ### ").append(bufInsSql.toString()).toString());

      logger.info(new StringBuilder().append("searchUserBranchDesc ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("searchUserBranchDescList ").append(searchlist.get(i).toString()).toString());

        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          UserBranchMasterVo userBranchMVo = new UserBranchMasterVo();
          userBranchMVo.setBranchId(CommonFunction.checkNull(data.get(0)).toString());

          userBranchMVo.setBranchDesc(CommonFunction.checkNull(data.get(1)).toString());

          branchDescList.add(userBranchMVo);
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return branchDescList;
  }

  public boolean updateUserBranchData(Object ob, String[] branch) {
    UserBranchMasterVo userBranchMasterVo = (UserBranchMasterVo)ob;
    String userId = userBranchMasterVo.getLbxUserId();
    logger.info(new StringBuilder().append("user id ").append(userId).toString());
    logger.info(new StringBuilder().append("vo.getUserBranchStatus():-").append(userBranchMasterVo.getUserBranchStatus()).toString());

    ArrayList updatelist = new ArrayList();
    ArrayList qryList = null;
    ArrayList insertList = null;
    PrepStmtObject insertPrepStmtObject = null;

    boolean status = false;
    String stat = "";
    try
    {
      qryList = new ArrayList();
      insertList = new ArrayList();

      String query = new StringBuilder().append("DELETE FROM SEC_USER_BRANCH_DTL WHERE USER_ID='").append(userId).append("'").toString();

      logger.info(new StringBuilder().append("In insertUserBranchMaster.....................................Dao Impl").append(query).toString());

      qryList.add(query);
      status = ConnectionDAO.sqlInsUpdDelete(qryList);

      if ((userBranchMasterVo.getUserBranchStatus() != null) && (userBranchMasterVo.getUserBranchStatus().equals("on")))
      {
        stat = "A";
      }
      else stat = "X";

      for (int i = 0; i < branch.length; i++)
      {
        insertPrepStmtObject = new PrepStmtObject();
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("INSERT INTO SEC_USER_BRANCH_DTL(USER_ID,BRANCH_ID,REC_STATUS,MAKER_ID,MAKER_DATE)");

        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND))").toString());

        if (CommonFunction.checkNull(userBranchMasterVo.getLbxUserId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(userBranchMasterVo.getLbxUserId().toUpperCase());

        if (CommonFunction.checkNull(branch[i]).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(branch[i]);
        }
        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(userBranchMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(userBranchMasterVo.getMakerId());
        if (CommonFunction.checkNull(userBranchMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(userBranchMasterVo.getMakerDate());

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN insertUserBranchMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        insertList.add(insertPrepStmtObject);
      }
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(insertList);
      logger.info(new StringBuilder().append("In insertUserBranchMaster......................").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return status;
  }

  public boolean insertUserAccessMaster(Object ob)
  {
    UserAccessMasterVo userAccessMasterVo = (UserAccessMasterVo)ob;
    boolean status = false;
    logger.info(new StringBuilder().append("In insertUserAccessMaster..........").append(userAccessMasterVo.getUserAccessStatus()).toString());

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String query = new StringBuilder().append("SELECT USER_ID,MODULE_ID FROM SEC_USER_ACCESS_M WHERE USER_ID='").append(userAccessMasterVo.getLbxUserId().trim()).append("' AND MODULE_ID='").append(userAccessMasterVo.getLbxModule().trim()).append("'").toString();

    logger.info(new StringBuilder().append("In insertUserAccessMaster.....................................Dao Impl").append(query).toString());

    boolean st = ConnectionDAOforEJB.checkStatus(query);
    try
    {
      if (!st) {
        if ((userAccessMasterVo.getUserAccessStatus() != null) && (userAccessMasterVo.getUserAccessStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info("In insert User Access Master ");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("INSERT INTO SEC_USER_ACCESS_M(USER_ID,ROLE_ID,MODULE_ID,REC_STATUS,MAKER_ID,MAKER_DATE)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());
        if (CommonFunction.checkNull(userAccessMasterVo.getLbxUserId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(userAccessMasterVo.getLbxUserId().toUpperCase());
        }
        if (CommonFunction.checkNull(userAccessMasterVo.getLbxRoleId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(userAccessMasterVo.getLbxRoleId());
        }
        if (CommonFunction.checkNull(userAccessMasterVo.getLbxModule()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(userAccessMasterVo.getLbxModule().toUpperCase());
        }
        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(userAccessMasterVo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(userAccessMasterVo.getMakerId());
        }
        if (CommonFunction.checkNull(userAccessMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(userAccessMasterVo.getMakerDate());

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN insertUserAccessMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In insertUserAccessMaster......................").append(status).toString());
      }
      else
      {
        status = false;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList<UserAccessMasterVo> getUserAccessData() {
    ArrayList list = new ArrayList();
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In getUserAccessData()..............Dao Impl");
      String query = "SELECT USERACCESS_ID,USER_ID,(SELECT A.USER_NAME FROM SEC_USER_M A WHERE A.USER_ID=V.USER_ID ) AS USRE_DESC,ROLE_ID,(SELECT B.ROLE_DESC FROM SEC_ROLE_M B WHERE ROLE_ID=V.ROLE_ID ) AS ROLE_DESC,MODULE_ID,(SELECT C.MODULE_DESC FROM SEC_MODULE_M C WHERE MODULE_ID=V.MODULE_ID ) AS MODULE_DESC, if(REC_STATUS='A','Active','Inactive')as Status FROM SEC_USER_ACCESS_M V ORDER BY USER_ID";

      list = ConnectionDAO.sqlSelect(query);
      logger.info(new StringBuilder().append("getUserAccessData ").append(list.size()).toString());

      for (int i = 0; i < list.size(); i++) {
        logger.info(new StringBuilder().append("getUserAccessDataList ").append(list.get(i).toString()).toString());

        ArrayList data = (ArrayList)list.get(i);

        if (data.size() > 0) {
          UserAccessMasterVo userAccessMasterVo = new UserAccessMasterVo();
          userAccessMasterVo.setUserAccessId(CommonFunction.checkNull(data.get(0)).toString());

          userAccessMasterVo.setLbxUserId(CommonFunction.checkNull(data.get(1)).toString());

          userAccessMasterVo.setUserId(CommonFunction.checkNull(data.get(2)).toString());

          userAccessMasterVo.setLbxRoleId(CommonFunction.checkNull(data.get(3)).toString());

          userAccessMasterVo.setRoleId(CommonFunction.checkNull(data.get(4)).toString());

          userAccessMasterVo.setLbxModule(CommonFunction.checkNull(data.get(5)).toString());

          userAccessMasterVo.setModuleId(CommonFunction.checkNull(data.get(6)).toString());

          userAccessMasterVo.setUserAccessStatus(CommonFunction.checkNull(data.get(7)).toString());

          detailList.add(userAccessMasterVo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return detailList;
  }

  public ArrayList<UserAccessMasterVo> searchUserAccessData(Object ob) {
    String userId = "";
    String roleId = "";
    String moduleId = "";
    String userAccessId = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    ArrayList searchlist = new ArrayList();
    UserAccessMasterVo userAccessMasterVo = (UserAccessMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchUserAccessData().....................................Dao Impl");
      userId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(userAccessMasterVo.getLbxUserSearchId())).trim();
      roleId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(userAccessMasterVo.getLbxRoleSearchId())).trim();
      moduleId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(userAccessMasterVo.getLbxModuleSearch())).trim();
      userAccessId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(userAccessMasterVo.getUserAccessId())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append(" SELECT USERACCESS_ID,USER_ID,(SELECT A.USER_NAME FROM SEC_USER_M A WHERE A.USER_ID=V.USER_ID ) AS USRE_DESC,");
      bufInsSql.append(" ROLE_ID,(SELECT B.ROLE_DESC FROM SEC_ROLE_M B WHERE ROLE_ID=V.ROLE_ID ) AS ROLE_DESC,");
      bufInsSql.append(" MODULE_ID,(SELECT C.MODULE_DESC FROM SEC_MODULE_M C WHERE MODULE_ID=V.MODULE_ID ) AS MODULE_DESC,");
      bufInsSql.append(" if(REC_STATUS='A','Active','Inactive')as Status FROM SEC_USER_ACCESS_M V ");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM SEC_USER_ACCESS_M V ");

      if ((!userId.equalsIgnoreCase("")) && (!moduleId.equalsIgnoreCase("")) && (!roleId.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_ID='").append(userId).append("' AND MODULE_ID ='").append(moduleId).append("' AND ROLE_ID='").append(roleId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_ID='").append(userId).append("' AND MODULE_ID ='").append(moduleId).append("' AND ROLE_ID='").append(roleId).append("'").toString());
      }
      else if ((!roleId.equalsIgnoreCase("")) && (!moduleId.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE ROLE_ID='").append(roleId).append("' AND MODULE_ID='").append(moduleId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE ROLE_ID='").append(roleId).append("' AND MODULE_ID='").append(moduleId).append("'").toString());
      }
      else if ((!userId.equalsIgnoreCase("")) && (!roleId.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_ID='").append(userId).append("' AND ROLE_ID='").append(roleId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_ID='").append(userId).append("' AND ROLE_ID='").append(roleId).append("' ").toString());
      }
      else if ((!userId.equalsIgnoreCase("")) && (!moduleId.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_ID='").append(userId).append("' AND MODULE_ID='").append(moduleId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_ID='").append(userId).append("' AND MODULE_ID='").append(moduleId).append("'").toString());
      }
      else if (!userId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_ID='").append(userId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_ID='").append(userId).append("' ").toString());
      }
      else if (!roleId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE ROLE_ID='").append(roleId).append("'  ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE ROLE_ID='").append(roleId).append("'  ").toString());
      }
      else if (!moduleId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE MODULE_ID='").append(moduleId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE MODULE_ID='").append(moduleId).append("' ").toString());
      }
      else if (!userAccessId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE USERACCESS_ID='").append(userAccessId).append("'  ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USERACCESS_ID='").append(userAccessId).append("'  ").toString());
      }

      bufInsSql.append(" ORDER BY USER_ID");
      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((userId.trim() == null) && (roleId.trim() == null) && (moduleId.trim() == null) && (userAccessId.trim() == null)) || ((userId.trim().equalsIgnoreCase("")) && (roleId.trim().equalsIgnoreCase("")) && (moduleId.trim().equalsIgnoreCase("")) && (userAccessId.trim().equalsIgnoreCase(""))) || (userAccessMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(userAccessMasterVo.getCurrentPageLink()).toString());
        if (userAccessMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (userAccessMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchUserAccessData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("searchUserAccessData ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          UserAccessMasterVo UserAccessMVo = new UserAccessMasterVo();

          UserAccessMVo.setUserAccessIdModify(new StringBuilder().append("<a href=userAccessMasterSearch.do?method=openEditUserAccess&userAccessId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          UserAccessMVo.setUserAccessId(CommonFunction.checkNull(data.get(0)).toString());
          UserAccessMVo.setLbxUserId(CommonFunction.checkNull(data.get(1)).toString());
          UserAccessMVo.setUserId(CommonFunction.checkNull(data.get(2)).toString());
          UserAccessMVo.setLbxRoleId(CommonFunction.checkNull(data.get(3)).toString());
          UserAccessMVo.setRoleId(CommonFunction.checkNull(data.get(4)).toString());
          UserAccessMVo.setLbxModule(CommonFunction.checkNull(data.get(5)).toString());
          UserAccessMVo.setModuleId(CommonFunction.checkNull(data.get(6)).toString());
          UserAccessMVo.setUserAccessStatus(CommonFunction.checkNull(data.get(7)).toString());
          UserAccessMVo.setTotalRecordSize(count);
          detailList.add(UserAccessMVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public int countQuestion(Object ob)
  {
    ChangePasswordMasterVo changePasswordMasterVo = (ChangePasswordMasterVo)ob;
    String userId = changePasswordMasterVo.getLbxUserId();

    ArrayList updatelist = new ArrayList();

    int count = 0;
    try
    {
      String query = new StringBuilder().append("SELECT count(1) FROM SEC_USER_M WHERE SECURITY_QUESTION1='").append(changePasswordMasterVo.getQues1()).append("' and SECURITY_QUESTION2='").append(changePasswordMasterVo.getQues2()).append("'").append("and SECURITY_QUESTION2='").append(changePasswordMasterVo.getQues1()).append("' and SECURITY_QUESTION2='").append(changePasswordMasterVo.getQues1()).append("' and USER_ID='").append(userId).append("'").toString();

      logger.info(new StringBuilder().append("In countChangePassword......Dao Impl").append(query).toString());
      String countStr = ConnectionDAOforEJB.singleReturn(query);
      count = Integer.parseInt(countStr);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return count;
  }

  public boolean updateUserAccessData(Object ob)
  {
    UserAccessMasterVo userAccessMasterVo = (UserAccessMasterVo)ob;
    String userId = userAccessMasterVo.getLbxUserId();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    logger.info(new StringBuilder().append("vo.getUserAccessStatus():-").append(userAccessMasterVo.getUserAccessStatus()).toString());

    ArrayList updatelist = new ArrayList();
    String roleId = CommonFunction.checkNull(userAccessMasterVo.getLbxRoleId());
    String moduleId = CommonFunction.checkNull(userAccessMasterVo.getLbxModule());
    boolean status = false;
    String moduleStatus = "A";
    String stat = "";
    try {
      if ((userAccessMasterVo.getUserAccessStatus() != null) && (userAccessMasterVo.getUserAccessStatus().equals("on")))
      {
        stat = "A";
        String query = new StringBuilder().append("SELECT ifnull(rec_status,'X') FROM SEC_ROLE_M  WHERE ROLE_ID='").append(roleId).append("' AND MODULE_ID='").append(moduleId).append("' ").toString();
        moduleStatus = ConnectionDAOforEJB.singleReturn(query);
      }
      else {
        stat = "X";
      }

      if (CommonFunction.checkNull(moduleStatus).equalsIgnoreCase("A"))
      {
        userAccessMasterVo.setModuleStatus("A");
        StringBuffer bufInsSql = new StringBuffer();

        logger.info(new StringBuilder().append("In updateUserAccessData...................Dao Impl roleId ").append(roleId).append(" moduleId ").append(moduleId).append(" userAccessID ").append(userAccessMasterVo.getUserAccessId()).toString());

        bufInsSql.append(new StringBuilder().append("UPDATE SEC_USER_ACCESS_M SET ROLE_ID=?,MODULE_ID=?,REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) WHERE USERACCESS_ID=?").toString());

        if (CommonFunction.checkNull(userAccessMasterVo.getLbxRoleId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(userAccessMasterVo.getLbxRoleId());

        if (CommonFunction.checkNull(userAccessMasterVo.getLbxModule()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(userAccessMasterVo.getLbxModule().toUpperCase());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(userAccessMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(userAccessMasterVo.getMakerId());
        if (CommonFunction.checkNull(userAccessMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(userAccessMasterVo.getMakerDate());

        if (CommonFunction.checkNull(userAccessMasterVo.getUserAccessId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(userAccessMasterVo.getUserAccessId());

        insertPrepStmtObject.setSql(bufInsSql.toString());

        updatelist.add(insertPrepStmtObject);

        logger.info(new StringBuilder().append("In updateUserAccessData ").append(bufInsSql.toString()).toString());

        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
      } else {
        userAccessMasterVo.setModuleStatus("X");
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public int countChangePassword(Object ob)
  {
    ChangePasswordMasterVo changePasswordMasterVo = (ChangePasswordMasterVo)ob;
    String userId = changePasswordMasterVo.getLbxUserId();

    ArrayList updatelist = new ArrayList();

    int count = 0;
    try
    {
      String query = new StringBuilder().append("SELECT count(USER_PASSWORD) FROM SEC_USER_M WHERE USER_PASSWORD='").append(changePasswordMasterVo.getOldPassword()).append("' and USER_ID='").append(userId).append("'").toString();

      logger.info(new StringBuilder().append("In countChangePassword......Dao Impl").append(query).toString());
      String countStr = ConnectionDAOforEJB.singleReturn(query);
      count = Integer.parseInt(countStr);
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return count;
  }

  public boolean updateChangePassword(Object ob) {
    ChangePasswordMasterVo changePasswordMasterVo = (ChangePasswordMasterVo)ob;
    String userId = changePasswordMasterVo.getLbxUserId();

    ArrayList updatelist = new ArrayList();
    ArrayList updatePasslist = new ArrayList();
    boolean status = false;
    try
    {
      String query = new StringBuilder().append("SELECT count(1) FROM SEC_USER_M WHERE USER_ID='").append(userId).append("' AND (USER_PASSWORD='").append(changePasswordMasterVo.getNewPassword()).append("' OR USER_LAST_PASSWORD_1='").append(changePasswordMasterVo.getNewPassword()).append("' OR USER_LAST_PASSWORD_2='").append(changePasswordMasterVo.getNewPassword()).append("'OR USER_LAST_PASSWORD_3='").append(changePasswordMasterVo.getNewPassword()).append("' OR USER_LAST_PASSWORD_4='").append(changePasswordMasterVo.getNewPassword()).append("' OR USER_LAST_PASSWORD_5='").append(changePasswordMasterVo.getNewPassword()).append("')").toString();

      logger.info(new StringBuilder().append("In updateUserAccessData......Dao Impl").append(query).toString());
      String countStr = ConnectionDAOforEJB.singleReturn(query);
      int count = Integer.parseInt(countStr);
      if (count == 0)
      {
        String passQuery = new StringBuilder().append("SELECT USER_PASSWORD,USER_LAST_PASSWORD_1,USER_LAST_PASSWORD_2,USER_LAST_PASSWORD_3,USER_LAST_PASSWORD_4,USER_LAST_PASSWORD_5 FROM SEC_USER_M WHERE USER_ID='").append(userId).append("'").toString();

        logger.info(new StringBuilder().append("passQuery").append(passQuery).toString());
        updatePasslist = ConnectionDAOforEJB.sqlSelect(passQuery);
        logger.info(new StringBuilder().append("IN updateUserPass() update Password query1 ### ").append(passQuery).toString());

        logger.info(new StringBuilder().append("updateUserPass ").append(updatePasslist.size()).toString());
        for (int i = 0; i < updatePasslist.size(); i++) {
          logger.info(new StringBuilder().append("updateUserPassList ").append(updatePasslist.get(i).toString()).toString());

          ArrayList data = (ArrayList)updatePasslist.get(i);
          if (data.size() > 0) {
            String userPass = CommonFunction.checkNull(data.get(0)).toString();

            String userPass1 = CommonFunction.checkNull(data.get(1)).toString();

            String userPass2 = CommonFunction.checkNull(data.get(2)).toString();

            String userPass3 = CommonFunction.checkNull(data.get(3)).toString();

            String userPass4 = CommonFunction.checkNull(data.get(4)).toString();

            String userPass5 = CommonFunction.checkNull(data.get(5)).toString();

            logger.info("In updateUserData.....................................Dao Impl");

            String query1 = new StringBuilder().append("UPDATE SEC_USER_M SET FORCED_PASSWORD_FLAG='N',LAST_PASSWORD_DATE=sysdate(),USER_LAST_PASSWORD_1='").append(userPass).append("',USER_LAST_PASSWORD_2='").append(userPass1).append("',USER_LAST_PASSWORD_3='").append(userPass2).append("',USER_LAST_PASSWORD_4='").append(userPass3).append("',USER_LAST_PASSWORD_5='").append(userPass4).append("',USER_PASSWORD='").append(changePasswordMasterVo.getNewPassword()).append("', ACCOUNT_STATUS='U' WHERE USER_ID='").append(userId).append("'").toString();

            updatelist.add(query1);
            logger.info(new StringBuilder().append("In getListOfValues").append(query1).toString());
            status = ConnectionDAOforEJB.sqlInsUpdDelete(updatelist);
          }
        }
      }
      else if (count >= 1) {
        status = false;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList modifyGenericMasterDetailsDao(Object ob)
  {
    GenericMasterVo genericMasterVo = (GenericMasterVo)ob;
    ArrayList searchlist = new ArrayList();
    String genericKey = "";
    String value = "";
    String parentValue = "";
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In GenericMasterDetailsDao()..........inside ejb server file..........Dao Impl");
      StringBuffer bufInsSql = new StringBuffer();
      genericKey = CommonFunction.checkNull(StringEscapeUtils.escapeSql(genericMasterVo.getGenericSearchKey()));
      parentValue = CommonFunction.checkNull(StringEscapeUtils.escapeSql(genericMasterVo.getParentValue()));
      value = CommonFunction.checkNull(StringEscapeUtils.escapeSql(genericMasterVo.getGenericval()));

      logger.info(new StringBuilder().append("genericMasterVo.getGenericSearchKey()........").append(genericMasterVo.getLbxGenericId()).toString());
      logger.info(new StringBuilder().append("genericKey........").append(genericKey).toString());
      logger.info(new StringBuilder().append("parentValue........").append(parentValue).toString());
      logger.info(new StringBuilder().append("value........").append(value).toString());

      bufInsSql.append("SELECT GENERIC_KEY,(SELECT B.KEY1_DESCRIPTION FROM generic_master_keys B WHERE  B.GENERIC_KEY=A.GENERIC_KEY  ");
      bufInsSql.append(new StringBuilder().append(" AND IFNULL(PARENT_KEY,'')='").append(parentValue).append("'").toString());
      bufInsSql.append(") AS GENERIC_DESC,IFNULL(PARENT_VALUE,'') AS PARENT_VALUE ,VALUE,DESCRIPTION,REC_STATUS ");
      bufInsSql.append(new StringBuilder().append(" FROM generic_master A WHERE GENERIC_KEY='").append(genericKey).append("'").toString());
      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(parentValue)).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" and PARENT_VALUE='").append(parentValue).append("' ").toString());
      }
      bufInsSql.append(new StringBuilder().append(" and VALUE='").append(value).append("' ORDER BY GENERIC_KEY ").toString());
      logger.info(new StringBuilder().append("select query is....").append(bufInsSql.toString()).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("modifyGenericDaoData size is....").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("modifyGenericDaoList ").append(searchlist.get(i).toString()).toString());
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          genericMasterVo.setGenericKeyModify(new StringBuilder().append("<a href=genericMasterSearchDispatch.do?method=modifyDetails&genericSearchKey=").append(CommonFunction.checkNull(data.get(0)).trim()).append("&parentValue=").append(CommonFunction.checkNull(data.get(2)).trim()).append("&value=").append(CommonFunction.checkNull(data.get(3))).append(">").append(CommonFunction.checkNull(data.get(0)).trim()).append("</a>").toString());
          genericMasterVo.setLbxGenericId(CommonFunction.checkNull(data.get(0)).toString());
          genericMasterVo.setGenericKey(CommonFunction.checkNull(data.get(1)).toString());
          genericMasterVo.setParentValue(CommonFunction.checkNull(data.get(2)).toString());
          genericMasterVo.setGenericval(CommonFunction.checkNull(data.get(3)).toString());
          genericMasterVo.setDescription(CommonFunction.checkNull(data.get(4)).toString());
          genericMasterVo.setStatus(CommonFunction.checkNull(data.get(5)).toString());
          detailList.add(genericMasterVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean saveModifyGenericMasterDetailsDao(Object ob)
  {
    String stat = "X";
    boolean status = false;
    GenericMasterVo genericMasterVo = (GenericMasterVo)ob;

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

    if ((genericMasterVo.getStatus() != null) && (genericMasterVo.getStatus().equals("on")))
    {
      stat = "A";
    }
    else stat = "X";

    try
    {
      logger.info("In saveModifyGenericMasterDetailsDao() method........inside ejb server file..........Dao Impl");
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append(" UPDATE generic_master SET DESCRIPTION=?, ");
      bufInsSql.append(new StringBuilder().append(" REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) ").toString());
      bufInsSql.append(" WHERE GENERIC_KEY=? ");
      bufInsSql.append(" AND PARENT_VALUE=? ");
      bufInsSql.append(" AND VALUE=? ");

      if (CommonFunction.checkNull(genericMasterVo.getDescription()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(genericMasterVo.getDescription().trim());

      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat);
      }
      if (CommonFunction.checkNull(genericMasterVo.getMakerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(genericMasterVo.getMakerId());
      if (CommonFunction.checkNull(genericMasterVo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(genericMasterVo.getMakerDate());

      if (CommonFunction.checkNull(genericMasterVo.getLbxGenericId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(genericMasterVo.getLbxGenericId().toUpperCase().trim());

      if (CommonFunction.checkNull(genericMasterVo.getParentValue()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(genericMasterVo.getParentValue().trim());

      if (CommonFunction.checkNull(genericMasterVo.getGenericval()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(genericMasterVo.getGenericval().toUpperCase());

      insertPrepStmtObject.setSql(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN saveModifyGenericMasterDetailsDao() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

      qryList.add(insertPrepStmtObject);
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In saveModifyGenericMasterDetailsDao status is.................").append(status).toString());

      bufInsSql = null;
      insertPrepStmtObject = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public String insertGenericMaster(Object ob)
  {
    GenericMasterVo genericMasterVo = (GenericMasterVo)ob;
    boolean status = false;
    logger.info(new StringBuilder().append("In saveGenericMaster........inside ejb server file..........Dao Impl").append(genericMasterVo.getGenericKey()).toString());

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    StringBuffer bufInsSql1 = new StringBuffer();
    bufInsSql1.append(new StringBuilder().append("Select GENERIC_KEY,PARENT_VALUE,VALUE from generic_master where GENERIC_KEY= '").append(StringEscapeUtils.escapeSql(genericMasterVo.getLbxGenericId().trim())).append("' ").toString());

    if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(genericMasterVo.getParentValue())).trim().equalsIgnoreCase("")) {
      bufInsSql1.append(new StringBuilder().append(" and PARENT_VALUE='").append(StringEscapeUtils.escapeSql(genericMasterVo.getParentValue().trim())).append("' ").toString());
    }
    bufInsSql1.append(new StringBuilder().append("  AND VALUE='").append(genericMasterVo.getGenericval().trim()).append("'").toString());

    boolean st = ConnectionDAOforEJB.checkStatus(bufInsSql1.toString());
    logger.info(new StringBuilder().append("st -----").append(st).toString());
    logger.info(new StringBuilder().append("query -----").append(bufInsSql1.toString()).toString());
    String dataval = "";
    try
    {
      if (!st) {
        if ((genericMasterVo.getStatus() != null) && (genericMasterVo.getStatus().equalsIgnoreCase("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info("In insert Generic  master");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("INSERT INTO generic_master(GENERIC_KEY,PARENT_VALUE,VALUE,DESCRIPTION,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

        if (CommonFunction.checkNull(genericMasterVo.getLbxGenericId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(genericMasterVo.getLbxGenericId().toUpperCase().trim());

        if (CommonFunction.checkNull(genericMasterVo.getParentValue()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(genericMasterVo.getParentValue().trim());

        if (CommonFunction.checkNull(genericMasterVo.getGenericval()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(genericMasterVo.getGenericval().toUpperCase().trim());

        if (CommonFunction.checkNull(genericMasterVo.getDescription()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(genericMasterVo.getDescription().trim());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(stat);
        if (CommonFunction.checkNull(genericMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(genericMasterVo.getMakerId());

        if (CommonFunction.checkNull(genericMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(genericMasterVo.getMakerDate());

        if (CommonFunction.checkNull(genericMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(genericMasterVo.getMakerId());

        if (CommonFunction.checkNull(genericMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(genericMasterVo.getMakerDate());

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN genericMasterMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In genericMasterMaster status.....................").append(status).toString());
        if (status)
        {
          dataval = "datasave";
        }
        else dataval = "notsave"; 
      }
      else
      {
        dataval = "dataexist";
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return dataval;
  }

  public ArrayList searchGenericMasterDao(Object ob)
  {
    String genericKey = "";
    String description = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    ArrayList searchlist = new ArrayList();
    GenericMasterVo genericMasterVo = (GenericMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchGenericMasterDao..........inside ejb server file..........Dao Impl");
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      genericKey = StringEscapeUtils.escapeSql(CommonFunction.checkNull(genericMasterVo.getGenericSearchKey())).trim();
      description = StringEscapeUtils.escapeSql(CommonFunction.checkNull(genericMasterVo.getSearchDescription())).trim();

      bufInsSql.append("select DISTINCT A.GENERIC_KEY, B.KEY1_DESCRIPTION ,PARENT_VALUE,VALUE,DESCRIPTION,if(REC_STATUS='A','Active','Inactive')as status FROM generic_master A JOIN  generic_master_keys B on B.GENERIC_KEY=A.GENERIC_KEY ");
      bufInsSqlTempCount.append("SELECT COUNT(1) FROM (select DISTINCT A.GENERIC_KEY, B.KEY1_DESCRIPTION ,PARENT_VALUE,VALUE,DESCRIPTION,if(REC_STATUS='A','Active','Inactive')as status FROM generic_master A JOIN  generic_master_keys B on B.GENERIC_KEY=A.GENERIC_KEY ");

      if ((!genericKey.equalsIgnoreCase("")) && (!description.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE DESCRIPTION like '%").append(description).append("%' AND A.GENERIC_KEY like '%").append(genericKey).append("%'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE DESCRIPTION like '%").append(description).append("%' AND A.GENERIC_KEY like '%").append(genericKey).append("%' )AS bb").toString());
      }
      else if (!description.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE DESCRIPTION LIKE '%").append(description).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE DESCRIPTION LIKE '%").append(description).append("%' )AS bb").toString());
      }
      else if (!genericKey.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE A.GENERIC_KEY like '%").append(genericKey).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE A.GENERIC_KEY like '%").append(genericKey).append("%' )AS bb").toString());
      }
      else
      {
        bufInsSqlTempCount.append(")AS bb");
      }
      bufInsSql.append(" ORDER BY A.GENERIC_KEY");
      logger.info(new StringBuilder().append("IN searchGenericMasterDao() search query1 ### ").append(bufInsSql.toString()).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((genericKey.trim() == null) && (description.trim() == null)) || ((genericKey.trim().equalsIgnoreCase("")) && (description.trim().equalsIgnoreCase(""))) || (genericMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(genericMasterVo.getCurrentPageLink()).toString());
        if (genericMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (genericMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      for (int i = 0; i < searchlist.size(); i++) {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          GenericMasterVo genericMVo = new GenericMasterVo();

          genericMVo.setGenericKeyModify(new StringBuilder().append("<a href=genericMasterSearchDispatch.do?method=modifyDetails&genericSearchKey=").append(CommonFunction.checkNull(data.get(0)).trim()).append("&parentValue=").append(CommonFunction.checkNull(data.get(2)).trim()).append("&value=").append(CommonFunction.checkNull(data.get(3))).append(">").append(CommonFunction.checkNull(data.get(0)).trim()).append("</a>").toString());

          genericMVo.setLbxGenericId(CommonFunction.checkNull(data.get(0)).toString());
          genericMVo.setGenericKey(CommonFunction.checkNull(data.get(1)).toString());
          genericMVo.setParentValue(CommonFunction.checkNull(data.get(2)).toString());
          genericMVo.setGenericval(CommonFunction.checkNull(data.get(3)).toString());
          genericMVo.setDescription(CommonFunction.checkNull(data.get(4)).toString());
          genericMVo.setStatus(CommonFunction.checkNull(data.get(5)).toString());
          genericMVo.setTotalRecordSize(count);
          detailList.add(genericMVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public ArrayList getProductCategory()
  {
    ArrayList list = new ArrayList();
    try {
      logger.info("In getProductCategory..........................DAOImpl");
      String query = "SELECT PRODUCT_CATEGORY,PRODUCT_CATEGORY_DESC FROM CR_PRODUCTCATEGORY_M WHERE REC_STATUS='A'";
      ProductMasterVo vo = null;
      logger.info(new StringBuilder().append("category query......").append(query).toString());
      ArrayList product = ConnectionDAOforEJB.sqlSelect(query);

      logger.info(new StringBuilder().append("get Product size").append(product.size()).toString());

      for (int i = 0; i < product.size(); i++) {
        logger.info(new StringBuilder().append("getProductCategory ").append(CommonFunction.checkNull(product.get(i)).toString()).toString());

        ArrayList data = (ArrayList)product.get(i);
        for (int k = 0; k < data.size(); k++) {
          logger.info(new StringBuilder().append("getproduct ").append(CommonFunction.checkNull(data.get(k)).toString()).toString());

          vo = new ProductMasterVo();
          vo.setCategory(data.get(0).toString());
          vo.setCategoryDesc(data.get(1).toString());
        }
        list.add(vo);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public boolean insertProductMaster(Object ob) {
    ProductMasterVo vo = (ProductMasterVo)ob;
    boolean status = false;
    logger.info(new StringBuilder().append("In insertProductMaster.....................................Dao Impl").append(vo.getRecStatus()).toString());
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String stat1 = "I";
    String stat2 = "N";
    String stat3 = "A";
    String stat4 = "Y";
    String query = new StringBuilder().append("select PRODUCT_ID from cr_product_m where PRODUCT_ID='").append(StringEscapeUtils.escapeSql(vo.getProductId().trim())).append("'").toString();
    logger.info(new StringBuilder().append("In insertProductMaster.....................................Dao Impl").append(query).toString());
    boolean st = ConnectionDAOforEJB.checkStatus(query);
    try {
      if (!st) {
        if ((vo.getRecStatus() != null) && (vo.getRecStatus().equals("on")))
          stat = "A";
        else {
          stat = "X";
        }

        if ((vo.getRevolvingFlag() != null) && (vo.getRevolvingFlag().equals("on")))
          stat2 = "Y";
        else {
          stat2 = "N";
        }

        logger.info(new StringBuilder().append("vo.getInterestAdvance()--------").append(vo.getInterestAdvance()).toString());
        if ((vo.getInterestAdvance() != null) && (vo.getInterestAdvance().equals("on")))
          stat4 = "Y";
        else {
          stat4 = "N";
        }
        logger.info("In insert Product master........");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("insert into cr_product_m(PRODUCT_ID,PRODUCT_DESC,PRODUCT_CATEGORY,REPAYMENT_TYPE,REVOLVING_FLAG,REC_STATUS,PRODUCT_DESC_L,ASSET_FLAG,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,DAYS_BASIS,DAYS_PER_YEAR,INSTL_ROUND_TYPE,INSTL_ROUNDING,INT_ROUND_TYPE,INT_ROUNDING,OPPORTUNITY_RATE,ONE_DEAL_ONE_LOAN,PRODUCT_LOAN_TYPE,ASSET_MANDATORY_AT_DEAL,INT_ADVANCE)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?)");

        if (CommonFunction.checkNull(vo.getProductId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getProductId().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getProductDes()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getProductDes().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getProductCategory()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getProductCategory().trim());
        }
        if (CommonFunction.checkNull(vo.getRepaymentType()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getRepaymentType());
        }
        if (CommonFunction.checkNull(stat2).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat2);
        }
        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(vo.getProductDes()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getProductDes().toUpperCase());
        }
        if (CommonFunction.checkNull(vo.getAssetFlag()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getAssetFlag());
        }
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerId());
        }
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerDate());
        }
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerId());
        }
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerDate());
        }
        if (CommonFunction.checkNull(vo.getDaysBasis()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getDaysBasis());
        }
        if (CommonFunction.checkNull(vo.getDaysPerYear()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getDaysPerYear());
        }
        if (CommonFunction.checkNull(vo.getInsRound()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getInsRound());
        }
        if (CommonFunction.checkNull(vo.getInsRounding()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getInsRounding());
        }
        if (CommonFunction.checkNull(vo.getIntRounType()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getIntRounType());
        }
        if (CommonFunction.checkNull(vo.getIntRounding()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getIntRounding());
        }

        if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(vo.getOpportunityRate()).trim()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(vo.getOpportunityRate()).trim()).toString());

        if (CommonFunction.checkNull(vo.getOneDealOneLoan()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getOneDealOneLoan());
        }

        if (CommonFunction.checkNull(vo.getProductLoanType()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getProductLoanType());
        }

        if (CommonFunction.checkNull(vo.getAssetMandatoryAtDeal()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getAssetMandatoryAtDeal());
        if (CommonFunction.checkNull(stat4).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(stat4);
        insertPrepStmtObject.setSql(bufInsSql.toString());

        logger.info(new StringBuilder().append("IN insertProductMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);

        StringBuffer mappQr = new StringBuffer();
        PrepStmtObject stmt = new PrepStmtObject();
        mappQr.append("insert into cr_user_product_mapping_m ");
        mappQr.append(" (USER_ID,PRODUCT_ID,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE) ");
        mappQr.append(new StringBuilder().append(" select USER_ID,'").append(CommonFunction.checkNull(vo.getProductId()).trim()).append("','A',").toString());
        mappQr.append(new StringBuilder().append(" '").append(CommonFunction.checkNull(vo.getMakerId()).trim()).append("',").toString());
        mappQr.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE('").append(CommonFunction.checkNull(vo.getMakerDate()).trim()).append("', '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        mappQr.append(new StringBuilder().append(" '").append(CommonFunction.checkNull(vo.getMakerId()).trim()).append("',").toString());
        mappQr.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE('").append(CommonFunction.checkNull(vo.getMakerDate()).trim()).append("', '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) ").toString());
        mappQr.append(" from sec_user_m where PRODUCT_ACCESS='A' ");
        stmt.setSql(mappQr.toString());
        qryList.add(stmt);

        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveProductData......................").append(status).toString());
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return status;
  }

  public ArrayList<ProductMasterVo> searchProductData(Object ob) {
    String prodID = "";
    String proDesc = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    ArrayList searchlist = new ArrayList();
    ProductMasterVo productMasterVo = (ProductMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchProductData().....................................Dao Impl");
      prodID = StringEscapeUtils.escapeSql(CommonFunction.checkNull(productMasterVo.getProductSearchId())).trim();
      proDesc = StringEscapeUtils.escapeSql(CommonFunction.checkNull(productMasterVo.getProductSearchDes())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("SELECT PRODUCT_ID,PRODUCT_DESC,PRODUCT_CATEGORY,");
      bufInsSql.append(" REPAYMENT_TYPE,if(REPAYMENT_TYPE='I','INSTALLMENT BASED','NON INSTALLMENT BASED')as REPAYMENT_TYPE,");
      bufInsSql.append("if(REVOLVING_FLAG='Y','Yes','No')as REVOLVING_FLAG,");
      bufInsSql.append("if(REC_STATUS='A','Active','Inactive')as REC_STATUS,");
      bufInsSql.append("ASSET_FLAG,if(ASSET_FLAG='A','ASSET BASED','NON-ASSET BASED')as ASSET_FLAG,");
      bufInsSql.append(" DAYS_BASIS,DAYS_PER_YEAR,INSTL_ROUND_TYPE,");
      bufInsSql.append(" INSTL_ROUNDING,INT_ROUND_TYPE,INT_ROUNDING,OPPORTUNITY_RATE,ONE_DEAL_ONE_LOAN,PRODUCT_LOAN_TYPE,ASSET_MANDATORY_AT_DEAL ");
      bufInsSql.append(",if(int_advance='Y','Yes','No')as int_advance");
      bufInsSql.append(" FROM cr_product_m ");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM cr_product_m ");

      if ((!prodID.equals("")) && (!proDesc.equals(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE PRODUCT_ID = '").append(prodID).append("' AND PRODUCT_DESC like '%").append(proDesc).append("%'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE PRODUCT_ID = '").append(prodID).append("' AND PRODUCT_DESC like '%").append(proDesc).append("%'").toString());
      }
      else if (!prodID.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE PRODUCT_ID = '").append(prodID).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE PRODUCT_ID = '").append(prodID).append("' ").toString());
      }
      else if (!proDesc.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE PRODUCT_DESC like '%").append(proDesc).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE PRODUCT_DESC like '%").append(proDesc).append("%' ").toString());
      }
      bufInsSql.append("ORDER BY PRODUCT_ID");

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((prodID.trim() == null) && (proDesc.trim() == null)) || ((prodID.trim().equalsIgnoreCase("")) && (proDesc.trim().equalsIgnoreCase(""))) || (productMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(productMasterVo.getCurrentPageLink()).toString());
        if (productMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (productMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchProductData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("searchProductData ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          ProductMasterVo deptMVO = new ProductMasterVo();
          deptMVO.setProductIdModify(new StringBuilder().append("<a href=productMasterSearch.do?method=openEditProduct&ProductSearchId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          deptMVO.setProductId(CommonFunction.checkNull(data.get(0)).toString());
          deptMVO.setProductDes(CommonFunction.checkNull(data.get(1)).toString());
          deptMVO.setProductCategory(CommonFunction.checkNull(data.get(2)).toString());
          deptMVO.setRepaymentType(CommonFunction.checkNull(data.get(3)).toString());
          deptMVO.setRepaymentTypeFlag(CommonFunction.checkNull(data.get(4)).toString());

          deptMVO.setRevolvingFlag(CommonFunction.checkNull(data.get(5)).toString());
          deptMVO.setRecStatus(CommonFunction.checkNull(data.get(6)).toString());
          deptMVO.setAssetFlag(CommonFunction.checkNull(data.get(7)).toString());
          deptMVO.setAsset(CommonFunction.checkNull(data.get(8)).toString());

          deptMVO.setDaysBasis(CommonFunction.checkNull(data.get(9)).toString());
          deptMVO.setDaysPerYear(CommonFunction.checkNull(data.get(10)).toString());
          deptMVO.setInsRound(CommonFunction.checkNull(data.get(11)).toString());
          deptMVO.setInsRounding(CommonFunction.checkNull(data.get(12)).toString());
          deptMVO.setIntRounType(CommonFunction.checkNull(data.get(13)).toString());
          deptMVO.setIntRounding(CommonFunction.checkNull(data.get(14)).toString());

          if (!CommonFunction.checkNull(data.get(15)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(data.get(15)).trim());
            deptMVO.setOpportunityRate(this.myFormatter.format(reconNum));
          }
          deptMVO.setOneDealOneLoan(CommonFunction.checkNull(data.get(16)).toString());
          deptMVO.setProductLoanType(CommonFunction.checkNull(data.get(17)).toString());
          deptMVO.setAssetMandatoryAtDeal(CommonFunction.checkNull(data.get(18)).toString());
          deptMVO.setInterestAdvance(CommonFunction.checkNull(data.get(19)).toString());
          deptMVO.setTotalRecordSize(count);
          detailList.add(deptMVO);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return detailList;
  }

  public boolean updateProductData(Object ob) {
    ProductMasterVo vo = (ProductMasterVo)ob;
    String productId = vo.getProductId();
    logger.info(new StringBuilder().append("vo.getRecStatus():-").append(vo.getRecStatus()).toString());
    ArrayList updatelist = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

    boolean status = false;
    String stat = "X";
    String stat1 = "I";
    String stat2 = "N";
    String stat3 = "A";
    String stat4 = "Y";
    try
    {
      if ((vo.getRecStatus() != null) && (vo.getRecStatus().equals("on")))
        stat = "A";
      else {
        stat = "X";
      }

      if ((vo.getRevolvingFlag() != null) && (vo.getRevolvingFlag().equals("on")))
      {
        stat2 = "Y";
      }
      else stat2 = "N";

      logger.info(new StringBuilder().append("vo.getInterestAdvance()---------").append(vo.getInterestAdvance()).toString());
      if ((vo.getInterestAdvance() != null) && (vo.getInterestAdvance().equals("on")))
        stat4 = "Y";
      else {
        stat4 = "N";
      }
      StringBuffer bufInsSql = new StringBuffer();
      logger.info("In updateProductData.....................................Dao Impl");

      bufInsSql.append("UPDATE cr_product_m set PRODUCT_DESC=?,PRODUCT_CATEGORY=?,REPAYMENT_TYPE=?,");

      bufInsSql.append("REVOLVING_FLAG=?,REC_STATUS=?,PRODUCT_DESC_L=?,ASSET_FLAG=?,");

      bufInsSql.append("DAYS_BASIS=?,DAYS_PER_YEAR=?,INSTL_ROUND_TYPE=?,INSTL_ROUNDING=?,");

      bufInsSql.append(new StringBuilder().append("INT_ROUND_TYPE=?,INT_ROUNDING=?,OPPORTUNITY_RATE=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),ONE_DEAL_ONE_LOAN=?,PRODUCT_LOAN_TYPE=?,ASSET_MANDATORY_AT_DEAL=?, ").append(" INT_ADVANCE=? where PRODUCT_ID=?").toString());

      if (CommonFunction.checkNull(vo.getProductDes()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getProductDes().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getProductCategory()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getProductCategory().trim());

      if (CommonFunction.checkNull(vo.getRepaymentType()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getRepaymentType());
      }
      if (CommonFunction.checkNull(stat2).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat2);
      }
      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat);
      }
      if (CommonFunction.checkNull(vo.getProductDes()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getProductDes().toUpperCase());

      if (CommonFunction.checkNull(vo.getAssetFlag()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAssetFlag());
      }
      if (CommonFunction.checkNull(vo.getDaysBasis()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getDaysBasis());

      if (CommonFunction.checkNull(vo.getDaysPerYear()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getDaysPerYear());

      if (CommonFunction.checkNull(vo.getInsRound()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getInsRound());
      }
      if (CommonFunction.checkNull(vo.getInsRounding()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getInsRounding());

      if (CommonFunction.checkNull(vo.getIntRounType()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getIntRounType());

      if (CommonFunction.checkNull(vo.getIntRounding()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getIntRounding());

      if (CommonFunction.checkNull(vo.getOpportunityRate().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getOpportunityRate().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerId());
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerDate());

      if (CommonFunction.checkNull(vo.getOneDealOneLoan()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getOneDealOneLoan());

      if (CommonFunction.checkNull(vo.getProductLoanType()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getProductLoanType());
      }
      if (CommonFunction.checkNull(vo.getAssetMandatoryAtDeal()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getAssetMandatoryAtDeal());
      if (CommonFunction.checkNull(stat4).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat4);
      }

      if (CommonFunction.checkNull(vo.getProductId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getProductId().toUpperCase());

      insertPrepStmtObject.setSql(bufInsSql.toString());

      updatelist.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("In getListOfValues").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("In insertPrepStmtObject.printQuery()...").append(insertPrepStmtObject.printQuery()).toString());
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return status;
  }

  public boolean insertDocChildMaster(Object ob)
  {
    DocChildMasterVo vo = (DocChildMasterVo)ob;
    boolean status = false;
    logger.info(new StringBuilder().append("In insertDocChildMaster............inside ejb server file...........Dao Impl").append(vo.getStatus()).toString());

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";

    String query = new StringBuilder().append("select DOC_CHILD_ID,DOC_DESC from cr_document_child_m where DOC_ID='").append(StringEscapeUtils.escapeSql(vo.getDocId().trim())).append("' AND DOC_DESC='").append(StringEscapeUtils.escapeSql(vo.getDocChildDes().trim())).append("'").toString();

    logger.info(new StringBuilder().append("In insertDocChildMaster...........inside ejb server file...........Dao Impl").append(query).toString());

    boolean st = ConnectionDAOforEJB.checkStatus(query);
    try {
      if (!st) {
        if ((vo.getStatus() != null) && (vo.getStatus().equals("on")))
          stat = "A";
        else {
          stat = "X";
        }

        logger.info("In insert Doc Child master");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("insert into cr_document_child_m(DOC_ID,DOC_DESC,REC_STATUS,DOC_DESC_L,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");

        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

        if (CommonFunction.checkNull(vo.getDocId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getDocId().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getDocChildDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getDocChildDes().toUpperCase().trim());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(vo.getDocChildDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getDocChildDes().toUpperCase().trim());

        insertPrepStmtObject.setSql(bufInsSql.toString());

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        logger.info(new StringBuilder().append("IN insertDocChildMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveDocChldData............inside ejb server file...........Dao Impl").append(status).toString());
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return status;
  }

  public ArrayList<DocChildMasterVo> searchDocChildData(Object ob) {
    String docChildId = "";
    String docDes = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    ArrayList searchlist = new ArrayList();
    DocChildMasterVo docChildMasterVo = (DocChildMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchDocChildData()...........inside ejb server file...........Dao Impl");
      docChildId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(docChildMasterVo.getDocChildID())).trim();
      docDes = StringEscapeUtils.escapeSql(CommonFunction.checkNull(docChildMasterVo.getDocChildSearchDes())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("SELECT DOC_CHILD_ID,DOC_ID,");
      bufInsSql.append("(SELECT A.DOC_DESC FROM CR_DOCUMENT_M A WHERE A.DOC_ID=V.DOC_ID ) AS DOCUMENT_DESC,DOC_DESC,");
      bufInsSql.append("if(REC_STATUS='A','Active','Inactive')as REC_STATUS ");
      bufInsSql.append(" FROM cr_document_child_m V ");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM cr_document_child_m V ");

      if ((!docChildId.equalsIgnoreCase("")) && (!docDes.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append("WHERE DOC_DESC like '%").append(docDes).append("%' AND DOC_CHILD_ID='").append(docChildId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE DOC_DESC like '%").append(docDes).append("%' AND DOC_CHILD_ID='").append(docChildId).append("'").toString());
      }
      else if (!docDes.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE DOC_DESC LIKE '%").append(docDes).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE DOC_DESC LIKE '%").append(docDes).append("%' ").toString());
      }
      else if (!docChildId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE DOC_CHILD_ID = '").append(docChildId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE DOC_CHILD_ID = '").append(docChildId).append("' ").toString());
      }

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((docChildId.trim() == null) && (docDes.trim() == null)) || ((docChildId.trim().equalsIgnoreCase("")) && (docDes.trim().equalsIgnoreCase(""))) || (docChildMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(docChildMasterVo.getCurrentPageLink()).toString());
        if (docChildMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (docChildMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchDocChildData() search query1 ### ").append(bufInsSql.toString()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          DocChildMasterVo docMVO = new DocChildMasterVo();

          docMVO.setDocChildIDModify(new StringBuilder().append("<a href=docChildMasterSearch.do?method=openEditDocChild&DocChildId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          docMVO.setDocChildID(CommonFunction.checkNull(data.get(0)).toString());
          docMVO.setDocId(CommonFunction.checkNull(data.get(1)).toString());
          docMVO.setDocDes(CommonFunction.checkNull(data.get(2)).toString());
          docMVO.setDocChildDes(CommonFunction.checkNull(data.get(3)).toString());
          docMVO.setStatus(CommonFunction.checkNull(data.get(4)).toString());
          docMVO.setTotalRecordSize(count);
          detailList.add(docMVO);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean updateDocChildData(Object ob) {
    DocChildMasterVo vo = (DocChildMasterVo)ob;
    String docChildId = vo.getDocChildID();

    logger.info(new StringBuilder().append("vo.getDocChildStatus():-").append(vo.getStatus()).toString());
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();

    String query = new StringBuilder().append("select DOC_CHILD_ID,DOC_ID,DOC_DESC from cr_document_child_m where DOC_ID ='").append(StringEscapeUtils.escapeSql(vo.getDocId().trim())).append("' AND DOC_DESC ='").append(StringEscapeUtils.escapeSql(vo.getDocChildDes().trim())).append("' and DOC_CHILD_ID <> '").append(StringEscapeUtils.escapeSql(vo.getDocChildID().trim())).append("' ").toString();

    logger.info(new StringBuilder().append("In updateDocChildMaster Dao Impl.. ").append(query).toString());
    boolean st = ConnectionDAOforEJB.checkStatus(query);

    vo.setDocChildID(StringEscapeUtils.escapeSql(vo.getDocChildID().trim()));

    boolean status = false;
    String stat = "";
    try
    {
      if (!st)
      {
        if ((vo.getStatus() != null) && (vo.getStatus().equals("on")))
          stat = "A";
        else {
          stat = "X";
        }

        logger.info("In updateDocChildMaster.....................................Dao Impl");

        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append(new StringBuilder().append(" UPDATE cr_document_child_m set DOC_ID=?,DOC_DESC=?, REC_STATUS=?,DOC_DESC_L=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) ").toString());

        bufInsSql.append("where DOC_CHILD_ID=?");

        if (CommonFunction.checkNull(vo.getDocId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getDocId().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getDocChildDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getDocChildDes().toUpperCase().trim());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(vo.getDocChildDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getDocChildDes().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        insertPrepStmtObject.setSql(bufInsSql.toString());

        if (CommonFunction.checkNull(vo.getDocChildID()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getDocChildID());

        insertPrepStmtObject.setSql(bufInsSql.toString());
        updatelist.add(insertPrepStmtObject);
        logger.info(new StringBuilder().append("In getListOfValues").append(bufInsSql).toString());
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return status;
  }

  public ArrayList getStage()
  {
    ArrayList list = new ArrayList();
    try {
      logger.info("In getStage..........................DAOImpl");
      String query = "select DEScription,value from generic_master where generic_key='DOC_STAGE' and rec_status ='A'";
      DocumentChecklistMasterVo stageVO = null;
      ArrayList product = ConnectionDAOforEJB.sqlSelect(query);
      logger.info(new StringBuilder().append("getStage ").append(product.size()).toString());
      for (int i = 0; i < product.size(); i++) {
        logger.info(new StringBuilder().append("getStage ").append(CommonFunction.checkNull(product.get(i)).toString()).toString());
        ArrayList data = (ArrayList)product.get(i);
        for (int k = 0; k < data.size(); k++) {
          logger.info(new StringBuilder().append("getStage ").append(CommonFunction.checkNull(data.get(k)).toString()).toString());
          stageVO = new DocumentChecklistMasterVo();
          stageVO.setStageDescription(data.get(0).toString());
          stageVO.setStageValue(data.get(1).toString());
        }
        list.add(stageVO);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getEntity(String parentValue) {
    ArrayList list1 = new ArrayList();
    try {
      logger.info("In getEntity..........................DAOImpl");
      String query = "select DEScription,value from generic_master where generic_key='DOC_ENTITY_TYPE ' and rec_status ='A'";
      if (!CommonFunction.checkNull(parentValue).equalsIgnoreCase(""))
        query = new StringBuilder().append(query).append(" and PARENT_VALUE = '").append(parentValue).append("'").toString();
      DocumentChecklistMasterVo stageVO = null;
      ArrayList product = ConnectionDAOforEJB.sqlSelect(query);
      logger.info(new StringBuilder().append("getEntity ").append(product.size()).toString());
      for (int i = 0; i < product.size(); i++) {
        logger.info(new StringBuilder().append("getEntity ").append(CommonFunction.checkNull(product.get(i)).toString()).toString());

        ArrayList data = (ArrayList)product.get(i);
        for (int k = 0; k < data.size(); k++)
        {
          stageVO = new DocumentChecklistMasterVo();
          stageVO.setEntityDescription(data.get(0).toString());
          stageVO.setEntityValue(data.get(1).toString());
        }
        list1.add(stageVO);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list1;
  }

  public ArrayList getConstitution() {
    ArrayList list2 = new ArrayList();
    try {
      logger.info("In getConstitution..........................DAOImpl");

      String query = "select DEScription,value from generic_master where generic_key='CUST_CONSTITUTION' and rec_status ='A'";
      DocumentChecklistMasterVo stageVO = null;
      ArrayList product = ConnectionDAOforEJB.sqlSelect(query);
      logger.info(new StringBuilder().append("getConstitution ").append(product.size()).toString());
      for (int i = 0; i < product.size(); i++)
      {
        ArrayList data = (ArrayList)product.get(i);
        for (int k = 0; k < data.size(); k++)
        {
          stageVO = new DocumentChecklistMasterVo();
          stageVO.setConsDescription(data.get(0).toString());
          stageVO.setConsValue(data.get(1).toString());
        }
        list2.add(stageVO);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list2;
  }

  public boolean insertDocCheckListMaster(String[] docIdList, String[] docMandatoryList, String[] docOriginalList, String[] docExpiryFlagList, String[] statusList, DocumentChecklistMasterVo vo)
  {
    ArrayList qryList = new ArrayList();
    boolean status = false;
    String duplicateCount = null;
    logger.info(new StringBuilder().append("In insertDocCheckListMaster.....................................Dao Impl").append(vo.getStatus()).toString());
    String schemeId = CommonFunction.checkNull(vo.getLbxSchemeID());
    String producTId = CommonFunction.checkNull(vo.getLbxProductID());
    String doCcons = CommonFunction.checkNull(vo.getDocConstitution());
    String assetColl = CommonFunction.checkNull(vo.getLbxAssetCollId());
    StringBuffer bufInsSql = null;
    PrepStmtObject insertPrepStmtObject = null;
    try {
      if (schemeId.equalsIgnoreCase("")) {
        schemeId = "0";
      }
      if (!producTId.equalsIgnoreCase(""))
      {
        String countQry = new StringBuilder().append("SELECT COUNT(1) FROM cr_document_checklist_m WHERE DOC_PRODUCT_ID='").append(CommonFunction.checkNull(vo.getLbxProductID())).append("' AND DOC_SATGE='").append(CommonFunction.checkNull(vo.getDocStage())).append("' AND DOC_ENTITY_TYPE='").append(CommonFunction.checkNull(vo.getDocEntity())).append("' AND IFNULL(DOC_SCHEME_ID,0)='").append(schemeId).append("'").toString();
        logger.info(new StringBuilder().append("... countQry ...").append(countQry).toString());
        duplicateCount = ConnectionDAOforEJB.singleReturn(countQry);
        logger.info(new StringBuilder().append("... duplicateCount ...").append(duplicateCount).toString());
      }
      if (!doCcons.equalsIgnoreCase(""))
      {
        String countQry = new StringBuilder().append("SELECT COUNT(1) FROM cr_document_checklist_m WHERE DOC_CONSTITUTION='").append(CommonFunction.checkNull(vo.getDocConstitution())).append("' AND DOC_SATGE='").append(CommonFunction.checkNull(vo.getDocStage())).append("' AND DOC_ENTITY_TYPE='").append(CommonFunction.checkNull(vo.getDocEntity())).append("' AND IFNULL(DOC_SCHEME_ID,0)='").append(schemeId).append("'").toString();
        logger.info(new StringBuilder().append("... countQry ...").append(countQry).toString());
        duplicateCount = ConnectionDAOforEJB.singleReturn(countQry);
        logger.info(new StringBuilder().append("... duplicateCount ...").append(duplicateCount).toString());
      }
      if (!assetColl.equalsIgnoreCase(""))
      {
        String countQry = new StringBuilder().append("SELECT COUNT(1) FROM cr_document_checklist_m WHERE DOC_ASSET_CLASS='").append(CommonFunction.checkNull(vo.getLbxAssetCollId())).append("' AND DOC_SATGE='").append(CommonFunction.checkNull(vo.getDocStage())).append("' AND DOC_ENTITY_TYPE='").append(CommonFunction.checkNull(vo.getDocEntity())).append("' AND IFNULL(DOC_SCHEME_ID,0)='").append(schemeId).append("'").toString();
        logger.info(new StringBuilder().append("... countQry ...").append(countQry).toString());
        duplicateCount = ConnectionDAOforEJB.singleReturn(countQry);
        logger.info(new StringBuilder().append("... duplicateCount ...").append(duplicateCount).toString());
      }

      if (duplicateCount.equalsIgnoreCase("0"))
      {
        for (int i = 0; i < docIdList.length; i++)
        {
          bufInsSql = new StringBuffer();
          insertPrepStmtObject = new PrepStmtObject();

          bufInsSql.append(" insert into cr_document_checklist_m(DOC_PRODUCT_ID,DOC_SCHEME_ID,DOC_SATGE,DOC_ENTITY_TYPE,DOC_CONSTITUTION,DOC_ASSET_CLASS,DOC_ID,DOC_MANDATORY,DOC_ORIGINAL,DOC_EXPIRY_FLAG,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");
          bufInsSql.append(" values ( ");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
          bufInsSql.append(" ?,");
          bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

          if (CommonFunction.checkNull(vo.getLbxProductID()).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(vo.getLbxProductID().toUpperCase().trim());
          }
          if (CommonFunction.checkNull(vo.getLbxSchemeID()).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(vo.getLbxSchemeID().toUpperCase().trim());
          }
          if (CommonFunction.checkNull(vo.getDocStage()).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(vo.getDocStage().toUpperCase().trim());
          }
          if (CommonFunction.checkNull(vo.getDocEntity()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getDocEntity().toUpperCase().trim());

          if (CommonFunction.checkNull(vo.getDocConstitution()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getDocConstitution().toUpperCase().trim());

          if (CommonFunction.checkNull(vo.getLbxAssetCollId()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getLbxAssetCollId().toUpperCase().trim());

          if (CommonFunction.checkNull(docIdList[i]).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(docIdList[i]);
          logger.info(docIdList[i]);
          logger.info(docMandatoryList[i]);

          if (CommonFunction.checkNull(docMandatoryList[i]).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(docMandatoryList[i]);

          logger.info(docMandatoryList[i]);

          if (CommonFunction.checkNull(docOriginalList[i]).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(docOriginalList[i]);

          if (CommonFunction.checkNull(docExpiryFlagList[i]).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(docExpiryFlagList[i]);

          if (CommonFunction.checkNull(statusList[i]).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(statusList[i]);

          logger.info(statusList[i]);

          if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getMakerId());
          if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getMakerDate());
          if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getMakerId());
          if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getMakerDate());

          insertPrepStmtObject.setSql(bufInsSql.toString());
          qryList.add(insertPrepStmtObject);
        }

        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveAssetVerification......................").append(status).toString());
        logger.info(new StringBuilder().append("insertPrepStmtObject....").append(insertPrepStmtObject.printQuery()).toString());
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList<DocumentChecklistMasterVo> searchDocCheckListData(Object ob)
  {
    String productId = "";
    String Stage = "";
    String entityType = "";
    String schemeCode = "";
    String constitution = "";
    String assetCollClass = "";

    ArrayList searchlist = new ArrayList();
    DocumentChecklistMasterVo documentChecklistMasterVo = (DocumentChecklistMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchDocChildData().....................................Dao Impl");

      productId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(documentChecklistMasterVo.getLbxProductID()).trim());

      Stage = StringEscapeUtils.escapeSql(CommonFunction.checkNull(documentChecklistMasterVo.getDocStage()).trim());

      entityType = StringEscapeUtils.escapeSql(CommonFunction.checkNull(documentChecklistMasterVo.getDocEntity()).trim());

      schemeCode = StringEscapeUtils.escapeSql(CommonFunction.checkNull(documentChecklistMasterVo.getLbxSchemeID()).trim());

      constitution = StringEscapeUtils.escapeSql(CommonFunction.checkNull(documentChecklistMasterVo.getDocConstitution()).trim());

      assetCollClass = StringEscapeUtils.escapeSql(CommonFunction.checkNull(documentChecklistMasterVo.getLbxAssetCollId()).trim());

      boolean appendSQL = false;
      if (schemeCode.equalsIgnoreCase("")) {
        schemeCode = "0";
      }
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append(" SELECT DOC_CHECKLIST_ID,DOC_PRODUCT_ID,DOC_SCHEME_ID,DOC_SATGE,DOC_ENTITY_TYPE,DOC_CONSTITUTION,");
      bufInsSql.append(" (SELECT A.DESCRIPTION FROM generic_master A WHERE A.VALUE=V.DOC_ASSET_CLASS AND A.GENERIC_KEY = 'ASSET_CLASS' or 'COLLATERAL_CLASS') AS DOC_ASSET_CLASS,DOC_ID,");
      bufInsSql.append(" (SELECT A.DOC_DESC FROM CR_DOCUMENT_M A WHERE A.DOC_ID=V.DOC_ID ) AS DOCUMENT_DESC,");
      bufInsSql.append(" DOC_MANDATORY,");
      bufInsSql.append(" DOC_ORIGINAL,");
      bufInsSql.append(" DOC_EXPIRY_FLAG,");
      bufInsSql.append(" REC_STATUS,(Select PRODUCT_DESC from cr_product_m where PRODUCT_ID=DOC_PRODUCT_ID) PRODUCT_DESC ");
      bufInsSql.append(",(Select SCHEME_DESC from cr_scheme_m where SCHEME_ID=DOC_SCHEME_ID) SCHEME_DESC,V.DOC_ASSET_CLASS");
      bufInsSql.append(" FROM cr_document_checklist_m V ");

      if ((!productId.equalsIgnoreCase("")) && (!Stage.equalsIgnoreCase("")) && (!entityType.equalsIgnoreCase("")))
      {
        bufInsSql.append(new StringBuilder().append(" WHERE DOC_PRODUCT_ID='").append(productId).append("' AND DOC_SATGE='").append(Stage).append("' AND DOC_ENTITY_TYPE='").append(entityType).append("'").toString());
      }

      if (productId.equalsIgnoreCase(""))
      {
        if (!schemeCode.equalsIgnoreCase(""))
        {
          bufInsSql.append(new StringBuilder().append(" WHERE IFNULL(DOC_SCHEME_ID,0)='").append(schemeCode).append("'").toString());
          appendSQL = true;
        }

      }
      else
      {
        bufInsSql.append(new StringBuilder().append(" AND IFNULL(DOC_SCHEME_ID,0)='").append(schemeCode).append("'").toString());
        appendSQL = true;
      }
      if (!constitution.equalsIgnoreCase(""))
      {
        bufInsSql.append(new StringBuilder().append(" AND DOC_CONSTITUTION='").append(constitution).append("' AND DOC_ENTITY_TYPE='").append(entityType).append("' AND DOC_SATGE='").append(Stage).append("' ").toString());

        appendSQL = true;
      }

      if (!assetCollClass.equalsIgnoreCase(""))
      {
        bufInsSql.append(new StringBuilder().append(" AND DOC_ASSET_CLASS='").append(assetCollClass).append("' AND DOC_ENTITY_TYPE='").append(entityType).append("' AND DOC_SATGE='").append(Stage).append("'").toString());

        appendSQL = true;
      }

      logger.info(new StringBuilder().append("search Query...").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      bufInsSql.append(" ORDER BY DOC_CHECKLIST_ID");

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchDocChildData() search query1 ### ").append(bufInsSql.toString()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          DocumentChecklistMasterVo docMVO = new DocumentChecklistMasterVo();

          docMVO.setDocCheckId(CommonFunction.checkNull(data.get(0)).toString());
          docMVO.setLbxProductID(CommonFunction.checkNull(data.get(1)).toString().trim());
          docMVO.setLbxSchemeID(CommonFunction.checkNull(data.get(2)).toString());
          docMVO.setDocStage(CommonFunction.checkNull(data.get(3)).toString());
          docMVO.setDocEntity(CommonFunction.checkNull(data.get(4)).toString());
          docMVO.setDocConstitution(CommonFunction.checkNull(data.get(5)).toString());
          docMVO.setAssetClass(CommonFunction.checkNull(data.get(6)).toString());

          docMVO.setDocId(CommonFunction.checkNull(data.get(7)).toString());
          docMVO.setDocDes(CommonFunction.checkNull(((String)data.get(8)).toString()));
          docMVO.setDocMandatory(CommonFunction.checkNull(data.get(9)).toString());
          docMVO.setDocOriginal(CommonFunction.checkNull(data.get(10)).toString());
          docMVO.setDocExpiryFlag(CommonFunction.checkNull(data.get(11)).toString());
          docMVO.setStatus(CommonFunction.checkNull(data.get(12)).toString());
          docMVO.setProductId(CommonFunction.checkNull(data.get(13)).toString());
          docMVO.setSchemeId(CommonFunction.checkNull(data.get(14)).toString());
          docMVO.setLbxAssetCollId(CommonFunction.checkNull(data.get(15)).toString());

          detailList.add(docMVO);
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return detailList;
  }

  public boolean updatedocCheckListData(String[] docIdList, String[] docCheckIdList, String[] docMandatoryList, String[] docOriginalList, String[] docExpiryFlagList, String[] statusList, DocumentChecklistMasterVo vo, String[] docCheckAllIdVal)
  {
    StringBuffer bufInsSql = null;
    ArrayList qryList = null;
    logger.info(new StringBuilder().append(" docCheckIdList value:------").append(docCheckIdList.length).toString());
    logger.info(new StringBuilder().append(" docIdList value:------").append(docIdList.length).toString());
    logger.info(new StringBuilder().append(" docCheckAllIdVal value:------").append(docCheckAllIdVal.length).toString());

    boolean status = false;
    logger.info(new StringBuilder().append("In updateDocCheckListMaster.....................................Dao Impl").append(vo.getStatus()).toString());

    qryList = new ArrayList();

    PrepStmtObject insertPrepStmtObject = null;
    try {
      for (int j = 0; j <= docCheckAllIdVal.length; j++)
      {
        if ((j < docCheckAllIdVal.length) && 
          (!CommonFunction.checkNull(docCheckAllIdVal[j]).equalsIgnoreCase(""))) {
          bufInsSql = new StringBuffer();
          insertPrepStmtObject = new PrepStmtObject();

          bufInsSql.append("DELETE FROM cr_document_checklist_m WHERE DOC_CHECKLIST_ID=?");
          insertPrepStmtObject.addString(docCheckAllIdVal[j]);
          insertPrepStmtObject.setSql(bufInsSql.toString());
          qryList.add(insertPrepStmtObject);
          logger.info(new StringBuilder().append("delete query:-------").append(insertPrepStmtObject.printQuery()).toString());
        }

      }

      for (int i = 0; i < docIdList.length; i++)
      {
        bufInsSql = new StringBuffer();
        insertPrepStmtObject = new PrepStmtObject();

        logger.info(new StringBuilder().append("in dsfadsfadfa....").append(status).toString());

        bufInsSql.append("Insert into cr_document_checklist_m (DOC_PRODUCT_ID,DOC_SCHEME_ID,DOC_SATGE,");
        bufInsSql.append(" DOC_ENTITY_TYPE,DOC_CONSTITUTION,DOC_ASSET_CLASS,");
        bufInsSql.append(" DOC_ID,DOC_MANDATORY,DOC_ORIGINAL,DOC_EXPIRY_FLAG,REC_STATUS,");
        bufInsSql.append(" MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");
        bufInsSql.append(new StringBuilder().append(" values (?,?,?,?,?,?,?,?,?,?,?,?,DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),?,DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND))").toString());

        if (CommonFunction.checkNull(vo.getLbxProductID()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getLbxProductID().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getLbxSchemeID()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getLbxSchemeID().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getDocStage()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getDocStage().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getDocEntity()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getDocEntity().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getDocConstitution()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getDocConstitution().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getLbxAssetCollId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getLbxAssetCollId().toUpperCase().trim());

        if (CommonFunction.checkNull(docIdList[i]).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(docIdList[i]);
        logger.info(new StringBuilder().append("doc list").append(docIdList[i]).toString());

        if (CommonFunction.checkNull(docMandatoryList[i]).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(docMandatoryList[i]);

        logger.info(docMandatoryList[i]);

        if (CommonFunction.checkNull(docOriginalList[i]).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(docOriginalList[i]);

        if (CommonFunction.checkNull(docExpiryFlagList[i]).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(docExpiryFlagList[i]);

        if (CommonFunction.checkNull(statusList[i]).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(statusList[i]);

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        logger.info(statusList[i]);

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("insertPrepStmtObject query:----:---").append(insertPrepStmtObject.printQuery()).toString());
        logger.info(new StringBuilder().append("qryList---------").append(qryList).toString());
        qryList.add(insertPrepStmtObject);
      }
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList<CrSchemeMasterVo> searchScemeCodeDao(Object ob)
  {
    ArrayList searchlist = new ArrayList();
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    String schemeId = "";
    String SchemeDesc = "";

    CrSchemeMasterVo crSchemeMasterVo = (CrSchemeMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchScemeCodeDao...............");
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      schemeId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getSchemeId())).trim();
      SchemeDesc = StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getSchemeDesc())).trim();

      bufInsSql.append("select A.SCHEME_ID,CP.PRODUCT_DESC,A.SCHEME_DESC,A.MIN_AMT_FIN,");
      bufInsSql.append(" A.MAX_AMT_FIN,A.MIN_MARGIN_RATE,A.DEFAULT_MARGIN_RATE,if(A.REC_STATUS='A','Active','Inactive')as REC_STATUS from cr_scheme_m A join  cr_product_m CP on (CP.PRODUCT_ID=A.PRODUCT_ID AND CP.REC_STATUS='A')   ");

      bufInsSqlTempCount.append("SELECT COUNT(1)  from cr_scheme_m A join  cr_product_m CP on (CP.PRODUCT_ID=A.PRODUCT_ID AND CP.REC_STATUS='A')  ");

      if ((!schemeId.equalsIgnoreCase("")) && (!SchemeDesc.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append("WHERE A.SCHEME_DESC like'%").append(SchemeDesc).append("%' AND A.SCHEME_ID='").append(schemeId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE A.SCHEME_DESC like'%").append(SchemeDesc).append("%' AND A.SCHEME_ID='").append(schemeId).append("'").toString());
      }
      else if (!SchemeDesc.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE A.SCHEME_DESC LIKE'%").append(SchemeDesc).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE A.SCHEME_DESC LIKE'%").append(SchemeDesc).append("%' ").toString());
      }
      else if (!schemeId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE A.SCHEME_ID = '").append(schemeId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE A.SCHEME_ID = '").append(schemeId).append("' ").toString());
      }
      bufInsSql.append(" ORDER BY SCHEME_ID");
      logger.info(new StringBuilder().append("IN searchChargeCodeDao() search query1 ### ").append(bufInsSql.toString()).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((schemeId.trim() == null) && (SchemeDesc.trim() == null)) || ((schemeId.trim().equalsIgnoreCase("")) && (SchemeDesc.trim().equalsIgnoreCase(""))) || (crSchemeMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(crSchemeMasterVo.getCurrentPageLink()).toString());
        if (crSchemeMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (crSchemeMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("searchChargeCodeDao Data size is....").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++) {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          CrSchemeMasterVo crScheMVO = new CrSchemeMasterVo();
          crScheMVO.setSchemeIdModify(new StringBuilder().append("<a href=crSchemeMasterSearch.do?method=modifyDetails&schemeId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());
          crScheMVO.setSchemeId(CommonFunction.checkNull(data.get(0)).toString());
          crScheMVO.setProductId(CommonFunction.checkNull(data.get(1)).toString());
          crScheMVO.setSchemeDesc(CommonFunction.checkNull(data.get(2)).toString());

          if (!CommonFunction.checkNull(data.get(3)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(data.get(3)).trim());
            crScheMVO.setMinAmountFin(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(data.get(4)).trim().equalsIgnoreCase(""))
          {
            Number reconNum1 = this.myFormatter.parse(CommonFunction.checkNull(data.get(4)).trim());
            crScheMVO.setMaxAmountFin(this.myFormatter.format(reconNum1));
          }

          if (!CommonFunction.checkNull(data.get(5)).trim().equalsIgnoreCase(""))
          {
            Number reconNum2 = this.myFormatter.parse(CommonFunction.checkNull(data.get(5)).trim());
            crScheMVO.setMinMarginRate(this.myFormatter.format(reconNum2));
          }

          if (!CommonFunction.checkNull(data.get(6)).trim().equalsIgnoreCase(""))
          {
            Number reconNum3 = this.myFormatter.parse(CommonFunction.checkNull(data.get(6)).trim());
            crScheMVO.setDefaultMarginRate(this.myFormatter.format(reconNum3));
          }

          crScheMVO.setStatus(CommonFunction.checkNull(data.get(7)).toString());
          crScheMVO.setTotalRecordSize(count);
          detailList.add(crScheMVO);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return detailList;
  }

  public String insertSchemeCodeMaster(Object ob, String ratMet, String rwEve)
  {
    String procval = "";
    boolean status = false;
    CrSchemeMasterVo crSchemeMasterVo = (CrSchemeMasterVo)ob;
    ArrayList qryList = new ArrayList();

    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

    String stat = "";
    String reschAllowed = "";
    String deferralAllowed = "";
    String prepayAllowed = "";
    String terminationAllowed = "";
    String additionalDisbAllowed = "";
    try
    {
      if ((crSchemeMasterVo.getStatus() != null) && (crSchemeMasterVo.getStatus().equals("on")))
        stat = "A";
      else {
        stat = "X";
      }

      if ((crSchemeMasterVo.getReschAllowed() != null) && (crSchemeMasterVo.getReschAllowed().equals("on")))
        reschAllowed = "Y";
      else {
        reschAllowed = "N";
      }

      if ((crSchemeMasterVo.getDeferralAllowed() != null) && (crSchemeMasterVo.getDeferralAllowed().equals("on")))
        deferralAllowed = "Y";
      else {
        deferralAllowed = "N";
      }

      if ((crSchemeMasterVo.getPrepayAllowed() != null) && (crSchemeMasterVo.getPrepayAllowed().equals("on")))
        prepayAllowed = "Y";
      else {
        prepayAllowed = "N";
      }

      if ((crSchemeMasterVo.getTerminationAllowed() != null) && (crSchemeMasterVo.getTerminationAllowed().equals("on")))
        terminationAllowed = "Y";
      else {
        terminationAllowed = "N";
      }

      if ((crSchemeMasterVo.getAdditionalDisbAllowed() != null) && (crSchemeMasterVo.getAdditionalDisbAllowed().equals("on")))
        additionalDisbAllowed = "Y";
      else {
        additionalDisbAllowed = "N";
      }

      String MinMarginRate = crSchemeMasterVo.getMinMarginRate();
      if (MinMarginRate.equalsIgnoreCase(""))
      {
        MinMarginRate = "0.00";
      }

      String MaximumDefrMonthsAllowed = crSchemeMasterVo.getMaximumDefrMonthsAllowed();
      if (CommonFunction.checkNull(MaximumDefrMonthsAllowed).equalsIgnoreCase(""))
      {
        MaximumDefrMonthsAllowed = "0";
      }

      String MaximumDefrMonthsTotal = crSchemeMasterVo.getMaximumDefrMonthsTotal();
      if (CommonFunction.checkNull(MaximumDefrMonthsTotal).equalsIgnoreCase(""))
      {
        MaximumDefrMonthsTotal = "0";
      }
      String MinimumGapDefr = crSchemeMasterVo.getMinimumGapDefr();
      if (CommonFunction.checkNull(MinimumGapDefr).equalsIgnoreCase(""))
      {
        MinimumGapDefr = "0";
      }
      String NumberDefrAllowedYear = crSchemeMasterVo.getNumberDefrAllowedYear();
      if (CommonFunction.checkNull(NumberDefrAllowedYear).equalsIgnoreCase(""))
      {
        NumberDefrAllowedYear = "0";
      }
      String NumberDefrAllowedTotal = crSchemeMasterVo.getNumberDefrAllowedTotal();
      if (CommonFunction.checkNull(NumberDefrAllowedTotal).equalsIgnoreCase(""))
      {
        NumberDefrAllowedTotal = "0";
      }
      String PrepayLockinPeriod = crSchemeMasterVo.getPrepayLockinPeriod();
      if (CommonFunction.checkNull(PrepayLockinPeriod).equalsIgnoreCase(""))
      {
        PrepayLockinPeriod = "0";
      }
      String NumberPrepayAllowedYear = crSchemeMasterVo.getNumberPrepayAllowedYear();
      if (CommonFunction.checkNull(NumberPrepayAllowedYear).equalsIgnoreCase(""))
      {
        NumberPrepayAllowedYear = "0";
      }
      String NumberPrepayAllowedTotal = crSchemeMasterVo.getNumberPrepayAllowedTotal();
      if (CommonFunction.checkNull(NumberPrepayAllowedTotal).equalsIgnoreCase(""))
      {
        NumberPrepayAllowedTotal = "0";
      }
      String DefrLockinPeriod = crSchemeMasterVo.getDefrLockinPeriod();
      if (CommonFunction.checkNull(DefrLockinPeriod).equalsIgnoreCase(""))
      {
        DefrLockinPeriod = "0";
      }

      String MinimumGapResch = crSchemeMasterVo.getMinimumGapResch();
      if (CommonFunction.checkNull(MinimumGapResch).equalsIgnoreCase(""))
      {
        MinimumGapResch = "0";
      }
      String NumberReschAllowedTotal = crSchemeMasterVo.getNumberReschAllowedTotal();
      if (CommonFunction.checkNull(NumberReschAllowedTotal).equalsIgnoreCase(""))
      {
        NumberReschAllowedTotal = "0";
      }
      String NumberReschAllowedYear = crSchemeMasterVo.getNumberReschAllowedYear();
      if (CommonFunction.checkNull(NumberReschAllowedYear).equalsIgnoreCase(""))
      {
        NumberReschAllowedYear = "0";
      }
      String ReschLockinPeriod = crSchemeMasterVo.getReschLockinPeriod();
      if (CommonFunction.checkNull(ReschLockinPeriod).equalsIgnoreCase(""))
      {
        ReschLockinPeriod = "0";
      }
      String MinPeriodResch = crSchemeMasterVo.getMinPeriodResch();
      if (CommonFunction.checkNull(MinPeriodResch).equalsIgnoreCase(""))
      {
        MinPeriodResch = "0";
      }
      String DefTenure = crSchemeMasterVo.getDefTenure();
      if (CommonFunction.checkNull(DefTenure).equalsIgnoreCase(""))
      {
        DefTenure = "1";
      }
      String MaxTenure = crSchemeMasterVo.getMaxTenure();
      if (CommonFunction.checkNull(MaxTenure).equalsIgnoreCase(""))
      {
        MaxTenure = "1";
      }
      String MinimumGapPrepay = crSchemeMasterVo.getMinimumGapPrepay();
      if (CommonFunction.checkNull(MinimumGapPrepay).equalsIgnoreCase(""))
      {
        MinimumGapPrepay = "0";
      }
      String MinimumPrepayPercent = crSchemeMasterVo.getMinimumPrepayPercent();
      if (CommonFunction.checkNull(MinimumPrepayPercent).equalsIgnoreCase(""))
      {
        MinimumPrepayPercent = "0.00";
      }

      if (CommonFunction.checkNull(DefTenure).equalsIgnoreCase(""))
      {
        DefTenure = "1";
      }
      String MinTenure = crSchemeMasterVo.getMinTenure();
      if (CommonFunction.checkNull(MinTenure).equalsIgnoreCase(""))
      {
        MinTenure = "1";
      }
      String MaxIrr = crSchemeMasterVo.getMaxIrr();
      if (CommonFunction.checkNull(MaxIrr).equalsIgnoreCase(""))
      {
        MaxIrr = "0.00";
      }
      String MinIrr = crSchemeMasterVo.getMinIrr();
      if (CommonFunction.checkNull(MinIrr).equalsIgnoreCase(""))
      {
        MinIrr = "0.00";
      }
      String MaximumPrepayPercent = crSchemeMasterVo.getMaximumPrepayPercent();
      if (CommonFunction.checkNull(MaximumPrepayPercent).equalsIgnoreCase(""))
      {
        MaximumPrepayPercent = "0.00";
      }

      String TerminationLockinPeriod = crSchemeMasterVo.getTerminationLockinPeriod();
      if (CommonFunction.checkNull(TerminationLockinPeriod).equalsIgnoreCase(""))
      {
        TerminationLockinPeriod = "0";
      }

      String MinimumGapTermination = crSchemeMasterVo.getMinimumGapTermination();
      if (CommonFunction.checkNull(MinimumGapTermination).equalsIgnoreCase(""))
      {
        MinimumGapTermination = "0";
      }
      if (CommonFunction.checkNull(MaxIrr).equalsIgnoreCase(""))
      {
        MaxIrr = "0.00";
      }
      String DefFlatRate = crSchemeMasterVo.getDefFlatRate();
      if (CommonFunction.checkNull(DefFlatRate).equalsIgnoreCase(""))
      {
        DefFlatRate = "0.00";
      }
      String MinEffRate = crSchemeMasterVo.getMinEffRate();
      if (CommonFunction.checkNull(MinEffRate).equalsIgnoreCase(""))
      {
        MinEffRate = "0.00";
      }

      String MaxEffRate = crSchemeMasterVo.getMaxEffRate();
      if (CommonFunction.checkNull(MaxEffRate).equalsIgnoreCase(""))
      {
        MaxEffRate = "0.00";
      }

      String DefEffRate = crSchemeMasterVo.getDefEffRate();
      if (CommonFunction.checkNull(DefEffRate).equalsIgnoreCase(""))
      {
        DefEffRate = "0.00";
      }
      if (CommonFunction.checkNull(MaxIrr).equalsIgnoreCase(""))
      {
        MaxIrr = "0.00";
      }
      String MaxMarginRate = crSchemeMasterVo.getMaxMarginRate();
      if (CommonFunction.checkNull(MaxMarginRate).equalsIgnoreCase(""))
      {
        MaxMarginRate = "0.00";
      }
      String DefaultMarginRate = crSchemeMasterVo.getDefaultMarginRate();
      if (CommonFunction.checkNull(DefaultMarginRate).equalsIgnoreCase(""))
      {
        DefaultMarginRate = "0.00";
      }

      String MinFlatRate = crSchemeMasterVo.getMinFlatRate();
      if (CommonFunction.checkNull(MinFlatRate).equalsIgnoreCase(""))
      {
        MinFlatRate = "0.00";
      }

      String MaxFlatRate = crSchemeMasterVo.getMaxFlatRate();
      if (CommonFunction.checkNull(MaxFlatRate).equalsIgnoreCase(""))
      {
        MaxFlatRate = "0.00";
      }

      String CustomerExposureLimit = crSchemeMasterVo.getCustomerExposureLimit();
      if (CommonFunction.checkNull(CustomerExposureLimit).equalsIgnoreCase(""))
      {
        CustomerExposureLimit = "0.00";
      }

      String preEMI = crSchemeMasterVo.getPreEMI();
      if (CommonFunction.checkNull(preEMI).equalsIgnoreCase(""))
      {
        preEMI = "0.00";
      }

      String fixPeriod = crSchemeMasterVo.getFixPriod();
      if (CommonFunction.checkNull(fixPeriod).equalsIgnoreCase(""))
      {
        fixPeriod = "0.00";
      }

      String gapreviw = crSchemeMasterVo.getGapReview();
      if (CommonFunction.checkNull(gapreviw).equalsIgnoreCase(""))
      {
        gapreviw = "0.00";
      }
      if (CommonFunction.checkNull(crSchemeMasterVo.getMinAmountFin()).equalsIgnoreCase(""))
      {
        crSchemeMasterVo.setMinAmountFin("0.00");
      }
      if (CommonFunction.checkNull(crSchemeMasterVo.getMaxAmountFin()).equalsIgnoreCase(""))
      {
        crSchemeMasterVo.setMaxAmountFin("0.00");
      }

      String MinGapPrepayTermination = crSchemeMasterVo.getMinimumGapBetPrepayAndTer();
      if (CommonFunction.checkNull(MinGapPrepayTermination).equalsIgnoreCase(""))
      {
        MinGapPrepayTermination = "0";
      }

      if (CommonFunction.checkNull(crSchemeMasterVo.getSchemeExposure()).equalsIgnoreCase(""))
      {
        crSchemeMasterVo.setSchemeExposure("0.00");
      }

      logger.info("In insertSchemeCodeMaster()........");
      logger.info("In Scheme_Account_save.....Procedure...");
      ArrayList in = new ArrayList();
      ArrayList out = new ArrayList();
      ArrayList outMessages = new ArrayList();
      String s1 = "";
      String s2 = "";
      String date = CommonFunction.changeFormat(crSchemeMasterVo.getMakerDate());
      String expDate = CommonFunction.changeFormat(crSchemeMasterVo.getExpiryDate());
      logger.info(new StringBuilder().append("Expiry Date : ").append(expDate).toString());
      try
      {
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getLbxProductID()).trim()));
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getSchemeDesc()).trim()));
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getSchemeDesc()).trim()));
        in.add(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMinAmountFin()).trim())).toString());
        in.add(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMaxAmountFin()).trim())).toString());
        in.add(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(MinMarginRate).trim())).toString());
        in.add(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(MaxMarginRate).trim())).toString());
        in.add(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(DefaultMarginRate).trim())).toString());
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getRateType()).trim()));
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(ratMet).trim()));
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getBaseRateType()).trim()));
        in.add(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(MinFlatRate).trim())).toString());
        in.add(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(MaxFlatRate).trim())).toString());
        in.add(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(DefFlatRate).trim())).toString());
        in.add(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(MinEffRate).trim())).toString());
        in.add(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(MaxEffRate).trim())).toString());
        in.add(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(DefEffRate).trim())).toString());
        in.add(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(MinIrr).trim())).toString());
        in.add(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(MaxIrr).trim())).toString());
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(MinTenure).trim()).toString());
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(MaxTenure).trim()).toString());
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(DefTenure).trim()).toString());
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getRepaymentFreq()).trim()));
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getInstallmentType()).trim()));
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getRepaymentMode()).trim()));
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getInstallmentMode()).trim()));
        in.add(Integer.valueOf(Integer.parseInt(MinPeriodResch)));
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(reschAllowed)).trim());
        in.add(Integer.valueOf(Integer.parseInt(ReschLockinPeriod)));
        in.add(Integer.valueOf(Integer.parseInt(NumberReschAllowedYear)));
        in.add(Integer.valueOf(Integer.parseInt(NumberReschAllowedTotal)));
        in.add(Integer.valueOf(Integer.parseInt(MinimumGapResch)));
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(deferralAllowed)).trim());
        in.add(Integer.valueOf(Integer.parseInt(DefrLockinPeriod)));
        in.add(Integer.valueOf(Integer.parseInt(MaximumDefrMonthsAllowed)));
        in.add(Integer.valueOf(Integer.parseInt(MaximumDefrMonthsTotal)));
        in.add(Integer.valueOf(Integer.parseInt(MinimumGapDefr)));
        in.add(Integer.valueOf(Integer.parseInt(NumberDefrAllowedYear)));
        in.add(Integer.valueOf(Integer.parseInt(NumberDefrAllowedTotal)));
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(prepayAllowed)).trim());
        in.add(Integer.valueOf(Integer.parseInt(PrepayLockinPeriod)));
        in.add(Integer.valueOf(Integer.parseInt(NumberPrepayAllowedYear)));
        in.add(Integer.valueOf(Integer.parseInt(NumberPrepayAllowedTotal)));
        in.add(Integer.valueOf(Integer.parseInt(MinimumGapPrepay)));
        in.add(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(MinimumPrepayPercent).trim())).toString());
        in.add(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(MaximumPrepayPercent).trim())).toString());
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(terminationAllowed)).trim());
        in.add(Integer.valueOf(Integer.parseInt(TerminationLockinPeriod)));
        in.add(Integer.valueOf(Integer.parseInt(MinimumGapTermination)));
        in.add(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(CustomerExposureLimit).trim())).toString());
        in.add(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(preEMI).trim())).toString());
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(stat)).trim());
        in.add(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(fixPeriod).trim())).toString());
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(rwEve).trim()));
        in.add(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(gapreviw).trim())).toString());
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getIncrese()).trim()));
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getDecrese()).trim()));
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(additionalDisbAllowed)).trim());
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMakerId()).trim()));
        in.add(date);
        in.add(Integer.valueOf(Integer.parseInt(MinGapPrepayTermination)));
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getValidityDays()).trim()));
        in.add(expDate);
        in.add(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getSchemeExposure()).trim())));
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getLbxBranchIds()).trim()));
        in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getAllselection()).trim()));
        out.add(s1);
        out.add(s2);

        logger.info(new StringBuilder().append("Scheme_Account_save (").append(in.toString()).append(",").append(out.toString()).append(")").toString());
        outMessages = (ArrayList)ConnectionDAOforEJB.callSP("Scheme_Account_save", in, out);
        s1 = CommonFunction.checkNull(outMessages.get(0));
        s2 = CommonFunction.checkNull(outMessages.get(1));
      }
      catch (Exception e)
      {
        e.printStackTrace();
      }
      procval = s2;
      if (s1.equalsIgnoreCase("S"))
      {
        status = true;
        procval = s1;
      }
      else
      {
        status = false;
        procval = s2;
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return procval;
  }

  public ArrayList<CrSchemeMasterVo> modifySchemeDetailsDao(Object ob)
  {
    CrSchemeMasterVo crSchemeMasterVo = (CrSchemeMasterVo)ob;
    ArrayList searchlist = new ArrayList();
    String schemeId = "";
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In modifySchemeDetailsDao()....................");
      StringBuffer bufInsSql = new StringBuffer();
      schemeId = CommonFunction.checkNull(crSchemeMasterVo.getSchemeId());

      bufInsSql.append(" SELECT PRODUCT_ID,SCHEME_DESC,MIN_AMT_FIN,MAX_AMT_FIN,MIN_MARGIN_RATE,");
      bufInsSql.append(" DEFAULT_MARGIN_RATE,RATE_TYPE,RATE_METHOD,BASE_RATE_TYPE,MIN_FLAT_RATE,");
      bufInsSql.append(" MAX_FLAT_RATE,DEF_FLAT_RATE,MIN_EFF_RATE,MAX_EFF_RATE,DEF_EFF_RATE,");
      bufInsSql.append(" MIN_IRR,MAX_IRR,MIN_TENURE,MAX_TENURE,DEF_TENURE,REPAYMENT_FREQ,");
      bufInsSql.append(" INSTALLMENT_TYPE,REPAYMENT_MODE,INSTALLMENT_MODE,if(RESCH_ALLOWED='Y','Active','Inactive')as RESCH_ALLOWED,");
      bufInsSql.append(" RESCH_LOCKIN_PERIOD,NUMBER_RESCH_ALLOWED_YEAR,NUMBER_RESCH_ALLOWED_TOTAL,");
      bufInsSql.append(" MINIMUM_GAP_RESCH,if(DEFERRAL_ALLOWED='Y','Active','Inactive')as DEFERRAL_ALLOWED,DEFR_LOCKIN_PERIOD,MAXIMUM_DEFR_MONTHS_ALLOWED,");
      bufInsSql.append(" MAXIMUM_DEFR_MONTHS_TOTAL,MINIMUM_GAP_DEFR,");
      bufInsSql.append(" NUMBER_DEFR_ALLOWED_YEAR,NUMBER_DEFR_ALLOWED_TOTAL,if(PREPAY_ALLOWED='Y','Active','Inactive')as PREPAY_ALLOWED,");
      bufInsSql.append(" NUMBER_PREPAY_ALLOWED_YEAR,MINIMUM_GAP_PREPAY,");
      bufInsSql.append(" MINIMUM_PREPAY_PERCENT,MAXIMUM_PREPAY_PERCENT,");
      bufInsSql.append(" if(TERMINATION_ALLOWED='Y','Active','Inactive')as TERMINATION_ALLOWED,MINIMUM_GAP_TERMINATION,if(REC_STATUS='A','Active','Inactive')as REC_STATUS, ");
      bufInsSql.append(" PREPAY_LOCKIN_PERIOD,NUMBER_PREPAY_ALLOWED_TOTAL,TERMINATION_LOCKIN_PERIOD,MAX_MARGIN_RATE,SCHEME_ID, ");
      bufInsSql.append(" (SELECT ASSET_FLAG FROM cr_product_m A where V.PRODUCT_ID=A.PRODUCT_ID)As Asset_flag,MINIMUM_PERIOD_RESCH,CUSTOMER_EXPOSURE_LIMIT,PRE_EMI_INTEREST_RATE, ");
      bufInsSql.append(" FLOATING_FIXED_PERIOD,FLOATING_REVIEW_EVENT,MIN_GAP_FLOATING,FLOATING_TYPE_INCREASE,FLOATING_TYPE_DECREASE, ");
      bufInsSql.append(" if(ADDITIONAL_DISBURSAL_ALLOWED='Y','Active','Inactive')as ADDITIONAL_DISBURSAL_ALLOWED,(select A.PRODUCT_DESC from cr_product_m A where A.PRODUCT_ID=V.PRODUCT_ID) AS PRODUCT,MINIMUM_GAP_BT_PREPAY_TERM,Validity_Days,DATE_FORMAT(Expiry_Date,'%d-%m-%Y') ");
      bufInsSql.append(" ,EXPOSURE_AMOUNT, BRANCH_IDS,BRANCH_ACCESS ");
      bufInsSql.append(new StringBuilder().append(" FROM cr_scheme_m V WHERE SCHEME_ID='").append(schemeId).append("'").toString());

      logger.info(new StringBuilder().append("qurey is .....").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN modifySchemeDetailsDao() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append(" modifySchemeDetailsDao size is....").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("modifySchemeDetailsDao ").append(searchlist.get(i).toString()).toString());
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          logger.info(new StringBuilder().append("data.get(0)---ProductID----------->:").append(data.get(0).toString()).toString());
          crSchemeMasterVo.setLbxProductID(CommonFunction.checkNull(data.get(0)).toString());
          logger.info(new StringBuilder().append("getLbxProductID----------->:").append(crSchemeMasterVo.getLbxProductID()).toString());
          crSchemeMasterVo.setSchemeDesc(CommonFunction.checkNull(data.get(1)).toString());

          if (!CommonFunction.checkNull(data.get(2)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(data.get(2)).trim());
            crSchemeMasterVo.setMinAmountFin(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(data.get(3)).trim().equalsIgnoreCase(""))
          {
            Number reconNum1 = this.myFormatter.parse(CommonFunction.checkNull(data.get(3)).trim());
            crSchemeMasterVo.setMaxAmountFin(this.myFormatter.format(reconNum1));
          }

          if (!CommonFunction.checkNull(data.get(4)).equalsIgnoreCase(""))
          {
            Number reconNum2 = this.myFormatter.parse(CommonFunction.checkNull(data.get(4)).trim());
            crSchemeMasterVo.setMinMarginRate(this.myFormatter.format(reconNum2));
          }

          if (!CommonFunction.checkNull(data.get(5)).trim().equalsIgnoreCase(""))
          {
            Number reconNum3 = this.myFormatter.parse(CommonFunction.checkNull(data.get(5)).trim());
            crSchemeMasterVo.setDefaultMarginRate(this.myFormatter.format(reconNum3));
          }

          crSchemeMasterVo.setRateType(CommonFunction.checkNull(data.get(6)).toString());
          crSchemeMasterVo.setRateMethod(CommonFunction.checkNull(data.get(7)).toString());
          crSchemeMasterVo.setBaseRateType(CommonFunction.checkNull(data.get(8)).toString());
          if (!CommonFunction.checkNull(data.get(9)).trim().equalsIgnoreCase(""))
          {
            Number reconNum4 = this.myFormatter.parse(CommonFunction.checkNull(data.get(9)).trim());
            crSchemeMasterVo.setMinFlatRate(this.myFormatter.format(reconNum4));
          }

          if (!CommonFunction.checkNull(data.get(10)).trim().equalsIgnoreCase(""))
          {
            Number reconNum5 = this.myFormatter.parse(CommonFunction.checkNull(data.get(10)).trim());
            crSchemeMasterVo.setMaxFlatRate(this.myFormatter.format(reconNum5));
          }

          if (!CommonFunction.checkNull(data.get(11)).trim().equalsIgnoreCase(""))
          {
            Number reconNum6 = this.myFormatter.parse(CommonFunction.checkNull(data.get(11)).trim());
            crSchemeMasterVo.setDefFlatRate(this.myFormatter.format(reconNum6));
          }

          if (!CommonFunction.checkNull(data.get(12)).trim().equalsIgnoreCase(""))
          {
            Number reconNum7 = this.myFormatter.parse(CommonFunction.checkNull(data.get(12)).trim());
            crSchemeMasterVo.setMinEffRate(this.myFormatter.format(reconNum7));
          }

          if (!CommonFunction.checkNull(data.get(13)).trim().equalsIgnoreCase(""))
          {
            Number reconNum8 = this.myFormatter.parse(CommonFunction.checkNull(data.get(13)).trim());
            crSchemeMasterVo.setMaxEffRate(this.myFormatter.format(reconNum8));
          }

          if (!CommonFunction.checkNull(data.get(14)).trim().equalsIgnoreCase(""))
          {
            Number reconNum9 = this.myFormatter.parse(CommonFunction.checkNull(data.get(14)).trim());
            crSchemeMasterVo.setDefEffRate(this.myFormatter.format(reconNum9));
          }

          if (!CommonFunction.checkNull(data.get(15)).trim().equalsIgnoreCase(""))
          {
            Number reconNum10 = this.myFormatter.parse(CommonFunction.checkNull(data.get(15)).trim());
            crSchemeMasterVo.setMinIrr(this.myFormatter.format(reconNum10));
          }

          if (!CommonFunction.checkNull(data.get(16)).trim().equalsIgnoreCase(""))
          {
            Number reconNum11 = this.myFormatter.parse(CommonFunction.checkNull(data.get(16)).trim());
            crSchemeMasterVo.setMaxIrr(this.myFormatter.format(reconNum11));
          }

          if ((CommonFunction.checkNull(data.get(17)).trim().equals("")) || (CommonFunction.checkNull(data.get(17)).trim().equals("0")))
          {
            crSchemeMasterVo.setMinTenure("1");
          }
          else crSchemeMasterVo.setMinTenure(CommonFunction.checkNull(data.get(17)).trim());

          if ((CommonFunction.checkNull(data.get(18)).trim().equals("")) || (CommonFunction.checkNull(data.get(18)).trim().equals("0")))
          {
            crSchemeMasterVo.setMaxTenure("1");
          }
          else crSchemeMasterVo.setMaxTenure(CommonFunction.checkNull(data.get(18)).trim());

          if ((CommonFunction.checkNull(data.get(19)).trim().equals("")) || (CommonFunction.checkNull(data.get(19)).trim().equals("0")))
          {
            crSchemeMasterVo.setDefTenure("1");
          }
          else crSchemeMasterVo.setDefTenure(CommonFunction.checkNull(data.get(19)).trim());

          crSchemeMasterVo.setRepaymentFreq(CommonFunction.checkNull(data.get(20)).toString());
          crSchemeMasterVo.setInstallmentType(CommonFunction.checkNull(data.get(21)).toString());
          crSchemeMasterVo.setRepaymentMode(CommonFunction.checkNull(data.get(22)).toString());
          crSchemeMasterVo.setInstallmentMode(CommonFunction.checkNull(data.get(23)).toString());
          crSchemeMasterVo.setReschAllowed(CommonFunction.checkNull(data.get(24)).toString());
          crSchemeMasterVo.setReschLockinPeriod(CommonFunction.checkNull(data.get(25)).toString());
          crSchemeMasterVo.setNumberReschAllowedYear(CommonFunction.checkNull(data.get(26)).toString());
          crSchemeMasterVo.setNumberReschAllowedTotal(CommonFunction.checkNull(data.get(27)).toString());
          crSchemeMasterVo.setMinimumGapResch(CommonFunction.checkNull(data.get(28)).toString());
          crSchemeMasterVo.setDeferralAllowed(CommonFunction.checkNull(data.get(29)).toString());
          crSchemeMasterVo.setDefrLockinPeriod(CommonFunction.checkNull(data.get(30)).toString());
          crSchemeMasterVo.setMaximumDefrMonthsAllowed(CommonFunction.checkNull(data.get(31)).toString());
          crSchemeMasterVo.setMaximumDefrMonthsTotal(CommonFunction.checkNull(data.get(32)).toString());
          crSchemeMasterVo.setMinimumGapDefr(CommonFunction.checkNull(data.get(33)).toString());
          crSchemeMasterVo.setNumberDefrAllowedYear(CommonFunction.checkNull(data.get(34)).toString());
          crSchemeMasterVo.setNumberDefrAllowedTotal(CommonFunction.checkNull(data.get(35)).toString());
          crSchemeMasterVo.setPrepayAllowed(CommonFunction.checkNull(data.get(36)).toString());
          crSchemeMasterVo.setNumberPrepayAllowedYear(CommonFunction.checkNull(data.get(37)).toString());
          crSchemeMasterVo.setMinimumGapPrepay(CommonFunction.checkNull(data.get(38)).toString());

          if (!CommonFunction.checkNull(data.get(39)).trim().equalsIgnoreCase(""))
          {
            Number reconNum15 = this.myFormatter.parse(CommonFunction.checkNull(data.get(39)).trim());
            crSchemeMasterVo.setMinimumPrepayPercent(this.myFormatter.format(reconNum15));
          }

          if (!CommonFunction.checkNull(data.get(40)).trim().equalsIgnoreCase(""))
          {
            Number reconNum16 = this.myFormatter.parse(CommonFunction.checkNull(data.get(40)).trim());
            crSchemeMasterVo.setMaximumPrepayPercent(this.myFormatter.format(reconNum16));
          }

          crSchemeMasterVo.setTerminationAllowed(CommonFunction.checkNull(data.get(41)).toString());
          crSchemeMasterVo.setMinimumGapTermination(CommonFunction.checkNull(data.get(42)).toString());
          crSchemeMasterVo.setStatus(CommonFunction.checkNull(data.get(43)).toString());
          crSchemeMasterVo.setPrepayLockinPeriod(CommonFunction.checkNull(data.get(44)).toString());
          crSchemeMasterVo.setNumberPrepayAllowedTotal(CommonFunction.checkNull(data.get(45)).toString());
          crSchemeMasterVo.setTerminationLockinPeriod(CommonFunction.checkNull(data.get(46)).toString());
          if (!CommonFunction.checkNull(data.get(47)).trim().equalsIgnoreCase(""))
          {
            Number reconNum17 = this.myFormatter.parse(CommonFunction.checkNull(data.get(47)).trim());
            crSchemeMasterVo.setMaxMarginRate(this.myFormatter.format(reconNum17));
          }

          crSchemeMasterVo.setSchemeId(CommonFunction.checkNull(data.get(48)).toString());
          crSchemeMasterVo.setLbxAssetFlag(CommonFunction.checkNull(data.get(49)).toString());
          crSchemeMasterVo.setMinPeriodResch(CommonFunction.checkNull(data.get(50)).toString());

          if (!CommonFunction.checkNull(data.get(51)).trim().equalsIgnoreCase(""))
          {
            Number reconNum18 = this.myFormatter.parse(CommonFunction.checkNull(data.get(51)).trim());
            crSchemeMasterVo.setCustomerExposureLimit(this.myFormatter.format(reconNum18));
          }

          if (!CommonFunction.checkNull(data.get(52)).trim().equalsIgnoreCase(""))
          {
            Number reconNum19 = this.myFormatter.parse(CommonFunction.checkNull(data.get(52)).trim());
            crSchemeMasterVo.setPreEMI(this.myFormatter.format(reconNum19));
          }

          if (!CommonFunction.checkNull(data.get(53)).trim().equalsIgnoreCase(""))
          {
            Number reconNum20 = this.myFormatter.parse(CommonFunction.checkNull(data.get(53)).trim());
            crSchemeMasterVo.setFixPriod(this.myFormatter.format(reconNum20));
          }

          crSchemeMasterVo.setReviewEvnet(CommonFunction.checkNull(data.get(54)).toString());

          if (!CommonFunction.checkNull(data.get(55)).trim().equalsIgnoreCase(""))
          {
            Number reconNum21 = this.myFormatter.parse(CommonFunction.checkNull(data.get(55)).trim());
            crSchemeMasterVo.setGapReview(this.myFormatter.format(reconNum21));
          }

          crSchemeMasterVo.setIncrese(CommonFunction.checkNull(data.get(56)).toString());
          crSchemeMasterVo.setDecrese(CommonFunction.checkNull(data.get(57)).toString());

          crSchemeMasterVo.setAdditionalDisbAllowed(CommonFunction.checkNull(data.get(58)).toString());
          crSchemeMasterVo.setProductId(CommonFunction.checkNull(data.get(59)).toString());
          crSchemeMasterVo.setMinimumGapBetPrepayAndTer(CommonFunction.checkNull(data.get(60)).toString());

          crSchemeMasterVo.setValidityDays(CommonFunction.checkNull(data.get(61)).toString());
          crSchemeMasterVo.setExpiryDate(CommonFunction.checkNull(data.get(62)).toString());

          if (!CommonFunction.checkNull(data.get(63)).trim().equalsIgnoreCase(""))
          {
            Number reconNum22 = this.myFormatter.parse(CommonFunction.checkNull(data.get(63)).trim());
            crSchemeMasterVo.setSchemeExposure(this.myFormatter.format(reconNum22));
          }
          crSchemeMasterVo.setLbxBranchIds(CommonFunction.checkNull(data.get(64)).trim());
          crSchemeMasterVo.setSelectionAccecc(CommonFunction.checkNull(data.get(65)).trim());
          detailList.add(crSchemeMasterVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean saveAccountDtl(String[] accountFlagList, String[] checkbox, Object ob)
  {
    CrSchemeMasterVo crSchemeVo = (CrSchemeMasterVo)ob;
    boolean status = false;
    boolean status1 = false;
    logger.info(new StringBuilder().append("accountFlagList: ").append(accountFlagList.length).toString());

    ArrayList qryList = new ArrayList();
    ArrayList qryList1 = new ArrayList();
    PrepStmtObject insertPrepStmtObject = null;
    try
    {
      String qry = new StringBuilder().append("SELECT count(1) FROM tmp_scheme_account_dtl WHERE USER_ID='").append(crSchemeVo.getMakerId()).append("'").toString();
      logger.info(new StringBuilder().append("IN saveAccountDtl...DAOIMPl.......").append(qry).toString());
      String st = ConnectionDAO.singleReturn(qry);

      if (!st.equalsIgnoreCase("0"))
      {
        logger.info("delete query");
        String query1 = new StringBuilder().append("DELETE FROM tmp_scheme_account_dtl WHERE USER_ID='").append(crSchemeVo.getMakerId()).append("'").toString();
        qryList1.add(query1);
        status = ConnectionDAO.sqlInsUpdDelete(qryList1);
        logger.info(new StringBuilder().append("IN saveAccountDtl...DAOIMPl......DELETE QUERY......").append(query1).toString());
      }
      logger.info(new StringBuilder().append("IN saveAccountDtl...DAOIMPl..status.....").append(status).toString());

      for (int i = 0; i < accountFlagList.length; i++)
      {
        insertPrepStmtObject = new PrepStmtObject();
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("INSERT INTO tmp_scheme_account_dtl (STAGE_ID,ACCOUNT_FLAG,USER_ID)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ? )");

        if (CommonFunction.checkNull(checkbox[i]).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(checkbox[i]);
        }

        if (CommonFunction.checkNull(accountFlagList[i]).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(accountFlagList[i]);
        }
        if (CommonFunction.checkNull(crSchemeVo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(crSchemeVo.getMakerId().toUpperCase().trim());
        }
        insertPrepStmtObject.setSql(bufInsSql.toString());
        qryList.add(insertPrepStmtObject);
      }

      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("IN saveAccountDtl() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

      logger.info(new StringBuilder().append("In saveAccountDtl......................").append(status).toString());
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public boolean modifyAccountDtl(String[] accountFlagList, String[] checkbox, Object ob) {
    CrSchemeMasterVo crSchemeVo = (CrSchemeMasterVo)ob;
    boolean status = false;
    boolean status1 = false;
    logger.info(new StringBuilder().append("accountFlagList: ").append(accountFlagList.length).toString());
    String schemId = "";
    ArrayList qryList = new ArrayList();
    ArrayList qryList1 = new ArrayList();
    ArrayList qryList2 = new ArrayList();
    ArrayList qryList3 = new ArrayList();
    ArrayList qryList4 = new ArrayList();
    PrepStmtObject insertPrepStmtObject = null;
    PrepStmtObject insertPrepStmtObject1 = null;
    try
    {
      String query2 = new StringBuilder().append("SELECT COUNT(1) FROM cr_scheme_accounting_dtl WHERE SCHEME_ID='").append(crSchemeVo.getSchemeId()).append("'").toString();
      logger.info(new StringBuilder().append("select query is********************").append(query2).toString());

      String st1 = ConnectionDAO.singleReturn(query2);
      int k = Integer.parseInt(st1);
      logger.info(new StringBuilder().append("IN saveAccountDtl...DAOIMPl..st.....").append(k).toString());
      if (!st1.equalsIgnoreCase("0"))
      {
        String query3 = new StringBuilder().append("DELETE FROM cr_scheme_accounting_dtl WHERE SCHEME_ID='").append(crSchemeVo.getSchemeId()).append("' ").toString();
        qryList3.add(query3);
        status1 = ConnectionDAO.sqlInsUpdDelete(qryList3);
        logger.info(new StringBuilder().append("staus for delete is *account**************").append(status1).toString());
        logger.info(new StringBuilder().append("query for delete is *****account********").append(query3).toString());
      }
      logger.info(new StringBuilder().append("acount listttttttttt").append(accountFlagList.length).toString());
      for (int i = 0; i < accountFlagList.length; i++) {
        schemId = CommonFunction.checkNull(StringEscapeUtils.escapeSql(crSchemeVo.getSchemeId()));

        insertPrepStmtObject = new PrepStmtObject();
        StringBuffer bufInsSql5 = new StringBuffer();
        bufInsSql5.append(" INSERT INTO  cr_scheme_accounting_dtl (SCHEME_ID,STAGE_ID,ACCOUNTING_FLAG)");
        bufInsSql5.append(" values ( ");
        bufInsSql5.append(" ?,");
        bufInsSql5.append(" ?,");
        bufInsSql5.append(" ? )");

        if (CommonFunction.checkNull(schemId).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(schemId);
        }
        if (CommonFunction.checkNull(checkbox[i]).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(checkbox[i]);
        }
        if (CommonFunction.checkNull(accountFlagList[i]).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(accountFlagList[i]);
        }

        insertPrepStmtObject.setSql(bufInsSql5.toString());
        qryList4.add(insertPrepStmtObject);
      }

      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList4);
      logger.info(new StringBuilder().append("IN saveAccountDtl() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      logger.info(new StringBuilder().append("In saveAccountDtl......................").append(status).toString());
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList<CrSchemeMasterVo> stageDetailMapping(Object ob)
  {
    CrSchemeMasterVo crSchemeMasterVo = (CrSchemeMasterVo)ob;
    ArrayList searchlist = new ArrayList();
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In stageDetailMapping()....................");
      StringBuffer bufInsSql = new StringBuffer();

      String makerId = crSchemeMasterVo.getMakerId();

      bufInsSql.append(" SELECT A.STAGE_ID,STAGE_DESC, ");

      bufInsSql.append(" if(B.ACCOUNT_FLAG='Y','Yes','No') AS ACCOUNTING_FLAG ");
      bufInsSql.append(new StringBuilder().append(" FROM cr_stage_m a LEFT OUTER JOIN tmp_scheme_account_dtl b ON A.STAGE_ID = B.STAGE_ID AND USER_ID='").append(makerId).append("' WHERE A.ACCOUNTING_FLAG='Y'").toString());

      logger.info(new StringBuilder().append("In stageDetailMapping() Query is:: ").append(bufInsSql.toString()).toString());

      searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("In accountDetailMappingDao()....................").append(searchlist).toString());

      for (int i = 0; i < searchlist.size(); i++) {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          CrSchemeMasterVo crAccountVo = new CrSchemeMasterVo();
          crAccountVo.setStageId(CommonFunction.checkNull(data.get(0)).toString());
          crAccountVo.setStageDes(CommonFunction.checkNull(data.get(1)).toString());
          crAccountVo.setAccountingFlag(CommonFunction.checkNull(data.get(2)).toString());

          detailList.add(crAccountVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public ArrayList<CrSchemeMasterVo> accountDetailMapping(Object ob)
  {
    String schemeId = "";
    CrSchemeMasterVo crSchemeMasterVo = (CrSchemeMasterVo)ob;
    ArrayList searchlist = new ArrayList();
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In accountDetailMappingDao()....................");
      schemeId = CommonFunction.checkNull(StringEscapeUtils.escapeSql(crSchemeMasterVo.getSchemeId()));
      logger.info(new StringBuilder().append("In accountDetailMappingDao()schemeId....................").append(schemeId).toString());

      StringBuffer bufInsSql = new StringBuffer();

      bufInsSql.append(new StringBuilder().append("SELECT A.STAGE_ID,A.STAGE_DESC,if(V.ACCOUNTING_FLAG='Y','Yes','No') AS ACCOUNTING_FLAG FROM cr_scheme_accounting_dtl V right join cr_stage_m A on A.STAGE_ID=V.STAGE_ID and SCHEME_ID='").append(schemeId).append("' ").toString());
      bufInsSql.append(" WHERE a.ACCOUNTING_FLAG='Y' ");

      logger.info(new StringBuilder().append("Query ").append(bufInsSql.toString()).toString());
      searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("In accountDetailMappingDao()....................").append(searchlist).toString());

      for (int i = 0; i < searchlist.size(); i++) {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          CrSchemeMasterVo crAccountVo = new CrSchemeMasterVo();
          crAccountVo.setStageId(CommonFunction.checkNull(data.get(0)).toString());
          crAccountVo.setStageDes(CommonFunction.checkNull(data.get(1)).toString());
          crAccountVo.setAccountingFlag(CommonFunction.checkNull(data.get(2)).toString());

          detailList.add(crAccountVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean saveModifySchemeDetailsDao(Object ob, String ratMet, String rwEve)
  {
    boolean status = false;
    CrSchemeMasterVo crSchemeMasterVo = (CrSchemeMasterVo)ob;
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

    String stat = "";
    String reschAllowed = "";
    String deferralAllowed = "";
    String prepayAllowed = "";
    String terminationAllowed = "";
    String additionalDisbAllowed = "";
    String allBranchChecked = CommonFunction.checkNull(crSchemeMasterVo.getAllselection());
    try
    {
      if ((crSchemeMasterVo.getStatus() != null) && (crSchemeMasterVo.getStatus().equals("on")))
      {
        stat = "A";
      }
      else stat = "X";

      if ((crSchemeMasterVo.getReschAllowed() != null) && (crSchemeMasterVo.getReschAllowed().equals("on")))
      {
        reschAllowed = "Y";
      }
      else reschAllowed = "N";

      if ((crSchemeMasterVo.getDeferralAllowed() != null) && (crSchemeMasterVo.getDeferralAllowed().equals("on")))
      {
        deferralAllowed = "Y";
      }
      else deferralAllowed = "N";

      if ((crSchemeMasterVo.getPrepayAllowed() != null) && (crSchemeMasterVo.getPrepayAllowed().equals("on")))
      {
        prepayAllowed = "Y";
      }
      else prepayAllowed = "N";

      if ((crSchemeMasterVo.getTerminationAllowed() != null) && (crSchemeMasterVo.getTerminationAllowed().equals("on")))
      {
        terminationAllowed = "Y";
      }
      else terminationAllowed = "N";

      if ((crSchemeMasterVo.getAdditionalDisbAllowed() != null) && (crSchemeMasterVo.getAdditionalDisbAllowed().equals("on")))
      {
        additionalDisbAllowed = "Y";
      }
      else additionalDisbAllowed = "N";

      logger.info("In Update Scheme CodeMaster()........");
      String expDate = CommonFunction.changeFormat(crSchemeMasterVo.getExpiryDate());
      logger.info(new StringBuilder().append("Expiry Date : ").append(expDate).toString());
      StringBuffer bufInsSql = new StringBuffer();

      bufInsSql.append(" UPDATE cr_scheme_m SET PRODUCT_ID=?,SCHEME_DESC=?,SCHEME_DESC_L=?,MIN_AMT_FIN=?,MAX_AMT_FIN=?,MIN_MARGIN_RATE=?, ");
      bufInsSql.append(" MAX_MARGIN_RATE=?,DEFAULT_MARGIN_RATE=?,RATE_TYPE=?,RATE_METHOD=?,BASE_RATE_TYPE=?,MIN_FLAT_RATE=?, ");
      bufInsSql.append(" MAX_FLAT_RATE=?,DEF_FLAT_RATE=?,MIN_EFF_RATE=?,MAX_EFF_RATE=?,DEF_EFF_RATE=?, ");
      bufInsSql.append(" MIN_IRR=?,MAX_IRR=?,MIN_TENURE=?,MAX_TENURE=?,DEF_TENURE=?,REPAYMENT_FREQ=?,");
      bufInsSql.append(" INSTALLMENT_TYPE=?,REPAYMENT_MODE=?,INSTALLMENT_MODE=?,MINIMUM_PERIOD_RESCH=?,RESCH_ALLOWED=?, ");
      bufInsSql.append(" RESCH_LOCKIN_PERIOD=?,NUMBER_RESCH_ALLOWED_YEAR=?,NUMBER_RESCH_ALLOWED_TOTAL=?, ");
      bufInsSql.append(" MINIMUM_GAP_RESCH=?,DEFERRAL_ALLOWED=?,DEFR_LOCKIN_PERIOD=?,MAXIMUM_DEFR_MONTHS_ALLOWED=?, ");
      bufInsSql.append(" MAXIMUM_DEFR_MONTHS_TOTAL=?,MINIMUM_GAP_DEFR=?, ");
      bufInsSql.append(" NUMBER_DEFR_ALLOWED_YEAR=?,NUMBER_DEFR_ALLOWED_TOTAL=?,PREPAY_ALLOWED=?, ");
      bufInsSql.append(" NUMBER_PREPAY_ALLOWED_YEAR=?,MINIMUM_GAP_PREPAY=?, ");
      bufInsSql.append(" MINIMUM_PREPAY_PERCENT=?,MAXIMUM_PREPAY_PERCENT=?,TERMINATION_ALLOWED=?, ");
      bufInsSql.append(" MINIMUM_GAP_TERMINATION=?,PREPAY_LOCKIN_PERIOD=?,NUMBER_PREPAY_ALLOWED_TOTAL=?,TERMINATION_LOCKIN_PERIOD=?,REC_STATUS=?,CUSTOMER_EXPOSURE_LIMIT=?,PRE_EMI_INTEREST_RATE=?,");
      bufInsSql.append(new StringBuilder().append(" FLOATING_FIXED_PERIOD=?,FLOATING_REVIEW_EVENT=?,MIN_GAP_FLOATING=?,FLOATING_TYPE_INCREASE=?,FLOATING_TYPE_DECREASE=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),ADDITIONAL_DISBURSAL_ALLOWED=?,MINIMUM_GAP_BT_PREPAY_TERM=?,Validity_Days=?,Expiry_Date=?,EXPOSURE_AMOUNT = ?,BRANCH_IDS=?,BRANCH_ACCESS=? WHERE SCHEME_ID=? ").toString());

      if (CommonFunction.checkNull(crSchemeMasterVo.getLbxProductID()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getLbxProductID().trim());

      if (CommonFunction.checkNull(crSchemeMasterVo.getSchemeDesc()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getSchemeDesc().toUpperCase().trim());

      if (CommonFunction.checkNull(crSchemeMasterVo.getSchemeDesc()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getSchemeDesc().toUpperCase().trim());

      if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(crSchemeMasterVo.getMinAmountFin()).trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.00");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(crSchemeMasterVo.getMinAmountFin()).trim()).toString());
      }

      if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(crSchemeMasterVo.getMaxAmountFin()).trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.00");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(crSchemeMasterVo.getMaxAmountFin()).trim()).toString());
      }

      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMinMarginRate()).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addString("0.00");
      }
      else insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMinMarginRate()).trim())).toString());

      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMaxMarginRate()).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addString("0.00");
      }
      else insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMaxMarginRate()).trim())).toString());

      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getDefaultMarginRate()).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addString("0.00");
      }
      else insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getDefaultMarginRate()).trim())).toString());

      if (CommonFunction.checkNull(crSchemeMasterVo.getRateType()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getRateType().toUpperCase().trim());

      if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(ratMet).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(ratMet).trim()).toString());

      if (CommonFunction.checkNull(crSchemeMasterVo.getBaseRateType()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getBaseRateType().toUpperCase().trim());

      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMinFlatRate()).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addString("0.00");
      }
      else insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMinFlatRate()).trim())).toString());

      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMaxFlatRate()).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addString("0.00");
      }
      else insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMaxFlatRate()).trim())).toString());

      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getDefFlatRate()).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addString("0.00");
      }
      else insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getDefFlatRate()).trim())).toString());

      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMinEffRate()).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addString("0.00");
      }
      else insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMinEffRate()).trim())).toString());

      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMaxEffRate()).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addString("0.00");
      }
      else insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMaxEffRate()).trim())).toString());

      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getDefEffRate()).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addString("0.00");
      }
      else insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getDefEffRate()).trim())).toString());

      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMinIrr()).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addString("0.00");
      }
      else insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMinIrr()).trim())).toString());

      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMaxIrr()).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addString("0.00");
      }
      else insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMaxIrr()).trim())).toString());

      if ((StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMinTenure()).trim()).equals("")) || (StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMinTenure()).trim()).equals("0")))
      {
        insertPrepStmtObject.addString("1");
      }
      else insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMinTenure()).trim()).toString());

      if ((StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMaxTenure()).trim()).equals("")) || (StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMaxTenure()).trim()).equals("0")))
      {
        insertPrepStmtObject.addString("1");
      }
      else insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMaxTenure()).trim()).toString());

      if ((StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getDefTenure()).trim()).equals("")) || (StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getDefTenure()).trim()).equals("0")))
      {
        insertPrepStmtObject.addString("1");
      }
      else insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getDefTenure()).trim()).toString());

      if (CommonFunction.checkNull(crSchemeMasterVo.getRepaymentFreq()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getRepaymentFreq().toUpperCase().trim());

      if (CommonFunction.checkNull(crSchemeMasterVo.getInstallmentType()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getInstallmentType().toUpperCase().trim());

      if (CommonFunction.checkNull(crSchemeMasterVo.getRepaymentMode()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getRepaymentMode().toUpperCase().trim());

      if (CommonFunction.checkNull(crSchemeMasterVo.getInstallmentMode()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getInstallmentMode().toUpperCase().trim());

      if (CommonFunction.checkNull(crSchemeMasterVo.getMinPeriodResch()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getMinPeriodResch().toUpperCase().trim());

      if (CommonFunction.checkNull(reschAllowed).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(reschAllowed);
      }
      if (CommonFunction.checkNull(crSchemeMasterVo.getReschLockinPeriod()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getReschLockinPeriod().toUpperCase().trim());

      if (CommonFunction.checkNull(crSchemeMasterVo.getNumberReschAllowedYear()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getNumberReschAllowedYear().toUpperCase().trim());

      if (CommonFunction.checkNull(crSchemeMasterVo.getNumberReschAllowedTotal()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getNumberReschAllowedTotal().toUpperCase().trim());

      if (CommonFunction.checkNull(crSchemeMasterVo.getMinimumGapResch()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getMinimumGapResch().toUpperCase().trim());

      if (CommonFunction.checkNull(deferralAllowed).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(deferralAllowed);
      }
      if (CommonFunction.checkNull(crSchemeMasterVo.getDefrLockinPeriod()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getDefrLockinPeriod().toUpperCase().trim());

      if (CommonFunction.checkNull(crSchemeMasterVo.getMaximumDefrMonthsAllowed()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getMaximumDefrMonthsAllowed().toUpperCase().trim());

      if (CommonFunction.checkNull(crSchemeMasterVo.getMaximumDefrMonthsTotal()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getMaximumDefrMonthsTotal().toUpperCase().trim());

      if (CommonFunction.checkNull(crSchemeMasterVo.getMinimumGapDefr()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getMinimumGapDefr().toUpperCase().trim());

      if (CommonFunction.checkNull(crSchemeMasterVo.getNumberDefrAllowedYear()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getNumberDefrAllowedYear().toUpperCase().trim());

      if (CommonFunction.checkNull(crSchemeMasterVo.getNumberDefrAllowedTotal()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getNumberDefrAllowedTotal().toUpperCase().trim());

      if (CommonFunction.checkNull(prepayAllowed).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(prepayAllowed);
      }
      if (CommonFunction.checkNull(crSchemeMasterVo.getNumberPrepayAllowedYear()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getNumberPrepayAllowedYear().toUpperCase().trim());

      if (CommonFunction.checkNull(crSchemeMasterVo.getMinimumGapPrepay()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getMinimumGapPrepay().toUpperCase().trim());

      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMinimumPrepayPercent()).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addString("0.00");
      }
      else insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMinimumPrepayPercent()).trim())).toString());

      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMaximumPrepayPercent()).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addString("0.00");
      }
      else insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getMaximumPrepayPercent()).trim())).toString());

      if (CommonFunction.checkNull(terminationAllowed).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(terminationAllowed);

      if (CommonFunction.checkNull(crSchemeMasterVo.getMinimumGapTermination()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getMinimumGapTermination().toUpperCase().trim());

      if (CommonFunction.checkNull(crSchemeMasterVo.getPrepayLockinPeriod()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getPrepayLockinPeriod().toUpperCase().trim());

      if (CommonFunction.checkNull(crSchemeMasterVo.getNumberPrepayAllowedTotal()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getNumberPrepayAllowedTotal().toUpperCase().trim());

      if (CommonFunction.checkNull(crSchemeMasterVo.getTerminationLockinPeriod()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getTerminationLockinPeriod().toUpperCase().trim());

      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat);
      }
      if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(crSchemeMasterVo.getCustomerExposureLimit()).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addString("0.00");
      }
      else insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getCustomerExposureLimit()).trim())).toString());

      if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(crSchemeMasterVo.getPreEMI()).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addString("0.00");
      }
      else insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getPreEMI()).trim())).toString());

      if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(crSchemeMasterVo.getFixPriod()).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addString("0.00");
      }
      else insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getFixPriod()).trim())).toString());

      if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(rwEve).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(rwEve).trim()).toString());

      if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(crSchemeMasterVo.getGapReview()).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addString("0.00");
      }
      else insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getGapReview()).trim())).toString());

      if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(crSchemeMasterVo.getIncrese()).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getIncrese()).trim()).toString());

      if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(crSchemeMasterVo.getDecrese()).trim()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getDecrese()).trim()).toString());

      if (CommonFunction.checkNull(crSchemeMasterVo.getMakerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getMakerId());
      if (CommonFunction.checkNull(crSchemeMasterVo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(crSchemeMasterVo.getMakerDate());

      if (CommonFunction.checkNull(additionalDisbAllowed).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(additionalDisbAllowed);
      }

      if (CommonFunction.checkNull(crSchemeMasterVo.getMinimumGapBetPrepayAndTer()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(crSchemeMasterVo.getMinimumGapBetPrepayAndTer().toUpperCase().trim());
      if (CommonFunction.checkNull(crSchemeMasterVo.getValidityDays()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(crSchemeMasterVo.getValidityDays());
      }
      if (CommonFunction.checkNull(expDate).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(expDate);
      }

      if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(crSchemeMasterVo.getSchemeExposure()).trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.00");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(crSchemeMasterVo.getSchemeExposure()).trim())).toString());
      }

      String branchIds = "";
      if (CommonFunction.checkNull(allBranchChecked).trim().equalsIgnoreCase("S"))
      {
        branchIds = CommonFunction.checkNull(crSchemeMasterVo.getLbxBranchIds()).trim();
      }
      else
      {
        String qr = "select GROUP_CONCAT(BRANCH_ID separator '|') from com_branch_m where ifnull(REC_STATUS,'A')='A'";
        branchIds = ConnectionDAO.singleReturn(qr);
      }
      insertPrepStmtObject.addString(CommonFunction.checkNull(branchIds).trim());

      if (CommonFunction.checkNull(crSchemeMasterVo.getAllselection()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(crSchemeMasterVo.getAllselection());
      }

      if (CommonFunction.checkNull(crSchemeMasterVo.getSchemeId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(crSchemeMasterVo.getSchemeId());
      }
      insertPrepStmtObject.setSql(bufInsSql.toString());
      qryList.add(insertPrepStmtObject);

      String branchDelete = new StringBuilder().append("delete from cr_scheme_branch_mapping_dtl where scheme_id='").append(CommonFunction.checkNull(crSchemeMasterVo.getSchemeId()).trim()).append("' ").toString();
      PrepStmtObject istmt = new PrepStmtObject();
      istmt.setSql(branchDelete);
      qryList.add(istmt);
      if (CommonFunction.checkNull(allBranchChecked).trim().equalsIgnoreCase("S"))
      {
        String[] arr = CommonFunction.checkNull(crSchemeMasterVo.getLbxBranchIds()).trim().split("\\|");
        for (int i = 0; i < arr.length; i++)
        {
          PrepStmtObject insStmt = new PrepStmtObject();
          String qry = new StringBuilder().append("INSERT INTO cr_scheme_branch_mapping_dtl(SCHEME_ID,BRANCH_ID,REC_STATUS)VALUES(").append(CommonFunction.checkNull(crSchemeMasterVo.getSchemeId()).trim()).append(",").append(arr[i]).append(",'A')").toString();

          insStmt.setSql(qry);
          qryList.add(insStmt);

          insStmt = null;
          qry = null;
        }

      }
      else
      {
        PrepStmtObject insStmt = new PrepStmtObject();
        String qry = new StringBuilder().append(" INSERT INTO cr_scheme_branch_mapping_dtl(SCHEME_ID,BRANCH_ID,REC_STATUS)  SELECT ").append(CommonFunction.checkNull(crSchemeMasterVo.getSchemeId()).trim()).append(", ").append(" BRANCH_ID,'A' from com_branch_m where ifnull(REC_STATUS,'A')='A'").toString();

        logger.info(new StringBuilder().append("In getListOfValues").append(qry.toString()).toString());
        insStmt.setSql(qry);
        qryList.add(insStmt);

        insStmt = null;
        qry = null;
      }

      logger.info(new StringBuilder().append("In getListOfValues").append(bufInsSql).toString());
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("query is .fererwerewrewrf..").append(qryList).toString());
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      stat = null;
      reschAllowed = null;
      deferralAllowed = null;
      prepayAllowed = null;
      terminationAllowed = null;
      additionalDisbAllowed = null;
      allBranchChecked = null;
    }

    return status;
  }

  public String getbeforemakerdate()
  {
    Connection con = null;

    CallableStatement cs = null;
    ResultSet rs = null;
    String logindate = null;

    System.out.println("Enter for DB isUserExist action");
    try {
      con = ConnectionDAOforEJB.getConnection();
      if (con != null)
      {
        String login = new StringBuilder().append("SELECT DATE_FORMAT(PARAMETER_VALUE,'").append(this.dateFormat).append("') FROM parameter_mst WHERE PARAMETER_KEY='BUSINESS_DATE'").toString();

        logindate = ConnectionDAOforEJB.singleReturn(login);
      }
    }
    finally
    {
      ConnectionDAOforEJB.closeConnection(con, cs, rs);
    }

    return logindate;
  }

  public String getlogintimeid(String userName)
  {
    String userid = null;
    Connection con = null;
    CallableStatement cs = null;
    ResultSet rs = null;

    logger.info("Enter for DB getlogintimeid action");
    try {
      con = ConnectionDAOforEJB.getConnection();
      if (con != null)
      {
        String sqluserid = new StringBuilder().append("select USER_ID from sec_user_m where USER_ID='").append(userName).append("'").toString();

        userid = ConnectionDAOforEJB.singleReturn(sqluserid);

        logger.info(new StringBuilder().append("----------userid-------").append(userid).toString());
      }
    }
    finally
    {
      ConnectionDAOforEJB.closeConnection(con, cs, rs);
    }

    logger.info(new StringBuilder().append("----------userid-------").append(userid).toString());
    return userid;
  }

  public ArrayList<NPAMasterVo> getNPAStageData()
  {
    ArrayList list = null;
    ArrayList detailList = new ArrayList();
    NPAMasterVo vo = null;
    StringBuffer bufInsSql = new StringBuffer();
    ArrayList data = null;
    try
    {
      logger.info("In getNPAStageData.....................................Dao Impl");
      bufInsSql.append(" SELECT PRODUCT_ID,NPA_STAGE,SEQ_NO,NPA_CRITERIA_FLAG,NPA_CRITERIA_VALUE,MOVE_TO_NEXT,MOVE_TO_PREV,");
      bufInsSql.append(" if(BILLING_FLAG='Y','Yes','No')as BILLING_FLAG,if(ACCRUAL_FLAG='Y','Yes','No')as ACCRUAL_FLAG,");
      bufInsSql.append(" if(REC_STATUS='A','Active','Inactive')as Status,if(SD_ACCRUAL_FLAG='Y','Yes','No')as SD_ACCRUAL_FLAG  FROM cr_npa_m ORDER by NPA_STAGE");
      list = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      int size = list.size();
      for (int i = 0; i < size; i++)
      {
        data = (ArrayList)list.get(i);

        if (data.size() > 0) {
          vo = new NPAMasterVo();
          vo.setProductId(CommonFunction.checkNull(data.get(0)).toString());
          vo.setNpaStage(CommonFunction.checkNull(data.get(1)).toString());
          vo.setSequenceNo(CommonFunction.checkNull(data.get(2)).toString());
          vo.setNpaCriteria(CommonFunction.checkNull(data.get(3)).toString());
          vo.setNpaCriteriaValue(CommonFunction.checkNull(data.get(4)).toString());
          vo.setMoveToNext(CommonFunction.checkNull(data.get(5)).toString());
          vo.setMoveToPrevious(CommonFunction.checkNull(data.get(6)).toString());
          vo.setBillingFlagStatus(CommonFunction.checkNull(data.get(7)).toString());
          vo.setAccrualFlagStatus(CommonFunction.checkNull(data.get(8)).toString());
          vo.setNpaStageStatus(CommonFunction.checkNull(data.get(9)).toString());
          vo.setSdAccrualFlag(CommonFunction.checkNull(data.get(10)).toString());
          detailList.add(vo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      bufInsSql = null;
      list.clear();
      list = null;
      vo = null;
      data.clear();
      data = null;
    }
    return detailList;
  }

  public String insertNPAStageMaster(Object ob)
  {
    logger.info("In insertNPAStageMaster() of MasterDAOImpl");
    String result = null;
    NPAMasterVo vo = (NPAMasterVo)ob;
    boolean status = false;
    StringBuffer query = new StringBuffer();
    ArrayList qryList = null;
    PrepStmtObject insertPrepStmtObject = null;
    StringBuffer bufInsSql = new StringBuffer();
    if (CommonFunction.checkNull(vo.getNpaStage()).trim().equalsIgnoreCase("REGULAR")) {
      result = "REGULAR";
    }
    else
    {
      query.append(new StringBuilder().append("select NPA_STAGE,SEQ_NO from cr_npa_m where  NPA_STAGE='").append(StringEscapeUtils.escapeSql(vo.getNpaStage().trim())).append("' ").toString());
      query.append(new StringBuilder().append(" and PRODUCT_ID = '").append(StringEscapeUtils.escapeSql(vo.getProductId().trim())).append("'\tor SEQ_NO='").append(StringEscapeUtils.escapeSql(vo.getSequenceNo().trim())).append("' ").toString());
      logger.info(new StringBuilder().append("In insertNPAStageMaster() of MasterDAOImpl Query for check Existing NPA_STAGE and SEQ_NO : ").append(query.toString()).toString());
      try
      {
        status = ConnectionDAOforEJB.checkStatus(query.toString());
      }
      catch (Exception e)
      {
        e.printStackTrace();
        result = "ERROR";
      }
      if (status) {
        result = "EXIST";
      }
      else {
        qryList = new ArrayList();
        insertPrepStmtObject = new PrepStmtObject();
        String stat = "X";
        String stat1 = "N";
        String stat2 = "N";
        String stat3 = "N";

        if ((vo.getNpaStageStatus() != null) && (vo.getNpaStageStatus().equals("on")))
          stat = "A";
        if ((vo.getBillingFlagStatus() != null) && (vo.getBillingFlagStatus().equals("on")))
          stat1 = "Y";
        if ((vo.getAccrualFlagStatus() != null) && (vo.getAccrualFlagStatus().equals("on")))
          stat2 = "Y";
        if ((vo.getSdAccrualFlag() != null) && (vo.getSdAccrualFlag().equals("on"))) {
          stat3 = "Y";
        }
        bufInsSql.append("insert into cr_npa_m(PRODUCT_ID,NPA_STAGE,SEQ_NO,NPA_CRITERIA_FLAG,NPA_CRITERIA_VALUE,MOVE_TO_NEXT,MOVE_TO_PREV,BILLING_FLAG,ACCRUAL_FLAG,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,SD_ACCRUAL_FLAG )");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) ,").toString());
        bufInsSql.append(" ?)");

        if (CommonFunction.checkNull(vo.getProductId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getProductId().toUpperCase().trim());
        if (CommonFunction.checkNull(vo.getNpaStage()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getNpaStage().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getSequenceNo()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getSequenceNo().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getNpaCriteria()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getNpaCriteria().trim());
        }
        if (CommonFunction.checkNull(vo.getNpaCriteriaValue()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getNpaCriteriaValue().trim());
        }
        if (CommonFunction.checkNull(vo.getMoveToNext()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMoveToNext().trim());
        }
        if (CommonFunction.checkNull(vo.getMoveToPrevious()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMoveToPrevious().trim());
        }
        if (CommonFunction.checkNull(stat1).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat1);
        }
        if (CommonFunction.checkNull(stat2).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat2);
        }
        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerId());
        }
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerDate());
        }
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerId());
        }
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerDate());
        }
        if (CommonFunction.checkNull(stat3).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat3);
        }
        insertPrepStmtObject.setSql(bufInsSql.toString());

        logger.info(new StringBuilder().append("In insertNPAStageMaster() of MasterDAOImpl Query for insert record :  ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        boolean flag = false;
        try
        {
          flag = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
          if (flag) {
            result = "SAVE";
          }

        }
        catch (Exception e)
        {
          e.printStackTrace();
          result = "ERROR";
        }
        finally
        {
          insertPrepStmtObject = null;
          query = null;
          qryList.clear();
          qryList = null;
          vo = null;
          bufInsSql = null;
          stat = null;
          stat1 = null;
          stat2 = null;
          stat3 = null;
          ob = null;
        }

      }

    }

    return result;
  }

  public ArrayList<NPAMasterVo> searchNPAStageData(Object ob)
  {
    String npaSearchStage = null;
    String sequenceNoSearch = null;
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    ArrayList data = null;
    ArrayList searchlist = new ArrayList();
    NPAMasterVo npaMasterVo = (NPAMasterVo)ob;
    ArrayList detailList = new ArrayList();
    StringBuffer bufInsSql = new StringBuffer();
    StringBuffer bufInsSqlTempCount = new StringBuffer();
    NPAMasterVo vo = null;
    try
    {
      logger.info("In searchNPAStageData().....................................Dao Impl");
      logger.info(new StringBuilder().append("product_id == ").append(npaMasterVo.getProductId()).toString());
      npaSearchStage = StringEscapeUtils.escapeSql(CommonFunction.checkNull(npaMasterVo.getNpaSearchStage())).trim();
      sequenceNoSearch = StringEscapeUtils.escapeSql(CommonFunction.checkNull(npaMasterVo.getSequenceNoSearch())).trim();

      bufInsSql.append(" SELECT NPA_STAGE,SEQ_NO,if(NPA_CRITERIA_FLAG='D','DPD','Installments')as NPA_CRITERIA,");
      bufInsSql.append(" NPA_CRITERIA_VALUE,");
      bufInsSql.append(" if(MOVE_TO_NEXT='M','Manual','Auto')as NEXT_STAGE,");
      bufInsSql.append(" if(MOVE_TO_PREV='M','Manual','Auto')as PREVIOUS_STAGE,");
      bufInsSql.append(" if(BILLING_FLAG='Y','Yes','No')as BILLING_FLAG,if(ACCRUAL_FLAG='Y','Yes','No')as ACCRUAL_FLAG,");
      bufInsSql.append(" if(cr_npa_m.REC_STATUS='A','Active','Inactive')as Status,NPA_CRITERIA_FLAG,MOVE_TO_NEXT,MOVE_TO_PREV,if(SD_ACCRUAL_FLAG='Y','Yes','No')as SD_ACCRUAL_FLAG,cr_npa_m.product_id,cr_product_m.PRODUCT_DESC as PRODUCT_DESCRIPTION FROM cr_npa_m ");
      bufInsSql.append(" join cr_product_m on cr_npa_m.PRODUCT_ID = cr_product_m.PRODUCT_ID");
      bufInsSqlTempCount.append("SELECT COUNT(1) FROM cr_npa_m ");

      if ((!npaSearchStage.equalsIgnoreCase("")) && (!sequenceNoSearch.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE NPA_STAGE ='").append(npaSearchStage).append("' AND SEQ_NO='").append(sequenceNoSearch).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE NPA_STAGE ='").append(npaSearchStage).append("' AND SEQ_NO='").append(sequenceNoSearch).append("' ").toString());
      }
      else if (!sequenceNoSearch.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE SEQ_NO='").append(sequenceNoSearch).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE SEQ_NO='").append(sequenceNoSearch).append("' ").toString());
      }
      else if (!npaSearchStage.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE NPA_STAGE = '").append(npaSearchStage).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE NPA_STAGE = '").append(npaSearchStage).append("' ").toString());
      }
      bufInsSql.append(" ORDER by NPA_STAGE");
      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((sequenceNoSearch.trim() == null) && (npaSearchStage.trim() == null)) || ((sequenceNoSearch.trim().equalsIgnoreCase("")) && (npaSearchStage.trim().equalsIgnoreCase(""))) || (npaMasterVo.getCurrentPageLink() > 1))
      {
        if (npaMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (npaMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchNPAStageData() search query1 ### ").append(bufInsSql.toString()).toString());

      int size = searchlist.size();
      for (int i = 0; i < size; i++)
      {
        data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          vo = new NPAMasterVo();

          vo.setNpaStageModify(new StringBuilder().append("<a href=npaStageMasterSearch.do?method=openEditNPAStage&npaSearchStage=").append(CommonFunction.checkNull(data.get(0)).toString()).append("&sequenceNoSearch=").append(CommonFunction.checkNull(data.get(1)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          vo.setNpaStage(CommonFunction.checkNull(data.get(0)).toString());
          vo.setSequenceNo(CommonFunction.checkNull(data.get(1)).toString());
          vo.setNpaCriteriaModify(CommonFunction.checkNull(data.get(2)).toString());
          vo.setNpaCriteriaValue(CommonFunction.checkNull(data.get(3)).toString());

          vo.setMoveToNextModify(CommonFunction.checkNull(data.get(4)).toString());
          vo.setMoveToPreviousModify(CommonFunction.checkNull(data.get(5)).toString());
          vo.setBillingFlagStatus(CommonFunction.checkNull(data.get(6)).toString());
          vo.setAccrualFlagStatus(CommonFunction.checkNull(data.get(7)).toString());
          vo.setNpaStageStatus(CommonFunction.checkNull(data.get(8)).toString());

          vo.setNpaCriteria(CommonFunction.checkNull(data.get(9)).toString());
          vo.setMoveToNext(CommonFunction.checkNull(data.get(10)).toString());
          vo.setMoveToPrevious(CommonFunction.checkNull(data.get(11)).toString());
          vo.setSdAccrualFlag(CommonFunction.checkNull(data.get(12)).toString());
          vo.setProductId(CommonFunction.checkNull(data.get(13)).toString());
          vo.setProDesc(CommonFunction.checkNull(data.get(14)).toString());
          vo.setTotalRecordSize(count);
          detailList.add(vo);
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      bufInsSql = null;
      bufInsSqlTempCount = null;
      searchlist.clear();
      searchlist = null;
      npaMasterVo = null;
      ob = null;
      data = null;
      vo = null;
      npaSearchStage = null;
      sequenceNoSearch = null;
    }

    return detailList;
  }

  public String updateNPAStageData(Object ob)
  {
    String result = null;
    logger.info("In updateNPAStageData() of MasterDAOImpl");
    NPAMasterVo vo = (NPAMasterVo)ob;
    StringBuffer query = new StringBuffer();
    ArrayList updatelist = null;
    PrepStmtObject insertPrepStmtObject = null;
    StringBuffer bufInsSql = null;
    boolean status = false;
    query.append(new StringBuilder().append("select SEQ_NO from cr_npa_m where SEQ_NO ='").append(StringEscapeUtils.escapeSql(vo.getSequenceNo().trim())).append("'").toString());
    query.append(new StringBuilder().append(" AND NPA_STAGE <> '").append(StringEscapeUtils.escapeSql(vo.getNpaStage().trim())).append("'").toString());
    logger.info(new StringBuilder().append("In updateNPAStageData() of MasterDAOImpl Query for check Existing SEQ_NO : ").append(query.toString()).toString());
    try
    {
      status = ConnectionDAOforEJB.checkStatus(query.toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
      result = "ERROR";
    }
    if (status) {
      result = "EXIST";
    }
    else {
      updatelist = new ArrayList();
      insertPrepStmtObject = new PrepStmtObject();
      String stat = null;
      String stat1 = "N";
      String stat2 = null;
      String stat3 = "N";

      if ((vo.getNpaStageStatus() != null) && (vo.getNpaStageStatus().equals("on")))
        stat = "A";
      if ((vo.getBillingFlagStatus() != null) && (vo.getBillingFlagStatus().equals("on")))
        stat1 = "Y";
      if ((vo.getAccrualFlagStatus() != null) && (vo.getAccrualFlagStatus().equals("on")))
        stat2 = "Y";
      if ((vo.getSdAccrualFlag() != null) && (vo.getSdAccrualFlag().equals("on"))) {
        stat3 = "Y";
      }

      bufInsSql = new StringBuffer();

      bufInsSql.append(new StringBuilder().append("UPDATE cr_npa_m set NPA_CRITERIA_FLAG=?,NPA_CRITERIA_VALUE=?,MOVE_TO_NEXT=?,MOVE_TO_PREV=?,BILLING_FLAG=?,ACCRUAL_FLAG=?,REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),SD_ACCRUAL_FLAG=?  where SEQ_NO=?").toString());

      if (CommonFunction.checkNull(vo.getNpaCriteria()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getNpaCriteria().trim());
      }
      if (CommonFunction.checkNull(vo.getNpaCriteriaValue()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getNpaCriteriaValue().trim());
      }
      if (CommonFunction.checkNull(vo.getMoveToNext()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMoveToNext().trim());
      }
      if (CommonFunction.checkNull(vo.getMoveToPrevious()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMoveToPrevious().trim());
      }
      if (CommonFunction.checkNull(stat1).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat1);
      }
      if (CommonFunction.checkNull(stat2).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat2);
      }
      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat);
      }
      if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getMakerId());
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerDate());
      }
      if (CommonFunction.checkNull(stat3).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat3);
      }

      if (CommonFunction.checkNull(vo.getSequenceNo()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getSequenceNo().toUpperCase().trim());
      insertPrepStmtObject.setSql(bufInsSql.toString());
      updatelist.add(insertPrepStmtObject);

      logger.info(new StringBuilder().append("In query").append(insertPrepStmtObject.printQuery()).toString());

      boolean st = false;
      try
      {
        st = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);

        if (st)
          result = "UPDATE";
      }
      catch (Exception e)
      {
        e.printStackTrace();
        result = "ERROR";
      }
      finally
      {
        bufInsSql = null;
        insertPrepStmtObject = null;
        stat = null;
        stat1 = null;
        stat2 = null;
        stat3 = null;
        ob = null;
        vo = null;
        query = null;
        updatelist.clear();
        updatelist = null;
      }
    }

    return result;
  }

  public ArrayList<BankAccountMasterVo> searchBankAccountData(Object ob)
  {
    ArrayList searchlist = new ArrayList();
    String query1 = "";

    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    String bankCode = "";
    String bankBranchName = "";
    String accountNo = "";
    BankAccountMasterVo bankAccountMasterVo = (BankAccountMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In searchBankAccountData...............");

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bankCode = StringEscapeUtils.escapeSql(CommonFunction.checkNull(bankAccountMasterVo.getLbxBankSearchID())).trim();
      bankBranchName = StringEscapeUtils.escapeSql(CommonFunction.checkNull(bankAccountMasterVo.getLbxBranchSearchID())).trim();
      accountNo = StringEscapeUtils.escapeSql(CommonFunction.checkNull(bankAccountMasterVo.getAccountNo())).trim();

      logger.info(new StringBuilder().append("bankAccountMasterVo.....   accountNo..").append(accountNo).toString());

      bufInsSql.append("SELECT BANK_ID,(SELECT A.BANK_NAME FROM COM_BANK_M A WHERE A.BANK_ID=V.BANK_ID ) AS BANK_NAME,");
      bufInsSql.append(" BANK_BRANCH_ID,(SELECT B.BANK_BRANCH_NAME FROM COM_BANKBRANCH_M B WHERE B.BANK_BRANCH_ID=V.BANK_BRANCH_ID ) AS BANK_BRANCH_NAME,");
      bufInsSql.append(" BANK_ACCOUNT,BRANCH_MICR_CODE,BRANCH_IFCS_CODE,GL_CODE,ACCOUNT_TYPE,IF(REC_STATUS='A','Active','Inactive')AS REC_STATUS,V.CLIENT_CODE,V.DRAWING_POWER ");
      bufInsSql.append(" FROM COM_BANK_ACCOUNTS_M V");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM COM_BANK_ACCOUNTS_M");

      if ((!bankCode.equals("")) && (!bankBranchName.equals("")) && (!accountNo.equals(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE BANK_ID = '").append(bankCode).append("' AND BANK_BRANCH_ID='").append(bankBranchName).append("'AND BANK_ACCOUNT='").append(accountNo).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE BANK_ID = '").append(bankCode).append("' AND BANK_BRANCH_ID='").append(bankBranchName).append("'AND BANK_ACCOUNT='").append(accountNo).append("' ").toString());
      }
      else if ((!bankCode.equals("")) && (!bankBranchName.equals(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE BANK_ID = '").append(bankCode).append("' AND BANK_BRANCH_ID='").append(bankBranchName).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE BANK_ID = '").append(bankCode).append("' AND BANK_BRANCH_ID='").append(bankBranchName).append("' ").toString());
      }
      else if (!bankCode.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE BANK_ID = '").append(bankCode).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE BANK_ID = '").append(bankCode).append("' ").toString());
      }
      else if (!bankBranchName.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE BANK_BRANCH_ID ='").append(bankBranchName).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE BANK_BRANCH_ID ='").append(bankBranchName).append("' ").toString());
      }

      bufInsSql.append(" ORDER BY BANK_ID");

      logger.info(new StringBuilder().append("IN searchBankAccountData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());

      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((bankCode.trim() == null) && (bankBranchName.trim() == null) && (accountNo.trim() == null)) || ((bankCode.trim().equalsIgnoreCase("")) && (bankBranchName.trim().equalsIgnoreCase("")) && (accountNo.trim().equalsIgnoreCase(""))) || (bankAccountMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(bankAccountMasterVo.getCurrentPageLink()).toString());
        if (bankAccountMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (bankAccountMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("searchBankAcccountGridData size is....").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          BankAccountMasterVo bankAccountVo = new BankAccountMasterVo();

          bankAccountVo.setBankCodeModify(new StringBuilder().append("<a href=bankAccountMasterSearch.do?method=openEditBankAccount&bankSearchCode=").append(CommonFunction.checkNull(data.get(0)).toString()).append("&bankBranchSearchName=").append(CommonFunction.checkNull(data.get(2)).toString()).append("&accountNo=").append(CommonFunction.checkNull(data.get(4)).toString()).append(">").append(CommonFunction.checkNull(data.get(1)).toString()).append("</a>").toString());

          bankAccountVo.setLbxBankID(CommonFunction.checkNull(data.get(0)).toString());
          bankAccountVo.setBankCode(CommonFunction.checkNull(data.get(1)).toString());

          bankAccountVo.setLbxBranchID(CommonFunction.checkNull(data.get(2)).toString());
          bankAccountVo.setBankBranchName(CommonFunction.checkNull(data.get(3)).toString());

          bankAccountVo.setAccountNo(CommonFunction.checkNull(data.get(4)).toString());
          bankAccountVo.setMicrCode(CommonFunction.checkNull(data.get(5)).toString());
          bankAccountVo.setIfscCode(CommonFunction.checkNull(data.get(6)).toString());
          bankAccountVo.setGlCode(CommonFunction.checkNull(data.get(7)).toString());
          bankAccountVo.setAccountType(CommonFunction.checkNull(data.get(8)).toString());
          bankAccountVo.setBankAccountStatus(CommonFunction.checkNull(data.get(9)).toString());
          bankAccountVo.setClientCode(CommonFunction.checkNull(data.get(10)).toString());
          bankAccountVo.setDrawingPower(CommonFunction.checkNull(data.get(11)).toString());
          detailList.add(bankAccountVo);
          bankAccountVo.setTotalRecordSize(count);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean insertBankAccountMaster(Object ob) {
    BankAccountMasterVo bankAccountMasterVo = (BankAccountMasterVo)ob;
    boolean status = false;

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String query = new StringBuilder().append("select BANK_ID,BANK_BRANCH_ID,BANK_ACCOUNT from com_bank_accounts_m where  BANK_ID='").append(StringEscapeUtils.escapeSql(bankAccountMasterVo.getLbxBankID().trim())).append("' AND BANK_BRANCH_ID='").append(StringEscapeUtils.escapeSql(bankAccountMasterVo.getLbxBranchID().trim())).append("' AND BANK_ACCOUNT='").append(StringEscapeUtils.escapeSql(bankAccountMasterVo.getAccountNo().trim())).append("'").toString();

    logger.info(new StringBuilder().append("In insertBankAccountMaster.....................................Dao Impl").append(query).toString());

    boolean st = ConnectionDAOforEJB.checkStatus(query);
    try
    {
      if (!st) {
        if ((bankAccountMasterVo.getBankAccountStatus() != null) && (bankAccountMasterVo.getBankAccountStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info("In insert BANK ACCOUNT master");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("insert into COM_BANK_ACCOUNTS_M(BANK_ID,BANK_BRANCH_ID,BANK_ACCOUNT,BRANCH_IFCS_CODE,BRANCH_MICR_CODE,GL_CODE,ACCOUNT_TYPE,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,CLIENT_CODE,DRAWING_POWER)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?)");

        if (CommonFunction.checkNull(bankAccountMasterVo.getLbxBankID()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankAccountMasterVo.getLbxBankID().trim());

        if (CommonFunction.checkNull(bankAccountMasterVo.getLbxBranchID()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankAccountMasterVo.getLbxBranchID().trim());

        if (CommonFunction.checkNull(bankAccountMasterVo.getAccountNo()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankAccountMasterVo.getAccountNo().trim());

        if (CommonFunction.checkNull(bankAccountMasterVo.getIfscCode()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankAccountMasterVo.getIfscCode().trim());

        if (CommonFunction.checkNull(bankAccountMasterVo.getMicrCode()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankAccountMasterVo.getMicrCode().trim());

        if (CommonFunction.checkNull(bankAccountMasterVo.getGlCode()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankAccountMasterVo.getGlCode().trim());

        if (CommonFunction.checkNull(bankAccountMasterVo.getAccountType()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankAccountMasterVo.getAccountType().trim());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(bankAccountMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankAccountMasterVo.getMakerId().trim());

        if (CommonFunction.checkNull(bankAccountMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankAccountMasterVo.getMakerDate().trim());

        if (CommonFunction.checkNull(bankAccountMasterVo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankAccountMasterVo.getMakerId().trim());

        if (CommonFunction.checkNull(bankAccountMasterVo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(bankAccountMasterVo.getMakerDate().trim());

        if (CommonFunction.checkNull(bankAccountMasterVo.getClientCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(bankAccountMasterVo.getClientCode().trim());
        }

        if (CommonFunction.checkNull(bankAccountMasterVo.getDrawingPower()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(bankAccountMasterVo.getDrawingPower().trim());
        }
        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN insertBankAccountMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In insertBankAccountMaster......................").append(status).toString());
      }
      else
      {
        status = false;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public boolean updateBankAccountData(Object ob)
  {
    BankAccountMasterVo bankAccountMasterVo = (BankAccountMasterVo)ob;

    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

    ArrayList updatelist = new ArrayList();

    boolean status = false;
    String stat = "";
    try
    {
      if ((bankAccountMasterVo.getBankAccountStatus() != null) && (bankAccountMasterVo.getBankAccountStatus().equals("on")))
      {
        stat = "A";
      }
      else stat = "X";

      StringBuffer bufInsSql = new StringBuffer();
      logger.info("In updateBankAccountData.....................................Dao Impl");

      bufInsSql.append(new StringBuilder().append("UPDATE COM_BANK_ACCOUNTS_M SET GL_CODE=?,ACCOUNT_TYPE=?,REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),CLIENT_CODE=?,DRAWING_POWER=?  WHERE BANK_ID=? AND BANK_BRANCH_ID=? AND BANK_ACCOUNT=?").toString());

      if (CommonFunction.checkNull(bankAccountMasterVo.getGlCode()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(bankAccountMasterVo.getGlCode().trim());
      }
      if (CommonFunction.checkNull(bankAccountMasterVo.getAccountType()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(bankAccountMasterVo.getAccountType());
      }
      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat);
      }
      if (CommonFunction.checkNull(bankAccountMasterVo.getMakerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(bankAccountMasterVo.getMakerId());
      if (CommonFunction.checkNull(bankAccountMasterVo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(bankAccountMasterVo.getMakerDate());

      if (CommonFunction.checkNull(bankAccountMasterVo.getClientCode()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(bankAccountMasterVo.getClientCode().trim());
      }

      if (CommonFunction.checkNull(bankAccountMasterVo.getDrawingPower()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(bankAccountMasterVo.getDrawingPower().trim());
      }
      if (CommonFunction.checkNull(bankAccountMasterVo.getLbxBankID()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(bankAccountMasterVo.getLbxBankID().toUpperCase());

      if (CommonFunction.checkNull(bankAccountMasterVo.getLbxBranchID()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(bankAccountMasterVo.getLbxBranchID().toUpperCase());

      if (CommonFunction.checkNull(bankAccountMasterVo.getAccountNo()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(bankAccountMasterVo.getAccountNo().toUpperCase());

      insertPrepStmtObject.setSql(bufInsSql.toString());
      updatelist.add(insertPrepStmtObject);

      logger.info(new StringBuilder().append("In getListOfValues").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("In getListOfValuesQuery").append(insertPrepStmtObject.printQuery()).toString());

      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return status;
  }

  public boolean updateloginChangePassword(ChangePasswordMasterVo changePasswordMasterVo)
  {
    String userId = changePasswordMasterVo.getLbxUserId();

    ArrayList updatelist = new ArrayList();
    ArrayList updatePasslist = new ArrayList();
    boolean status = false;
    try
    {
      String query = new StringBuilder().append("SELECT count(1) FROM SEC_USER_M WHERE USER_ID='").append(userId).append("' AND (USER_PASSWORD='").append(changePasswordMasterVo.getNewPassword()).append("' OR USER_LAST_PASSWORD_1='").append(changePasswordMasterVo.getNewPassword()).append("' OR USER_LAST_PASSWORD_2='").append(changePasswordMasterVo.getNewPassword()).append("'OR USER_LAST_PASSWORD_3='").append(changePasswordMasterVo.getNewPassword()).append("' OR USER_LAST_PASSWORD_4='").append(changePasswordMasterVo.getNewPassword()).append("' OR USER_LAST_PASSWORD_5='").append(changePasswordMasterVo.getNewPassword()).append("')").toString();

      logger.info(new StringBuilder().append("In updateloginChangePassword .Dao Impl query is... ").append(query).toString());

      String countStr = ConnectionDAOforEJB.singleReturn(query);
      int count = Integer.parseInt(countStr);
      logger.info(new StringBuilder().append("In updateloginChangePassword......count... ").append(count).toString());

      if (count < 1)
      {
        String passQuery = new StringBuilder().append("SELECT USER_PASSWORD,USER_LAST_PASSWORD_1,USER_LAST_PASSWORD_2,USER_LAST_PASSWORD_3,USER_LAST_PASSWORD_4,USER_LAST_PASSWORD_5,SECURITY_QUESTION1,SECURITY_ANSWER1,SECURITY_QUESTION2,SECURITY_ANSWER2 FROM SEC_USER_M WHERE USER_ID='").append(userId).append("'").toString();
        logger.info(new StringBuilder().append("passQuery.. ").append(passQuery).toString());

        updatePasslist = ConnectionDAOforEJB.sqlSelect(passQuery);

        logger.info(new StringBuilder().append("IN updateUserPass() update Password query1 ### ").append(passQuery).toString());
        logger.info(new StringBuilder().append("updateUserPass.. ").append(updatePasslist.size()).toString());

        for (int i = 0; i < updatePasslist.size(); i++) {
          String ans1 = "";
          String ans2 = "";
          logger.info(new StringBuilder().append("updateUserPassList ").append(updatePasslist.get(i).toString()).toString());

          ArrayList data = (ArrayList)updatePasslist.get(i);

          if (data.size() > 0) {
            String userPass = CommonFunction.checkNull(data.get(0)).toString();
            String userPass1 = CommonFunction.checkNull(data.get(1)).toString();
            String userPass2 = CommonFunction.checkNull(data.get(2)).toString();
            String userPass3 = CommonFunction.checkNull(data.get(3)).toString();
            String userPass4 = CommonFunction.checkNull(data.get(4)).toString();
            String userPass5 = CommonFunction.checkNull(data.get(5)).toString();

            ans1 = CommonFunction.checkNull(changePasswordMasterVo.getAns1()).trim();
            ans2 = CommonFunction.checkNull(changePasswordMasterVo.getAns2()).trim();

            logger.info("In updateUserData.....................................Dao Impl");
            String query1 = new StringBuilder().append("UPDATE SEC_USER_M SET FORCED_PASSWORD_FLAG='N',LAST_PASSWORD_DATE=sysdate(),USER_LAST_PASSWORD_1='").append(userPass).append("',USER_LAST_PASSWORD_2='").append(userPass1).append("',USER_LAST_PASSWORD_3='").append(userPass2).append("',USER_LAST_PASSWORD_4='").append(userPass3).append("',USER_LAST_PASSWORD_5='").append(userPass4).append("',USER_PASSWORD='").append(changePasswordMasterVo.getNewPassword()).append("', ACCOUNT_STATUS='U', ").append("SECURITY_QUESTION1='").append(CommonFunction.checkNull(changePasswordMasterVo.getQues1()).trim()).append("',SECURITY_ANSWER1='").append(ans1).append("',SECURITY_QUESTION2='").append(CommonFunction.checkNull(changePasswordMasterVo.getQues2()).trim()).append("',SECURITY_ANSWER2='").append(ans2).append("' WHERE USER_ID='").append(CommonFunction.checkNull(userId).trim()).append("'").toString();

            updatelist.add(query1);
            logger.info(new StringBuilder().append("In getListOfValues").append(query1).toString());
            status = ConnectionDAOforEJB.sqlInsUpdDelete(updatelist);
          }
        }

      }
      else
      {
        status = false;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList showquestion(ChangePasswordMasterVo changePasswordMasterVo)
  {
    String userId = changePasswordMasterVo.getLbxUserId();
    logger.info(new StringBuilder().append("------userid--------").append(userId).toString());
    ArrayList queslist = new ArrayList();
    ArrayList questionlist = new ArrayList();
    boolean status = false;
    try
    {
      String passQuery = new StringBuilder().append("SELECT SECURITY_QUESTION1,SECURITY_ANSWER1,SECURITY_QUESTION2,SECURITY_ANSWER2 FROM SEC_USER_M WHERE USER_ID='").append(userId).append("'").toString();
      logger.info(new StringBuilder().append("passQuery").append(passQuery).toString());
      queslist = ConnectionDAO.sqlSelect(passQuery);
      for (int i = 0; i < queslist.size(); i++) {
        logger.info(new StringBuilder().append("updateUserPassList ").append(queslist.get(i).toString()).toString());
        ArrayList data = (ArrayList)queslist.get(i);
        if (data.size() > 0) {
          changePasswordMasterVo.setQues1(CommonFunction.checkNull(data.get(0)).toString());
          changePasswordMasterVo.setAns1(CommonFunction.checkNull(data.get(1)).toString());
          changePasswordMasterVo.setQues2(CommonFunction.checkNull(data.get(2)).toString());
          changePasswordMasterVo.setAns2(CommonFunction.checkNull(data.get(3)).toString());
          questionlist.add(changePasswordMasterVo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return questionlist;
  }

  public ArrayList ratioDefinitionSearch(Object ob)
  {
    String ratioCode = "";
    String ratioName = "";
    String query1 = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    ArrayList searchlist = new ArrayList();
    MasterVo masterVo = (MasterVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      ratioCode = StringEscapeUtils.escapeSql(CommonFunction.checkNull(masterVo.getRatioCode())).trim();
      ratioName = StringEscapeUtils.escapeSql(CommonFunction.checkNull(masterVo.getRatioName())).trim();

      logger.info("In ratioDefinitionSearch().............inside ejb server file...........Dao Impl");

      bufInsSql.append("SELECT RATIO_CODE,RATIO_NAME,RATIO_FORMULA,REC_STATUS,if(REC_STATUS='A','Active','Inactive')as Status FROM cr_ratios_m ");
      bufInsSqlTempCount.append("SELECT COUNT(1) FROM cr_ratios_m ");

      if ((!ratioCode.equalsIgnoreCase("")) && (!ratioName.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append("WHERE RATIO_NAME like '%").append(ratioName).append("%' AND RATIO_CODE='").append(ratioCode).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE RATIO_NAME like '%").append(ratioName).append("%' AND RATIO_CODE='").append(ratioCode).append("'").toString());
      }
      else if (!ratioName.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE RATIO_NAME LIKE '%").append(ratioName).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE RATIO_NAME LIKE '%").append(ratioName).append("%' ").toString());
      }
      else if (!ratioCode.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE RATIO_CODE = '").append(ratioCode).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE RATIO_CODE = '").append(ratioCode).append("' ").toString());
      }
      bufInsSql.append(" ORDER BY RATIO_CODE");

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((ratioCode.trim() == null) && (ratioName.trim() == null)) || ((ratioCode.trim().equalsIgnoreCase("")) && (ratioName.trim().equalsIgnoreCase(""))) || (masterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(masterVo.getCurrentPageLink()).toString());
        if (masterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (masterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("ratioDefinitionSearch ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++) {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          MasterVo mVo = new MasterVo();

          mVo.setRatioCodeModify(new StringBuilder().append("<a href=addRatioDefinition.do?method=openEditRatioDefinition&ratioCode=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          mVo.setRatioCode(CommonFunction.checkNull(data.get(0)).toString());
          mVo.setRatioName(CommonFunction.checkNull(data.get(1)).toString());
          mVo.setExpression(CommonFunction.checkNull(data.get(2)).toString());
          mVo.setRatioStatus(CommonFunction.checkNull(data.get(3)).toString());
          mVo.setRatioStatusDesc(CommonFunction.checkNull(data.get(4)).toString());
          detailList.add(mVo);
          mVo.setTotalRecordSize(count);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean saveRatioDefinition(Object ob)
  {
    MasterVo vo = (MasterVo)ob;
    boolean status = false;

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String query = new StringBuilder().append("select RATIO_CODE,RATIO_NAME from cr_ratios_m where RATIO_CODE='").append(StringEscapeUtils.escapeSql(vo.getRatioCode().trim())).append("'").toString();

    logger.info(new StringBuilder().append("In saveRatioDefinition...........inside ejb server file...........Dao Impl").append(query).toString());

    boolean st = ConnectionDAOforEJB.checkStatus(query);
    try
    {
      if (!st) {
        if ((vo.getRatioStatus() != null) && (vo.getRatioStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info("In saveRatioDefinition master");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("insert into cr_ratios_m(RATIO_CODE,RATIO_NAME,RATIO_FORMULA,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");

        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND))").toString());

        if (CommonFunction.checkNull(vo.getRatioCode()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getRatioCode().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getRatioName()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getRatioName().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getExpression()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getExpression().toUpperCase().trim());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());

        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());

        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN saveRatioDefinition() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveRatioDefinition..........inside ejb server file...........Dao Impl").append(status).toString());
      }
      else {
        status = false;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public boolean updateRatioDefinition(Object ob)
  {
    MasterVo vo = (MasterVo)ob;
    String agencyCode = vo.getAgencyCode();
    logger.info(new StringBuilder().append("updateRatioDefinition:-").append(vo.getRatioStatus()).toString());
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();

    boolean status = false;
    String stat = "";
    try
    {
      if ((vo.getRatioStatus() != null) && (vo.getRatioStatus().equals("on")))
        stat = "A";
      else {
        stat = "X";
      }

      StringBuffer bufInsSql = new StringBuffer();
      logger.info("In updateRatioDefinition.............inside ejb server file...........Dao Impl");

      bufInsSql.append(new StringBuilder().append("UPDATE cr_ratios_m SET RATIO_NAME=?,RATIO_FORMULA=?,REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) where RATIO_CODE=?").toString());

      if (CommonFunction.checkNull(vo.getRatioName()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getRatioName());
      }
      if (CommonFunction.checkNull(vo.getExpression()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getExpression());
      }
      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat);
      }
      if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerId());
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerDate());

      if (CommonFunction.checkNull(vo.getRatioCode()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getRatioCode());
      insertPrepStmtObject.setSql(bufInsSql.toString());
      updatelist.add(insertPrepStmtObject);
      logger.info(insertPrepStmtObject.printQuery());
      logger.info(new StringBuilder().append("In getListOfValues").append(bufInsSql.toString()).toString());
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList searchFinancialPramData(Object ob)
  {
    String pramCode = "";
    String pramName = "";
    String pramType = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    ArrayList searchlist = new ArrayList();
    FinancialPramMasterVo fiancialPramVo = (FinancialPramMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In searchFinancialPramData...........inside ejb server file...........Dao Impl");

      pramCode = StringEscapeUtils.escapeSql(CommonFunction.checkNull(fiancialPramVo.getPramSearchCode())).trim();
      pramName = StringEscapeUtils.escapeSql(CommonFunction.checkNull(fiancialPramVo.getPramSearchName())).trim();
      pramType = StringEscapeUtils.escapeSql(CommonFunction.checkNull(fiancialPramVo.getPramTypeSearch())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("select PARAM_CODE,PARAM_NAME,Case SOURCE_TYPE When 'B' then 'BALANCE SHEET' When 'P' then 'PROFIT AND LOSS' When 'O' then 'OTHERS' When 'I' then 'INDIVIDUAL ANALYSIS' End As Source_Type,SEQUENCE_NO,if(REC_STATUS='A','Active','Inactive')as Status,Case SUB_TYPE When 'A' then 'ASSET' When 'L' then 'LIABILITY' End as subType FROM cr_financial_param where 'a'='a'");
      bufInsSqlTempCount.append("SELECT COUNT(1) FROM cr_financial_param where 'a'='a' ");

      if (!pramName.equals("")) {
        bufInsSql.append(new StringBuilder().append(" AND  PARAM_NAME LIKE '%").append(pramName).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND PARAM_NAME LIKE '%").append(pramName).append("%' ").toString());
      }

      if (!pramCode.equals("")) {
        bufInsSql.append(new StringBuilder().append(" AND PARAM_CODE = '").append(pramCode).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND PARAM_CODE = '").append(pramCode).append("' ").toString());
      }
      if (!pramType.equals("")) {
        bufInsSql.append(new StringBuilder().append(" AND SOURCE_TYPE = '").append(pramType).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND SOURCE_TYPE = '").append(pramType).append("' ").toString());
      }
      bufInsSql.append(" ORDER by PARAM_CODE");

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());

      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((pramCode.trim() == null) && (pramName.trim() == null)) || ((pramCode.trim().equalsIgnoreCase("")) && (pramName.trim().equalsIgnoreCase(""))) || (fiancialPramVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(fiancialPramVo.getCurrentPageLink()).toString());
        if (fiancialPramVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (fiancialPramVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }
      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("searchFinancial Data ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++) {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          FinancialPramMasterVo finVo = new FinancialPramMasterVo();

          finVo.setPramCodeModify(new StringBuilder().append("<a href=finPramMasterSearch.do?method=openEditFinPram&pramSearchCode=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          finVo.setPramCode(CommonFunction.checkNull(data.get(0)).toString());
          finVo.setPramName(CommonFunction.checkNull(data.get(1)).toString());
          finVo.setPramType(CommonFunction.checkNull(data.get(2)).toString());
          finVo.setSequenceNo(CommonFunction.checkNull(data.get(3)).toString());
          finVo.setPramStatus(CommonFunction.checkNull(data.get(4)).toString());
          finVo.setSubType(CommonFunction.checkNull(data.get(5)).toString());
          finVo.setTotalRecordSize(count);
          detailList.add(finVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public ArrayList searchFinPramData(Object ob)
  {
    String pramCode = "";
    String pramName = "";

    ArrayList searchlist = new ArrayList();
    FinancialPramMasterVo fiancialPramVo = (FinancialPramMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In searchFinancialData().........inside ejb server file...........Dao Impl");

      pramCode = StringEscapeUtils.escapeSql(CommonFunction.checkNull(fiancialPramVo.getPramSearchCode())).trim();

      logger.info(new StringBuilder().append("pramCodeis.........@@@*****").append(pramCode).toString());
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("select PARAM_CODE,PARAM_NAME,SOURCE_TYPE,if(REC_STATUS='A','Active','Inactive')as Status,");
      bufInsSql.append("if(NEGATIVE_ALLOWED='A','Active','Inactive')as NEGATIVE_ALLOWED,AUTO_CALCULATED,SYSTEM_DEFINED,SEQUENCE_NO,SUB_TYPE,FINANCIAL_FORMULA");
      bufInsSql.append(new StringBuilder().append(" FROM cr_financial_param WHERE PARAM_CODE = '").append(pramCode).append("'").toString());

      bufInsSql.append(" ORDER by PARAM_CODE");

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("searchFinancial Data ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          FinancialPramMasterVo finVo = new FinancialPramMasterVo();
          finVo.setPramCode(CommonFunction.checkNull(data.get(0)).toString());
          finVo.setPramName(CommonFunction.checkNull(data.get(1)).toString());
          finVo.setPramType(CommonFunction.checkNull(data.get(2)).toString());
          finVo.setPramStatus(CommonFunction.checkNull(data.get(3)).toString());
          finVo.setNegativeAllowed(CommonFunction.checkNull(data.get(4)).toString());
          finVo.setAutoCalculated(CommonFunction.checkNull(data.get(5)).toString());
          finVo.setSystemDefined(CommonFunction.checkNull(data.get(6)).toString());
          finVo.setSequenceNo(CommonFunction.checkNull(data.get(7)).toString());
          finVo.setSubType(CommonFunction.checkNull(data.get(8)).toString());
          finVo.setFinExpression(CommonFunction.checkNull(data.get(9)).toString());

          detailList.add(finVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public String insertFinancialMaster(Object ob)
  {
    FinancialPramMasterVo vo = (FinancialPramMasterVo)ob;
    boolean status = false;
    logger.info(new StringBuilder().append("In insertFinancialMaster...........inside ejb server file...........Dao Impl").append(vo.getPramStatus()).toString());

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String negativeAllowed = "X";
    String autoCalculated = "X";
    String result = "";
    String query = new StringBuilder().append("select PARAM_CODE,PARAM_NAME from cr_financial_param where PARAM_CODE LIKE '%").append(StringEscapeUtils.escapeSql(vo.getPramCode().trim())).append("%'").toString();

    logger.info(new StringBuilder().append("In insertFinancialMaster...........inside ejb server file...........Dao Impl").append(query).toString());
    boolean st = ConnectionDAOforEJB.checkStatus(query);

    String querySeq = new StringBuilder().append("select PARAM_CODE,PARAM_NAME from cr_financial_param where SOURCE_TYPE='").append(StringEscapeUtils.escapeSql(vo.getPramType().trim())).append("' and SEQUENCE_NO='").append(StringEscapeUtils.escapeSql(vo.getSequenceNo().trim())).append("'").toString();

    logger.info(new StringBuilder().append("In insertFinancialMaster...........inside ejb server file...........Dao Impl For Sequence:-").append(querySeq).toString());
    boolean stSeq = ConnectionDAOforEJB.checkStatus(querySeq);
    try
    {
      if ((!st) && (!stSeq)) {
        if ((vo.getPramStatus() != null) && (vo.getPramStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        logger.info(new StringBuilder().append("getNegativeAllowed():-").append(vo.getNegativeAllowed()).toString());
        if ((vo.getNegativeAllowed() != null) && (vo.getNegativeAllowed().equals("on")))
        {
          negativeAllowed = "A";
        }
        else negativeAllowed = "X";

        logger.info(new StringBuilder().append("getAutoCalculated():-").append(vo.getAutoCalculated()).toString());
        if ((vo.getAutoCalculated() != null) && (vo.getAutoCalculated().equals("on")))
        {
          autoCalculated = "Y";
        }
        else autoCalculated = "N";

        logger.info("In insertFinancialMaster");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("insert into cr_financial_param(PARAM_CODE,PARAM_NAME,SOURCE_TYPE,NEGATIVE_ALLOWED,AUTO_CALCULATED,SYSTEM_DEFINED,SEQUENCE_NO,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,SUB_TYPE,FINANCIAL_FORMULA)");

        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" 'N',");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(" ? )");

        if (CommonFunction.checkNull(vo.getPramCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getPramCode().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getPramName()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getPramName().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getPramType()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getPramType().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(negativeAllowed).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(negativeAllowed);
        }
        if (CommonFunction.checkNull(autoCalculated).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(autoCalculated);
        }
        if (CommonFunction.checkNull(vo.getSequenceNo()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getSequenceNo());
        }
        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerId());
        }
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerDate());
        }
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerId());
        }
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerDate());
        }
        if (CommonFunction.checkNull(vo.getSubType()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getSubType());
        }
        if (CommonFunction.checkNull(vo.getFinExpression()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getFinExpression());
        }

        insertPrepStmtObject.setSql(bufInsSql.toString());

        logger.info(new StringBuilder().append("IN insertFinancialMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);

        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveFinancailPrameterData......................").append(status).toString());
        if (status)
          result = "saved";
        else {
          result = "notSaved";
        }
      }
      if (st) {
        result = "already";
      }
      if (stSeq)
        result = "alreadySeq";
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return result;
  }

  public String updateFinPramData(Object ob)
  {
    FinancialPramMasterVo vo = (FinancialPramMasterVo)ob;
    String pramCode = vo.getPramCode();
    logger.info(new StringBuilder().append("vo.getPramStatus():-").append(vo.getPramStatus()).toString());
    ArrayList updatelist = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    boolean status = false;
    String negativeAllowed = "X";
    String stat = "X";
    String autoCalculated = "X";
    String result = "";

    String querySeq = new StringBuilder().append("select PARAM_CODE,PARAM_NAME from cr_financial_param where SOURCE_TYPE='").append(StringEscapeUtils.escapeSql(vo.getPramType().trim())).append("' and SEQUENCE_NO='").append(StringEscapeUtils.escapeSql(vo.getSequenceNo().trim())).append("' AND PARAM_CODE <> '").append(StringEscapeUtils.escapeSql(vo.getPramCode().trim())).append("'").toString();

    logger.info(new StringBuilder().append("In updateFinPramData...........inside ejb server file...........Dao Impl For Sequence:-").append(querySeq).toString());
    boolean stSeq = ConnectionDAOforEJB.checkStatus(querySeq);
    try
    {
      if (!stSeq) {
        if ((vo.getPramStatus() != null) && (vo.getPramStatus().equals("on")))
          stat = "A";
        else {
          stat = "X";
        }

        logger.info(new StringBuilder().append("getNegativeAllowed():-").append(vo.getNegativeAllowed()).toString());
        if ((vo.getNegativeAllowed() != null) && (vo.getNegativeAllowed().equals("on")))
        {
          negativeAllowed = "A";
        }
        else negativeAllowed = "X";

        logger.info(new StringBuilder().append("getAutoCalculated():-").append(vo.getAutoCalculated()).toString());
        if ((vo.getAutoCalculated() != null) && (vo.getAutoCalculated().equals("on")))
        {
          autoCalculated = "Y";
        }
        else autoCalculated = "N";

        StringBuffer bufInsSql = new StringBuffer();
        logger.info("In updateFinPramData..........inside ejb server file...........Dao Impl");
        bufInsSql.append(new StringBuilder().append("UPDATE cr_financial_param set PARAM_NAME=?,SOURCE_TYPE=?,NEGATIVE_ALLOWED=?,REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),AUTO_CALCULATED=?,SEQUENCE_NO=?,SUB_TYPE=?,FINANCIAL_FORMULA=? where PARAM_CODE=?").toString());

        if (CommonFunction.checkNull(vo.getPramName()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getPramName().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getPramType()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getPramType().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(negativeAllowed).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(negativeAllowed);
        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        if (CommonFunction.checkNull(autoCalculated).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(autoCalculated);
        }
        if (CommonFunction.checkNull(vo.getSequenceNo()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getSequenceNo());
        }

        if (CommonFunction.checkNull(vo.getSubType()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getSubType());
        }
        if (CommonFunction.checkNull(vo.getFinExpression()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getFinExpression());
        if (CommonFunction.checkNull(vo.getPramCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getPramCode().trim());
        }
        insertPrepStmtObject.setSql(bufInsSql.toString());
        updatelist.add(insertPrepStmtObject);
        logger.info(new StringBuilder().append("In updateFinPramData UPDATE QRY:---").append(bufInsSql.toString()).toString());
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
        bufInsSql = null;
        insertPrepStmtObject = null;
        if (status)
          result = "saved";
        else {
          result = "notSaved";
        }
      }
      if (stSeq)
        result = "alreadySeq";
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return result;
  }

  public ArrayList searchApprovalLevelDef(ApprovalLevelDefVo Vo, String mcFlag)
  {
    String productModify = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    String tableName = "";
    String flag = "";
    String decideUpdate = "";
    ArrayList searchlist = new ArrayList();
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchApprovalLevelDef.....................................Dao Impl");
      logger.info(new StringBuilder().append("In searchApprovalLevelDef...................hhhhhhhh").append(CommonFunction.checkNull(Vo.getSearchStatus())).toString());

      if ((CommonFunction.checkNull(mcFlag).equalsIgnoreCase("Y")) && (!CommonFunction.checkNull(Vo.getSearchStatus()).equalsIgnoreCase("A"))) {
        tableName = "CR_APPROVAL_LEVEL_M_temp";
        flag = "Y";
        decideUpdate = "N";
      }
      else {
        tableName = "cr_approval_level_m";
        flag = "N";
        decideUpdate = "Y";
      }
      logger.info(new StringBuilder().append("value flag::::::::::::").append(flag).toString());

      String productSearch = StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxProductID())).trim();
      logger.info(new StringBuilder().append("productSearch....").append(productSearch).toString());

      String findApprovalSearch = StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getFindApprovalSearch())).trim();
      logger.info(new StringBuilder().append("findApprovalSearch....").append(findApprovalSearch).toString());

      productModify = StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getProductModify())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("SELECT APPROVAL_LEVEL_ID,(SELECT cr_p.PRODUCT_DESC FROM cr_product_m cr_p WHERE cr_p.PRODUCT_ID=cra.PRODUCT_ID) as Product_Id,(SELECT SCHEME_DESC FROM CR_SCHEME_M S WHERE S.SCHEME_ID=cra.SCHEME_ID) as Scheme , ");
      bufInsSql.append("FINAL_APPROVAL_LEVEL,AMOUNT_FROM,AMOUNT_TO,if(REC_STATUS='A','Active','Inactive')as ");
      bufInsSql.append(new StringBuilder().append("Status FROM ").append(tableName).append(" cra where true ").toString());

      bufInsSqlTempCount.append("SELECT count(1) ");

      bufInsSqlTempCount.append(new StringBuilder().append(" FROM ").append(tableName).append(" cra where true  ").toString());

      if (flag.equalsIgnoreCase("Y")) {
        logger.info(new StringBuilder().append("saurabh singh:::::::::::::::::::with flag :").append(mcFlag).toString());
        bufInsSql.append(" AND MAKER_AUTHOR_STATUS <> 'F' ");
        bufInsSqlTempCount.append("  AND MAKER_AUTHOR_STATUS <> 'F' ");
      }

      if (!CommonFunction.checkNull(Vo.getLbxProductID()).equalsIgnoreCase(""))
      {
        bufInsSql.append(new StringBuilder().append("and cra.PRODUCT_ID='").append(CommonFunction.checkNull(Vo.getLbxProductID()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" and cra.PRODUCT_ID='").append(CommonFunction.checkNull(Vo.getLbxProductID()).trim()).append("' ").toString());
      }
      if (!CommonFunction.checkNull(Vo.getLbxSchemeId()).equalsIgnoreCase(""))
      {
        bufInsSql.append(new StringBuilder().append(" and cra.SCHEME_ID='").append(CommonFunction.checkNull(Vo.getLbxSchemeId()).trim()).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" and cra.SCHEME_ID='").append(CommonFunction.checkNull(Vo.getLbxSchemeId()).trim()).append("'").toString());
      }

      if (!CommonFunction.checkNull(Vo.getFindApprovalSearch()).equalsIgnoreCase(""))
      {
        bufInsSql.append(new StringBuilder().append(" and cra.FINAL_APPROVAL_LEVEL='").append(CommonFunction.checkNull(Vo.getFindApprovalSearch()).trim()).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" and cra.FINAL_APPROVAL_LEVEL='").append(CommonFunction.checkNull(Vo.getFindApprovalSearch()).trim()).append("'").toString());
      }

      bufInsSql.append(" ORDER BY APPROVAL_LEVEL_ID");

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((productSearch.trim() == null) && (findApprovalSearch.trim() == null)) || ((productSearch.trim().equalsIgnoreCase("")) && (findApprovalSearch.trim().equalsIgnoreCase(""))) || (Vo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(Vo.getCurrentPageLink()).toString());
        if (Vo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (Vo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query ::::::::::::::::: ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("searchApprovalLevelDef ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          ApprovalLevelDefVo LevelDefVo = new ApprovalLevelDefVo();

          LevelDefVo.setApprovalLevelID(new StringBuilder().append("<a href=approvalLevelDefSearchBehind.do?method=EditapprovalLevelDef&productModify=").append(CommonFunction.checkNull(data.get(0)).toString()).append("&makerFlag=").append(flag).append("&decideUpdate=").append(decideUpdate).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          LevelDefVo.setProductSearch(CommonFunction.checkNull(data.get(1)));
          LevelDefVo.setLbxProductID(CommonFunction.checkNull(data.get(1)));
          LevelDefVo.setScheme(CommonFunction.checkNull(data.get(2)));
          LevelDefVo.setFindApprovalSearch(CommonFunction.checkNull(data.get(3)));
          LevelDefVo.setFindApprovalLevel(CommonFunction.checkNull(data.get(3)));
          if (!CommonFunction.checkNull(data.get(4)).trim().equalsIgnoreCase(""))
          {
            Number amount = this.myFormatter.parse(CommonFunction.checkNull(data.get(4)).trim());
            LevelDefVo.setAmountFromSearch(this.myFormatter.format(amount));
            LevelDefVo.setAmountFrom(this.myFormatter.format(amount));
          }
          if (!CommonFunction.checkNull(data.get(5)).trim().equalsIgnoreCase(""))
          {
            Number amount = this.myFormatter.parse(CommonFunction.checkNull(data.get(5)).trim());
            LevelDefVo.setAmountToSearch(this.myFormatter.format(amount));
            LevelDefVo.setAmountTo(this.myFormatter.format(amount));
          }
          LevelDefVo.setStatus(CommonFunction.checkNull(data.get(6)));

          LevelDefVo.setTotalRecordSize(count);
          detailList.add(LevelDefVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public ArrayList<MasterVo> ruleMasterSearch(Object ob)
  {
    String ruleCode = "";
    String ruleName = "";
    String query1 = "";

    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    ArrayList searchlist = new ArrayList();
    MasterVo masterVo = (MasterVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      ruleCode = StringEscapeUtils.escapeSql(CommonFunction.checkNull(masterVo.getRuleCode())).trim();
      ruleName = StringEscapeUtils.escapeSql(CommonFunction.checkNull(masterVo.getRuleName())).trim();

      logger.info("In ruleMasterSearch()............Inside ejb server file..........Dao Impl");

      bufInsSql.append("SELECT RULE_CODE,RULE_DESCRIPTION,RULE_EXPRESSION,RULE_TYPE,REC_STATUS,if(REC_STATUS='A','Active','Inactive')as Status,STAGE,SUB_RULE_TYPE FROM cr_rule_m ");
      bufInsSqlTempCount.append("SELECT COUNT(1) FROM cr_rule_m ");

      if ((!ruleCode.equalsIgnoreCase("")) && (!ruleName.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append("WHERE RULE_DESCRIPTION like '%").append(ruleName).append("%' AND RULE_CODE='").append(ruleCode).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE RULE_DESCRIPTION like '%").append(ruleName).append("%' AND RULE_CODE='").append(ruleCode).append("'").toString());
      }
      else if (!ruleName.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE RULE_DESCRIPTION LIKE '%").append(ruleName).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE RULE_DESCRIPTION LIKE '%").append(ruleName).append("%' ").toString());
      }
      else if (!ruleCode.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE RULE_CODE = '").append(ruleCode).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE RULE_CODE = '").append(ruleCode).append("' ").toString());
      }
      bufInsSql.append(" ORDER BY RULE_CODE");

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((ruleCode.trim() == null) && (ruleName.trim() == null)) || ((ruleCode.trim().equalsIgnoreCase("")) && (ruleName.trim().equalsIgnoreCase(""))) || (masterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(masterVo.getCurrentPageLink()).toString());
        if (masterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (masterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("searchlist ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          MasterVo mVo = new MasterVo();

          mVo.setRuleCodeModify(new StringBuilder().append("<a href=addRule.do?method=openEditRuleMaster&ruleCode=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          mVo.setRuleCode(CommonFunction.checkNull(data.get(0)).toString());
          mVo.setRuleName(CommonFunction.checkNull(data.get(1)).toString());
          mVo.setExpression(CommonFunction.checkNull(data.get(2)).toString());
          mVo.setRuleType(CommonFunction.checkNull(data.get(3)).toString());
          mVo.setRuleStatus(CommonFunction.checkNull(data.get(4)).toString());
          mVo.setRuleStatusDesc(CommonFunction.checkNull(data.get(5)).toString());
          mVo.setStageForRule(CommonFunction.checkNull(data.get(6)).toString());
          mVo.setSubRuleType(CommonFunction.checkNull(data.get(7)).toString());
          detailList.add(mVo);
          mVo.setTotalRecordSize(count);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean saveApprovalLevelDef(ApprovalLevelDefVo Vo, String mcFlag) {
    logger.info("In MasterDAOImpl........................saveApprovalLevelDef...........");
    boolean status = false;
    String flag = "";
    String tableName = "";
    String columnAdd = "";
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    if ((Vo.getStatus() != null) && (Vo.getStatus().equals("on")))
      stat = "A";
    else {
      stat = "X";
    }

    if (CommonFunction.checkNull(mcFlag).equalsIgnoreCase("Y")) {
      tableName = "CR_APPROVAL_LEVEL_M_temp";
      columnAdd = ",MAKER_AUTHOR_STATUS";
    }
    else {
      tableName = "cr_approval_level_m";
      columnAdd = "";
    }

    try
    {
      StringBuffer bufInsSql = new StringBuffer();

      bufInsSql.append(new StringBuilder().append("INSERT INTO ").append(tableName).append("(PRODUCT_ID,SCHEME_ID,FINAL_APPROVAL_LEVEL,AMOUNT_FROM,AMOUNT_TO,").append("MIN_APPROVAL_LEVEL1,MIN_APPROVAL_LEVEL2,MIN_APPROVAL_LEVEL3,MUST_APPROVE_USER11,MUST_APPROVE_USER12,").append("MUST_APPROVE_USER13,MUST_APPROVE_USER21,MUST_APPROVE_USER22,").append("MUST_APPROVE_USER23,MUST_APPROVE_USER31,MUST_APPROVE_USER32,MUST_APPROVE_USER33,").append("REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,").append("MIN_APPROVAL_LEVEL4,MIN_APPROVAL_LEVEL5,MIN_APPROVAL_LEVEL6,MIN_APPROVAL_LEVEL7,MIN_APPROVAL_LEVEL8,MIN_APPROVAL_LEVEL9,").append("MUST_APPROVE_USER41,MUST_APPROVE_USER42,").append("MUST_APPROVE_USER43,MUST_APPROVE_USER51,MUST_APPROVE_USER52,").append("MUST_APPROVE_USER53,MUST_APPROVE_USER61,MUST_APPROVE_USER62,MUST_APPROVE_USER63,").append("MUST_APPROVE_USER71,MUST_APPROVE_USER72,").append("MUST_APPROVE_USER73,MUST_APPROVE_USER81,MUST_APPROVE_USER82,").append("MUST_APPROVE_USER83,MUST_APPROVE_USER91,MUST_APPROVE_USER92,MUST_APPROVE_USER93").append(columnAdd).append(")").toString());

      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");

      if (!columnAdd.equalsIgnoreCase("")) {
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?)");
      }
      else {
        bufInsSql.append(" ?)");
      }

      logger.info(new StringBuilder().append("Vo.getLbxProductID():::::::::::::").append(Vo.getLbxProductID()).toString());
      logger.info(new StringBuilder().append("Vo.getLbxUserSearchId1:::::::::::").append(Vo.getLbxUserSearchId11()).toString());
      logger.info(new StringBuilder().append("Vo.getLbxUserSearchId2:::::::::::").append(Vo.getLbxUserSearchId12()).toString());
      logger.info(new StringBuilder().append("Vo.getLbxUserSearchId3:::::::::::").append(Vo.getLbxUserSearchId13()).toString());

      if (CommonFunction.checkNull(Vo.getLbxProductID()).equalsIgnoreCase("")) {
        insertPrepStmtObject.addNull();
      }
      else {
        insertPrepStmtObject.addString(Vo.getLbxProductID().toUpperCase().trim());
      }
      if (CommonFunction.checkNull(Vo.getLbxSchemeId()).equalsIgnoreCase("")) {
        insertPrepStmtObject.addNull();
      }
      else {
        insertPrepStmtObject.addString(Vo.getLbxSchemeId().toUpperCase().trim());
      }
      if (CommonFunction.checkNull(Vo.getFindApprovalLevel()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(Vo.getFindApprovalLevel().toUpperCase().trim());
      }
      if (CommonFunction.checkNull(Vo.getAmountFrom()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(Vo.getAmountFrom().toUpperCase().trim())).toString());
      }
      if (CommonFunction.checkNull(Vo.getAmountTo()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(Vo.getAmountTo().toUpperCase().trim())).toString());
      }
      if (CommonFunction.checkNull(Vo.getLevel1()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(Vo.getLevel1().trim());
      }
      if (CommonFunction.checkNull(Vo.getLevel2()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(Vo.getLevel2().trim().toString());
      }

      if (CommonFunction.checkNull(Vo.getLevel3()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(Vo.getLevel3().trim().toString());
      }

      if (CommonFunction.checkNull(Vo.getLbxUserSearchId11()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId11()).trim()));
      }

      if (CommonFunction.checkNull(Vo.getLbxUserSearchId12()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId12()).trim()));
      }
      if (CommonFunction.checkNull(Vo.getLbxUserSearchId13()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId13()).trim()));
      }

      if (CommonFunction.checkNull(Vo.getLbxUserSearchId21()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId21()).trim()));
      }

      if (CommonFunction.checkNull(Vo.getLbxUserSearchId22()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId22()).trim()));
      }
      if (CommonFunction.checkNull(Vo.getLbxUserSearchId23()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId23()).trim()));
      }

      if (CommonFunction.checkNull(Vo.getLbxUserSearchId31()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId31()).trim()));
      }

      if (CommonFunction.checkNull(Vo.getLbxUserSearchId32()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId32()).trim()));
      }
      if (CommonFunction.checkNull(Vo.getLbxUserSearchId33()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId33()).trim()));
      }

      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat);
      }

      if (CommonFunction.checkNull(Vo.getMakerId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(Vo.getMakerId());
      }
      if (CommonFunction.checkNull(Vo.getMakerDate()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(Vo.getMakerDate());
      }
      if (CommonFunction.checkNull(Vo.getMakerId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(Vo.getMakerId());
      }
      if (CommonFunction.checkNull(Vo.getMakerDate()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(Vo.getMakerDate());
      }

      if (CommonFunction.checkNull(Vo.getLevel4()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(Vo.getLevel4().trim());
      }
      if (CommonFunction.checkNull(Vo.getLevel5()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(Vo.getLevel5().trim().toString());
      }

      if (CommonFunction.checkNull(Vo.getLevel6()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(Vo.getLevel6().trim().toString());
      }
      if (CommonFunction.checkNull(Vo.getLevel7()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(Vo.getLevel7().trim());
      }
      if (CommonFunction.checkNull(Vo.getLevel8()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(Vo.getLevel8().trim().toString());
      }

      if (CommonFunction.checkNull(Vo.getLevel9()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(Vo.getLevel9().trim().toString());
      }

      if (CommonFunction.checkNull(Vo.getLbxUserSearchId41()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId41()).trim()));
      }

      if (CommonFunction.checkNull(Vo.getLbxUserSearchId42()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId42()).trim()));
      }
      if (CommonFunction.checkNull(Vo.getLbxUserSearchId43()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId43()).trim()));
      }

      if (CommonFunction.checkNull(Vo.getLbxUserSearchId51()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId51()).trim()));
      }

      if (CommonFunction.checkNull(Vo.getLbxUserSearchId52()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId52()).trim()));
      }
      if (CommonFunction.checkNull(Vo.getLbxUserSearchId53()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId53()).trim()));
      }

      if (CommonFunction.checkNull(Vo.getLbxUserSearchId61()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId61()).trim()));
      }

      if (CommonFunction.checkNull(Vo.getLbxUserSearchId62()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId62()).trim()));
      }
      if (CommonFunction.checkNull(Vo.getLbxUserSearchId63()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId63()).trim()));
      }

      if (CommonFunction.checkNull(Vo.getLbxUserSearchId71()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId71()).trim()));
      }

      if (CommonFunction.checkNull(Vo.getLbxUserSearchId72()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId72()).trim()));
      }
      if (CommonFunction.checkNull(Vo.getLbxUserSearchId73()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId73()).trim()));
      }

      if (CommonFunction.checkNull(Vo.getLbxUserSearchId81()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId81()).trim()));
      }

      if (CommonFunction.checkNull(Vo.getLbxUserSearchId82()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId82()).trim()));
      }
      if (CommonFunction.checkNull(Vo.getLbxUserSearchId83()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId83()).trim()));
      }

      if (CommonFunction.checkNull(Vo.getLbxUserSearchId91()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId91()).trim()));
      }

      if (CommonFunction.checkNull(Vo.getLbxUserSearchId92()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId92()).trim()));
      }
      if (CommonFunction.checkNull(Vo.getLbxUserSearchId93()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId93()).trim()));
      }

      if (!columnAdd.equalsIgnoreCase("")) {
        insertPrepStmtObject.addString("P");
      }

      insertPrepStmtObject.setSql(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN saveApprovalLevelDef() insert query1:::::").append(insertPrepStmtObject.printQuery()).toString());

      qryList.add(insertPrepStmtObject);
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
      if (status) {
        flag = "S";
      }
      else {
        flag = "N";
      }

      logger.info(new StringBuilder().append("In saveApprovalLevelDef......................").append(status).toString());
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList<ApprovalLevelDefVo> editApprovalLevelDef(String productModify, String mcFlag)
  {
    int count = 0;
    String tableName = "";

    ArrayList searchlist = new ArrayList();
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In editApprovalLevelDef.....................................Dao Impl");

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();
      if (CommonFunction.checkNull(mcFlag).equalsIgnoreCase("Y"))
        tableName = "cr_approval_level_m_temp";
      else {
        tableName = "cr_approval_level_m";
      }
      logger.info(new StringBuilder().append("value of table is ::::::::::::::::").append(tableName).toString());
      logger.info(new StringBuilder().append("value of productModify is ::::::::::::::::").append(productModify).toString());

      bufInsSql.append("SELECT PRODUCT_ID,FINAL_APPROVAL_LEVEL,AMOUNT_FROM,AMOUNT_TO,MIN_APPROVAL_LEVEL1,MIN_APPROVAL_LEVEL2,MIN_APPROVAL_LEVEL3,");
      bufInsSql.append("MUST_APPROVE_USER11,MUST_APPROVE_COND11,MUST_APPROVE_USER12,MUST_APPROVE_COND12,MUST_APPROVE_USER13,MUST_APPROVE_USER21,MUST_APPROVE_COND21,");
      bufInsSql.append("MUST_APPROVE_USER22,MUST_APPROVE_COND22,MUST_APPROVE_USER23,MUST_APPROVE_USER31,MUST_APPROVE_COND31,MUST_APPROVE_USER32,MUST_APPROVE_COND32,");
      bufInsSql.append("MUST_APPROVE_USER33,case when REC_STATUS='A' then 'Active' else 'Inactive' end as Status,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER11) As user1,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER12) As user2,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER13) As user3,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER21) As user21,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER22) As user22,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER23) As user23,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER31) As user31,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER32) As user32,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER33) As user33, ");
      bufInsSql.append("(select P.PRODUCT_DESC from  cr_product_m p where P.PRODUCT_ID = a.PRODUCT_ID) As Product ");
      bufInsSql.append(" ,SCHEME_ID,(SELECT SCHEME_DESC FROM CR_SCHEME_M S WHERE S.SCHEME_ID=a.SCHEME_ID), ");

      bufInsSql.append("MUST_APPROVE_USER41,MUST_APPROVE_USER42,MUST_APPROVE_USER43,MUST_APPROVE_USER51,");
      bufInsSql.append("MUST_APPROVE_USER52,MUST_APPROVE_USER53,MUST_APPROVE_USER61,MUST_APPROVE_USER62,");
      bufInsSql.append("MUST_APPROVE_USER63,");
      bufInsSql.append("MUST_APPROVE_USER71,MUST_APPROVE_USER72,MUST_APPROVE_USER73,MUST_APPROVE_USER81,");
      bufInsSql.append("MUST_APPROVE_USER82,MUST_APPROVE_USER83,MUST_APPROVE_USER91,MUST_APPROVE_USER92,");
      bufInsSql.append("MUST_APPROVE_USER93,");

      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER41) As user41,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER42) As user42,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER43) As user43,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER51) As user51,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER52) As user52,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER53) As user53,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER61) As user61,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER62) As user62,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER63) As user63, ");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER71) As user71,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER72) As user72,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER73) As user73,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER81) As user81,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER82) As user82,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER83) As user83,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER91) As user91,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER92) As user92,");
      bufInsSql.append("(select c.USER_NAME from  SEC_USER_M c where c.USER_ID = a.MUST_APPROVE_USER93) As user93, ");
      bufInsSql.append("MIN_APPROVAL_LEVEL4,MIN_APPROVAL_LEVEL5,MIN_APPROVAL_LEVEL6,MIN_APPROVAL_LEVEL7,MIN_APPROVAL_LEVEL8,MIN_APPROVAL_LEVEL9 ");

      bufInsSql.append(new StringBuilder().append("FROM ").append(tableName).append(" a ").toString());

      if (!CommonFunction.checkNull(productModify).equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" where APPROVAL_LEVEL_ID = '").append(productModify).append("' ").toString());
      }

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN editApprovalLevelDef() search query1::::::::::::").append(bufInsSql.toString()).toString());

      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("editApprovalLevelDef ").append(searchlist.get(i).toString()).toString());
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          ApprovalLevelDefVo LevelDefVo = new ApprovalLevelDefVo();

          LevelDefVo.setProductSearch(CommonFunction.checkNull(data.get(0)));
          LevelDefVo.setLbxProductID(CommonFunction.checkNull(data.get(0)));
          LevelDefVo.setFindApprovalSearch(CommonFunction.checkNull(data.get(1)));
          LevelDefVo.setFindApprovalLevel(CommonFunction.checkNull(data.get(1)));
          if (!CommonFunction.checkNull(data.get(2)).trim().equalsIgnoreCase(""))
          {
            Number amount = this.myFormatter.parse(CommonFunction.checkNull(data.get(2)).trim());
            LevelDefVo.setAmountFromSearch(this.myFormatter.format(amount));
            LevelDefVo.setAmountFrom(this.myFormatter.format(amount));
          }
          if (!CommonFunction.checkNull(data.get(3)).trim().equalsIgnoreCase(""))
          {
            Number amount = this.myFormatter.parse(CommonFunction.checkNull(data.get(3)).trim());
            LevelDefVo.setAmountToSearch(this.myFormatter.format(amount));
            LevelDefVo.setAmountTo(this.myFormatter.format(amount));
          }
          LevelDefVo.setLevel1(CommonFunction.checkNull(data.get(4)));
          LevelDefVo.setLevel2(CommonFunction.checkNull(data.get(5)));
          LevelDefVo.setLevel3(CommonFunction.checkNull(data.get(6)));
          LevelDefVo.setLbxUserSearchId11(CommonFunction.checkNull(data.get(7)));
          LevelDefVo.setCondition1(CommonFunction.checkNull(data.get(8)));
          LevelDefVo.setLbxUserSearchId12(CommonFunction.checkNull(data.get(9)));
          LevelDefVo.setCondition2(CommonFunction.checkNull(data.get(10)));
          LevelDefVo.setLbxUserSearchId13(CommonFunction.checkNull(data.get(11)));
          LevelDefVo.setLbxUserSearchId21(CommonFunction.checkNull(data.get(12)));
          LevelDefVo.setCondition21(CommonFunction.checkNull(data.get(13)));
          LevelDefVo.setLbxUserSearchId22(CommonFunction.checkNull(data.get(14)));
          LevelDefVo.setCondition22(CommonFunction.checkNull(data.get(15)));
          LevelDefVo.setLbxUserSearchId23(CommonFunction.checkNull(data.get(16)));
          LevelDefVo.setLbxUserSearchId31(CommonFunction.checkNull(data.get(17)));
          LevelDefVo.setCondition31(CommonFunction.checkNull(data.get(18)));
          LevelDefVo.setLbxUserSearchId32(CommonFunction.checkNull(data.get(19)));
          LevelDefVo.setCondition32(CommonFunction.checkNull(data.get(20)));
          LevelDefVo.setLbxUserSearchId33(CommonFunction.checkNull(data.get(21)));
          LevelDefVo.setStatus(CommonFunction.checkNull(data.get(22)));
          LevelDefVo.setUser11(CommonFunction.checkNull(data.get(23)));
          LevelDefVo.setUser12(CommonFunction.checkNull(data.get(24)));
          LevelDefVo.setUser13(CommonFunction.checkNull(data.get(25)));
          LevelDefVo.setUser21(CommonFunction.checkNull(data.get(26)));
          LevelDefVo.setUser22(CommonFunction.checkNull(data.get(27)));
          LevelDefVo.setUser23(CommonFunction.checkNull(data.get(28)));
          LevelDefVo.setUser31(CommonFunction.checkNull(data.get(29)));
          LevelDefVo.setUser32(CommonFunction.checkNull(data.get(30)));
          LevelDefVo.setUser33(CommonFunction.checkNull(data.get(31)));
          LevelDefVo.setProduct(CommonFunction.checkNull(data.get(32)));
          LevelDefVo.setLbxSchemeId(CommonFunction.checkNull(data.get(33)));
          LevelDefVo.setScheme(CommonFunction.checkNull(data.get(34)));

          LevelDefVo.setLbxUserSearchId41(CommonFunction.checkNull(data.get(35)));
          LevelDefVo.setLbxUserSearchId42(CommonFunction.checkNull(data.get(36)));
          LevelDefVo.setLbxUserSearchId43(CommonFunction.checkNull(data.get(37)));
          LevelDefVo.setLbxUserSearchId51(CommonFunction.checkNull(data.get(38)));
          LevelDefVo.setLbxUserSearchId52(CommonFunction.checkNull(data.get(39)));
          LevelDefVo.setLbxUserSearchId53(CommonFunction.checkNull(data.get(40)));
          LevelDefVo.setLbxUserSearchId61(CommonFunction.checkNull(data.get(41)));
          LevelDefVo.setLbxUserSearchId62(CommonFunction.checkNull(data.get(42)));
          LevelDefVo.setLbxUserSearchId63(CommonFunction.checkNull(data.get(43)));
          LevelDefVo.setLbxUserSearchId71(CommonFunction.checkNull(data.get(44)));
          LevelDefVo.setLbxUserSearchId72(CommonFunction.checkNull(data.get(45)));
          LevelDefVo.setLbxUserSearchId73(CommonFunction.checkNull(data.get(46)));
          LevelDefVo.setLbxUserSearchId81(CommonFunction.checkNull(data.get(47)));
          LevelDefVo.setLbxUserSearchId82(CommonFunction.checkNull(data.get(48)));
          LevelDefVo.setLbxUserSearchId83(CommonFunction.checkNull(data.get(49)));
          LevelDefVo.setLbxUserSearchId91(CommonFunction.checkNull(data.get(50)));
          LevelDefVo.setLbxUserSearchId92(CommonFunction.checkNull(data.get(51)));
          LevelDefVo.setLbxUserSearchId93(CommonFunction.checkNull(data.get(52)));
          LevelDefVo.setUser41(CommonFunction.checkNull(data.get(53)));
          LevelDefVo.setUser42(CommonFunction.checkNull(data.get(54)));
          LevelDefVo.setUser43(CommonFunction.checkNull(data.get(55)));
          LevelDefVo.setUser51(CommonFunction.checkNull(data.get(56)));
          LevelDefVo.setUser52(CommonFunction.checkNull(data.get(57)));
          LevelDefVo.setUser53(CommonFunction.checkNull(data.get(58)));
          LevelDefVo.setUser61(CommonFunction.checkNull(data.get(59)));
          LevelDefVo.setUser62(CommonFunction.checkNull(data.get(60)));
          LevelDefVo.setUser63(CommonFunction.checkNull(data.get(61)));
          LevelDefVo.setUser71(CommonFunction.checkNull(data.get(62)));
          LevelDefVo.setUser72(CommonFunction.checkNull(data.get(63)));
          LevelDefVo.setUser73(CommonFunction.checkNull(data.get(64)));
          LevelDefVo.setUser81(CommonFunction.checkNull(data.get(65)));
          LevelDefVo.setUser82(CommonFunction.checkNull(data.get(66)));
          LevelDefVo.setUser83(CommonFunction.checkNull(data.get(67)));
          LevelDefVo.setUser91(CommonFunction.checkNull(data.get(68)));
          LevelDefVo.setUser92(CommonFunction.checkNull(data.get(69)));
          LevelDefVo.setUser93(CommonFunction.checkNull(data.get(70)));
          LevelDefVo.setLevel4(CommonFunction.checkNull(data.get(71)));
          LevelDefVo.setLevel5(CommonFunction.checkNull(data.get(72)));
          LevelDefVo.setLevel6(CommonFunction.checkNull(data.get(73)));
          LevelDefVo.setLevel7(CommonFunction.checkNull(data.get(74)));
          LevelDefVo.setLevel8(CommonFunction.checkNull(data.get(75)));
          LevelDefVo.setLevel9(CommonFunction.checkNull(data.get(76)));

          LevelDefVo.setTotalRecordSize(count);
          detailList.add(LevelDefVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public String updateApprovalLevelDef(ApprovalLevelDefVo Vo, String productModify, String mcFlag)
  {
    logger.info("In MasterDAOImpl........................updateApprovalLevelDef...........");
    boolean status = false;
    String flag = "";
    String tableName = "";
    String query = "";
    String queryDelete = "";
    String exist = "";
    ArrayList qryList = new ArrayList();
    ArrayList updatelist = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

    String stat = "X";
    String count1 = "";
    int num = 0;

    if ((Vo.getStatus() != null) && (Vo.getStatus().equals("on")))
    {
      stat = "A";
    }
    else stat = "X";

    if (CommonFunction.checkNull(mcFlag).equalsIgnoreCase("Y"))
      tableName = "cr_approval_level_m_temp";
    else
      tableName = "cr_approval_level_m";
    try {
      StringBuffer bufInsSql = new StringBuffer();
      if (CommonFunction.checkNull(mcFlag).equalsIgnoreCase("Y"))
      {
        if (CommonFunction.checkNull(Vo.getDecideUpdate()).equalsIgnoreCase("Y")) {
          query = new StringBuilder().append("SELECT  APPROVAL_LEVEL_ID FROM cr_approval_level_m_temp WHERE  APPROVAL_LEVEL_ID_MAIN='").append(CommonFunction.checkNull(productModify)).append("'").toString();
          exist = ConnectionDAOforEJB.singleReturn(query);
          if (!CommonFunction.checkNull(exist).equalsIgnoreCase("")) {
            PrepStmtObject insertPrepStmtObject1 = new PrepStmtObject();
            queryDelete = new StringBuilder().append("DELETE FROM cr_approval_level_m_temp WHERE APPROVAL_LEVEL_ID='").append(exist).append("'").toString();
            logger.info(new StringBuilder().append("In DELETE .....................................Dao Impl").append(queryDelete).toString());
            insertPrepStmtObject1.setSql(queryDelete);
            updatelist.add(insertPrepStmtObject1);
            boolean status1 = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
            logger.info(new StringBuilder().append("status  main :::::::::::::").append(status1).toString());
            insertPrepStmtObject1 = null;
            queryDelete = null;
            updatelist.clear();
            updatelist = null;
          }
          logger.info(new StringBuilder().append("value  of  num :::::::::::::").append(num).toString());
        }
        else
        {
          query = new StringBuilder().append("SELECT  COUNT(1) FROM cr_approval_level_m_temp WHERE  APPROVAL_LEVEL_ID='").append(CommonFunction.checkNull(productModify)).append("'").toString();
          logger.info(new StringBuilder().append("in  getApprovalId:::::::::::::query::::::: ").append(query).toString());
          exist = ConnectionDAOforEJB.singleReturn(query);
          if (!CommonFunction.checkNull(exist).equalsIgnoreCase(""))
            num = Integer.parseInt(exist);
        }
      }
      else {
        num = 10;
      }
      logger.info(new StringBuilder().append("in  getApprovalId:::::::::::::value ::::::: ").append(productModify).toString());
      logger.info(new StringBuilder().append("in  getApprovalId:::::::::num ::::value ::::::: ").append(num).toString());

      if (num > 0)
      {
        bufInsSql.append(new StringBuilder().append("UPDATE ").append(tableName).append(" set PRODUCT_ID=?,SCHEME_ID=?,FINAL_APPROVAL_LEVEL=?, AMOUNT_FROM=?, AMOUNT_TO=?, ").append("MIN_APPROVAL_LEVEL1=?, MIN_APPROVAL_LEVEL2=?, MIN_APPROVAL_LEVEL3=?, MUST_APPROVE_USER11=?, MUST_APPROVE_USER12=?, ").append("MUST_APPROVE_USER13=?, MUST_APPROVE_USER21=?, MUST_APPROVE_USER22=?, ").append("MUST_APPROVE_USER23=?, MUST_APPROVE_USER31=?, MUST_APPROVE_USER32=?,  MUST_APPROVE_USER33=?, ").append("REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND), AUTHOR_ID=?, ").append("AUTHOR_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND), ").toString());

        bufInsSql.append("MIN_APPROVAL_LEVEL4=?, MIN_APPROVAL_LEVEL5=?, MIN_APPROVAL_LEVEL6=?,MIN_APPROVAL_LEVEL7=?, MIN_APPROVAL_LEVEL8=?, MIN_APPROVAL_LEVEL9=?, MUST_APPROVE_USER41=?, MUST_APPROVE_USER42=?, MUST_APPROVE_USER43=?, MUST_APPROVE_USER51=?, MUST_APPROVE_USER52=?, MUST_APPROVE_USER53=?, MUST_APPROVE_USER61=?, MUST_APPROVE_USER62=?, MUST_APPROVE_USER63=?,MUST_APPROVE_USER71=?, MUST_APPROVE_USER72=?, MUST_APPROVE_USER73=?, MUST_APPROVE_USER81=?, MUST_APPROVE_USER82=?, MUST_APPROVE_USER83=?, MUST_APPROVE_USER91=?, MUST_APPROVE_USER92=?, MUST_APPROVE_USER93=? ");

        if (CommonFunction.checkNull(mcFlag).equalsIgnoreCase("Y"))
          bufInsSql.append(",MAKER_AUTHOR_STATUS=?");
        bufInsSql.append(new StringBuilder().append(" where APPROVAL_LEVEL_ID='").append(productModify).append("'").toString());

        logger.info(new StringBuilder().append("productModify:::::::::::").append(productModify).toString());
        logger.info(new StringBuilder().append("Vo.getLbxProductID()::::").append(Vo.getLbxProductID()).toString());
        logger.info(new StringBuilder().append("Vo.getFindApprovalLevel():::::::::").append(Vo.getFindApprovalLevel()).toString());

        if (CommonFunction.checkNull(Vo.getLbxProductID()).equalsIgnoreCase("")) {
          insertPrepStmtObject.addNull();
        }
        else {
          insertPrepStmtObject.addString(Vo.getLbxProductID().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(Vo.getLbxSchemeId()).equalsIgnoreCase("")) {
          insertPrepStmtObject.addNull();
        }
        else {
          insertPrepStmtObject.addString(Vo.getLbxSchemeId().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(Vo.getFindApprovalLevel()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getFindApprovalLevel().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(Vo.getAmountFrom()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(Vo.getAmountFrom().toUpperCase().trim())).toString());
        }
        if (CommonFunction.checkNull(Vo.getAmountTo()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(Vo.getAmountTo().toUpperCase().trim())).toString());
        }
        if (CommonFunction.checkNull(Vo.getLevel1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getLevel1().trim());
        }
        if (CommonFunction.checkNull(Vo.getLevel2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getLevel2().trim().toString());
        }
        if (CommonFunction.checkNull(Vo.getLevel3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getLevel3().trim().toString());
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId11()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId11()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId12()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId12()).trim()));
        }
        if (CommonFunction.checkNull(Vo.getLbxUserSearchId13()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId13()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId21()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId21()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId22()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId22()).trim()));
        }
        if (CommonFunction.checkNull(Vo.getLbxUserSearchId23()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId23()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId31()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId31()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId32()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId32()).trim()));
        }
        if (CommonFunction.checkNull(Vo.getLbxUserSearchId33()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId33()).trim()));
        }

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(Vo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getMakerId());
        }
        if (CommonFunction.checkNull(Vo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getMakerDate());
        }
        if (CommonFunction.checkNull(Vo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getMakerId());
        }
        if (CommonFunction.checkNull(Vo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getMakerDate());
        }

        if (CommonFunction.checkNull(Vo.getLevel4()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getLevel4().trim());
        }
        if (CommonFunction.checkNull(Vo.getLevel5()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getLevel5().trim().toString());
        }
        if (CommonFunction.checkNull(Vo.getLevel6()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getLevel6().trim().toString());
        }
        if (CommonFunction.checkNull(Vo.getLevel7()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getLevel7().trim());
        }
        if (CommonFunction.checkNull(Vo.getLevel8()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getLevel8().trim().toString());
        }
        if (CommonFunction.checkNull(Vo.getLevel9()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getLevel9().trim().toString());
        }
        if (CommonFunction.checkNull(Vo.getLbxUserSearchId41()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId41()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId42()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId42()).trim()));
        }
        if (CommonFunction.checkNull(Vo.getLbxUserSearchId43()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId43()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId51()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId51()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId52()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId52()).trim()));
        }
        if (CommonFunction.checkNull(Vo.getLbxUserSearchId53()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId53()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId61()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId61()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId62()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId62()).trim()));
        }
        if (CommonFunction.checkNull(Vo.getLbxUserSearchId63()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId63()).trim()));
        }
        if (CommonFunction.checkNull(Vo.getLbxUserSearchId71()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId71()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId72()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId72()).trim()));
        }
        if (CommonFunction.checkNull(Vo.getLbxUserSearchId73()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId73()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId81()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId81()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId82()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId82()).trim()));
        }
        if (CommonFunction.checkNull(Vo.getLbxUserSearchId83()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId83()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId91()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId91()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId92()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId92()).trim()));
        }
        if (CommonFunction.checkNull(Vo.getLbxUserSearchId93()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId93()).trim()));
        }

        if (CommonFunction.checkNull(mcFlag).equalsIgnoreCase("Y")) {
          insertPrepStmtObject.addString("P");
        }
        insertPrepStmtObject.setSql(bufInsSql.toString());

        logger.info(new StringBuilder().append("IN updateApprovalLevelDef() insert query1:::::").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
      }
      else
      {
        String columnAdd = ",MAKER_AUTHOR_STATUS";

        bufInsSql.append(new StringBuilder().append("INSERT INTO cr_approval_level_m_temp(PRODUCT_ID,SCHEME_ID,FINAL_APPROVAL_LEVEL,AMOUNT_FROM,AMOUNT_TO,MIN_APPROVAL_LEVEL1,MIN_APPROVAL_LEVEL2,MIN_APPROVAL_LEVEL3,MUST_APPROVE_USER11,MUST_APPROVE_USER12,MUST_APPROVE_USER13,MUST_APPROVE_USER21,MUST_APPROVE_USER22,MUST_APPROVE_USER23,MUST_APPROVE_USER31,MUST_APPROVE_USER32,MUST_APPROVE_USER33,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,MIN_APPROVAL_LEVEL4,MIN_APPROVAL_LEVEL5,MIN_APPROVAL_LEVEL6,MIN_APPROVAL_LEVEL7,MIN_APPROVAL_LEVEL8,MIN_APPROVAL_LEVEL9,MUST_APPROVE_USER41,MUST_APPROVE_USER42,MUST_APPROVE_USER43,MUST_APPROVE_USER51,MUST_APPROVE_USER52,MUST_APPROVE_USER53,MUST_APPROVE_USER61,MUST_APPROVE_USER62,MUST_APPROVE_USER63,MUST_APPROVE_USER71,MUST_APPROVE_USER72,MUST_APPROVE_USER73,MUST_APPROVE_USER81,MUST_APPROVE_USER82,MUST_APPROVE_USER83,MUST_APPROVE_USER91,MUST_APPROVE_USER92,APPROVAL_LEVEL_ID_MAIN,MUST_APPROVE_USER93").append(columnAdd).append(")").toString());

        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");

        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");

        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?)");

        logger.info(new StringBuilder().append("Vo.getLbxProductID():::::::::::::").append(Vo.getLbxProductID()).toString());
        logger.info(new StringBuilder().append("Vo.getLbxUserSearchId1:::::::::::").append(Vo.getLbxUserSearchId11()).toString());
        logger.info(new StringBuilder().append("Vo.getLbxUserSearchId2:::::::::::").append(Vo.getLbxUserSearchId12()).toString());
        logger.info(new StringBuilder().append("Vo.getLbxUserSearchId3:::::::::::").append(Vo.getLbxUserSearchId13()).toString());

        if (CommonFunction.checkNull(Vo.getLbxProductID()).equalsIgnoreCase("")) {
          insertPrepStmtObject.addNull();
        }
        else {
          insertPrepStmtObject.addString(Vo.getLbxProductID().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(Vo.getLbxSchemeId()).equalsIgnoreCase("")) {
          insertPrepStmtObject.addNull();
        }
        else {
          insertPrepStmtObject.addString(Vo.getLbxSchemeId().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(Vo.getFindApprovalLevel()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getFindApprovalLevel().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(Vo.getAmountFrom()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(Vo.getAmountFrom().toUpperCase().trim())).toString());
        }
        if (CommonFunction.checkNull(Vo.getAmountTo()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(StringEscapeUtils.escapeSql(Vo.getAmountTo().toUpperCase().trim())).toString());
        }
        if (CommonFunction.checkNull(Vo.getLevel1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getLevel1().trim());
        }
        if (CommonFunction.checkNull(Vo.getLevel2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getLevel2().trim().toString());
        }

        if (CommonFunction.checkNull(Vo.getLevel3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getLevel3().trim().toString());
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId11()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId11()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId12()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId12()).trim()));
        }
        if (CommonFunction.checkNull(Vo.getLbxUserSearchId13()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId13()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId21()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId21()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId22()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId22()).trim()));
        }
        if (CommonFunction.checkNull(Vo.getLbxUserSearchId23()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId23()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId31()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId31()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId32()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId32()).trim()));
        }
        if (CommonFunction.checkNull(Vo.getLbxUserSearchId33()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId33()).trim()));
        }

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }

        if (CommonFunction.checkNull(Vo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getMakerId());
        }
        if (CommonFunction.checkNull(Vo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getMakerDate());
        }
        if (CommonFunction.checkNull(Vo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getMakerId());
        }
        if (CommonFunction.checkNull(Vo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getMakerDate());
        }

        if (CommonFunction.checkNull(Vo.getLevel4()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getLevel4().trim());
        }
        if (CommonFunction.checkNull(Vo.getLevel5()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getLevel5().trim().toString());
        }

        if (CommonFunction.checkNull(Vo.getLevel6()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getLevel6().trim().toString());
        }
        if (CommonFunction.checkNull(Vo.getLevel7()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getLevel7().trim());
        }
        if (CommonFunction.checkNull(Vo.getLevel8()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getLevel8().trim().toString());
        }

        if (CommonFunction.checkNull(Vo.getLevel9()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(Vo.getLevel9().trim().toString());
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId41()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId41()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId42()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId42()).trim()));
        }
        if (CommonFunction.checkNull(Vo.getLbxUserSearchId43()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId43()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId51()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId51()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId52()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId52()).trim()));
        }
        if (CommonFunction.checkNull(Vo.getLbxUserSearchId53()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId53()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId61()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId61()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId62()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId62()).trim()));
        }
        if (CommonFunction.checkNull(Vo.getLbxUserSearchId63()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId63()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId71()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId71()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId72()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId72()).trim()));
        }
        if (CommonFunction.checkNull(Vo.getLbxUserSearchId73()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId73()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId81()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId81()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId82()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId82()).trim()));
        }
        if (CommonFunction.checkNull(Vo.getLbxUserSearchId83()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId83()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId91()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId91()).trim()));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId92()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId92()).trim()));
        }

        if (CommonFunction.checkNull(productModify).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(productModify));
        }

        if (CommonFunction.checkNull(Vo.getLbxUserSearchId93()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxUserSearchId93()).trim()));
        }

        insertPrepStmtObject.addString("P");

        insertPrepStmtObject.setSql(bufInsSql.toString());

        logger.info(new StringBuilder().append("IN saveApprovalLevelDef() insert query1::::main::::").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
      }

      if (status) {
        flag = "S";
      }
      else {
        flag = "N";
      }

      logger.info(new StringBuilder().append("In updateApprovalLevelDef......................").append(flag).toString());
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      queryDelete = null;
      tableName = null;
      query = null;
      queryDelete = null;
      exist = null;
    }
    return flag;
  }

  public ArrayList getRoleType()
  {
    ArrayList list = new ArrayList();
    try {
      logger.info("In getRoleType().........Inside ejb server file.........DAOImpl");
      String query = "select VALUE,DESCRIPTION from generic_master WHERE GENERIC_KEY='RULE_TYPE' and REC_STATUS='A'";
      logger.info(new StringBuilder().append("query : ").append(query).toString());
      MasterVo vO = null;
      ArrayList roleList = ConnectionDAOforEJB.sqlSelect(query);
      logger.info(new StringBuilder().append("roleList ").append(roleList.size()).toString());
      for (int i = 0; i < roleList.size(); i++) {
        logger.info(new StringBuilder().append("roleList ").append(CommonFunction.checkNull(roleList.get(i)).toString()).toString());

        ArrayList data = (ArrayList)roleList.get(i);
        for (int k = 0; k < data.size(); k++) {
          logger.info(new StringBuilder().append("getRoleType ").append(CommonFunction.checkNull(data.get(k)).toString()).toString());

          vO = new MasterVo();
          vO.setRuleValue(data.get(0).toString());
          vO.setRuleDescription(data.get(1).toString());
        }
        list.add(vO);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getSubRoleType() {
    ArrayList list = new ArrayList();
    try {
      logger.info("In getSubRoleType().........Inside ejb server file.........DAOImpl");
      String query = "select VALUE,DESCRIPTION from generic_master WHERE GENERIC_KEY='SUB_RULE_TYPE' and REC_STATUS='A'";
      logger.info(new StringBuilder().append("query : ").append(query).toString());
      MasterVo vO = null;
      ArrayList subRoleList = ConnectionDAOforEJB.sqlSelect(query);
      logger.info(new StringBuilder().append("subRoleList ").append(subRoleList.size()).toString());
      for (int i = 0; i < subRoleList.size(); i++) {
        logger.info(new StringBuilder().append("roleList ").append(CommonFunction.checkNull(subRoleList.get(i)).toString()).toString());

        ArrayList data = (ArrayList)subRoleList.get(i);
        for (int k = 0; k < data.size(); k++) {
          logger.info(new StringBuilder().append("getSubRoleType ").append(CommonFunction.checkNull(data.get(k)).toString()).toString());

          vO = new MasterVo();
          vO.setSubRuleValue(data.get(0).toString());
          vO.setSubRuleDescription(data.get(1).toString());
        }
        list.add(vO);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public String saveRuleDetail(Object ob) {
    MasterVo vo = (MasterVo)ob;
    String status = "";
    int ct = 0;

    Connection con = ConnectionDAOforEJB.getConnection();
    CallableStatement cst = null;
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String query = new StringBuilder().append("SELECT COUNT(1) FROM cr_rule_m where RULE_CODE='").append(StringEscapeUtils.escapeSql(vo.getRuleCode().trim())).append("'").toString();

    logger.info(new StringBuilder().append("In saveRuleDetail.............Inside ejb server file.........Dao Impl").append(query).toString());
    logger.info(new StringBuilder().append("value of stage::::::::::").append(vo.getStageForRule()).toString());
    String st = ConnectionDAOforEJB.singleReturn(query);
    ct = Integer.parseInt(st);
    if (ct == 0)
    {
      try
      {
        if ((vo.getRuleStatus() != null) && (vo.getRuleStatus().equals("on")))
        {
          stat = "A";
        }
        else stat = "X";

        cst = con.prepareCall("call CR_Rule_Expression_Validation(?,?,?,?,?,?,?,?,?,?,?,?,?)");
        cst.setString(1, CommonFunction.checkNull(vo.getRuleCode()).trim());
        cst.setString(2, CommonFunction.checkNull(vo.getRuleName()).trim());
        cst.setString(3, CommonFunction.checkNull(vo.getRuleType()).trim());
        cst.setString(4, CommonFunction.checkNull(vo.getSubRuleType()).trim());
        cst.setString(5, CommonFunction.checkNull(vo.getExpression()).trim());
        cst.setString(6, CommonFunction.checkNull(vo.getRuleCodeModify()).trim());
        cst.setString(7, CommonFunction.checkNull(stat).trim());
        cst.setString(8, CommonFunction.checkNull(vo.getMakerId()).trim());
        cst.setString(9, CommonFunction.checkNull(CommonFunction.changeFormat(vo.getMakerDate())).trim());
        cst.setString(10, CommonFunction.checkNull(vo.getStageForRule()).trim());
        cst.setString(11, CommonFunction.checkNull(vo.getSessionId()).trim());
        cst.registerOutParameter(12, 1);
        cst.registerOutParameter(13, 1);
        logger.info(new StringBuilder().append("cst &&&&&&&&&&&&&&&&& ").append(cst.toString()).toString());
        cst.execute();
        String s1 = cst.getString(12);
        String s2 = cst.getString(13);
        logger.info(new StringBuilder().append("S1 : ").append(s1).toString());
        logger.info(new StringBuilder().append("S2 ").append(s2).toString());
        if ((s1 != null) && (s1.equalsIgnoreCase("S")))
        {
          status = s1;

          logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
        }
        else
        {
          status = s2;

          logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
        }
        logger.info(new StringBuilder().append("s1: ").append(s1).toString());
        logger.info(new StringBuilder().append("s2: ").append(s2).toString());
      }
      catch (Exception e)
      {
        status = "ERROR! IN PROCEDURE EXECUTION,PLEASE CONTACT ADMINISTRATOR....";
        e.printStackTrace();
      }
      finally
      {
        try
        {
          cst.close();
          con.close();
        }
        catch (SQLException e) {
          e.printStackTrace();
        }
      }
    }

    return status;
  }

  public String updateRuleDetail(Object ob)
  {
    MasterVo vo = (MasterVo)ob;
    logger.info(new StringBuilder().append("updateRuleDetail:-").append(vo.getRuleStatus()).toString());
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();

    String status = "";
    String stat = "";

    Connection con = ConnectionDAOforEJB.getConnection();
    CallableStatement cst = null;
    ArrayList qryList = new ArrayList();
    String query = new StringBuilder().append("select RULE_CODE,RULE_DESCRIPTION from cr_rule_m where RULE_CODE='").append(StringEscapeUtils.escapeSql(vo.getRuleCode().trim())).append("'").toString();

    logger.info(new StringBuilder().append("In updateRuleDetail............Inside ejb server file.........DAOImpl").append(query).toString());
    boolean st = ConnectionDAOforEJB.checkStatus(query);
    try
    {
      if ((vo.getRuleStatus() != null) && (vo.getRuleStatus().equals("on")))
        stat = "A";
      else {
        stat = "X";
      }

      logger.info(new StringBuilder().append("start ^^^^^^^^^^^^^^^^^^^^^^^^^^^^::::::::::::::::saurabh").append(vo.getStageForRule()).toString());

      cst = con.prepareCall("call CR_Rule_Expression_Validation(?,?,?,?,?,?,?,?,?,?,?,?,?)");

      cst.setString(1, CommonFunction.checkNull(vo.getRuleCode()).trim());
      cst.setString(2, CommonFunction.checkNull(vo.getRuleName()).trim());
      cst.setString(3, CommonFunction.checkNull(vo.getRuleType()).trim());
      cst.setString(4, CommonFunction.checkNull(vo.getSubRuleType()).trim());
      cst.setString(5, CommonFunction.checkNull(vo.getExpression()).trim());
      cst.setString(6, CommonFunction.checkNull(vo.getRuleCodeModify()).trim());
      cst.setString(7, CommonFunction.checkNull(stat).trim());
      cst.setString(8, CommonFunction.checkNull(vo.getMakerId()).trim());
      cst.setString(9, CommonFunction.checkNull(CommonFunction.changeFormat(vo.getMakerDate())).trim());
      cst.setString(10, CommonFunction.checkNull(vo.getStageForRule()).trim());
      cst.setString(11, CommonFunction.checkNull(vo.getSessionId()).trim());
      cst.registerOutParameter(12, 1);
      cst.registerOutParameter(13, 1);
      logger.info(new StringBuilder().append("cst &&&&&&&&&&&&&&&&&&&&&&&&&& ").append(cst.toString()).toString());

      cst.executeUpdate();
      String s1 = cst.getString(12);
      String s2 = cst.getString(13);
      if ((s1 != null) && (s1.equalsIgnoreCase("S")))
      {
        status = s1;

        logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
      }
      else
      {
        status = s2;

        logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
      }
      logger.info(new StringBuilder().append("s1: ").append(s1).toString());
      logger.info(new StringBuilder().append("s2: ").append(s2).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      try
      {
        cst.close();
        con.close();
      }
      catch (SQLException e) {
        e.printStackTrace();
      }
    }
    return status;
  }

  public boolean checkExpression(Object ob)
  {
    MasterVo vo = (MasterVo)ob;
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();

    boolean status = false;
    String expr = "";
    String param = "";
    try
    {
      String query = "select PARAM_CODE from cr_financial_param where REC_STATUS='A'";
      logger.info(new StringBuilder().append("query : ").append(query).toString());
      MasterVo vO = null;
      ArrayList paramCodeList = ConnectionDAOforEJB.sqlSelect(query);
      expr = vo.getExpression();
      logger.info(new StringBuilder().append("paramCodeList ").append(paramCodeList.size()).toString());
      for (int i = 0; i < paramCodeList.size(); i++)
      {
        ArrayList data = (ArrayList)paramCodeList.get(i);
        for (int k = 0; k < data.size(); k++)
        {
          param = data.get(0).toString();
          logger.info(new StringBuilder().append("param ******************* ").append(param).toString());
          logger.info(new StringBuilder().append("expr.indexOf(param) ******************* ").append(expr.indexOf(param)).toString());
          if (expr.indexOf(param) >= 0)
          {
            expr = expr.replaceAll(param, "1");
            logger.info(new StringBuilder().append("expr in if******************* ").append(expr).toString());
          }
        }

      }

      logger.info(new StringBuilder().append("expression .................................. ").append(expr).toString());
      ScriptEngineManager mgr = new ScriptEngineManager();
      ScriptEngine engine = mgr.getEngineByName("JavaScript");

      logger.info(new StringBuilder().append("CommonFunction.checkNull(engine.eval(expr):::::::::::: ").append(CommonFunction.checkNull(new StringBuilder().append(engine.eval(expr)).append("").toString())).toString());
      if (!CommonFunction.checkNull(new StringBuilder().append(engine.eval(expr)).append("").toString()).equalsIgnoreCase(""))
      {
        status = true;
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    logger.info(new StringBuilder().append("status .................................. ").append(status).toString());
    return status;
  }

  public ArrayList getParamDetailDetails(String sourceType) {
    ArrayList list = new ArrayList();

    StringBuilder query = new StringBuilder();
    try
    {
      if (sourceType.equalsIgnoreCase(""))
      {
        query.append("SELECT PARAM_CODE,PARAM_NAME FROM cr_financial_param WHERE REC_STATUS='A'");
      }
      else
      {
        query.append(new StringBuilder().append("SELECT PARAM_CODE,PARAM_NAME FROM cr_financial_param WHERE REC_STATUS='A' and SOURCE_TYPE='").append(sourceType).append("'").toString());
      }
      logger.info(new StringBuilder().append("query : Nishant2").append(query).toString());
      ArrayList paramDetail = ConnectionDAOforEJB.sqlSelect(query.toString());

      query = null;

      for (int i = 0; i < paramDetail.size(); i++)
      {
        ArrayList subParamDetail = (ArrayList)paramDetail.get(i);
        if (subParamDetail.size() > 0)
        {
          FinancialAnalysisVo vo = new FinancialAnalysisVo();
          vo.setParameCode(CommonFunction.checkNull(subParamDetail.get(0)).trim());

          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    logger.info(new StringBuilder().append("paramDetail size is ..................................").append(list.size()).toString());
    return list;
  }

  public boolean insertCardScoreMaster1(Object ob)
  {
    return false;
  }

  public ArrayList<scoreCardMasterVo> searchCardScoreDetails(Object ob, HttpServletRequest request)
  {
    return null;
  }

  public ArrayList<pcdMasterVo> searchPolicyListData(Object ob)
  {
    return null;
  }

  public boolean getRecordStatus(ApprovalLevelDefVo vo)
  {
    boolean status = false;
    int count = 0;
    String productId = vo.getLbxProductID().trim();
    int finalApprovalLevel = Integer.parseInt(vo.getFindApprovalLevel().trim());
    String query = new StringBuilder().append(" select count(1) from cr_approval_level_m where PRODUCT_ID ='").append(productId).append("' and  FINAL_APPROVAL_LEVEL=").append(finalApprovalLevel).toString();
    logger.info(new StringBuilder().append("query : ").append(query).toString());
    try
    {
      ArrayList header = ConnectionDAO.sqlSelect(query);
      ArrayList subList = (ArrayList)header.get(0);
      String num = (String)subList.get(0);
      count = Integer.parseInt(num);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    if (count > 0)
      status = true;
    return status;
  }

  public ArrayList getRuleMasterParam(String sourceType) {
    ArrayList list = new ArrayList();
    logger.info("In getRuleMasterParam............Inside ejb server file......Dao Impl");
    String query = "";
    try
    {
      if (sourceType.equalsIgnoreCase(""))
      {
        query = "select RULE_PARAM_CODE , RULE_PARAM_NAME from cr_rule_param_m where REC_STATUS = 'A'";
      }
      else
      {
        query = new StringBuilder().append("select RULE_PARAM_CODE , RULE_PARAM_NAME from cr_rule_param_m where REC_STATUS = 'A' and SOURCE_DATA_TYPE='").append(sourceType).append("'").toString();
      }
      logger.info(new StringBuilder().append("query : ").append(query).toString());
      ArrayList paramDetail = ConnectionDAOforEJB.sqlSelect(query);
      for (int i = 0; i < paramDetail.size(); i++)
      {
        ArrayList subParamDetail = (ArrayList)paramDetail.get(i);
        if (subParamDetail.size() > 0)
        {
          FinancialAnalysisVo vo = new FinancialAnalysisVo();
          vo.setParameCode(CommonFunction.checkNull(subParamDetail.get(0)).trim());

          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    logger.info(new StringBuilder().append("paramDetail size is ..................................").append(list.size()).toString());
    return list;
  }
  public ArrayList defaultCountry1() {
    ArrayList list = new ArrayList();
    try {
      logger.info("In defaultcountry1()..........inside ejb server file.........DAOImpl");
      StringBuilder query = new StringBuilder();

      query.append("SELECT PARAMETER_VALUE,PARAMETER_DESC FROM parameter_mst WHERE PARAMETER_KEY='DEFAULT_COUNTRY'");
      logger.info(new StringBuilder().append("In defaultcountry...............query...........DAOImpl").append(query).toString());
      BankBranchMasterVo vo = null;
      ArrayList country = ConnectionDAO.sqlSelect(query.toString());

      query = null;

      logger.info(new StringBuilder().append("defaultcountry() ").append(country.size()).toString());
      for (int i = 0; i < country.size(); i++) {
        logger.info(new StringBuilder().append("defaultcountry()...Outer FOR loop ").append(CommonFunction.checkNull(country.get(i)).toString()).toString());
        ArrayList data = (ArrayList)country.get(i);
        if (data.size() > 0) {
          vo = new BankBranchMasterVo();
          vo.setDefaultcountryid(CommonFunction.checkNull(data.get(0)).trim());
          vo.setDefaultcountryname(CommonFunction.checkNull(data.get(1)).trim());
          list.add(vo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public String checkgroupName(String group) {
    String groupName = "";
    try {
      String query1 = new StringBuilder().append("SELECT count(1) FROM gcd_group_m where GROUP_DESC='").append(StringEscapeUtils.escapeSql(group)).append("'").toString();
      groupName = ConnectionDAOforEJB.singleReturn(query1);
    } catch (Exception e) {
      e.printStackTrace();
    }
    logger.info(new StringBuilder().append("checkgroupName------------->").append(groupName).toString());
    return groupName;
  }

  public ArrayList getAreaCode()
  {
    ArrayList list = new ArrayList();
    try {
      logger.info("In getAreaCode()...............DAOImpl");
      StringBuilder query = new StringBuilder();

      query.append("select PARAMETER_KEY,PARAMETER_VALUE from com_areacode_m");
      logger.info(new StringBuilder().append("In getAreaCode...............query...........DAOImpl").append(query).toString());
      BranchMasterVo vo = null;
      ArrayList country = ConnectionDAO.sqlSelect(query.toString());

      query = null;

      logger.info(new StringBuilder().append("getAreaCode() ").append(country.size()).toString());
      for (int i = 0; i < country.size(); i++) {
        logger.info(new StringBuilder().append("getAreaCode()...Outer FOR loop ").append(CommonFunction.checkNull(country.get(i)).toString()).toString());
        ArrayList data = (ArrayList)country.get(i);
        if (data.size() > 0) {
          vo = new BranchMasterVo();
          vo.setAreaCode(CommonFunction.checkNull(data.get(0)).trim());
          vo.setAreaDesc(CommonFunction.checkNull(data.get(1)).trim());
          list.add(vo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public boolean insertBranchAreaCode(BranchMasterVo branchMasterVo, String[] areaCode)
  {
    boolean status = false;
    logger.info(new StringBuilder().append("In insertBranchAreaCode..........").append(branchMasterVo.getBranchStatus()).toString());
    ArrayList qryList = new ArrayList();
    StringBuffer bufInsSql = new StringBuffer();
    PrepStmtObject insertPrepStmtObject = null;
    String stat = "X";
    String branchId = CommonFunction.checkNull(branchMasterVo.getBranchId().trim());
    try
    {
      String query = new StringBuilder().append("SELECT count(1) FROM com_areacode_branch_mapping WHERE BRANCH_ID='").append(branchId).append("' ").toString();
      logger.info(new StringBuilder().append("In insertBranchAreaCode.....................................Dao Impl").append(query).toString());
      String valcount = CommonFunction.checkNull(ConnectionDAOforEJB.singleReturn(query));
      logger.info(new StringBuilder().append("valcount------->").append(valcount).toString());
      if (!CommonFunction.checkNull(valcount).equalsIgnoreCase("")) {
        int count = Integer.parseInt(valcount);
        if (count > 0) {
          insertPrepStmtObject = new PrepStmtObject();
          String strquery = new StringBuilder().append("DELETE FROM com_areacode_branch_mapping WHERE BRANCH_ID='").append(branchId).append("'").toString();
          insertPrepStmtObject.setSql(strquery);
          qryList.add(insertPrepStmtObject);
        }
      }

      if ((branchMasterVo.getBranchStatus() != null) && (branchMasterVo.getBranchStatus().equals("on")))
        stat = "A";
      else {
        stat = "X";
      }

      if ((areaCode != null) && 
        (areaCode.length > 0))
      {
        for (int i = 0; i < areaCode.length; i++) {
          insertPrepStmtObject = new PrepStmtObject();
          bufInsSql = new StringBuffer();
          bufInsSql.append("INSERT INTO com_areacode_branch_mapping(BRANCH_ID,AREA_CODE,REC_STATUS,MAKER_ID,MAKER_DATE)");
          bufInsSql.append(" values ( ");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

          if (CommonFunction.checkNull(branchMasterVo.getBranchId()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(branchMasterVo.getBranchId().toUpperCase());

          if (CommonFunction.checkNull(areaCode[i]).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(areaCode[i]);
          }
          if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(stat);
          }
          if (CommonFunction.checkNull(branchMasterVo.getMakerId()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(branchMasterVo.getMakerId());

          if (CommonFunction.checkNull(branchMasterVo.getMakerDate()).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(branchMasterVo.getMakerDate());
          }
          insertPrepStmtObject.setSql(bufInsSql.toString());
          logger.info(new StringBuilder().append("IN insertBranchAreaCode() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

          qryList.add(insertPrepStmtObject);
        }

      }

      if (qryList.size() > 0) {
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
      }
      logger.info(new StringBuilder().append("In insertBranchAreaCode...S...................").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList<BranchMasterAreaCodeVo> searchAreaCodeBranchEdit(String branchId)
  {
    ArrayList searchlist = new ArrayList();
    UserMasterVo userMasterVo = new UserMasterVo();
    ArrayList areaCodeList = new ArrayList();
    try
    {
      logger.info("In searchAreaCodeBranchEdit().....................................Dao Impl");

      StringBuffer bufInsSql = new StringBuffer();

      bufInsSql.append(new StringBuilder().append("select A.AREA_CODE ,A.AREA_CODE_NAME,B.BRANCH_ID from com_areacode_m A  INNER JOIN com_areacode_branch_mapping B on A.AREA_CODE=B.AREA_CODE WHERE B.BRANCH_ID= '").append(branchId).append("' ").toString());

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN searchAreaCodeBranchEdit() search query1 ### ").append(bufInsSql.toString()).toString());

      logger.info(new StringBuilder().append("searchAreaCodeBranchEdit ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("AreaCodeList----------->").append(searchlist.get(i).toString()).toString());
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          BranchMasterAreaCodeVo vo = new BranchMasterAreaCodeVo();
          vo.setAreaCode(CommonFunction.checkNull(data.get(0)).toString());
          vo.setAreaDesc(CommonFunction.checkNull(data.get(1)).toString());
          vo.setBranchId(CommonFunction.checkNull(data.get(2)).toString());

          areaCodeList.add(vo);
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return areaCodeList;
  }

  public ArrayList searchVerificationQuestionData(Object ob) {
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    String verificationSubType = "";
    String verificationType = "";
    ArrayList searchlist = new ArrayList();
    VerificationQuestionVo verificationVo = (VerificationQuestionVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In searchVerificationQuestionData()..............inside ejb server file.......................Dao Impl");

      verificationSubType = StringEscapeUtils.escapeSql(CommonFunction.checkNull(verificationVo.getVerificationSubType())).trim();
      verificationType = StringEscapeUtils.escapeSql(CommonFunction.checkNull(verificationVo.getVerificationType())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("SELECT DISTINCT VERIFICATION_TYPE,VERIFICATION_SUB_TYPE,");
      bufInsSql.append("if(REC_STATUS='A','Active','Inactive')as REC_STATUS ,question_id");
      bufInsSql.append(" FROM cr_deal_verification_question_m ");

      bufInsSqlTempCount.append("SELECT COUNT(DISTINCT VERIFICATION_TYPE,VERIFICATION_SUB_TYPE,if(REC_STATUS='A','Active','Inactive'),question_id) FROM cr_deal_verification_question_m ");
      if ((!verificationSubType.equals("")) && (!verificationType.equals(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE VERIFICATION_SUB_TYPE like '%").append(verificationSubType).append("%' AND VERIFICATION_TYPE like '%").append(verificationType).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE VERIFICATION_SUB_TYPE like '%").append(verificationSubType).append("%' AND VERIFICATION_TYPE like '%").append(verificationType).append("%' ").toString());
      }
      else if (!verificationSubType.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE VERIFICATION_SUB_TYPE like '%").append(verificationSubType).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE VERIFICATION_SUB_TYPE like '%").append(verificationSubType).append("%' ").toString());
      }
      else if (!verificationType.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE VERIFICATION_TYPE like '%").append(verificationType).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE VERIFICATION_TYPE like '%").append(verificationType).append("%' ").toString());
      }
      bufInsSql.append("ORDER BY VERIFICATION_TYPE");
      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());

      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((verificationSubType.trim().equalsIgnoreCase("")) && (verificationType.trim().equalsIgnoreCase(""))) || (verificationVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(verificationVo.getCurrentPageLink()).toString());
        if (verificationVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (verificationVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("IN searchVerificationMappingData() search query1 ### ").append(bufInsSql.toString()).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("searchVerificationMappingData ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          VerificationQuestionVo deptMVO = new VerificationQuestionVo();
          logger.info(new StringBuilder().append("data.get(1)  : ").append(data.get(1)).toString());
          logger.info(new StringBuilder().append("data.get(2)  : ").append(data.get(2)).toString());

          deptMVO.setVerificationModifyLink(new StringBuilder().append("<a href=verificationQuestProcessingMaster.do?method=openEditFromSearchWithGridVerificationQuest&verificationType=").append(URLEncoder.encode(CommonFunction.checkNull(data.get(0)), "UTF-8")).append("&verificationSubType=").append(URLEncoder.encode(CommonFunction.checkNull(data.get(1)), "UTF-8")).append("&questionId=").append(URLEncoder.encode(CommonFunction.checkNull(data.get(3)), "UTF-8")).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          deptMVO.setVerificationType(CommonFunction.checkNull(data.get(0)));
          deptMVO.setVerificationSubType(CommonFunction.checkNull(data.get(1)));
          deptMVO.setQuestStatus(CommonFunction.checkNull(data.get(2)));
          deptMVO.setVerificationQuestId(CommonFunction.checkNull(data.get(3)));
          deptMVO.setTotalRecordSize(count);
          detailList.add(deptMVO);
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public ArrayList getGridInEditVerificationQuest(Object ob)
  {
    ArrayList searchlist = new ArrayList();
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("## In getGridInEditVerificationQuest()..............inside ejb server file.......................Dao Impl");

      VerificationQuestionVo verificationVo = (VerificationQuestionVo)ob;

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("SELECT QUESTION_ID,VERIFICATION_TYPE,VERIFICATION_SUB_TYPE,");
      bufInsSql.append("QUESTION,if(VERIFICATION_REQD='Y','YES','NO') as VERIFICATION_REQD,if(REC_STATUS='A','Active','Inactive')as REC_STATUS,QUESTION_SEQ_NO,ENTITY_TYPE,ENTITY_SUB_TYPE, ");
      bufInsSql.append(" (select DESCRIPTION from generic_master where GENERIC_KEY='ADDRESS_TYPE' and rec_status ='A' and VALUE=address_type )address_type");
      bufInsSql.append(" FROM cr_deal_verification_question_m ");

      bufInsSql.append(new StringBuilder().append(" WHERE VERIFICATION_TYPE = '").append(verificationVo.getVerificationType()).append("' AND VERIFICATION_SUB_TYPE = '").append(verificationVo.getVerificationSubType()).append("' ").toString());

      logger.info(new StringBuilder().append("## In getGridInEditVerificationQuest() : ").append(bufInsSql.toString()).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("## In getGridInEditVerificationQuest() :searchlist.size() ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          VerificationQuestionVo deptMVO = new VerificationQuestionVo();
          deptMVO.setVerificationModifyLink(new StringBuilder().append("<a href=verificationQuestProcessingMaster.do?method=openEditVerificationQuest&verificationQuestId=").append(CommonFunction.checkNull(data.get(0))).append(">").append(CommonFunction.checkNull(data.get(0))).append("</a>").toString());

          deptMVO.setVerificationType(CommonFunction.checkNull(data.get(1)));
          deptMVO.setVerificationSubType(CommonFunction.checkNull(data.get(2)));
          deptMVO.setVerificationQuest(CommonFunction.checkNull(data.get(3)));
          deptMVO.setVerificationRequired(CommonFunction.checkNull(data.get(4)));
          deptMVO.setQuestStatus(CommonFunction.checkNull(data.get(5)));
          deptMVO.setqSequenceNo(CommonFunction.checkNull(data.get(6)));
          if (CommonFunction.checkNull(data.get(7)).equalsIgnoreCase("PRAPPL"))
            deptMVO.setEntityType("APPLICANT");
          else if (CommonFunction.checkNull(data.get(7)).equalsIgnoreCase("COAPPL"))
            deptMVO.setEntityType("COAPPLICANT");
          else
            deptMVO.setEntityType(CommonFunction.checkNull(data.get(7)));
          deptMVO.setEntitySubType(CommonFunction.checkNull(data.get(8)));
          deptMVO.setAddrType(CommonFunction.checkNull(data.get(9)));
          detailList.add(deptMVO);
        }

      }

      logger.info("## In getGridInEditVerificationQuest() : end of method");
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean insertVerificationQuestMaster(Object ob)
  {
    VerificationQuestionVo vo = (VerificationQuestionVo)ob;
    boolean status = false;

    logger.info(new StringBuilder().append("In insertVerificationQuestMaster.........inside ejb server file...........Dao Impl").append(vo.getQuestStatus()).toString());

    ArrayList qryList = new ArrayList();
    ArrayList qryList1 = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    StringBuffer bufInsSql = new StringBuffer();
    String stat = "X";
    try
    {
      if ((vo.getQuestStatus() != null) && (vo.getQuestStatus().equals("on")))
        stat = "A";
      else {
        stat = "X";
      }

      logger.info("In insert insertVerificationQuestMaster");
      bufInsSql.append("insert into cr_deal_verification_question_m(VERIFICATION_TYPE,VERIFICATION_SUB_TYPE,QUESTION,VERIFICATION_REQD,QUESTION_SEQ_NO,ENTITY_TYPE,ENTITY_SUB_TYPE,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,address_type,PRODUCT_TYPE)");
      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
      bufInsSql.append(" ? ,");
      bufInsSql.append(" ? )");
      if (CommonFunction.checkNull(vo.getVerificationType()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getVerificationType().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getVerificationSubType()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getVerificationSubType().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getVerificationQuest()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getVerificationQuest().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getVerificationRequired()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getVerificationRequired().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getqSequenceNo()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getqSequenceNo().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getEntityType()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else if (CommonFunction.checkNull(vo.getEntityType()).equalsIgnoreCase("APPLICANT"))
        insertPrepStmtObject.addString("PRAPPL");
      else if (CommonFunction.checkNull(vo.getEntityType()).equalsIgnoreCase("COAPPLICANT"))
        insertPrepStmtObject.addString("COAPPL");
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getEntityType()));
      }

      if (CommonFunction.checkNull(vo.getEntitySubType()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getEntitySubType().toUpperCase().trim());
      }

      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat);
      }

      if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerId());
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerDate());
      if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerId());
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerDate());
      if (CommonFunction.checkNull(vo.getAddrType()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getAddrType().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getProductType()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getProductType().toUpperCase().trim());

      logger.info(new StringBuilder().append("IN insertVerificationMappingMaster() insert query1-------------------------------------------------------- ### ").append(vo.getAddrType()).toString());
      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN insertVerificationMappingMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

      qryList.add(insertPrepStmtObject);
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In insertVerificationMappingMaster......................").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return status;
  }

  public boolean updateVerificationQuestMaster(Object ob)
  {
    VerificationQuestionVo vo = (VerificationQuestionVo)ob;

    logger.info(new StringBuilder().append("getVerificationQuestId():-").append(vo.getVerificationQuestId()).toString());
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();

    boolean status = false;
    String stat = "";
    try
    {
      logger.info(new StringBuilder().append("## In updateVerificationQuestMaster : varification sub type").append(vo.getVerificationSubType()).toString());
      logger.info(new StringBuilder().append("## In updateVerificationQuestMaster : varification type").append(vo.getVerificationType()).toString());
      if ((vo.getQuestStatus() != null) && (vo.getQuestStatus().equals("on")))
        stat = "A";
      else {
        stat = "X";
      }
      StringBuffer bufInsSql = new StringBuffer();
      logger.info("In updateVerificationMappingMaster..........inside ejb server file............Dao Impl ");
      bufInsSql.append(" UPDATE cr_deal_verification_question_m set QUESTION=?,VERIFICATION_REQD=?,");
      bufInsSql.append(new StringBuilder().append(" REC_STATUS=?,QUESTION_SEQ_NO=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND), AUTHOR_ID=?,AUTHOR_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),address_type=? ,product_type=? where QUESTION_ID=?").toString());

      if (CommonFunction.checkNull(vo.getVerificationQuest()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getVerificationQuest().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getVerificationRequired()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getVerificationRequired().toUpperCase().trim());

      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat);
      }
      if (CommonFunction.checkNull(vo.getqSequenceNo()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getqSequenceNo().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerId());
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerDate());
      if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerId());
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerDate());

      if (CommonFunction.checkNull(vo.getAddrType()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getAddrType());

      if (CommonFunction.checkNull(vo.getProductType()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getProductType());
      if (CommonFunction.checkNull(vo.getVerificationQuestId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getVerificationQuestId());

      insertPrepStmtObject.setSql(bufInsSql.toString());

      updatelist.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("In update query: ").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("## In updateVerificationQuestMaster +++ : varification sub type").append(vo.getVerificationSubType()).toString());

      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return status;
  }

  public ArrayList getVerificationQuestData(Object ob) {
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    String countryId = "";
    String countryDesc = "";
    ArrayList searchlist = new ArrayList();
    String verificationQuestId = (String)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In getVerificationQuestData()..............inside ejb server file.......................Dao Impl");

      StringBuffer bufInsSql = new StringBuffer();

      bufInsSql.append("SELECT a.QUESTION_ID,a.VERIFICATION_TYPE,a.VERIFICATION_SUB_TYPE,a.QUESTION,a.VERIFICATION_REQD,");
      bufInsSql.append("if(a.REC_STATUS='A','Active','Inactive')as REC_STATUS,a.QUESTION_SEQ_NO,a.ENTITY_TYPE,a.ENTITY_SUB_TYPE ");
      bufInsSql.append(",a.address_type,a.product_type,replace(substring(group_concat(b.product_id,'|') ,1),',','')");
      bufInsSql.append(new StringBuilder().append(" FROM cr_deal_verification_question_m a left join cr_verification_question_product_mapping_dtl b on b.question_id=a.question_id where a.QUESTION_ID='").append(verificationQuestId).append("' ORDER BY QUESTION_SEQ_NO").toString());

      logger.info(new StringBuilder().append("IN getVerificationQuestData()  query1 ### ").append(bufInsSql.toString()).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("getVerificationQuestData ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          VerificationQuestionVo deptMVO = new VerificationQuestionVo();

          deptMVO.setVerificationQuestId(CommonFunction.checkNull(data.get(0)));
          deptMVO.setVerificationType(CommonFunction.checkNull(data.get(1)));

          deptMVO.setVerificationSubType(CommonFunction.checkNull(data.get(2)));

          deptMVO.setVerificationQuest(CommonFunction.checkNull(data.get(3)));
          deptMVO.setVerificationRequired(CommonFunction.checkNull(data.get(4)));
          deptMVO.setQuestStatus(CommonFunction.checkNull(data.get(5)));
          deptMVO.setqSequenceNo(CommonFunction.checkNull(data.get(6)));
          if (CommonFunction.checkNull(data.get(7)).equalsIgnoreCase("PRAPPL"))
            deptMVO.setEntityType("APPLICANT");
          else if (CommonFunction.checkNull(data.get(7)).equalsIgnoreCase("COAPPL"))
            deptMVO.setEntityType("COAPPLICANT");
          else
            deptMVO.setEntityType(CommonFunction.checkNull(data.get(7)));
          deptMVO.setEntitySubType(CommonFunction.checkNull(data.get(8)));
          deptMVO.setAddrType(CommonFunction.checkNull(data.get(9)));
          deptMVO.setProductType(CommonFunction.checkNull(data.get(10)));
          deptMVO.setLbxproduct(CommonFunction.checkNull(data.get(11)));
          detailList.add(deptMVO);
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public int countVerificationCombination(Object ob)
  {
    int status = 0;
    VerificationQuestionVo vo = (VerificationQuestionVo)ob;

    StringBuilder checkQuery = new StringBuilder(new StringBuilder().append("select count(1) from cr_deal_verification_question_m where VERIFICATION_TYPE='").append(vo.getVerificationType()).append("' and VERIFICATION_SUB_TYPE='").append(vo.getVerificationSubType()).append("' and QUESTION_SEQ_NO='").append(vo.getqSequenceNo()).append("'").toString());
    if (!CommonFunction.checkNull(vo.getVerificationQuestId()).equalsIgnoreCase(""))
    {
      checkQuery.append(new StringBuilder().append("AND QUESTION_ID<>'").append(CommonFunction.checkNull(vo.getVerificationQuestId())).append("'").toString());
    }
    logger.info(new StringBuilder().append("checkQuery: ").append(checkQuery.toString()).toString());
    String count = ConnectionDAOforEJB.singleReturn(checkQuery.toString());
    if (!CommonFunction.checkNull(count).equalsIgnoreCase(""))
    {
      status = Integer.parseInt(count);
    }

    return status;
  }

  public String insertSubDealerMaster(Object ob)
  {
    SubDealerMasterVo vo = (SubDealerMasterVo)ob;
    boolean status = false;
    String result = null;

    logger.info(new StringBuilder().append("In insertSubDealerMaster.........inside ejb server file...........Dao Impl getSubDealerStatus").append(vo.getSubDealerStatus()).toString());
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String sqlquery1 = new StringBuilder().append("select SUB_DEALER_ID from com_sub_dealer_m where SUB_DEALER_DESC='").append(vo.getSubDealerCode()).append("' and DEALER_ID='").append(vo.getDealerID()).append("' ").toString();
    logger.info(new StringBuilder().append("In insertSubDealerMaster....").append(sqlquery1).toString());
    boolean subDealerExist = ConnectionDAOforEJB.checkStatus(sqlquery1);
    logger.info(new StringBuilder().append("In insertSubDealerMaster...subDealerExist...").append(subDealerExist).toString());
    if (subDealerExist == true) {
      result = "dataExist";
    }
    else {
      try
      {
        if ((vo.getSubDealerStatus() != null) && (vo.getSubDealerStatus().equals("on")))
          stat = "A";
        else {
          stat = "X";
        }

        logger.info("In insert insertSubDealerMaster");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("insert into com_sub_dealer_m (SUB_DEALER_CODE ,SUB_DEALER_DESC,SUB_DEALER_BANK_AC_No,DEALER_ID,DEALER_DESC,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

        if (CommonFunction.checkNull(vo.getSubDealerCode()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getSubDealerCode().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getSubDealerDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getSubDealerDes().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getSubDealerBankAC()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getSubDealerBankAC().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getDealerID()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getDealerID().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getDealerDes()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getDealerDes().toUpperCase().trim());

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN insertSubDealerMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In insertSubDealerMaster......................").append(status).toString());

        if (status)
          result = "datasaved";
        else
          result = "datanotsaved";
      }
      catch (Exception e) {
        e.printStackTrace();
      }
    }
    return result;
  }

  public ArrayList searchSubDealerData(Object ob)
  {
    String subDealerSearchCode = "";
    String subDealerSearchDesc = "";
    String dealerSearchCode = "";
    String dealerSearchDes = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    ArrayList searchlist = new ArrayList();
    SubDealerMasterVo subDealerMasterVo = (SubDealerMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In searchDealerData.............inside ejb server file...........Dao Impl");
      subDealerSearchCode = StringEscapeUtils.escapeSql(CommonFunction.checkNull(subDealerMasterVo.getSubDealerSearchCode())).trim();
      subDealerSearchDesc = StringEscapeUtils.escapeSql(CommonFunction.checkNull(subDealerMasterVo.getSubDealerSearchDes())).trim();

      dealerSearchDes = StringEscapeUtils.escapeSql(CommonFunction.checkNull(subDealerMasterVo.getDealerSearchDesc())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("select SUB_DEALER_ID,SUB_DEALER_DESC,");
      bufInsSql.append("if(REC_STATUS='A','Active','Inactive')as Status,SUB_DEALER_ID,DEALER_ID,DEALER_DESC FROM com_sub_dealer_m B");
      bufInsSqlTempCount.append("SELECT COUNT(1) FROM com_sub_dealer_m B ");

      if ((!subDealerSearchCode.equals("")) && (!subDealerSearchDesc.equals("")) && (!dealerSearchDes.equals(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE SUB_DEALER_ID like '%").append(subDealerSearchCode).append("%' AND SUB_DEALER_DESC like '%").append(subDealerSearchDesc).append("%' AND DEALER_DESC like '%").append(dealerSearchDes).append("%'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE SUB_DEALER_ID like '%").append(subDealerSearchCode).append("%' AND SUB_DEALER_DESC like '%").append(subDealerSearchDesc).append("%' AND DEALER_DESC like '%").append(dealerSearchDes).append("%'").toString());
      }
      else if ((!subDealerSearchCode.equals("")) && (!subDealerSearchDesc.equals(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE SUB_DEALER_ID like '%").append(subDealerSearchCode).append("%' AND SUB_DEALER_DESC like '%").append(subDealerSearchDesc).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE SUB_DEALER_ID like '%").append(subDealerSearchCode).append("%' AND SUB_DEALER_DESC like '%").append(subDealerSearchDesc).append("%' ").toString());
      }
      else if ((!subDealerSearchCode.equals("")) && (!dealerSearchDes.equals(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE SUB_DEALER_ID like '%").append(subDealerSearchCode).append("%'  AND DEALER_DESC like '%").append(dealerSearchDes).append("%'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE SUB_DEALER_ID like '%").append(subDealerSearchCode).append("%'  AND DEALER_DESC like '%").append(dealerSearchDes).append("%'").toString());
      }
      else if ((!subDealerSearchDesc.equals("")) && (!dealerSearchDes.equals(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE SUB_DEALER_DESC like '%").append(subDealerSearchDesc).append("%' AND DEALER_DESC like '%").append(dealerSearchDes).append("%'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE SUB_DEALER_DESC like '%").append(subDealerSearchDesc).append("%' AND DEALER_DESC like '%").append(dealerSearchDes).append("%'").toString());
      }
      else if (!subDealerSearchCode.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE SUB_DEALER_ID like '%").append(subDealerSearchCode).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE SUB_DEALER_ID like '%").append(subDealerSearchCode).append("%' ").toString());
      }
      else if (!subDealerSearchDesc.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE SUB_DEALER_DESC like '%").append(subDealerSearchDesc).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE SUB_DEALER_DESC like '%").append(subDealerSearchDesc).append("%' ").toString());
      }
      else if (!dealerSearchDes.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE DEALER_DESC like '%").append(dealerSearchDes).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE DEALER_DESC like '%").append(dealerSearchDes).append("%' ").toString());
      }
      bufInsSql.append(" ORDER BY SUB_DEALER_ID");
      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((subDealerSearchCode.trim() == null) && (subDealerSearchDesc.trim() == null)) || ((subDealerSearchCode.trim().equalsIgnoreCase("")) && (subDealerSearchDesc.trim().equalsIgnoreCase(""))) || (subDealerMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(subDealerMasterVo.getCurrentPageLink()).toString());
        if (subDealerMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (subDealerMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchSubDealerData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info("In searchSubDealerData.....................................Dao Impl");
      logger.info(new StringBuilder().append("searchSubDealerData ").append(searchlist).toString());
      logger.info(new StringBuilder().append("searchlist.size()  ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++) {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          SubDealerMasterVo searchDealerMasterVO = new SubDealerMasterVo();

          searchDealerMasterVO.setSubDealerIdModify(new StringBuilder().append("<a href=subDealerMasterSearch.do?method=openEditSubDealer&subDealerCode=").append(CommonFunction.checkNull(data.get(0)).toString()).append("&subDealerID=").append(CommonFunction.checkNull(data.get(3)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          searchDealerMasterVO.setSubDealerCode(CommonFunction.checkNull(data.get(0)).toString());
          searchDealerMasterVO.setSubDealerDes(CommonFunction.checkNull(data.get(1)).toString());
          searchDealerMasterVO.setSubDealerStatus(CommonFunction.checkNull(data.get(2)).toString());
          searchDealerMasterVO.setDealerID(CommonFunction.checkNull(data.get(4)).toString());
          searchDealerMasterVO.setDealerDes(CommonFunction.checkNull(data.get(5)).toString());
          searchDealerMasterVO.setTotalRecordSize(count);
          detailList.add(searchDealerMasterVO);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    logger.info(new StringBuilder().append("detailList size : ").append(detailList).toString());
    return detailList;
  }

  public String updateSubDealerData(Object ob)
  {
    SubDealerMasterVo vo = (SubDealerMasterVo)ob;
    String subDealerCode = vo.getSubDealerCode();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    logger.info(new StringBuilder().append("subDealerCode():-").append(subDealerCode).toString());
    logger.info(new StringBuilder().append("DealerID():-").append(vo.getDealerID()).toString());
    ArrayList updatelist = new ArrayList();
    String result = "";
    boolean status = false;
    String stat = "";

    String sqlquery1 = new StringBuilder().append("select SUB_DEALER_ID from com_sub_dealer_m where SUB_DEALER_DESC='").append(vo.getSubDealerDes()).append("' and DEALER_ID='").append(vo.getDealerID()).append("'and SUB_DEALER_ID<>'").append(vo.getSubDealerID()).append("' ").toString();
    logger.info(new StringBuilder().append("In updateSubDealerData....").append(sqlquery1).toString());
    boolean subDealerExist = ConnectionDAOforEJB.checkStatus(sqlquery1);
    logger.info(new StringBuilder().append("In updateSubDealerData...subDealerExist...").append(subDealerExist).toString());
    if (subDealerExist == true)
      result = "dataExist";
    else {
      try
      {
        if (!subDealerExist) {
          if ((vo.getSubDealerStatus() != null) && (vo.getSubDealerStatus().equals("on")))
          {
            stat = "A";
          }
          else stat = "X";

          StringBuffer bufInsSql = new StringBuffer();

          insertPrepStmtObject = null;
          insertPrepStmtObject = new PrepStmtObject();
          bufInsSql = null;
          bufInsSql = new StringBuffer();

          bufInsSql.append("UPDATE com_sub_dealer_m set SUB_DEALER_CODE=?,SUB_DEALER_DESC=?, SUB_DEALER_BANK_AC_No=?,");
          bufInsSql.append(new StringBuilder().append(" DEALER_ID=?,DEALER_DESC=?,REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),AUTHOR_ID=?,AUTHOR_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) where  SUB_DEALER_ID=?").toString());

          if (CommonFunction.checkNull(vo.getSubDealerCode()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getSubDealerCode().toUpperCase().trim());

          if (CommonFunction.checkNull(vo.getSubDealerDes()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getSubDealerDes().toUpperCase().trim());

          if (CommonFunction.checkNull(vo.getSubDealerBankAC()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getSubDealerBankAC().toUpperCase().trim());

          if (CommonFunction.checkNull(vo.getDealerID()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getDealerID().toUpperCase().trim());

          if (CommonFunction.checkNull(vo.getDealerDes()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getDealerDes().toUpperCase().trim());

          if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(stat);
          }

          if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getMakerId());
          if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getMakerDate());
          if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getMakerId());
          if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getMakerDate());
          if (CommonFunction.checkNull(vo.getSubDealerID()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getSubDealerID());

          insertPrepStmtObject.setSql(bufInsSql.toString());
          logger.info(new StringBuilder().append("IN insertUserMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

          updatelist.add(insertPrepStmtObject);

          status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);

          if (status)
            result = "saved";
          else
            result = "notsaved";
        }
      }
      catch (Exception e)
      {
        e.printStackTrace();
      }
    }
    return result;
  }

  public ArrayList searchSubDealerUserEdit(String subDealerCode) {
    ArrayList searchlist = new ArrayList();
    SubDealerMasterVo vo = new SubDealerMasterVo();
    ArrayList levelDescList = new ArrayList();
    try
    {
      logger.info("In searchSubDealerUserEdit().....................................Dao Impl");

      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append(new StringBuilder().append("select SUB_DEALER_CODE,SUB_DEALER_DESC,SUB_DEALER_BANK_AC_No,REC_STATUS,DEALER_DESC,DEALER_ID,SUB_DEALER_ID from  com_sub_dealer_m where SUB_DEALER_ID='").append(StringEscapeUtils.escapeSql(subDealerCode)).append("'").toString());

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN searchSubDealerUserEdit() search query1 ### ").append(bufInsSql.toString()).toString());

      logger.info(new StringBuilder().append("searchSubDealerUserEdit ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("searchSubDealerUserEdit ").append(searchlist.get(i).toString()).toString());
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          SubDealerMasterVo subDealerMasterVo = new SubDealerMasterVo();
          subDealerMasterVo.setSubDealerCode(CommonFunction.checkNull(data.get(0)).toString());
          logger.info(new StringBuilder().append("searchSubDealerUserEdit ").append(CommonFunction.checkNull(data.get(0)).toString()).toString());
          subDealerMasterVo.setSubDealerDes(CommonFunction.checkNull(data.get(1)).toString());
          subDealerMasterVo.setSubDealerBankAC(CommonFunction.checkNull(data.get(2)).toString());
          subDealerMasterVo.setSubDealerStatus(CommonFunction.checkNull(data.get(3)).toString());
          subDealerMasterVo.setDealerDes(CommonFunction.checkNull(data.get(4)).toString());
          subDealerMasterVo.setDealerID(CommonFunction.checkNull(data.get(5)).toString());
          subDealerMasterVo.setSubDealerID(CommonFunction.checkNull(data.get(6)).toString());
          levelDescList.add(subDealerMasterVo);
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return levelDescList;
  }

  public String saveAutoAllocationDefDetail(Object ob) {
    logger.info("In saveAutoAllocationDefDetail() of MasterDAOImpl");
    String result = "";
    AutoAllocationDefinitionVo vo = (AutoAllocationDefinitionVo)ob;

    boolean status = false;
    String query = new StringBuilder().append("SELECT NPA_STAGE FROM com_auto_allocation_def_m WHERE NPA_STAGE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxNPAStageId()).trim())).append("' AND REPAY_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getRepayType()).trim())).append("'").toString();
    logger.info(new StringBuilder().append("In saveAutoAllocationDefDetail() of MasterDAOImpl Query for check Existing NPA_STAGE AND REPAY TYPE : ").append(query).toString());
    try
    {
      status = ConnectionDAOforEJB.checkStatus(query);
    }
    catch (Exception e)
    {
      e.printStackTrace();
      result = "ERROR";
    }
    if (status) {
      result = "EXIST";
    }
    else {
      ArrayList qryList = new ArrayList();
      try
      {
        PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
        StringBuffer bufInsSql = new StringBuffer();

        for (int k = 0; k < 3; k++)
        {
          bufInsSql = new StringBuffer();
          insertPrepStmtObject = new PrepStmtObject();

          insertPrepStmtObject = new PrepStmtObject();
          bufInsSql.append(new StringBuilder().append("insert into com_auto_allocation_def_m (NPA_STAGE,ALLOCATION_TYPE,REPAY_TYPE,COMPONENT,PRIORITY,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE) values(?,?,?,?,?,?,?,DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),?,DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND))").toString());

          if (CommonFunction.checkNull(vo.getLbxNPAStageId()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(vo.getLbxNPAStageId().trim());
          }
          if (CommonFunction.checkNull(vo.getType()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(vo.getType().trim());
          }
          if (CommonFunction.checkNull(vo.getRepayType()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(vo.getRepayType().trim());
          }
          if (CommonFunction.checkNull(vo.getRepayType()).trim().equalsIgnoreCase("I"))
          {
            if (k == 0)
            {
              insertPrepStmtObject.addString("I");

              if (CommonFunction.checkNull(vo.getInstallmentCharges()).trim().equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else
                insertPrepStmtObject.addString(vo.getInstallmentCharges().trim());
            }
            else if (k == 1)
            {
              insertPrepStmtObject.addString("P");

              if (CommonFunction.checkNull(vo.getPreEmiCharges()).trim().equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else
                insertPrepStmtObject.addString(vo.getPreEmiCharges().trim());
            }
            else if (k == 2)
            {
              insertPrepStmtObject.addString("O");

              if (CommonFunction.checkNull(vo.getOtherCharges()).trim().equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else
                insertPrepStmtObject.addString(vo.getOtherCharges().trim());
            }
          }
          else if (CommonFunction.checkNull(vo.getRepayType()).trim().equalsIgnoreCase("N"))
          {
            if (k == 0)
            {
              insertPrepStmtObject.addString("Pl");

              if (CommonFunction.checkNull(vo.getPrincipalCharges()).trim().equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else
                insertPrepStmtObject.addString(vo.getPrincipalCharges().trim());
            }
            else if (k == 1)
            {
              insertPrepStmtObject.addString("In");

              if (CommonFunction.checkNull(vo.getInterestCharges()).trim().equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else
                insertPrepStmtObject.addString(vo.getInterestCharges().trim());
            }
            else if (k == 2)
            {
              insertPrepStmtObject.addString("ONon");

              if (CommonFunction.checkNull(vo.getOtherChargesNon()).trim().equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else
                insertPrepStmtObject.addString(vo.getOtherChargesNon().trim());
            }
          }
          if ((vo.getAllocationStatus() != null) && (vo.getAllocationStatus().equalsIgnoreCase("on")))
          {
            insertPrepStmtObject.addString("A");
          }
          else
          {
            insertPrepStmtObject.addString("X");
          }

          if (CommonFunction.checkNull(vo.getMakerId()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getMakerId().trim());
          if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getMakerDate()).trim());
          }
          if (CommonFunction.checkNull(vo.getMakerId()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getMakerId().trim());
          if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getMakerDate()).trim());
          }
          insertPrepStmtObject.setSql(bufInsSql.toString());
          logger.info(new StringBuilder().append("IN saveAutoAllocationDefDetail() insert query1 ### here --- ").append(insertPrepStmtObject.printQuery()).toString());
          qryList.add(insertPrepStmtObject);
        }

        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        if (status)
        {
          result = "SAVE";
        }
      } catch (Exception e) {
        e.printStackTrace();
      }
      finally
      {
        qryList = null;
      }

    }

    logger.info(new StringBuilder().append("In insertNPAStageMaster() of MasterDAOImpl return result String  :  ").append(result).toString());
    return result;
  }

  public ArrayList<AutoAllocationDefinitionVo> getAutoAllocationDefData(Object ob)
  {
    ArrayList list = new ArrayList();
    AutoAllocationDefinitionVo vo1 = (AutoAllocationDefinitionVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      StringBuffer bufInsSql = new StringBuffer();
      logger.info("In getAutoAllocationDefData.......111111111111111..............Dao Impl");
      bufInsSql.append(new StringBuilder().append(" SELECT NPA_STAGE,ALLOCATION_TYPE,PRIORITY,REC_STATUS,MAKER_ID,MAKER_DATE,ID,COMPONENT,REPAY_TYPE FROM com_auto_allocation_def_m WHERE NPA_STAGE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo1.getNpaStage()).trim())).append("' AND REPAY_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo1.getRepayType()).trim())).append("'").toString());
      logger.info(new StringBuilder().append("query ::::::::::::::: ").append(bufInsSql.toString()).toString());
      list = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("list.size ").append(list.size()).toString());
      AutoAllocationDefinitionVo vo = new AutoAllocationDefinitionVo();
      for (int i = 0; i < list.size(); i++)
      {
        logger.info(new StringBuilder().append("getAutoAllocationDefData List ").append(list.get(i).toString()).toString());

        ArrayList data = (ArrayList)list.get(i);

        if (data.size() > 0)
        {
          vo.setNpaStage(CommonFunction.checkNull(data.get(0)).toString());
          vo.setLbxNPAStageId(CommonFunction.checkNull(data.get(0)).toString());
          vo.setType(CommonFunction.checkNull(data.get(1)).toString());
          vo.setRepayType(CommonFunction.checkNull(data.get(8)).toString());
          if (CommonFunction.checkNull(data.get(8)).trim().equalsIgnoreCase("I"))
          {
            if (i == 0)
            {
              vo.setInstallmentCharges(CommonFunction.checkNull(data.get(2)).toString());
              vo.setInstallmentChargesID(CommonFunction.checkNull(data.get(6)).toString());
            }
            else if (i == 1)
            {
              vo.setPreEmiCharges(CommonFunction.checkNull(data.get(2)).toString());
              vo.setPreEmiChargesID(CommonFunction.checkNull(data.get(6)).toString());
            }
            else if (i == 2)
            {
              vo.setOtherCharges(CommonFunction.checkNull(data.get(2)).toString());
              vo.setOtherChargesID(CommonFunction.checkNull(data.get(6)).toString());
            }
          }
          else if (CommonFunction.checkNull(data.get(8)).trim().equalsIgnoreCase("N"))
          {
            if (i == 0)
            {
              vo.setPrincipalCharges(CommonFunction.checkNull(data.get(2)).toString());
              vo.setPrincipalChargesID(CommonFunction.checkNull(data.get(6)).toString());
            }
            else if (i == 1)
            {
              vo.setInterestCharges(CommonFunction.checkNull(data.get(2)).toString());
              vo.setInterestChargesID(CommonFunction.checkNull(data.get(6)).toString());
            }
            else if (i == 2)
            {
              vo.setOtherChargesNon(CommonFunction.checkNull(data.get(2)).toString());
              vo.setOtherChargesNonID(CommonFunction.checkNull(data.get(6)).toString());
            }
          }
          if (CommonFunction.checkNull(data.get(3)).equalsIgnoreCase("A"))
          {
            logger.info(new StringBuilder().append("allocation status dao impl:  ").append(CommonFunction.checkNull(data.get(3))).toString());
            vo.setAllocationStatus("Active");
          }

          vo.setType(CommonFunction.checkNull(data.get(1)).toString());
          if (i == 0)
            detailList.add(vo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return detailList;
  }

  public ArrayList<AutoAllocationDefinitionVo> searchAutoAllocationDefData(Object ob)
  {
    String npaSearchStage = "";
    String type = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    ArrayList searchlist = new ArrayList();
    AutoAllocationDefinitionVo vo = (AutoAllocationDefinitionVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In searchAutoAllocationDefData().....................................Dao Impl");
      logger.info(new StringBuilder().append("vo.getLbxNPAStageId() ").append(vo.getLbxNPAStageId()).toString());
      logger.info(new StringBuilder().append("vo.getType() ").append(vo.getType()).toString());
      npaSearchStage = StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxNPAStageId())).trim();
      type = StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getType())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("SELECT NPA_STAGE,ALLOCATION_TYPE,COMPONENT,PRIORITY,REC_STATUS,MAKER_ID,REPAY_TYPE FROM com_auto_allocation_def_m ");

      bufInsSqlTempCount.append("SELECT COUNT(1) from (SELECT NPA_STAGE,ALLOCATION_TYPE,COMPONENT,PRIORITY,REC_STATUS,MAKER_ID,REPAY_TYPE FROM com_auto_allocation_def_m ");

      if ((!npaSearchStage.equalsIgnoreCase("")) && (!type.equalsIgnoreCase(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE NPA_STAGE ='").append(npaSearchStage).append("' AND ALLOCATION_TYPE='").append(type).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE NPA_STAGE ='").append(npaSearchStage).append("' AND ALLOCATION_TYPE='").append(type).append("' ").toString());
      }
      else if (!type.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE ALLOCATION_TYPE='").append(type).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE ALLOCATION_TYPE='").append(type).append("' ").toString());
      }
      else if (!npaSearchStage.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE NPA_STAGE = '").append(npaSearchStage).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE NPA_STAGE = '").append(npaSearchStage).append("' ").toString());
      }

      bufInsSql.append(" group by NPA_STAGE,REPAY_TYPE ");
      bufInsSqlTempCount.append(" group by NPA_STAGE,REPAY_TYPE ) temp");

      bufInsSql.append(" ORDER by NPA_STAGE,REPAY_TYPE");

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      String tempCount = ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString());
      if (tempCount != null)
      {
        count = Integer.parseInt(tempCount);
      }
      else
      {
        count = 0;
      }
      if (((type.trim() == null) && (npaSearchStage.trim() == null)) || ((type.trim().equalsIgnoreCase("")) && (npaSearchStage.trim().equalsIgnoreCase(""))) || (vo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(vo.getCurrentPageLink()).toString());
        if (vo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (vo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchAutoAllocationDefData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info("In searchAutoAllocationDefData.....................................Dao Impl");
      logger.info(new StringBuilder().append("searchAutoAllocationDefData ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("searchAutoAllocationDefData ").append(searchlist.get(i).toString()).toString());

        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          AutoAllocationDefinitionVo vo1 = new AutoAllocationDefinitionVo();

          vo1.setAutoAllocationDefModify(new StringBuilder().append("<a href=autoAllocationDefinitionAction.do?method=openEditAutoAllocationDef&npaStage=").append(CommonFunction.checkNull(data.get(0)).toString()).append("&repayType=").append(CommonFunction.checkNull(data.get(6)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          vo1.setNpaStage(CommonFunction.checkNull(data.get(0)).toString());

          if (CommonFunction.checkNull(data.get(1)).toString().equalsIgnoreCase("D"))
          {
            vo1.setType("Date First");
          }
          else
          {
            vo1.setType("Charge First");
          }

          if (CommonFunction.checkNull(data.get(4)).equalsIgnoreCase("A"))
          {
            vo1.setAllocationStatus("Active");
          }
          else
          {
            vo1.setAllocationStatus("InActive");
          }
          vo1.setMakerId(CommonFunction.checkNull(data.get(5)).toString());
          if (CommonFunction.checkNull(data.get(6)).equalsIgnoreCase("I"))
          {
            vo1.setRepayType("Installment");
          }
          else
          {
            vo1.setRepayType("Non-Installment");
          }

          vo1.setTotalRecordSize(count);
          detailList.add(vo1);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public String updateAutoAllocationDefDetail(Object ob)
  {
    String result = "";
    logger.info("In updateAutoAllocationDefDetail() of MasterDAOImpl");
    AutoAllocationDefinitionVo vo = (AutoAllocationDefinitionVo)ob;
    ArrayList qryList = new ArrayList();
    try
    {
      PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
      StringBuffer bufInsSql = new StringBuffer();

      for (int i = 0; i < 3; i++)
      {
        bufInsSql = new StringBuffer();
        insertPrepStmtObject = new PrepStmtObject();
        bufInsSql.append(new StringBuilder().append("UPDATE com_auto_allocation_def_m SET ALLOCATION_TYPE=?,COMPONENT=?,PRIORITY=?,REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),AUTHOR_ID=?,AUTHOR_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND)  where NPA_STAGE=? AND ID=?").toString());

        if (CommonFunction.checkNull(vo.getType()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getType().trim());
        if (CommonFunction.checkNull(vo.getRepayTypeHid()).trim().equalsIgnoreCase("I"))
        {
          if (i == 0)
          {
            insertPrepStmtObject.addString("I");

            if (CommonFunction.checkNull(vo.getInstallmentCharges()).trim().equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else
              insertPrepStmtObject.addString(vo.getInstallmentCharges().trim());
          }
          else if (i == 1)
          {
            insertPrepStmtObject.addString("P");

            if (CommonFunction.checkNull(vo.getPreEmiCharges()).trim().equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else
              insertPrepStmtObject.addString(vo.getPreEmiCharges().trim());
          }
          else if (i == 2)
          {
            insertPrepStmtObject.addString("O");

            if (CommonFunction.checkNull(vo.getOtherCharges()).trim().equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else
              insertPrepStmtObject.addString(vo.getOtherCharges().trim());
          }
        }
        else if (CommonFunction.checkNull(vo.getRepayTypeHid()).trim().equalsIgnoreCase("N"))
        {
          if (i == 0)
          {
            insertPrepStmtObject.addString("Pl");

            if (CommonFunction.checkNull(vo.getPrincipalCharges()).trim().equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else
              insertPrepStmtObject.addString(vo.getPrincipalCharges().trim());
          }
          else if (i == 1)
          {
            insertPrepStmtObject.addString("In");

            if (CommonFunction.checkNull(vo.getInterestCharges()).trim().equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else
              insertPrepStmtObject.addString(vo.getInterestCharges().trim());
          }
          else if (i == 2)
          {
            insertPrepStmtObject.addString("ONon");
            logger.info(new StringBuilder().append("getOtherChargesNon :::::::::::::::::: ").append(vo.getOtherChargesNon()).toString());
            if (CommonFunction.checkNull(vo.getOtherChargesNon()).trim().equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else {
              insertPrepStmtObject.addString(vo.getOtherChargesNon().trim());
            }
          }
        }
        if ((vo.getAllocationStatus() != null) && (vo.getAllocationStatus().equalsIgnoreCase("on")))
        {
          insertPrepStmtObject.addString("A");
        }
        else
        {
          insertPrepStmtObject.addString("X");
        }

        if (CommonFunction.checkNull(vo.getMakerId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getMakerId().trim());
        if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getMakerDate()).trim());
        }
        if (CommonFunction.checkNull(vo.getMakerId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getMakerId().trim());
        if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getMakerDate()).trim());
        }
        if (CommonFunction.checkNull(vo.getLbxNPAStageId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getLbxNPAStageId()).trim());
        }

        if (CommonFunction.checkNull(vo.getRepayTypeHid()).trim().equalsIgnoreCase("I"))
        {
          if (i == 0)
          {
            if (CommonFunction.checkNull(vo.getInstallmentChargesID()).trim().equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else
              insertPrepStmtObject.addString(vo.getInstallmentChargesID().trim());
          }
          else if (i == 1)
          {
            if (CommonFunction.checkNull(vo.getPreEmiChargesID()).trim().equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else
              insertPrepStmtObject.addString(vo.getPreEmiChargesID().trim());
          }
          else if (i == 2)
          {
            if (CommonFunction.checkNull(vo.getOtherChargesID()).trim().equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else {
              insertPrepStmtObject.addString(vo.getOtherChargesID().trim());
            }
          }
        }
        else if (CommonFunction.checkNull(vo.getRepayTypeHid()).trim().equalsIgnoreCase("N"))
        {
          if (i == 0)
          {
            if (CommonFunction.checkNull(vo.getPrincipalChargesID()).trim().equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else
              insertPrepStmtObject.addString(vo.getPrincipalChargesID().trim());
          }
          else if (i == 1)
          {
            if (CommonFunction.checkNull(vo.getInterestChargesID()).trim().equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else
              insertPrepStmtObject.addString(vo.getInterestChargesID().trim());
          }
          else if (i == 2)
          {
            logger.info(new StringBuilder().append("getOtherChargesNonID :::::::::::::::::: ").append(vo.getOtherChargesNonID()).toString());
            if (CommonFunction.checkNull(vo.getOtherChargesNonID()).trim().equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else {
              insertPrepStmtObject.addString(vo.getOtherChargesNonID().trim());
            }
          }
        }
        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN updateAutoAllocationDefDetail() update query1 ### here --- ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        bufInsSql = null;
        insertPrepStmtObject = null;
      }

      boolean status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("Update status  :  ").append(status).toString());
      if (status)
      {
        result = "UPDATE";
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      qryList = null;
    }

    return result;
  }

  public ArrayList getRatioList()
  {
    ArrayList list = new ArrayList();

    StringBuilder query = new StringBuilder();
    try
    {
      query.append("select RATIO_CODE,RATIO_NAME from cr_ratios_m where REC_STATUS='A'");

      logger.info(new StringBuilder().append("query : ").append(query).toString());
      ArrayList paramDetail = ConnectionDAOforEJB.sqlSelect(query.toString());

      query = null;

      for (int i = 0; i < paramDetail.size(); i++)
      {
        ArrayList subParamDetail = (ArrayList)paramDetail.get(i);
        if (subParamDetail.size() > 0)
        {
          MasterVo vo = new MasterVo();
          vo.setRatioCode(CommonFunction.checkNull(subParamDetail.get(0)).trim());
          vo.setRatioName(CommonFunction.checkNull(subParamDetail.get(1)).trim());
          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    logger.info(new StringBuilder().append("paramDetail size is ..................................").append(list.size()).toString());
    return list;
  }

  public String getRatioFarmula(String ratioCode)
  {
    String result = "";
    StringBuilder query = new StringBuilder();
    try {
      query.append(new StringBuilder().append("select  RATIO_FORMULA from cr_ratios_m where RATIO_CODE='").append(ratioCode).append("'").toString());
      logger.info(new StringBuilder().append("query : ").append(query).toString());
      result = ConnectionDAOforEJB.singleReturn(query.toString());
      query = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    return result;
  }

  public ArrayList getbaseRateTypeList()
  {
    ArrayList list = new ArrayList();
    ArrayList baseRateTypeList = null;
    ArrayList subList = null;
    try
    {
      StringBuilder query = new StringBuilder();
      query.append("SELECT VALUE,DESCRIPTION FROM generic_master where GENERIC_KEY='BASE_RATE_TYPE' and REC_STATUS='A' order by DESCRIPTION  ");
      logger.info(new StringBuilder().append("In getClearingType() Query  :  ").append(query.toString()).toString());
      baseRateTypeList = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      for (int i = 0; i < baseRateTypeList.size(); i++)
      {
        subList = (ArrayList)baseRateTypeList.get(i);
        BaseRateMasterVo av = new BaseRateMasterVo();
        av.setbRTypeCode(CommonFunction.checkNull(subList.get(0)).trim());
        av.setbRTypeDesc(CommonFunction.checkNull(subList.get(1)).trim());
        list.add(av);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getRepaymentModeList()
  {
    ArrayList list = new ArrayList();
    try {
      logger.info("In getRepaymentModeList.............inside ejb server file............Dao Impl");
      String query = "SELECT DESCRIPTION,VALUE FROM GENERIC_MASTER WHERE GENERIC_KEY='REPAYMENT_MODE' and rec_status ='A' ";
      CrSchemeMasterVo vO = null;
      ArrayList repaymentMode = ConnectionDAOforEJB.sqlSelect(query);
      logger.info(new StringBuilder().append("getRepaymentModeList...........").append(repaymentMode.size()).toString());
      for (int i = 0; i < repaymentMode.size(); i++) {
        logger.info(new StringBuilder().append("getRepaymentModeList..........").append(CommonFunction.checkNull(repaymentMode.get(i)).toString()).toString());
        ArrayList data = (ArrayList)repaymentMode.get(i);
        for (int k = 0; k < data.size(); k++) {
          logger.info(new StringBuilder().append("getRepaymentModeList............. ").append(CommonFunction.checkNull(data.get(k)).toString()).toString());
          vO = new CrSchemeMasterVo();
          vO.setRepaymentLabel(data.get(0).toString());
          vO.setRepaymentMode(data.get(1).toString());
        }
        list.add(vO);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public String saveBenchmarkRatioMaster(Object ob)
  {
    BenchmarkRatioVo vo = (BenchmarkRatioVo)ob;
    boolean status = false;
    String result = null;

    logger.info(new StringBuilder().append("In saveBenchmarkRatioMaster.........inside ejb server file...........Dao Impl recStatus").append(vo.getRecStatus()).toString());
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String sqlquery1 = new StringBuilder().append("select BENCHMARK_RATIO_CODE, BENCHMARK_INDUSTRY_ID, EFFECTIVE_DATE , BENCHMARK_RATIO from cr_benchmark_ratio_m where BENCHMARK_RATIO_CODE='").append(StringEscapeUtils.escapeSql(vo.getLbxRatio().trim())).append("' and BENCHMARK_INDUSTRY_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxIndustry().trim())).append("' and BENCHMARK_RATIO='").append(StringEscapeUtils.escapeSql(vo.getBenchmarkRatio().trim())).append("' and date(EFFECTIVE_DATE)='").append(CommonFunction.changeFormat(vo.getEffectiveDate())).append("'").toString();
    logger.info(new StringBuilder().append("In select benchMarkRatioExist query ...").append(sqlquery1).toString());
    boolean benchMarkRatioExist = ConnectionDAOforEJB.checkStatus(sqlquery1);
    logger.info(new StringBuilder().append("In saveBenchmarkRatioMaster...benchMarkRatioExist..").append(benchMarkRatioExist).toString());
    if (benchMarkRatioExist == true) {
      result = "dataExist";
    }
    else {
      try
      {
        if ((vo.getRecStatus() != null) && (vo.getRecStatus().equals("on")))
          stat = "A";
        else {
          stat = "X";
        }

        logger.info("In insert saveBenchmarkRatioMaster");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("insert into cr_benchmark_ratio_m (BENCHMARK_RATIO_CODE ,BENCHMARK_INDUSTRY_ID,BENCHMARK_RATIO,EFFECTIVE_DATE,REC_STATUS,MAKER_ID,MAKER_DATE)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

        if (CommonFunction.checkNull(vo.getLbxRatio()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getLbxRatio().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getLbxIndustry()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getLbxIndustry().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getBenchmarkRatio()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getBenchmarkRatio().toUpperCase().trim());
        if (CommonFunction.checkNull(vo.getEffectiveDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getEffectiveDate());
        }
        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN saveBenchMarkRatio() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        if (status)
          result = "datasaved";
        else
          result = "datanotsaved";
      }
      catch (Exception e) {
        e.printStackTrace();
      }
    }
    return result;
  }

  public ArrayList<BenchmarkRatioVo> getBenchmarkRatioMasterList(Object ob)
  {
    ArrayList searchlist = new ArrayList();
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    String searchRatioId = "";
    String searchIndustryId = "";
    BenchmarkRatioVo vo = (BenchmarkRatioVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In getBenchmarkRatioMasterList...............");
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      searchRatioId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxRatioSearch())).trim();
      searchIndustryId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxIndustrySearch())).trim();
      bufInsSql.append("select BENCHMARK_ID,RATIO_NAME,CIM.INDUSTRY_DESC,if(CBRM.REC_STATUS='A','Active','Inactive')AS REC FROM cr_benchmark_ratio_m CBRM ");
      bufInsSql.append("JOIN cr_ratios_m CRM ON CBRM. BENCHMARK_RATIO_CODE=CRM. RATIO_CODE");
      bufInsSql.append(" JOIN com_industry_m CIM ON CBRM.BENCHMARK_INDUSTRY_ID= CIM.INDUSTRY_ID ");

      bufInsSqlTempCount.append("SELECT COUNT(1) from cr_benchmark_ratio_m");

      if ((!searchRatioId.equals("")) && (!searchIndustryId.equals("")))
      {
        bufInsSql.append(new StringBuilder().append(" where BENCHMARK_RATIO_CODE = '").append(searchRatioId).append("' and  BENCHMARK_INDUSTRY_ID = '").append(searchIndustryId).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" where BENCHMARK_RATIO_CODE = '").append(searchRatioId).append("' and BENCHMARK_INDUSTRY_ID = '").append(searchIndustryId).append("'").toString());
      }
      else if (!searchRatioId.equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" where BENCHMARK_RATIO_CODE = '").append(searchRatioId).append("'  ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" where BENCHMARK_RATIO_CODE = '").append(searchRatioId).append("' ").toString());
      }
      else if (!searchIndustryId.equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" where BENCHMARK_INDUSTRY_ID = '").append(searchIndustryId).append("'  ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" where BENCHMARK_INDUSTRY_ID = '").append(searchIndustryId).append("' ").toString());
      }
      bufInsSql.append(" order by CBRM.BENCHMARK_ID");

      logger.info(new StringBuilder().append("IN getBenchmarkRatioMasterList() search query1 ### ").append(bufInsSql.toString()).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if ((searchRatioId.trim() == null) || (searchRatioId.trim().equalsIgnoreCase("")) || (searchIndustryId.trim() == null) || (searchIndustryId.trim().equalsIgnoreCase("")) || (vo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(vo.getCurrentPageLink()).toString());
        if (vo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (vo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }
      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      for (int i = 0; i < searchlist.size(); i++) {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          BenchmarkRatioVo benchmarkRatioVo = new BenchmarkRatioVo();
          benchmarkRatioVo.setRatioCodeModify(new StringBuilder().append("<a href=benchMarkRatioAdd.do?method=openEditBenchMarkRatio&benchmarkRatioSeq=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          benchmarkRatioVo.setBenchmarkRatioCode(CommonFunction.checkNull(data.get(1)).toString());
          benchmarkRatioVo.setBenchmarkIndustryId(CommonFunction.checkNull(data.get(2)).toString());
          benchmarkRatioVo.setRecStatus(CommonFunction.checkNull(data.get(3)).toString());
          benchmarkRatioVo.setTotalRecordSize(count);
          detailList.add(benchmarkRatioVo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return detailList;
  }

  public String updateBenchMarkRatioData(Object ob)
  {
    BenchmarkRatioVo vo = (BenchmarkRatioVo)ob;
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    logger.info(new StringBuilder().append("DealerID():-").append(vo.getBenchmarkRatioSeq()).toString());
    ArrayList updatelist = new ArrayList();
    String result = "";
    boolean status = false;
    String stat = "";
    String sqlquery1 = new StringBuilder().append("select BENCHMARK_RATIO_CODE, BENCHMARK_INDUSTRY_ID, EFFECTIVE_DATE , BENCHMARK_RATIO from cr_benchmark_ratio_m where BENCHMARK_RATIO_CODE='").append(StringEscapeUtils.escapeSql(vo.getLbxRatio().trim())).append("' and BENCHMARK_INDUSTRY_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxIndustry().trim())).append("' and BENCHMARK_RATIO='").append(StringEscapeUtils.escapeSql(vo.getBenchmarkRatio().trim())).append("' and date(EFFECTIVE_DATE)='").append(CommonFunction.changeFormat(vo.getEffectiveDate())).append("' and  BENCHMARK_ID!=").append(vo.getBenchmarkRatioSeq()).toString();
    boolean benchMarkExist = ConnectionDAOforEJB.checkStatus(sqlquery1);
    if (benchMarkExist == true)
      result = "dataExist";
    else {
      try
      {
        if (!benchMarkExist) {
          if ((vo.getRatioCodeModify() != null) && (vo.getRecStatus().equals("on")))
            stat = "A";
          else {
            stat = "X";
          }

          StringBuffer bufInsSql = new StringBuffer();

          insertPrepStmtObject = null;
          insertPrepStmtObject = new PrepStmtObject();
          bufInsSql = null;
          bufInsSql = new StringBuffer();
          bufInsSql.append("UPDATE cr_benchmark_ratio_m set BENCHMARK_RATIO_CODE=?, BENCHMARK_INDUSTRY_ID=?,");
          bufInsSql.append(new StringBuilder().append(" BENCHMARK_RATIO=?,EFFECTIVE_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) where  BENCHMARK_ID=?").toString());

          if (CommonFunction.checkNull(vo.getLbxRatio()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getLbxRatio().toUpperCase().trim());

          if (CommonFunction.checkNull(vo.getLbxIndustry()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getLbxIndustry().toUpperCase().trim());

          if (CommonFunction.checkNull(vo.getBenchmarkRatio()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getBenchmarkRatio().toUpperCase().trim());

          if (CommonFunction.checkNull(vo.getEffectiveDate()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getEffectiveDate());

          if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(stat);
          }

          if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getMakerId());
          if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
          {
            insertPrepStmtObject.addNull();
          }
          else insertPrepStmtObject.addString(vo.getMakerDate());
          logger.info(new StringBuilder().append("BENCHMARK_ID : ").append(vo.getBenchmarkRatioSeq()).toString());
          if (CommonFunction.checkNull(vo.getBenchmarkRatioSeq()).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(vo.getBenchmarkRatioSeq());
          }
          insertPrepStmtObject.setSql(bufInsSql.toString());
          logger.info(new StringBuilder().append("IN updateBenchMarkRatioData() update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

          updatelist.add(insertPrepStmtObject);

          status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);

          if (status)
            result = "saved";
          else
            result = "notsaved";
        }
      }
      catch (Exception e)
      {
        e.printStackTrace();
      }
    }
    return result;
  }

  public ArrayList searchBenchMarkRatioEdit(Object ob)
  {
    ArrayList searchlist = new ArrayList();
    BenchmarkRatioVo vo = (BenchmarkRatioVo)ob;
    ArrayList ratioList = new ArrayList();
    logger.info(new StringBuilder().append("ratioid in searchBenchMarkRatioEdit &***************************** = ").append(vo.getBenchmarkRatioSeq()).toString());
    try
    {
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append(new StringBuilder().append(" select  BENCHMARK_RATIO_CODE,RATIO_NAME,BENCHMARK_INDUSTRY_ID,INDUSTRY_DESC,BENCHMARK_RATIO,DATE_FORMAT(EFFECTIVE_DATE,'").append(this.dateFormat).append("'),cbrm.REC_STATUS  from cr_benchmark_ratio_m cbrm").toString());
      bufInsSql.append(" join cr_ratios_m crm on cbrm.BENCHMARK_RATIO_CODE= crm. RATIO_CODE ");
      bufInsSql.append(new StringBuilder().append(" join com_industry_m cim on cbrm .BENCHMARK_INDUSTRY_ID= cim. INDUSTRY_ID WHERE BENCHMARK_ID='").append(StringEscapeUtils.escapeSql(vo.getRatioCodeModify())).append("'").toString());

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN searchBenchMarkRatioEdit() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("searchBenchMarkRatioEdit ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("searchBenchMarkRatioEdit ").append(searchlist.get(i).toString()).toString());
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          BenchmarkRatioVo ratioVo = new BenchmarkRatioVo();

          ratioVo.setLbxRatio(CommonFunction.checkNull(data.get(0)).toString());
          ratioVo.setBenchmarkRatioCode(CommonFunction.checkNull(data.get(1)).toString());
          ratioVo.setLbxIndustry(CommonFunction.checkNull(data.get(2)).toString());
          ratioVo.setBenchmarkIndustryId(CommonFunction.checkNull(data.get(3)).toString());
          ratioVo.setBenchmarkRatio(CommonFunction.checkNull(data.get(4)).toString());
          ratioVo.setEffectiveDate(CommonFunction.checkNull(data.get(5)).toString());
          ratioVo.setRecStatus(CommonFunction.checkNull(data.get(6)).toString());
          ratioList.add(ratioVo);
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return ratioList;
  }

  public ArrayList getAddressList()
  {
    logger.info("In MasterDAOImpl's method getAddressList");
    ArrayList list = new ArrayList();
    try
    {
      String query = "select VALUE,DESCRIPTION from generic_master where GENERIC_KEY='ADDRESS_TYPE' and rec_status ='A'";
      logger.info(new StringBuilder().append("getAddressList").append(query).toString());
      VerificationQuestionVo vo = null;
      ArrayList source = ConnectionDAOforEJB.sqlSelect(query);
      logger.info(new StringBuilder().append("getAddressList").append(source.size()).toString());
      for (int i = 0; i < source.size(); i++)
      {
        ArrayList subAddress = (ArrayList)source.get(i);
        if (subAddress.size() > 0)
        {
          logger.info(new StringBuilder().append("getAddressList").append(subAddress.size()).toString());
          vo = new VerificationQuestionVo();
          vo.setAddressId(CommonFunction.checkNull(subAddress.get(0)).toString());
          vo.setAddressDesc(CommonFunction.checkNull(subAddress.get(1)).toString());
          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public boolean finCheckExpression(Object ob)
  {
    FinancialPramMasterVo vo = (FinancialPramMasterVo)ob;
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();

    boolean status = false;
    String expr = "";
    String param = "";
    try
    {
      String query = "select PARAM_CODE from cr_financial_param where REC_STATUS='A'";
      logger.info(new StringBuilder().append("query : ").append(query).toString());
      MasterVo vO = null;
      ArrayList paramCodeList = ConnectionDAOforEJB.sqlSelect(query);
      expr = vo.getFinExpression();
      logger.info(new StringBuilder().append("paramCodeList ").append(paramCodeList.size()).toString());
      for (int i = 0; i < paramCodeList.size(); i++)
      {
        ArrayList data = (ArrayList)paramCodeList.get(i);
        for (int k = 0; k < data.size(); k++)
        {
          param = data.get(0).toString();
          logger.info(new StringBuilder().append("param ******************* ").append(param).toString());
          logger.info(new StringBuilder().append("expr.indexOf(param) ******************* ").append(expr.indexOf(param)).toString());
          if (expr.indexOf(param) >= 0)
          {
            expr = expr.replaceAll(param, "1");
            logger.info(new StringBuilder().append("expr in if******************* ").append(expr).toString());
          }
        }

      }

      logger.info(new StringBuilder().append("expression .................................. ").append(expr).toString());
      ScriptEngineManager mgr = new ScriptEngineManager();
      ScriptEngine engine = mgr.getEngineByName("JavaScript");

      logger.info(new StringBuilder().append("CommonFunction.checkNull(engine.eval(expr):::::::::::: ").append(CommonFunction.checkNull(new StringBuilder().append(engine.eval(expr)).append("").toString())).toString());
      if (!CommonFunction.checkNull(new StringBuilder().append(engine.eval(expr)).append("").toString()).equalsIgnoreCase(""))
      {
        status = true;
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    logger.info(new StringBuilder().append("status .................................. ").append(status).toString());
    return status;
  }

  public ArrayList<BusinessClosureVo> getBusinessMonthList(Object ob)
  {
    ArrayList searchlist = new ArrayList();
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    String businessMonthSearch = "";
    String businessYearSearch = "";
    BusinessClosureVo vo = (BusinessClosureVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In getBusinessMonthList...............");
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer lastRecord = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      businessMonthSearch = StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getBusinessMonthSearch())).trim();
      businessYearSearch = StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getBusinessYearSearch())).trim();
      bufInsSql.append("select BUSINESS_MONTH,case when BUSINESS_MONTH='1' then 'January' when BUSINESS_MONTH='2' then 'February' when BUSINESS_MONTH='3' then 'March' when BUSINESS_MONTH='4' then 'April' when BUSINESS_MONTH='5' then 'May' when BUSINESS_MONTH='6' then 'June' when BUSINESS_MONTH='7' then 'July' when BUSINESS_MONTH='8' then 'August' when BUSINESS_MONTH='9' then 'September' when BUSINESS_MONTH='10' then 'October' when BUSINESS_MONTH='11' then 'November' when BUSINESS_MONTH='12' then 'December' end as BUSINESS_MONTH,BUSINESS_YEAR,DATE_FORMAT(START_DATE,'%d-%m-%Y'),DATE_FORMAT(END_DATE,'%d-%m-%Y'),if(REC_STATUS='A','Active','Inactive')AS REC,business_id FROM cr_business_month_closur_m ");
      lastRecord.append("select max(business_id)business_id from cr_business_month_closur_m for update");
      bufInsSqlTempCount.append("SELECT COUNT(1) from cr_business_month_closur_m");

      if ((!businessMonthSearch.equals("")) && (!businessYearSearch.equals("")))
      {
        bufInsSql.append(new StringBuilder().append(" where BUSINESS_MONTH = '").append(businessMonthSearch).append("' and  BUSINESS_YEAR = '").append(businessYearSearch).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" where BUSINESS_MONTH = '").append(businessMonthSearch).append("' and BUSINESS_YEAR = '").append(businessYearSearch).append("'").toString());
      }
      else if (!businessMonthSearch.equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" where BUSINESS_MONTH = '").append(businessMonthSearch).append("'  ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" where BUSINESS_MONTH = '").append(businessMonthSearch).append("' ").toString());
      }
      else if (!businessYearSearch.equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" where BUSINESS_YEAR = '").append(businessYearSearch).append("'  ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" where BUSINESS_YEAR = '").append(businessYearSearch).append("' ").toString());
      }
      bufInsSql.append(" order by BUSINESS_ID");

      logger.info(new StringBuilder().append("IN getBusinessMonthList() search query1 ### ").append(bufInsSql.toString()).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      logger.info(new StringBuilder().append("maxBusinessId Query---- : ").append(lastRecord.toString()).toString());
      String businessId = ConnectionDAOforEJB.singleReturn(lastRecord.toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if ((businessMonthSearch.trim() == null) || (businessMonthSearch.trim().equalsIgnoreCase("")) || (businessYearSearch.trim() == null) || (businessYearSearch.trim().equalsIgnoreCase("")) || (vo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(vo.getCurrentPageLink()).toString());
        if (vo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (vo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }
      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      for (int i = 0; i < searchlist.size(); i++) {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          BusinessClosureVo businessclosureVo = new BusinessClosureVo();
          if (CommonFunction.checkNull(data.get(6)).trim().equalsIgnoreCase(businessId))
          {
            logger.info(new StringBuilder().append("businessId-------------------------------").append(businessId).toString());
            businessclosureVo.setBusinessMonth(new StringBuilder().append("<a href=businessMonthAdd.do?method=openEditBusinessClosure&businessMonth=").append(CommonFunction.checkNull(data.get(0)).toString()).append("&businessYear=").append(CommonFunction.checkNull(data.get(2)).toString()).append(">").append(CommonFunction.checkNull(data.get(1)).toString()).append("</a>").toString());

            businessclosureVo.setBusinessYear(CommonFunction.checkNull(data.get(2)).toString());
            businessclosureVo.setStartDate(CommonFunction.checkNull(data.get(3)).toString());
            businessclosureVo.setEndDate(CommonFunction.checkNull(data.get(4)).toString());
            businessclosureVo.setRecStatus(CommonFunction.checkNull(data.get(5)).toString());
            businessclosureVo.setTotalRecordSize(count);
            detailList.add(businessclosureVo);
          }
          else {
            businessclosureVo.setBusinessMonth(CommonFunction.checkNull(data.get(1)).toString());

            businessclosureVo.setBusinessYear(CommonFunction.checkNull(data.get(2)).toString());
            businessclosureVo.setStartDate(CommonFunction.checkNull(data.get(3)).toString());
            businessclosureVo.setEndDate(CommonFunction.checkNull(data.get(4)).toString());
            businessclosureVo.setRecStatus(CommonFunction.checkNull(data.get(5)).toString());
            businessclosureVo.setTotalRecordSize(count);
            detailList.add(businessclosureVo);
          }
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return detailList;
  }

  public ArrayList searchBusinessMonthClosureEdit(Object ob)
  {
    ArrayList searchlist = new ArrayList();
    BusinessClosureVo vo = (BusinessClosureVo)ob;
    ArrayList ratioList = new ArrayList();
    try
    {
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append(new StringBuilder().append(" select  case when BUSINESS_MONTH='1' then 'January' when BUSINESS_MONTH='2' then 'February' when BUSINESS_MONTH='3' then 'March' when BUSINESS_MONTH='4' then 'April' when BUSINESS_MONTH='5' then 'May' when BUSINESS_MONTH='6' then 'June' when BUSINESS_MONTH='7' then 'July' when BUSINESS_MONTH='8' then 'August' when BUSINESS_MONTH='9' then 'September' when BUSINESS_MONTH='10' then 'October' when BUSINESS_MONTH='11' then 'November' when BUSINESS_MONTH='12' then 'December' end as BUSINESS_MONTH,BUSINESS_YEAR,DATE_FORMAT(START_DATE,'").append(this.dateFormat).append("'),DATE_FORMAT(END_DATE,'").append(this.dateFormat).append("'),REC_STATUS  from cr_business_month_closur_m ").toString());
      bufInsSql.append(new StringBuilder().append(" WHERE BUSINESS_MONTH='").append(StringEscapeUtils.escapeSql(vo.getBusinessMonth())).append("' and BUSINESS_YEAR='").append(StringEscapeUtils.escapeSql(vo.getBusinessYear())).append("'").toString());

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchBusinessMonthClosureEdit() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("searchBusinessMonthClosureEdit ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("searchBusinessMonthClosureEdit ").append(searchlist.get(i).toString()).toString());
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          BusinessClosureVo ratioVo = new BusinessClosureVo();

          ratioVo.setBusinessMonthss(CommonFunction.checkNull(data.get(0)).toString());
          ratioVo.setBusinessYear(CommonFunction.checkNull(data.get(1)).toString());
          ratioVo.setStartDate(CommonFunction.checkNull(data.get(2)).toString());
          ratioVo.setEndDate(CommonFunction.checkNull(data.get(3)).toString());
          ratioVo.setRecStatus(CommonFunction.checkNull(data.get(4)).toString());
          ratioList.add(ratioVo);
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return ratioList;
  }

  public String updateBusinessMonthClosureData(Object ob) {
    BusinessClosureVo vo = (BusinessClosureVo)ob;
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();

    String result = "";
    boolean status = false;
    String stat = "";
    try
    {
      if ((vo.getRecStatus() != null) && (vo.getRecStatus().equals("on")))
        stat = "A";
      else {
        stat = "X";
      }

      StringBuffer bufInsSql = new StringBuffer();

      insertPrepStmtObject = null;
      insertPrepStmtObject = new PrepStmtObject();
      bufInsSql = null;
      bufInsSql = new StringBuffer();
      bufInsSql.append(new StringBuilder().append("UPDATE cr_business_month_closur_m set START_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND), END_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
      bufInsSql.append(new StringBuilder().append(" REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) where BUSINESS_MONTH='").append(StringEscapeUtils.escapeSql(vo.getBusinessMonth().trim())).append("' and BUSINESS_YEAR='").append(StringEscapeUtils.escapeSql(vo.getBusinessYear().trim())).append("'").toString());
      if (CommonFunction.checkNull(vo.getStartDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getStartDate());

      if (CommonFunction.checkNull(vo.getEndDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getEndDate());

      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(stat);
      if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getMakerId());
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerDate());
      logger.info(new StringBuilder().append("BUSINESS_MONTH : ").append(vo.getBusinessMonth()).toString());

      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN updateBusinessMonthClosureData() update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

      updatelist.add(insertPrepStmtObject);

      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);

      if (status)
        result = "saved";
      else {
        result = "notsaved";
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return result;
  }

  public String saveBusinessMonthClosureDetails(Object ob)
  {
    BusinessClosureVo vo = (BusinessClosureVo)ob;
    boolean status = false;
    String result = null;

    logger.info(new StringBuilder().append("In saveBusinessMonthClosureDetails.........inside ejb server file...........Dao Impl recStatus").append(vo.getRecStatus()).toString());
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String sqlquery1 = new StringBuilder().append("select START_DATE,END_DATE from cr_business_month_closur_m where BUSINESS_MONTH='").append(StringEscapeUtils.escapeSql(vo.getBusinessMonthss().trim())).append("' and BUSINESS_YEAR='").append(StringEscapeUtils.escapeSql(vo.getBusinessYear().trim())).append("'").toString();
    logger.info(new StringBuilder().append("In select saveBusinessMonthClosureDetails query ...").append(sqlquery1).toString());
    boolean businessMonthClosureExist = ConnectionDAO.checkStatus(sqlquery1);
    logger.info(new StringBuilder().append("In saveBusinessMonthClosureDetails..").append(businessMonthClosureExist).toString());
    logger.info(new StringBuilder().append("In getBusinessMonthss.--------------------------------------.").append(vo.getBusinessMonthss()).toString());
    if (businessMonthClosureExist == true) {
      result = "dataExist";
    }
    else {
      try
      {
        if ((vo.getRecStatus() != null) && (vo.getRecStatus().equals("on")))
          stat = "A";
        else {
          stat = "X";
        }

        logger.info("In insert saveBusinessMonthClosureDetails");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("insert into cr_business_month_closur_m (BUSINESS_MONTH,BUSINESS_YEAR,START_DATE,END_DATE,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());
        if (CommonFunction.checkNull(vo.getBusinessMonthss()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getBusinessMonthss().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getBusinessYear()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getBusinessYear().toUpperCase().trim());

        if (CommonFunction.checkNull(vo.getStartDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getStartDate());
        if (CommonFunction.checkNull(vo.getEndDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getEndDate());
        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerId());
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        {
          insertPrepStmtObject.addNull();
        }
        else insertPrepStmtObject.addString(vo.getMakerDate());

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN saveBusinessMonthClosureDetails() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        if (status)
          result = "datasaved";
        else
          result = "datanotsaved";
      }
      catch (Exception e) {
        e.printStackTrace();
      }
    }
    return result;
  }

  public String getStartDate(String businessMonthss, String businessYear)
  {
    logger.info("In getStartDate");
    String businessMonths = "";
    String year = "";
    String result = "";
    int count = 0;
    try
    {
      String cntQuery = "";
      String dateQuery = "";
      businessMonths = businessMonthss;
      logger.info(new StringBuilder().append("businessMonths-------getStartDate daoimpl-----------").append(businessMonths).toString());
      if (businessMonths.equalsIgnoreCase("1"))
      {
        cntQuery = new StringBuilder().append("select count(1) from cr_business_month_closur_m WHERE BUSINESS_MONTH='12' AND BUSINESS_YEAR=").append(businessYear).append("-1").toString();
        dateQuery = "";
        logger.info(new StringBuilder().append("cntQuery- january--").append(cntQuery).toString());
        count = Integer.parseInt(ConnectionDAO.singleReturn(cntQuery));
        logger.info(new StringBuilder().append("count----january--").append(count).toString());
        if (count > 0)
        {
          dateQuery = new StringBuilder().append("select date_format(date(DATE_ADD(END_DATE,INTERVAL 1 DAY)), '%d-%m-%Y') as START_DATE from cr_business_month_closur_m where BUSINESS_MONTH='12' and BUSINESS_YEAR=").append(businessYear).append("-1").toString();
          logger.info(new StringBuilder().append("dateQuery---").append(dateQuery).toString());
          result = ConnectionDAO.singleReturn(dateQuery);
        }
        else
        {
          result = "";
        }
      }
      else
      {
        cntQuery = new StringBuilder().append("select count(1) from cr_business_month_closur_m WHERE BUSINESS_MONTH=").append(businessMonths).append("-1 AND BUSINESS_YEAR=").append(businessYear).append("").toString();
        logger.info(new StringBuilder().append("cntQuery---").append(cntQuery).toString());
        count = Integer.parseInt(ConnectionDAO.singleReturn(cntQuery));
        logger.info(new StringBuilder().append("count-------").append(count).toString());
        if (count > 0)
        {
          dateQuery = new StringBuilder().append("select date_format(date(DATE_ADD(END_DATE,INTERVAL 1 DAY)), '%d-%m-%Y') as START_DATE from cr_business_month_closur_m where BUSINESS_MONTH=").append(businessMonths).append("-1 and BUSINESS_YEAR=").append(businessYear).append("").toString();
          logger.info(new StringBuilder().append("dateQuery---").append(dateQuery).toString());
          result = ConnectionDAO.singleReturn(dateQuery);
        }
        else
        {
          result = "";
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return result;
  }

  public int getApprovalfromPmst()
  {
    ArrayList list = new ArrayList();
    int count = 0;
    try {
      logger.info("In getApprovalfromPmst.............inside ejb server file............Dao Impl");
      String query = "select PARAMETER_VALUE from parameter_mst where parameter_key = 'MASTER_APPROVAL_LEVEL'";
      ApprovalLevelDefVo vO = null;
      ArrayList getApprovalfromPmst = ConnectionDAOforEJB.sqlSelect(query);
      String countStr = ConnectionDAOforEJB.singleReturn(query);
      if (!CommonFunction.checkNull(countStr).equalsIgnoreCase(""))
        count = Integer.parseInt(countStr);
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return count;
  }
  public int getApprovalLevelfromPmst() {
    ArrayList list = new ArrayList();
    int count = 0;
    try {
      logger.info("In getApprovalLevelfromPmst.............inside ejb server file............Dao Impl");
      String query = "select PARAMETER_VALUE from parameter_mst where parameter_key = 'MASTER_APPROVAL_LEVEL'";
      ApprovalLevelDefVo vO = null;
      ArrayList getApprovalLevelfromPmst = ConnectionDAOforEJB.sqlSelect(query);
      String countStr = ConnectionDAOforEJB.singleReturn(query);
      if (!CommonFunction.checkNull(countStr).equalsIgnoreCase(""))
        count = Integer.parseInt(countStr);
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return count;
  }

  public boolean ifscBankBranchMaster(Object ob) {
    BankBranchMasterVo bankBranchMasterVo = (BankBranchMasterVo)ob;
    ArrayList list = new ArrayList();
    boolean result = false;
    try {
      logger.info("In ifscBankBranchMaster.............inside MSSQLmasterDao Impl");
      String query = new StringBuilder().append("select count(1) from com_bankbranch_m where BRANCH_IFCS_CODE='").append(CommonFunction.checkNull(bankBranchMasterVo.getBranchIFCSCode()).trim()).append("'").toString();
      if (!CommonFunction.checkNull(bankBranchMasterVo.getBankBranchId()).trim().equalsIgnoreCase(""))
        query = new StringBuilder().append(query).append(" AND BANK_BRANCH_CODE !=CommonFunction.checkNull(bankBranchMasterVo.getBankBranchId()).trim()").toString();
      logger.info(new StringBuilder().append("In ifscBankBranchMaster  Query for checking duplicate IFSC  :  ").append(query).toString());
      String countStr = ConnectionDAOforEJB.singleReturn(query);
      if (!countStr.equalsIgnoreCase("0"))
        result = true;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return result;
  }
  public String getMakerCheckerFlag() {
    logger.info("in  getMakerCheckerFlag:::::::::::::: ");
    String makerCheckerFlag = "";
    try {
      String query = "SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='MASTER_MAKER_AUTHOR'";
      logger.info(new StringBuilder().append("Query for maker checker flag is::::::").append(query).toString());

      makerCheckerFlag = ConnectionDAOforEJB.singleReturn(query);

      logger.info(new StringBuilder().append("flak ki value hai::::::::").append(makerCheckerFlag).toString());
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return makerCheckerFlag;
  }
  public String getApprovalId() { logger.info("in  getApprovalId:::::::::::::: ");
    String productModify = "";
    String query = "";
    try {
      query = "select MAX(APPROVAL_LEVEL_ID) from cr_approval_level_m_TEMP ";
      logger.info(new StringBuilder().append("in  getApprovalId:::::::::::::query::::::: ").append(query).toString());
      productModify = ConnectionDAOforEJB.singleReturn(query);
      logger.info(new StringBuilder().append("in  getApprovalId:::::::::::::value ::::::: ").append(productModify).toString());
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      query = null;
    }
    return productModify; }

  public String forwardApprovalLevel(String approvalId) {
    logger.info(new StringBuilder().append("In forwardApprovalLevel::::::::::::::::").append(approvalId).toString());
    StringBuffer query = new StringBuffer();
    boolean status = false;
    ArrayList queryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String queryResult = "";
    try
    {
      query.append(" UPDATE CR_APPROVAL_LEVEL_M_temp SET MAKER_AUTHOR_STATUS='F' WHERE APPROVAL_LEVEL_ID=?");
      logger.info(new StringBuilder().append("query:::::::::::::::::::::is::::").append(query.toString()).toString());

      if (CommonFunction.checkNull(approvalId).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(approvalId);
      }

      insertPrepStmtObject.setSql(query.toString());
      logger.info(new StringBuilder().append("IN forwardApprovalLevel() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      queryList.add(insertPrepStmtObject);
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(queryList);
      logger.info(new StringBuilder().append("update  :::::::::::::::::::").append(status).toString());
      if (status)
        queryResult = "S";
      logger.info(new StringBuilder().append("update  :::::::::::::::::::").append(queryResult).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally {
      query = null;
      queryList = null;
      insertPrepStmtObject = null;
    }
    return queryResult;
  }
  public ArrayList searchApprovalLevelDefAuthor(ApprovalLevelDefVo Vo) {
    String productModify = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    ArrayList searchlist = new ArrayList();
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchApprovalLevelDef.....................................Dao Impl");

      String productSearch = StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getLbxProductID())).trim();
      logger.info(new StringBuilder().append("productSearch....").append(productSearch).toString());

      String findApprovalSearch = StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getFindApprovalSearch())).trim();
      logger.info(new StringBuilder().append("findApprovalSearch....").append(findApprovalSearch).toString());

      productModify = StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getProductModify())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("SELECT APPROVAL_LEVEL_ID,(SELECT cr_p.PRODUCT_DESC FROM cr_product_m cr_p WHERE cr_p.PRODUCT_ID=cra.PRODUCT_ID) as Product_Id,(SELECT SCHEME_DESC FROM CR_SCHEME_M S WHERE S.SCHEME_ID=cra.SCHEME_ID) as Scheme , ");
      bufInsSql.append("FINAL_APPROVAL_LEVEL,AMOUNT_FROM,AMOUNT_TO,case when REC_STATUS='A' then 'Active' else 'Inactive' end as Status");
      bufInsSql.append(" FROM CR_APPROVAL_LEVEL_M_temp cra where 'a'='a' AND MAKER_AUTHOR_STATUS='F' ");

      bufInsSqlTempCount.append("SELECT count(1) ");

      bufInsSqlTempCount.append(" FROM CR_APPROVAL_LEVEL_M_temp cra where 'a'='a' AND MAKER_AUTHOR_STATUS='F' ");

      if (!CommonFunction.checkNull(Vo.getLbxProductID()).equalsIgnoreCase(""))
      {
        bufInsSql.append(new StringBuilder().append("and cra.PRODUCT_ID='").append(CommonFunction.checkNull(Vo.getLbxProductID()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" and cra.PRODUCT_ID='").append(CommonFunction.checkNull(Vo.getLbxProductID()).trim()).append("' ").toString());
      }
      if (!CommonFunction.checkNull(Vo.getLbxSchemeId()).equalsIgnoreCase(""))
      {
        bufInsSql.append(new StringBuilder().append(" and cra.SCHEME_ID='").append(CommonFunction.checkNull(Vo.getLbxSchemeId()).trim()).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" and cra.SCHEME_ID='").append(CommonFunction.checkNull(Vo.getLbxSchemeId()).trim()).append("'").toString());
      }

      if (!CommonFunction.checkNull(Vo.getFindApprovalSearch()).equalsIgnoreCase(""))
      {
        bufInsSql.append(new StringBuilder().append(" and cra.FINAL_APPROVAL_LEVEL='").append(CommonFunction.checkNull(Vo.getFindApprovalSearch()).trim()).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" and cra.FINAL_APPROVAL_LEVEL='").append(CommonFunction.checkNull(Vo.getFindApprovalSearch()).trim()).append("'").toString());
      }

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      logger.info(new StringBuilder().append("current PAge Link no .................... ").append(Vo.getCurrentPageLink()).toString());
      if (Vo.getCurrentPageLink() > 1)
      {
        startRecordIndex = (Vo.getCurrentPageLink() - 1) * this.no;
        endRecordIndex = this.no;
        logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
        logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
      }
      bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());

      logger.info(new StringBuilder().append("query :::::::::::::::::saurabh ").append(bufInsSql.toString()).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("searchApprovalLevelDef ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          ApprovalLevelDefVo LevelDefVo = new ApprovalLevelDefVo();

          LevelDefVo.setApprovalLevelID(new StringBuilder().append("<a href=UWApprovalLevelDefAuthorApprove.do?method=EditapprovalLevelDefAuthor&productModify=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          LevelDefVo.setProductSearch(CommonFunction.checkNull(data.get(1)));
          LevelDefVo.setLbxProductID(CommonFunction.checkNull(data.get(1)));
          LevelDefVo.setScheme(CommonFunction.checkNull(data.get(2)));
          LevelDefVo.setFindApprovalSearch(CommonFunction.checkNull(data.get(3)));
          LevelDefVo.setFindApprovalLevel(CommonFunction.checkNull(data.get(3)));
          if (!CommonFunction.checkNull(data.get(4)).trim().equalsIgnoreCase(""))
          {
            Number amount = this.myFormatter.parse(CommonFunction.checkNull(data.get(4)).trim());
            LevelDefVo.setAmountFromSearch(this.myFormatter.format(amount));
            LevelDefVo.setAmountFrom(this.myFormatter.format(amount));
          }
          if (!CommonFunction.checkNull(data.get(5)).trim().equalsIgnoreCase(""))
          {
            Number amount = this.myFormatter.parse(CommonFunction.checkNull(data.get(5)).trim());
            LevelDefVo.setAmountToSearch(this.myFormatter.format(amount));
            LevelDefVo.setAmountTo(this.myFormatter.format(amount));
          }
          LevelDefVo.setStatus(CommonFunction.checkNull(data.get(6)));

          LevelDefVo.setTotalRecordSize(count);
          detailList.add(LevelDefVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public String saveUWApproval(ApprovalLevelDefVo Vo, String productModify) {
    logger.info(new StringBuilder().append("in saveUWApproval method::::::::::::::::::::::::::").append(productModify).toString());

    String provcal = "";
    boolean status = false;

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

    ArrayList in = new ArrayList();
    ArrayList out = new ArrayList();
    ArrayList outMessages = new ArrayList();
    String s1 = "";
    String s2 = "";
    try
    {
      in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(productModify).trim()));
      in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getDecision()).trim()));
      in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getComments()).trim()));
      in.add(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Vo.getMakerId()).trim()));

      logger.info(new StringBuilder().append("saurabh singh:::::::::::::::::").append(productModify).toString());
      logger.info(new StringBuilder().append("saurabh singh:::::::::::::::::").append(Vo.getDecision()).toString());
      logger.info(new StringBuilder().append("saurabh singh:::::::::::::::::").append(Vo.getComments()).toString());
      logger.info(new StringBuilder().append("saurabh singh:::::::::::::::::").append(Vo.getMakerId()).toString());

      String date = CommonFunction.changeFormat(CommonFunction.checkNull(Vo.getMakerDate()).trim());
      logger.info(new StringBuilder().append("date is::::::::::::::::").append(date).toString());
      in.add(date);

      out.add(s1);
      out.add(s2);
      logger.info(new StringBuilder().append("UW_APPROVAL_AUTHOR(").append(in.toString()).append(",").append(out.toString()).append(")").toString());
      outMessages = (ArrayList)ConnectionDAOforEJB.callSP("UW_APPROVAL_AUTHOR", in, out);
      s1 = CommonFunction.checkNull(outMessages.get(0));
      s2 = CommonFunction.checkNull(outMessages.get(1));
      logger.info(new StringBuilder().append("value of s1::::::::").append(s1).toString());
      logger.info(new StringBuilder().append("value of s1::::::::").append(s2).toString());

      if (s1.equalsIgnoreCase("S"))
      {
        status = true;
        provcal = s1;
      }
      else {
        status = false;
        provcal = s2;
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally {
      s1 = null;
      s2 = null;
      in.clear();
      in = null;
      out.clear();
      out = null;
      outMessages.clear();
      outMessages = null;
    }
    return provcal;
  }

  public ArrayList getVehicleSegment()
  {
    ArrayList list = new ArrayList();
    try {
      logger.info("In getVehicleSegment..........................DAOImpl");
      String query = "SELECT VALUE,DESCRIPTION FROM generic_master WHERE REC_STATUS='A' and generic_key='VEHICLE_SEGMENT'";
      MakeModelmasterVO vo = null;
      logger.info(new StringBuilder().append("vehicle category query......").append(query).toString());
      ArrayList vehicle = ConnectionDAOforEJB.sqlSelect(query);

      logger.info(new StringBuilder().append("get vehicle size").append(vehicle.size()).toString());

      for (int i = 0; i < vehicle.size(); i++) {
        logger.info(new StringBuilder().append("vehicle ").append(CommonFunction.checkNull(vehicle.get(i)).toString()).toString());

        ArrayList data = (ArrayList)vehicle.get(i);
        for (int k = 0; k < data.size(); k++) {
          logger.info(new StringBuilder().append("vehicle:::::::: ").append(CommonFunction.checkNull(data.get(k)).toString()).toString());

          vo = new MakeModelmasterVO();
          vo.setVehicleValue(data.get(0).toString());
          vo.setVehicleDesc(data.get(1).toString());
        }
        list.add(vo);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public boolean saveScoringBenchmarkMaster(ScoringBenchmarkMasterVo vo)
  {
    boolean status = false;
    String result = "";

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";

    String dataType = vo.getDataType();
    logger.info(new StringBuilder().append("dataType::::").append(dataType).toString());
    try {
      logger.info("In insert saveBenchmarkRatioMaster");
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("insert into cr_benchmark_ratio_m (VALUE_CHAIN_ID,SCORING_PARAM_CODE,WEIGHTAGE,");
      if (CommonFunction.checkNull(dataType).equalsIgnoreCase("N"))
      {
        bufInsSql.append("NUMERIC_VALUE_FROM,NUMERIC_VALUE_TO,");
      }
      else bufInsSql.append("CHARACTER_VALUE,");

      bufInsSql.append("RATING,REC_STATUS,MAKER_ID,MAKER_DATE)");
      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,?,?,");
      if (CommonFunction.checkNull(dataType).equalsIgnoreCase("N"))
      {
        bufInsSql.append("?,?,");
      }
      else bufInsSql.append("?,");

      bufInsSql.append("?,?,");
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

      if (CommonFunction.checkNull(vo.getIndustry()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getIndustry().trim());

      if (CommonFunction.checkNull(vo.getLbxScorecardID()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getLbxScorecardID().trim());

      if (CommonFunction.checkNull(vo.getWeightage()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getWeightage().trim());

      if (CommonFunction.checkNull(vo.getRecStatus()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getRecStatus());
      if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerId());
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerDate());

      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN saveBenchMarkRatio() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("IN status insert  ").append(status).toString());
      if (status)
        result = "datasaved";
      else
        result = "datanotsaved";
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return status;
  }

  public ArrayList getScorelistDetails(ScoringBenchmarkMasterVo vo) {
    ArrayList list = new ArrayList();
    try {
      String dataType = vo.getDataType();
      logger.info(new StringBuilder().append("dataType::::").append(dataType).toString());
      if (CommonFunction.checkNull(dataType).equalsIgnoreCase("N"))
      {
        String query = "select NUMERIC_VALUE_FROM,NUMERIC_VALUE_TO,RATING from CR_SCORECARD_VALUES";
        logger.info(new StringBuilder().append("Scorelist Details query......").append(query).toString());
        ArrayList ScoreList = ConnectionDAOforEJB.sqlSelect(query);

        logger.info(new StringBuilder().append("get ScoreList size").append(ScoreList.size()).toString());

        for (int i = 0; i < ScoreList.size(); i++) {
          logger.info(new StringBuilder().append("ScoreList ").append(CommonFunction.checkNull(ScoreList.get(i)).toString()).toString());

          ArrayList data = (ArrayList)ScoreList.get(i);
          for (int k = 0; k < data.size(); k++) {
            logger.info(new StringBuilder().append("ScoreList:::::::: ").append(CommonFunction.checkNull(data.get(k)).toString()).toString());
          }

          list.add(vo);
        }
      }
      else {
        String query = "select CHARACTER_VALUE,RATING from CR_SCORECARD_VALUES";

        logger.info(new StringBuilder().append("Scorelist Details query......").append(query).toString());
        ArrayList ScoreList = ConnectionDAOforEJB.sqlSelect(query);

        logger.info(new StringBuilder().append("get ScoreList size").append(ScoreList.size()).toString());

        for (int i = 0; i < ScoreList.size(); i++) {
          logger.info(new StringBuilder().append("ScoreList ").append(CommonFunction.checkNull(ScoreList.get(i)).toString()).toString());

          ArrayList data = (ArrayList)ScoreList.get(i);
          for (int k = 0; k < data.size(); k++) {
            logger.info(new StringBuilder().append("ScoreList:::::::: ").append(CommonFunction.checkNull(data.get(k)).toString()).toString());
          }

          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList rateApprovalMakerSearch(Object ob) {
    String product = "";
    String scheme = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    ArrayList searchlist = new ArrayList();
    RateApprovalVo rateApprovalVo = (RateApprovalVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info(new StringBuilder().append("In searchDealerData.............inside ejb server file...........Dao Impl").append(rateApprovalVo.getSearchByStatus()).toString());
      product = StringEscapeUtils.escapeSql(CommonFunction.checkNull(rateApprovalVo.getLbxProductID())).trim();
      scheme = StringEscapeUtils.escapeSql(CommonFunction.checkNull(rateApprovalVo.getLbxScheme())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();
      bufInsSql.append("SELECT RATE_APPROVAL_ID,CRM.PRODUCT_ID,CRM.SCHEME_ID,CRM.RACK_RATE,CRM.RACK_PROCESSING_FEE,CPM.PRODUCT_DESC,CSM.SCHEME_DESC ");
      bufInsSql.append("FROM CR_RATE_MATRIX_M CRM JOIN CR_PRODUCT_M CPM ON (CPM.PRODUCT_ID = CRM.PRODUCT_ID) ");
      bufInsSql.append(new StringBuilder().append("JOIN CR_SCHEME_M CSM ON (CSM.SCHEME_ID = CRM.SCHEME_ID) WHERE CRM.REC_STATUS='").append(CommonFunction.checkNull(rateApprovalVo.getSearchByStatus())).append("'").toString());
      bufInsSqlTempCount.append(" SELECT COUNT(1) FROM CR_RATE_MATRIX_M CRM JOIN CR_PRODUCT_M CPM ON (CPM.PRODUCT_ID = CRM.PRODUCT_ID) ");
      bufInsSqlTempCount.append(new StringBuilder().append(" JOIN CR_SCHEME_M CSM ON (CSM.SCHEME_ID = CRM.SCHEME_ID) WHERE CRM.REC_STATUS='").append(CommonFunction.checkNull(rateApprovalVo.getSearchByStatus())).append("' ").toString());

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(product)).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND CRM.PRODUCT_ID='").append(product).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND CRM.PRODUCT_ID='").append(product).append("' ").toString());
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(scheme)).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND CRM.SCHEME_ID='").append(scheme).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND CRM.SCHEME_ID='").append(scheme).append("'").toString());
      }

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      logger.info(new StringBuilder().append("current PAge Link no .................... ").append(rateApprovalVo.getCurrentPageLink()).toString());
      if (rateApprovalVo.getCurrentPageLink() > 1)
      {
        startRecordIndex = (rateApprovalVo.getCurrentPageLink() - 1) * this.no;
        endRecordIndex = this.no;
        logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
        logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
      }

      bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchSubDealerData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info("In searchSubDealerData.....................................Dao Impl");
      logger.info(new StringBuilder().append("searchSubDealerData ").append(searchlist).toString());
      logger.info(new StringBuilder().append("searchlist.size()  ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++) {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          RateApprovalVo searchDataVo = new RateApprovalVo();

          searchDataVo.setRateApprovalId(new StringBuilder().append("<a href=rateMatrixMakerDispatchAction.do?method=rateApprovalMakerOpenEdit&product=").append(CommonFunction.checkNull(data.get(1)).toString()).append("&scheme=").append(CommonFunction.checkNull(data.get(2)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          searchDataVo.setRackRate(CommonFunction.checkNull(data.get(3)).toString());
          searchDataVo.setRackProcessingFee(CommonFunction.checkNull(data.get(4)).toString());
          searchDataVo.setProduct(CommonFunction.checkNull(data.get(5)).toString());
          searchDataVo.setScheme(CommonFunction.checkNull(data.get(6)).toString());
          searchDataVo.setTotalRecordSize(count);
          detailList.add(searchDataVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    logger.info(new StringBuilder().append("detailList size : ").append(detailList).toString());
    return detailList;
  }

  public boolean saveRateApprovalMakerData(Object ob)
  {
    RateApprovalVo vo = (RateApprovalVo)ob;
    boolean status = false;

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

    String stat = "X";

    String query = new StringBuilder().append("SELECT PRODUCT_ID FROM CR_RATE_MATRIX_M WHERE PRODUCT_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID().trim())).append("'").append("AND SCHEME_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxScheme().trim())).append("'").toString();
    logger.info(new StringBuilder().append("In saveRateApprovalMakerData.................Dao Impl").append(query).toString());
    boolean st = ConnectionDAOforEJB.checkStatus(query);

    logger.info(new StringBuilder().append("## In saveRateApprovalMakerData() : st : ==>> ").append(st).toString());
    try
    {
      logger.info("## In saveRateApprovalMakerData() : .........");

      if (!st)
      {
        StringBuilder bufInsSql = new StringBuilder();

        bufInsSql.append("INSERT INTO CR_RATE_MATRIX_M (PRODUCT_ID,SCHEME_ID,RACK_RATE,RACK_PROCESSING_FEE,REC_STATUS,MAKER_ID,MAKER_DATE) ");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND))").toString());

        if (CommonFunction.checkNull(vo.getLbxProductID()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getLbxProductID().toUpperCase().trim());
        }

        if (CommonFunction.checkNull(vo.getLbxScheme()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getLbxScheme().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getRackRate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          try {
            insertPrepStmtObject.addString(this.myFormatter.parse(vo.getRackRate()).toString());
          }
          catch (ParseException e1) {
            e1.printStackTrace();
          }
        }

        if (CommonFunction.checkNull(vo.getRackProcessingFee()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          try {
            insertPrepStmtObject.addString(this.myFormatter.parse(vo.getRackProcessingFee()).toString());
          }
          catch (ParseException e1) {
            e1.printStackTrace();
          }
        }

        if (CommonFunction.checkNull(vo.getSaveForwardFlag()).equalsIgnoreCase("")) {
          insertPrepStmtObject.addNull();
        }
        else {
          insertPrepStmtObject.addString(vo.getSaveForwardFlag());
        }

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerId().toUpperCase().trim());
        }

        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerDate().toUpperCase().trim());
        }

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN rateApprovalMakerMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);

        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveRateApprovalData......................").append(status).toString());
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      qryList.clear();
      qryList = null;
    }

    return status;
  }

  public ArrayList openEditRateApprovalMakerData(Object ob)
  {
    ArrayList searchlist = new ArrayList();
    RateApprovalVo vo = (RateApprovalVo)ob;
    ArrayList rateList = new ArrayList();
    try
    {
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append(" SELECT CRM.PRODUCT_ID,CRM.SCHEME_ID,CPM.PRODUCT_DESC,CSM.SCHEME_DESC,");
      bufInsSql.append(" CRM.RACK_RATE,CRM.RACK_PROCESSING_FEE FROM CR_RATE_MATRIX_M CRM  ");
      bufInsSql.append(" JOIN CR_PRODUCT_M CPM ON (CPM.PRODUCT_ID = CRM.PRODUCT_ID) ");
      bufInsSql.append(" JOIN CR_SCHEME_M CSM ON (CSM.SCHEME_ID = CRM.SCHEME_ID) ");
      bufInsSql.append(new StringBuilder().append(" WHERE CRM.REC_STATUS <> 'X' AND CRM.PRODUCT_ID = '").append(StringEscapeUtils.escapeSql(vo.getLbxProductID())).append("' AND CRM.SCHEME_ID ='").append(StringEscapeUtils.escapeSql(vo.getLbxScheme())).append("'").toString());

      logger.info(new StringBuilder().append("## In openEditRateApprovalMakerData() : Select query of CR_RATE_MATRIX_M : ==>> ").append(bufInsSql.toString()).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      int listSize = searchlist.size();

      logger.info(new StringBuilder().append("## In openEditRateApprovalMakerData() : listSize : ==>> ").append(listSize).toString());

      for (int i = 0; i < listSize; i++) {
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0)
        {
          RateApprovalVo rateVo = new RateApprovalVo();

          rateVo.setLbxProductID(CommonFunction.checkNull(data.get(0)).toString());

          rateVo.setLbxScheme(CommonFunction.checkNull(data.get(1)).toString());

          rateVo.setProduct(CommonFunction.checkNull(data.get(2)).toString());

          rateVo.setScheme(CommonFunction.checkNull(data.get(3)).toString());

          if (CommonFunction.checkNull(data.get(4)).trim().equalsIgnoreCase(""))
          {
            rateVo.setRackRate("");
          }
          else
          {
            rateVo.setRackRate(this.myFormatter.format(this.myFormatter.parse(CommonFunction.checkNull(data.get(4)))));
          }

          if (CommonFunction.checkNull(data.get(5)).trim().equalsIgnoreCase(""))
          {
            rateVo.setRackProcessingFee("");
          }
          else
          {
            rateVo.setRackProcessingFee(this.myFormatter.format(this.myFormatter.parse(CommonFunction.checkNull(data.get(5)))));
          }
          rateList.add(rateVo);
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return rateList;
  }

  public boolean updateRateApprovalMakerData(Object ob)
  {
    RateApprovalVo vo = (RateApprovalVo)ob;

    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();

    boolean status = false;
    String saveForwardFlag = CommonFunction.checkNull(vo.getSaveForwardFlag());

    logger.info(new StringBuilder().append("## IN updateRateApprovalMakerData(): saveForwardFlag :==>> ").append(saveForwardFlag).toString());
    try
    {
      StringBuffer bufInsSql = new StringBuffer();
      logger.info("In updateCountryData..........inside ejb server file............Dao Impl");
      bufInsSql.append(" UPDATE CR_RATE_MATRIX_M SET RACK_RATE=?,RACK_PROCESSING_FEE=?, ");
      bufInsSql.append(" REC_STATUS = ?, ");
      bufInsSql.append(" MAKER_ID=?,MAKER_DATE=");
      bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?, '").append(this.dateFormat).append("')").toString());
      bufInsSql.append(" where PRODUCT_ID=? AND SCHEME_ID=?");

      if (CommonFunction.checkNull(vo.getRackRate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(this.myFormatter.parse(vo.getRackRate()).toString());

      if (CommonFunction.checkNull(vo.getRackProcessingFee()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(this.myFormatter.parse(vo.getRackProcessingFee()).toString());

      if (CommonFunction.checkNull(vo.getSaveForwardFlag()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getSaveForwardFlag().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerId());
      }
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerDate());

      if (CommonFunction.checkNull(vo.getLbxProductID()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getLbxProductID());

      if (CommonFunction.checkNull(vo.getLbxScheme()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getLbxScheme());

      insertPrepStmtObject.setSql(bufInsSql.toString());

      updatelist.add(insertPrepStmtObject);

      logger.info(new StringBuilder().append("## In updateRateApprovalMakerData() : update query (CR_RATE_MATRIX_M) : ==>> ").append(insertPrepStmtObject.printQuery()).toString());

      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return status;
  }

  public ArrayList rateApprovalCheckerSearch(Object ob)
  {
    String product = "";
    String scheme = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    ArrayList searchlist = new ArrayList();
    RateApprovalVo rateApprovalVo = (RateApprovalVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In searchDealerData.............inside ejb server file...........Dao Impl");
      product = StringEscapeUtils.escapeSql(CommonFunction.checkNull(rateApprovalVo.getLbxProductID())).trim();
      scheme = StringEscapeUtils.escapeSql(CommonFunction.checkNull(rateApprovalVo.getLbxScheme())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();
      bufInsSql.append("SELECT RATE_APPROVAL_ID,CRM.PRODUCT_ID,CRM.SCHEME_ID,CRM.RACK_RATE,CRM.RACK_PROCESSING_FEE,CPM.PRODUCT_DESC,CSM.SCHEME_DESC ");
      bufInsSql.append("FROM CR_RATE_MATRIX_M CRM JOIN CR_PRODUCT_M CPM ON (CPM.PRODUCT_ID = CRM.PRODUCT_ID) ");
      bufInsSql.append("JOIN CR_SCHEME_M CSM ON (CSM.SCHEME_ID = CRM.SCHEME_ID) WHERE CRM.REC_STATUS='F' ");
      bufInsSql.append(new StringBuilder().append(" AND CRM.MAKER_ID <> '").append(CommonFunction.checkNull(rateApprovalVo.getMakerId())).append("'").toString());
      bufInsSqlTempCount.append(" SELECT COUNT(1) FROM CR_RATE_MATRIX_M CRM JOIN CR_PRODUCT_M CPM ON (CPM.PRODUCT_ID = CRM.PRODUCT_ID) ");
      bufInsSqlTempCount.append(" JOIN CR_SCHEME_M CSM ON (CSM.SCHEME_ID = CRM.SCHEME_ID) WHERE CRM.REC_STATUS='F' ");

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(product)).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND CPM.product_id='").append(product).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND CPM.product_id='").append(product).append("' ").toString());
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(scheme)).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND CRM.SCHEME_ID='").append(scheme).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND CRM.SCHEME_ID='").append(scheme).append("'").toString());
      }

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      logger.info(new StringBuilder().append("current PAge Link no .................... ").append(rateApprovalVo.getCurrentPageLink()).toString());
      if (rateApprovalVo.getCurrentPageLink() > 1)
      {
        startRecordIndex = (rateApprovalVo.getCurrentPageLink() - 1) * this.no;
        endRecordIndex = this.no;
        logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
        logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
      }

      bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchSubDealerData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info("In searchSubDealerData.....................................Dao Impl");
      logger.info(new StringBuilder().append("searchSubDealerData ").append(searchlist).toString());
      logger.info(new StringBuilder().append("searchlist.size()  ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++) {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          RateApprovalVo searchDataVo = new RateApprovalVo();

          searchDataVo.setRateApprovalId(new StringBuilder().append("<a href=rateMatrixCheckerDispatchAction.do?method=rateApprovalCheckerOpen&product=").append(CommonFunction.checkNull(data.get(1)).toString()).append("&scheme=").append(CommonFunction.checkNull(data.get(2)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          searchDataVo.setRackRate(CommonFunction.checkNull(data.get(3)).toString());
          searchDataVo.setRackProcessingFee(CommonFunction.checkNull(data.get(4)).toString());
          searchDataVo.setProduct(CommonFunction.checkNull(data.get(5)).toString());
          searchDataVo.setScheme(CommonFunction.checkNull(data.get(6)).toString());
          searchDataVo.setTotalRecordSize(count);
          detailList.add(searchDataVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    logger.info(new StringBuilder().append("detailList size : ").append(detailList).toString());
    return detailList;
  }

  public ArrayList openRateApprovalCheckerData(Object ob)
  {
    ArrayList searchlist = new ArrayList();
    RateApprovalVo vo = (RateApprovalVo)ob;
    ArrayList rateList = new ArrayList();
    try
    {
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append(" SELECT CRM.PRODUCT_ID,CRM.SCHEME_ID,CPM.PRODUCT_DESC,CSM.SCHEME_DESC,");
      bufInsSql.append(" RACK_RATE, RACK_PROCESSING_FEE FROM CR_RATE_MATRIX_M CRM  ");
      bufInsSql.append(" JOIN CR_PRODUCT_M CPM ON (CPM.PRODUCT_ID = CRM.PRODUCT_ID) ");
      bufInsSql.append(" JOIN CR_SCHEME_M CSM ON (CSM.SCHEME_ID = CRM.SCHEME_ID) ");
      bufInsSql.append(new StringBuilder().append(" WHERE CRM.REC_STATUS = 'F' AND CRM.PRODUCT_ID = '").append(StringEscapeUtils.escapeSql(vo.getLbxProductID())).append("' AND CRM.SCHEME_ID ='").append(StringEscapeUtils.escapeSql(vo.getLbxScheme())).append("'").toString());

      logger.info(new StringBuilder().append("## In openRateApprovalCheckerData() : Select query of CR_RATE_MATRIX_M : ==>> ").append(bufInsSql.toString()).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      int listSize = searchlist.size();

      logger.info(new StringBuilder().append("## In openRateApprovalCheckerData() : listSize : ==>> ").append(listSize).toString());

      for (int i = 0; i < listSize; i++) {
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0)
        {
          RateApprovalVo rateVo = new RateApprovalVo();

          rateVo.setLbxProductID(CommonFunction.checkNull(data.get(0)).toString());
          rateVo.setLbxScheme(CommonFunction.checkNull(data.get(1)).toString());
          rateVo.setProduct(CommonFunction.checkNull(data.get(2)).toString());
          rateVo.setScheme(CommonFunction.checkNull(data.get(3)).toString());

          if (CommonFunction.checkNull(data.get(4)).trim().equalsIgnoreCase(""))
          {
            rateVo.setRackRate("");
          }
          else
          {
            rateVo.setRackRate(this.myFormatter.format(this.myFormatter.parse(CommonFunction.checkNull(data.get(4)))));
          }

          if (CommonFunction.checkNull(data.get(5)).trim().equalsIgnoreCase(""))
          {
            rateVo.setRackProcessingFee("");
          }
          else
          {
            rateVo.setRackProcessingFee(this.myFormatter.format(this.myFormatter.parse(CommonFunction.checkNull(data.get(5)))));
          }

          rateList.add(rateVo);
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return rateList;
  }

  public boolean saveRateApprovalChecker(Object ob) {
    RateApprovalVo vo = (RateApprovalVo)ob;

    logger.info(new StringBuilder().append("getRecStatus():-").append(vo.getRecStatus()).toString());
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();

    boolean status = false;
    String saveForwardFlag = CommonFunction.checkNull(vo.getSaveForwardFlag());

    logger.info(new StringBuilder().append("## IN saveRateApprovalChecker(): saveForwardFlag :==>> ").append(saveForwardFlag).toString());
    try
    {
      StringBuffer bufInsSql = new StringBuffer();
      logger.info("In updateCountryData..........inside ejb server file............Dao Impl");
      bufInsSql.append(" UPDATE CR_RATE_MATRIX_M SET AUTHOR_REMARKS=?, ");
      bufInsSql.append(" AUTHOR_ID=?, ");
      bufInsSql.append(" AUTHOR_DATE=");
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) ,").toString());
      bufInsSql.append(" REC_STATUS=? ");
      bufInsSql.append(" where PRODUCT_ID=? AND SCHEME_ID=?");

      if (CommonFunction.checkNull(vo.getComments()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getComments().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerId().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerDate().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getDecision()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getDecision());

      if (CommonFunction.checkNull(vo.getLbxProductID()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getLbxProductID());

      if (CommonFunction.checkNull(vo.getLbxScheme()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getLbxScheme());

      insertPrepStmtObject.setSql(bufInsSql.toString());

      updatelist.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("In getListOfValues").append(bufInsSql.toString()).toString());

      logger.info(new StringBuilder().append("## saveRateApprovalChecker : update query (cr_rate_matrix_m) ").append(insertPrepStmtObject.printQuery()).toString());

      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return status;
  }

  public ArrayList<CrSchemeMasterVo> getBranchIdsDao(String schemeId)
  {
    logger.info("In getBranchIdsDao..........................DAOImpl");
    ArrayList list = new ArrayList();
    CrSchemeMasterVo vo = null;
    ArrayList data = null;
    try
    {
      String query = new StringBuilder().append(" SELECT A.BRANCH_ID,B.BRANCH_DESC  FROM cr_scheme_branch_mapping_dtl A  JOIN com_branch_m B ON A.BRANCH_ID=B.BRANCH_ID  WHERE A.REC_STATUS='A' AND B.REC_STATUS='A' AND SCHEME_ID='").append(CommonFunction.checkNull(schemeId).trim()).append("' ").toString();

      logger.info(new StringBuilder().append("getBranchIdsDao......").append(query).toString());
      ArrayList branchList = ConnectionDAOforEJB.sqlSelect(query);
      for (int i = 0; i < branchList.size(); i++)
      {
        data = (ArrayList)branchList.get(i);
        vo = new CrSchemeMasterVo();
        vo.setBranchId(CommonFunction.checkNull(data.get(0)).toString());
        vo.setBranchDesc(CommonFunction.checkNull(data.get(1)).toString());
        list.add(vo);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      vo = null;
      data = null;
    }
    return list;
  }

  public String saveSalesExecutive(Object ob)
  {
    SalesExecutiveMasterVo vo = (SalesExecutiveMasterVo)ob;
    boolean status = false;
    String result = null;
    logger.info(new StringBuilder().append("In saveSalesExecutive.........inside ejb server file...........Dao Impl recStatus").append(vo.getRecStatus()).toString());
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    try
    {
      if ((vo.getRecStatus() != null) && (vo.getRecStatus().equals("on")))
        stat = "A";
      else {
        stat = "X";
      }

      logger.info("In insert saveBusinessMonthClosureDetails");
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("insert into com_bp_employee_m (EMPLOYEE_NAME,EMPLOYEE_TYPE,BUSSINESS_PARTNER_ID,BANK_ACCOUNT_NO,BANK_ID,BANK_BRANCH_ID,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");
      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

      if (CommonFunction.checkNull(vo.getEmployeeName()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getEmployeeName());
      }
      if (CommonFunction.checkNull(vo.getEmployeeType()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getEmployeeType());

      if (CommonFunction.checkNull(vo.getLbxBusinessPartnerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getLbxBusinessPartnerId());

      if (CommonFunction.checkNull(vo.getBankAccountNo()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getBankAccountNo());

      if (CommonFunction.checkNull(vo.getLbxBankID()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getLbxBankID());

      if (CommonFunction.checkNull(vo.getLbxBranchID()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getLbxBranchID());

      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat);
      }
      if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerId());
      }
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerDate());
      }
      if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerId());
      }
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerDate());
      }
      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN saveSalesExecutive() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
      if (status)
        result = "datasaved";
      else
        result = "datanotsaved";
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return result;
  }

  public String updateSalesExecutive(Object ob)
  {
    SalesExecutiveMasterVo vo = (SalesExecutiveMasterVo)ob;

    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();

    String result = "";
    boolean status = false;
    String stat = "";
    try
    {
      if ((vo.getRecStatus() != null) && (vo.getRecStatus().equals("on")))
        stat = "A";
      else {
        stat = "X";
      }

      StringBuffer bufInsSql = new StringBuffer();

      bufInsSql.append("UPDATE com_bp_employee_m set EMPLOYEE_NAME=?,EMPLOYEE_TYPE=?,BUSSINESS_PARTNER_ID=?,BANK_ACCOUNT_NO=?,BANK_ID=?,BANK_BRANCH_ID=?,");
      bufInsSql.append(new StringBuilder().append(" REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),AUTHOR_ID=?,AUTHOR_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND)").toString());
      bufInsSql.append(" WHERE BP_EMP_ID=?");

      if (CommonFunction.checkNull(vo.getEmployeeName()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getEmployeeName());
      }
      if (CommonFunction.checkNull(vo.getEmployeeType()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getEmployeeType());

      if (CommonFunction.checkNull(vo.getLbxBusinessPartnerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getLbxBusinessPartnerId());
      if (CommonFunction.checkNull(vo.getBankAccountNo()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getBankAccountNo());

      if (CommonFunction.checkNull(vo.getLbxBankID()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getLbxBankID());

      if (CommonFunction.checkNull(vo.getLbxBranchID()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getLbxBranchID());

      if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(stat);
      }
      if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerId());
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerDate());

      if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerId());
      }
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerDate());
      }
      if (CommonFunction.checkNull(vo.getBpEmpUniqueId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getBpEmpUniqueId());
      }

      insertPrepStmtObject.setSql(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN updateSalesExecutive() update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

      updatelist.add(insertPrepStmtObject);

      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);

      if (status)
        result = "saved";
      else
        result = "notsaved";
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return result;
  }

  public ArrayList<SalesExecutiveMasterVo> getSalesExecutiveList(Object ob)
  {
    ArrayList searchlist = new ArrayList();
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    SalesExecutiveMasterVo vo = (SalesExecutiveMasterVo)ob;
    ArrayList detailList = new ArrayList();
    SalesExecutiveMasterVo salesExecutiveMasterVo = null;
    try
    {
      logger.info("In getSalesExecutiveList...............");
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer lastRecord = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append(" SELECT BPE.BP_EMP_ID, BPE.EMPLOYEE_NAME,BPE.EMPLOYEE_TYPE,BPE.BUSSINESS_PARTNER_ID,DSA.DEALER_DESC,BPE.BANK_ACCOUNT_NO,BPE.BANK_ID,B.BANK_NAME,BPE.BANK_BRANCH_ID,BR.BANK_BRANCH_NAME,BR.BRANCH_IFCS_CODE,BR.BRANCH_MICR_CODE,if(BPE.REC_STATUS='A','Active','Inactive')AS REC_STATUS  ");
      bufInsSql.append(" FROM COM_BP_EMPLOYEE_M BPE ");
      bufInsSql.append(" INNER JOIN COM_BANK_M B ON B.BANK_ID=BPE.BANK_ID ");
      bufInsSql.append(" INNER JOIN COM_BANKBRANCH_M BR ON BR.BANK_BRANCH_ID=BPE.BANK_BRANCH_ID ");

      bufInsSql.append(" INNER JOIN CR_DSA_DEALER_M DSA ON DSA.DEALER_ID=BPE.BUSSINESS_PARTNER_ID WHERE 'a'='a' ");

      bufInsSqlTempCount.append(" SELECT COUNT(1)  ");
      bufInsSqlTempCount.append(" FROM COM_BP_EMPLOYEE_M BPE ");
      bufInsSqlTempCount.append(" INNER JOIN COM_BANK_M B ON B.BANK_ID=BPE.BANK_ID ");
      bufInsSqlTempCount.append(" INNER JOIN COM_BANKBRANCH_M BR ON BR.BANK_BRANCH_ID=BPE.BANK_BRANCH_ID ");
      bufInsSqlTempCount.append(" INNER JOIN CR_DSA_DEALER_M DSA ON DSA.DEALER_ID=BPE.BUSSINESS_PARTNER_ID WHERE 'a'='a' ");

      if (!CommonFunction.checkNull(vo.getEmployeeName()).equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" and BPE.EMPLOYEE_NAME = '").append(CommonFunction.checkNull(vo.getEmployeeName())).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" and BPE.EMPLOYEE_NAME = '").append(CommonFunction.checkNull(vo.getEmployeeName())).append("' ").toString());
      }
      if (!CommonFunction.checkNull(vo.getEmployeeType()).equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" and BPE.EMPLOYEE_TYPE = '").append(CommonFunction.checkNull(vo.getEmployeeType())).append("'  ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" and BPE.EMPLOYEE_TYPE = '").append(CommonFunction.checkNull(vo.getEmployeeType())).append("' ").toString());
      }
      if (!CommonFunction.checkNull(vo.getBankAccountNo()).equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" and BPE.BANK_ACCOUNT_NO = '").append(CommonFunction.checkNull(vo.getBankAccountNo())).append("'  ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" and BPE.BANK_ACCOUNT_NO = '").append(CommonFunction.checkNull(vo.getBankAccountNo())).append("' ").toString());
      }
      if (!CommonFunction.checkNull(vo.getLbxBusinessPartnerId()).equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" and BPE.BUSSINESS_PARTNER_ID = '").append(CommonFunction.checkNull(vo.getLbxBusinessPartnerId())).append("'  ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" and BPE.BUSSINESS_PARTNER_ID = '").append(CommonFunction.checkNull(vo.getLbxBusinessPartnerId())).append("' ").toString());
      }

      logger.info(new StringBuilder().append("IN getSalesExecutiveList() search query1 ### ").append(bufInsSql.toString()).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());

      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      logger.info(new StringBuilder().append("current PAge Link no .................... ").append(vo.getCurrentPageLink()).toString());
      if (vo.getCurrentPageLink() > 1)
      {
        startRecordIndex = (vo.getCurrentPageLink() - 1) * this.no;
        endRecordIndex = this.no;
      }

      bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      for (int i = 0; i < searchlist.size(); i++) {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0)
        {
          salesExecutiveMasterVo = new SalesExecutiveMasterVo();

          salesExecutiveMasterVo.setBpEmpUniqueId(new StringBuilder().append("<a href=salesExecutiveMasterAdd.do?method=openEditSalesExecutive&bpEmpUniqueId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          salesExecutiveMasterVo.setEmployeeName(CommonFunction.checkNull(data.get(1)).toString());
          salesExecutiveMasterVo.setEmployeeType(CommonFunction.checkNull(data.get(2)).toString());
          salesExecutiveMasterVo.setBusinessPartnerName(CommonFunction.checkNull(data.get(4)).toString());

          salesExecutiveMasterVo.setBankAccountNo(CommonFunction.checkNull(data.get(5)).toString());
          salesExecutiveMasterVo.setBank(CommonFunction.checkNull(data.get(7)).toString());
          salesExecutiveMasterVo.setBranch(CommonFunction.checkNull(data.get(9)).toString());
          salesExecutiveMasterVo.setIfscCode(CommonFunction.checkNull(data.get(10)).toString());
          salesExecutiveMasterVo.setMicrCode(CommonFunction.checkNull(data.get(11)).toString());
          salesExecutiveMasterVo.setRecStatus(CommonFunction.checkNull(data.get(12)).toString());

          salesExecutiveMasterVo.setTotalRecordSize(count);
          detailList.add(salesExecutiveMasterVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      salesExecutiveMasterVo = null;
    }

    return detailList;
  }

  public ArrayList salesExecutiveEdit(Object ob)
  {
    logger.info(" In salesExecutiveEdit ");

    ArrayList searchlist = new ArrayList();
    SalesExecutiveMasterVo vo = (SalesExecutiveMasterVo)ob;
    ArrayList ratioList = new ArrayList();
    SalesExecutiveMasterVo salesVo = null;
    try {
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append(" SELECT BPE.EMPLOYEE_NAME,BPE.EMPLOYEE_TYPE,BPE.BUSSINESS_PARTNER_ID,DSA.DEALER_DESC,BPE.BANK_ACCOUNT_NO,BPE.BANK_ID,B.BANK_NAME,BPE.BANK_BRANCH_ID,BR.BANK_BRANCH_NAME,BR.BRANCH_IFCS_CODE,BR.BRANCH_MICR_CODE,BPE.REC_STATUS,BPE.BP_EMP_ID  ");
      bufInsSql.append(" FROM COM_BP_EMPLOYEE_M BPE ");
      bufInsSql.append(" INNER JOIN COM_BANK_M B ON B.BANK_ID=BPE.BANK_ID ");
      bufInsSql.append(" INNER JOIN COM_BANKBRANCH_M BR ON BR.BANK_BRANCH_ID=BPE.BANK_BRANCH_ID ");

      bufInsSql.append(" INNER JOIN CR_DSA_DEALER_M DSA ON DSA.DEALER_ID=BPE.BUSSINESS_PARTNER_ID ");
      bufInsSql.append(new StringBuilder().append(" WHERE BP_EMP_ID='").append(CommonFunction.checkNull(vo.getBpEmpUniqueId())).append("'").toString());
      logger.info(new StringBuilder().append("salesExecutiveEdit  Query....").append(bufInsSql.toString()).toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      int size = searchlist.size();
      for (int i = 0; i < size; i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0)
        {
          salesVo = new SalesExecutiveMasterVo();

          salesVo.setEmployeeName(CommonFunction.checkNull(data.get(0)).toString());
          salesVo.setEmployeeType(CommonFunction.checkNull(data.get(1)).toString());
          salesVo.setLbxBusinessPartnerId(CommonFunction.checkNull(data.get(2)).toString());
          salesVo.setBusinessPartnerName(CommonFunction.checkNull(data.get(3)).toString());
          salesVo.setBankAccountNo(CommonFunction.checkNull(data.get(4)).toString());
          salesVo.setLbxBankID(CommonFunction.checkNull(data.get(5)).toString());
          salesVo.setBank(CommonFunction.checkNull(data.get(6)).toString());
          salesVo.setLbxBranchID(CommonFunction.checkNull(data.get(7)).toString());
          salesVo.setBranch(CommonFunction.checkNull(data.get(8)).toString());
          salesVo.setIfscCode(CommonFunction.checkNull(data.get(9)).toString());
          salesVo.setMicrCode(CommonFunction.checkNull(data.get(10)).toString());
          salesVo.setRecStatus(CommonFunction.checkNull(data.get(11)).toString());
          salesVo.setBpEmpUniqueId(CommonFunction.checkNull(data.get(12)).toString());
          ratioList.add(salesVo);
          salesVo = null;
        }

        data = null;
      }

      searchlist = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return ratioList;
  }

  public ArrayList<Object> getEmployeeTypeList()
  {
    ArrayList list = new ArrayList();
    SalesExecutiveMasterVo av = null;
    try {
      StringBuffer query = new StringBuffer();
      query.append("SELECT VALUE,DESCRIPTION FROM generic_master  where GENERIC_KEY='EMPLOYEE_TYPE' and REC_STATUS='A'");

      logger.info(new StringBuilder().append("In getEmployeeTypeList: ").append(query.toString()).toString());

      ArrayList employeeType = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      for (int i = 0; i < employeeType.size(); i++) {
        ArrayList sublist = (ArrayList)employeeType.get(i);
        if (sublist.size() > 0) {
          av = new SalesExecutiveMasterVo();
          av.setId(CommonFunction.checkNull(sublist.get(0)).trim());
          av.setName(CommonFunction.checkNull(sublist.get(1)).trim());
          list.add(av);
          av = null;
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public boolean deleteBranchData(Object ob)
  {
    boolean status = false;
    UserMasterVo userMasterVo = (UserMasterVo)ob;
    String userId = userMasterVo.getUserId();
    PrepStmtObject deletePrepStmtObject = new PrepStmtObject();
    StringBuilder bufInsSql = new StringBuilder();
    ArrayList deleteList = new ArrayList();
    try
    {
      bufInsSql.append(" DELETE FROM SEC_USER_BRANCH_DTL WHERE USER_ID=? ");

      if (CommonFunction.checkNull(userId).trim().equalsIgnoreCase(""))
        deletePrepStmtObject.addNull();
      else {
        deletePrepStmtObject.addString(CommonFunction.checkNull(userId).trim());
      }
      deletePrepStmtObject.setSql(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN deleteBranchData() delete query1 ### ").append(deletePrepStmtObject.printQuery()).toString());

      deleteList.add(deletePrepStmtObject);

      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(deleteList);

      logger.info(new StringBuilder().append("In deleteBranchData() DeleteQuery.................MasterDaoImpl::").append(status).toString());
    }
    catch (Exception e)
    {
      logger.info(new StringBuilder().append("In deleteBranchData() DeleteQuery..........Exception.......MasterDaoImpl::").append(e).toString());
    }
    finally
    {
      deleteList = null;
      deletePrepStmtObject = null;
      bufInsSql = null;
      userMasterVo = null;
      ob = null;
      userId = null;
    }
    return status;
  }

  public boolean deleteLevelData(Object ob)
  {
    boolean status = false;
    UserMasterVo userMasterVo = (UserMasterVo)ob;
    String userId = userMasterVo.getUserId();
    PrepStmtObject deletePrepStmtObject = new PrepStmtObject();
    StringBuilder bufInsSql = new StringBuilder();
    ArrayList deleteList = new ArrayList();
    try
    {
      bufInsSql.append(" DELETE FROM sec_user_level_dtl WHERE USER_ID=? ");

      if (CommonFunction.checkNull(userId).trim().equalsIgnoreCase(""))
        deletePrepStmtObject.addNull();
      else {
        deletePrepStmtObject.addString(CommonFunction.checkNull(userId).trim());
      }
      deletePrepStmtObject.setSql(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN deleteLevelData() delete query1 ### ").append(deletePrepStmtObject.printQuery()).toString());

      deleteList.add(deletePrepStmtObject);

      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(deleteList);

      logger.info(new StringBuilder().append("In deleteLevelData() DeleteQuery.................MasterDaoImpl::").append(status).toString());
    }
    catch (Exception e)
    {
      logger.info(new StringBuilder().append("In deleteLevelData() DeleteQuery..........Exception.......MasterDaoImpl::").append(e).toString());
    }
    finally
    {
      deleteList = null;
      deletePrepStmtObject = null;
      bufInsSql = null;
      userMasterVo = null;
      ob = null;
      userId = null;
    }
    return status;
  }

  public ArrayList getProductList(String questionId)
  {
    ArrayList searchlist = new ArrayList();

    ArrayList resultList = new ArrayList();
    try
    {
      logger.info(new StringBuilder().append("In getProductList().....................................Dao Impl.....").append(questionId).toString());

      StringBuilder bufInsSql = new StringBuilder();
      VerificationQuestionVo vo = null;

      bufInsSql.append(new StringBuilder().append(" select  a.product_id,b.product_desc  from cr_verification_question_product_mapping_dtl a  join cr_product_m b  on( (instr(concat('|',b.PRODUCT_ID,'|'),concat('|',a.product_id,'|'))>0))  where question_id ='").append(questionId).append("' ").toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN getProductList() search query1 ### ").append(bufInsSql.toString()).toString());
      int size = searchlist.size();
      for (int i = 0; i < size; i++) {
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          vo = new VerificationQuestionVo();
          vo.setProductId(CommonFunction.checkNull(data.get(0)));
          vo.setProductDesc(CommonFunction.checkNull(data.get(1)));

          resultList.add(vo);
          vo = null;
        }
        data = null;
      }
      bufInsSql = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      searchlist.clear();
      searchlist = null;
    }
    return resultList;
  }

  public boolean insertQuestionProduct(Object ob, String[] productId, String check)
  {
    VerificationQuestionVo vo = (VerificationQuestionVo)ob;
    logger.info(new StringBuilder().append("getVerificationQuestId()11111:-").append(vo.getVerificationQuestId()).toString());
    boolean status = false;
    ArrayList qryList = new ArrayList();
    StringBuffer bufInsSql = new StringBuffer();
    String questionID = "";
    PrepStmtObject insertPrepStmtObject = null;
    try {
      Connection con = ConnectionDAOforEJB.getConnection();
      Statement st1 = con.createStatement();
      logger.info(new StringBuilder().append("check:::").append(check).toString());
      int a;
      if (CommonFunction.checkNull(check).equalsIgnoreCase("S"))
      {
        String sqlquery1 = "select max(question_id) from cr_deal_verification_question_m ";
        questionID = ConnectionDAOforEJB.singleReturn(sqlquery1);
        logger.info(new StringBuilder().append("select MAX::::").append(sqlquery1).toString());
        String DeleteBranchQuery = new StringBuilder().append("delete from cr_verification_question_product_mapping_dtl where question_id='").append(questionID).append("'").toString();
        logger.info(new StringBuilder().append("Delete Query for New User Against Branch Id:").append(DeleteBranchQuery).toString());
        st1 = con.createStatement();
        a = st1.executeUpdate(DeleteBranchQuery);
      }
      else
      {
        String DeleteBranchQuery = new StringBuilder().append("delete from cr_verification_question_product_mapping_dtl where question_id='").append(vo.getVerificationQuestId()).append("'").toString();
        logger.info(new StringBuilder().append("Delete Query for New User Against Branch Id:").append(DeleteBranchQuery).toString());
        st1 = con.createStatement();
        a = st1.executeUpdate(DeleteBranchQuery);
      }
      try
      {
        if (vo.getProductType().equalsIgnoreCase("S"))
        {
          for (int i = 0; i < productId.length; i++)
          {
            insertPrepStmtObject = new PrepStmtObject();
            bufInsSql = new StringBuffer();
            bufInsSql.append("INSERT INTO cr_verification_question_product_mapping_dtl(question_id,product_id)");
            bufInsSql.append(" values ( ");
            bufInsSql.append(" ?,");
            bufInsSql.append(" ?)");

            if (CommonFunction.checkNull(check).equalsIgnoreCase("S"))
            {
              if (CommonFunction.checkNull(questionID).equalsIgnoreCase(""))
              {
                insertPrepStmtObject.addNull();
              }
              else insertPrepStmtObject.addString(questionID.toUpperCase().trim());

            }
            else if (CommonFunction.checkNull(vo.getVerificationQuestId()).equalsIgnoreCase(""))
            {
              insertPrepStmtObject.addNull();
            }
            else insertPrepStmtObject.addString(vo.getVerificationQuestId());

            if (CommonFunction.checkNull(productId[i]).equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else {
              insertPrepStmtObject.addString(productId[i]);
            }

            insertPrepStmtObject.setSql(bufInsSql.toString());
            logger.info(new StringBuilder().append("IN insertQuestionProduct() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

            qryList.add(insertPrepStmtObject);
            status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
            logger.info(new StringBuilder().append("status@@@@@ ### ").append(status).toString());
          }

        }
        else if (vo.getProductType().equalsIgnoreCase("A"))
        {
          ArrayList updateList = new ArrayList();
          ArrayList productID = ConnectionDAOforEJB.sqlSelect("select product_id from cr_product_m where ifnull(REC_STATUS,'A')='A'");
          if (productID.size() > 0)
          {
            for (int i = 0; i < productID.size(); i++) {
              insertPrepStmtObject = new PrepStmtObject();
              bufInsSql = new StringBuffer();
              bufInsSql.append("INSERT INTO cr_verification_question_product_mapping_dtl(question_id,product_id)");
              bufInsSql.append(" values ( ");
              bufInsSql.append(" ?,");
              bufInsSql.append(" ?)");

              if (check == "S") {
                if (CommonFunction.checkNull(questionID).equalsIgnoreCase(""))
                {
                  insertPrepStmtObject.addNull();
                }
                else insertPrepStmtObject.addString(questionID);

              }
              else if (CommonFunction.checkNull(vo.getVerificationQuestId()).equalsIgnoreCase(""))
              {
                insertPrepStmtObject.addNull();
              }
              else insertPrepStmtObject.addString(vo.getVerificationQuestId().toUpperCase().trim());

              if (CommonFunction.checkNull(((ArrayList)productID.get(i)).get(0)).equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else {
                insertPrepStmtObject.addString(((ArrayList)productID.get(i)).get(0).toString());
              }

              insertPrepStmtObject.setSql(bufInsSql.toString());
              logger.info(new StringBuilder().append("IN insertQuestionProduct in all case ### ").append(insertPrepStmtObject.printQuery()).toString());

              updateList.add(insertPrepStmtObject);
            }
            status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updateList);
            logger.info(new StringBuilder().append("In insertUserMaster......................").append(status).toString());
          }

        }
        else
        {
          status = true;
        }
      }
      catch (Exception e) {
        e.printStackTrace();
      }
      finally
      {
        st1.close();
        con.close();
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public boolean insertConsortiumPartner(Object ob)
  {
    ConsortiumPartnerVo vo = (ConsortiumPartnerVo)ob;
    boolean status = false;
    logger.info(new StringBuilder().append("In insertConsortiumPartner Master............inside ejb server file.............Dao Impl").append(vo.getConsortiumStatus()).toString());

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String query = new StringBuilder().append("select PARTNER_ID,NAME from com_partner_details_m where PARTNER_ID='").append(StringEscapeUtils.escapeSql(vo.getConsortiumPartnerId().trim())).append("' and  NAME='").append(StringEscapeUtils.escapeSql(vo.getConsortiumPartnerName().trim())).append("'").toString();

    logger.info(new StringBuilder().append("In insertConsortiumPartner.........inside ejb server file...............Dao Impl").append(query).toString());

    boolean st = ConnectionDAOforEJB.checkStatus(query);
    try
    {
      logger.info("In insert Consortium Partner master");
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("insert into com_partner_details_m(NAME,AMOUNT,RATE,REC_STATUS,MAKER_DATE,MAKER_ID)");

      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");

      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
      bufInsSql.append(" ?)");

      if (CommonFunction.checkNull(vo.getConsortiumPartnerName()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getConsortiumPartnerName().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getDefaultPercentageLoan()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getDefaultPercentageLoan().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getDefaultAgreedLoan()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getDefaultAgreedLoan().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getConsortiumPartnerStatus()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getConsortiumPartnerStatus().toUpperCase().trim());
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerDate().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getMakerId().toUpperCase().trim());

      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN insertconsortiumPartner() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

      qryList.add(insertPrepStmtObject);
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In saveconsortiumPartne.............inside ejb server file.........").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList searchConsortiumData(Object ob)
  {
    String consortiumPartnerId = "";
    String consortiumPartnerName = "";
    String defaultPercentageLoan = "";
    String defaultAgreedLoan = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    ArrayList searchlist = new ArrayList();
    ConsortiumPartnerVo consortiumPartnerVo = (ConsortiumPartnerVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In searchConsortiumData()........inside ejb server file...........Dao Impl");

      consortiumPartnerId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(consortiumPartnerVo.getConsortiumPartnerId())).trim();
      consortiumPartnerName = StringEscapeUtils.escapeSql(CommonFunction.checkNull(consortiumPartnerVo.getConsortiumPartnerName())).trim();
      defaultPercentageLoan = StringEscapeUtils.escapeSql(CommonFunction.checkNull(consortiumPartnerVo.getDefaultPercentageLoan())).trim();
      defaultAgreedLoan = StringEscapeUtils.escapeSql(CommonFunction.checkNull(consortiumPartnerVo.getDefaultAgreedLoan())).trim();
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("SELECT PARTNER_ID,NAME,AMOUNT,round(cast(RATE as decimal)), ");
      bufInsSql.append("if(REC_STATUS='A','Active','Inactive')as REC_STATUS,PARTNER_ID ");
      bufInsSql.append(" FROM com_partner_details_m where true ");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM com_partner_details_m where true ");

      if (!consortiumPartnerId.equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("and PARTNER_ID = '").append(consortiumPartnerId).append("' ").toString());

        bufInsSqlTempCount.append(new StringBuilder().append(" AND PARTNER_ID='").append(consortiumPartnerId).append("'").toString());
      }

      if (!consortiumPartnerName.equals("")) {
        bufInsSql.append(new StringBuilder().append(" and NAME LIKE '%").append(consortiumPartnerName).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" and NAME LIKE '%").append(consortiumPartnerName).append("%' ").toString());
      }

      if (!defaultPercentageLoan.equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" AND AMOUNT LIKE '%").append(defaultPercentageLoan).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND AMOUNT LIKE '%").append(defaultPercentageLoan).append("%' ").toString());
      }
      if (!defaultAgreedLoan.equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" AND RATE like '%").append(defaultAgreedLoan).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND RATE like '%").append(defaultAgreedLoan).append("%' ").toString());
      }

      logger.info(new StringBuilder().append("search Query.... ").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if ((consortiumPartnerId.trim() == null) || (consortiumPartnerId.trim().equalsIgnoreCase("")) || (consortiumPartnerVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(consortiumPartnerVo.getCurrentPageLink()).toString());
        if (consortiumPartnerVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (consortiumPartnerVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchConsortiumData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info("In searchConsortiumData.....................................Dao Impl");
      logger.info(new StringBuilder().append("searchConsortiumData ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          ConsortiumPartnerVo deptMVO = new ConsortiumPartnerVo();

          deptMVO.setConsortiumPartnerIdSearch(new StringBuilder().append("<a href=ConsortiumPartnerDispatchAction.do?method=openEditConsortiumPartner&consortiumPartnerId=").append(CommonFunction.checkNull(data.get(5)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          deptMVO.setConsortiumPartnerId(CommonFunction.checkNull(data.get(0)).toString());

          deptMVO.setConsortiumPartnerName(CommonFunction.checkNull(data.get(1)).toString());
          deptMVO.setDefaultPercentageLoan(CommonFunction.checkNull(data.get(2)).toString());
          deptMVO.setDefaultAgreedLoan(CommonFunction.checkNull(data.get(3)).toString());
          deptMVO.setConsortiumPartnerStatus(CommonFunction.checkNull(data.get(4)).toString());
          deptMVO.setTotalRecordSize(count);
          detailList.add(deptMVO);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public boolean updateConsortiumData(Object ob)
  {
    ConsortiumPartnerVo vo = (ConsortiumPartnerVo)ob;
    String consortiumId = vo.getConsortiumPartnerId();
    logger.info(new StringBuilder().append("vo.getConsortiumStatus():-").append(vo.getConsortiumStatus()).toString());
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();

    boolean status = false;
    String stat = "";
    try
    {
      StringBuffer bufInsSql = new StringBuffer();

      logger.info("In updateConsortiumData.....................................Dao Impl");

      bufInsSql.append("UPDATE com_partner_details_m set NAME=?,");
      bufInsSql.append("AMOUNT=?,RATE=?,rec_status=? where PARTNER_ID=?");

      if (CommonFunction.checkNull(vo.getConsortiumPartnerName()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getConsortiumPartnerName().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getDefaultPercentageLoan()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getDefaultPercentageLoan().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getDefaultAgreedLoan()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getDefaultAgreedLoan().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getConsortiumPartnerStatus()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getConsortiumPartnerStatus());

      if (CommonFunction.checkNull(vo.getConsortiumPartnerId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getConsortiumPartnerId().toUpperCase().trim());

      insertPrepStmtObject.setSql(bufInsSql.toString());
      updatelist.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("In getListOfValues ").append(bufInsSql.toString()).toString());
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return status;
  }

  public ArrayList searchGoldOrnamentData(Object ob)
  {
    String ornamentId = "";
    String GoldOrnamentType = "";
    String GoldOrnamentStandard = "";
    String GoldORnamentStatus = "";

    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    ArrayList searchlist = new ArrayList();
    GoldOrnamentMasterVo goldOrnamentMasterVo = (GoldOrnamentMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In searchGoldOrnamentData()...............inside ejb server file.............Dao Impl");
      ornamentId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(goldOrnamentMasterVo.getOrnamentId())).trim();
      logger.info(new StringBuilder().append("GoldOrnamentId::::::>>>").append(ornamentId).toString());
      logger.info(new StringBuilder().append("GoldOrnamentStatus::::::>>>").append(GoldORnamentStatus).toString());
      GoldOrnamentType = StringEscapeUtils.escapeSql(CommonFunction.checkNull(goldOrnamentMasterVo.getOrnamentType())).trim();
      GoldOrnamentStandard = StringEscapeUtils.escapeSql(CommonFunction.checkNull(goldOrnamentMasterVo.getOrnamentStandard())).trim();
      GoldORnamentStatus = StringEscapeUtils.escapeSql(CommonFunction.checkNull(goldOrnamentMasterVo.getGoldORnamentStatus())).trim();
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append(" select gold_ornament_id,(select DESCRIPTION from generic_master where generic_key='ornament_type' and value=gold_Ornament_value),(select DESCRIPTION from generic_master where generic_key='ornament_standard' and value=ornament_standard_value),ornament_ltv, ");

      bufInsSql.append(" if(REC_STATUS='A','Active','Inactive')as Status FROM cr_gold_ornament_m where true ");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM cr_gold_ornament_m where true ");

      if ((!ornamentId.equals("")) && (!GoldOrnamentType.equals(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE gold_ornament_id = '").append(ornamentId).append("' AND gold_Ornament_value like '%").append(GoldOrnamentType).append("%'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE gold_ornament_id = '").append(ornamentId).append("' AND gold_Ornament_value like '%").append(GoldOrnamentType).append("%'").toString());
      }
      else if (!ornamentId.equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("and gold_ornament_id = '").append(ornamentId).append("' ").toString());

        bufInsSqlTempCount.append(new StringBuilder().append(" AND gold_ornament_id='").append(ornamentId).append("'").toString());
      }
      else if (!GoldOrnamentType.equals("")) {
        bufInsSql.append(new StringBuilder().append(" and gold_Ornament_value LIKE '%").append(GoldOrnamentType).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" and gold_Ornament_value LIKE '%").append(GoldOrnamentType).append("%' ").toString());
      }
      else if (!GoldOrnamentStandard.equals("")) {
        bufInsSql.append(new StringBuilder().append(" and ornament_standard_value LIKE '%").append(GoldOrnamentStandard).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" and ornament_standard_value LIKE '%").append(GoldOrnamentStandard).append("%' ").toString());
      }

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if ((ornamentId.trim() == null) || (ornamentId.trim().equalsIgnoreCase("")) || (goldOrnamentMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(goldOrnamentMasterVo.getCurrentPageLink()).toString());
        if (goldOrnamentMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (goldOrnamentMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN goldOrnamentData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info("In goldOrnamentData...........inside ejb server file............Dao Impl");
      logger.info(new StringBuilder().append("goldOrnamentData ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          GoldOrnamentMasterVo deptMVO = new GoldOrnamentMasterVo();

          deptMVO.setOrnamentTypeModify(new StringBuilder().append("<a href=goldOrnamentMasterSearch.do?method=openEditgoldOrnament&ornamentId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          deptMVO.setOrnamentId(CommonFunction.checkNull(data.get(0)).toString());
          deptMVO.setOrnamentType(CommonFunction.checkNull(data.get(1)).toString());
          deptMVO.setOrnamentStandard(CommonFunction.checkNull(data.get(2)).toString());
          deptMVO.setGoldOrnamentLTV(CommonFunction.checkNull(data.get(3)).toString());
          deptMVO.setGoldORnamentStatus(CommonFunction.checkNull(data.get(4)).toString());
          deptMVO.setTotalRecordSize(count);
          detailList.add(deptMVO);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public String insertGoldOrnament(Object ob)
  {
    GoldOrnamentMasterVo vo = (GoldOrnamentMasterVo)ob;
    String result = "";

    boolean qryResult = false;

    logger.info(new StringBuilder().append("In insert gold ornament Master............inside ejb server file.............Dao Impl").append(vo.getGoldORnamentStatus()).toString());
    String status = "";
    if ((vo.getGoldORnamentStatus() != null) && (vo.getGoldORnamentStatus().equals("on")))
      status = "A";
    else {
      status = "X";
    }
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    try
    {
      String query = new StringBuilder().append("select gold_Ornament_value from cr_gold_ornament_m where ornament_standard_value='").append(StringEscapeUtils.escapeSql(vo.getLbxOrnamentStandard().trim())).append("' and  gold_Ornament_value='").append(StringEscapeUtils.escapeSql(vo.getLbxOrnamentType().trim())).append("'").toString();

      boolean st = ConnectionDAOforEJB.checkStatus(query);

      if (st)
      {
        result = "EX";
      }
      else {
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("insert into cr_gold_ornament_m(gold_Ornament_value,ornament_standard_value,REC_STATUS,ornament_ltv)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?)");

        if (CommonFunction.checkNull(vo.getLbxOrnamentType()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getLbxOrnamentType().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getLbxOrnamentStandard()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getLbxOrnamentStandard().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(status).equalsIgnoreCase(""))
          insertPrepStmtObject.addString("X");
        else {
          insertPrepStmtObject.addString(status.toUpperCase().trim());
        }

        if (CommonFunction.checkNull(vo.getGoldOrnamentLTV()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getGoldOrnamentLTV().toUpperCase().trim());
        }

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN gold Ornament Master() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        qryResult = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In  gold Ornament Master().............inside ejb server file.........").append(result).toString());
        if (qryResult) {
          result = "S";
        }
        else {
          result = "E";
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
      result = "E";
    }

    return result;
  }

  public boolean updateGoldOrnamentData(Object ob)
  {
    GoldOrnamentMasterVo vo = (GoldOrnamentMasterVo)ob;
    String goldOrnamentId = vo.getOrnamentId();
    logger.info(new StringBuilder().append("vo.getConsortiumStatus():-").append(vo.getRecStatus()).toString());
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList updatelist = new ArrayList();

    boolean qryResult = false;
    try
    {
      StringBuffer bufInsSql = new StringBuffer();

      logger.info("In update Gold Ornament Data.....................................Dao Impl");

      bufInsSql.append("UPDATE cr_gold_ornament_m set rec_status=?,ornament_ltv=? where gold_ornament_id=? ");

      if (CommonFunction.checkNull(vo.getGoldORnamentStatus()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addString("X");
      }
      else insertPrepStmtObject.addString(vo.getGoldORnamentStatus().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getGoldOrnamentLTV()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getGoldOrnamentLTV().toUpperCase().trim());

      if (CommonFunction.checkNull(vo.getOrnamentId()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getOrnamentId().toUpperCase().trim());

      insertPrepStmtObject.setSql(bufInsSql.toString());
      updatelist.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("In getListOfValues ").append(bufInsSql.toString()).toString());
      qryResult = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(updatelist);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return qryResult;
  }

  public ArrayList getGoldOrnamentCategory()
  {
    ArrayList list = new ArrayList();
    try {
      logger.info("In getGoldOrnamentCategory..........................DAOImpl");
      String query = "SELECT gold_Ornament_value,ornament_standard_value FROM cr_gold_ornament_m ";
      GoldOrnamentMasterVo vo = null;

      ArrayList goldOrnament = ConnectionDAOforEJB.sqlSelect(query);

      logger.info(new StringBuilder().append("get goldOrnament size").append(goldOrnament.size()).toString());

      for (int i = 0; i < goldOrnament.size(); i++)
      {
        ArrayList data = (ArrayList)goldOrnament.get(i);
        for (int k = 0; k < data.size(); k++)
        {
          vo = new GoldOrnamentMasterVo();
          vo.setOrnamentStandard(data.get(0).toString());
          vo.setOrnamentType(data.get(1).toString());
        }
        list.add(vo);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getGoldOrnamentType()
  {
    ArrayList list = new ArrayList();
    try {
      logger.info("In getGold OrnamenType..........................DAOImpl");
      String query = "SELECT VALUE,DESCRIPTION FROM generic_master where GENERIC_KEY='ORNAMENT_TYPE' and REC_STATUS='A' order by DESCRIPTION;";
      GoldOrnamentMasterVo vo = null;
      logger.info(new StringBuilder().append("category query......").append(query).toString());
      ArrayList goldOrnament = ConnectionDAOforEJB.sqlSelect(query);

      logger.info(new StringBuilder().append("get goldOrnament size").append(goldOrnament.size()).toString());

      for (int i = 0; i < goldOrnament.size(); i++) {
        logger.info(new StringBuilder().append("getgoldOrnamentType ").append(CommonFunction.checkNull(goldOrnament.get(i)).toString()).toString());

        ArrayList data = (ArrayList)goldOrnament.get(i);
        for (int k = 0; k < data.size(); k++) {
          logger.info(new StringBuilder().append("getgoldOrnamentType ").append(CommonFunction.checkNull(data.get(k)).toString()).toString());

          vo = new GoldOrnamentMasterVo();
          vo.setGoldOrnament(data.get(0).toString());
          vo.setOrnamentStandard(data.get(1).toString());
        }

        list.add(vo);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getGoldOrnamentStandard() {
    ArrayList list = new ArrayList();
    try {
      logger.info("In getGold OrnamenType..........................DAOImpl");
      String query = "SELECT VALUE,DESCRIPTION FROM generic_master where GENERIC_KEY='ORNAMENT_STANDARD' and REC_STATUS='A' order by DESCRIPTION;";
      GoldOrnamentMasterVo vo = null;
      logger.info(new StringBuilder().append("category query......").append(query).toString());
      ArrayList goldOrnament = ConnectionDAOforEJB.sqlSelect(query);

      logger.info(new StringBuilder().append("get goldOrnament size").append(goldOrnament.size()).toString());

      for (int i = 0; i < goldOrnament.size(); i++) {
        logger.info(new StringBuilder().append("getgoldOrnamentType ").append(CommonFunction.checkNull(goldOrnament.get(i)).toString()).toString());

        ArrayList data = (ArrayList)goldOrnament.get(i);
        for (int k = 0; k < data.size(); k++) {
          logger.info(new StringBuilder().append("getgoldOrnamentType ").append(CommonFunction.checkNull(data.get(k)).toString()).toString());

          vo = new GoldOrnamentMasterVo();
          vo.setGoldOrnament(data.get(0).toString());
          vo.setOrnamentStandard(data.get(1).toString());
        }
        list.add(vo);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public String insertMobileUserMaster(MobileUserMappingVo mobileUserMappingVo, String bDate)
  {
    boolean status = false;
    boolean stCheck = true;
    logger.info("In insertMobileUserMaster..........");
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    String groupId = "";
    String getUserMobile = "";
    StringBuffer query = new StringBuffer();
    StringBuffer imieQuery = new StringBuffer();
    StringBuffer bufInsSql = new StringBuffer();
    try
    {
      query.append(new StringBuilder().append("SELECT USER_ID FROM com_mobile_reciept_no_m WHERE  USER_ID='").append(StringEscapeUtils.escapeSql(mobileUserMappingVo.getUserId().trim())).append("'").toString());

      logger.info(new StringBuilder().append("In insertMobileUserMaster.....................................Dao Impl").append(query).toString());
      boolean st = ConnectionDAOforEJB.checkStatus(query.toString());
      logger.info(new StringBuilder().append("st -----").append(st).toString());
      if (st)
      {
        groupId = "EX";
      }

      if (!st)
      {
        imieQuery.append(new StringBuilder().append("SELECT IMEI_NUMBER FROM com_mobile_reciept_no_m WHERE  IMEI_NUMBER='").append(StringEscapeUtils.escapeSql(mobileUserMappingVo.getImeiNo().trim())).append("'").toString());
        imieQuery.append("AND STATUS='Y'");
        logger.info(new StringBuilder().append("In insertMobileUserMaster imieQuery.....................................Dao Impl").append(imieQuery).toString());
        stCheck = ConnectionDAOforEJB.checkStatus(imieQuery.toString());
        logger.info(new StringBuilder().append("stCheck -----").append(stCheck).toString());

        if (stCheck)
        {
          groupId = "EXIMIE";
        }
      }
      if (!stCheck) {
        if ((mobileUserMappingVo.getUserStatus() != null) && (mobileUserMappingVo.getUserStatus().equalsIgnoreCase("on")))
          stat = "Y";
        else {
          stat = "N";
        }

        logger.info("In mobile user Group  master");

        bufInsSql.append("INSERT INTO com_mobile_reciept_no_m(USER_ID,USER_NAME,MOBILE_NO,IMEI_NUMBER,EFFECTIVE_DATE,STATUS)");
        bufInsSql.append(" VALUES ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append("STR_TO_DATE('").append(bDate).append("','%d-%m-%Y'),").toString());
        bufInsSql.append(" ?");
        bufInsSql.append(" )");

        if (CommonFunction.checkNull(mobileUserMappingVo.getUserId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(mobileUserMappingVo.getUserId().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(mobileUserMappingVo.getMobileUserName()).trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(mobileUserMappingVo.getMobileUserName()).trim().toUpperCase());
        }

        if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(mobileUserMappingVo.getMobile())).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(mobileUserMappingVo.getMobile()).trim());
        }
        if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(mobileUserMappingVo.getImeiNo())).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(mobileUserMappingVo.getImeiNo()).trim());
        }
        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }
        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN insertMobileUserMaster insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In insertMobileUserMaster status.....................").append(status).toString());
        if (status)
        {
          String query1 = "select max(USER_ID) FROM com_mobile_reciept_no_m for update";
          groupId = ConnectionDAOforEJB.singleReturn(query1);
          if (!groupId.equalsIgnoreCase("")) {
            groupId = "S";
          }
          query1 = null;
        }
        else
        {
          groupId = "E";
        }
      }
    }
    catch (Exception e) {
      groupId = "E";
      e.printStackTrace();
    }

    return groupId;
  }

  public ArrayList<MobileUserMappingVo> searchMobileUserData(Object ob)
  {
    ArrayList searchlist = new ArrayList();
    String userId = "";
    String userName = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    MobileUserMappingVo mobileUserMappingVo = (MobileUserMappingVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In MobileUserMapping search  Dao...............");
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();
      userId = StringEscapeUtils.escapeSql(CommonFunction.checkNull(mobileUserMappingVo.getMobileUserId())).trim();
      userName = StringEscapeUtils.escapeSql(CommonFunction.checkNull(mobileUserMappingVo.getMobileUserNameSearch())).trim();

      bufInsSql.append(" SELECT USER_ID,USER_NAME,MOBILE_NO,IMEI_NUMBER,STATUS");
      bufInsSql.append(" FROM com_mobile_reciept_no_m ");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM com_mobile_reciept_no_m");

      if ((!userId.equals("")) && (!userName.equals(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_ID = '").append(userId).append("' AND USER_NAME  like '%").append(userName).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_ID = '").append(userId).append("' AND MOBILE_NO like '%").append(userName).append("%' ").toString());
      }
      else if (!userId.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_ID = '").append(userId).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_ID = '").append(userId).append("' ").toString());
      }
      else if (!userName.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE USER_NAME like '%").append(userName).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE USER_NAME like '%").append(userName).append("%' ").toString());
      }

      bufInsSql.append(" ORDER BY USER_ID");

      logger.info(new StringBuilder().append("IN searchGcdGroupDao() search query1 ### ").append(bufInsSql.toString()).toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((userId.trim() == null) && (userName.trim() == null)) || ((userId.trim().equalsIgnoreCase("")) && (userName.trim().equalsIgnoreCase(""))) || (mobileUserMappingVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(mobileUserMappingVo.getCurrentPageLink()).toString());
        if (mobileUserMappingVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (mobileUserMappingVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("searchMobileUserDataDao size is....").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          GcdGroupMasterVo gcdGroupMVo = new GcdGroupMasterVo();
          MobileUserMappingVo mobileUserVo = new MobileUserMappingVo();

          mobileUserVo.setIdModify(new StringBuilder().append("<a href=mobileUserMasterSearch.do?method=modifyMobileUser&userId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());
          mobileUserVo.setMobileUserId(CommonFunction.checkNull(data.get(0)).toString());
          mobileUserVo.setMobileUserNameSearch(CommonFunction.checkNull(data.get(1)).toString());
          mobileUserVo.setMobile(CommonFunction.checkNull(data.get(2)).toString());
          mobileUserVo.setImeiNo(CommonFunction.checkNull(data.get(3)).toString());
          mobileUserVo.setUserStatus(CommonFunction.checkNull(data.get(4)).toString());

          if ((mobileUserVo.getUserStatus().equalsIgnoreCase("Y")) && (mobileUserVo.getUserStatus() != null))
          {
            mobileUserVo.setUserStatus("ACTIVE");
          }
          else
          {
            mobileUserVo.setUserStatus("INACTIVE");
          }

          mobileUserVo.setTotalRecordSize(count);
          detailList.add(mobileUserVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return detailList;
  }

  public ArrayList<MobileUserMappingVo> modifyMobileUSerDetailsDao(Object ob)
  {
    MobileUserMappingVo mobileUserMappingVo = (MobileUserMappingVo)ob;
    ArrayList searchlist = new ArrayList();
    String userId = "";
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In mobileUserMapping Dao()....................");
      StringBuffer bufInsSql = new StringBuffer();
      userId = CommonFunction.checkNull(StringEscapeUtils.escapeSql(mobileUserMappingVo.getUserId()));
      bufInsSql.append(" SELECT USER_ID,USER_NAME,MOBILE_NO,IMEI_NUMBER ,STATUS ");
      bufInsSql.append(new StringBuilder().append(" FROM com_mobile_reciept_no_m WHERE USER_ID  ='").append(userId).append("' ORDER BY USER_ID ").toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("searchMobileUserDaoData size is....").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("searchMobileUserDaoList ").append(searchlist.get(i).toString()).toString());

        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          mobileUserMappingVo.setUserId(CommonFunction.checkNull(data.get(0)).toString());
          mobileUserMappingVo.setMobileUserName(CommonFunction.checkNull(data.get(1)).toString());
          mobileUserMappingVo.setMobile(CommonFunction.checkNull(data.get(2)).toString());
          mobileUserMappingVo.setImeiNo(StringEscapeUtils.escapeSql(CommonFunction.checkNull(data.get(3)).trim()).toString());
          mobileUserMappingVo.setUserStatus(CommonFunction.checkNull(data.get(4)).toString());
          detailList.add(mobileUserMappingVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return detailList;
  }

  public String saveModifyMobileMasterDao(Object ob, String s)
  {
    String stat = "Y";
    String result = "";
    String id = "";
    String bDAte = s;
    String imieNo = "";
    boolean status = false;
    boolean stCheck = false;
    boolean idCheck = false;
    MobileUserMappingVo mobileUserMappingVo = (MobileUserMappingVo)ob;
    logger.info(new StringBuilder().append("  saveModifyMobileMasterDao:-").append(mobileUserMappingVo.getUserStatus()).toString());
    ArrayList qryList = new ArrayList();
    ArrayList qryListUpdate = new ArrayList();
    StringBuilder statImiecheck = new StringBuilder();
    StringBuilder useridCheck = new StringBuilder();
    String bDate = "";
    bDate = s;
    String userId = CommonFunction.checkNull(mobileUserMappingVo.getUserId());
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    PrepStmtObject updatePrepStmtObject = new PrepStmtObject();
    try {
      String query = new StringBuilder().append("SELECT USER_ID FROM com_mobile_reciept_no_m WHERE  USER_ID='").append(StringEscapeUtils.escapeSql(mobileUserMappingVo.getUserId().trim())).append("'AND MOBILE_No<0 LIMIT 1").toString();
      logger.info(new StringBuilder().append("In saveModifyMobileMasterDao...................Dao Impl").append(query).toString());
      boolean st = ConnectionDAOforEJB.checkStatus(query);
      logger.info(new StringBuilder().append("st -----").append(st).toString());
      if (st) {
        result = "EX";
      }

      if (!st) {
        if ((mobileUserMappingVo.getUserStatus() != null) && (mobileUserMappingVo.getUserStatus().equals("on")))
          stat = "Y";
        else {
          stat = "N";
        }

        logger.info("In saveModifyMobileMasterDao........");
        StringBuffer bufInsSql = new StringBuffer();
        StringBuffer bufInsSqlUpdate = new StringBuffer();
        String imieCheck = "";
        String statusCheck = "";
        bufInsSql.append("UPDATE com_mobile_reciept_no_m SET ");
        imieCheck = new StringBuilder().append("SELECT IMEI_NUMBER  FROM com_mobile_reciept_no_m WHERE  USER_ID='").append(StringEscapeUtils.escapeSql(mobileUserMappingVo.getUserId().trim())).append("'").toString();
        statusCheck = new StringBuilder().append("SELECT STATUS  FROM com_mobile_reciept_no_m WHERE  USER_ID='").append(StringEscapeUtils.escapeSql(mobileUserMappingVo.getUserId().trim())).append("'").toString();

        logger.info(new StringBuilder().append("In insertMobileUserMaster imieCheck.....................................Dao Impl").append(imieCheck).toString());
        logger.info(new StringBuilder().append("In insertMobileUserMaster statusCheck.....................................Dao Impl").append(statusCheck).toString());
        String imieCheckResult = ConnectionDAOforEJB.singleReturn(imieCheck);
        logger.info(new StringBuilder().append("imieCheckResult -----").append(imieCheckResult).toString());
        String statusCheckResult = ConnectionDAOforEJB.singleReturn(statusCheck);
        logger.info(new StringBuilder().append("statusCheckResult -----").append(statusCheckResult).toString());

        if ((!StringEscapeUtils.escapeSql(imieCheckResult.trim()).equals(StringEscapeUtils.escapeSql(mobileUserMappingVo.getImeiNo().trim()))) || (!statusCheckResult.equals(StringEscapeUtils.escapeSql(stat))))
        {
          statImiecheck.append(new StringBuilder().append("SELECT IMEI_NUMBER FROM com_mobile_reciept_no_m WHERE  IMEI_NUMBER='").append(StringEscapeUtils.escapeSql(mobileUserMappingVo.getImeiNo().trim())).append("'").toString());
          statImiecheck.append("AND STATUS='Y'");

          imieNo = ConnectionDAOforEJB.singleReturn(statImiecheck.toString());
          logger.info(new StringBuilder().append("In insertMobileUserMaster imieNo.....................................Dao Impl").append(imieNo).toString());
          logger.info(new StringBuilder().append("In insertMobileUserMaster statImiecheckQuery.....................................Dao Impl").append(statImiecheck).toString());
          stCheck = ConnectionDAOforEJB.checkStatus(statImiecheck.toString());
          logger.info(new StringBuilder().append("stCheck -----").append(stCheck).toString());

          if (stCheck)
          {
            useridCheck.append(new StringBuilder().append("SELECT USER_ID  FROM com_mobile_reciept_no_m WHERE  IMEI_NUMBER='").append(imieNo).append("'AND STATUS='Y'").toString());
            logger.info(new StringBuilder().append("In insertMobileUserMaster useridCheckQuery.....................................Dao Impl").append(useridCheck).toString());
            id = ConnectionDAOforEJB.singleReturn(useridCheck.toString());
            logger.info(new StringBuilder().append("ID-----").append(id).toString());

            if ((id.equals(mobileUserMappingVo.getUserId())) && (CommonFunction.checkNull(id) != null)) {
              bufInsSql.append("STATUS =?,");

              if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else {
                insertPrepStmtObject.addString(stat);
              }
            }
            else
            {
              result = "EXSTAT";
            }

          }

          if (!stCheck)
          {
            bufInsSqlUpdate.append("INSERT INTO com_mobile_reciept_no_m_rpt SELECT * FROM com_mobile_reciept_no_m WHERE USER_ID=?");

            if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(mobileUserMappingVo.getUserId()).trim()).equalsIgnoreCase(""))
              updatePrepStmtObject.addNull();
            else
              updatePrepStmtObject.addString(StringEscapeUtils.escapeSql(mobileUserMappingVo.getUserId()).trim().toString());
            updatePrepStmtObject.setSql(bufInsSqlUpdate.toString());
            logger.info(new StringBuilder().append("In saveModifyMobileMasterDao bufInsSqlUpdate query is.................").append(bufInsSqlUpdate.toString()).toString());
            qryListUpdate.add(updatePrepStmtObject);
            status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryListUpdate);
            logger.info(new StringBuilder().append("In saveModifyMobileMasterDao qryListUpdate status is.................").append(status).toString());
            qryListUpdate.clear();

            bufInsSql.append("IMEI_NUMBER =?,");
            if (CommonFunction.checkNull(mobileUserMappingVo.getImeiNo()).equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else {
              insertPrepStmtObject.addString(CommonFunction.checkNull(mobileUserMappingVo.getImeiNo().trim()));
            }
            bufInsSql.append("STATUS =?,");

            if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else
              insertPrepStmtObject.addString(stat);
          }
        }
        bufInsSql.append("MOBILE_NO =?,");
        bufInsSql.append("EFFECTIVE_DATE=");
        bufInsSql.append(new StringBuilder().append("STR_TO_DATE('").append(bDate).append("','%d-%m-%Y')").toString());
        bufInsSql.append(" WHERE USER_ID=? ");

        if (CommonFunction.checkNull(this.myFormatter.parse(StringEscapeUtils.escapeSql(mobileUserMappingVo.getMobile()))).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(mobileUserMappingVo.getMobile()));
        }
        if (CommonFunction.checkNull(StringEscapeUtils.escapeSql(mobileUserMappingVo.getUserId())).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(mobileUserMappingVo.getUserId()));
        }
        insertPrepStmtObject.setSql(bufInsSql.toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveModifyMobileMasterDao status is.................").append(status).toString());

        if (result.equalsIgnoreCase("EXSTAT")) {
          result = "EXSTAT";
        }
        else if (status) {
          result = "S";
        }
        else {
          result = "E";
        }
        bufInsSql = null;
        bufInsSqlUpdate = null;
        insertPrepStmtObject = null;
        updatePrepStmtObject = null;
      }
    } catch (Exception e) {
      result = "E";
      e.printStackTrace();
    }

    return result;
  }

  public String getMobileNoMasterDao(Object ob)
  {
    String mobileNo = "";
    String getMobileNo = "";

    MobileUserMappingVo mobileUserMappingVo = (MobileUserMappingVo)ob;
    try {
      logger.info("In getMobileNoMasterDao........");
      getMobileNo = new StringBuilder().append("SELECT USER_PHONE1  FROM sec_user_m WHERE  USER_ID='").append(StringEscapeUtils.escapeSql(mobileUserMappingVo.getUserId())).append("'").toString();
      String mobileNoCheckResult = ConnectionDAOforEJB.singleReturn(getMobileNo);
      logger.info(new StringBuilder().append("mobileNoCheckResult.......").append(mobileNoCheckResult).toString());
      if ((!CommonFunction.checkNull(StringEscapeUtils.escapeSql(mobileNoCheckResult)).equalsIgnoreCase("")) && (CommonFunction.checkNull(StringEscapeUtils.escapeSql(mobileNoCheckResult)) != null))
      {
        mobileNo = mobileNoCheckResult;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return mobileNo;
  }

  public String insertIrrMaster(IrrCalculationMasterVo irrCalculationMasterVo)
  {
    logger.info("IN insertIrrMaster() of MasterDAOImpl.");
    boolean status = false;
    boolean status1 = false;
    ArrayList qryList = new ArrayList();
    ArrayList qryList1 = new ArrayList();
    PrepStmtObject insertPrepStmtObject = null;
    PrepStmtObject insertPrepStmtObject1 = null;
    StringBuilder query = new StringBuilder();
    StringBuffer bufInsSql = new StringBuffer();
    StringBuffer bufInsSql1 = new StringBuffer();
    String result = "ER";
    String irrId = "0";
    String count = "0";
    try
    {
      logger.info(new StringBuilder().append("IN saveAccountDtl...DAOIMPl..status.....").append(status).toString());
      query.append(new StringBuilder().append("select count(1) from cr_irr_m where product='").append(CommonFunction.checkNull(irrCalculationMasterVo.getLbxProductID()).trim()).append("' ").append(" and scheme='").append(CommonFunction.checkNull(irrCalculationMasterVo.getLbxscheme()).trim()).append("' ").append(" and irr_type='").append(CommonFunction.checkNull(irrCalculationMasterVo.getLbxIrrType()).trim()).append("' ").toString());

      logger.info(new StringBuilder().append("IN insertIrrMaster() of MasterDAOImpl. Duplicacy check Query  : ").append(query.toString()).toString());
      String value = ConnectionDAOforEJB.singleReturn(query.toString());
      if (CommonFunction.checkNull(value).trim().equalsIgnoreCase(""))
        value = "0";
      if (!value.equalsIgnoreCase("0"))
      {
        return "EX";
      }

      insertPrepStmtObject = new PrepStmtObject();
      bufInsSql.append("INSERT INTO cr_irr_m (product,scheme,irr_type, maker_id,makerdate,charge_code,REC_STATUS)");
      bufInsSql.append(" values (");
      bufInsSql.append("?,");
      bufInsSql.append("?,");
      bufInsSql.append("?,");
      bufInsSql.append("?,");
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
      bufInsSql.append("?,");
      bufInsSql.append("?");
      bufInsSql.append(")");

      if (CommonFunction.checkNull(irrCalculationMasterVo.getLbxProductID()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(irrCalculationMasterVo.getLbxProductID().trim());
      }
      if (CommonFunction.checkNull(irrCalculationMasterVo.getLbxscheme()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(irrCalculationMasterVo.getLbxscheme().trim());
      }
      if (CommonFunction.checkNull(irrCalculationMasterVo.getLbxIrrType()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(irrCalculationMasterVo.getLbxIrrType().trim());
      }
      if (CommonFunction.checkNull(irrCalculationMasterVo.getMakerId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(irrCalculationMasterVo.getMakerId().trim());
      }
      if (CommonFunction.checkNull(irrCalculationMasterVo.getMakerDate()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(irrCalculationMasterVo.getMakerDate().trim());
      }
      if (CommonFunction.checkNull(irrCalculationMasterVo.getLbxIrrChargeCode()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(irrCalculationMasterVo.getLbxIrrChargeCode().trim());
      insertPrepStmtObject.addString("A");

      insertPrepStmtObject.setSql(bufInsSql.toString());
      qryList.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("IN insertIrrMaster() insert query : ").append(insertPrepStmtObject.printQuery()).toString());
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
      if (status)
      {
        String irrQry = "select max(irr_id) from cr_irr_m";
        irrId = ConnectionDAOforEJB.singleReturn(irrQry.toString());
        String chargeCode = CommonFunction.checkNull(irrCalculationMasterVo.getLbxIrrChargeCode());
        String[] chargeCodeArr = chargeCode.split("\\|");
        bufInsSql1.append("INSERT INTO cr_irr_charge_mapping (irr_id,charge_Code,REC_STATUS, maker_id,makerdate)");
        bufInsSql1.append(" values (");
        bufInsSql1.append("?,");
        bufInsSql1.append("?,");
        bufInsSql1.append("?,");
        bufInsSql1.append("?,");
        bufInsSql1.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND)").toString());
        bufInsSql1.append(")");
        for (int i = 0; i < chargeCodeArr.length; i++)
        {
          insertPrepStmtObject1 = new PrepStmtObject();
          insertPrepStmtObject1.addString(irrId);
          insertPrepStmtObject1.addString(chargeCodeArr[i]);
          insertPrepStmtObject1.addString("A");
          if (CommonFunction.checkNull(irrCalculationMasterVo.getMakerId()).equalsIgnoreCase(""))
            insertPrepStmtObject1.addNull();
          else {
            insertPrepStmtObject1.addString(irrCalculationMasterVo.getMakerId().trim());
          }
          if (CommonFunction.checkNull(irrCalculationMasterVo.getMakerDate()).equalsIgnoreCase(""))
            insertPrepStmtObject1.addNull();
          else
            insertPrepStmtObject1.addString(irrCalculationMasterVo.getMakerDate().trim());
          logger.info(new StringBuilder().append("IN insertIrrMaster() mapping insert query : ").append(insertPrepStmtObject1.printQuery()).toString());
          insertPrepStmtObject1.setSql(bufInsSql1.toString());
          qryList1.add(insertPrepStmtObject1);
        }
        status1 = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList1);
        if (status1) {
          result = "S";
        }
      }
    }
    catch (Exception e)
    {
      result = "ER";
      e.printStackTrace();
    }
    return result;
  }

  public ArrayList<IrrCalculationMasterVo> searchIrrCalData(Object ob)
  {
    logger.info("in searchIrrCalData() of MasterDAOImpl .");
    ArrayList searchlist = new ArrayList();
    IrrCalculationMasterVo vo = (IrrCalculationMasterVo)ob;
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    ArrayList subList = new ArrayList();
    StringBuffer bufInsSql = new StringBuffer();
    StringBuffer bufInsSqlTempCount = new StringBuffer();
    ArrayList data = null;
    IrrCalculationMasterVo vo1 = null;
    try
    {
      bufInsSql.append(" SELECT b.PRODUCT_DESC,c.SCHEME_DESC, ");
      bufInsSql.append(" (select DESCRIPTION from generic_master where VALUE=irr_type and GENERIC_KEY='IRR_TYPE')irr_type_desc,charge_code,irr_id ");
      bufInsSql.append(" FROM cr_irr_m a ");
      bufInsSql.append(" left join cr_product_m b on(a.product=b.PRODUCT_ID) ");
      bufInsSql.append(" left join cr_scheme_m c on(a.scheme=c.SCHEME_ID) where 1=1  ");

      bufInsSqlTempCount.append(" SELECT count(1) ");
      bufInsSqlTempCount.append(" FROM cr_irr_m a ");
      bufInsSqlTempCount.append(" left join cr_product_m b on(a.product=b.PRODUCT_ID) ");
      bufInsSqlTempCount.append(" left join cr_scheme_m c on(a.scheme=c.SCHEME_ID) where 1=1 ");

      if (!CommonFunction.checkNull(vo.getLbxProductID()).trim().equalsIgnoreCase(""))
      {
        bufInsSql.append(new StringBuilder().append(" and product='").append(CommonFunction.checkNull(vo.getLbxProductID()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" and product='").append(CommonFunction.checkNull(vo.getLbxProductID()).trim()).append("' ").toString());
      }
      if (!CommonFunction.checkNull(vo.getLbxscheme()).trim().equalsIgnoreCase(""))
      {
        bufInsSql.append(new StringBuilder().append(" and scheme='").append(CommonFunction.checkNull(vo.getLbxscheme()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" and scheme='").append(CommonFunction.checkNull(vo.getLbxscheme()).trim()).append("' ").toString());
      }
      if (!CommonFunction.checkNull(vo.getLbxIrrType()).trim().equalsIgnoreCase(""))
      {
        bufInsSql.append(new StringBuilder().append(" and irr_type='").append(CommonFunction.checkNull(vo.getLbxIrrType()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" and irr_type='").append(CommonFunction.checkNull(vo.getLbxIrrType()).trim()).append("' ").toString());
      }
      logger.info(new StringBuilder().append("IN searchIrrCalData() count query    :   ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));
      if (vo.getCurrentPageLink().intValue() > 1)
      {
        startRecordIndex = (vo.getCurrentPageLink().intValue() - 1) * this.no;
        endRecordIndex = this.no;
      }
      bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      logger.info(new StringBuilder().append("IN searchIrrCalData() Search query    :   ").append(bufInsSql.toString()).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      for (int j = 0; j < searchlist.size(); j++)
      {
        vo1 = new IrrCalculationMasterVo();
        data = (ArrayList)searchlist.get(j);
        if (data.size() > 0)
        {
          vo1.setProduct((String)data.get(0));
          vo1.setScheme((String)data.get(1));
          vo1.setIrrType((String)data.get(2));
          vo1.setIrrChargeCode((String)data.get(3));
          vo1.setIrrChargeCodeModify(new StringBuilder().append("<a href=irrCalculation.do?method=modifyDetails&irrID=").append(CommonFunction.checkNull(data.get(4)).toString()).append(">").append(CommonFunction.checkNull(data.get(4)).toString()).append("</a>").toString());
          vo1.setTotalRecordSize(Integer.valueOf(count));
          subList.add(vo1);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }return subList;
  }

  public ArrayList irrModifyChargeCodeDetailsDao(Object ob)
  {
    logger.info("In irrModifyChargeCodeDetailsDao()");
    ArrayList searchlist = new ArrayList();
    IrrCalculationMasterVo vo = (IrrCalculationMasterVo)ob;
    ArrayList detailList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String irrID = "";
    IrrCalculationMasterVo vo1 = null;
    try
    {
      StringBuffer bufInsSql = new StringBuffer();
      irrID = CommonFunction.checkNull(vo.getIrrID());
      bufInsSql.append(" SELECT a.irr_id,product,scheme,irr_type,charge_code,b.PRODUCT_DESC,c.SCHEME_DESC, ");
      bufInsSql.append(" (select DESCRIPTION from generic_master where VALUE=irr_type and GENERIC_KEY='IRR_TYPE')irr_type_desc ");
      bufInsSql.append(" FROM cr_irr_m a ");
      bufInsSql.append(" left join cr_product_m b on(a.product=b.PRODUCT_ID)  ");
      bufInsSql.append(" left join cr_scheme_m c on(a.scheme=c.SCHEME_ID)");
      bufInsSql.append(new StringBuilder().append(" WHERE a.irr_id='").append(irrID).append("' ORDER BY irr_id ").toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("searchBankBranchDaoData size is....").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);
        vo1 = new IrrCalculationMasterVo();
        if (data.size() > 0)
        {
          vo1.setIrrID(CommonFunction.checkNull(data.get(0)).toString());
          vo1.setLbxProductID(CommonFunction.checkNull(data.get(1)).toString());
          vo1.setLbxscheme(CommonFunction.checkNull(data.get(2)).toString());
          vo1.setLbxIrrType(CommonFunction.checkNull(data.get(3)).toString());
          vo1.setLbxIrrChargeCode(CommonFunction.checkNull(data.get(4)).toString());
          vo1.setProduct(CommonFunction.checkNull(data.get(5)).toString());
          vo1.setScheme(CommonFunction.checkNull(data.get(6)).toString());
          vo1.setIrrType(CommonFunction.checkNull(data.get(7)).toString());
          detailList.add(vo1);
        }
      }
      bufInsSql = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      searchlist.clear();
      searchlist = null;
      irrID = null;
    }
    return detailList;
  }

  public ArrayList getIrrChargeDetail(Object ob)
  {
    logger.info("In getIrrChargeDetail()");
    ArrayList searchlist = new ArrayList();
    IrrCalculationMasterVo vo = (IrrCalculationMasterVo)ob;
    ArrayList detailList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String irrID = "";
    IrrCalculationMasterVo vo1 = null;
    try
    {
      StringBuffer bufInsSql = new StringBuffer();
      irrID = CommonFunction.checkNull(vo.getIrrID());
      bufInsSql.append(" select  b.CHARGE_CODE,b.CHARGE_DESC ");
      bufInsSql.append(" from cr_irr_charge_mapping  a ");
      bufInsSql.append(" join com_charge_code_m b on(a.charge_Code=b.CHARGE_CODE and a.REC_STATUS='A') ");
      bufInsSql.append(new StringBuilder().append(" where a.irr_id='").append(irrID).append("' ").toString());

      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("searchBankBranchDaoData size is....").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++)
      {
        vo1 = new IrrCalculationMasterVo();
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0)
        {
          vo1.setChargeCode(CommonFunction.checkNull(data.get(0)).toString());
          vo1.setChargeDesc(CommonFunction.checkNull(data.get(1)).toString());
          detailList.add(vo1);
        }
      }
      bufInsSql = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      searchlist.clear();
      searchlist = null;
      irrID = null;
    }
    return detailList;
  }

  public String updateIrrMaster(IrrCalculationMasterVo irrCalculationMasterVo)
  {
    logger.info("IN insertIrrMaster() of MasterDAOImpl.");
    boolean status = false;
    boolean status1 = false;
    ArrayList qryList = new ArrayList();
    ArrayList qryList1 = new ArrayList();
    PrepStmtObject insertPrepStmtObject = null;
    PrepStmtObject insertPrepStmtObject1 = null;
    StringBuilder query = new StringBuilder();
    StringBuffer bufInsSql = new StringBuffer();
    StringBuffer bufInsSql1 = new StringBuffer();
    String result = "ER";
    String irrId = "0";
    String count = "0";
    try
    {
      irrId = CommonFunction.checkNull(irrCalculationMasterVo.getIrrID()).trim();
      if (CommonFunction.checkNull(irrId).trim().equalsIgnoreCase(""))
        irrId = "0";
      logger.info(new StringBuilder().append("IN saveAccountDtl...DAOIMPl..status.....").append(status).toString());
      query.append(new StringBuilder().append("select count(1) from cr_irr_m where product='").append(CommonFunction.checkNull(irrCalculationMasterVo.getLbxProductID()).trim()).append("' ").append(" and scheme='").append(CommonFunction.checkNull(irrCalculationMasterVo.getLbxscheme()).trim()).append("' ").append(" and irr_id!='").append(irrId).append("' ").append(" and irr_type='").append(CommonFunction.checkNull(irrCalculationMasterVo.getLbxIrrType()).trim()).append("' ").toString());

      logger.info(new StringBuilder().append("IN insertIrrMaster() of MasterDAOImpl. Duplicacy check Query  : ").append(query.toString()).toString());
      String value = ConnectionDAOforEJB.singleReturn(query.toString());
      if (CommonFunction.checkNull(value).trim().equalsIgnoreCase(""))
        value = "0";
      if (!value.equalsIgnoreCase("0"))
      {
        return "EX";
      }

      insertPrepStmtObject = new PrepStmtObject();
      bufInsSql.append(new StringBuilder().append("update cr_irr_m set maker_id=?,makerdate=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),charge_code=? where irr_id=? ").toString());

      if (CommonFunction.checkNull(irrCalculationMasterVo.getMakerId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(irrCalculationMasterVo.getMakerId().trim());
      }
      if (CommonFunction.checkNull(irrCalculationMasterVo.getMakerDate()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(irrCalculationMasterVo.getMakerDate().trim());
      }
      if (CommonFunction.checkNull(irrCalculationMasterVo.getLbxIrrChargeCode()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(irrCalculationMasterVo.getLbxIrrChargeCode().trim());
      }
      insertPrepStmtObject.addString(irrId);

      insertPrepStmtObject.setSql(bufInsSql.toString());
      qryList.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("IN insertIrrMaster() update main query : ").append(insertPrepStmtObject.printQuery()).toString());

      insertPrepStmtObject = new PrepStmtObject();
      bufInsSql = null;
      bufInsSql = new StringBuffer();

      bufInsSql.append(new StringBuilder().append(" update cr_irr_charge_mapping set REC_STATUS='X' where irr_id='").append(CommonFunction.checkNull(irrId).trim()).append("' ").toString());
      insertPrepStmtObject.setSql(bufInsSql.toString());
      qryList.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("IN insertIrrMaster() mapping query : ").append(insertPrepStmtObject.printQuery()).toString());

      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
      if (status)
      {
        String chargeCode = CommonFunction.checkNull(irrCalculationMasterVo.getLbxIrrChargeCode());
        String[] chargeCodeArr = chargeCode.split("\\|");
        bufInsSql1.append("INSERT INTO cr_irr_charge_mapping (irr_id,charge_Code,REC_STATUS, maker_id,makerdate)");
        bufInsSql1.append(" values (");
        bufInsSql1.append("?,");
        bufInsSql1.append("?,");
        bufInsSql1.append("?,");
        bufInsSql1.append("?,");
        bufInsSql1.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND)").toString());
        bufInsSql1.append(")");
        for (int i = 0; i < chargeCodeArr.length; i++)
        {
          insertPrepStmtObject1 = new PrepStmtObject();
          insertPrepStmtObject1.addString(irrId);
          insertPrepStmtObject1.addString(chargeCodeArr[i]);
          insertPrepStmtObject1.addString("A");
          if (CommonFunction.checkNull(irrCalculationMasterVo.getMakerId()).equalsIgnoreCase(""))
            insertPrepStmtObject1.addNull();
          else {
            insertPrepStmtObject1.addString(irrCalculationMasterVo.getMakerId().trim());
          }
          if (CommonFunction.checkNull(irrCalculationMasterVo.getMakerDate()).equalsIgnoreCase(""))
            insertPrepStmtObject1.addNull();
          else
            insertPrepStmtObject1.addString(irrCalculationMasterVo.getMakerDate().trim());
          logger.info(new StringBuilder().append("IN insertIrrMaster() mapping insert query : ").append(insertPrepStmtObject1.printQuery()).toString());
          insertPrepStmtObject1.setSql(bufInsSql1.toString());
          qryList1.add(insertPrepStmtObject1);
        }
        status1 = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList1);
        if (status1) {
          result = "S";
        }
      }
    }
    catch (Exception e)
    {
      result = "ER";
      e.printStackTrace();
    }
    return result;
  }

  public boolean insertUsedVehiclePricing(UsedVehiclePricingVo usedVehiclePricingVo)
  {
    boolean status = false;
    boolean status1 = false;

    logger.info("In insert Make of used vehicle pricing");
    logger.info(new StringBuilder().append("In insertUsedVehiclePricing..........").append(usedVehiclePricingVo.getMakerId()).toString());
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = null;
    String stat = "X";
    String result = null;

    String[] usedVehicleYearArr = usedVehiclePricingVo.getUsedVehicleYearArr();
    String[] usedVehiclePriceArr = usedVehiclePricingVo.getUsedVehiclePriceArr();
    String usedState = usedVehiclePricingVo.getUsedState();
    String usedBranch = usedVehiclePricingVo.getUsedBranch();
    String makeModelId = usedVehiclePricingVo.getMakeModelId();
    String makerId = usedVehiclePricingVo.getMakerId();
    String makerDate = usedVehiclePricingVo.getMakerDate();
    String authorId = usedVehiclePricingVo.getAuthorId();
    String authorDate = usedVehiclePricingVo.getAuthorDate();

    logger.info(new StringBuilder().append("usedVehicleYearArr : ").append(usedVehicleYearArr[0]).append(" / ").append(usedVehicleYearArr[1]).toString());
    logger.info(new StringBuilder().append("usedVehiclePriceArr : ").append(usedVehiclePriceArr[0]).append(" / ").append(usedVehiclePriceArr[1]).toString());
    logger.info(new StringBuilder().append("usedState : ").append(usedState).append(" / ").append(usedState).toString());
    logger.info(new StringBuilder().append("makeModelId : ").append(makeModelId).append(" / ").append(makeModelId).toString());
    logger.info("OK.......");
    logger.info(new StringBuilder().append("makerId.......").append(makerId).toString());
    logger.info(new StringBuilder().append("makerDate.......").append(makerDate).toString());
    try {
      for (int j = 0; j < usedVehicleYearArr.length; j++)
      {
        String sqlquery1 = new StringBuilder().append("select MAKE_MODEL_ID from com_used_vehicle_pricing_m where MAKE_MODEL_ID='").append(StringEscapeUtils.escapeSql(makeModelId.trim())).append("'AND MANUFACTURING_YEAR='").append(StringEscapeUtils.escapeSql(usedVehicleYearArr[j])).append("'AND (STATE_ID='").append(StringEscapeUtils.escapeSql(usedState.trim())).append("' AND BRANCH_ID='").append(StringEscapeUtils.escapeSql(usedBranch.trim())).append("') ").toString();
        logger.info(new StringBuilder().append("qry for used vehicle is  :: ").append(sqlquery1).toString());
        status1 = ConnectionDAO.checkStatus(sqlquery1);
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    if (status1 == true) {
      status1 = false;
      return status1;
    }

    try
    {
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql = new StringBuffer();
      insertPrepStmtObject = new PrepStmtObject();
      String sqlquery1 = "select value from generate_sequence_tbl where seq_key='REFINANCE_ID' ";
      logger.info(new StringBuilder().append("qry for used vehicle is  :: ").append(sqlquery1).toString());
      String seq_id = ConnectionDAO.singleReturn(sqlquery1);

      bufInsSql.append("update generate_sequence_tbl set value=value+1  where seq_key='REFINANCE_ID'");
      insertPrepStmtObject.setSql(bufInsSql.toString());
      qryList.add(insertPrepStmtObject);
      for (int i = 0; i < usedVehiclePriceArr.length; i++)
      {
        insertPrepStmtObject = new PrepStmtObject();
        bufInsSql = new StringBuffer();
        bufInsSql.append("INSERT INTO com_used_vehicle_pricing_m(Refinance_id,MAKE_MODEL,USES_TYPE,MANUFACTURING_YEAR,GRID_VALUE,STATE_ID,BRANCH_ID,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,MAKE_MODEL_ID)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        bufInsSql.append(" ?)");

        if (CommonFunction.checkNull(seq_id).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(seq_id);
        }
        if (CommonFunction.checkNull(usedVehiclePricingVo.getUsedVehicleMakeSearch()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(usedVehiclePricingVo.getUsedVehicleMakeSearch().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(usedVehiclePricingVo.getUsedVehicleModelSearch()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(usedVehiclePricingVo.getUsedVehicleModelSearch().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(usedVehicleYearArr[i]).equalsIgnoreCase(""))
          insertPrepStmtObject.addInt(0L);
        else {
          insertPrepStmtObject.addString(usedVehicleYearArr[i]);
        }
        if (CommonFunction.checkNull(usedVehiclePriceArr[i]).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(usedVehiclePriceArr[i]);
        }
        if (CommonFunction.checkNull(usedState).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(usedState);
        }
        if (CommonFunction.checkNull(usedBranch).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(usedBranch);
        }
        if (CommonFunction.checkNull(makerId).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(makerId);
        if (CommonFunction.checkNull(makerDate).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(makerDate);
        if (CommonFunction.checkNull(authorId).equalsIgnoreCase("")) {
          insertPrepStmtObject.addNull();
        }
        else
          insertPrepStmtObject.addString(authorId);
        if (CommonFunction.checkNull(authorDate).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(authorDate);
        }
        if (CommonFunction.checkNull(makeModelId).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(makeModelId);
        }
        insertPrepStmtObject.setSql(bufInsSql.toString());
        qryList.add(insertPrepStmtObject);

        logger.info(new StringBuilder().append("IN insertUsedVehiclePricing() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In my  saveUsedVehiclePricingAdd......................").append(status).toString());
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      qryList = null;
      insertPrepStmtObject = null;
      usedVehicleYearArr = null;
      usedVehiclePriceArr = null;
      usedState = null;
      usedBranch = null;
      usedVehiclePricingVo = null;
    }

    return status;
  }
  public ArrayList getUsedVehiclePricingData(Object ob) {
    ArrayList searchlist = new ArrayList();
    UsedVehiclePricingVo usedVehiclePricingVo = (UsedVehiclePricingVo)ob;
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    String makeModelId = usedVehiclePricingVo.getMakeModelId();
    String usedVehicleMakeSearch = usedVehiclePricingVo.getUsedVehicleMakeSearch();
    String usedVehicleModelSearch = usedVehiclePricingVo.getUsedVehicleModelSearch();
    String usedVehicleState = usedVehiclePricingVo.getUsedVehicleState();
    String usedVehicleBranch = usedVehiclePricingVo.getUsedVehicleBranch();

    ArrayList detailList = new ArrayList();
    try {
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("select distinct u.make_model_id,u.refinance_id,u.MAKE_MODEL,u.USES_TYPE,s.STATE_DESC,b.BRANCH_DESC from com_used_vehicle_pricing_m u left join com_state_m s on s.STATE_ID =u.STATE_ID  left join com_branch_m b on b.BRANCH_ID=u.BRANCH_ID where 'a'='a' ");

      bufInsSqlTempCount.append("SELECT COUNT(DISTINCT make_model_id) FROM com_used_vehicle_pricing_m where 'a'='a'");

      if (!makeModelId.equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" AND make_model_id LIKE '%").append(makeModelId).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND make_model_id LIKE '%").append(makeModelId).append("%' ").toString());
      }
      if (!usedVehicleMakeSearch.equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" AND MAKE_MODEL like '%").append(usedVehicleMakeSearch).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND MAKE_MODEL like '%").append(usedVehicleMakeSearch).append("%' ").toString());
      }
      if (!usedVehicleModelSearch.equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" AND USES_TYPE like '%").append(usedVehicleModelSearch).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND USES_TYPE like '%").append(usedVehicleModelSearch).append("%' ").toString());
      }
      if (!usedVehicleState.equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" AND STATE_DESC like '%").append(usedVehicleState).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND STATE_ID like '%").append(usedVehicleState).append("%' ").toString());
      }
      if (!usedVehicleBranch.equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" AND BRANCH_DESC like '%").append(usedVehicleBranch).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND BRANCH_ID like '%").append(usedVehicleBranch).append("%' ").toString());
      }

      logger.info(new StringBuilder().append("IN searchVehiclepricing() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (usedVehiclePricingVo.getCurrentPageLink() > 1)
      {
        startRecordIndex = (usedVehiclePricingVo.getCurrentPageLink() - 1) * this.no;
        endRecordIndex = this.no;
        logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
        logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
      }

      bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      logger.info(new StringBuilder().append("query for usedVehiclePricing: ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      for (int j = 0; j < searchlist.size(); j++) {
        ArrayList data = (ArrayList)searchlist.get(j);

        if (data.size() > 0) {
          UsedVehiclePricingVo vehicleVo = new UsedVehiclePricingVo();

          vehicleVo.setMakeModelId(new StringBuilder().append("<a href=usedVehiclePricingAdd.do?method=selectUsedVehiclePricing&makeModelId=").append(CommonFunction.checkNull(data.get(1)).trim()).append(" >").append(CommonFunction.checkNull(data.get(0)).trim()).append("</a>").toString());
          vehicleVo.setRefinanceId(CommonFunction.checkNull(data.get(1)).toString());
          vehicleVo.setUsedVehicleMakeSearch(CommonFunction.checkNull(data.get(2)).toString());
          vehicleVo.setUsedVehicleModelSearch(CommonFunction.checkNull(data.get(3)).toString());
          vehicleVo.setUsedVehicleState(CommonFunction.checkNull(data.get(4)).toString());
          vehicleVo.setUsedVehicleBranch(CommonFunction.checkNull(data.get(5)).toString());
          vehicleVo.setTotalRecordSize(count);
          detailList.add(vehicleVo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return detailList;
  }

  public boolean updateVehiclePricingdata(Object ob)
  {
    UsedVehiclePricingVo usedVehiclePricingVo = (UsedVehiclePricingVo)ob;
    boolean status = false;
    logger.info("In insert Make of used vehicle pricing");
    logger.info(new StringBuilder().append("In insertUsedVehiclePricing..........").append(usedVehiclePricingVo.getUsedVehicleMakeSearch()).toString());
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = null;
    String stat = "X";
    boolean status1 = false;
    String[] usedVehicleYearArr = usedVehiclePricingVo.getUsedVehicleYearArr();
    String[] usedVehiclePriceArr = usedVehiclePricingVo.getUsedVehiclePriceArr();
    String usedState = usedVehiclePricingVo.getUsedState();
    String usedBranch = usedVehiclePricingVo.getUsedBranch();
    String makeModelId = usedVehiclePricingVo.getMakeModelId();
    String refinanceId = usedVehiclePricingVo.getRefinanceId();
    String makerId = usedVehiclePricingVo.getMakerId();
    String makerDate = usedVehiclePricingVo.getMakerDate();
    String authorId = usedVehiclePricingVo.getAuthorId();
    String authorDate = usedVehiclePricingVo.getAuthorDate();
    logger.info(new StringBuilder().append("usedVehicleYearArr : ").append(usedVehicleYearArr[0]).append(" / ").append(usedVehicleYearArr[1]).toString());
    logger.info(new StringBuilder().append("usedVehiclePriceArr : ").append(usedVehiclePriceArr[0]).append(" / ").append(usedVehiclePriceArr[1]).toString());
    logger.info(new StringBuilder().append("the value of usedState is : ").append(usedState).toString());
    logger.info(new StringBuilder().append("the value of usedbranch is : ").append(usedBranch).toString());
    logger.info(new StringBuilder().append("the value of refinanceId is : ").append(refinanceId).toString());
    logger.info(new StringBuilder().append("makeModelId : ").append(makeModelId).append(" / ").append(makeModelId).toString());
    logger.info("OK.......");
    try
    {
      for (int i = 0; i < usedVehiclePriceArr.length; i++)
      {
        String sqlquery1 = new StringBuilder().append("select MAKE_MODEL_ID from com_used_vehicle_pricing_m where MAKE_MODEL_ID='").append(StringEscapeUtils.escapeSql(makeModelId.trim())).append("'AND MANUFACTURING_YEAR='").append(StringEscapeUtils.escapeSql(usedVehicleYearArr[i])).append("' ").toString();
        status1 = ConnectionDAO.checkStatus(sqlquery1);
        logger.info(new StringBuilder().append("sqlquery1-->").append(sqlquery1).toString());
        logger.info(new StringBuilder().append("status1-->").append(status1).toString());
        if (status1)
        {
          insertPrepStmtObject = new PrepStmtObject();
          StringBuffer bufInsSql = new StringBuffer();
          bufInsSql.append(" update com_used_vehicle_pricing_m set MAKE_MODEL=?,USES_TYPE=? , GRID_VALUE=?, STATE_ID=?, BRANCH_ID=? where REFINANCE_ID=? and MANUFACTURING_YEAR=?");

          if (CommonFunction.checkNull(usedVehiclePricingVo.getUsedVehicleMakeSearch()).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(usedVehiclePricingVo.getUsedVehicleMakeSearch().toUpperCase().trim());
          }
          if (CommonFunction.checkNull(usedVehiclePricingVo.getUsedVehicleModelSearch()).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(usedVehiclePricingVo.getUsedVehicleModelSearch().toUpperCase().trim());
          if (CommonFunction.checkNull(usedVehiclePriceArr[i]).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(usedVehiclePriceArr[i]);
          }
          if (CommonFunction.checkNull(usedState).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(usedState);
          if (CommonFunction.checkNull(usedBranch).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(usedBranch);
          if (CommonFunction.checkNull(refinanceId).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(refinanceId);
          if (CommonFunction.checkNull(usedVehicleYearArr[i]).equalsIgnoreCase(""))
            insertPrepStmtObject.addInt(0L);
          else {
            insertPrepStmtObject.addString(usedVehicleYearArr[i]);
          }
          insertPrepStmtObject.setSql(bufInsSql.toString());
          qryList.add(insertPrepStmtObject);

          status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
          logger.info(new StringBuilder().append("IN updateUsedVehiclePricing() update query1 ### ").append(status).toString());
          logger.info(new StringBuilder().append("IN updateUsedVehiclePricing() update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        }
        else
        {
          PrepStmtObject insertPrepStmt = new PrepStmtObject();
          StringBuffer bufInsSql = new StringBuffer();
          bufInsSql.append("INSERT INTO com_used_vehicle_pricing_m(MAKE_MODEL,USES_TYPE,MANUFACTURING_YEAR,GRID_VALUE,STATE_ID,BRANCH_ID,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,MAKE_MODEL_ID)");
          bufInsSql.append(" values ( ");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
          bufInsSql.append(" ?,");
          bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
          bufInsSql.append(" ?)");

          if (CommonFunction.checkNull(usedVehiclePricingVo.getUsedVehicleMakeSearch()).equalsIgnoreCase(""))
            insertPrepStmt.addNull();
          else {
            insertPrepStmt.addString(usedVehiclePricingVo.getUsedVehicleMakeSearch().toUpperCase().trim());
          }
          if (CommonFunction.checkNull(usedVehiclePricingVo.getUsedVehicleModelSearch()).equalsIgnoreCase(""))
            insertPrepStmt.addNull();
          else {
            insertPrepStmt.addString(usedVehiclePricingVo.getUsedVehicleModelSearch().toUpperCase().trim());
          }
          if (CommonFunction.checkNull(usedVehicleYearArr[i]).equalsIgnoreCase(""))
            insertPrepStmt.addInt(0L);
          else {
            insertPrepStmt.addString(usedVehicleYearArr[i]);
          }
          if (CommonFunction.checkNull(usedVehiclePriceArr[i]).equalsIgnoreCase(""))
            insertPrepStmt.addNull();
          else {
            insertPrepStmt.addString(usedVehiclePriceArr[i]);
          }
          if (CommonFunction.checkNull(usedState).equalsIgnoreCase(""))
            insertPrepStmt.addNull();
          else {
            insertPrepStmt.addString(usedState);
          }
          if (CommonFunction.checkNull(usedBranch).equalsIgnoreCase(""))
            insertPrepStmt.addNull();
          else {
            insertPrepStmt.addString(usedBranch);
          }
          if (CommonFunction.checkNull(makerId).equalsIgnoreCase(""))
            insertPrepStmt.addNull();
          else
            insertPrepStmt.addString(makerId);
          if (CommonFunction.checkNull(makerDate).equalsIgnoreCase(""))
            insertPrepStmt.addNull();
          else
            insertPrepStmt.addString(makerDate);
          if (CommonFunction.checkNull(authorId).equalsIgnoreCase("")) {
            insertPrepStmt.addNull();
          }
          else
            insertPrepStmt.addString(authorId);
          if (CommonFunction.checkNull(authorDate).equalsIgnoreCase(""))
            insertPrepStmt.addNull();
          else {
            insertPrepStmt.addString(authorDate);
          }
          if (CommonFunction.checkNull(makeModelId).equalsIgnoreCase(""))
            insertPrepStmt.addNull();
          else {
            insertPrepStmt.addString(makeModelId);
          }
          insertPrepStmt.setSql(bufInsSql.toString());
          qryList.add(insertPrepStmt);

          logger.info(new StringBuilder().append("IN insertUsedVehiclePricing() insert query1 ### ").append(insertPrepStmt.printQuery()).toString());
          status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
          logger.info(new StringBuilder().append("In my  saveUsedVehiclePricingAdd......................").append(status).toString());
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      usedVehiclePricingVo = null;
      qryList = null;
      insertPrepStmtObject = null;
      usedVehicleYearArr = null;
      usedVehiclePriceArr = null;
      usedState = null;
      usedBranch = null;
      makerId = null;
      makerDate = null;
      authorId = null;
      authorDate = null;
    }
    return status;
  }

  public String getNoOfYearAtUsedVehicle()
  {
    StringBuilder query = new StringBuilder();
    String result = null;
    query.append("select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY='USED_VEHICLE_NO_OF_YEAR'");
    try
    {
      result = ConnectionDAO.singleReturn(query.toString());
      query = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }return result;
  }

  public ArrayList<UsedVehiclePricingVo> selectUsedVehiclePricing(String makeModelId)
  {
    logger.info(new StringBuilder().append("In get Vehicle Pricing On basis of ModelID ").append(makeModelId).toString());
    ArrayList list = new ArrayList();
    StringBuilder bufInsSql = new StringBuilder();
    StringBuilder query = new StringBuilder();
    PrepStmtObject insertPrepStmtObject = null;
    String result = null;
    try
    {
      ArrayList header = null;
      bufInsSql.append(new StringBuilder().append("select k.MAKE_MODEL,k.USES_TYPE,k.MANUFACTURING_YEAR,k.GRID_VALUE,b.STATE_DESC,w.BRANCH_DESC,k.STATE_ID,k.BRANCH_ID,K.MAKE_MODEL_ID, k.refinance_id from com_used_vehicle_pricing_m k left join com_state_m b on b.STATE_ID =k.STATE_ID left join com_branch_m w on w.BRANCH_ID=k.BRANCH_ID where K.REFINANCE_ID='").append(makeModelId).append("'").toString());

      logger.info(new StringBuilder().append("query FOR search Vehicle Pricing On THE BAIS OF ModelID  : ").append(bufInsSql.toString()).toString());
      header = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());
      int size = header.size();

      for (int i = 0; i < size; i++)
      {
        ArrayList header1 = (ArrayList)header.get(i);
        if ((header1 != null) && (header1.size() > 0))
        {
          UsedVehiclePricingVo Vo = new UsedVehiclePricingVo();

          Vo.setUsedVehicleMakeSearch(CommonFunction.checkNull(header1.get(0)).trim());
          Vo.setUsedVehicleModelSearch(CommonFunction.checkNull(header1.get(1)).trim());
          Vo.setUsedVehicleYear(CommonFunction.checkNull(header1.get(2)).trim());
          Vo.setUsedVehiclePrice(CommonFunction.checkNull(header1.get(3)).trim());
          Vo.setUsedVehicleState(CommonFunction.checkNull(header1.get(4)).trim());
          Vo.setUsedVehicleBranch(CommonFunction.checkNull(header1.get(5)).trim());
          Vo.setUsedState(CommonFunction.checkNull(header1.get(6)).trim());
          Vo.setUsedBranch(CommonFunction.checkNull(header1.get(7)).trim());
          Vo.setMakeModelId(CommonFunction.checkNull(header1.get(8)).trim());
          Vo.setRefinanceId(CommonFunction.checkNull(header1.get(9)).trim());
          list.add(Vo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally {
      bufInsSql = null;
    }return list;
  }

  public ArrayList<UsedVehiclePricingVo> searchUsedVehiclePricing(Object ob)
  {
    ArrayList searchlist = new ArrayList();
    UsedVehiclePricingVo usedVehiclePricingVo = (UsedVehiclePricingVo)ob;
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    String makeModelId = usedVehiclePricingVo.getMakeModelId();
    String usedVehicleMakeSearch = usedVehiclePricingVo.getUsedVehicleMakeSearch();
    String usedVehicleModelSearch = usedVehiclePricingVo.getUsedVehicleModelSearch();

    ArrayList subList = new ArrayList();
    try {
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append(new StringBuilder().append("select distinct make_model_id,MAKE_MODEL,USES_TYPE from com_used_vehicle_pricing_m where MAKE_MODEL='").append(usedVehicleMakeSearch).append("' and USES_TYPE='").append(usedVehicleModelSearch).append("' ").toString());
      bufInsSqlTempCount.append(new StringBuilder().append("SELECT COUNT(DISTINCT make_model_id) FROM com_used_vehicle_pricing_m  where MAKE_MODEL='").append(usedVehicleMakeSearch).append("' ").toString());

      if (!makeModelId.equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" AND make_model_id LIKE '%").append(makeModelId).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND make_model_id LIKE '%").append(makeModelId).append("%' ").toString());
      }
      if (!usedVehicleMakeSearch.equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" AND MAKE_MODEL like '%").append(usedVehicleMakeSearch).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND MAKE_MODEL like '%").append(usedVehicleMakeSearch).append("%' ").toString());
      }
      if (!usedVehicleModelSearch.equals(""))
      {
        bufInsSql.append(new StringBuilder().append(" AND USES_TYPE like '%").append(usedVehicleModelSearch).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND USES_TYPE like '%").append(usedVehicleModelSearch).append("%' ").toString());
      }

      logger.info(new StringBuilder().append("IN searchVehiclepricing() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (usedVehiclePricingVo.getCurrentPageLink() > 1)
      {
        startRecordIndex = (usedVehiclePricingVo.getCurrentPageLink() - 1) * this.no;
        endRecordIndex = this.no;
        logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
        logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
      }

      bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());

      logger.info(new StringBuilder().append("query for usedVehiclePricing: ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      for (int j = 0; j < searchlist.size(); j++) {
        ArrayList data = (ArrayList)searchlist.get(j);

        if (data.size() > 0) {
          UsedVehiclePricingVo vehicleVo = new UsedVehiclePricingVo();

          vehicleVo.setMakeModelId(new StringBuilder().append("<a href=usedVehiclePricingAdd.do?method=selectUsedVehiclePricing&makeModelId=").append(CommonFunction.checkNull(data.get(0)).trim()).append(" >").append(CommonFunction.checkNull(data.get(0)).trim()).append("</a>").toString());
          vehicleVo.setUsedVehicleMakeSearch(CommonFunction.checkNull(data.get(1)).toString());
          vehicleVo.setUsedVehicleModelSearch(CommonFunction.checkNull(data.get(2)).toString());
          vehicleVo.setTotalRecordSize(count);
          subList.add(vehicleVo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return subList;
  }
  public ArrayList<NPAMasterVo> getProductId() {
    try {
      this.con = ConnectionDAO.getConnection();
      PreparedStatement ps = this.con.prepareStatement("Select PRODUCT_ID,PRODUCT_DESC from  cr_product_m");

      ResultSet result = ps.executeQuery();
      ArrayList list = new ArrayList();
      while (result.next())
      {
        NPAMasterVo vo = new NPAMasterVo();
        vo.setProductId(result.getString(1));
        vo.setProDesc(result.getString(2));
        list.add(vo);
      }

      ps.close();
      result.close();
      this.con.close();
      return list;
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return null;
  }

  public String getProduct(String str) {
    try {
      this.con = ConnectionDAO.getConnection();
      PreparedStatement ps = this.con.prepareStatement("select product_id from cr_npa_m where npa_stage = ?");

      ps.setString(1, str);

      ResultSet result = ps.executeQuery();

      String product = "";
      if (result.next()) {
        product = result.getString(1);
      }

      ps.close();
      result.close();
      this.con.close();
      return product;
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return null;
  }

  public boolean insertSblMaster(Object ob)
  {
    ProductMasterVo vo = (ProductMasterVo)ob;
    boolean status = false;
    logger.info(new StringBuilder().append("In insertSblMaster.....................................Dao Impl").append(vo.getLbxProductID()).toString());
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    try {
      logger.info("In insert SBL & GBL master........");
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("insert into CR_SBL_M(PRODUCT_ID,SingleBorrowerLimit,GroupBorrowerLimit,MAKER_ID,MAKER_DATE,rec_status)");
      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND)").toString());
      bufInsSql.append(" ,?)");

      if (CommonFunction.checkNull(vo.getLbxProductID()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLbxProductID().toUpperCase().trim());
      }
      if (CommonFunction.checkNull(vo.getSingleBorrowerLimit()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(ValidationUtility.removeComma(vo.getSingleBorrowerLimit().trim()));
      }
      if (CommonFunction.checkNull(vo.getGroupBorrowerLimit()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(ValidationUtility.removeComma(vo.getGroupBorrowerLimit().trim()));
      }
      if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerId());
      }
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerDate());
      }
      if (CommonFunction.checkNull(vo.getRecStatus()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getRecStatus());
      }

      insertPrepStmtObject.setSql(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN insertSblMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In insertSblMaster......................").append(status).toString());
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return status;
  }
  public ArrayList<ProductMasterVo> searchSblData(Object ob) {
    String prodID = "";
    String proDesc = "";
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    ArrayList searchlist = new ArrayList();
    ProductMasterVo productMasterVo = (ProductMasterVo)ob;
    ArrayList detailList = new ArrayList();
    try {
      logger.info("In searchSblData().....................................Dao Impl");
      prodID = StringEscapeUtils.escapeSql(CommonFunction.checkNull(productMasterVo.getProductSearchId())).trim();
      proDesc = StringEscapeUtils.escapeSql(CommonFunction.checkNull(productMasterVo.getProductSearchDes())).trim();

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append("SELECT csm.PRODUCT_ID,PRODUCT_DESC,csm.SingleBorrowerLimit,csm.GroupBorrowerLimit,csm.rec_status ");
      bufInsSql.append("FROM CR_SBL_M csm ");
      bufInsSql.append("left join cr_product_m cp on cp.PRODUCT_ID=csm.PRODUCT_ID ");

      bufInsSqlTempCount.append("SELECT COUNT(1) FROM CR_SBL_M csm left join cr_product_m cp on cp.PRODUCT_ID=csm.PRODUCT_ID ");

      if ((!prodID.equals("")) && (!proDesc.equals(""))) {
        bufInsSql.append(new StringBuilder().append(" WHERE csm.PRODUCT_ID = '").append(prodID).append("' AND PRODUCT_DESC like '%").append(proDesc).append("%'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE csm.PRODUCT_ID = '").append(prodID).append("' AND PRODUCT_DESC like '%").append(proDesc).append("%'").toString());
      }
      else if (!prodID.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE csm.PRODUCT_ID = '").append(prodID).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE csm.PRODUCT_ID = '").append(prodID).append("' ").toString());
      }
      else if (!proDesc.equals("")) {
        bufInsSql.append(new StringBuilder().append(" WHERE PRODUCT_DESC like '%").append(proDesc).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE PRODUCT_DESC like '%").append(proDesc).append("%' ").toString());
      }
      bufInsSql.append("ORDER BY PRODUCT_ID");

      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAOforEJB.singleReturn(bufInsSqlTempCount.toString()));

      if (((prodID.trim() == null) && (proDesc.trim() == null)) || ((prodID.trim().equalsIgnoreCase("")) && (proDesc.trim().equalsIgnoreCase(""))) || (productMasterVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(productMasterVo.getCurrentPageLink()).toString());
        if (productMasterVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (productMasterVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchSblData() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("searchProductData ").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          ProductMasterVo deptMVO = new ProductMasterVo();
          deptMVO.setProductIdModify(new StringBuilder().append("<a href=SBLGBLMasterSearch.do?method=openEditProduct&ProductSearchId=").append(CommonFunction.checkNull(data.get(0)).toString()).append(">").append(CommonFunction.checkNull(data.get(0)).toString()).append("</a>").toString());

          deptMVO.setProductId(CommonFunction.checkNull(data.get(0)).toString());
          deptMVO.setProductDes(CommonFunction.checkNull(data.get(1)).toString());
          deptMVO.setSingleBorrowerLimit(CommonFunction.checkNull(data.get(2)).toString());
          deptMVO.setGroupBorrowerLimit(CommonFunction.checkNull(data.get(3)).toString());
          deptMVO.setRecStatus(CommonFunction.checkNull(data.get(4)).toString());
          detailList.add(deptMVO);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return detailList;
  }
  public boolean updateSBLData(Object ob) {
    ProductMasterVo vo = (ProductMasterVo)ob;
    boolean status = false;
    logger.info(new StringBuilder().append("In insertSblMaster.....................................Dao Impl").append(vo.getLbxProductID()).toString());
    ArrayList qryList = new ArrayList();
    ArrayList qryList1 = new ArrayList();
    ArrayList searchlist = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    StringBuffer bufInsSql = new StringBuffer();
    StringBuffer bufInsSqlHst = new StringBuffer();
    try
    {
      logger.info("In insert SBL & GBL master history table ........");
      bufInsSqlHst.append(new StringBuilder().append("select PRODUCT_ID,SingleBorrowerLimit,GroupBorrowerLimit,MAKER_ID,MAKER_DATE,rec_status from CR_SBL_M where PRODUCT_ID='").append(vo.getProductSearchId()).append("'").toString());
      logger.info(new StringBuilder().append("query : ").append(bufInsSqlHst).toString());
      searchlist = ConnectionDAOforEJB.sqlSelect(bufInsSqlHst.toString());
      ArrayList data = (ArrayList)searchlist.get(0);
      bufInsSql.append("insert into CR_SBL_M_HST(PRODUCT_ID,SingleBorrowerLimit,GroupBorrowerLimit,MAKER_ID,MAKER_DATE,UPDATE_ID,UPDATE_DATE,rec_status)");
      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND)").toString());
      bufInsSql.append(" ,?)");

      if (CommonFunction.checkNull(data.get(0)).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(data.get(0).toString());
      }
      if (CommonFunction.checkNull(data.get(1)).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(data.get(1).toString());
      }
      if (CommonFunction.checkNull(data.get(2)).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(data.get(2).toString());
      }
      if (CommonFunction.checkNull(data.get(3)).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(data.get(3).toString());
      }
      if (CommonFunction.checkNull(data.get(4)).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(data.get(4).toString());
      }
      if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerId().toString());
      }
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerDate().toString());
      }
      if (CommonFunction.checkNull(data.get(5)).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(data.get(5).toString());
      }
      insertPrepStmtObject.setSql(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN insertSblMasterHst() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In insertSblMasterHSt......................").append(status).toString());
      insertPrepStmtObject = null;
      insertPrepStmtObject = new PrepStmtObject();
      StringBuffer qryupdate2 = new StringBuffer();
      qryupdate2.append(" UPDATE CR_SBL_M SET ");
      qryupdate2.append(new StringBuilder().append("SingleBorrowerLimit=?,GroupBorrowerLimit=?,MAKER_ID='").append(vo.getMakerId()).append("',MAKER_DATE=DATE_ADD(STR_TO_DATE('").append(vo.getMakerDate()).append("', '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),update_date=DATE_ADD(STR_TO_DATE('").append(vo.getMakerDate()).append("', '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),update_id='").append(vo.getMakerId()).append("',rec_status='").append(vo.getRecStatus()).append("' WHERE PRODUCT_ID='").append(vo.getProductSearchId()).append("'").toString());
      String qryupdate = qryupdate2.toString();
      if (CommonFunction.checkNull(vo.getSingleBorrowerLimit()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(ValidationUtility.removeComma(vo.getSingleBorrowerLimit().trim()));
      }
      if (CommonFunction.checkNull(vo.getGroupBorrowerLimit()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(ValidationUtility.removeComma(vo.getGroupBorrowerLimit().trim()));
      }
      insertPrepStmtObject.setSql(qryupdate.toString());
      logger.info(new StringBuilder().append("IN insertSblMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList1.add(insertPrepStmtObject);
      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList1);
      logger.info(new StringBuilder().append("updateStatus for insertSblMaster>>-----------!!!").append(qryupdate).toString());
      qryList1.clear();
      qryList1 = null;
      insertPrepStmtObject = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    return status;
  }
}												