/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gcd.actions;

import java.util.ArrayList;
import java.util.ResourceBundle;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.VO.StakeHolderVo;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.gcd.dao.CorporateDAO;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 02-11-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class CorporateStackHolderAction extends Action {
	private static final Logger logger = Logger.getLogger(CorporateStackHolderAction.class.getName());
	/*
	 * Generated Methods
	 */
    ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");
	
	String dateFormatWithTime=resource.getString("lbl.dateWithTimeInDao");
	String dateFormat=resource.getString("lbl.dateInDao");
	String dbType=resource.getString("lbl.dbType");
	String dbo=resource.getString("lbl.dbPrefix");
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		CorporateDAO pos=(CorporateDAO)DaoImplInstanceFactory.getDaoImplInstance(CorporateDAO.IDENTITY);
		logger.info("Implementation class: "+pos.getClass());
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			//code added by neeraj
			String source="NE";
			String functionId=(String)session.getAttribute("functionId");
			int funid=Integer.parseInt(functionId);		
			if(funid==4000122 || funid==4000123)
				source="ED";
			//neeraj space end
		 int cid =0;
		String statusCase="";
		String updateFlag="";
		String updateInMaker="";
		if(session.getAttribute("corporateId")!=null)
		{
			cid = Integer.parseInt(session.getAttribute("corporateId").toString());
		}
		if(session.getAttribute("statusCase")!=null)
		{
			statusCase = session.getAttribute("statusCase").toString();
		}
		 if(session.getAttribute("updateFlag")!=null)
		 {
			 updateFlag = (String)session.getAttribute("updateFlag");
		 }
		 if(session.getAttribute("updateInMaker")!=null)
			{
				updateInMaker = session.getAttribute("updateInMaker").toString();
			}
		if(session.getAttribute("corporateId")!=null)
		{
			Object pageStatus=null;
			if(session.getAttribute("approve")!=null)
			{
				if(session.getAttribute("operation")!=null||session.getAttribute("approve")!=null)
				 {
					 	
					 pageStatus = session.getAttribute("approve");
				 }
				String gcdReq = (String)session.getAttribute("gcdReq");
				  Object pageStatus1=pageStatus;
				  String updateFlag1 =updateFlag;
				  if(gcdReq!=null)
				  {
					  pageStatus=null;
					  updateFlag=null;
				  }
			    ArrayList<Object> stakeDetails = pos.getStakeDetails(cid,pageStatus,statusCase,updateFlag,updateInMaker,source);
				pageStatus=pageStatus1;
				  updateFlag=updateFlag1;
				 session.setAttribute("stakeDetails", stakeDetails);
			}
			ArrayList<Object> holdertypes = pos.getHolderTypeList();
			session.setAttribute("holdertypes",holdertypes); 
			ArrayList<Object> salutation=pos.getSalutation();
			session.setAttribute("salutation",salutation);
			ArrayList<Object> positions = pos.getPositionList();
			session.setAttribute("positions", positions);	
			 String pageStatuss="";
			 if(session.getAttribute("pageStatuss")!=null)
			 {
				 pageStatuss = session.getAttribute("pageStatuss").toString();
			 }
			 String gcdReq = (String)session.getAttribute("gcdReq");
			  Object pageStatus1=pageStatus;
			  String updateFlag1 =updateFlag;
			  if(gcdReq!=null)
			  {
				  pageStatus=null;
				  updateFlag=null;
			  }
			  String cuaStatus="";
			  if(session.getAttribute("CUA")!=null)
				 {
				  cuaStatus = session.getAttribute("CUA").toString();
				 }
			ArrayList<Object> briefStake=pos.getStakeDetailsAll(cid,statusCase,updateInMaker,pageStatuss,updateFlag,cuaStatus,source);
			logger.info("briefStake size ........pageStatuss............. "+pageStatuss);
			logger.info("briefStake size ..................... "+briefStake.size());
			String percentage="0.00";
			if(briefStake.size()>0)
			{
				StakeHolderVo vo=(StakeHolderVo)briefStake.get(0);
				percentage=vo.getPercentage();
				logger.info("Total percentage : "+percentage);
				session.setAttribute("percentage", percentage);
			}
			else
			{
				session.setAttribute("percentage", percentage);
			}
			
			 if((pageStatuss!=null && pageStatuss.equals("fromLeads"))  || (updateFlag!=null && updateFlag.equals("updateFlag")) ||(updateFlag!=null && updateFlag.equals("notEdit")))
				{
				    StringBuilder incDateQ = new StringBuilder();
				    incDateQ.append("select ");
				    incDateQ.append(dbo);
				    incDateQ.append("DATE_FORMAT(CUSTOMER_DOB,'"+dateFormat+"') ");
				    incDateQ.append(" from cr_deal_customer_m where CUSTOMER_ID='"+cid+"' ");
				 	//String incDateQ="select DATE_FORMAT(CUSTOMER_DOB,'"+dateFormat+"')  from cr_deal_customer_m where CUSTOMER_ID="+cid;
				    logger.info("incDateQ(cr_deal_customer_m): "+incDateQ.toString());
				 	String incDate=ConnectionDAO.singleReturn(incDateQ.toString());
				 	session.setAttribute("incDate", incDate);
				}
			 else
			 {
				 String table="gcd_customer_m";
				 if(CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
					 table="gcd_customer_m_edit";
				  StringBuilder incDateQ = new StringBuilder();
				    incDateQ.append("select ");
				    incDateQ.append(dbo);
				    incDateQ.append("DATE_FORMAT(CUSTOMER_DOB,'"+dateFormat+"') ");
				    incDateQ.append(" from "+table+" where CUSTOMER_ID='"+cid+"' ");
				 	
				    logger.info("incDateQ(gcd_customer_m): "+incDateQ.toString());
					//String incDateQ="select DATE_FORMAT(CUSTOMER_DOB,'"+dateFormat+"') from gcd_customer_m where CUSTOMER_ID="+cid;
					String incDate=ConnectionDAO.singleReturn(incDateQ.toString());
				 	session.setAttribute("incDate", incDate);
			 }
			 pageStatus=pageStatus1;
			  updateFlag=updateFlag1;
			
			session.setAttribute("briefStake", briefStake);
			session.removeAttribute("getStackHolderList");
			return mapping.getInputForward();
		 }
		 else
		 {
			 request.setAttribute("back", "ok");
			 return mapping.findForward("backsuccess");
		 }
		  
		 
	}
}