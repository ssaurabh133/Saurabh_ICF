/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gcd.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.VO.CustomerSaveVo;
import com.communication.engn.daoImplMySql.SmsDAOImpl;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.gcd.VO.CorporateDetailsVO;
import com.gcd.VO.ShowCustomerDetailVo;
import com.gcd.dao.*;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.utils.ChCrypto;
import com.utils.EmailWithPdf;
import com.cm.dao.EndOfDayProcessDAO;
import com.VO.CustomerSaveVo;
import com.communication.engn.daoImplMySql.SmsDAOImpl;

/** 
 * MyEclipse Struts
 * Creation date: 02-08-2011
 * 
 * XDoclet definition:
 * @struts.action input="/JSP/gcdJSP/corporateCustomerAddress.jsp" parameter="method" scope="request" validate="true"
 */
public class MobileVerificationAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(MobileVerificationAction.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	
		public ActionForward openMobileVerification(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)throws Exception {
			
			logger.info("In openMobileVerification()------------------------>");
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			if(userobj==null)
			{			
				logger.info("here openMobileVerification method of MobileVerificationAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
		 logger.info("In openMobileVerification corporateId ::  "+session.getAttribute("corporateId"));
		 logger.info("In openMobileVerification idividualId ::  "+session.getAttribute("idividualId"));
		 if((session!=null && session.getAttribute("corporateId")!=null))
		 {
			 String code = session.getAttribute("corporateId").toString();
		 }
		 else{
			 String codeId = session.getAttribute("idividualId").toString();
		 }
	
		//code added by neeraj
			String source="NE";
			String functionId=(String)session.getAttribute("functionId");
			int funid=Integer.parseInt(functionId);		
			if(funid==4000122 || funid==4000123)
				source="ED";
			//neeraj space end
		String statusCase="";
		String updateFlag="";
		String updateInMaker="";
		String addr_id=request.getParameter("addId");
		 logger.info("addr_id: "+addr_id);
		 CorporateDAO detail=(CorporateDAO)DaoImplInstanceFactory.getDaoImplInstance(CorporateDAO.IDENTITY);
		 logger.info("Implementation class: "+detail.getClass());
		 if(request.getParameter("chk")!=null)
		 {
			 addr_id = request.getParameter("chk");
		 }
		 
		 Object pageStatus = session.getAttribute("approve");	
		 if(session.getAttribute("statusCase")!=null)
		 {
				statusCase = session.getAttribute("statusCase").toString();
		 }
		 if(session.getAttribute("updateFlag")!=null)
		 {
			 updateFlag = session.getAttribute("updateFlag").toString();
		 }
		 
		 if(session.getAttribute("updateInMaker")!=null)
		 {
			 updateInMaker = session.getAttribute("updateInMaker").toString();
		 }
		 String pageStatuss="";
		  if(session.getAttribute("pageStatuss")!=null)
			 {
				 pageStatuss = session.getAttribute("pageStatuss").toString();
			 }
		  String cuaStatus="";
		  if(session.getAttribute("CUA")!=null)
			 {
			  cuaStatus = session.getAttribute("CUA").toString();
			 }
		 
			String query = "Select customer_id from gcd_customer_m_temp where customer_id= (select BPID from com_address_m where ADDRESS_ID="+addr_id+")";
			String checkFlag = ConnectionDAO.singleReturn(query);
			 String gcdReq = (String)session.getAttribute("gcdReq");
			  Object pageStatus1=pageStatus;
			  String updateFlag1 =updateFlag;
			  if(gcdReq!=null)
			  {
				  pageStatus=null;
				  updateFlag=null;
			  }
		 ArrayList<CustomerSaveVo> customerList = detail.getCustomerAddressDetail(addr_id,pageStatus,statusCase,updateInMaker,updateFlag,pageStatuss,cuaStatus,source);
		 pageStatus=pageStatus1;
		  updateFlag=updateFlag1;
		 session.removeAttribute("strParentOption");
		 String tableName="";
		 if (((pageStatuss != null) && (pageStatuss.equals("fromLeads"))) || ((updateFlag != null) && (updateFlag.equals("updateFlag"))) || ((updateFlag != null) && (updateFlag.equals("notEdit"))))
		    {
		      tableName = "cr_deal_address_m";
		    }
		 if (((pageStatus != null) && (pageStatus.equals("approve"))) || ((updateInMaker != null) && (updateInMaker.equals("updateInMaker"))) || ((statusCase != null) && (!statusCase.equals(""))))
	      {
	        if ((statusCase != null) && (statusCase.equalsIgnoreCase("Approved")) && ((updateInMaker == null) || (updateInMaker.equals(""))))
	        {
	          tableName = "com_address_m";
	          if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
	            tableName = "com_address_m_edit";
	        }
	        else
	        {
	          tableName = "com_address_m_temp";
	        }
	      }
	      else
	      {
	        tableName = "com_address_m";
	        if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED")) {
	          tableName = "com_address_m_edit";
	        }
	      }
	      if (CommonFunction.checkNull(cuaStatus).equalsIgnoreCase("CUA"))
	      {
	        tableName = "com_address_m_temp";
	      }
	
		 String q1="select customer_type from gcd_customer_m where customer_id=(select BPID from "+tableName+" where ADDRESS_ID="+addr_id+")";
		 String customerType=ConnectionDAO.singleReturn(q1);
		 if(CommonFunction.checkNull(customerType).equalsIgnoreCase("I")){
			 ArrayList<Object> list=new ArrayList<Object>(); 
			  list=detail.getRelationShipFlagIndividual();
			  request.setAttribute("relationType",list);
		 }else{
			 ArrayList<Object> list=new ArrayList<Object>(); 
			  list=detail.getRelationShipFlagCorporate();
			  request.setAttribute("relationType",list);
		 }
		 request.setAttribute("customerList", customerList);
		 logger.info("list is......................................... "+customerList);

		 
		 		String MobileNo = request.getParameter("primaryPhoneNo");
		 		request.setAttribute("MobileNo",MobileNo);
		 		
				int randomPin   =(int) (Math.random()*9000)+1000; 
		        String otp  = String.valueOf(randomPin); 
		        logger.info(" Shashank otp ::: "+otp); 
		        session.setAttribute("otp", otp);
		       
		        String table = "";
				  logger.info(new StringBuilder().append("pageStatuss: ").append(pageStatuss).append(" updateFlag: ").append(updateFlag).toString());
				    if (((pageStatuss != null) && (pageStatuss.equals("fromLeads"))) || ((updateFlag != null) && (updateFlag.equals("updateFlag"))) || ((updateFlag != null) && (updateFlag.equals("notEdit"))))
				    {
				      logger.info("In Credit Processing , Customer Entry..,getValidation()......");
				      table = "cr_deal_customer_m";
				    }
				      else
				      {
				          if (((pageStatus != null) && (pageStatus.equals("approve"))) || ((updateInMaker != null) && (updateInMaker.equals("updateInMaker"))) || (statusCase.equalsIgnoreCase("UnApproved"))) {
				        	  table = "gcd_customer_m_temp";
				          }
				          else {
				        	  table = "gcd_customer_m";
				            if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
				            	table = "gcd_customer_m_edit";
				          }
				      }
				    String primaryPhoneQuery="select PRIMARY_PHONE from "+table+" where address_id='"+addr_id+"'";
				    String primaryPhone=ConnectionDAO.singleReturn(primaryPhoneQuery);
				    		
				    String query1="select count(1) from comm_event_data where event_name='MOBILE_NO_VERIFICATION' and PHONE_NO='"+primaryPhone+"' and TXN_ID='"+addr_id+"'";
				    int count= Integer.parseInt(ConnectionDAO.singleReturn(query1));
				    if(count<1){
				    String  EventName = "MOBILE_NO_VERIFICATION";
				    String bDate=userobj.getBusinessdate();
				    logger.info("addr_id: "+addr_id);
				    String txnId=addr_id;
				        boolean stats=new SmsDAOImpl().getEmailVerificationDetails(txnId, bDate, EventName, table, otp) ;
			
				        if(stats){
				        	request.setAttribute("stats", "Y");
				        }
				        else{
				        request.setAttribute("stats", "N");
				        }
				    }
				        String addId= addr_id;
				        request.setAttribute("addId", addId);
				        return mapping.findForward("openMobileVerification");
	}
		public ActionForward resendOTP(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)throws Exception {
			
			logger.info("In resendOTP()------------------------>");
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			if(userobj==null)
			{			
				logger.info("here resendOTP method of MobileVerificationAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
		 logger.info("In openMobileVerification corporateId ::  "+session.getAttribute("corporateId"));
		 logger.info("In openMobileVerification idividualId ::  "+session.getAttribute("idividualId"));
		 if((session!=null && session.getAttribute("corporateId")!=null))
		 {
			 String code = session.getAttribute("corporateId").toString();
		 }
		 else{
			 String codeId = session.getAttribute("idividualId").toString();
		 }
	
		//code added by neeraj
			String source="NE";
			String functionId=(String)session.getAttribute("functionId");
			int funid=Integer.parseInt(functionId);		
			if(funid==4000122 || funid==4000123)
				source="ED";
			//neeraj space end
		String statusCase="";
		String updateFlag="";
		String updateInMaker="";
		String addr_id=request.getParameter("addId");
		 logger.info("addr_id: "+addr_id);
		 CorporateDAO detail=(CorporateDAO)DaoImplInstanceFactory.getDaoImplInstance(CorporateDAO.IDENTITY);
		 logger.info("Implementation class: "+detail.getClass());
		 if(request.getParameter("chk")!=null)
		 {
			 addr_id = request.getParameter("chk");
		 }
		 
		 Object pageStatus = session.getAttribute("approve");	
		 if(session.getAttribute("statusCase")!=null)
		 {
				statusCase = session.getAttribute("statusCase").toString();
		 }
		 if(session.getAttribute("updateFlag")!=null)
		 {
			 updateFlag = session.getAttribute("updateFlag").toString();
		 }
		 
		 if(session.getAttribute("updateInMaker")!=null)
		 {
			 updateInMaker = session.getAttribute("updateInMaker").toString();
		 }
		 String pageStatuss="";
		  if(session.getAttribute("pageStatuss")!=null)
			 {
				 pageStatuss = session.getAttribute("pageStatuss").toString();
			 }
		  String cuaStatus="";
		  if(session.getAttribute("CUA")!=null)
			 {
			  cuaStatus = session.getAttribute("CUA").toString();
			 }
		 
			String query = "Select customer_id from gcd_customer_m_temp where customer_id= (select BPID from com_address_m where ADDRESS_ID="+addr_id+")";
			String checkFlag = ConnectionDAO.singleReturn(query);
			 String gcdReq = (String)session.getAttribute("gcdReq");
			  Object pageStatus1=pageStatus;
			  String updateFlag1 =updateFlag;
			  if(gcdReq!=null)
			  {
				  pageStatus=null;
				  updateFlag=null;
			  }
		 ArrayList<CustomerSaveVo> customerList = detail.getCustomerAddressDetail(addr_id,pageStatus,statusCase,updateInMaker,updateFlag,pageStatuss,cuaStatus,source);
		 pageStatus=pageStatus1;
		  updateFlag=updateFlag1;
		 session.removeAttribute("strParentOption");
		 String tableName="";
		 if (((pageStatuss != null) && (pageStatuss.equals("fromLeads"))) || ((updateFlag != null) && (updateFlag.equals("updateFlag"))) || ((updateFlag != null) && (updateFlag.equals("notEdit"))))
		    {
		      tableName = "cr_deal_address_m";
		    }
		 if (((pageStatus != null) && (pageStatus.equals("approve"))) || ((updateInMaker != null) && (updateInMaker.equals("updateInMaker"))) || ((statusCase != null) && (!statusCase.equals(""))))
	      {
	        if ((statusCase != null) && (statusCase.equalsIgnoreCase("Approved")) && ((updateInMaker == null) || (updateInMaker.equals(""))))
	        {
	          tableName = "com_address_m";
	          if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
	            tableName = "com_address_m_edit";
	        }
	        else
	        {
	          tableName = "com_address_m_temp";
	        }
	      }
	      else
	      {
	        tableName = "com_address_m";
	        if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED")) {
	          tableName = "com_address_m_edit";
	        }
	      }
	      if (CommonFunction.checkNull(cuaStatus).equalsIgnoreCase("CUA"))
	      {
	        tableName = "com_address_m_temp";
	      }
	
		 String q1="select customer_type from gcd_customer_m where customer_id=(select BPID from "+tableName+" where ADDRESS_ID="+addr_id+")";
		 String customerType=ConnectionDAO.singleReturn(q1);
		 if(CommonFunction.checkNull(customerType).equalsIgnoreCase("I")){
			 ArrayList<Object> list=new ArrayList<Object>(); 
			  list=detail.getRelationShipFlagIndividual();
			  request.setAttribute("relationType",list);
		 }else{
			 ArrayList<Object> list=new ArrayList<Object>(); 
			  list=detail.getRelationShipFlagCorporate();
			  request.setAttribute("relationType",list);
		 }
		 request.setAttribute("customerList", customerList);
		 logger.info("list is......................................... "+customerList);

		 
		 		String MobileNo = request.getParameter("primaryPhoneNo");
		 		request.setAttribute("MobileNo",MobileNo);
		 		
				int randomPin   =(int) (Math.random()*9000)+1000; 
		        String otp  = String.valueOf(randomPin); 
		        logger.info(" Shashank otp ::: "+otp); 
		        session.setAttribute("otp", otp);
		       
		        String table = "";
				  logger.info(new StringBuilder().append("pageStatuss: ").append(pageStatuss).append(" updateFlag: ").append(updateFlag).toString());
				    if (((pageStatuss != null) && (pageStatuss.equals("fromLeads"))) || ((updateFlag != null) && (updateFlag.equals("updateFlag"))) || ((updateFlag != null) && (updateFlag.equals("notEdit"))))
				    {
				      logger.info("In Credit Processing , Customer Entry..,getValidation()......");
				      table = "cr_deal_customer_m";
				    }
				      else
				      {
				          if (((pageStatus != null) && (pageStatus.equals("approve"))) || ((updateInMaker != null) && (updateInMaker.equals("updateInMaker"))) || (statusCase.equalsIgnoreCase("UnApproved"))) {
				        	  table = "gcd_customer_m_temp";
				          }
				          else {
				        	  table = "gcd_customer_m";
				            if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
				            	table = "gcd_customer_m_edit";
				          }
				      }
				    String  EventName = "MOBILE_NO_VERIFICATION";
				    String bDate=userobj.getBusinessdate();
				    logger.info("addr_id: "+addr_id);
				    String txnId=addr_id;
				        boolean stats=new SmsDAOImpl().getEmailVerificationDetails(txnId, bDate, EventName, table, otp) ;
			
				        if(stats){
				        	request.setAttribute("stats", "Y");
				        }
				        else{
				        request.setAttribute("stats", "N");
				        }
				        String addId= addr_id;
				        request.setAttribute("addId", addId);
				        return mapping.findForward("openMobileVerification");
	}
		public ActionForward openEmailVerification(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)throws Exception {
			
			logger.info("In openEmailVerification()------------------------>");
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			if(userobj==null)
			{			
				logger.info("here openEmailVerification method of MobileVerificationAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			String txnId ="";
		 logger.info("In openEmailVerification corporateId ::  "+session.getAttribute("corporateId"));
		 logger.info("In openEmailVerification idividualId ::  "+session.getAttribute("idividualId"));
		 if((session!=null && session.getAttribute("corporateId")!=null))
		 {
			 txnId = session.getAttribute("corporateId").toString();
		 }
		 else{
			 txnId = session.getAttribute("idividualId").toString();
		 }
	
		//code added by neeraj
			String source="NE";
			String functionId=(String)session.getAttribute("functionId");
			int funid=Integer.parseInt(functionId);		
			if(funid==4000122 || funid==4000123)
				source="ED";
			//neeraj space end
		String statusCase="";
		String updateFlag=""; 
		String updateInMaker="";
		String addr_id=request.getParameter("addId");
		 CorporateDAO detail=(CorporateDAO)DaoImplInstanceFactory.getDaoImplInstance(CorporateDAO.IDENTITY);
		 logger.info("Implementation class: "+detail.getClass());
		 if(request.getParameter("chk")!=null)
		 {
			 addr_id = request.getParameter("chk");
		 }
		 
		 Object pageStatus = session.getAttribute("approve");	
		 if(session.getAttribute("statusCase")!=null)
		 {
				statusCase = session.getAttribute("statusCase").toString();
		 }
		 if(session.getAttribute("updateFlag")!=null)
		 {
			 updateFlag = session.getAttribute("updateFlag").toString();
		 }
		 
		 if(session.getAttribute("updateInMaker")!=null)
		 {
			 updateInMaker = session.getAttribute("updateInMaker").toString();
		 }
		 String pageStatuss="";
		  if(session.getAttribute("pageStatuss")!=null)
			 {
				 pageStatuss = session.getAttribute("pageStatuss").toString();
			 }
		  String cuaStatus="";
		  if(session.getAttribute("CUA")!=null)
			 {
			  cuaStatus = session.getAttribute("CUA").toString();
			 }
		  
		  String EmailVerificationFlag = detail.getValidation(txnId,pageStatus,updateInMaker,statusCase,updateFlag,pageStatuss,source);
		  logger.info("EmailVerificationFlag: "+EmailVerificationFlag);
		  request.setAttribute("EmailVerificationFlag",EmailVerificationFlag);

		  ArrayList<Object> individualInfo = detail.getIndividualDetails(txnId,pageStatus,updateInMaker,statusCase,updateFlag,pageStatuss,source);
			//pageStatus=pageStatus1;
			  //updateFlag=updateFlag1;
			logger.info("individualInfo: "+individualInfo.size());
			session.setAttribute("individualInfo", individualInfo);
			ArrayList  riskCategoryList= detail.getriskCategoryList();
			session.setAttribute("riskCategoryList", riskCategoryList);
			
			if(individualInfo.size()>0)
			{
				ShowCustomerDetailVo show=(ShowCustomerDetailVo)individualInfo.get(0);
				
				
					logger.info("other Relationship : "+show.getOtherRelationShip());
					request.setAttribute("otherRelationShip", show.getOtherRelationShip());
				
		
			}
			
		  String table = "";
		  logger.info(new StringBuilder().append("pageStatuss: ").append(pageStatuss).append(" updateFlag: ").append(updateFlag).toString());
		    if (((pageStatuss != null) && (pageStatuss.equals("fromLeads"))) || ((updateFlag != null) && (updateFlag.equals("updateFlag"))) || ((updateFlag != null) && (updateFlag.equals("notEdit"))))
		    {
		      logger.info("In Credit Processing , Customer Entry..,getValidation()......");
		      table = "cr_deal_customer_m";
		    }
		      else
		      {
		          if (((pageStatus != null) && (pageStatus.equals("approve"))) || ((updateInMaker != null) && (updateInMaker.equals("updateInMaker"))) || (statusCase.equalsIgnoreCase("UnApproved"))) {
		        	  table = "gcd_customer_m_temp";
		          }
		          else {
		        	  table = "gcd_customer_m";
		            if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
		            	table = "gcd_customer_m_edit";
		          }
		      }
		    String  EventName = "EMAIL_ID_VERIFICATION";
		    String bDate=userobj.getBusinessdate();
		    String otp = "";
		        boolean stats=new SmsDAOImpl().getEmailVerificationDetails(txnId, bDate, EventName, table, otp) ;
		     if(stats){ 
		    	 request.setAttribute("EmailStatus", "Y");
		        }
		     else{
			        request.setAttribute("EmailStatus", "N");
			        }
		        return mapping.findForward("openMobileIndividualDetail");
	}
		
		public ActionForward openEmailVerificationCorporate(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)throws Exception {
		logger.info("In openEmailVerification()------------------------>");
	    HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null)
		{			
			logger.info("here openEmailVerification method of MobileVerificationAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String txnId ="";
	 logger.info("In openEmailVerification corporateId ::  "+session.getAttribute("corporateId"));
	 logger.info("In openEmailVerification idividualId ::  "+session.getAttribute("idividualId"));
	 if((session!=null && session.getAttribute("corporateId")!=null))
	 {
		 txnId = session.getAttribute("corporateId").toString();
	 }
	 else{
		 txnId = session.getAttribute("idividualId").toString();
	 }

	//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
	String statusCase="";
	String updateFlag=""; 
	String updateInMaker="";
	String addr_id=request.getParameter("addId");
	 CorporateDAO detail=(CorporateDAO)DaoImplInstanceFactory.getDaoImplInstance(CorporateDAO.IDENTITY);
	 logger.info("Implementation class: "+detail.getClass());
	 if(request.getParameter("chk")!=null)
	 {
		 addr_id = request.getParameter("chk");
	 }
	 
	 Object pageStatus = session.getAttribute("approve");	
	 if(session.getAttribute("statusCase")!=null)
	 {
			statusCase = session.getAttribute("statusCase").toString();
	 }
	 if(session.getAttribute("updateFlag")!=null)
	 {
		 updateFlag = session.getAttribute("updateFlag").toString();
	 }
	 
	 if(session.getAttribute("updateInMaker")!=null)
	 {
		 updateInMaker = session.getAttribute("updateInMaker").toString();
	 }
	 String pageStatuss="";
	  if(session.getAttribute("pageStatuss")!=null)
		 {
			 pageStatuss = session.getAttribute("pageStatuss").toString();
		 }
	  String cuaStatus="";
	  if(session.getAttribute("CUA")!=null)
		 {
		  cuaStatus = session.getAttribute("CUA").toString();
		 }


	  int cId =Integer.parseInt(session.getAttribute("corporateId").toString());
	  String EmailVerificationFlag = detail.getValidation(txnId,pageStatus,statusCase,updateInMaker,updateFlag,pageStatuss,source);
	  logger.info("EmailVerificationFlag: "+EmailVerificationFlag);
	  request.setAttribute("EmailVerificationFlag",EmailVerificationFlag);

	ArrayList<Object> detailList = detail.getCorporateDetailAll(cId,pageStatus,statusCase,updateInMaker,updateFlag,pageStatuss,source);
	//pageStatus=pageStatus1;
	//updateFlag=updateFlag1;			
	session.setAttribute("detailList",detailList);
	
	if(detailList.size()>0)
	{
		CorporateDetailsVO show=(CorporateDetailsVO)detailList.get(0);
		logger.info("other Relationship : "+show.getOtherRelationShip());
		request.setAttribute("otherRelationShip", show.getOtherRelationShip());
	}
	  
	  String table = "";
	  logger.info(new StringBuilder().append("pageStatuss: ").append(pageStatuss).append(" updateFlag: ").append(updateFlag).toString());
	    if (((pageStatuss != null) && (pageStatuss.equals("fromLeads"))) || ((updateFlag != null) && (updateFlag.equals("updateFlag"))) || ((updateFlag != null) && (updateFlag.equals("notEdit"))))
	    {
	      logger.info("In Credit Processing , Customer Entry..,getValidation()......");
	      table = "cr_deal_customer_m";
	    }
	      else
	      {
	          if (((pageStatus != null) && (pageStatus.equals("approve"))) || ((updateInMaker != null) && (updateInMaker.equals("updateInMaker"))) || (statusCase.equalsIgnoreCase("UnApproved"))) {
	        	  table = "gcd_customer_m_temp";
	          }
	          else {
	        	  table = "gcd_customer_m";
	            if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
	            	table = "gcd_customer_m_edit";
	          }
	      }
	    String  EventName = "EMAIL_ID_VERIFICATION";
	    String bDate=userobj.getBusinessdate();
	    String otp = "";
	        boolean stats=new SmsDAOImpl().getEmailVerificationDetails(txnId, bDate, EventName, table, otp) ;
	        if(stats){ 
		    	 request.setAttribute("EmailStatus", "Y");
		        }
	        else{
		        request.setAttribute("EmailStatus", "N");
	        }
	        return mapping.findForward("openMobileCorporateDetail");
}
		public ActionForward openMobileVerificationOtp(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)throws Exception {
			
			logger.info("In openMobileVerificationOtp()------------------------>");
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			if(userobj==null)
			{			
				logger.info("here openMobileVerificationOtp method of MobileVerificationAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
		 logger.info("In openEmailVerification corporateId ::  "+session.getAttribute("corporateId"));
		 logger.info("In openEmailVerification idividualId ::  "+session.getAttribute("idividualId"));
		 if((session!=null && session.getAttribute("corporateId")!=null))
		 {
			 String code = session.getAttribute("corporateId").toString();
		 }
		 else{
			 String code = session.getAttribute("idividualId").toString();
		 }
	
		//code added by neeraj
			String source="NE";
			String functionId=(String)session.getAttribute("functionId");
			int funid=Integer.parseInt(functionId);		
			if(funid==4000122 || funid==4000123)
				source="ED";
			//neeraj space end
		String statusCase="";
		String updateFlag=""; 
		String updateInMaker="";
		String addr_id=request.getParameter("addId");
		 CorporateDAO detail=(CorporateDAO)DaoImplInstanceFactory.getDaoImplInstance(CorporateDAO.IDENTITY);
		 logger.info("Implementation class: "+detail.getClass());
		 if(request.getParameter("chk")!=null)
		 {
			 addr_id = request.getParameter("chk");
		 }
		 
		 Object pageStatus = session.getAttribute("approve");	
		 if(session.getAttribute("statusCase")!=null)
		 {
				statusCase = session.getAttribute("statusCase").toString();
		 }
		 if(session.getAttribute("updateFlag")!=null)
		 {
			 updateFlag = session.getAttribute("updateFlag").toString();
		 }
		 
		 if(session.getAttribute("updateInMaker")!=null)
		 {
			 updateInMaker = session.getAttribute("updateInMaker").toString();
		 }
		 String pageStatuss="";
		  if(session.getAttribute("pageStatuss")!=null)
			 {
				 pageStatuss = session.getAttribute("pageStatuss").toString();
			 }
		  String cuaStatus="";
		  if(session.getAttribute("CUA")!=null)
			 {
			  cuaStatus = session.getAttribute("CUA").toString();
			 }
		  
		  String table = "";
		  logger.info(new StringBuilder().append("pageStatuss: ").append(pageStatuss).append(" updateFlag: ").append(updateFlag).toString());
		    if (((pageStatuss != null) && (pageStatuss.equals("fromLeads"))) || ((updateFlag != null) && (updateFlag.equals("updateFlag"))) || ((updateFlag != null) && (updateFlag.equals("notEdit"))))
		    {
		      logger.info("In Credit Processing , Customer Entry..,getValidation()......");
		      table = "cr_deal_address_m";
		    }
		      else
		      {
		          if (((pageStatus != null) && (pageStatus.equals("approve"))) || ((updateInMaker != null) && (updateInMaker.equals("updateInMaker"))) || (statusCase.equalsIgnoreCase("UnApproved"))) {
		        	  table = "com_address_m_temp";
		          }
		          else {
		        	  table = "com_address_m";
		            if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
		            	table = "com_address_m_edit";
		          }
		      }
		        String status = "";
		        
		        String MobileNo = request.getParameter("primaryPhoneNo");
		 		request.setAttribute("MobileNo",MobileNo);
		 		
		 		 	String otp =  session.getAttribute("otp").toString();
			        String verifyOtp =  request.getParameter("verifyOtp");
			        logger.info("otp : "+otp);
			        logger.info("verifyOtp : "+verifyOtp);
		        if(CommonFunction.checkNull(otp).trim().equalsIgnoreCase(verifyOtp.trim())){
		        	
		        	String updateQuery="update "+table+" set MobileVerificationFlag='Y' where address_id='"+addr_id+"'";
					ArrayList list=new ArrayList();
					logger.info("update mobile verification query: "+updateQuery);
					list.add(updateQuery);
					boolean status1=ConnectionDAO.sqlInsUpdDelete(list);
					if(status1){
					String EventName="MOBILE_NO_CONFIRMATION";
					String bDate=userobj.getBusinessdate();
					String table2="";
					if (CommonFunction.checkNull(table).trim().equalsIgnoreCase("cr_deal_address_m")){
						table2 = "cr_deal_customer_m";
					}
					else if (CommonFunction.checkNull(table).trim().equalsIgnoreCase("com_address_m")){
						table2 = "gcd_customer_m";
					}
					else if (CommonFunction.checkNull(table).trim().equalsIgnoreCase("com_address_m_edit")){
						table2 = "gcd_customer_m_edit";
					}
					else if (CommonFunction.checkNull(table).trim().equalsIgnoreCase("com_address_m_temp")){
						table2 = "gcd_customer_m_temp";
					}
					boolean stats=new SmsDAOImpl().getConfirmationVerificationDetails(addr_id, bDate, EventName, table2) ;
		      	request.setAttribute("status", "Y");
					}else{
				        request.setAttribute("status", "N");
			        }
		        }
		        else{
		        request.setAttribute("status", "N");
		        }
		        return mapping.findForward("openMobileVerification");
	}
		 public ActionForward getEmailVerificationCode(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
				    throws Exception
				  {
			 
			 String formData=CommonFunction.checkNull(request.getParameter("formdata"));
			 logger.info("customerId: "+formData);
			 String secretKeyQuery="select PARAMETER_VALUE from parameter_mst where parameter_key='DMS_SECRET_KEY'";
			 formData=formData.replace(" ", "+");
				String secretKey=ConnectionDAO.singleReturn(secretKeyQuery);
				//String finalString=encrypt(encryptedString,secretKey);
				ChCrypto chCrypto= new ChCrypto();
				String decryptedString=chCrypto.decrypt(formData, secretKey);
				logger.info("decryptedString: "+decryptedString);
				String value[]=decryptedString.split(",");
				String customerId= value[0];
				String table= value[1];
				String checkQuery="Select ifnull(EmailVerificationFlag,'N') from "+table+" where customer_id='"+customerId+"' ";
				String res=ConnectionDAO.singleReturn(checkQuery);
				if(CommonFunction.checkNull(res).equalsIgnoreCase("Y")){
					request.setAttribute("status", "X");
				}else{
				String updateQuery="update cr_deal_customer_m set EmailVerificationFlag='Y' where customer_id='"+customerId+"'";
				ArrayList list=new ArrayList();
				list.add(updateQuery);
				boolean status=ConnectionDAO.sqlInsUpdDelete(list);
				
				String updateQuery1="update gcd_customer_m set EmailVerificationFlag='Y' where customer_id='"+customerId+"'";
				ArrayList list1=new ArrayList();
				list1.add(updateQuery1);
				boolean status1=ConnectionDAO.sqlInsUpdDelete(list1);
				
				String updateQuery2="update gcd_customer_m_temp set EmailVerificationFlag='Y' where customer_id='"+customerId+"'";
				ArrayList list2=new ArrayList();
				list2.add(updateQuery2);
				boolean status2=ConnectionDAO.sqlInsUpdDelete(list2);
				
				String updateQuery3="update gcd_customer_m_edit set EmailVerificationFlag='Y' where customer_id='"+customerId+"'";
				ArrayList list3=new ArrayList();
				list3.add(updateQuery3);
				boolean status3=ConnectionDAO.sqlInsUpdDelete(list3);
				
				if(status || status1 || status2 || status3){
					String EventName="EMAIL_ID_CONFIRMATION";
					String bdateQuery="SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='BUSINESS_DATE'";
					String bDate=ConnectionDAO.singleReturn(bdateQuery);
					boolean stats=new SmsDAOImpl().getConfirmationVerificationDetails(customerId, bDate, EventName, table) ;
					request.setAttribute("status", "E");
				}else{
					request.setAttribute("status", "X");
				}
				}
				return mapping.findForward("verification");
				  }
		 public ActionForward getMobileVerificationCode(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
				    throws Exception
				  {
			 String ID=CommonFunction.checkNull(request.getParameter("ID")); 
			 String mobileNo=CommonFunction.checkNull(request.getParameter("mobileNo")); 
			 String countQuery="SELECT count(1) FROM COMM_MOBILE_VERIFICATION_LINK_DTL where ID='"+ID+"' AND MOBILE_NO='"+mobileNo+"'";
			 int count=Integer.parseInt(ConnectionDAO.singleReturn(countQuery));
			 if(count>0){
				String query="SELECT max(TXN_ID) FROM COMM_MOBILE_VERIFICATION_LINK_DTL where ID='"+ID+"' AND MOBILE_NO='"+mobileNo+"' limit 1 ";
				String addressId= ConnectionDAO.singleReturn(query);
				String query1="SELECT TABLE_NAME FROM COMM_MOBILE_VERIFICATION_LINK_DTL where ID='"+ID+"' AND TXN_ID='"+addressId+"' AND MOBILE_NO='"+mobileNo+"' limit 1 ";
				String table= ConnectionDAO.singleReturn(query1);
				
				String checkQuery="Select ifnull(MobileVerificationFlag,'N') from "+table+" where address_id='"+addressId+"'";
				String res=ConnectionDAO.singleReturn(checkQuery);
				if(CommonFunction.checkNull(res).equalsIgnoreCase("Y")){
					request.setAttribute("status", "X");
				}else{
				String updateQuery="update cr_deal_address_m set MobileVerificationFlag='Y' where address_id='"+addressId+"'";
				ArrayList list=new ArrayList();
				list.add(updateQuery);
				boolean status=ConnectionDAO.sqlInsUpdDelete(list);
				
				String updateQuery1="update com_address_m set MobileVerificationFlag='Y' where address_id='"+addressId+"'";
				ArrayList list1=new ArrayList();
				list1.add(updateQuery1);
				boolean status1=ConnectionDAO.sqlInsUpdDelete(list1);
				
				String updateQuery2="update com_address_m_edit set MobileVerificationFlag='Y' where address_id='"+addressId+"'";
				ArrayList list2=new ArrayList();
				list2.add(updateQuery2);
				boolean status2=ConnectionDAO.sqlInsUpdDelete(list2);
				
				String updateQuery3="update com_address_m_temp set MobileVerificationFlag='Y' where address_id='"+addressId+"'";
				ArrayList list3=new ArrayList();
				list3.add(updateQuery3);
				boolean status3=ConnectionDAO.sqlInsUpdDelete(list3);
				
				if(status || status1 || status2 || status3){
					String EventName="MOBILE_NO_CONFIRMATION";
					String bdateQuery="SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='BUSINESS_DATE'";
					String bDate=ConnectionDAO.singleReturn(bdateQuery);
					boolean stats=new SmsDAOImpl().getConfirmationVerificationDetails(addressId, bDate, EventName, table) ;
					request.setAttribute("status", "M");
					
				}else{
					request.setAttribute("status", "X");
				}
				}
				}else{
					request.setAttribute("status", "X");
				}
				return mapping.findForward("verification");
				  }
}