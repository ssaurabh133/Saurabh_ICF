/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.gcd.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.gcd.VO.ShowCustomerDetailVo;
import com.gcd.dao.CorporateDAO;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 02-18-2011
 * 
 * XDoclet definition:
 * @struts.action scope="request" validate="true"
 */
public class IndividualDetailAction extends DispatchAction {
	
	private static final Logger logger = Logger.getLogger(IndividualDetailAction.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward BackIndividualDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		CorporateDAO corporateDao=(CorporateDAO)DaoImplInstanceFactory.getDaoImplInstance(CorporateDAO.IDENTITY);
		logger.info("Implementation class: "+corporateDao.getClass());
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}

			//code added by neeraj
			String source="NE";
			String functionId=(String)session.getAttribute("functionId");
			int funid=Integer.parseInt(functionId);		
			if(funid==4000122 || funid==4000123)
				source="ED";
			//neeraj space end
			
		String codeId="";
		String updateInMaker="";
		String statusCase="";
		String updateFlag="";
		Object pageStatus=null;
		if(session.getAttribute("idividualId")!=null)
		{
			 codeId = session.getAttribute("idividualId").toString();
		}
	
		if(session.getAttribute("new")==null && session.getAttribute("pageStatuss")==null)
		{
			session.setAttribute("update", "update");
			session.setAttribute("operation", "update");
			
		}
		if(session.getAttribute("idividualId")!=null && session.getAttribute("operation")!=null||session.getAttribute("approve")!=null)
		{
			 pageStatus = session.getAttribute("approve");
			if(session.getAttribute("statusCase")!=null)
			{
				statusCase = session.getAttribute("statusCase").toString();
			}
			if(session.getAttribute("updateFlag")!=null)
			{
				updateFlag = (String)session.getAttribute("updateFlag");
			}
			
			if(session.getAttribute("updateInMaker")!=null)
			{
				updateInMaker = session.getAttribute("updateInMaker").toString();
			}
		}
		String pageStatuss="";
		  if(session.getAttribute("pageStatuss")!=null)
			 {
				 pageStatuss = session.getAttribute("pageStatuss").toString();
			 }
		if(session.getAttribute("idividualId")!=null)
		{
			String gcdReq = (String)session.getAttribute("gcdReq");
			  Object pageStatus1=pageStatus;
			  String updateFlag1 =updateFlag;
			  if(gcdReq!=null)
			  {
				  pageStatus=null;
				  updateFlag=null;
			  }
				  
			//Shashank Space starts	
			  String EmailVerificationFlag = corporateDao.getValidation(codeId,pageStatus,updateInMaker,statusCase,updateFlag,pageStatuss,source);
			  logger.info("EmailVerificationFlag: "+EmailVerificationFlag);
			  request.setAttribute("EmailVerificationFlag",EmailVerificationFlag);
			//Shashank Space Ends	
			ArrayList<Object> individualInfo = corporateDao.getIndividualDetails(codeId,pageStatus,updateInMaker,statusCase,updateFlag,pageStatuss,source);
			pageStatus=pageStatus1;
			  updateFlag=updateFlag1;
			logger.info("individualInfo: "+individualInfo.size());
			session.setAttribute("individualInfo", individualInfo);
			ArrayList  riskCategoryList= corporateDao.getriskCategoryList();
			session.setAttribute("riskCategoryList", riskCategoryList);
			
			if(individualInfo.size()>0)
			{
				ShowCustomerDetailVo show=(ShowCustomerDetailVo)individualInfo.get(0);
				
				
					logger.info("other Relationship : "+show.getOtherRelationShip());
					request.setAttribute("otherRelationShip", show.getOtherRelationShip());
				
		
			}
		
		}
		
		
		if((pageStatuss!=null && pageStatuss.equals("fromLeads"))  || (updateFlag!=null && updateFlag.equals("updateFlag")) ||(updateFlag!=null && updateFlag.equals("notEdit")))
		{
			if(CommonFunction.checkNull(session.getAttribute("applType")).toString().equalsIgnoreCase("PRAPPL") || CommonFunction.checkNull(session.getAttribute("applType")).toString().equalsIgnoreCase("APPLICANT") ){
				logger.info("ritu");
				
				request.setAttribute("type", "type");
			}
			request.setAttribute("deal", "deal");
		}	
				
		ArrayList<Object> individualCategorylist=corporateDao.getCustomerCategoryList();
		session.setAttribute("individualCategory",individualCategorylist);
		ArrayList<Object> CastCategory=corporateDao.getCastCategoryList();
		session.setAttribute("CastCategory",CastCategory);
		
		ArrayList<Object> eduDetail=corporateDao.getEduDetail();
		session.setAttribute("eduDetail",eduDetail);
		
		ArrayList<Object> genderIndiv=corporateDao.getGenderList();
		request.setAttribute("GenderCategory",genderIndiv);
		
		ArrayList<Object> constitutionlist=corporateDao.getIndividualContitutionList();
		session.setAttribute("constitutionlist",constitutionlist);
		//Nishant Space starts
		String emailFlag = corporateDao.getEmailMandatoryFlag();
		request.setAttribute("emailMandatoryFlag", emailFlag);
		emailFlag = null;
		//Nishant space end
		//Shashank Space starts
		ArrayList  riskCategoryList= corporateDao.getriskCategoryList();
		session.setAttribute("riskCategoryList", riskCategoryList);
		//Shashank Space Ends	
		if(funid==4000106)
			source="ED";
		request.setAttribute("applType", "applType");
		request.setAttribute("source", source);
		
		return mapping.findForward("individualDetail");
	}
	
	
	
	public ActionForward saveAndForwardIndivDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception 
			{
				logger.info("saveAndForwardIndivDetails method of IndividualDetailAction");
				CorporateDAO corporateDao=(CorporateDAO)DaoImplInstanceFactory.getDaoImplInstance(CorporateDAO.IDENTITY);
				logger.info("Implementation class: "+corporateDao.getClass());
			    HttpSession session = request.getSession();
			    UserObject userobj=(UserObject)session.getAttribute("userobject");
			    Object sessionId = session.getAttribute("sessionID");
				ServletContext context = getServlet().getServletContext();
				String strFlag="";
				String userId="";
				String businessDate="";
				ArrayList  riskCategoryList= corporateDao.getriskCategoryList();
				session.setAttribute("riskCategoryList", riskCategoryList);
				if(userobj!=null)
				{
						userId=userobj.getUserId();
						businessDate=userobj.getBusinessdate();
				} 
				
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
		
				int cId=0;
				String addCheck =null;
				int status=0;
				String statusCase="";
				String addressTableName="";
				if(session.getAttribute("statusCase")!=null)
				   	statusCase=session.getAttribute("statusCase").toString();
				if(session.getAttribute("idividualId")!=null)
				{
					
					cId = Integer.parseInt(session.getAttribute("idividualId").toString());
					if(statusCase.equalsIgnoreCase("UnApproved") || statusCase.equalsIgnoreCase("Approved"))
						addressTableName="com_address_m_temp";
					else
						addressTableName="com_address_m";
					
					/*//Shashank Staris Here
					String checkPrimaryApplicantDealQuery="Select count(1) from cr_deal_dtl where deal_customer_id="+cId+" ";
					String checkPrimaryApplicantLoanQuery="Select count(1) from cr_loan_dtl where loan_customer_id="+cId+" ";
					int checkPrimaryApplicantDeal=Integer.parseInt(ConnectionDAO.singleReturn(checkPrimaryApplicantDealQuery));
					int checkPrimaryApplicantLoan=Integer.parseInt(ConnectionDAO.singleReturn(checkPrimaryApplicantLoanQuery));
					
					String mobileEnablKeyQuery="SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='MOBILE_VERIFICATION' "; 
					String emailEnablKeyQuery="SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='EMAIL_VERIFICATION'  ";
					String mobileEnablKey=ConnectionDAO.singleReturn(mobileEnablKeyQuery);
					String emailEnablKey=ConnectionDAO.singleReturn(emailEnablKeyQuery);
					if(checkPrimaryApplicantDeal!=0 || checkPrimaryApplicantLoan!=0){
					String mobile= "Select MobileVerificationFlag from com_address_m where BPID="+cId+" ";
					logger.info("For checking Mobile Verification  Query: "+mobile);
					String email= "Select EmailVerificationFlag from gcd_customer_m where CUSTOMER_ID="+cId+" ";
					logger.info("For checking Email Verification  Query: "+email);
					String mobileCheck = ConnectionDAO.singleReturn(mobile);
					String emailCheck = ConnectionDAO.singleReturn(email);  
					logger.info("For checking Mobile Verification  mobileCheck: "+mobileCheck);
					logger.info("For checking Email Verification  emailCheck: "+emailCheck);
					
					if(mobileCheck.equalsIgnoreCase("N") && CommonFunction.checkNull(mobileEnablKey).equalsIgnoreCase("Y"))
					{
						request.setAttribute("sms", "mobileVerify");
						return mapping.getInputForward();
					}
					if(emailCheck.equalsIgnoreCase("N")  && CommonFunction.checkNull(emailEnablKey).equalsIgnoreCase("Y"))
					{
						request.setAttribute("sms", "emailVerify");
						return mapping.getInputForward();
					}
					}
					//Shashank Ends Here
*/				if(session.getAttribute("updateInMaker")==null && (statusCase!=null && statusCase.length()>0))
					{
						String query2 = "Select customer_id from gcd_customer_m_temp where customer_id="+cId;
						logger.info("Query for checking record is saved or not  :  "+query2);
						String custCheckInTemp = ConnectionDAO.singleReturn(query2);
						logger.info("custCheckInTemp *?*************************** "+custCheckInTemp);
						if(custCheckInTemp==null || custCheckInTemp.length()<=0)
						{
							request.setAttribute("sms", "saveFirst");
							return mapping.getInputForward();
						}
					}
					String q1="select count(1) from "+addressTableName+" where bpid='"+cId+"' and bptype='CS' and RELATIONSHIP_FLAG='N' ";
					int count=Integer.parseInt(ConnectionDAO.singleReturn(q1));
					if(count>0){
						logger.info("For checking Relation exist or not  Query: "+q1);
						request.setAttribute("sms", "Relation");
						return mapping.getInputForward();
					}
					String query1="Select COMMUNICATION_ADDRESS from "+addressTableName+" where BPID="+cId+" AND COMMUNICATION_ADDRESS='Y'";
					logger.info("Query for checking communication address  :  "+query1);
					addCheck = ConnectionDAO.singleReturn(query1);
					if(CommonFunction.checkNull(addCheck).trim().equalsIgnoreCase(""))
						addCheck="N";
					if(addCheck==null ||(addCheck!=null && addCheck.equals("N")))
					{
						logger.info("Query for checking communication address  :  "+query1);
						request.setAttribute("sms", "P");
						return mapping.getInputForward();	
					}
					if(addCheck!=null && addCheck.equals("Y"))
						status=corporateDao.setApproveStatus(cId,statusCase,userId,businessDate);
						
					if(session.getAttribute("updateInMaker")==null && (statusCase!=null && statusCase.length()>0))
					{
						String query = "Select customer_id from gcd_customer_m_temp where customer_id="+cId;
						String custCheckInTemp = ConnectionDAO.singleReturn(query);
						logger.info("custCheckInTemp *?*************************** "+custCheckInTemp);
						if(custCheckInTemp==null || custCheckInTemp.length()<=0)
							request.setAttribute("sms", "saveFirst");
						else
						{
							if(status>0)
							{
								request.setAttribute("status", "Customer is ready for Approved Successfully!!!");
								request.setAttribute("forwardFromUPMaker","forwardFromUPMaker");
								return mapping.findForward("success");
							}
							else
								request.setAttribute("sms", "P");
						}
					}
					else
					{		
						if(status>0)
						{
							request.setAttribute("status", "Customer is ready for Approved Successfully!!!");
							if(session.getAttribute("updateInMaker")!=null)
								request.setAttribute("updateInMaker","updateInMaker");
							else
								request.setAttribute("Individual","Individual");
							return mapping.findForward("success");
						}
						else
							request.setAttribute("sms", "N");
					}
				}
				else
				{
					request.setAttribute("sms", "noRecord");
					
				}
				
			return mapping.getInputForward();		
	}
}