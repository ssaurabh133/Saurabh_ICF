/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.ResourceBundle;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.FieldVerificationDAO;

import com.cp.dao.IndividualFinancialAnalysisDAO;

import com.cp.vo.ObligationVo;
import java.text.SimpleDateFormat;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 09-29-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class IndividualObligationProcessAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(IndividualObligationProcessAction.class.getName());
	DecimalFormat myFormatter = new DecimalFormat("###,###.####");
	ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");
	String dateForDisbursal=resource.getString("lbl.dateForDisbursal");
	public ActionForward saveIndividualObligationDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception
			{
			logger.info("In IndividualObligationProcessAction, saveIndividualObligationDetails()................. ");
		  	boolean flag =false;
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
		    String userId="";
			String bgDate="";
			
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bgDate=userobj.getBusinessdate();	
			}else{
				logger.info("here in saveIndividualObligationDetails method of IndividualObligationProcessAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}

		IndividualFinancialAnalysisDAO dao=(IndividualFinancialAnalysisDAO)DaoImplInstanceFactory.getDaoImplInstance(IndividualFinancialAnalysisDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 	// changed by asesh
		//IndividualFinancialAnalysisDAO dao = new IndividualFinancialAnalysisDAOImpl();
		DynaValidatorForm obligationDynaValidatorForm = (DynaValidatorForm) form;
		ObligationVo vo=new ObligationVo();
	    org.apache.commons.beanutils.BeanUtils.copyProperties(vo, obligationDynaValidatorForm);
	    

	    
	
		vo.setUserId(userId);
		vo.setBusinessDate(bgDate);
		if(session.getAttribute("financialDealId")!=null)
		{
			vo.setDealId(session.getAttribute("financialDealId").toString());
		}
		
		 SimpleDateFormat dateFormat1 = new SimpleDateFormat(dateForDisbursal);
		
				  Date maturityDate = dateFormat1.parse(vo.getMaturityDate()); 
				  Date businessDate = dateFormat1.parse(bgDate);
			
		if(maturityDate.after(businessDate) || maturityDate.equals(businessDate))
		{
			String obligationId=dao.saveIndividualObligation(vo);  
			if(CommonFunction.checkNull(obligationId).equalsIgnoreCase("saved") )
			{
				/*Added By arun For Foir/IRR not calculating Proper*/
				String deleteRatio=dao.deleteRatioAnalysis(vo.getDealId());
				logger.info("deleteRatio flag:----"+deleteRatio);
				/*Added By arun For Foir/IRR not calculating Proper*/
				request.setAttribute("sms", "S");
			}else if(CommonFunction.checkNull(obligationId).equalsIgnoreCase("already")){
				request.setAttribute("sms", "A");	
			}else{
				request.setAttribute("sms", "E");
			}
		}
		else
		{
		
			logger.info("maturity date less than business date");
			ArrayList obligationDetail =new ArrayList();
			obligationDetail.add(vo);
			request.setAttribute("obligationDetail", obligationDetail); 
			request.setAttribute("sms", "M");
			request.setAttribute("insert", "insert");
		}
		 String recStatus="";
				recStatus="P";
				
		ArrayList obligationList = dao.getObligationDetails("",vo.getDealId(),recStatus);
		if(obligationList.size()>0)
		{
			request.setAttribute("obligationList", obligationList);
		}
		ArrayList customerTypeList = dao.getCustomerTypeList(vo.getDealId());
	    ArrayList obligationTypeList = dao.getObligationTypeList();
	    ArrayList customerNameList = dao.getCustomerName(vo.getDealId(), "PRAPPL");
	    ArrayList typeOfLoanList = dao.getTypeOfLoan();
	    request.setAttribute("typeOfLoanList", typeOfLoanList);
	    request.setAttribute("customerNameList", customerNameList);
	    request.setAttribute("customerTypeList", customerTypeList);
	    request.setAttribute("obligationTypeList", obligationTypeList);
	    FieldVerificationDAO fieldVerificationdao=(FieldVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(FieldVerificationDAO.IDENTITY);
        logger.info("Implementation class: "+fieldVerificationdao.getClass()); 	// changed by asesh
		 //FieldVerificationDAO fieldVerificationdao=new FieldVerificationDAOImpl();	
		 ArrayList verifMethodList = fieldVerificationdao.getVerifMethodListList();
		    
		    request.setAttribute("verifMethodList", verifMethodList);
		logger.info("In obligationList size................ "+obligationList.size());
	  return mapping.getInputForward();
	}
	
	public ActionForward deleteIndividualObligationDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
	
		
		 logger.info("In deleteIndividualObligationDetails");
	
		    boolean flag =false;
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			if(userobj==null){
				logger.info("here in deleteIndividualObligationDetails method of IndividualObligationProcessAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
		 int status=0;
		
		 IndividualFinancialAnalysisDAO dao=(IndividualFinancialAnalysisDAO)DaoImplInstanceFactory.getDaoImplInstance(IndividualFinancialAnalysisDAO.IDENTITY);
			logger.info("Implementation class: "+dao.getClass()); 	// changed by asesh
		
		 String obligation[] = request.getParameterValues("chk");
		 for(int k=0;k<obligation.length;k++)
		 {
			
			 status = dao.deleteIndividualObligationDetails(obligation[k]);
		 }
		 
		 if(status>0)
		 {
			 request.setAttribute("sms", "Del"); 
			
  	  }
		  else
		  {
				 request.setAttribute("sms", "DE"); 
		  }
		 String dealId="";
		    if(session.getAttribute("financialDealId")!=null)
			 {
				 dealId = session.getAttribute("financialDealId").toString();
			 }
		    String recStatus="";
			recStatus="P";
			/*Added By arun For Foir/IRR not calculating Proper*/
			String deleteRatio=dao.deleteRatioAnalysis(dealId);
			logger.info("deleteRatio flag:----"+deleteRatio);
			/*Added By arun For Foir/IRR not calculating Proper*/
		 ArrayList obligationList = dao.getObligationDetails("",dealId,recStatus);
		 if(obligationList.size()>0)
		 {
			 request.setAttribute("obligationList", obligationList);
		 }
		 	IndividualFinancialAnalysisDAO indvidao=(IndividualFinancialAnalysisDAO)DaoImplInstanceFactory.getDaoImplInstance(IndividualFinancialAnalysisDAO.IDENTITY);
			logger.info("Implementation class: "+indvidao.getClass()); 	// changed by asesh
			//IndividualFinancialAnalysisDAO indvidao = new IndividualFinancialAnalysisDAOImpl();
			ArrayList customerTypeList = indvidao.getCustomerTypeList(dealId);
			ArrayList obligationTypeList = indvidao.getObligationTypeList();
			ArrayList customerNameList = indvidao.getCustomerName(dealId, "PRAPPL");
			ArrayList typeOfLoanList = indvidao.getTypeOfLoan();
		    request.setAttribute("typeOfLoanList", typeOfLoanList);
			request.setAttribute("customerNameList", customerNameList);
			request.setAttribute("customerTypeList", customerTypeList);
			request.setAttribute("obligationTypeList", obligationTypeList);
			FieldVerificationDAO fieldVerificationdao=(FieldVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(FieldVerificationDAO.IDENTITY);
	        logger.info("Implementation class: "+fieldVerificationdao.getClass()); 	// changed by asesh	
			ArrayList verifMethodList = fieldVerificationdao.getVerifMethodListList();
			request.setAttribute("verifMethodList", verifMethodList);
			
		return mapping.getInputForward();
	}
	
	public ActionForward getIndividualObligationDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
	
		 logger.info("In getIndividualObligationDetails .... ");
		
		  boolean flag =false;
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			if(userobj==null){
				logger.info("here in getIndividualObligationDetails method of IndividualObligationProcessAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag); 
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
		String obligationId="";
		 if(request.getParameter("obligationId")!=null)
		 {
			 obligationId=request.getParameter("obligationId");
		 }
		 IndividualFinancialAnalysisDAO dao=(IndividualFinancialAnalysisDAO)DaoImplInstanceFactory.getDaoImplInstance(IndividualFinancialAnalysisDAO.IDENTITY);
			logger.info("Implementation class: "+dao.getClass()); 	// changed by asesh
		 String dealId="";
		    if(session.getAttribute("financialDealId")!=null)
			 {
				 dealId = session.getAttribute("financialDealId").toString();
			 }
		    String recStatus="";
				recStatus="P";
		 String underwriter=CommonFunction.checkNull(session.getAttribute("underWriterViewData"));
		  logger.info("In obligationBehindDetail session attribute..underWriterViewData........"+underwriter); 
		
		  if(underwriter!=null && !underwriter.equalsIgnoreCase("")){
		    	recStatus="A";
		  }
		 ArrayList obligationList = dao.getObligationDetails(obligationId,dealId,recStatus);
		 if(obligationList.size()>0)
		 {
			 request.setAttribute("obligationDetail", obligationList); 
		 }
			
		     obligationList = dao.getObligationDetails("",dealId,recStatus);
			  if(obligationList.size()>0)
			  {
				  request.setAttribute("obligationList", obligationList);  
			  }
			  ArrayList customerTypeList = dao.getCustomerTypeList(dealId);
			    ArrayList obligationTypeList = dao.getObligationTypeList();
			    ArrayList customerNameList = dao.getCustomerName(dealId, "PRAPPL");
			    ArrayList typeOfLoanList = dao.getTypeOfLoan();
			    request.setAttribute("typeOfLoanList", typeOfLoanList);
			    request.setAttribute("customerNameList", customerNameList);
			    request.setAttribute("customerTypeList", customerTypeList);
			    request.setAttribute("obligationTypeList", obligationTypeList);
			    FieldVerificationDAO fieldVerificationdao=(FieldVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(FieldVerificationDAO.IDENTITY);
		        logger.info("Implementation class: "+fieldVerificationdao.getClass()); 	// changed by asesh	
				    ArrayList verifMethodList = fieldVerificationdao.getVerifMethodListList();
				    
				    request.setAttribute("verifMethodList", verifMethodList);
		 return mapping.getInputForward();
	}
	
	public ActionForward updateIndividualObligationDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
			 
		  	boolean flag =false;
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
		    String userId="";
			String bgDate="";
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bgDate=userobj.getBusinessdate();
			} else{
				logger.info("here in updateIndividualObligationDetail method of IndividualObligationProcessAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			IndividualFinancialAnalysisDAO dao=(IndividualFinancialAnalysisDAO)DaoImplInstanceFactory.getDaoImplInstance(IndividualFinancialAnalysisDAO.IDENTITY);
			logger.info("Implementation class: "+dao.getClass()); 	// changed by asesh
			DynaValidatorForm obligationDynaValidatorForm = (DynaValidatorForm) form;
			ObligationVo vo=new ObligationVo();
		    org.apache.commons.beanutils.BeanUtils.copyProperties(vo, obligationDynaValidatorForm);
	    
	
		   
			
			vo.setUserId(userId);
			vo.setBusinessDate(bgDate);
		
		String dealId="";
	    if(session.getAttribute("financialDealId")!=null)
		 {
			 dealId = session.getAttribute("financialDealId").toString();
			 vo.setDealId(dealId);
		 }
		if(request.getParameter("obligationId")!=null)
		{
			vo.setObligationId(request.getParameter("obligationId"));
			logger.info("obligationId....................."+request.getParameter("obligationId"));
		}
		
		 SimpleDateFormat dateFormat1 = new SimpleDateFormat(dateForDisbursal);
			
		  Date maturityDate = dateFormat1.parse(vo.getMaturityDate()); 
		  Date businessDate = dateFormat1.parse(bgDate);
	
		if(maturityDate.after(businessDate) || maturityDate.equals(businessDate))
		{
			String status=dao.updateIndividualObligation(vo);
		    if(CommonFunction.checkNull(status).equalsIgnoreCase("saved"))
		    {
		    	/*Added By arun For Foir/IRR not calculating Proper*/
				String deleteRatio=dao.deleteRatioAnalysis(dealId);
				logger.info("deleteRatio flag:----"+deleteRatio);
				/*Added By arun For Foir/IRR not calculating Proper*/
		    	request.setAttribute("sms", "S");
		    }else if(CommonFunction.checkNull(status).equalsIgnoreCase("already")){
		    	request.setAttribute("sms", "A");
		    } else{
		    	request.setAttribute("sms", "E");
		    }
		}
		else
		{
			logger.info("maturity date less than business date");
			ArrayList obligationDetail =new ArrayList();
			obligationDetail.add(vo);
			request.setAttribute("obligationDetail", obligationDetail);  
			request.setAttribute("sms", "M");
		}
	     
	    String recStatus="";
			recStatus="P";
			
	    ArrayList obligationList = dao.getObligationDetails("",dealId,recStatus);
	    if(obligationList.size()>0)
	    {
	    	request.setAttribute("obligationList", obligationList);
	    }
		ArrayList customerTypeList = dao.getCustomerTypeList(dealId);
		ArrayList obligationTypeList = dao.getObligationTypeList();
		ArrayList customerNameList = dao.getCustomerName(dealId, "PRAPPL");
		ArrayList typeOfLoanList = dao.getTypeOfLoan();
	    request.setAttribute("typeOfLoanList", typeOfLoanList);
		request.setAttribute("customerNameList", customerNameList);
		request.setAttribute("customerTypeList", customerTypeList);
		request.setAttribute("obligationTypeList", obligationTypeList);
		FieldVerificationDAO fieldVerificationdao=(FieldVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(FieldVerificationDAO.IDENTITY);
        logger.info("Implementation class: "+fieldVerificationdao.getClass()); 	// changed by asesh	
		ArrayList verifMethodList = fieldVerificationdao.getVerifMethodListList();
		request.setAttribute("verifMethodList", verifMethodList);
	  return mapping.getInputForward();
	}

}