/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.DocumentsVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.tabDependencyCheck.RefreshFlagValueInsert;
import com.tabDependencyCheck.RefreshFlagVo;

/**
 * MyEclipse Struts Creation date: 04-28-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action scope="request" validate="true"
 */
public class DocumentProcessAction extends DispatchAction {
	CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	//CreditProcessingDAO dao = new CreditProcessingDAOImpl();
	private static final Logger logger = Logger.getLogger(DocumentProcessAction.class.getName());
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */

	public ActionForward applicationDoc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		
		logger.info("In DocumentProcessAction(applicationDoc)");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in applicationDoc method of DocumentProcessAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		DynaValidatorForm DocumentAddDynaValidatorForm = (DynaValidatorForm) form;
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		DocumentsVo vo = new DocumentsVo();
		vo.setUserId(userobj.getUserId());

		vo.setBussinessDate(userobj.getBusinessdate());
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,
				DocumentAddDynaValidatorForm);
		CreditProcessingDAO detail=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+detail.getClass()); 			// changed by asesh
		//CreditProcessingDAO detail = new CreditProcessingDAOImpl();
		String sms = "";
		String dealId="";
		if(session.getAttribute("dealId")!=null)
		{
			dealId=session.getAttribute("dealId").toString();
			
			//Changes by Amit Starts
			vo.setTxnType("DC");
			vo.setStageId("PRS");
			vo.setDocType("APPL");
			vo.setTxnId(dealId);
			//Changes by Amit Ends
		}
		else if(session.getAttribute("maxId")!=null)
		{
			dealId=session.getAttribute("maxId").toString();
			
			//Changes by Amit Starts
			vo.setTxnType("DC");
			vo.setStageId("PRS");
			vo.setDocType("APPL");
			vo.setTxnId(dealId);
			//Changes by Amit Ends
		}
		String loanId = "";
		if (session.getAttribute("loanId") != null) {
			loanId = session.getAttribute("loanId").toString();
			
			//Changes by Amit Starts
			vo.setTxnType("LIM");
			vo.setStageId("PRD");
			vo.setDocType("APPL");
			vo.setTxnId(loanId);
			//Changes by Amit Ends
		} else if (session.getAttribute("maxIdInCM") != null) {
			loanId = session.getAttribute("maxIdInCM").toString();
			
			//Changes by Amit Starts
			vo.setTxnType("LIM");
			vo.setStageId("PRD");
			vo.setDocType("APPL");
			vo.setTxnId(loanId);
			//Changes by Amit Ends
		}
		boolean status = detail.saveDocument(vo,source);
		if (status) 
		{
			if(!CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
			{
				RefreshFlagVo vo1 = new RefreshFlagVo();
				if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
	    		{
					if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
					vo1.setRecordId(Integer.parseInt(dealId.trim()));
		    		vo1.setTabIndex(11);
		    		vo1.setModuleName("CP");
	    		}
				else
				{
					if(loanId!=null && !loanId.trim().equalsIgnoreCase(""))
					vo1.setRecordId(Integer.parseInt(loanId.trim()));
		    		vo1.setTabIndex(7);
		    		vo1.setModuleName("CM");
				}
	    		RefreshFlagValueInsert.updateRefreshFlag(vo1);
			}
			sms = "S";
		} 
		else {
			sms = "E";
		}
		request.setAttribute("sms", sms);
		logger.info("status: " + status);
		return mapping.findForward("application");
	}

	public ActionForward applicantDoc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		
		logger.info("In DocumentProcessAction(applicantDoc)");

		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in applicantDoc method of DocumentProcessAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		DynaValidatorForm DocumentAddDynaValidatorForm = (DynaValidatorForm) form;
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		DocumentsVo vo = new DocumentsVo();
		vo.setUserId(userobj.getUserId());
		vo.setBussinessDate(userobj.getBusinessdate());
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,
				DocumentAddDynaValidatorForm);
		CreditProcessingDAO detail=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+detail.getClass()); 			// changed by asesh
		String sms = "";
		String dealId="";
		if(session.getAttribute("dealId")!=null)
		{
			dealId=session.getAttribute("dealId").toString();
			
			//Changes by Amit Starts
			vo.setTxnType("DC");
			vo.setStageId("PRS");
			vo.setDocType("PRAPPL");
			vo.setTxnId(dealId);
			//Changes by Amit Ends
		}
		else if(session.getAttribute("maxId")!=null)
		{
			dealId=session.getAttribute("maxId").toString();
			
			//Changes by Amit Starts
			vo.setTxnType("DC");
			vo.setStageId("PRS");
			vo.setDocType("PRAPPL");
			vo.setTxnId(dealId);
			//Changes by Amit Ends
		}
		
		String loanId = "";
		if (session.getAttribute("loanId") != null) {
			loanId = session.getAttribute("loanId").toString();
			
			//Changes by Amit Starts
			vo.setTxnType("LIM");
			vo.setStageId("PRD");
			vo.setDocType("PRAPPL");
			vo.setTxnId(loanId);
			//Changes by Amit Ends
		} else if (session.getAttribute("maxIdInCM") != null) {
			loanId = session.getAttribute("maxIdInCM").toString();
			
			//Changes by Amit Starts
			vo.setTxnType("LIM");
			vo.setStageId("PRD");
			vo.setDocType("PRAPPL");
			vo.setTxnId(loanId);
			//Changes by Amit Ends
		}
		boolean status = detail.saveDocument(vo,source);
		if (status) {
			sms = "S";
			RefreshFlagVo vo1 = new RefreshFlagVo();
			
			if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
    		{
				if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
				vo1.setRecordId(Integer.parseInt(dealId.trim()));
	    		vo1.setTabIndex(11);
	    		vo1.setModuleName("CP");
    		}
			else
			{
				if(loanId!=null && !loanId.trim().equalsIgnoreCase(""))
				vo1.setRecordId(Integer.parseInt(loanId.trim()));
	    		vo1.setTabIndex(7);
	    		vo1.setModuleName("CM");
			}
    		RefreshFlagValueInsert.updateRefreshFlag(vo1);
		} else {
			sms = "E";
		}
		request.setAttribute("sms", sms);
		logger.info("In DocumentProcessAction(applicantDoc) status: "
				+ status);
		return mapping.findForward("applicant");
	}

	public ActionForward coApplicantDoc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		logger.info("In DocumentProcessAction(coApplicantDoc)");
		

		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in coApplicantDoc method of DocumentProcessAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		DynaValidatorForm DocumentAddDynaValidatorForm = (DynaValidatorForm) form;
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		DocumentsVo vo = new DocumentsVo();
		vo.setUserId(userobj.getUserId());
		vo.setBussinessDate(userobj.getBusinessdate());

		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,
				DocumentAddDynaValidatorForm);
		CreditProcessingDAO detail=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+detail.getClass()); 			// changed by asesh
		
		String sms = "";
		String dealId="";			
			if(session.getAttribute("dealId")!=null)
			{
				dealId=session.getAttribute("dealId").toString();
				
				//Changes by Amit Starts
				vo.setTxnType("DC");
				vo.setStageId("PRS");
				vo.setDocType("COAPPL");
				vo.setTxnId(dealId);
				//Changes by Amit Ends
			}
			else if(session.getAttribute("maxId")!=null)
			{
				dealId=session.getAttribute("maxId").toString();
				
				//Changes by Amit Starts
				vo.setTxnType("DC");
				vo.setStageId("PRS");
				vo.setDocType("COAPPL");
				vo.setTxnId(dealId);
				//Changes by Amit Ends
			}
			String loanId = "";
			if (session.getAttribute("loanId") != null) {
				loanId = session.getAttribute("loanId").toString();
				
				//Changes by Amit Starts
				vo.setTxnType("LIM");
				vo.setStageId("PRD");
				vo.setDocType("COAPPL");
				vo.setTxnId(loanId);
				//Changes by Amit Ends
			} else if (session.getAttribute("maxIdInCM") != null) {
				loanId = session.getAttribute("maxIdInCM").toString();
				
				//Changes by Amit Starts
				vo.setTxnType("LIM");
				vo.setStageId("PRD");
				vo.setDocType("COAPPL");
				vo.setTxnId(loanId);
				//Changes by Amit Ends
			}
			boolean status = detail.saveDocument(vo,source);
			if (status) {
				sms = "S";
				RefreshFlagVo vo1 = new RefreshFlagVo();
				if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
	    		{
					if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
					vo1.setRecordId(Integer.parseInt(dealId.trim()));
		    		vo1.setTabIndex(11);
		    		vo1.setModuleName("CP");
	    		}
				else
				{
					if(loanId!=null && !loanId.trim().equalsIgnoreCase(""))
					vo1.setRecordId(Integer.parseInt(loanId.trim()));
		    		vo1.setTabIndex(7);
		    		vo1.setModuleName("CM");
				}
	    		RefreshFlagValueInsert.updateRefreshFlag(vo1);
			
		} else {
			sms = "E";
		}
		request.setAttribute("sms", sms);
		logger.info("status: " + status);
		return mapping.findForward("coapplicant");
	}

	public ActionForward guarantorDoc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		logger.info("In DocumentProcessAction(guarantorDoc)");
		
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");		
		if(userobj==null){
			logger.info("here in guarantorDoc method of DocumentProcessAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		DynaValidatorForm DocumentAddDynaValidatorForm = (DynaValidatorForm) form;

		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		DocumentsVo vo = new DocumentsVo();
		vo.setUserId(userobj.getUserId());
		vo.setBussinessDate(userobj.getBusinessdate());

		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,
				DocumentAddDynaValidatorForm);
		CreditProcessingDAO detail=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+detail.getClass()); 			// changed by asesh
		
		String sms = "";
		String dealId="";
		if(session.getAttribute("dealId")!=null)
		{
			dealId=session.getAttribute("dealId").toString();
			
			//Changes by Amit Starts
			vo.setTxnType("DC");
			vo.setStageId("PRS");
			vo.setDocType("GUARANTOR");
			vo.setTxnId(dealId);
			//Changes by Amit Ends
		}
		else if(session.getAttribute("maxId")!=null)
		{
			dealId=session.getAttribute("maxId").toString();
			
			//Changes by Amit Starts
			vo.setTxnType("DC");
			vo.setStageId("PRS");
			vo.setDocType("GUARANTOR");
			vo.setTxnId(dealId);
			//Changes by Amit Ends
		}
		String loanId = "";
		if (session.getAttribute("loanId") != null) {
			loanId = session.getAttribute("loanId").toString();
			
			//Changes by Amit Starts
			vo.setTxnType("LIM");
			vo.setStageId("PRD");
			vo.setDocType("GUARANTOR");
			vo.setTxnId(loanId);
			//Changes by Amit Ends
		} else if (session.getAttribute("maxIdInCM") != null) {
			loanId = session.getAttribute("maxIdInCM").toString();
			
			//Changes by Amit Starts
			vo.setTxnType("LIM");
			vo.setStageId("PRD");
			vo.setDocType("GUARANTOR");
			vo.setTxnId(loanId);
			//Changes by Amit Ends
		}
		boolean status = detail.saveDocument(vo,source);
		if (status) {
			sms = "S";
			RefreshFlagVo vo1 = new RefreshFlagVo();
			if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
    		{
				if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
				vo1.setRecordId(Integer.parseInt(dealId.trim()));
	    		vo1.setTabIndex(11);
	    		vo1.setModuleName("CP");
    		}
			else
			{
				if(loanId!=null && !loanId.trim().equalsIgnoreCase(""))
				vo1.setRecordId(Integer.parseInt(loanId.trim()));
	    		vo1.setTabIndex(7);
	    		vo1.setModuleName("CM");
			}
    		RefreshFlagValueInsert.updateRefreshFlag(vo1);
		} else {
			sms = "E";
		}
		request.setAttribute("sms", sms);
		logger.info("status: " + status);
		return mapping.findForward("guarantor");
	}

	public ActionForward collateralDoc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		logger.info("In DocumentProcessAction(collateralDoc)");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in collateralDoc method of DocumentProcessAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		// TODO Auto-generated method stub
		DynaValidatorForm DocumentAddDynaValidatorForm = (DynaValidatorForm) form;

		DocumentsVo vo = new DocumentsVo();
		vo.setUserId(userobj.getUserId());
		vo.setBussinessDate(userobj.getBusinessdate());

		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,
				DocumentAddDynaValidatorForm);
		CreditProcessingDAO detail=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+detail.getClass()); 			// changed by asesh
		String sms = "";
		String dealId="";
		if(session.getAttribute("dealId")!=null)
		{
			dealId=session.getAttribute("dealId").toString();
			
			//Changes by Amit Starts
			vo.setTxnType("DC");
			vo.setStageId("PRS");
			vo.setDocType("COLLATERAL");
			vo.setTxnId(dealId);
			//Changes by Amit Ends
		}
		else if(session.getAttribute("maxId")!=null)
		{
			dealId=session.getAttribute("maxId").toString();
			
			//Changes by Amit Starts
			vo.setTxnType("DC");
			vo.setStageId("PRS");
			vo.setDocType("COLLATERAL");
			vo.setTxnId(dealId);
			//Changes by Amit Ends
		}
		String loanId = "";
		if (session.getAttribute("loanId") != null) {
			loanId = session.getAttribute("loanId").toString();
			
			//Changes by Amit Starts
			vo.setTxnType("LIM");
			vo.setStageId("PRD");
			vo.setDocType("COLLATERAL");
			vo.setTxnId(loanId);
			//Changes by Amit Ends
		} else if (session.getAttribute("maxIdInCM") != null) {
			loanId = session.getAttribute("maxIdInCM").toString();
			
			//Changes by Amit Starts
			vo.setTxnType("LIM");
			vo.setStageId("PRD");
			vo.setDocType("COLLATERAL");
			vo.setTxnId(loanId);
			//Changes by Amit Ends
		}
		boolean status = detail.saveDocument(vo,source);
		if (status) {
			sms = "S";
			RefreshFlagVo vo1 = new RefreshFlagVo();
			if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
    		{
				if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
				vo1.setRecordId(Integer.parseInt(dealId.trim()));
	    		vo1.setTabIndex(11);
	    		vo1.setModuleName("CP");
    		}
			else
			{
				if(loanId!=null && !loanId.trim().equalsIgnoreCase(""))
				vo1.setRecordId(Integer.parseInt(loanId.trim()));
	    		vo1.setTabIndex(7);
	    		vo1.setModuleName("CM");
			}
    		RefreshFlagValueInsert.updateRefreshFlag(vo1);
		} else {
			sms = "E";
		}
		request.setAttribute("sms", sms);
		logger.info("status: " + status);
		return mapping.findForward("collateral");
	}

	public ActionForward assetDoc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		logger.info("In DocumentProcessAction in assetDoc");
		

		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in assetDoc method of DocumentProcessAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		DynaValidatorForm DocumentAddDynaValidatorForm = (DynaValidatorForm) form;
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		DocumentsVo vo = new DocumentsVo();
		vo.setUserId(userobj.getUserId());
		vo.setBussinessDate(userobj.getBusinessdate());

		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,
				DocumentAddDynaValidatorForm);
		CreditProcessingDAO detail=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+detail.getClass()); 			// changed by asesh
		String sms = "";
		String dealId="";
		if(session.getAttribute("dealId")!=null)
		{
			dealId=session.getAttribute("dealId").toString();
			
			//Changes by Amit Starts
			vo.setTxnType("DC");
			vo.setStageId("PRS");
			vo.setDocType("ASSET");
			vo.setTxnId(dealId);
			//Changes by Amit Ends
		}
		else if(session.getAttribute("maxId")!=null)
		{
			dealId=session.getAttribute("maxId").toString();
			
			//Changes by Amit Starts
			vo.setTxnType("DC");
			vo.setStageId("PRS");
			vo.setDocType("ASSET");
			vo.setTxnId(dealId);
			//Changes by Amit Ends
		}
		String loanId = "";
		if (session.getAttribute("loanId") != null) {
			loanId = session.getAttribute("loanId").toString();
			
			//Changes by Amit Starts
			vo.setTxnType("LIM");
			vo.setStageId("PRD");
			vo.setDocType("ASSET");
			vo.setTxnId(loanId);
			//Changes by Amit Ends
		} else if (session.getAttribute("maxIdInCM") != null) {
			loanId = session.getAttribute("maxIdInCM").toString();
			
			//Changes by Amit Starts
			vo.setTxnType("LIM");
			vo.setStageId("PRD");
			vo.setDocType("ASSET");
			vo.setTxnId(loanId);
			//Changes by Amit Ends
		}
		boolean status = detail.saveDocument(vo,source);
		if (status) {
			sms = "S";
			RefreshFlagVo vo1 = new RefreshFlagVo();
			if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
    		{
				if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
				vo1.setRecordId(Integer.parseInt(dealId.trim()));
	    		vo1.setTabIndex(11);
	    		vo1.setModuleName("CP");
    		}
			else
			{
				if(loanId!=null && !loanId.trim().equalsIgnoreCase(""))
				vo1.setRecordId(Integer.parseInt(loanId.trim()));
	    		vo1.setTabIndex(7);
	    		vo1.setModuleName("CM");
			}
    		RefreshFlagValueInsert.updateRefreshFlag(vo1);
		} else {
			sms = "E";
		}
		request.setAttribute("sms", sms);
		logger.info("status: " + status);
		return mapping.findForward("asset");
	}
	
	//start by sachin
	
	public ActionForward applicationDealDoc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 			// changed by asesh
		//CreditProcessingDAO dao = new CreditProcessingDAOImpl();
		
		logger.info("In DocumentBehindAction(applicationDocs)");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in applicationDealDocs method of DocumentProcessAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String commonId = "";
		
		if (session.getAttribute("loanId") != null) {
			
			commonId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxIdInCM") != null) {
			
			commonId = session.getAttribute("maxIdInCM").toString();
		}

		

		logger.info("In DocumentProcessAction(applicationDocs) loan/deal id: "+ commonId);

//		if (session.getAttribute("cmAuthor") != null
//				&& !session.getAttribute("cmAuthor").equals("")) {
//			request.setAttribute("viewDeal", "cmAuthor");
//		}
		//String entityType = request.getParameter("entityType");
		//logger.info("In DocumentBehindAction(applicationDocs) entityType: "+ entityType);
		ArrayList documents = dao.getApplicationDealDocuments( "APPL",commonId,"PRS", "DC");
		logger.info("documents Size: " + documents.size());
		request.setAttribute("calDoc", documents.size());
		if(documents.size()>0){
			request.setAttribute("dataFound","dataFound");
		}
		request.setAttribute("documents", documents);
		
		//Changes By Amit Starts
		ArrayList additionalDocuments = dao.getAdditionalDealDocs("APPL",commonId,"PRS", "DC");
		request.setAttribute("psize",additionalDocuments.size());
		if(additionalDocuments.size()>0)
		{
			request.setAttribute("additionalDocuments",additionalDocuments);
		}
		//Changes By Amit Ends
		
		String procval="";
		if(session.getAttribute("procvalue")!=null && !CommonFunction.checkNull(session.getAttribute("procvalue")).equalsIgnoreCase(""))
		{
			procval=CommonFunction.checkNull(session.getAttribute("procvalue").toString());
		}
		
		  if(!(procval.equalsIgnoreCase("S")))
			{
			  request.setAttribute("procval", procval);
			}
			session.removeAttribute("procvalue");

		return mapping.findForward("applicationDealDocs");
	}
	
	public ActionForward applicantDealDocs(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		logger.info("In DocumentProcessAction(applicantDealDocs)");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in applicantDealDocs method of DocumentProcessAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		String commonId = "";
		String stage = "";
		String txnType = "";
		if (session.getAttribute("loanId") != null) {
			stage = "PRS";
			txnType = "DC";
			commonId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxIdInCM") != null) {
			stage = "PRS";
			txnType = "DC";
			commonId = session.getAttribute("maxIdInCM").toString();
		}

		

		logger.info("In DocumentProcssAction(applicantDocs) loan/deal id: "
				+ commonId + ", stage: " + stage + ",Txn Type: " + txnType);

//		if (session.getAttribute("cmAuthor") != null
//				&& !session.getAttribute("cmAuthor").equals("")) {
//			request.setAttribute("viewDeal", "cmAuthor");
//		}
		
		ArrayList documents = dao.getAllApplicantDealDocs("PRAPPL", commonId,stage, txnType);
		logger.info("documents Size: " + documents.size());
		request.setAttribute("calDoc", documents.size());
		if(documents.size()>0){
			request.setAttribute("dataFound","dataFound");
		}
		request.setAttribute("documents", documents);

		//Changes By Amit Starts
		ArrayList additionalDocuments = dao.getAdditionalDealDocs("PRAPPL", commonId,stage, txnType);
		request.setAttribute("psize",additionalDocuments.size());
		if(additionalDocuments.size()>0)
		{
			request.setAttribute("additionalDocuments",additionalDocuments);
		}
		//Changes By Amit Ends
		
		return mapping.findForward("applicantDealDocs");
	}

	public ActionForward coApplicantDealDocs(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		logger.info("In DocumentBehindAction(coApplicantDocs)");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in coApplicantDocs method of DocumentBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		String commonId = "";
		String stage = "";
		String txnType = "";
		if (session.getAttribute("loanId") != null) {
			stage = "PRS";
			txnType = "DC";
			commonId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxIdInCM") != null) {
			stage = "PRS";
			txnType = "DC";
			commonId = session.getAttribute("maxIdInCM").toString();
		}

		
		logger.info("In DocumentProcessAction(coApplicantDealDocs) loan/deal id: "
						+ commonId + ", stage: " + stage + ",Txn Type: "
						+ txnType);

//		if (session.getAttribute("cmAuthor") != null
//				&& !session.getAttribute("cmAuthor").equals("")) {
//			request.setAttribute("viewDeal", "cmAuthor");
//		}
		
		ArrayList documents = dao.getAllApplicantDealDocs("COAPPL", commonId,
				stage, txnType);
		logger.info("documents Size: " + documents.size());
		request.setAttribute("calDoc", documents.size());
		if(documents.size()>0){
			request.setAttribute("dataFound","dataFound");
		}
		request.setAttribute("documents", documents);

		
		//Changes By Amit Starts
		ArrayList additionalDocuments = dao.getAdditionalDealDocs("COAPPL", commonId,stage, txnType);
		request.setAttribute("psize",additionalDocuments.size());
		if(additionalDocuments.size()>0)
		{
			request.setAttribute("additionalDocuments",additionalDocuments);
		}
		//Changes By Amit Ends
		
		return mapping.findForward("coApplicantDealDocs");
	}

	public ActionForward guarantorDealDocs(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		logger.info("In DocumentProcessAction(guarantorDocs)");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in guarantorDocs method of DocumentBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		String commonId = "";
		String stage = "";
		String txnType = "";
		if (session.getAttribute("loanId") != null) {
			stage = "PRS";
			txnType = "DC";
			commonId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxIdInCM") != null) {
			stage = "PRS";
			txnType = "DC";
			commonId = session.getAttribute("maxIdInCM").toString();
		}

		
		logger.info("In DocumentProcessAction(guarantorDealDocs) loan/deal id: "
				+ commonId + ", stage: " + stage + ",Txn Type: " + txnType);

//		if (session.getAttribute("cmAuthor") != null
//				&& !session.getAttribute("cmAuthor").equals("")) {
//			request.setAttribute("viewDeal", "cmAuthor");
//		}
		String entityType = request.getParameter("entityType");
		logger.info("In DocumentProcessAction(guarantorDealDocs) entityType: "
				+ entityType);
		ArrayList documents = dao.getAllApplicantDealDocs("GUARANTOR", commonId,
				stage, txnType);
		logger.info("documents Size: " + documents.size());
		request.setAttribute("calDoc", documents.size());
		if(documents.size()>0){
			request.setAttribute("dataFound","dataFound");
		}
		request.setAttribute("documents", documents);
		
		//Changes By Amit Starts
		ArrayList additionalDocuments = dao.getAdditionalDealDocs("GUARANTOR", commonId,stage, txnType);
		request.setAttribute("psize",additionalDocuments.size());
		if(additionalDocuments.size()>0)
		{
			request.setAttribute("additionalDocuments",additionalDocuments);
		}
		//Changes By Amit Ends
		
		return mapping.findForward("guarantorDealDocs");
	}

	public ActionForward collateralDealDocs(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		logger.info("In DocumentBehindAction(collateralDocs)");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in collateralDocs method of DocumentBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		String commonId = "";
		String stage = "";
		String txnType = "";
		if (session.getAttribute("loanId") != null) {
			stage = "PRS";
			txnType = "DC";
			commonId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxIdInCM") != null) {
			stage = "PRS";
			txnType = "DC";
			commonId = session.getAttribute("maxIdInCM").toString();
		}

		
		logger.info("In DocumentPocessAction(collateraldealDocs) loan/deal id: "
				+ commonId + ", stage: " + stage + ",Txn Type: " + txnType);

//		if (session.getAttribute("cmAuthor") != null
//				&& !session.getAttribute("cmAuthor").equals("")) {
//			request.setAttribute("viewDeal", "cmAuthor");
//		}
		//String entityType = request.getParameter("entityType");
		//logger.info("In DocumentBehindAction(collateralDocs) entityType: "
		//		+ entityType);
		ArrayList documents = dao.getAssetCollateralDealDocuments("COLLATERAL",
				commonId, stage, txnType);
		logger
				.info("In DocumentProcessAction(collateralDealDocs) documents Size: "
						+ documents.size());
		request.setAttribute("calDoc", documents.size());
		if(documents.size()>0){
			request.setAttribute("dataFound","dataFound");
		}
		request.setAttribute("documents", documents);

		//Changes By Amit Starts
		ArrayList additionalDocuments = dao.getAdditionalDealDocs("COLLATERAL", commonId,stage, txnType);
		request.setAttribute("psize",additionalDocuments.size());
		if(additionalDocuments.size()>0)
		{
			request.setAttribute("additionalDocuments",additionalDocuments);
		}
		//Changes By Amit Ends
		
		return mapping.findForward("collateralDealDocs");
	}

	public ActionForward assetDealDocs(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		logger.info("In DocumentBehindAction(assetDocs)");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in assetDocs method of DocumentBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		String commonId = "";
		String stage = "";
		String txnType = "";
		if (session.getAttribute("loanId") != null) {
			stage = "PRS";
			txnType = "DC";
			commonId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxIdInCM") != null) {
			stage = "PRS";
			txnType = "DC";
			commonId = session.getAttribute("maxIdInCM").toString();
		}

				logger.info("In DocumentProcessAction(assetDocs) loan/deal id: "
				+ commonId + ", stage: " + stage + ",Txn Type: " + txnType);

//		if (session.getAttribute("cmAuthor") != null
//				&& !session.getAttribute("cmAuthor").equals("")) {
//			request.setAttribute("viewDeal", "cmAuthor");
//		}
		//String entityType = request.getParameter("entityType");
		//logger.info("In DocumentBehindAction(assetDocs) entityType: "
		//		+ entityType);
		ArrayList documents = dao.getAssetCollateralDealDocuments("ASSET",
				commonId, stage, txnType);
		logger.info("In DocumentProcessAction(assetDealDocs) documents Size: "
				+ documents.size());
		request.setAttribute("calDoc", documents.size());
		if(documents.size()>0){
			request.setAttribute("dataFound","dataFound");
		}
		request.setAttribute("documents", documents);

		//Changes By Amit Starts
		ArrayList additionalDocuments = dao.getAdditionalDealDocs("ASSET", commonId,stage, txnType);
		request.setAttribute("psize",additionalDocuments.size());
		if(additionalDocuments.size()>0)
		{
			request.setAttribute("additionalDocuments",additionalDocuments);
		}
		//Changes By Amit Ends
		
		return mapping.findForward("assetDealDocs");
	}


	
	//sachin
}