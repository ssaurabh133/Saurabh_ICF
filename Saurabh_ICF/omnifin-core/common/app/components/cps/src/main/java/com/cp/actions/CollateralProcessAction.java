/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.cm.dao.CreditManagementDAO;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.CollateralVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.tabDependencyCheck.RefreshFlagValueInsert;
import com.tabDependencyCheck.RefreshFlagVo;

/** 
 * MyEclipse Struts
 * Creation date: 04-20-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class CollateralProcessAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(CollateralProcessAction.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward saveCollateralDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception	{
		    		    	    	logger.info("In CollateralProcessAction(saveCollateralDetails) ");
	    	HttpSession session = request.getSession();
	    	boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
	        String userId="";
			String bDate="";
			String vehicalUpdt="";
			 String assetClass=request.getParameter("assetClass");
			 String ornamentType=request.getParameter("lbxOrnamentType");
			 String lbxOrnamentStandard=request.getParameter("lbxOrnamentStandard");
			if(userobj!=null)
			{   	userId=userobj.getUserId();
					bDate=userobj.getBusinessdate();					
			}else{
				logger.info("here in saveCollateralDetails method of CollateralProcessAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			//code added by neeraj
			String source="NE";
			String functionId=(String)session.getAttribute("functionId");
			int funid=Integer.parseInt(functionId);		
			if(funid==4000122 || funid==4000123)
				source="ED";
			//neeraj space end
			
		    DynaValidatorForm collateralDynaValidatorForm = (DynaValidatorForm)form; 	
		 	ArrayList fetchCollateralDetails=new ArrayList();
	        CollateralVo sh = new CollateralVo();
	        
	        
	        org.apache.commons.beanutils.BeanUtils.copyProperties(sh, collateralDynaValidatorForm);
	        sh.setSource(source);

	        boolean status=false;	      
	        String retStr="";
	       
		      sh.setUserId(""+userId);
		      sh.setMakerDate(bDate);
		      	CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
		        logger.info("Implementation class: "+service.getClass()); 			// changed by asesh
		        //CreditProcessingDAO service = new CreditProcessingDAOImpl();	
		        logger.info("sh.getMake_model_id()"+sh.getMake_model_id());
				 logger.info("sh.getColltype1()"+sh.getColltype1());
		    
		    String loanId = "";
			
				if(session.getAttribute("loanId")!=null)
				{
					
					loanId=session.getAttribute("loanId").toString();
				}
				else if(session.getAttribute("maxIdInCM")!=null)
				{
					loanId=session.getAttribute("maxIdInCM").toString();
				}
		    String dealId = "";
			
			
			if(session.getAttribute("dealId")!=null)
			{
				
				dealId=session.getAttribute("dealId").toString();
			}
			else if(session.getAttribute("maxId")!=null)
			{
				dealId=session.getAttribute("maxId").toString();
			}
			
			
			logger.info("In CollateralProcessAction(saveCollateralDetails) dealId " +dealId);
			logger.info("In CollateralProcessAction(saveCollateralDetails) ornamentType " +ornamentType);
			logger.info("In CollateralProcessAction(saveCollateralDetails) ornamentStandard " +lbxOrnamentStandard);
		    String sms="";		   			   
			logger.info("In CollateralProcessAction(saveCollateralDetails) Value of Assets Id is............................ ="+loanId);		
			sh.setDealId(dealId);
			sh.setLoanId(loanId);
			sh.setOrnamentType(ornamentType);
			sh.setOrnamentStandard(lbxOrnamentStandard);
			// add by saorabh
			String productID = CommonFunction.checkNull(session.getAttribute("productId"));
			String productLoanType = service.getProductLoanType(productID);
						String vatValuePercent = service.getVatValueStateWise(sh.getLbxmachineSupplier());
						logger.info("productLoanType------------"+productLoanType);
						if(productLoanType.equalsIgnoreCase("HP")){
						double vatD=0.0;
						double assetsCollateralValueD=0.0;
						double vatAmount=0.0;
						if(!vatValuePercent.equalsIgnoreCase(""))
						{
							vatD =  Double.parseDouble(vatValuePercent);
							assetsCollateralValueD = Double.parseDouble(sh.getAssetsCollateralValue().replace(",", ""));
							vatAmount = (assetsCollateralValueD*vatD)/100;
							sh.setVatPercent(vatD+"");
							sh.setVatAmount(vatAmount+"");
						}
						
						logger.info("Vat in Percentage --------"+vatD+"---------vat amount =---------"+vatAmount);
						String serviceTax = service.getServiceTaxStateWise(sh.getLbxmachineSupplier());
						logger.info("serviceTaxPercent --------"+serviceTax);
						sh.setServiceTax(serviceTax);
						}
						//end by saorabh
			if(loanId!=null && !loanId.equalsIgnoreCase(""))
			{			
			sh.setPropertyOwnerGcdId(sh.getPropertyOwner());
			sh.setPropertyOwner(null);
			}
//change by richa
			
			String var=request.getParameter("strChasisFlag");
			String enginNo="0";
			String chesisNoCheck="0";
			String regNo="0";
			String chasisFlag="N";
			String engineFlag="N";
			String regNFlag="N";
			if(CommonFunction.checkNull(var).equalsIgnoreCase(""))
			{
			
			logger.info("strChasisFlag:::"+var);
			if(!CommonFunction.checkNull(sh.getVehicleChesisNo()).equalsIgnoreCase("")||!CommonFunction.checkNull(sh.getEngineNumber()).equalsIgnoreCase("")||!CommonFunction.checkNull(sh.getVehicleRegNo()).equalsIgnoreCase(""))
			{
				logger.info("in if :::"+sh.getVehicleChesisNo());
				
				
				if(!CommonFunction.checkNull(sh.getVehicleChesisNo()).equalsIgnoreCase(""))
				{
					logger.info("in if for chasis:::"+sh.getVehicleChesisNo());
					chesisNoCheck=service.checkChesisNoVehicle(sh,source);
					if(CommonFunction.checkNull(chesisNoCheck).equalsIgnoreCase("0"))
					{
					chasisFlag="N";
					}
					else{
						chasisFlag="Y";
					}
				}
				if(!CommonFunction.checkNull(sh.getEngineNumber()).equalsIgnoreCase(""))
				{
					logger.info("in if for engine:::"+sh.getEngineNumber());
					enginNo=service.checkEnginNoVehicle(sh,source);
					if(CommonFunction.checkNull(enginNo).equalsIgnoreCase("0"))
					{
						engineFlag="N";
					}
					else{
						engineFlag="Y";
					}
				}
				if(!CommonFunction.checkNull(sh.getVehicleRegNo()).equalsIgnoreCase(""))
				{
					logger.info("in if for REgNo:::"+sh.getVehicleRegNo());
					regNo=service.checkRegNoVehicle(sh,source);
					if(CommonFunction.checkNull(regNo).equalsIgnoreCase("0"))
					{
						regNFlag="N";
					}
					else{
						regNFlag="Y";
					}
					logger.info("regNFlag for REgNo:::"+regNFlag);
				}
				if(CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&!CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&!CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y"))
				{
					vehicalUpdt="CHASIS";
					request.setAttribute("vehicalUpdt", vehicalUpdt);
					retStr="checkInDealDublicate";
					request.setAttribute("action","action");
		    		request.setAttribute("actype", "ASSET");
		    		request.setAttribute("ASSET","ASSET");
					fetchCollateralDetails.add(sh);
			        request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
			    	return mapping.findForward(retStr);  
				}
				if(!CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&!CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y"))
				{
					vehicalUpdt="ENGINE";
					request.setAttribute("vehicalUpdt", vehicalUpdt);
					retStr="checkInDealDublicate";
					request.setAttribute("action","action");
		    		request.setAttribute("actype", "ASSET");
		    		request.setAttribute("ASSET","ASSET");
					fetchCollateralDetails.add(sh);
			        request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
			    	return mapping.findForward(retStr);  
				}
				if(!CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&!CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y"))
				{
					vehicalUpdt="REGNO";
					request.setAttribute("vehicalUpdt", vehicalUpdt);
					retStr="checkInDealDublicate";
					request.setAttribute("action","action");
		    		request.setAttribute("actype", "ASSET");
		    		request.setAttribute("ASSET","ASSET");
					fetchCollateralDetails.add(sh);
			        request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
			    	return mapping.findForward(retStr);  
				}
				if(!CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y"))
				{
					vehicalUpdt="ENGINE_REGNO";
					request.setAttribute("vehicalUpdt", vehicalUpdt);
					retStr="checkInDealDublicate";
					request.setAttribute("action","action");
		    		request.setAttribute("actype", "ASSET");
		    		request.setAttribute("ASSET","ASSET");
					fetchCollateralDetails.add(sh);
			        request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
			    	return mapping.findForward(retStr);  
				}
				if(CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&!CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y"))
				{
					vehicalUpdt="CHASIS_REGNO";
					request.setAttribute("vehicalUpdt", vehicalUpdt);
					retStr="checkInDealDublicate";
					request.setAttribute("action","action");
		    		request.setAttribute("actype", "ASSET");
		    		request.setAttribute("ASSET","ASSET");
					fetchCollateralDetails.add(sh);
			        request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
			    	return mapping.findForward(retStr);  
				}
				if(CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&!CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y"))
				{
					vehicalUpdt="CHASIS_ENGINE";
					request.setAttribute("vehicalUpdt", vehicalUpdt);
					retStr="checkInDealDublicate";
					request.setAttribute("action","action");
		    		request.setAttribute("actype", "ASSET");
		    		request.setAttribute("ASSET","ASSET");
					fetchCollateralDetails.add(sh);
			        request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
			    	return mapping.findForward(retStr);  
				}
				
				if(CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y"))
				{
					vehicalUpdt="CHASIS_ENGINE_REGNO";
					request.setAttribute("vehicalUpdt", vehicalUpdt);
					retStr="checkInDealDublicate";
					request.setAttribute("action","action");
		    		request.setAttribute("actype", "ASSET");
		    		request.setAttribute("ASSET","ASSET");
					fetchCollateralDetails.add(sh);
			        request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
			    	return mapping.findForward(retStr);  
				}
			}
			
			else
			{
				chesisNoCheck="1";
				enginNo="1";
				regNo="1";
				//vehicalUpdt="SAVE";
				//request.setAttribute("vehicalUpdt", vehicalUpdt);
			}
			}
			String checkRefinaceReqInfo = service.checkRefinaceReqInfo();
			request.setAttribute("checkRefinaceReqInfo", checkRefinaceReqInfo);
			if(!CommonFunction.checkNull(sh.getMake_model_id()).equalsIgnoreCase("")&& CommonFunction.checkNull(sh.getColltype1()).equalsIgnoreCase("VEHICLE"))
			{
				
			   status =  service.saveCollateralDetails(sh);
			   logger.info("In CollateralProcessAction(saveCollateralDetails) Sucessfully Saved.................."+status);              
			   if(status)
			   {   	
				   // add by saorabh
				   if(productLoanType.equalsIgnoreCase("HP"))
				    service.vatDetail(sh);
				   // end by saorabh
				    ArrayList<Object> showCollateralDetails = service.getCollateralDetailsAll(dealId);	
				    logger.info("showCollateralDetails"+showCollateralDetails);
				    request.setAttribute("showCollateralDetails", showCollateralDetails);
					sms="S";
					
					RefreshFlagVo vo = new RefreshFlagVo();
		    		
		    		if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
		    		{
		    			vo.setTabIndex(10);
		    			if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
		    				vo.setRecordId(Integer.parseInt(dealId.trim()));
			    		vo.setModuleName("CP");
		    		}
		    		else
		    		{
		    			vo.setTabIndex(2);
		    			if(loanId!=null && !loanId.trim().equalsIgnoreCase(""))
		    				vo.setRecordId(Integer.parseInt(loanId.trim()));
			    		vo.setModuleName("CM");
		    		}
		    		
		    		RefreshFlagValueInsert.updateRefreshFlag(vo);
											
				}			 
				 
			  else
			  {
				        fetchCollateralDetails.add(sh);
				        request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
						sms="E";
						
			   }
			}
			else if(!(CommonFunction.checkNull(sh.getColltype1()).equalsIgnoreCase("VEHICLE")))
			{
				int count=0;
				sh.setOrnamentType(sh.getOrnamentType());
				sh.setOrnamentStandard(sh.getOrnamentStandard());
				//Parvez for gold ornament check
				if((CommonFunction.checkNull(sh.getColltype1()).equalsIgnoreCase("GOLD"))){
					
					if(funid==4000106 ){
						
						count=Integer.parseInt(service.checkDuplicateGoldOrnamentForLoan(loanId,ornamentType,lbxOrnamentStandard));
					
					
					}else if ((CommonFunction.checkNull(sh.getColltype1()).equalsIgnoreCase("GOLD"))) {
					
					count=Integer.parseInt(service.checkDuplicateGoldOrnament(dealId,ornamentType,lbxOrnamentStandard));
					
					if(count>1){
						request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
						sms="EX";
						
			
					}
					}

					}
				
				//parvez end for gold ornament
				if(count==0){
				status =  service.saveCollateralDetails(sh);
				   logger.info("In CollateralProcessAction(saveCollateralDetails) Sucessfully Saved.................."+status);              
				   if(status)
				   {   		
					   // add by saorabh
					   if(productLoanType.equalsIgnoreCase("HP"))
					   service.vatDetail(sh);
					   // end by saorabh
					    ArrayList<Object> showCollateralDetails = service.getCollateralDetailsAll(dealId);	
					    logger.info("showCollateralDetails"+showCollateralDetails);
					    request.setAttribute("showCollateralDetails", showCollateralDetails);
						sms="S";
						
						RefreshFlagVo vo = new RefreshFlagVo();
			    		
			    		if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
			    		{
			    			vo.setTabIndex(10);
			    			if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
			    				vo.setRecordId(Integer.parseInt(dealId.trim()));
				    		vo.setModuleName("CP");
			    		}
			    		else
			    		{
			    			vo.setTabIndex(2);
			    			if(loanId!=null && !loanId.trim().equalsIgnoreCase(""))
			    				vo.setRecordId(Integer.parseInt(loanId.trim()));
				    		vo.setModuleName("CM");
			    		}
			    		
			    		RefreshFlagValueInsert.updateRefreshFlag(vo);
												
					}			 
					 
				  else
				  {
					        fetchCollateralDetails.add(sh);
					        request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
							sms="E";
							
				   }
				
				   
				 
			}
			else
			{
				 fetchCollateralDetails.add(sh);
			     request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
				 sms="M";
							
			}
			}
            
			
	
			    request.setAttribute("sms", sms);	
			  
				//change by sachin
				CreditManagementDAO dao=(CreditManagementDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditManagementDAO.IDENTITY);
			     logger.info("Implementation class: "+dao.getClass());

				//end by sachin
			    
//			    CreditManagementDAO dao = new CreditManagementDAOImpl();
			  
				ArrayList asset = dao.selectAsset(loanId,source);
				request.setAttribute("asset", asset);
			if(loanId!=null && !loanId.equalsIgnoreCase(""))		
			{
				retStr="saveInLoan";
			}
			else if(dealId!=null && !dealId.equalsIgnoreCase(""))
			{
				retStr="saveInDeal";
				
			}
			logger.info("sms: "+sms);
			return mapping.findForward(retStr);                     

	}		
	
	       public ActionForward fetchCollateralDetailsAll(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception { 
	    	   
	    	 logger.info("In CollateralProcessAction(fetchCollateralDetailsAll)");   
	    	HttpSession session = request.getSession();
	    	boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			if(userobj==null){
				logger.info("here in fetchCollateralDetailsAll method of CollateralProcessAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
	    	

			//code added by neeraj
			String source="NE";
			String functionId=(String)session.getAttribute("functionId");
			int funid=Integer.parseInt(functionId);		
			if(funid==4000122 || funid==4000123)
				source="ED";
			//neeraj space end
					
					
			CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	        logger.info("Implementation class: "+service.getClass()); 			// changed by asesh	    	
		     //HttpSession session = request.getSession();	
			String dealId = "";
			String loanId="";
			 ArrayList<Object> propertyOwnerList=null;

			if (session.getAttribute("dealId") != null) {

				dealId = session.getAttribute("dealId").toString();
			} else if (session.getAttribute("maxId") != null) {
				dealId = session.getAttribute("maxId").toString();
			}
			
			if(session.getAttribute("loanId")!=null)
			{
				loanId =  session.getAttribute("loanId").toString();
			}
			else if(session.getAttribute("maxIdInCM")!=null)
			{
				loanId =  session.getAttribute("maxIdInCM").toString();
			}
			if(dealId!=null && !dealId.equalsIgnoreCase(""))
			{
				request.setAttribute("dealAsset","dealAsset");
				 
			}
			if(loanId!=null && !loanId.equalsIgnoreCase(""))
			{
						
				request.setAttribute("loanAsset","loanAsset");

			}
			if((dealId!=null && !dealId.equalsIgnoreCase("")) && (loanId!=null && !loanId.equalsIgnoreCase("")))
			{
				request.setAttribute("dealLoanAsset","dealLoanAsset");
			}
			logger.info("dealId	"+dealId);
			logger.info("loanId"+loanId);
        	 String primaryId = request.getParameter("primaryId");	
	    	 String propValue = request.getParameter("propertyType");
	    	 String v2 = request.getParameter("v2");	
//Prashant
	    	 String productCat = request.getParameter("productCat");
	    	 String actype = request.getParameter("actype");
	    	 logger.info("actype .............. "+actype);
	    	 request.setAttribute("productCat", productCat);
	    	 request.setAttribute("primaryId", primaryId);
			 request.setAttribute("v2", v2);
	    	 logger.info("In CollateralProcessAction(fetchCollateralDetailsAll) Value of Property Type in Action is="+propValue+" &primaryId="+primaryId+" &productCat="+productCat);	
	    	 ArrayList<Object> fetchCollateralDetails = service.fetchCollateralDetailsAll(primaryId,propValue,source);
	    	 request.setAttribute("fetchCollateralDetails", fetchCollateralDetails);
	    	 ArrayList<Object> securityType=service.getSecurityType();
			 request.setAttribute("securityType",securityType);
			 ArrayList<Object> propertyType=service.getPropertyType();
			 request.setAttribute("propertyType",propertyType);
			 
			//start by sachin 
			 ArrayList<Object> propertyStatus=service.getPropertyStatus();
			 request.setAttribute("propertyStatus",propertyStatus);
			 ArrayList<Object> propertyTitle=service.getPropertytTitle();
			 request.setAttribute("propertyTitle",propertyTitle);
			 
			 CollateralVo ownerList =(CollateralVo)fetchCollateralDetails.get(0);
			 String propertyOwner=ownerList.getPropertyOwner();
			 String propertyOwnerGcId=ownerList.getPropertyOwnerGcdId();
			 logger.info("propertyOwner"+propertyOwner);
			 logger.info("propertyOwnerGcId"+propertyOwnerGcId);
			 ArrayList showInsuranceRelWithNominee = service.showInsuranceRelWithNominee();
			 request.setAttribute("showInsuranceRelWithNominee",showInsuranceRelWithNominee);
			 //amandeep starts
			 	String checkRefinaceReqInfo = service.checkRefinaceReqInfo();
				request.setAttribute("checkRefinaceReqInfo", checkRefinaceReqInfo);
			 
			 //amandeep ends
			 
			 if(dealId!=null && !dealId.equalsIgnoreCase(""))
			 {
			     if(propertyOwner!=null && !propertyOwner.equalsIgnoreCase(""))
			     {
			    	 ownerList.setPropertyOwner(propertyOwner);
			    	 propertyOwner="'"+propertyOwner.replace("|","','")+"'";				 
			    	 propertyOwnerList=service.getPropertyOwnerForDeal(propertyOwner,dealId);						 
				 }
			     String productId = ConnectionDAO.singleReturn("select DEAL_PRODUCT from cr_deal_loan_dtl where DEAL_ID="+dealId+"");
			     String schemeId = ConnectionDAO.singleReturn("select DEAL_SCHEME from cr_deal_loan_dtl where DEAL_ID="+dealId+"");
			     session.setAttribute("productId", productId);
			     session.setAttribute("schemeId", schemeId);
			 }
			 else if(loanId!=null && !loanId.equalsIgnoreCase(""))
			 {
				 if(propertyOwnerGcId!=null && !propertyOwnerGcId.equalsIgnoreCase(""))
			     {
					 ownerList.setPropertyOwner(propertyOwnerGcId);
					 propertyOwnerGcId="'"+propertyOwnerGcId.replace("|","','")+"'";
				 	 propertyOwnerList=service.getPropertyOwnerForLoan(propertyOwnerGcId,loanId);
			     }
				 String productId = ConnectionDAO.singleReturn("select LOAN_PRODUCT from cr_loan_dtl where LOAN_ID="+loanId+"");
			     String schemeId = ConnectionDAO.singleReturn("select LOAN_SCHEME from cr_loan_dtl where LOAN_ID="+loanId+"");
			     session.setAttribute("productId", productId);
			     session.setAttribute("schemeId", schemeId);
			 }
			 request.setAttribute("propertyOwnerList",propertyOwnerList);

			 //end by sachin
			

	    	 if(propValue.equalsIgnoreCase("MACHINE"))
	    	 {//Anil
	    		 request.setAttribute("actype", actype);
	    		 return mapping.findForward("machine");  
	    	 }
	    	 else  if(propValue.equalsIgnoreCase("PROPERTY"))
	    	 {
	    		 request.setAttribute("actype", actype);
	    		 return mapping.findForward("property");
	    	 }
	    	 else  if(propValue.equalsIgnoreCase("GOLD"))
	    	 {
	    		 request.setAttribute("actype", actype);
	    		 return mapping.findForward("GOLD");
	    	 }
	    	 else  if(propValue.equalsIgnoreCase("VEHICLE"))
	    	 {//neeraj kumar tripathi
	    		 request.setAttribute("action","action");
	    		 request.setAttribute("actype", actype);
	    		 if(actype != null)
	    		 {
	    			 if(actype.trim().equals("ASSET"))
	    				 request.setAttribute("ASSET","ASSET");
	    			 if(actype.trim().equals("COLLATERAL"))
	    				 request.setAttribute("COLLATERAL","COLLATERAL");
	    			 
	    		 }
	    		    		 
	    		 return mapping.findForward("vehicle");
	    	 }
	    	 else  if(propValue.equalsIgnoreCase("OTHERS"))
	    	 {
	    		 request.setAttribute("actype", actype);
	    		 return mapping.findForward("other");
	    	 }
	    	 else  if(propValue.equalsIgnoreCase("BG"))
	    	 {
	    		 return mapping.findForward("bg");
	    	 }
	    	 else  if(propValue.equalsIgnoreCase("FD"))
	    	 {
	    		 return mapping.findForward("fd");
	    	 }
	    	 else  if(propValue.equalsIgnoreCase("SBLC"))
	    	 {
	    		 return mapping.findForward("sblc");
	    	 }
	    	 else  if(propValue.equalsIgnoreCase("SECURITIES"))
	    	 {
	    		 return mapping.findForward("sec");
	    	 }
	    	 else  if(propValue.equalsIgnoreCase("DEBTOR"))
	    	 {
	    		 return mapping.findForward("deb");
	    	 }
	    	 else  if(propValue.equalsIgnoreCase("INSURANCE"))
	    	 {
	    		 return mapping.findForward("INSURANCE");
	    	 }
	    	 else  if(propValue.equalsIgnoreCase("GOLD"))
	    	 {
	    		 return mapping.findForward("GOLD");
	    	 }
	    	 else 
	    	 {
	    		 return mapping.findForward("stock");
	    	 }
	    		    	
	    		    	
	     }
	
	
	public ActionForward updateCollateralDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		logger.info("In CollateralProcessAction(updateCollateralDetails)");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		ArrayList fetchCollateralDetails=new ArrayList();
        String userId="";
		String bDate="";
		String vehicalSave="";
		String assetClass = request.getParameter("assetClass");	
		 String ornamentType=request.getParameter("ornamentType");
		 String ornamentStandard=request.getParameter("lbxOrnamentStandard");
		 String assetId=request.getParameter("assetsIdGoldOrnament");
		 String primaryId = CommonFunction.checkNull(request.getParameter("primaryId"));
		 
		if(userobj!=null)
		{		userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();				
		}else{
			logger.info("here in updateCollateralDetails method of CollateralProcessAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		//code added by neeraj
		String source="NE";
		String table="cr_asset_collateral_m";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
		{
			source="ED";
			table="cr_asset_collateral_m_edit";
		}
		//neeraj space end
		
		DynaValidatorForm collateralDynaValidatorForm = (DynaValidatorForm)form; 		 
	    CollateralVo sh = new CollateralVo();	
	        

	        sh.setUserId(userId);
		    sh.setMakerDate(bDate);
         
		    
	        org.apache.commons.beanutils.BeanUtils.copyProperties(sh, collateralDynaValidatorForm);   				 
	        boolean status=false;	      	    
	        CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	        logger.info("Implementation class: "+service.getClass()); 			// changed by asesh				   
		    String sms="";
		    String assetsType = request.getParameter("assetsType");
		    String dealId = "";
		    String loanId="";
		    String retStr="";
			//parvez changes starats
			
		    String goldloanAmount = service.getloanAmountForGoldOrnament(dealId);
			session.setAttribute("goldloanAmount",goldloanAmount );
		    
		    //parvez code ends here
		    
			if(session.getAttribute("dealId")!=null)
			{
				
				dealId=session.getAttribute("dealId").toString();
			}
			else if(session.getAttribute("maxId")!=null)
			{
				dealId=session.getAttribute("maxId").toString();
			}
			
			if(session.getAttribute("loanId")!=null)
			{
				loanId =  session.getAttribute("loanId").toString();
				sh.setLoanId(loanId);
			}
			else if(session.getAttribute("maxIdInCM")!=null)
			{
				loanId =  session.getAttribute("maxIdInCM").toString();
				sh.setLoanId(loanId);
			}
		
			 if(!CommonFunction.checkNull(primaryId).equals(""))
	          {
	        	  sh.setAssetsId(primaryId);
	          }
			logger.info("In CollateralProcessAction(updateCollateralDetails) dealid " +dealId);
			// add by saorabh
			
			String productID = CommonFunction.checkNull(session.getAttribute("productId"));
			String productLoanType = service.getProductLoanType(productID);
			String vatValuePercent = service.getVatValueStateWise(sh.getLbxmachineSupplier());
			logger.info("productLoanType ------------" +productLoanType);
			if(productLoanType.equalsIgnoreCase("HP"))
			{
			double vatD=0.0;
			double assetsCollateralValueD=0.0;
			double vatAmount=0.0;
			if(!vatValuePercent.equalsIgnoreCase(""))
			{
				vatD =  Double.parseDouble(vatValuePercent);
				assetsCollateralValueD = Double.parseDouble(sh.getAssetsCollateralValue().replace(",", ""));
				vatAmount = (assetsCollateralValueD*vatD)/100;
				sh.setVatPercent(vatD+"");
				sh.setVatAmount(vatAmount+"");
			}
			
			logger.info("Vat in Percentage --------"+vatD+"---------vat amount =---------"+vatAmount);
			String serviceTax = service.getServiceTaxStateWise(sh.getLbxmachineSupplier());
			logger.info("serviceTaxPercent --------"+serviceTax);
			sh.setServiceTax(serviceTax);
			}
			//end by saorabh
			//sachin
			if(loanId!=null && !loanId.equalsIgnoreCase(""))
			{
			sh.setPropertyOwnerGcdId(sh.getPropertyOwner());
			StringBuilder query=new StringBuilder();
			query.append("SELECT PROPERTY_OWNER from "+table+" WHERE ASSET_ID='"+primaryId+"' AND ASSET_TYPE='"+assetsType+"'");
			String result=ConnectionDAO.singleReturn(query.toString());
			if(result!=null && !result.equalsIgnoreCase("")){
				sh.setPropertyOwner(result);
			}
			else{
				sh.setPropertyOwner(null);
			}
			
			logger.info("getPropertyOwnerGcdId"+sh.getPropertyOwnerGcdId());
			}	
			//sachin
		
//change by richa
			String colltype1=request.getParameter("colltype1");
			
			String var=request.getParameter("strChasisFlag");
			String enginNo="0";
			String chesisNoCheck="0";
			String regNo="0";
			String chasisFlag="N";
			String engineFlag="N";
			String regNFlag="N";
			if(CommonFunction.checkNull(var).equalsIgnoreCase(""))
			{
			
			logger.info("strChasisFlag:::"+sh.getVehicleChesisNo());
			if(!CommonFunction.checkNull(sh.getVehicleChesisNo()).equalsIgnoreCase("")||!CommonFunction.checkNull(sh.getEngineNumber()).equalsIgnoreCase("")||!CommonFunction.checkNull(sh.getVehicleRegNo()).equalsIgnoreCase(""))
			{
				logger.info("in if :::"+sh.getVehicleChesisNo());
				
				
				if(!CommonFunction.checkNull(sh.getVehicleChesisNo()).equalsIgnoreCase(""))
				{
					logger.info("in if for chasis:::"+sh.getVehicleChesisNo());
					chesisNoCheck=service.checkChesisNoVehicle(sh,source);
					if(CommonFunction.checkNull(chesisNoCheck).equalsIgnoreCase("0"))
					{
					chasisFlag="N";
					}
					else{
						chasisFlag="Y";
					}
				}
				if(!CommonFunction.checkNull(sh.getEngineNumber()).equalsIgnoreCase(""))
				{
					logger.info("in if for engine:::"+sh.getEngineNumber());
					enginNo=service.checkEnginNoVehicle(sh,source);
					if(CommonFunction.checkNull(enginNo).equalsIgnoreCase("0"))
					{
						engineFlag="N";
					}
					else{
						engineFlag="Y";
					}
				}
				if(!CommonFunction.checkNull(sh.getVehicleRegNo()).equalsIgnoreCase(""))
				{
					logger.info("in if for REgNo:::"+sh.getVehicleRegNo());
					regNo=service.checkRegNoVehicle(sh,source);
					if(CommonFunction.checkNull(regNo).equalsIgnoreCase("0"))
					{
						regNFlag="N";
					}
					else{
						regNFlag="Y";
					}
				}
				if(CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&!CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&!CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y"))
				{
					vehicalSave="CHASIS";
					request.setAttribute("vehicalSave", vehicalSave);
					if(loanId!=null && !loanId.equalsIgnoreCase(""))		
					{
						retStr="checkInLoanDublicate";
					}
					else if(dealId!=null && !dealId.equalsIgnoreCase(""))
					{
						retStr="checkInDealDublicate";
						
					}
					request.setAttribute("action","action");
		    		request.setAttribute("actype", "ASSET");
		    		request.setAttribute("ASSET","ASSET");
		    		request.setAttribute("primaryId", primaryId);
		    		request.setAttribute("assetsType", assetsType);
					fetchCollateralDetails.add(sh);
			        request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
			    	return mapping.findForward(retStr);  
				}
				if(!CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&!CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y"))
				{
					vehicalSave="ENGINE";
					request.setAttribute("vehicalSave", vehicalSave);
					if(loanId!=null && !loanId.equalsIgnoreCase(""))		
					{
						retStr="checkInLoanDublicate";
					}
					else if(dealId!=null && !dealId.equalsIgnoreCase(""))
					{
						retStr="checkInDealDublicate";
						
					}
					request.setAttribute("action","action");
		    		request.setAttribute("actype", "ASSET");
		    		request.setAttribute("ASSET","ASSET");
		    		request.setAttribute("primaryId", primaryId);
		    		request.setAttribute("assetsType", assetsType);
					fetchCollateralDetails.add(sh);
			        request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
			    	return mapping.findForward(retStr);  
				}
				if(!CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&!CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y"))
				{
					vehicalSave="REGNO";
					request.setAttribute("vehicalSave", vehicalSave);
					if(loanId!=null && !loanId.equalsIgnoreCase(""))		
					{
						retStr="checkInLoanDublicate";
					}
					else if(dealId!=null && !dealId.equalsIgnoreCase(""))
					{
						retStr="checkInDealDublicate";
						
					}
					request.setAttribute("action","action");
		    		request.setAttribute("actype", "ASSET");
		    		request.setAttribute("ASSET","ASSET");
		    		request.setAttribute("primaryId", primaryId);
		    		request.setAttribute("assetsType", assetsType);
		    		request.setAttribute("assetsType", assetsType);
		    		logger.info("primaryId"+primaryId);
					fetchCollateralDetails.add(sh);
			        request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
			    	return mapping.findForward(retStr);  
				}
				if(!CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y"))
				{
					vehicalSave="ENGINE_REGNO";
					request.setAttribute("vehicalSave", vehicalSave);
					if(loanId!=null && !loanId.equalsIgnoreCase(""))		
					{
						retStr="checkInLoanDublicate";
					}
					else if(dealId!=null && !dealId.equalsIgnoreCase(""))
					{
						retStr="checkInDealDublicate";
						
					}
					request.setAttribute("action","action");
		    		request.setAttribute("actype", "ASSET");
		    		request.setAttribute("ASSET","ASSET");
		    		request.setAttribute("primaryId", primaryId);
		    		request.setAttribute("assetsType", assetsType);
					fetchCollateralDetails.add(sh);
			        request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
			    	return mapping.findForward(retStr);  
				}
				if(CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&!CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y"))
				{
					vehicalSave="CHASIS_REGNO";
					request.setAttribute("vehicalSave", vehicalSave);
					if(loanId!=null && !loanId.equalsIgnoreCase(""))		
					{
						retStr="checkInLoanDublicate";
					}
					else if(dealId!=null && !dealId.equalsIgnoreCase(""))
					{
						retStr="checkInDealDublicate";
						
					}
					request.setAttribute("action","action");
		    		request.setAttribute("actype", "ASSET");
		    		request.setAttribute("ASSET","ASSET");
		    		request.setAttribute("primaryId", primaryId);
		    		request.setAttribute("assetsType", assetsType);
					fetchCollateralDetails.add(sh);
			        request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
			    	return mapping.findForward(retStr);  
				}
				if(CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&!CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y"))
				{
					vehicalSave="CHASIS_ENGINE";
					request.setAttribute("vehicalSave", vehicalSave);
					if(loanId!=null && !loanId.equalsIgnoreCase(""))		
					{
						retStr="checkInLoanDublicate";
					}
					else if(dealId!=null && !dealId.equalsIgnoreCase(""))
					{
						retStr="checkInDealDublicate";
						
					}
					request.setAttribute("action","action");
		    		request.setAttribute("actype", "ASSET");
		    		request.setAttribute("ASSET","ASSET");
		    		request.setAttribute("primaryId", primaryId);
		    		request.setAttribute("assetsType", assetsType);
		    		
					fetchCollateralDetails.add(sh);
			        request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
			    	return mapping.findForward(retStr);  
				}
				if(CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y"))
				{
					vehicalSave="CHASIS_ENGINE_REGNO";
					request.setAttribute("vehicalSave", vehicalSave);
					if(loanId!=null && !loanId.equalsIgnoreCase(""))		
					{
						retStr="checkInLoanDublicate";
					}
					else if(dealId!=null && !dealId.equalsIgnoreCase(""))
					{
						retStr="checkInDealDublicate";
						
					}
					request.setAttribute("action","action");
		    		request.setAttribute("actype", "ASSET");
		    		request.setAttribute("ASSET","ASSET");
		    		request.setAttribute("primaryId", primaryId);
		    		request.setAttribute("assetsType", assetsType);
					fetchCollateralDetails.add(sh);
			        request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
			    	return mapping.findForward(retStr);  
				}
			}
			
			else
			{
				chesisNoCheck="1";
				enginNo="1";
				regNo="1";
				//vehicalUpdt="SAVE";
				//request.setAttribute("vehicalUpdt", vehicalUpdt);
			}
			}
		
			String checkRefinaceReqInfo = service.checkRefinaceReqInfo();
			request.setAttribute("checkRefinaceReqInfo", checkRefinaceReqInfo);
				if(!CommonFunction.checkNull(sh.getMake_model_id()).equalsIgnoreCase("")&& CommonFunction.checkNull(sh.getColltype1()).equalsIgnoreCase("VEHICLE"))
				{
					
					status =  service.updateCollateralDetailsAll(sh,primaryId,assetsType,source);
					
					if(status)
					   {   	// add by saorabh
						 if(productLoanType.equalsIgnoreCase("HP"))
						 service.vatDetail(sh);
						   // end by saorabh			  			   
						    ArrayList<Object> showCollateralDetails = service.getCollateralDetailsAll(dealId);	
						    logger.info("showCollateralDetails"+showCollateralDetails);
						    request.setAttribute("showCollateralDetails", showCollateralDetails);	
							sms="S";
							
							RefreshFlagVo vo = new RefreshFlagVo();
							
							
							logger.info("In  loanId "+loanId);  
				    		if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
				    		{
				    			vo.setTabIndex(10);
				    			if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
				    				vo.setRecordId(Integer.parseInt(dealId.trim()));
					    		vo.setModuleName("CP");
				    		}
				    		else
				    		{
				    			vo.setTabIndex(2);
				    			if(loanId!=null && !loanId.trim().equalsIgnoreCase(""))
				    				vo.setRecordId(Integer.parseInt(loanId.trim()));
					    		vo.setModuleName("CM");
				    		}
				    		RefreshFlagValueInsert.updateRefreshFlag(vo);
						}			 
						 
					  else 
							{
						      
							   fetchCollateralDetails.add(sh);
						       request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
								sms="E";
							
					       }
					
				}
				else if(!(CommonFunction.checkNull(sh.getColltype1()).equalsIgnoreCase("VEHICLE")))
				{
					int count=0;
					sh.setOrnamentType(sh.getOrnamentType());
					sh.setOrnamentStandard(sh.getOrnamentStandard());
					
					//Parvez for gold ornament check
					if((CommonFunction.checkNull(sh.getColltype1()).equalsIgnoreCase("GOLD"))){
						
						if(funid==4000106 ){
							
							
							
							count=Integer.parseInt(service.checkDuplicateGoldOrnamentForUpdateLoan(loanId,ornamentType,ornamentStandard,assetId));
						
						
						}else if ((CommonFunction.checkNull(sh.getColltype1()).equalsIgnoreCase("GOLD"))) {
						
							
						count=Integer.parseInt(service.checkDuplicateGoldOrnamentUpdateDeal(dealId,ornamentType,ornamentStandard,assetId));
						
						if(count>1){
							request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
							sms="EX";
							
				
						}
						}

						}
					
					//parvez end for gold ornament
					
					if(count==0){
					
                     status =  service.updateCollateralDetailsAll(sh,primaryId,assetsType,source);
					
					if(status)
					   {   	// add by saorabh
						 if(productLoanType.equalsIgnoreCase("HP"))
						  service.vatDetail(sh);
						   // end by saorabh			  			   
						    ArrayList<Object> showCollateralDetails = service.getCollateralDetailsAll(dealId);	
						    logger.info("showCollateralDetails"+showCollateralDetails);
						    request.setAttribute("showCollateralDetails", showCollateralDetails);	
							sms="S";
							
							RefreshFlagVo vo = new RefreshFlagVo();
							
							
							logger.info("In  loanId "+loanId);  
				    		if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
				    		{
				    			vo.setTabIndex(10);
				    			if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
				    				vo.setRecordId(Integer.parseInt(dealId.trim()));
					    		vo.setModuleName("CP");
				    		}
				    		else
				    		{
				    			vo.setTabIndex(2);
				    			if(loanId!=null && !loanId.trim().equalsIgnoreCase(""))
				    				vo.setRecordId(Integer.parseInt(loanId.trim()));
					    		vo.setModuleName("CM");
				    		}
				    		RefreshFlagValueInsert.updateRefreshFlag(vo);
						}			 
						 
					  else 
							{
						      
							   fetchCollateralDetails.add(sh);
						       request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
								sms="E";
							
					       }
					
				}
				else
				{
					fetchCollateralDetails.add(sh);
				     request.setAttribute("fetchCollateralDetails",fetchCollateralDetails);
					 sms="M";
				}
				}
                logger.info("Sucessfully Saved.................."+status);
            
			   request.setAttribute("sms", sms);
			  
			   if(loanId!=null && !loanId.equalsIgnoreCase(""))		
				{
					retStr="saveInLoan";
				}
				else if(dealId!=null && !dealId.equalsIgnoreCase(""))
				{
					retStr="saveInDeal";
					
				}
	
			   return mapping.findForward(retStr);                

	}
	
		public ActionForward saveAssetInvoiceDtl(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)throws Exception 
			{
		
		 	logger.info("In CollateralProcessAction in saveAssetInvoice");
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			String assetId="";
			String recordId="";
			String result="";
			String userId="";
			String bDate="";
			String assetClass="";
			String assetCollateralType="";
			ArrayList<CollateralVo> invoiceDetail=new ArrayList<CollateralVo>();
			ArrayList productList = new ArrayList();
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bDate=userobj.getBusinessdate();
			}else{
				logger.info("here saveAssetInvoice method of Asset Collateral invoice the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			DynaValidatorForm InvoiceAssetDynaValidatorForm= (DynaValidatorForm)form;
			CollateralVo vo = new CollateralVo();
			org.apache.commons.beanutils.BeanUtils.copyProperties(vo, InvoiceAssetDynaValidatorForm);
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			String dealId="",loanId="";
			if(session.getAttribute("dealId")!=null)
			{
				
				dealId=session.getAttribute("dealId").toString();
			}
			else if(session.getAttribute("maxId")!=null)
			{
				dealId=session.getAttribute("maxId").toString();
			}
			if(session.getAttribute("loanId")!=null)
			{
				loanId =  session.getAttribute("loanId").toString();
			}
			else if(session.getAttribute("maxIdInCM")!=null)
			{
				loanId =  session.getAttribute("maxIdInCM").toString();
			}
			if(request.getParameter("assetClass")!=null)
			{
				assetClass = request.getParameter("assetClass").toString();
				vo.setColltype1(assetClass);
			}
			else
				vo.setColltype1("INVOICE");
			if(request.getParameter("assetCollateralType")!=null)
			{
				assetCollateralType = request.getParameter("assetCollateralType").toString();
				vo.setColltype2(assetCollateralType);
			}
			if(request.getParameter("assetsId")!=null)
			 {
				assetId=request.getParameter("assetsId");
				vo.setAssetsId(assetId);
			 }
			if(request.getParameter("recordId")!=null)
			 {
				recordId=request.getParameter("recordId").toString();
				vo.setRecordId(recordId);
			 }
			String source="";
			String functionId=(String)session.getAttribute("functionId");
			int funid=Integer.parseInt(functionId);	
			if(funid==4000122 || funid==4000123)
			{
				source="ED";
				vo.setSource(source);
			}
		vo.setUserId(userId);
		vo.setDealId(dealId);
		vo.setLoanId(loanId);
		vo.setAssetsType(assetCollateralType);
		vo.setAssetsClass(assetClass);
		vo.setMakerDate(bDate);
		boolean status=false;
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
		 
		if(assetId==null||assetId.trim().equalsIgnoreCase(""))
		{
			status=service.saveCollateralDetails(vo);
			if(status)
			{
				assetId=service.getInvoiceAssetId();
				vo.setAssetsId(assetId);
			}
			
		}
		else 
		{
			status=service.updateCollateralDetailsAll(vo,assetId ,assetCollateralType,source);
		}
		
		result=service.saveAssetInvoiceDetails(vo);
		request.setAttribute("result",result);
		invoiceDetail=service.getAssetInvoiceDetailList(assetId,source);
		productList=service.getInvoiceProductList(assetId,source); 									// For Invoice Total Amount
		if(invoiceDetail.size()>0)
		{
		CollateralVo invoiceDtl1=(CollateralVo)invoiceDetail.get(0);
		String invoiceTotalAmount =invoiceDtl1.getInvoiceTotalAmount();
		request.setAttribute("invoiceTotalAmount",invoiceTotalAmount);
		}
		request.setAttribute("assetsId",assetId);
		request.setAttribute("assetCollateralType",assetCollateralType);
		request.setAttribute("productList",productList);
		request.setAttribute("invoiceDetail",invoiceDetail);
		ArrayList<CollateralVo> dispatchDetail=service.getAssetDispatchDetailList(assetId,source);
		request.setAttribute("dispatchDetail",dispatchDetail);
		return mapping.findForward("addSuccess");
		 
}
			public ActionForward fetchAssetInvoiceDtl(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)throws Exception 
			{
			
			logger.info("In CollateralProcessAction in saveAssetInvoice");
			HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			String assetId="";
			String recordId="";
			String userId="";
			String bDate="";
			String assetClass="";
			String assetCollateralType="";
			ArrayList<CollateralVo> invoiceDetail=new ArrayList<CollateralVo>();
			ArrayList productList = new ArrayList();
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bDate=userobj.getBusinessdate();
			}else{
				logger.info("here saveAssetInvoice method of Asset Collateral invoice the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			DynaValidatorForm InvoiceAssetDynaValidatorForm= (DynaValidatorForm)form;
			CollateralVo vo = new CollateralVo();
			org.apache.commons.beanutils.BeanUtils.copyProperties(vo, InvoiceAssetDynaValidatorForm);
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			String functionId=(String)session.getAttribute("functionId");
			int funid=Integer.parseInt(functionId);	
			String dealid="",loanId="",source="";
			if(session.getAttribute("dealId")!=null)
			{
				dealid = session.getAttribute("dealId").toString();

			}
			if(funid==4000122 || funid==4000123)
			{
				source="ED";
				vo.setSource(source);
			}
			if(session.getAttribute("loanId")!=null && (funid==4001231 || funid==4000123))
			{
				loanId =  session.getAttribute("loanId").toString();
				vo.setColltype1("INVOICE");
				if(request.getParameter("acType")!=null)
				{
					assetCollateralType = request.getParameter("acType").toString();
					vo.setColltype2(assetCollateralType);
				}
				if(request.getParameter("primaryId")!=null)
				 {
					assetId=request.getParameter("primaryId");
					vo.setAssetsId(assetId);
				
			}
			}
			else
			{
				vo.setColltype1("INVOICE");
			if(request.getParameter("assetCollateralType")!=null)
			{
				assetCollateralType = request.getParameter("assetCollateralType").toString();
				vo.setColltype2(assetCollateralType);
			}
			if(request.getParameter("assetsId")!=null)
			 {
				assetId=request.getParameter("assetsId");
				vo.setAssetsId(assetId);
			 }
			}
			
	
			if(funid==3000951 || funid==3000296 || funid==4001231 || funid==4000123)
			{
				session.setAttribute("invoiceDealViewer","invoiceDealViewer");
			}
			
			if(request.getParameter("recordId")!=null)
			 {
				recordId=request.getParameter("recordId").toString();
					vo.setRecordId(recordId);
				 }
			vo.setUserId(userId);
			vo.setDealId(dealid);
			vo.setAssetsType(assetCollateralType);
			vo.setAssetsClass(assetClass);
			vo.setMakerDate(bDate);
			CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
			invoiceDetail=service.getAssetInvoiceDetailList(assetId,source);
			productList=service.getInvoiceProductList(assetId,source); 									// For Invoice Total Amount
			if(invoiceDetail.size()>0)
			{
			CollateralVo invoiceDtl1=(CollateralVo)invoiceDetail.get(0);
			String invoiceTotalAmount =invoiceDtl1.getInvoiceTotalAmount();
			request.setAttribute("invoiceTotalAmount",invoiceTotalAmount);
			}
			request.setAttribute("assetsId",assetId);
			request.setAttribute("assetCollateralType",assetCollateralType);
			request.setAttribute("productList",productList);
			request.setAttribute("invoiceDetail",invoiceDetail);
			ArrayList<CollateralVo> dispatchDetail=service.getAssetDispatchDetailList(assetId,source);
			request.setAttribute("dispatchDetail",dispatchDetail);
			return mapping.findForward("addSuccess");
			 
			}

	public ActionForward saveAssetDispatchDtl(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)throws Exception 
		{
				 	logger.info("In CollateralProcessAction in saveAssetInvoice");
				    HttpSession session = request.getSession();
					UserObject userobj=(UserObject)session.getAttribute("userobject");
					String assetId="";
					String recordId="";
					String userId="";
					String bDate="";
					String assetClass="";
					String assetCollateralType="";
					ArrayList<CollateralVo> dispatchDetail=new ArrayList<CollateralVo>();
					if(userobj!=null)
					{
							userId=userobj.getUserId();
							bDate=userobj.getBusinessdate();
					}else{
						logger.info("here saveAssetInvoice method of Asset Collateral invoice the session is out----------------");
						return mapping.findForward("sessionOut");
					}
					DynaValidatorForm InvoiceAssetDynaValidatorForm= (DynaValidatorForm)form;
					CollateralVo vo = new CollateralVo();
					org.apache.commons.beanutils.BeanUtils.copyProperties(vo, InvoiceAssetDynaValidatorForm);
					Object sessionId = session.getAttribute("sessionID");
					ServletContext context = getServlet().getServletContext();
					String strFlag="";	
					if(sessionId!=null)
					{
						strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
					}
					
					logger.info("strFlag .............. "+strFlag);
					if(!strFlag.equalsIgnoreCase(""))
					{
						if(strFlag.equalsIgnoreCase("sameUserSession"))
						{
							context.removeAttribute("msg");
							context.removeAttribute("msg1");
						}
						else if(strFlag.equalsIgnoreCase("BODCheck"))
						{
							context.setAttribute("msg", "B");
						}
						return mapping.findForward("logout");
					}
					String dealid="";
					String source="";
					String functionId=(String)session.getAttribute("functionId");
					int funid=Integer.parseInt(functionId);	
					if(funid==4000122 || funid==4000123)
					{
						source="ED";
						vo.setSource(source);
					}
					if(session.getAttribute("dealId")!=null)
					{
						dealid = session.getAttribute("dealId").toString();
					}
					if(request.getParameter("assetClass")!=null)
					{
						assetClass = request.getParameter("assetClass").toString();
					}
					if(request.getParameter("assetCollateralType")!=null)
					{
						assetCollateralType = request.getParameter("assetCollateralType").toString();
					}
					if(request.getParameter("assetsId")!=null)
					 {
						assetId=request.getParameter("assetsId").toString();
						vo.setAssetsId(assetId);
					 }
					if(request.getParameter("recordId")!=null)
					 {
						recordId=request.getParameter("recordId").toString();
						vo.setRecordId(recordId);
					 }
					vo.setUserId(userId);
					vo.setDealId(dealid);
					vo.setAssetsType(assetCollateralType);
					vo.setAssetsClass(assetClass);
					vo.setMakerDate(bDate);
					CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
						
				assetId=service.saveAssetDispatchDetails(vo);
				dispatchDetail=service.getAssetDispatchDetailList(assetId,source);
				request.setAttribute("dispatchDetail",dispatchDetail);
				ArrayList<CollateralVo> invoiceDetail=service.getAssetInvoiceDetailList(assetId,source);
				request.setAttribute("invoiceDetail",invoiceDetail);
				ArrayList productList=service.getInvoiceProductList(assetId,source);
				if(invoiceDetail.size()>0)
				{
				CollateralVo invoiceDtl1=(CollateralVo)invoiceDetail.get(0);
				String invoiceTotalAmount =invoiceDtl1.getInvoiceTotalAmount();
				request.setAttribute("invoiceTotalAmount",invoiceTotalAmount);
				}
				request.setAttribute("productList",productList);
				request.setAttribute("assetsId",assetId);
				request.setAttribute("assetCollateralType",assetCollateralType);
				return mapping.findForward("addSuccess");
				
				 
			}
	
		public ActionForward saveInvoiceDtl(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)throws Exception 
				{
			
			 	logger.info("In CollateralProcessAction in saveAssetInvoice");
			    HttpSession session = request.getSession();
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				String assetId="";
				String userId="";
				String bDate="";
				String assetCollateralType="";
				String invoiceTotalAmount="";
				if(userobj!=null)
				{
						userId=userobj.getUserId();
						bDate=userobj.getBusinessdate();
				}else{
					logger.info("here saveAssetInvoice method of Asset Collateral invoice the session is out----------------");
					return mapping.findForward("sessionOut");
				}
				DynaValidatorForm InvoiceAssetDynaValidatorForm= (DynaValidatorForm)form;
				CollateralVo vo = new CollateralVo();
				org.apache.commons.beanutils.BeanUtils.copyProperties(vo, InvoiceAssetDynaValidatorForm);
				Object sessionId = session.getAttribute("sessionID");
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				
				if(request.getParameter("assetCollateralType")!=null)
				{
					assetCollateralType = request.getParameter("assetCollateralType").toString();
					vo.setColltype2(assetCollateralType);
				}
				if(request.getParameter("assetsId")!=null)
				 {
					assetId=request.getParameter("assetsId");
					vo.setAssetsId(assetId);
				 }
				vo.setColltype1("INVOICE");
				String source="";
				String functionId=(String)session.getAttribute("functionId");
				int funid=Integer.parseInt(functionId);	
				if(funid==4000122 || funid==4000123)
				{
					source="ED";
					vo.setSource(source);
				}
				CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
				boolean status=service.updateCollateralDetailsAll(vo,assetId ,assetCollateralType,source);
				if(status)
				{
				request.setAttribute("sms", "S");
				}
				else{
					request.setAttribute("sms", "E");
				}
 

			return mapping.findForward("success");
			 
	}
	public ActionForward fetchIndividualInvoice(ActionMapping mapping, ActionForm form,	HttpServletRequest request, HttpServletResponse response)throws Exception 
	{
		 	logger.info("In fetchIndividualInvoice()------------------> ");
		 
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			if(userobj==null)
			{			
				logger.info("here fetchIndividualInvoice method of collateralAssetInvoiceAction the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
		 logger.info("Implementation class: "+service.getClass());
		 String recordId="",assetId="",assetCollateralType="";
		 if(request.getParameter("assetsId")!=null)
		 {
			assetId=request.getParameter("assetsId").toString();
		 }
		 if(request.getParameter("assetCollateralType")!=null)
			{
				assetCollateralType = request.getParameter("assetCollateralType").toString();
			}
		 if(request.getParameter("recordId")!=null)
		 {
			 recordId = request.getParameter("recordId");
			 logger.info("recordId::::::::::::::::"+recordId);
		 }
		 String source="";
			String functionId=(String)session.getAttribute("functionId");
			int funid=Integer.parseInt(functionId);	
			if(funid==4000122 || funid==4000123)
			{
				source="ED";
			}
		 
		 ArrayList<CollateralVo> invoiceDtl = service.getInvoiceDetail(recordId,source);
		 request.setAttribute("invoiceDtl", invoiceDtl);
		 ArrayList<CollateralVo> invoiceDetail=service.getAssetInvoiceDetailList(assetId,source);
		 request.setAttribute("invoiceDetail",invoiceDetail);
		 ArrayList<CollateralVo> dispatchDetail=service.getAssetDispatchDetailList(assetId,source);
			request.setAttribute("dispatchDetail",dispatchDetail);
		 logger.info("list is......................................... "+invoiceDtl);
		 ArrayList productList=service.getInvoiceProductList(assetId,source);
			if(invoiceDetail.size()>0)									// For Invoice Total Amount
			{
			CollateralVo invoiceDtl1=(CollateralVo)invoiceDetail.get(0);
			String invoiceTotalAmount =invoiceDtl1.getInvoiceTotalAmount();
			request.setAttribute("invoiceTotalAmount",invoiceTotalAmount);
			}
			request.setAttribute("assetsId",assetId);
			request.setAttribute("assetCollateralType",assetCollateralType);
			request.setAttribute("productList",productList);

		return mapping.findForward("addSuccess");
 
	}
	
	public ActionForward fetchIndividualDispatch(ActionMapping mapping, ActionForm form,	HttpServletRequest request, HttpServletResponse response)throws Exception 
	{
		 	logger.info("In fetchIndividualDispatch()------------------> ");
		 
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			if(userobj==null)
			{			
				logger.info("here fetchIndividualDispatch method of collateralAssetInvoiceAction the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
		 logger.info("Implementation class: "+service.getClass());
		 String recordId="",assetId="",assetCollateralType="";
		 if(request.getParameter("assetsId")!=null)
		 {
			assetId=request.getParameter("assetsId").toString();
		 }
		 if(request.getParameter("recordId")!=null)
		 {
			 recordId = request.getParameter("recordId");
			 logger.info("recordId::::::::::::::::"+recordId);
		 }
		 
		 if(request.getParameter("assetCollateralType")!=null)
			{
				assetCollateralType = request.getParameter("assetCollateralType").toString();
			}
		 String source="";
			String functionId=(String)session.getAttribute("functionId");
			int funid=Integer.parseInt(functionId);	
			if(funid==4000122 || funid==4000123)
			{
				source="ED";
			}
		 
		ArrayList<CollateralVo> dispatchDtl = service.getDispatchDetail(recordId,source);
		request.setAttribute("dispatchDtl",dispatchDtl);
		ArrayList<CollateralVo> invoiceDetail=service.getAssetInvoiceDetailList(assetId,source);
		request.setAttribute("invoiceDetail",invoiceDetail);
		ArrayList<CollateralVo> dispatchDetail=service.getAssetDispatchDetailList(assetId,source);
		request.setAttribute("dispatchDetail",dispatchDetail);
		logger.info("list is......................................... "+dispatchDtl);
		ArrayList productList=service.getInvoiceProductList(assetId,source);
		if(invoiceDetail.size()>0)									// For Invoice Total Amount
		{
		CollateralVo invoiceDtl1=(CollateralVo)invoiceDetail.get(0);
		String invoiceTotalAmount =invoiceDtl1.getInvoiceTotalAmount();
		request.setAttribute("invoiceTotalAmount",invoiceTotalAmount);
		}
		request.setAttribute("assetsId",assetId);
		request.setAttribute("assetCollateralType",assetCollateralType);
		request.setAttribute("productList",productList);
		return mapping.findForward("addSuccess");
 
	}
public ActionForward deleteAssetInvoiceDtl(ActionMapping mapping, ActionForm form,	HttpServletRequest request, HttpServletResponse response)throws Exception 
{
 	logger.info("In deleteAssetInvoiceDtl()------------------> ");
 
    HttpSession session = request.getSession();
	UserObject userobj=(UserObject)session.getAttribute("userobject");
	if(userobj==null)
	{			
		logger.info("here deleteAssetInvoiceDtl method of collateralAssetInvoiceAction the session is out----------------");
		return mapping.findForward("sessionOut");
	}
	Object sessionId = session.getAttribute("sessionID");
	ServletContext context = getServlet().getServletContext();
	String strFlag="";	
	if(sessionId!=null)
	{
		strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
	}
	
	logger.info("strFlag .............. "+strFlag);
	if(!strFlag.equalsIgnoreCase(""))
	{
		if(strFlag.equalsIgnoreCase("sameUserSession"))
		{
			context.removeAttribute("msg");
			context.removeAttribute("msg1");
		}
		else if(strFlag.equalsIgnoreCase("BODCheck"))
		{
			context.setAttribute("msg", "B");
		}
		return mapping.findForward("logout");
	}
	String assetId="",assetCollateralType="";
	String source="";
	String functionId=(String)session.getAttribute("functionId");
	int funid=Integer.parseInt(functionId);	
	if(funid==4000122 || funid==4000123)
	{
		source="ED";
	}
	if(request.getParameter("assetsId")!=null)
	 {
		assetId=request.getParameter("assetsId").toString();
	 }
	
	 if(request.getParameter("assetCollateralType")!=null)
		{
			assetCollateralType = request.getParameter("assetCollateralType").toString();
		}
	String[] recordId= null;
	
	if(request.getParameter("recordIds")!=null && !CommonFunction.checkNull(request.getParameter("recordIds")).equalsIgnoreCase(""))
	 {
		 logger.info("Record Id :::"+CommonFunction.checkNull(request.getParameter("recordIds")));
		 recordId = CommonFunction.checkNull(request.getParameter("recordIds")).split(","); 
	 }
	String type=request.getParameter("type").toString();
	CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	if(type.trim().equalsIgnoreCase("invoice"))
	{
		for (int k = 0; k < recordId.length; k++) 
		{
			service.deleteInvoiceDetail(recordId[k], source);
		}
	}
	else
	{
		for (int k = 0; k < recordId.length; k++) 
		{
			service.deleteDispatchDetail(recordId[k], source);
		}
	}
	ArrayList<CollateralVo> invoiceDetail=service.getAssetInvoiceDetailList(assetId,source);
	request.setAttribute("invoiceDetail",invoiceDetail);
	ArrayList<CollateralVo> dispatchDetail=service.getAssetDispatchDetailList(assetId,source);
	request.setAttribute("dispatchDetail",dispatchDetail);
	ArrayList productList=service.getInvoiceProductList(assetId,source);
	if(invoiceDetail.size()>0)									// For Invoice Total Amount
	{
	CollateralVo invoiceDtl1=(CollateralVo)invoiceDetail.get(0);
	String invoiceTotalAmount =invoiceDtl1.getInvoiceTotalAmount();
	request.setAttribute("invoiceTotalAmount",invoiceTotalAmount);
	}
	request.setAttribute("assetsId",assetId);
	request.setAttribute("assetCollateralType",assetCollateralType);
	request.setAttribute("productList",productList);
	return mapping.findForward("addSuccess");
	
	}
	
	    
	 
}