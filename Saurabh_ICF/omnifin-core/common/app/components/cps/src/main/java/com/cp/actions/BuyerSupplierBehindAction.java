/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.ResourceBundle;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.FieldVerificationVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/**
 * MyEclipse Struts Creation date: 04-04-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class BuyerSupplierBehindAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(BuyerSupplierBehindAction.class.getName());
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */

	public ActionForward buyerSuppMaker(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
			logger.info(" In the BuyerSupplierBehindAction----------");
		
			logger.info("In searchDealForBuyerSupp.....");
			HttpSession session = request.getSession();
			boolean flag=false;
			String userId="";
			String branch="";
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			
			if(userobj!=null)
			{
				userId=userobj.getUserId();
				branch=userobj.getBranchId();
			}else{
				logger.info("here in buyerSuppMaker method of BuyerSupplierBehindAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			String sms="";
			ArrayList dealdetails=new ArrayList();
			
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
	
			
			
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			session.removeAttribute("dealId");
			 session.removeAttribute("dealNo");
			 session.removeAttribute("custrName");
			 session.removeAttribute("dealDate");
			 session.removeAttribute("rmName");
			session.removeAttribute("viewDeal");
			session.removeAttribute("dealHeader");
			session.removeAttribute("showdetails");
			session.removeAttribute("showdetailSupplier");
			session.removeAttribute("supplierList");
			session.removeAttribute("buyerList");
			session.removeAttribute("detailcountryList");
			
			
			DynaValidatorForm CommonDealDynaValidatorForm = (DynaValidatorForm) form;
			ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");
			String dateFormat = resource.getString("lbl.dateFormat(dd-mm-yyyy)");
			FieldVerificationVo vo = new FieldVerificationVo();
			org.apache.commons.beanutils.BeanUtils.copyProperties(vo,CommonDealDynaValidatorForm);

			vo.setBranchId(branch);
			if(CommonFunction.checkNull(vo.getReportingToUserId()).equalsIgnoreCase(""))
			{ 
				vo.setReportingToUserId(userId);
			   //logger.info("When user id is not selected by the user:::::"+userId);
			}
			else
			{
				vo.setReportingToUserId(vo.getReportingToUserId());
			}
			logger.info("user Id:::::"+vo.getReportingToUserId());
			
	//COMMENTED BY NEERAJ START   
			/*logger.info("vo.getReportingToUserId()&&&&&&&&&&&&&&&&&&&&&&&&"+vo.getReportingToUserId());
			logger.info("vo.getReportingToUserId()&&&&&&&&&&&&&&&&&&&&&&&&"+vo.getReportingToUserId());
			
			if(CommonFunction.checkNull(vo.getReportingToUserId()).equalsIgnoreCase(""))
			{ 
				vo.setReportingToUserId(userId);
			   //logger.info("When user id is not selected by the user:::::"+userId);
			}
			logger.info("user Id:::::"+vo.getReportingToUserId());*/
	//COMMENTED BY NEERAJ END   
//			vo.setUserId(userobj.getUserId());
//	
//			String userid=CommonFunction.checkNull(vo.getLbxUseId());
//			
//			if(userid.trim().length()==0)
//				userid=userobj.getUserName();
//				vo.setUserId(userid);
//				LoggerMsg.info("userid:::::::::::::"+userid);
//			
//			try {
//				org.apache.commons.beanutils.BeanUtils.copyProperties(vo,CommonDealDynaValidatorForm);
//			} catch (IllegalAccessException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			} catch (InvocationTargetException e) {
//				// TODO Auto-generated catch block
//				e.printStackTrace();
//			}
			if (vo.getApplicationDate().equalsIgnoreCase(dateFormat)) {
				vo.setApplicationDate("");
			}
//			FieldVerificationDAO fieldDao= new FieldVerificationDAOImpl();
			CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	        logger.info("Implementation class: "+service.getClass()); 			// changed by asesh
			//CreditProcessingDAO service = new CreditProcessingDAOImpl();

			logger.info("current page link .......... "+request.getParameter("d-7061068-p"));
			
			int currentPageLink = 0;
			if(request.getParameter("d-7061068-p")==null || request.getParameter("d-7061068-p").equalsIgnoreCase("0"))
			{
				currentPageLink=1;
			}
			else
			{
				currentPageLink =Integer.parseInt(request.getParameter("d-7061068-p"));
			}
			
			logger.info("current page link ................ "+request.getParameter("d-7061068-p"));
			
			vo.setCurrentPageLink(currentPageLink);
			
			dealdetails= service.searchDealDetailforBuyerSupp(vo, request);
			
			 logger.info("In searchDealCapturing....list: "+dealdetails.size());
				
				
				logger.info("list.isEmpty(): "+dealdetails.size());
		    			
			request.setAttribute("dealdetails", dealdetails);
			
			if(CommonFunction.checkNull(request.getAttribute("flag")).toString().equalsIgnoreCase("yes")){
				request.setAttribute("sms","No");
			}
		
			
			ArrayList<Object> detailcountryList = service.getAddressList();
			session.setAttribute("detailcountryList", detailcountryList);
			request.setAttribute("buySuppMaker", "buySuppMaker");

		return mapping.findForward("success");
		}

	
	public ActionForward buyerSuppAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{
			logger.info(" In the BuyerSupplierBehindAction---------buyerSuppAuthor-");
			
			
			logger.info("In buyerSuppAuthor.....");
			HttpSession session = request.getSession();
			boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			String userId="";
			String branchId="";
			
			if(userobj!=null)
			{		userId=userobj.getUserId();
					branchId=userobj.getBranchId();					
			}else{
				logger.info("here in buyerSuppAuthor method of BuyerSupplierBehindAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			String sms="";
			ArrayList dealdetails=new ArrayList();
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			session.removeAttribute("dealId");
			 session.removeAttribute("dealNo");
			 session.removeAttribute("custrName");
			 session.removeAttribute("dealDate");
			 session.removeAttribute("rmName");
			session.removeAttribute("viewDeal");
			session.removeAttribute("dealHeader");
			session.removeAttribute("showdetails");
			session.removeAttribute("showdetailSupplier");
			session.removeAttribute("supplierList");
			session.removeAttribute("buyerList");
			session.removeAttribute("detailcountryList");
			
			DynaValidatorForm CommonDealDynaValidatorForm = (DynaValidatorForm) form;
			ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");
			String dateFormat = resource.getString("lbl.dateFormat(dd-mm-yyyy)");
			FieldVerificationVo vo = new FieldVerificationVo();
			
	
			vo.setBranchId(branchId);
			vo.setUserId(userId);
			
			try {
				org.apache.commons.beanutils.BeanUtils.copyProperties(vo,CommonDealDynaValidatorForm);
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (InvocationTargetException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			if (vo.getApplicationDate().equalsIgnoreCase(dateFormat)) {
				vo.setApplicationDate("");
			}
			CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	        logger.info("Implementation class: "+service.getClass()); 			// changed by asesh

			logger.info("current page link .......... "+request.getParameter("d-49520-p"));
			
			int currentPageLink = 0;
			if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
			{
				currentPageLink=1;
			}
			else
			{
				currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
			}
			
			logger.info("current page link ................ "+request.getParameter("d-49520-p"));
			
			vo.setCurrentPageLink(currentPageLink);
			dealdetails= service.searchDealDetailforBuyerSuppAuthor(vo, request);

		    logger.info("In searchDealCapturing....list: "+dealdetails.size());
			
			
			logger.info("list.isEmpty(): "+dealdetails.size());
			
			request.setAttribute("dealdetails", dealdetails);
			
			if(CommonFunction.checkNull(request.getAttribute("flag")).toString().equalsIgnoreCase("yes")){
				request.setAttribute("sms","No");
			}
		
			ArrayList<Object> detailcountryList = service.getAddressList();
			session.setAttribute("detailcountryList", detailcountryList);
			
			request.setAttribute("buySuppAuthor", "buySuppAuthor");
		return mapping.findForward("success");
		}
}