/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.validator.DynaValidatorForm;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.FieldVerificationDAO;
import com.cp.fundFlowDao.FundFlowAnalysisDAO;
import com.cp.vo.BankAccountAnalysisVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.communication.engn.daoImplMySql.SmsDAOImpl;
import com.connect.ConnectionDAO;
/** 
 * MyEclipse Struts
 * Creation date: 10-03-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class ForwardFundFlowAnalysisAction extends Action {
	private static final Logger logger = Logger.getLogger(ForwardFundFlowAnalysisAction.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{
		
		logger.info("In ForwardFundFlowAnalysisAction (execute)");
		HttpSession session = request.getSession();
		boolean flag=false;
		String bDate="";
		String companyId="";
		String userId="";
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		if(userobj!=null)
		{
			bDate=userobj.getBusinessdate();
			companyId=""+userobj.getCompanyId();
			userId=userobj.getUserId();
		}else{
			logger.info("here in execute method of ForwardFundFlowAnalysisAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		if(flag)
		{
			logger.info("logout in action");
			return mapping.findForward("logout");
		}
		DynaValidatorForm bankAccountAnalysisDynaValidatorForm = (DynaValidatorForm) form;
		BankAccountAnalysisVo vo=new BankAccountAnalysisVo();
	    try {
			org.apache.commons.beanutils.BeanUtils.copyProperties(vo, bankAccountAnalysisDynaValidatorForm);
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		FundFlowAnalysisDAO dao=(FundFlowAnalysisDAO)DaoImplInstanceFactory.getDaoImplInstance(FundFlowAnalysisDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass());
		String dealId = "";
		boolean satge = false;
		
		 if(session.getAttribute("fundFlowDealId")!=null)
		 {
			 dealId = session.getAttribute("fundFlowDealId").toString();
		 }
		if (dealId != null && !dealId.equalsIgnoreCase("")) {
			logger.info("In StageMoveBehindAction (execute) dealid "
					+ dealId);
			  String checkStageM=CommonFunction.stageMovement(companyId, "DC","F",dealId, "FFC", bDate,userId);
			  logger.info("checkStageM : "+checkStageM);
			  if(checkStageM.equalsIgnoreCase("S")){
					satge = dao.fundFlowForward(dealId);
					  //Rohit Changes for SMS & Email
					  String emailcheckQuery="SELECT COUNT(1) FROM CR_DEAL_MOVEMENT_DTL WHERE DEAL_FORWARDED='0000-00-00 00:00:00' AND IFNULL(DEAL_FORWARD_USER,'')='' AND DEAL_STAGE_ID<>'UNC' AND DEAL_ID='"+dealId+"' ";
					  String res=ConnectionDAO.singleReturn(emailcheckQuery);
					  String EventName="";
						String rec="";
						int cont=0;
					  if(res.equalsIgnoreCase("0")){
						  EventName = "UNDERWRITER_QUEUE";
							 rec = "Select count(1) from comm_event_list_m where Event_name='"
									+ EventName + "' and rec_status='A' ";
							 cont = Integer.parseInt(ConnectionDAO
									.singleReturn(rec));
							if (cont != 0) {
								boolean stats = new SmsDAOImpl().getEmailDetails(
										dealId, bDate, EventName);
							}
					  }
					  //Rohit end
			  } else{
				    request.setAttribute("checkStageM", checkStageM);
			  }
			
				if (satge) {
					
					//for releasing lock record from application level object 
					//ServletContext context=getServlet().getServletContext();
					//if(context!=null)
					//{
					//boolean Lflag = ReleaseRecordFromObject.releaselockedRecord(userobj.getUserId(), context);
					//}
					//sms = "S";
					request.setAttribute("sms", "F");
					
				}

				request.setAttribute("status", satge);
			
				//return mapping.findForward("success");
		} else {
			ArrayList bankAcAnalysisDetail =new ArrayList();
			bankAcAnalysisDetail.add(vo);
			request.setAttribute("bankAcAnalysisDetail", bankAcAnalysisDetail); 
			ArrayList bankAcAnalysisList = dao.getBankAccountAnalysisDetails("",vo.getLbxDealNo(),"");
			request.setAttribute("bankAcAnalysisList", bankAcAnalysisList);
			 ArrayList yearList = dao.getYears(bDate);
			 request.setAttribute("yearList", yearList);
			request.setAttribute("notForward", "B");
			//return mapping.findForward("backToFirst");
		}
		/*Code added by Arun*/

		FieldVerificationDAO fieldVerificationdao=(FieldVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(FieldVerificationDAO.IDENTITY);
        logger.info("Implementation class: "+fieldVerificationdao.getClass()); 	// changed by asesh
		 //FieldVerificationDAO fieldVerificationdao=new FieldVerificationDAOImpl();	
		 ArrayList verifMethodList = fieldVerificationdao.getVerifMethodListList();
		 request.setAttribute("verifMethodList", verifMethodList);
			 /*Code added by Arun*/
		return mapping.getInputForward();

	}
}