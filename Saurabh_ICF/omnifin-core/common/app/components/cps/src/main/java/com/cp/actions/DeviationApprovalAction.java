/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.DeviationApprovalDAO;
import com.cp.vo.DeviationApprovalVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.communication.engn.daoImplMySql.SmsDAOImpl;
import com.connect.ConnectionDAO;
/** 
 * MyEclipse Struts
 * Creation date: 11-29-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class DeviationApprovalAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(DeviationApprovalAction.class.getName());
	
	public ActionForward forwardDeviationApproval(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		
		HttpSession session=request.getSession(false);
		//UserObject userobj=new UserObject();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate="";
		String companyId="";
		if(userobj!=null)
		{
			userId	=userobj.getUserId();
			bDate=userobj.getBusinessdate();
			companyId=""+userobj.getCompanyId();
		}else{
			logger.info("here in forwardDeviationApproval method of DeviationApprovalAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		DynaValidatorForm DeviationDynaValidatorForm= (DynaValidatorForm)form;
		String dealId = "";

		
		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		
		logger.info("In forwardDeviationApproval(execute) dealid: " + dealId);
		
		boolean flag=false;
		
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		String chkValue=CommonFunction.checkNull(request.getParameter("chkValue"));
		String chkValueForAuto=CommonFunction.checkNull(request.getParameter("chkValueForAuto"));
		String[] recStatus=chkValue.split(",");
		String[] autoDevRecStatus=chkValueForAuto.split(",");
		
		
		DeviationApprovalVo vo = new DeviationApprovalVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, DeviationDynaValidatorForm);	
		//String st=request.getParameter("status");
		//vo.setRecStatus(request.getParameter("status"));
		//vo.setManRecStat(request.getParameter("manualchk"));
		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		vo.setRecStatusId(recStatus);
		vo.setAutoRecStatusId(autoDevRecStatus);
		/* changed by asesh */
		DeviationApprovalDAO dao=(DeviationApprovalDAO)DaoImplInstanceFactory.getDaoImplInstance(DeviationApprovalDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 
		//DeviationApprovalDAO dao = new DeviationApprovalDAOImpl();
		String sms="";
		String checkApproveDeviation="";
		String msg="";
		String functionId=(String)session.getAttribute("functionId");
		boolean status = dao.forwardDeviationApproval(vo);
		logger.info("Inside forwardDeviationApproval.....displaying status...."+status);
		if(CommonFunction.checkNull(functionId).equalsIgnoreCase("3000296")){		
			sms="A";
			vo.setCheckAuthorIdFlag("Y");
			request.setAttribute("sms",sms);
			DeviationDynaValidatorForm.reset(mapping, request);
			ArrayList list = dao.getDeviationApprovalDetails(vo,dealId);
			request.setAttribute("list", list);
			ArrayList manualDeviationUND = dao.manualDeviationUND(vo,dealId);
			request.setAttribute("manualDeviationUND", manualDeviationUND);
			//pooja code for Deviation SMS/E-mail
			String manualPolicyId[] = vo.getManualPolicyId();
			 logger.info("In saveDeviationApproval...manualPolicyId.length."+ manualPolicyId.length);
			 String manRecStatus[] = vo.getManRecStatus();
			 logger.info("In saveDeviationApproval...manRecStatus.length."+ manRecStatus.length);
			 int i;
			 String ApprovedCount = "0";
			 String RejectedCount = "0";
			 for(i=0;i<manRecStatus.length;i++){
			 String query1="Select count(1) from comm_event_list_m where event_name='DEVIATION_APPROVAL' and REC_STATUS='A' ";
				logger.info("query1_DEVIATION_APPROVAL::::"+query1.toString());
				String recStatus1 =ConnectionDAO.singleReturn(query1.toString());
				msg=manRecStatus[i];
				logger.info("msg-->"+msg);
				logger.info("ApprovedCount-->"+ApprovedCount);
				logger.info("RejectedCount-->"+RejectedCount);
				if(CommonFunction.checkNull(msg).equalsIgnoreCase("A") && CommonFunction.checkNull(ApprovedCount).equals("0")){
					msg="Approved";
					if(!recStatus1.equalsIgnoreCase("0"))
					{
							String EventName="DEVIATION_APPROVAL";
							
								boolean stats=new SmsDAOImpl().getEmailDetails(dealId,"A",EventName);
								logger.info("Email Send on event DEVIATION_APPROVAL::: "+stats);
					}
					else
					logger.info("Email is not active at event 'DEVIATION_APPROVAL' from comm_event_list_m....");
					ApprovedCount = "1";
				}
				else if(CommonFunction.checkNull(msg).equalsIgnoreCase("X") && CommonFunction.checkNull(RejectedCount).equals("0")){
					msg="Rejected";
					if(!recStatus1.equalsIgnoreCase("0"))
					{
							String EventName="DEVIATION_APPROVAL";
							
								boolean stats=new SmsDAOImpl().getEmailDetails(dealId,"X",EventName);
								logger.info("Email Send on event DEVIATION_APPROVAL::: "+stats);
					}
					else
					logger.info("Email is not active at event 'DEVIATION_APPROVAL' from comm_event_list_m....");
					RejectedCount = "1";
				}
				
			 }
			//pooja code for Deviation SMS/E-mail	
			 msg="saveDeviation";
		}else{
		if(status)
		{
			//pooja code for Deviation SMS/E-mail
			 String manualPolicyId[] = vo.getManualPolicyId();
			 logger.info("In saveDeviationApproval...manualPolicyId.length."+ manualPolicyId.length);
			 String manRecStatus[] = vo.getManRecStatus();
			 logger.info("In saveDeviationApproval...manRecStatus.length."+ manRecStatus.length);
			 int i;
			 String ApprovedCount = "0";
			 String RejectedCount = "0";
			 for(i=0;i<manRecStatus.length;i++){
			 String query1="Select count(1) from comm_event_list_m where event_name='DEVIATION_APPROVAL' and REC_STATUS='A' ";
				logger.info("query1_DEVIATION_APPROVAL::::"+query1.toString());
				String recStatus1 =ConnectionDAO.singleReturn(query1.toString());
				msg=manRecStatus[i];
				logger.info("msg-->"+msg);
				logger.info("ApprovedCount-->"+ApprovedCount);
				logger.info("RejectedCount-->"+RejectedCount);
				if(CommonFunction.checkNull(msg).equalsIgnoreCase("AP") && CommonFunction.checkNull(ApprovedCount).equalsIgnoreCase("0") ){
					msg="Approved";
					if(!recStatus1.equalsIgnoreCase("0"))
					{
							String EventName="DEVIATION_APPROVAL";
								boolean stats=new SmsDAOImpl().getEmailDetails(dealId,"A",EventName);
								logger.info("Email Send on event DEVIATION_APPROVAL::: "+stats);
					}
					else
					logger.info("Email is not active at event 'DEVIATION_APPROVAL' from comm_event_list_m....");
					ApprovedCount = "1";
				}
				else if(CommonFunction.checkNull(msg).equalsIgnoreCase("R") && CommonFunction.checkNull(RejectedCount).equalsIgnoreCase("0")){
					msg="Rejected";
					if(!recStatus1.equalsIgnoreCase("0"))
					{
							String EventName="DEVIATION_APPROVAL";
							
								boolean stats=new SmsDAOImpl().getEmailDetails(dealId,"X",EventName);
								logger.info("Email Send on event DEVIATION_APPROVAL::: "+stats);
					}
					else
					logger.info("Email is not active at event 'DEVIATION_APPROVAL' from comm_event_list_m....");
					RejectedCount = "1";
				}
				
			 }
			//pooja code for Deviation SMS/E-mail	
		checkApproveDeviation=dao.countApproveDeviation(dealId);
		
		
		if(CommonFunction.checkNull(checkApproveDeviation).equalsIgnoreCase("0")){
			
			String checkStageM=CommonFunction.stageMovement(companyId, "DC","F",dealId, "POC", bDate,userId);
			logger.info("checkStageM : "+checkStageM);
			sms="S";
			request.setAttribute("sms",sms);
			if(CommonFunction.checkNull(checkStageM).equalsIgnoreCase("S")){
				  //Rohit Changes for SMS & Email
				  String emailcheckQuery="SELECT COUNT(1) FROM CR_DEAL_MOVEMENT_DTL WHERE DEAL_FORWARDED='0000-00-00 00:00:00' AND IFNULL(DEAL_FORWARD_USER,'')='' AND DEAL_STAGE_ID<>'UNC' AND DEAL_ID='"+dealId+"' ";
				  String res=ConnectionDAO.singleReturn(emailcheckQuery);
				  String EventName="";
					String rec="";
					int cont=0;
				  if(res.equalsIgnoreCase("0")){
					  EventName = "UNDERWRITER_QUEUE";
						 rec = "Select count(1) from comm_event_list_m where Event_name='"
								+ EventName + "' and rec_status='A' ";
						 cont = Integer.parseInt(ConnectionDAO
								.singleReturn(rec));
						if (cont != 0) {
							boolean stats = new SmsDAOImpl().getEmailDetails(
									dealId, bDate, EventName);
						}
				  }
				  //Rohit end
			}
			DeviationDynaValidatorForm.reset(mapping, request);
		}
		else{
			if(!CommonFunction.checkNull(checkApproveDeviation).equalsIgnoreCase("0") && !CommonFunction.checkNull(checkApproveDeviation).equalsIgnoreCase("")){
				sms="S";
				ArrayList devialtionDetail =new ArrayList();
				devialtionDetail.add(vo);
				request.setAttribute("devialtionDetail", devialtionDetail);
				vo.setFunctionId(functionId);
				ArrayList list = dao.getDeviationApprovalDetails(vo,dealId);
				request.setAttribute("list", list);
				ArrayList<DeviationApprovalVo> manualDeviationM = dao.manualDeviationM(vo,dealId);	
				request.setAttribute("manualDevList", manualDeviationM);
				request.setAttribute("sms",sms);
			}
			else{
			sms="E";
			ArrayList devialtionDetail =new ArrayList();
			devialtionDetail.add(vo);
			request.setAttribute("devialtionDetail", devialtionDetail);
			vo.setFunctionId(functionId);
			ArrayList list = dao.getDeviationApprovalDetails(vo,dealId);
			request.setAttribute("list", list);
			ArrayList<DeviationApprovalVo> manualDeviationM = dao.manualDeviationM(vo,dealId);	
			request.setAttribute("manualDevList", manualDeviationM);
			request.setAttribute("sms",sms);
			}
		}
	}
		msg="forwardDeviation"; 
	}
	    logger.info("status"+status);
	    
	    return mapping.findForward(msg);
	}
	//------- code by manisha
	
	public ActionForward onSaveDeviationApproval(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		logger.info("Inside  onSaveDeviationApproval action");
		HttpSession session=request.getSession(false);
		//UserObject userobj=new UserObject();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate="";
		String companyId="";
		if(userobj!=null)
		{
			userId	=userobj.getUserId();
			bDate=userobj.getBusinessdate();
			companyId=""+userobj.getCompanyId();
		}else{
			logger.info("here in onSaveDeviationApproval method of DeviationApprovalAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		DynaValidatorForm DeviationDynaValidatorForm= (DynaValidatorForm)form;
		String dealId = "";

		
		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		
		logger.info("In onSaveDeviationApproval(execute) dealid: " + dealId);
		
		boolean flag=false;
		
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String functionId=(String)session.getAttribute("functionId");
		String chkValue=CommonFunction.checkNull(request.getParameter("chkValue"));
		String chkValueForAuto=CommonFunction.checkNull(request.getParameter("chkValueForAuto"));
		String[] autoDevRecStatus=chkValueForAuto.split(",");

		String[] recStatus=chkValue.split(",");

		
		DeviationApprovalVo vo = new DeviationApprovalVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, DeviationDynaValidatorForm);	
		//String st=request.getParameter("status");
		//vo.setRecStatus(request.getParameter("status"));
		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		vo.setRecStatusId(recStatus);
		vo.setAutoRecStatusId(autoDevRecStatus);
		/* changed by asesh */
		DeviationApprovalDAO dao=(DeviationApprovalDAO)DaoImplInstanceFactory.getDaoImplInstance(DeviationApprovalDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 	
        /* End by asesh */
		String sms="";
		
		String status = dao.saveDeviationApproval ( vo);
		logger.info("Inside onSaveDeviationApproval.....displaying status...."+status);
		if(status=="Saved"){
			
		
			sms="A";
			request.setAttribute("sms",sms);
			DeviationDynaValidatorForm.reset(mapping, request);
			ArrayList list = dao.getDeviationApprovalDetails(vo,dealId);
			request.setAttribute("list", list);
			if(CommonFunction.checkNull(functionId).equalsIgnoreCase("3000296")){
				ArrayList manualDeviationUND = dao.manualDeviationUND(vo,dealId);
				request.setAttribute("manualDeviationUND", manualDeviationUND);
			}else{
			vo.setFunctionId(functionId);
			ArrayList<DeviationApprovalVo> manualDeviationM = dao.manualDeviationM(vo,dealId);	
			request.setAttribute("manualDevList", manualDeviationM);
			}
	
		}
		else{
			sms="E";
			ArrayList devialtionDetail =new ArrayList();
			devialtionDetail.add(vo);
			request.setAttribute("devialtionDetail", devialtionDetail);
			request.setAttribute("sms",sms);
		}
	    logger.info("status"+status);
	    
		return mapping.findForward("saveDeviation");
	}
	
	public ActionForward deleteDeviation(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response)
		    throws Exception
		  {
		    logger.info("Inside  deleteDeviation action");
		    HttpSession session = request.getSession(false);

		    UserObject userobj = (UserObject)session.getAttribute("userobject");
		    String userId = "";
		    String bDate = "";
		    String companyId = "";
		    if (userobj != null)
		    {
		      userId = userobj.getUserId();
		      bDate = userobj.getBusinessdate();
		      companyId = "" + userobj.getCompanyId();
		    } else {
		      logger.info("here in deleteDeviation method of DeviationApprovalAction action the session is out----------------");
		      return mapping.findForward("sessionOut");
		    }
		    DynaValidatorForm DeviationDynaValidatorForm = (DynaValidatorForm)form;
		    String dealId = "";

		    if (session.getAttribute("dealId") != null)
		    {
		      dealId = session.getAttribute("dealId").toString();
		    } else if (session.getAttribute("maxId") != null) {
		      dealId = session.getAttribute("maxId").toString();
		    }

		    logger.info("In deleteDeviation(execute) dealid: " + dealId);

		    boolean flag = false;

		    Object sessionId = session.getAttribute("sessionID");

		    ServletContext context = getServlet().getServletContext();
		    String strFlag = "";
		    if (sessionId != null)
		    {
		      strFlag = UserSessionCheck.checkSameUserSession(userobj, sessionId.toString(), "", request);
		    }

		    logger.info("strFlag .............. " + strFlag);
		    if (!strFlag.equalsIgnoreCase(""))
		    {
		      if (strFlag.equalsIgnoreCase("sameUserSession"))
		      {
		        context.removeAttribute("msg");
		        context.removeAttribute("msg1");
		      }
		      else if (strFlag.equalsIgnoreCase("BODCheck"))
		      {
		        context.setAttribute("msg", "B");
		      }
		      return mapping.findForward("logout");
		    }
		    String functionId = (String)session.getAttribute("functionId");

		    String deleteId = request.getParameter("deleteId");
		    String[] deleteIdFin = deleteId.split("/");
		    logger.info("deleteIdFin..............." + deleteIdFin);

		    DeviationApprovalVo vo = new DeviationApprovalVo();
		    BeanUtils.copyProperties(vo, DeviationDynaValidatorForm);

		    vo.setMakerId(userId);
		    vo.setMakerDate(bDate);
		    vo.setDealId(dealId);
		   

		    DeviationApprovalDAO dao = (DeviationApprovalDAO)DaoImplInstanceFactory.getDaoImplInstance("DA");
		    logger.info("Implementation class: " + dao.getClass());

		    String sms = "";

		    String status = dao.deleteDeviationUND(vo, deleteIdFin);
		    logger.info("Inside deleteDeviation.....displaying status...." + status);
		    if (status == "Saved")
		    {
		      
		      DeviationDynaValidatorForm.reset(mapping, request);
		      ArrayList list = dao.getDeviationApprovalDetails(vo, dealId);
		      request.setAttribute("list", list);
		      if (CommonFunction.checkNull(functionId).equalsIgnoreCase("3000296")) {
		        ArrayList manualDeviationUND = dao.manualDeviationUND(vo, dealId);
		        request.setAttribute("manualDeviationUND", manualDeviationUND);
		      } else {
		        vo.setFunctionId(functionId);
		        ArrayList manualDeviationM = dao.manualDeviationM(vo, dealId);
		        request.setAttribute("manualDevList", manualDeviationM);
		      }
		      sms = "A";
		      request.setAttribute("sms", sms);
		    }
		    else
		    {
		      sms = "E";
		      ArrayList devialtionDetail = new ArrayList();
		      devialtionDetail.add(vo);
		      request.setAttribute("devialtionDetail", devialtionDetail);
		      request.setAttribute("sms", sms);
		    }
		    logger.info("status" + status);

		    return mapping.findForward("saveDeviation");
		  }
	

	

}