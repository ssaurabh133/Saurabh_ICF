/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;
import java.util.Properties;

import javax.naming.InitialContext;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.business.CPClient.LeadProcessingRemote;
import com.business.DealClient.DealProcessingBeanRemote;
import com.business.ejbClient.CommonMasterBussinessSessionBeanRemote;
import com.connect.CommonFunction;
import com.connect.LookUpInstanceFactory;
import com.cp.vo.CreditProcessingLeadDetailDataVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/**
 * MyEclipse Struts Creation date: 08-20-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class LeadCapturingDispatchAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	private static final Logger logger = Logger.getLogger(LeadCapturingDispatchAction.class.getName());
	
	public ActionForward leadEntrySave(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		logger.info("In LeadCapturingDispatchAction leadEntrySave().... ");
		HttpSession session = request.getSession();
		UserObject userobj = (UserObject) session.getAttribute("userobject");
		String userId="";
		String bDate="";
		String branchId=null;
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
				branchId= userobj.getBranchId();
		}else{
			logger.info("here in leadEntrySave method of LeadCapturingDispatchAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		String sessionId = session.getAttribute("sessionID").toString();

		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String leadId = "";

		if (session.getAttribute("leadId") != null) {

			leadId = session.getAttribute("leadId").toString();
		} else if (session.getAttribute("maxId") != null) {
			leadId = session.getAttribute("maxId").toString();
		}

			CreditProcessingLeadDetailDataVo leadIdVo = new CreditProcessingLeadDetailDataVo();
		
	
		leadIdVo.setLeadId(leadId);
		leadIdVo.setApplicationdate(bDate);
		leadIdVo.setMakerId(userId);
		
		
		DynaValidatorForm LeadCapturingDynaValidatorForm = (DynaValidatorForm) form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(leadIdVo, LeadCapturingDynaValidatorForm);
		
		leadIdVo.setLbxRegionID2(branchId);

		String msg = "";

	        CommonMasterBussinessSessionBeanRemote master = (CommonMasterBussinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(CommonMasterBussinessSessionBeanRemote.REMOTE_IDENTITY, request);
	        
	        LeadProcessingRemote lp = (LeadProcessingRemote) LookUpInstanceFactory.getLookUpInstance(LeadProcessingRemote.REMOTE_IDENTITY, request);
	        
	        DealProcessingBeanRemote dp = (DealProcessingBeanRemote) LookUpInstanceFactory.getLookUpInstance(DealProcessingBeanRemote.REMOTE_IDENTITY, request);
	        
	
		String param = request.getParameter("saveForward");
	
		leadIdVo.setTurnOver(request.getParameter("turnOver"));
		 ArrayList<CreditProcessingLeadDetailDataVo> addresstypeList=lp.addresstype();
		 
			request.setAttribute("addresstypeList", addresstypeList);
			
			String groupName=leadIdVo.getGroupName();
			String count="";
			int count1=0;
			boolean result =false;
			String groupExist="Group Already Exist";
			if(leadIdVo.getGroupType().equalsIgnoreCase("N")){
//Sanjog Changes Start Here
				count=master.checkgroupName(groupName);
//Sanjog Changes end Here
				count1=Integer.parseInt(count);
			}if(count1>0)
			{
				request.setAttribute("group", groupExist);
			}else{
				result = lp.saveLeadDetailData(leadIdVo,param);
		
			}
				ArrayList<Object> leadDetails = new ArrayList<Object>();
				leadDetails.add(leadIdVo);
				request.setAttribute("leadDetails", leadDetails);
		
				ArrayList<Object> leadRMDetails = new ArrayList<Object>();
				leadRMDetails.add(leadIdVo);
				request.setAttribute("leadRMDetails", leadRMDetails);
				ArrayList<Object> eduDetail = lp.getEduDetailList();
				request.setAttribute("eduDetail", eduDetail);
//Sanjog Changes Start Here				
				ArrayList getLoanTypeList = dp.getLoanTypeList();
				request.setAttribute("getLoanType", getLoanTypeList);
				
				String source = "";
				ArrayList<CreditProcessingLeadDetailDataVo> getSourceDetailList = lp.getSourceDetailList(source);
				request.setAttribute("sourceList", getSourceDetailList);
//Sanjog Changes End Here
		if (result) {
			if(param.equalsIgnoreCase("Save")){
			msg = "M";
			request.setAttribute("msg", msg);
			}else if(param.equalsIgnoreCase("Forward")){
				if(leadIdVo.getLeadGenerator().equalsIgnoreCase("RM")||leadIdVo.getLeadGenerator().equalsIgnoreCase("RO")){
					msg = "L";
					request.setAttribute("Al", msg);
					session.removeAttribute("leadId");
				}else {
					msg = "S";
					request.setAttribute("fw", msg);
					session.removeAttribute("leadId");
				}
				}
		}else{
			
		}
		branchId=null;
		dp=null;
		lp=null;
		leadIdVo=null;
		form.reset(mapping, request);
		return mapping.getInputForward();
	}
	
	public ActionForward saveNewLead(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		logger.info("In LeadCapturingDispatchAction leadEntrySave().... ");
		HttpSession session = request.getSession();
		UserObject userobj = (UserObject) session.getAttribute("userobject");
		String userId="";
		String bDate="";
		String branchId=null;
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
				branchId=userobj.getBranchId();
		}else{
			logger.info("here in saveNewLead method of LeadCapturingDispatchAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		String sessionId = session.getAttribute("sessionID").toString();

		// String cond = request.getParameter("saveForward");
		// logger.info("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"+cond);

		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
	
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String leadId = "";

		if (session.getAttribute("leadId") != null) {

			leadId = session.getAttribute("leadId").toString();
		} else if (session.getAttribute("maxId") != null) {
			leadId = session.getAttribute("maxId").toString();
		}

		CreditProcessingLeadDetailDataVo leadIdVo = new CreditProcessingLeadDetailDataVo();

		leadIdVo.setLeadId(leadId);
		leadIdVo.setApplicationdate(bDate);
		leadIdVo.setMakerId(userId);
		
		
		DynaValidatorForm LeadCapturingDynaValidatorForm = (DynaValidatorForm) form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(leadIdVo,LeadCapturingDynaValidatorForm);
		String param = request.getParameter("saveForward");
		
		leadIdVo.setLbxRegionID2(branchId);

        CommonMasterBussinessSessionBeanRemote master = (CommonMasterBussinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(CommonMasterBussinessSessionBeanRemote.REMOTE_IDENTITY, request);

        LeadProcessingRemote lp = (LeadProcessingRemote) LookUpInstanceFactory.getLookUpInstance(LeadProcessingRemote.REMOTE_IDENTITY, request);
	       
        DealProcessingBeanRemote dp = (DealProcessingBeanRemote) LookUpInstanceFactory.getLookUpInstance(DealProcessingBeanRemote.REMOTE_IDENTITY, request);
		
        
		String msg = "";
		leadIdVo.setTurnOver(request.getParameter("turnOver"));
		 ArrayList<CreditProcessingLeadDetailDataVo> addresstypeList=lp.addresstype();
		request.setAttribute("addresstypeList", addresstypeList);
		String groupName=leadIdVo.getGroupName();
		String count="";
		int count1=0;
		
		String groupExist="Group Already Exist";
		if(leadIdVo.getGroupType().equalsIgnoreCase("N")){
//Sanjog Changes Start Here
			count=master.checkgroupName(groupName);
//Sanjog Changes End Here
			count1=Integer.parseInt(count);
		}
		if(count1>0)
		{
			request.setAttribute("group", groupExist);
			request.setAttribute("NEW","NEW");
		}else{
			
		String result = lp.saveNewLead(leadIdVo);
		logger.info("result" + result);
		if(result.equalsIgnoreCase("Some Error In The SQL Execution")||result.equals("")){
			request.setAttribute("procval", result);
			request.setAttribute("procvalue", "ProcError");
		}else{
		ArrayList<Object> leadRMDetails = new ArrayList<Object>();
		leadRMDetails.add(leadIdVo);
		request.setAttribute("leadRMDetails", leadRMDetails);
		
//Sanjog Changes Start Here
		ArrayList getLoanTypeList = dp.getLoanTypeList();
		request.setAttribute("getLoanType", getLoanTypeList);
		
//Sanjog Changes End Here
		if(param.equalsIgnoreCase("Save")){
		msg = "M";
		request.setAttribute("msg", msg);
		}
		ArrayList<CreditProcessingLeadDetailDataVo> leadDetails = lp.getLeadCapturingDetailsList(result);
		request.setAttribute("leadDetails", leadDetails);
		}
		}
		

		String source = "";
		ArrayList<CreditProcessingLeadDetailDataVo> getSourceDetailList = lp.getSourceDetailList(source);
		ArrayList<Object> eduDetail = lp.getEduDetailList();
	
		
		request.setAttribute("sourceList", getSourceDetailList);
		request.setAttribute("eduDetail", eduDetail);
	
	
	/*	logger.info("************************* "+ session.getAttribute("allocationid"));*/
		//branchId=null;
		lp=null;
		dp=null;
		form.reset(mapping, request);
		return mapping.findForward("success");
	}
	

	public ActionForward saveAllocation(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		logger.info("In saveAllocation.... ");
		HttpSession session = request.getSession();
		UserObject userobj = (UserObject) session.getAttribute("userobject");
		String userId="";
		String bDate="";
		String branchId=null;
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
				branchId=userobj.getBranchId();
		}else{
			logger.info("here in saveAllocation method of LeadCapturingDispatchAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		String sessionId = session.getAttribute("sessionID").toString();

		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
	
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String leadId = "";

		if (session.getAttribute("leadId") != null) {

			leadId = session.getAttribute("leadId").toString();
		} else if (session.getAttribute("maxId") != null) {
			leadId = session.getAttribute("maxId").toString();
		}

		CreditProcessingLeadDetailDataVo leadIdVo = new CreditProcessingLeadDetailDataVo();
	
		
		leadIdVo.setLeadId(leadId);
		leadIdVo.setApplicationdate(bDate);
		leadIdVo.setMakerId(userId);

		DynaValidatorForm LeadCapturingDynaValidatorForm = (DynaValidatorForm) form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(leadIdVo,LeadCapturingDynaValidatorForm);

		String msg = "";
		
		DealProcessingBeanRemote dp = (DealProcessingBeanRemote) LookUpInstanceFactory.getLookUpInstance(DealProcessingBeanRemote.REMOTE_IDENTITY, request);
        
        LeadProcessingRemote lp = (LeadProcessingRemote) LookUpInstanceFactory.getLookUpInstance(LeadProcessingRemote.REMOTE_IDENTITY, request);

		
		leadId = CommonFunction.checkNull(request.getParameter("leadId"));
		boolean result = lp.saveAllocation(leadIdVo);
		if (result) {
			msg = "LA";
			request.setAttribute("msg", msg);
		}
//Sanjog Changes Start Here
		ArrayList getLoanTypeList = dp.getLoanTypeList();
		request.setAttribute("getLoanType", getLoanTypeList);
//Sanjog Changes End Here
		
		leadId = CommonFunction.checkNull(request.getParameter("leadId"));
		
//		ArrayList<Object> alloDetails = service.getAllocationDetail(leadId);
//		request.setAttribute("alloDetails", alloDetails);
		
//		leadIdVo.setLeadGenerator("");
		leadIdVo.setLbxProductID("");
		leadIdVo.setLbxBranchId("");
		leadIdVo.setSchemeId("");
		branchId=null;
		dp=null;
		lp=null;
		form.reset(mapping, request);
		return mapping.getInputForward();
	}
	
	public ActionForward saveTrackingDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		logger.info("In saveTrackingDetails.... ");
		HttpSession session = request.getSession();
		UserObject userobj = (UserObject) session.getAttribute("userobject");
		String userId="";
		String bDate="";
		String branchId=null;
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
				branchId=userobj.getBranchId();
		}else{
			logger.info("here in saveTrackingDetails method of LeadCapturingDispatchAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		String sessionId = session.getAttribute("sessionID").toString();

		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String leadId = "";

		if (session.getAttribute("leadId") != null) {

			leadId = session.getAttribute("leadId").toString();
		} else if (session.getAttribute("maxId") != null) {
			leadId = session.getAttribute("maxId").toString();
		}

		CreditProcessingLeadDetailDataVo leadIdVo = new CreditProcessingLeadDetailDataVo();
	
		leadIdVo.setLeadId(leadId);
		leadIdVo.setApplicationdate(bDate);
		leadIdVo.setMakerId(userId);
		
		DynaValidatorForm LeadCapturingDynaValidatorForm = (DynaValidatorForm) form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(leadIdVo,LeadCapturingDynaValidatorForm);
		
		logger.info("userobj.getBusinessdate(): " + bDate);
		leadIdVo.setApplicationdate(bDate);
		leadIdVo.setAuthorId(userId);
		
		String msg = "";
//Sanjog Changes Start Here
		 Properties props = new Properties();
			props.load(request.getSession().getServletContext().getResourceAsStream("/WEB-INF/jndi.properties")); 
	        InitialContext ic = new InitialContext(props);
	        String applName=props.getProperty("enterprise.application.name");
	   
	      //  logger.info("remoteBean"+remoteBean);
	       
	      //  String remoteBeanName=CommonFunction.checkNull(applName)+CommonFunction.checkNull(remoteBean);
	      // logger.info("remoteBeanName: "+remoteBeanName);
	        LeadProcessingRemote lp = (LeadProcessingRemote) LookUpInstanceFactory.getLookUpInstance(LeadProcessingRemote.REMOTE_IDENTITY, request);
//Sanjog Changes End Here
		leadId = CommonFunction.checkNull(request.getParameter("leadId"));
		boolean result = lp.saveTrackingDetails(leadIdVo);
		
		ArrayList<Object> leadDetails = new ArrayList<Object>();
		leadDetails.add(leadIdVo);
		request.setAttribute("leadDetails", leadDetails);
		if (result) {
			msg = "LT";
			request.setAttribute("msg", msg);
		}

	
		
//		leadIdVo.setLeadGenerator("");
		leadIdVo.setLbxProductID("");
		leadIdVo.setLbxBranchId("");
		leadIdVo.setSchemeId("");
		leadId = CommonFunction.checkNull(request.getParameter("leadId"));
		
//		ArrayList<Object> trackDetails = service.getTrackingDetail(leadId);
//		request.setAttribute("trackDetails", trackDetails);
		branchId=null;
		leadIdVo=null;
		lp=null;
		form.reset(mapping, request);
		return mapping.findForward("tracking");
	}
	

	public ActionForward deleteLead(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		logger.info("In LeadCapturingDispatchAction deleteLead().... ");
		HttpSession session = request.getSession();
		UserObject userobj = (UserObject) session.getAttribute("userobject");
		String userId="";
		String bDate="";
		String branchId=null;
		String result="success";
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
				branchId=userobj.getBranchId();
		}else{
			logger.info("here in deleteLead () of LeadCapturingDispatchAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		String sessionId = session.getAttribute("sessionID").toString();

		// String cond = request.getParameter("saveForward");
		// logger.info("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"+cond);

		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
	
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String leadId = "";

		leadId = request.getParameter("leadId");
		
		   LeadProcessingRemote lp = (LeadProcessingRemote) LookUpInstanceFactory.getLookUpInstance(LeadProcessingRemote.REMOTE_IDENTITY, request);

		
		boolean status = lp.deletelead(leadId);
		 ArrayList<CreditProcessingLeadDetailDataVo> addresstypeList=lp.addresstype();
			request.setAttribute("addresstypeList", addresstypeList);
		if(status){
		
			String source = "";
			ArrayList<CreditProcessingLeadDetailDataVo> getSourceDetailList = lp.getSourceDetailList(source);
			
			request.setAttribute("sourceList", getSourceDetailList);
			
			ArrayList<CreditProcessingLeadDetailDataVo> leadDetails = lp.getLeadCapturingDetailsList(leadId);
			request.setAttribute("leadDetails", leadDetails);
			request.setAttribute("deletelead","delete");
			
		
		}else{
			
			String source = "";
			ArrayList<CreditProcessingLeadDetailDataVo> getSourceDetailList = lp.getSourceDetailList(source);
			
			request.setAttribute("sourceList", getSourceDetailList);
			
			ArrayList<CreditProcessingLeadDetailDataVo> leadDetails = lp.getLeadCapturingDetailsList(leadId);
			request.setAttribute("leadDetails", leadDetails);
			
		}
		branchId=null;
		lp=null;
		return mapping.findForward(result);
	}
	
	public ActionForward searchCustomer(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		HttpSession session = request.getSession();
		UserObject userobj = (UserObject) session.getAttribute("userobject");
		String bDate=userobj.getBusinessdate();

	        
		 LeadProcessingRemote lp = (LeadProcessingRemote) LookUpInstanceFactory.getLookUpInstance(LeadProcessingRemote.REMOTE_IDENTITY, request);

		String source = "";
		
		String customerId=request.getParameter("customerId");
		String addressId=request.getParameter("addressId");
		
		ArrayList<CreditProcessingLeadDetailDataVo> leadDetails = lp.CustomerDetailsList(customerId,addressId,bDate);
		request.setAttribute("leadDetails", leadDetails);
		lp=null;
		return mapping.findForward("ajaxsuccesslead");
	}
	
	
	public ActionForward searchDecisionDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

	        
		 LeadProcessingRemote lp = (LeadProcessingRemote) LookUpInstanceFactory.getLookUpInstance(LeadProcessingRemote.REMOTE_IDENTITY, request);

		String source = "";
		String LeadId = request.getParameter("leadId");
		CreditProcessingLeadDetailDataVo vo = new CreditProcessingLeadDetailDataVo();
		
		ArrayList leadDetailsView = lp.getDecisionList(LeadId);
		ArrayList leadDetails = lp.getLeadCapturingDetailsList(LeadId);
		request.setAttribute("leadDetails", leadDetails);
		request.setAttribute("leadDetailsView", leadDetailsView);
		lp=null;
		return mapping.findForward("decisionSuccess");
	}
	
}