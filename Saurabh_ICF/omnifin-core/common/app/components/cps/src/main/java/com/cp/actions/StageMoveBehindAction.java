/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;
import java.sql.SQLException;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringEscapeUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.cm.vo.LoanDetailForCMVO;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.lockRecord.action.ReleaseRecordFromObject;
import com.logger.LoggerMsg;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.communication.engn.daoImplMySql.SmsDAOImpl;

/**
 * MyEclipse Struts Creation date: 05-12-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class StageMoveBehindAction extends Action {
	private static final Logger logger = Logger.getLogger(StageMoveBehindAction.class.getName());
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response) throws Exception 
	{

		logger.info("In StageMoveBehindAction (execute)");
		HttpSession session = request.getSession();
		boolean flag=false;
		String bDate="";
		String companyId="";
		String status ="";
		String userId="";
		UserObject userobj=(UserObject)session.getAttribute("userobject");		
		if(userobj!=null)
		{
			bDate=userobj.getBusinessdate();
			companyId=""+userobj.getCompanyId();
			userId=userobj.getUserId();
		}
		else
		{
			logger.info("here in execute method of StageMoveBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 	//changed by asesh
		//CreditProcessingDAO dao = new CreditProcessingDAOImpl();
		String dealId = "";
		boolean satge = false;
		String sms = "";
		String product="";
		if (session.getAttribute("dealId") != null) 
			dealId = session.getAttribute("dealId").toString();
		else if (session.getAttribute("maxId") != null) 
			dealId = session.getAttribute("maxId").toString();
		
		if (dealId != null && !dealId.equalsIgnoreCase("")) 
		{

			// add by saorabh
			String selectQuery = "select ifnull(vat_percent,0.00) vat_percent from cr_asset_collateral_m where asset_id in (select assetId from cr_deal_collateral_m where deal_id = '"+dealId+"')";	
			ArrayList arrayList =ConnectionDAO.sqlSelect(selectQuery);
			String checkVatPercent = "";
			String checkVatPercent1 = "";
			boolean validateFalg=false;
			if(arrayList.size()>1)
			{
				checkVatPercent = CommonFunction.checkNull(arrayList.get(0)).trim();
				logger.info("checkVatPercent ----------"+checkVatPercent);
				for(int i=1;i<arrayList.size();i++)
				{
					checkVatPercent1=CommonFunction.checkNull(arrayList.get(i)).trim();
					if(!checkVatPercent.equalsIgnoreCase(checkVatPercent1))
					{
						request.setAttribute("vatPercent", "vat");
						validateFalg=true;
						break;
					}
				}
				if(validateFalg)
				return mapping.getInputForward();
			}
			// end by saorabh
			logger.info("In StageMoveBehindAction (execute) dealid "+ dealId);
			String under = request.getParameter("status");
			logger.info("In StageMoveBehindAction (execute) " + under);
			if ((dealId != null && !dealId.equalsIgnoreCase(""))&& (under == null)) 
			{
				//pooja 
				StringBuffer bufInsSql = new StringBuffer();
				ArrayList searchlist = new ArrayList();
				ArrayList detailList =new ArrayList();
				String custStatus = "";
				String custFlag="";
				
				try{
					bufInsSql.append("select ifnull(MOTHER_FIRST_NAME,0) from cr_deal_customer_m cm left join cr_deal_customer_role cr on cr.deal_customer_id=cm.customer_id left join cr_deal_dtl cd on cd.deal_id=cr.deal_id where  cd.deal_id='"+dealId+"' ");		
					logger.info("Fatch MOTHER_NAME Query : "+bufInsSql);
					searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());		
					
					for (int i = 0; i < searchlist.size(); i++)
					{
						ArrayList data = (ArrayList) searchlist.get(i);
						if (data.size() > 0) {
							String MOTHER_NAME = CommonFunction.checkNull(data.get(0)).toString();
							custStatus = custStatus+"|"+CommonFunction.checkNull(ConnectionDAO.singleReturn("select count(1) from cr_deal_customer_m cm left join cr_deal_customer_role cr on cr.deal_customer_id=cm.customer_id left join cr_deal_dtl cd on cd.deal_id=cr.deal_id where  cd.deal_id='"+dealId+"' and MOTHER_FIRST_NAME='"+MOTHER_NAME+"' "));
						}
					}
					
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				if(custStatus.contains("0")){
					//request.setAttribute("custStatus", "custStatus");
					custFlag="N";
				}
				//pooja 
				
				String queryCheckRelation="select COUNT(1) from cr_deal_customer_role cr   join cr_deal_dtl cd on cd.deal_id=cr.deal_id join com_address_m cm on cm.bpid=cr.deal_customer_id WHERE cd.deal_id='"+dealId+"' and RELATIONSHIP_FLAG='N'  ";
				int relationCount=Integer.parseInt(ConnectionDAO.singleReturn(queryCheckRelation));
				if(relationCount<1){
				String queryCheck="select COUNT(1) from cr_deal_customer_m cm  join cr_deal_customer_role cr on cr.deal_customer_id=cm.customer_id  join cr_deal_dtl cd on cd.deal_id=cr.deal_id where  cd.deal_id='"+dealId+"' and RISK_CATEGORY is null ";
				int stageCount=Integer.parseInt(ConnectionDAO.singleReturn(queryCheck));
				String queryCheckAddress="select COUNT(1) from cr_deal_address_m cm  join cr_deal_customer_role cr on cr.deal_customer_id=cm.BPID  join cr_deal_dtl cd on cd.deal_id=cr.deal_id where  cd.deal_id='"+dealId+"' and ifnull(NO_OF_YEARS,'')='' ";
				int stageCountAddress=Integer.parseInt(ConnectionDAO.singleReturn(queryCheckAddress));
				if(stageCount==0){
					if(stageCountAddress==0){
				status = dao.checkStage(dealId);
					}else{
						status="custAddStatus";
					}
				logger.info("In StageMoveBehindAction (execute) Status of stage: "+ status);
				}else{
					status="custStatus";
					
				}
				}else{
					status="relationStatus";
				}
				if (status != null && status.equals("")) 
				{						
					ArrayList list = dao.getAssetLoanDetailAmount(dealId);
					if(list.size()>0)
					{
						ArrayList sublist=(ArrayList)list.get(0);
						String repyType=CommonFunction.checkNull((String)sublist.get(0));
						String astFlag=CommonFunction.checkNull((String)sublist.get(1));
						logger.info("repyType     :    "+repyType);
						logger.info("astFlag      :    "+astFlag);						
						StringBuilder q22=new StringBuilder();
						StringBuilder q23=new StringBuilder();
						q22.append("SELECT IFNULL(ASSET_MANDATORY_AT_DEAL,'N') FROM CR_DEAL_LOAN_DTL A JOIN CR_PRODUCT_M B ON A.DEAL_PRODUCT=B.PRODUCT_ID WHERE A.DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
						String assetMandatoryFlag=ConnectionDAO.singleReturn(q22.toString());
						
						q23.append("select count(1) from cr_deal_collateral_m a join cr_asset_collateral_m b on(b.ASSET_ID=a.ASSETID) where b.ASSET_TYPE='ASSET'  and a.DEAL_ID="+dealId.trim());
						int noOfTotalAsset=Integer.parseInt(ConnectionDAO.singleReturn(q23.toString()));
						
						String queryProduct = "select deal_product from cr_deal_loan_dtl where deal_id="+dealId;
						String dealProduct = ConnectionDAO.singleReturn(queryProduct);
                                                String parameterProductQuery = "select PARAMETER_VALUE from parameter_mst  where parameter_key='PRODUCT_FOR_VEHICLE' ";
						String parameterProduct = ConnectionDAO.singleReturn(parameterProductQuery);
						
// Vishal changes start
						String checkdeal=CommonFunction.checkNull(request.getParameter("checkDeal"));
						
						if(checkdeal.equalsIgnoreCase(""))
							checkdeal="false";
						else
							checkdeal="true";
						
						if(parameterProduct.contains(dealProduct) && !checkdeal.equalsIgnoreCase("true"))
						{
						ArrayList List = dao.vehicleApprovalGridDetails(dealId);
						String vehicleType = "";
						String manufacturer = "";
						String vehicleModel = "";
						
						if(detailList.size()>0)
						{
							LoanDetailForCMVO loanDetailForCMVO = (LoanDetailForCMVO) detailList.get(0);
							vehicleType=CommonFunction.checkNull(loanDetailForCMVO.getVehicleType());
							manufacturer=CommonFunction.checkNull(loanDetailForCMVO.getManufactId());
							vehicleModel=CommonFunction.checkNull(loanDetailForCMVO.getModelDescId());
							logger.info("vehicleType     :   "+vehicleType);
							logger.info("manufacturer    :   "+manufacturer);	
							logger.info("vehicleModel    :   "+vehicleModel);
						}
						
						String approvedBy = dao.checkLTV(dealId, vehicleType, manufacturer, vehicleModel);
						logger.info("approvedBy : "+CommonFunction.checkNull(approvedBy));
						request.setAttribute("approvedBy",approvedBy);
						return mapping.getInputForward();
						}
						// Vishal changes end
						if(repyType.trim().equalsIgnoreCase("I") && astFlag.trim().equalsIgnoreCase("A") && (noOfTotalAsset>0 || CommonFunction.checkNull(assetMandatoryFlag).equalsIgnoreCase("Y") ))
						{
							StringBuilder query=new StringBuilder();						
							query.append("select count(1) from cr_deal_collateral_m a join cr_asset_collateral_m b on(b.ASSET_ID=a.ASSETID) where b.ASSET_TYPE='ASSET' and a.DEAL_ID="+dealId.trim());
							logger.info("In execute()  query   :   "+ query.toString());
							String ct=ConnectionDAO.singleReturn(query.toString());
							logger.info("In execute()  count   :   "+ ct);
							//For vehicle starts
							StringBuilder queryV=new StringBuilder();
							queryV.append("select count(1) from cr_deal_collateral_m a join cr_asset_collateral_m b on(b.ASSET_ID=a.ASSETID) where b.ASSET_TYPE='ASSET' and b.ASSET_COLLATERAL_CLASS='VEHICLE' and a.DEAL_ID="+dealId.trim());
							logger.info("In execute() vehicle  query   :   "+ queryV.toString());
							String vehicleCount=ConnectionDAO.singleReturn(queryV.toString());
							int val1=0;
							if(CommonFunction.checkNull(vehicleCount).equalsIgnoreCase(""))
								val1=0;
							else
								val1=Integer.parseInt(vehicleCount);
							//For vehicle end
							int value=0;
							if(ct == null)
								value=0;
							else
								value=Integer.parseInt(ct);
							logger.info("value      :    "+value);
							if(value>0)//this deal have some asset of vichel type
							{
								String astcstLD=(String)sublist.get(2);
								String lnamtLD=(String)sublist.get(3);					
								String astcstAD=(String)sublist.get(4);					
								String lnamtAD=(String)sublist.get(5);							
								double asstcstLD;
								double loanamtLD;
								double asstcstAD;
								double loanamtAD;							
								if(astcstLD ==null)
									asstcstLD=0.0;
								else
									asstcstLD=Double.parseDouble(astcstLD);							
								if(lnamtLD ==null)
									loanamtLD=0.0;
								else
									loanamtLD=Double.parseDouble(lnamtLD);							
								if(astcstAD ==null)
									asstcstAD=0.0;
								else
									asstcstAD=Double.parseDouble(astcstAD);							
								if(lnamtAD ==null)
									loanamtAD=0.0;
								else
									loanamtAD=Double.parseDouble(lnamtAD);
								
								logger.info("asstcstLD    :    "+asstcstLD);
								logger.info("loanamtLD    :    "+loanamtLD);
								logger.info("asstcstAD    :    "+asstcstAD);
								logger.info("loanamtAD    :    "+loanamtAD);
								
								int val=0;
								if(val1 == 0)
								{
									if(asstcstLD != asstcstAD)
										val=1;
								}
								else
								{
									if(asstcstLD != asstcstAD && loanamtLD == loanamtAD)
										val=1;
									if(asstcstLD == asstcstAD && loanamtLD != loanamtAD)
										val=2;
									if(asstcstLD != asstcstAD && loanamtLD != loanamtAD)
										val=3;
								}
								logger.info("val    :    "+val);
								logger.info("val1   :    " + val1);
								if(val>0)
								{
									request.setAttribute("astLonError","astLonError");
									request.setAttribute("val",val);
									request.setAttribute("asstcstAD",asstcstAD);
									request.setAttribute("loanamtAD",loanamtAD);
									return mapping.getInputForward();
								}							
							}		
						}
					}
					String sqlQuery="SELECT REFRESH_FLAG FROM cr_deal_dtl WHERE DEAL_ID='"+dealId+"'";					
					String refreshFlagValue = ConnectionDAO.singleReturn(sqlQuery);
					boolean flag1=false;
					for(int i=0;i<15;i++)
					{						
						if(refreshFlagValue!="" && refreshFlagValue.charAt(i)=='Y')
						{
							int j= i+1;
							request.setAttribute("status", "CP"+j);
							LoggerMsg.info("refresh value from request set ...................... "+request.getAttribute("status"));
							flag1= true;
							break;							
						}						
					}
					if(flag1)
					{
						return mapping.getInputForward();
					}
					 String checkStageM=CommonFunction.stageMovement(companyId, "DC","F",dealId, "DC", bDate,userId);
					 logger.info("checkStageM : "+checkStageM);		
					
					 if(CommonFunction.checkNull(checkStageM).equalsIgnoreCase("S"))
					 {	
						 String updateMakerIdQuery="update cr_deal_dtl set MAKER_ID='"+userId+"' where DEAL_ID='"+dealId+"' ";
						 ArrayList lis=new ArrayList();
						 logger.info("Update Maker Id Query query: "+updateMakerIdQuery);
						 lis.add(updateMakerIdQuery);
						 boolean updateSTatus=ConnectionDAO.sqlInsUpdDelete(lis);
						 logger.info("Update Maker Id Query status: "+updateSTatus);
						 	product=dao.getProductType(dealId);
							int count=dao.getViabilityCount(dealId);
							if(!product.equalsIgnoreCase("CV")&& count>0)
							{
								boolean status1 =dao.deleteViabilityDtl(dealId);
								session.setAttribute("asd", "asd");
								satge = dao.stageForward(dealId,bDate);	
							}								       
							else 
							{
								boolean viabilityStatus =dao.checkEMIAmountInViability(dealId);	
								logger.info("In Side if Block::viabilityStatus:::::::::::::"+viabilityStatus);
								if(viabilityStatus)
								{
									status="VS";
									request.setAttribute("sms", "");
								}
								else{
									session.setAttribute("asd", "asd");
									satge = dao.stageForward(dealId,bDate);
								}
							}
							/* Rohit Chnages STrats FOR sms & eMAIL */
							String msgFlag = " select count(1) from cr_deal_movement_dtl where deal_id = '"+dealId+"' and DEAL_STAGE_ID = 'DC' and DEAL_FORWARDED<>'0000-00-00 00:00:00' and ifnull(DEAL_FORWARD_USER,'')<>'' ";
							int cnt = Integer.parseInt(ConnectionDAO.singleReturn(msgFlag));
							String EventName="";
							String rec="";
							int cont=0;
							if(cnt==1){
								 EventName = "DEAL_LOGIN_EXTERNAL";
								 rec = "Select count(1) from comm_event_list_m where Event_name='"
										+ EventName + "' and rec_status='A' ";
								 cont = Integer.parseInt(ConnectionDAO
										.singleReturn(rec));
								if (cont != 0) {
									boolean stats = new SmsDAOImpl().getEmailDetails(
											dealId, bDate, EventName);
								}

								 EventName = "DEAL_LOGIN_INTERNAL";
								 rec = "Select count(1) from comm_event_list_m where Event_name='"
										+ EventName + "' and rec_status='A' ";
								 cont = Integer.parseInt(ConnectionDAO
										.singleReturn(rec));
								if (cont != 0) {
									boolean stats = new SmsDAOImpl().getEmailDetails(
											dealId, bDate, EventName);
								}
							
							}
							
							
							  String emailcheckQuery="SELECT COUNT(1) FROM CR_DEAL_MOVEMENT_DTL WHERE DEAL_FORWARDED='0000-00-00 00:00:00' AND IFNULL(DEAL_FORWARD_USER,'')='' AND DEAL_STAGE_ID<>'UNC' AND DEAL_ID='"+dealId+"' ";
							  String res=ConnectionDAO.singleReturn(emailcheckQuery);
							 
							  if(res.equalsIgnoreCase("0")){
								  EventName = "UNDERWRITER_QUEUE";
									 rec = "Select count(1) from comm_event_list_m where Event_name='"
											+ EventName + "' and rec_status='A' ";
									 cont = Integer.parseInt(ConnectionDAO
											.singleReturn(rec));
									if (cont != 0) {
										boolean stats = new SmsDAOImpl().getEmailDetails(
												dealId, bDate, EventName);
									}
							  }
							
							/* Rohit Chnages end */
					 }
					 else
					 {
						request.setAttribute("checkStageM", checkStageM); 
						status="CSM";
					 }						 
				}
				if (satge) 
				{					
					if(context!=null)
					{
						boolean Lflag = ReleaseRecordFromObject.releaselockedRecord(userId, context);
					}
					sms = "S";
					request.setAttribute("sms", sms);
				}
				
				request.setAttribute("status", status);
			}
			// Start By Prashant
		    if(CommonFunction.checkNull(status).equalsIgnoreCase("CUSTREF"))
		    {
		    	String referenceCountParaQuery="select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY='APPLICANT_REFERENCE_COUNT'";
		    	String referenceCountPara = ConnectionDAO.singleReturn(referenceCountParaQuery);
		    	logger.info("From Pararmeter_mst referenceCountParaQuery "+referenceCountParaQuery+"referenceCountPara: "+referenceCountPara);
		    	request.setAttribute("referenceCountPara", referenceCountPara);
		    }
		   // End By Prashant
			return mapping.findForward("success");
		}
		else 
		{
			request.setAttribute("back", "B");
			return mapping.findForward("backToFirst");
		}
		
		
	}
}