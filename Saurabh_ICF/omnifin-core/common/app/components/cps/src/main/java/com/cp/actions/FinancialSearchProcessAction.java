/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.financialDao.FinancialDAO;
import com.cp.vo.CommonDealVo;
import com.cp.vo.FinancialAnalysisVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 10-14-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"  
 */
public class FinancialSearchProcessAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(FinancialSearchProcessAction.class.getName());	
	public ActionForward financialAnalysisSearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{
		logger.info("In FinancialSearchProcessAction , financialAnalysisSearch Method......");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String branchId="";
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			branchId=userobj.getBranchId();
		}else{
			logger.info("here in financialAnalysisSearch method of FinancialSearchProcessAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	

		
		
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		DynaValidatorForm CommonDealDynaValidatorForm = (DynaValidatorForm) form;
		CommonDealVo vo = new CommonDealVo();
		
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,CommonDealDynaValidatorForm);
		vo.setBranchId(branchId);
		
		
		
//		String userName=vo.getUserName();
//		if(userName.trim().length()==0)
//			userName=userobj.getUserName();
//		vo.setUserName(userName);
//		System.out.println("userName  : "+userName);
		
		if(CommonFunction.checkNull(vo.getReportingToUserId()).equalsIgnoreCase(""))
		{ 
			vo.setReportingToUserId(userId);
		   //logger.info("When user id is not selected by the user:::::"+userId);
		}
		logger.info("user Id:::::"+vo.getReportingToUserId());

//		String userId=request.getParameter("userId");
//		vo.setUserId(userId);
//		if(CommonFunction.checkNull(userId).equalsIgnoreCase(""))
//		{
//			userId=userobj.getUserName();
//			   vo.setUserId(userId);
//		}
		
		int currentPageLink = 0;
		logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
		
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));
		
		vo.setCurrentPageLink(currentPageLink);
		vo.setBranchId(branchId);
//		if(session.getAttribute("fundFlowAuthor")!=null && session.getAttribute("fundFlowAuthor").toString().equalsIgnoreCase("A"))
//		{
//			vo.setRecStatus("F");
//		}
//		else
//		{
			vo.setRecStatus("F");
	//	}
			FinancialDAO dao=(FinancialDAO)DaoImplInstanceFactory.getDaoImplInstance(FinancialDAO.IDENTITY);
			logger.info("Implementation class: "+dao.getClass());
		ArrayList<CommonDealVo> list = dao.financialSearchGetDetail(vo);
		if(list.size()>0)
		{
			logger.info("financialSearchGetDetail....list: "+list.size());
			request.setAttribute("list", list);
		    request.setAttribute("financialDetails", list);
		   // request.setAttribute("list", financialDetails);
		    request.setAttribute("vo", vo);
		}
		else
		{
			request.setAttribute("vo", vo);
			request.setAttribute("sms", "N");
		}
	    
		return mapping.getInputForward();
	}
	
	public ActionForward openEditFinancialAnalysis(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)  throws Exception{
		 logger.info("in openEditFinancialAnalysis ................................");
		 	HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			String userId="";
			String bDate="";
			String branchId=""; 
			String forwardSourceType = "";
			String dealId="";
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bDate=userobj.getBusinessdate();
					branchId=userobj.getBranchId();
			}else{
				logger.info("here in openEditFinancialAnalysis method of FinancialSearchProcessAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
		if(session.getAttribute("financialDealId")!=null)
			 {
				 dealId = session.getAttribute("financialDealId").toString();
				 session.setAttribute("financialDealId",dealId);
			 }
			 logger.info("Deal Id ---------"+dealId);
			 if(dealId=="" && request.getParameter("dealId")!=null)
			 {
				 dealId = CommonFunction.checkNull(request.getParameter("dealId"));
				 session.setAttribute("financialDealId",dealId);
			 }
			 logger.info("Deal Id ---------"+dealId);
			
		if(request.getParameter("dealId")!=null)
			 session.setAttribute("dealIdForFFAAndFA",dealId);   //Added By Sarvesh
		{
			FinancialDAO dao=(FinancialDAO)DaoImplInstanceFactory.getDaoImplInstance(FinancialDAO.IDENTITY);
			logger.info("Implementation class: "+dao.getClass());
	
			CommonDealVo vo = new CommonDealVo();
			vo.setLbxDealNo(request.getParameter("dealId"));
			vo.setLbxDealNo(dealId);
			if(session.getAttribute("underWriterViewData")!=null)
		    {
		    	logger.info("In underWriterViewData/viewer ");
		    	vo.setRecStatus("A");
		    }
			else
			{
			
		    	vo.setRecStatus("P");
			}
			
			vo.setLbxProductID("");
			vo.setLbxscheme("");
			vo.setCustomername("");
			vo.setInitiationDate("");
			
		
			vo.setBranchId(branchId);
			vo.setBusinessdate(bDate);
			vo.setUserId(userId);
			vo.setDealNo(dealId);
			String lbxCustomerId = CommonFunction.checkNull(request.getParameter("lbxCustomerId"));
			 forwardSourceType = CommonFunction.checkNull(request.getParameter("sourceType"));
			vo.setCustomerId(lbxCustomerId);
			request.setAttribute("lbxCustomerId", CommonFunction.checkNull(request.getParameter("lbxCustomerId")));
			request.setAttribute("lbxCustomerRoleType", CommonFunction.checkNull(request.getParameter("lbxCustomerRoleType")));
			request.setAttribute("entityCustomerType", CommonFunction.checkNull(request.getParameter("entityCustomerType")));
			request.setAttribute("entityCustomerName", CommonFunction.checkNull(request.getParameter("entityCustomerName")));
			logger.info("lbxCustomerId ---------"+lbxCustomerId+"  sourceType-------"+forwardSourceType);
			
			String entityCustomerName = CommonFunction.checkNull( ConnectionDAO.singleReturn("select customer_name from cr_deal_customer_m where customer_id ='"+lbxCustomerId+"'"));
			logger.info("entityCustomerName ---------"+entityCustomerName);
			request.setAttribute("entityCustomerName", entityCustomerName);
			Date date;
			DateFormat formatter ; 
			formatter = new SimpleDateFormat("dd-MM-yyyy");
		
				date =(Date)formatter.parse(bDate);
			
				 System.out.println("businessDate: " +bDate);
				 SimpleDateFormat simpleDateformat=new SimpleDateFormat("yyyy");
				 int year =Integer.parseInt(simpleDateformat.format(date));

//Code by sanjog for set previous & forwarded Year
				 int previousYear = 0;
				 int j = dao.getYearForFinancialAnalysis();				 
				 for(int i=1; i<=j; i++){
					 previousYear = year - i;
					 String setYear = "year"+(j-i);
					 if(i != j){
						 request.setAttribute(setYear, previousYear);
					 }else{
						 request.setAttribute("year"+j, year);
					 }
					 logger.info("============================"+request.getAttribute("year"+i));
				 }
				 for(int i=j+1; i<=5; i++){
					 year  = year + 1;
					 request.setAttribute("year"+i, year);
					 logger.info("============================"+request.getAttribute("year"+i));
				 }
			
			
			String checkDealExist = ConnectionDAO.singleReturn("select DEAL_ID from cr_financial_data_dtl");
			if(checkDealExist !=null && !checkDealExist.equalsIgnoreCase(""))
			{
				if(forwardSourceType.equalsIgnoreCase("B"))
				{
				vo.setSourceType("B");
				ArrayList<FinancialAnalysisVo> balanceSheetAllDetailsByDeal = dao.getdealAllParamDeatils(vo);
				
					if(balanceSheetAllDetailsByDeal!=null && balanceSheetAllDetailsByDeal.size()==0)
					{
						 ArrayList paramList =new ArrayList();
						 paramList = dao.getParamDetailDetails("B");
						 request.setAttribute("paramList", paramList);
						 logger.info("paramList size----------------->"+paramList.size());
					}
					else
						request.setAttribute("balanceSheetAllDetailsByDeal", balanceSheetAllDetailsByDeal);
				//ArrayList<FinancialAnalysisVo> balanceSheetAllMinusDetailsByDeal = dao.getdealAllMinusParamDeatils(vo);
				//session.setAttribute("balanceSheetAllMinusDetailsByDeal", balanceSheetAllMinusDetailsByDeal);
				}
				if(forwardSourceType.equalsIgnoreCase("P"))
				{
				vo.setSourceType("P");
				ArrayList<FinancialAnalysisVo> profitLossAllDetailsByDeal = dao.getdealAllParamDeatils(vo);
				if(profitLossAllDetailsByDeal!=null && profitLossAllDetailsByDeal.size()==0)
				{
					 ArrayList paramList =new ArrayList();
					 paramList = dao.getParamDetailDetails("P");
					 request.setAttribute("paramList", paramList);
					 logger.info("paramList size----------------->"+paramList.size());
				}
				else
					request.setAttribute("profitLossAllDetailsByDeal", profitLossAllDetailsByDeal);
				//ArrayList<FinancialAnalysisVo> profitLossAllMinusDetailsByDeal = dao.getdealAllMinusParamDeatils(vo);
				//session.setAttribute("profitLossAllMinusDetailsByDeal", profitLossAllMinusDetailsByDeal);
				}
				if(forwardSourceType.equalsIgnoreCase("O"))
				{
				vo.setSourceType("O");
				ArrayList<FinancialAnalysisVo> otherAllDetailsByDeal = dao.getdealAllParamDeatils(vo);
				if(otherAllDetailsByDeal!=null && otherAllDetailsByDeal.size()==0)
				{
					 ArrayList paramList =new ArrayList();
					 paramList = dao.getParamDetailDetails("O");
					 request.setAttribute("paramList", paramList);
					 logger.info("paramList size----------------->"+paramList.size());
				}
				else
					request.setAttribute("otherAllDetailsByDeal", otherAllDetailsByDeal);
				//ArrayList<FinancialAnalysisVo> otherAllMinusDetailsByDeal = dao.getdealAllMinusParamDeatils(vo);
				//session.setAttribute("otherAllMinusDetailsByDeal", otherAllMinusDetailsByDeal);
				}
			}	
			
			
				 ArrayList<CommonDealVo> financialDetails = dao.financialSearchGetDetail(vo);
				 session.setAttribute("financialDetails", financialDetails);
			
			
			/*logger.info("deal id................................ "+request.getParameter("dealId"));
			session.setAttribute("financialDealId", request.getParameter("dealId"));*/
		}
		/*else
		{
			session.removeAttribute("financialDealId");
		}*/
		/*String success = reloadFlag.equalsIgnoreCase("reload")?"success":"editFinancial";*/
		request.setAttribute("reloadFlag","Y");
		String success="";
		if(forwardSourceType.equalsIgnoreCase("P"))
			success="Profit";
		else if(forwardSourceType.equalsIgnoreCase("B"))
			success="Balance";
		else if(forwardSourceType.equalsIgnoreCase("O"))
		success="Other";
		else
			return mapping.findForward("editFinancial");
		
			
		return mapping.findForward(success);
	}
}