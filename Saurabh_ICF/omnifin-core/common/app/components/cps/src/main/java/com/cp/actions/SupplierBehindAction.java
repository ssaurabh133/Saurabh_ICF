/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/**
 * MyEclipse Struts Creation date: 04-07-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class SupplierBehindAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(SupplierBehindAction.class.getName());
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward supplierBehindDetail(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub

		logger.info("In SupplierBehindAction supplierBehindDetail ");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in supplierBehindDetail method of SupplierBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String dealId = "";
		CreditProcessingDAO detail=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+detail.getClass()); 	//changed by asesh
		//CreditProcessingDAO detail = new CreditProcessingDAOImpl();
		ArrayList<Object> detailcountryList1 = detail.getAddressList();
		session.setAttribute("detailcountryList1", detailcountryList1);

		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		logger.info("In SupplierBehindAction supplierBehindDetail dealid "
				+ dealId);
		if (dealId != null && !dealId.equalsIgnoreCase("")) {
			CreditProcessingDAO creditDAO=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	        logger.info("Implementation class: "+creditDAO.getClass()); 	//changed by asesh
			//CreditProcessingDAO creditDAO = new CreditProcessingDAOImpl();
			ArrayList<Object> showdetailSupplier = creditDAO
					.getSupplierDetailsAll("S", "S", dealId);
			session.setAttribute("showdetailSupplier", showdetailSupplier);

			return mapping.findForward("success");
		} else {
			request.setAttribute("back", "B");
			return mapping.findForward("backToFirst");
		}

	}

	public ActionForward modifySupplierDetails(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		logger.info("In SupplierBehindAction modifySupplierDetails");

		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in modifySupplierDetails method of SupplierBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String dealId = "";

		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		logger.info("In SupplierBehindAction modifySupplierDetails dealid "
				+ dealId);
		CreditProcessingDAO details=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+details.getClass()); 	//changed by asesh
		//CreditProcessingDAO details = new CreditProcessingDAOImpl();
		String addrId = request.getParameter("primaryId");
		logger
				.info("In SupplierBehindAction modifySupplierDetails addressid........ "
						+ addrId);
		ArrayList<Object> supplierList = details.modifySupplierDetailsAll("S",
				addrId);
		request.setAttribute("supplierList", supplierList);
		ArrayList<Object> showdetailSupplier = details.getSupplierDetailsAll(
				"S", "S", dealId);
		session.setAttribute("showdetailSupplier", showdetailSupplier);
		logger
				.info(" In SupplierBehindAction modifySupplierDetails list is in action is......................................... "
						+ supplierList);
		return mapping.findForward("success");
	}

	public ActionForward deleteSupplierDetails(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws IllegalAccessException,
			Exception {
		logger.info("In SupplierBehindAction deleteSupplierDetails");

		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in deleteSupplierDetails method of SupplierBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		String dealId = "";

		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		logger.info("In SupplierBehindAction deleteSupplierDetails dealid "
				+ dealId);
		
		boolean status = false;
		boolean status1 = false;
		boolean status2 = false;
		String bpType1 = "";
		CreditProcessingDAO detail=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+detail.getClass()); 	//changed by asesh
				
		if(request.getParameter("bpType1")!=null && !CommonFunction.checkNull(request.getParameter("bpType1")).equalsIgnoreCase(""))
		 {
			bpType1 = request.getParameter("bpType1"); 
			 session.setAttribute("bpType1", bpType1);
		 }
		 else
		 {
			 bpType1 = session.getAttribute("bpType1").toString(); 
			 session.removeAttribute("bpType1");
		 }
		
		 String id[] = null;
		 if(request.getParameterValues("chk")!=null && !CommonFunction.checkNull(request.getParameterValues("chk")).equalsIgnoreCase(""))
		 {
			 id = request.getParameterValues("chk"); 
			 session.setAttribute("id", id);
		 }
		 else
		 {
			 id = (String[]) session.getAttribute("id"); 
			 session.removeAttribute("id");
		 }
		 String supplierName="";
			String confirmStatus=request.getParameter("confirmStatus");
			logger.info("confirmStatus: "+confirmStatus);
			 if(CommonFunction.checkNull(confirmStatus).equalsIgnoreCase("N"))
			 {
				 supplierName= detail.checkSupplierVerifInit(id,dealId,bpType1); 
			 }
			 logger.info("supplierName: "+supplierName);
			 if(CommonFunction.checkNull(supplierName).equalsIgnoreCase(""))
			 {
				
				status1=detail.deleteVerificationInitSupplier(dealId,id,bpType1); 
				status=detail.deleteBuyerDetails(id, bpType1);
				status2=detail.deleteMarketVerif(dealId);
				
				
			 }
			 else
			 {
				 request.setAttribute("supplierName", supplierName);
			 }
		

		if (status) {
			session.removeAttribute("businessRelationship");
			session.removeAttribute("businessPartnerName");
			session.removeAttribute("averageMonthlySales_Purchase");
			session.removeAttribute("paymentTerms");
			session.removeAttribute("productType");
			session.removeAttribute("vintageOfRelationshipInMonths");
			session.removeAttribute("dist");
			session.removeAttribute("showdetailSupplier");
			request.setAttribute("msg", "S");
		}
		else
		{
			request.setAttribute("msg", "N");
		}
		CreditProcessingDAO creditDAO=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+creditDAO.getClass()); 	//changed by asesh
		//CreditProcessingDAO creditDAO = new CreditProcessingDAOImpl();
		ArrayList<Object> showdetailSupplier = creditDAO.getBuyerDetailsAll(
				"S", "S", dealId);
	
		session.setAttribute("showdetailSupplier", showdetailSupplier);
		return mapping.getInputForward();

	}

}