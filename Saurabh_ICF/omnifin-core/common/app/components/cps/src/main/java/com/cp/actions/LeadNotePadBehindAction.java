/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.business.CPClient.LeadProcessingRemote;
import com.connect.CommonFunction;
import com.connect.LookUpInstanceFactory;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/**
 * MyEclipse Struts Creation date: 04-14-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class LeadNotePadBehindAction extends Action {
	private static final Logger logger = Logger.getLogger(NotePadBehindAction.class.getName());
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub

		logger.info("In NotePadBehindAction(execute)");
		HttpSession session = request.getSession();
		UserObject userobj = (UserObject) session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in execute method of LeadNotePadBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		String sessionId = session.getAttribute("sessionID").toString();

		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String leadId = "";
		leadId = (String) session.getAttribute("leadTrackNote");
		logger.info("In LeadNotePadBehindAction(execute) leadTrackNote: " + leadId);
		String status = CommonFunction.checkNull(request.getParameter("status"));
		if (!status.equalsIgnoreCase("")) {
			request.setAttribute("status", status);
			if(status.equalsIgnoreCase("np"))
			{
				session.removeAttribute("viewDeal");
			}
		}
		if (session.getAttribute("leadId") != null) {

			leadId = session.getAttribute("leadId").toString();
		} else if (session.getAttribute("maxId") != null) {
			leadId = session.getAttribute("maxId").toString();
		}
		logger.info("In LeadNotePadBehindAction(execute) dealid: " + leadId);
		if ((leadId != null && !leadId.equalsIgnoreCase(""))) {


			 LeadProcessingRemote lp = (LeadProcessingRemote) LookUpInstanceFactory.getLookUpInstance(LeadProcessingRemote.REMOTE_IDENTITY, request);
	        
	        
			ArrayList leadDetails = lp.getLeadCapturingDetailsList(leadId);
			request.setAttribute("leadDetails", leadDetails);
			ArrayList noteCode = lp.getLeadNoteCode();
			request.setAttribute("noteCode", noteCode);
			ArrayList list = lp.getLeadNotepadData(leadId,"LT");
			request.setAttribute("list", list);
			return mapping.findForward("success");
		}

			else {
			request.setAttribute("back", "b");
			return mapping.findForward("backToFirst");
		}
	}
}