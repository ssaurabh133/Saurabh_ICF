/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.DealDisbursalVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 10-03-2012
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class DealDisbursalScheduleDispatchAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	private static final Logger logger = Logger.getLogger(DealDisbursalScheduleDispatchAction.class.getName());
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward openDisbursalSchedule(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		logger.info("In (openSpecialCondition)");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String userId="";
		String bDate="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
				
		}else{
			logger.info("here in openSpecialCondition method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String dealId = "";
		if(request.getParameter("dealId")!=null)
		{
			dealId=CommonFunction.checkNull(request.getParameter("dealId"));
		}
		else
		{
			dealId =  CommonFunction.checkNull(session.getAttribute("dealId"));
		}
		session.setAttribute("dealId", dealId);
		logger.info("deal id "+dealId);
		CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 			// changed by asesh
		//CreditProcessingDAO dao = new CreditProcessingDAOImpl();
		ArrayList disbList = dao.getDealDisbScheduleList(dealId);
		request.setAttribute("disbList", disbList);
		logger.info("disbList size: "+disbList.size());
		 String dealLoanAmountQuery="SELECT DEAL_SANCTION_AMOUNT  FROM cr_deal_loan_dtl where DEAL_ID='"+dealId+"'";
		 String dealLoanAmount=ConnectionDAO.singleReturn(dealLoanAmountQuery);
		 logger.info("DEAL_SANCTION_AMOUNTAmountQuery: "+dealLoanAmountQuery+" DEAL_SANCTION_AMOUNT: "+dealLoanAmount);
		request.setAttribute("dealLoanAmount", dealLoanAmount);
		return mapping.findForward("openDisbursalSchedule");
	}
	public ActionForward saveDisbursalSchedule(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		logger.info("In (saveDisbursalSchedule)");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String userId="";
		String bDate="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
				
		}else{
			logger.info("here in saveDisbursalSchedule method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String dealId = "";
		if(request.getParameter("dealId")!=null)
		{
			dealId=CommonFunction.checkNull(request.getParameter("dealId"));
		}
		else
		{
			dealId =  CommonFunction.checkNull(session.getAttribute("dealId"));
		}
		session.setAttribute("dealId", dealId);
		logger.info("deal id "+dealId);
		DealDisbursalVo nvo=new DealDisbursalVo();
		DynaValidatorForm DealDisbursalScheduleDynaValidatorForm = (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(nvo, DealDisbursalScheduleDynaValidatorForm);
		nvo.setDealId(dealId);
		nvo.setMakerId(userId);
		nvo.setMakerDate(bDate);
		CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 			// changed by asesh
		//CreditProcessingDAO dao = new CreditProcessingDAOImpl();
		 boolean status = dao.saveDealDisb(nvo);
		 if(status)
		 {
			 request.setAttribute("sms", "S");
		 }
		 else
		 {
			 request.setAttribute("sms", "E");
		 }
		return mapping.findForward("saveDisbursalSchedule");
	}
}