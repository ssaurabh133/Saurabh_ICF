/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.collateralVerification.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.connect.CommonFunction;
import com.cp.collateralVerification.dao.CollateralVerificationDAO;
import com.cp.collateralVerification.dao.CollateralVerificationDAOImpl;
import com.cp.collateralVerification.vo.CollateralCapturingVO;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 09-14-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class CollateralCapturingDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(CollateralCapturingDispatchAction.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward openCollateralPopup(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{
		logger.info("Inside openCollateralPopup Method........Dispatch Action");
		
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String retStr="";
		String collateralClass = CommonFunction.checkNull(request.getParameter("collClass"));
		String collateralId = CommonFunction.checkNull(request.getParameter("collId"));
		String dealId = CommonFunction.checkNull(request.getParameter("dealId"));
		String verificationId = CommonFunction.checkNull(request.getParameter("verificationId"));
		CollateralVerificationDAO service = new CollateralVerificationDAOImpl();
		
		if(collateralClass.equalsIgnoreCase("MACHINE"))
		{
			ArrayList<CollateralCapturingVO> fetchCollateralDetails = service.getCollateralCapturingMachineData(dealId,verificationId,collateralId,"P");
			request.setAttribute("fetchCollateralDetails", fetchCollateralDetails);
			retStr= "openMachine";
		}
		else if(collateralClass.equalsIgnoreCase("PROPERTY"))
		{
			ArrayList<CollateralCapturingVO> fetchCollateralDetails = service.getCollateralCapturingPropertyData(dealId,verificationId,collateralId,"P");
			request.setAttribute("fetchCollateralDetails", fetchCollateralDetails);
			retStr= "openProperty";
		}
		else if(collateralClass.equalsIgnoreCase("VEHICLE"))
		{
			ArrayList<CollateralCapturingVO> fetchCollateralDetails = service.getCollateralCapturingVehicleData(dealId,verificationId,collateralId,"P");
			request.setAttribute("fetchCollateralDetails", fetchCollateralDetails);
			retStr= "openVehicle";
		}
	   else if(collateralClass.equalsIgnoreCase("STOCK"))
	   {
		   ArrayList<CollateralCapturingVO> fetchCollateralDetails = service.getCollateralCapturingStockData(dealId,verificationId,collateralId,"P");
		   request.setAttribute("fetchCollateralDetails", fetchCollateralDetails);
		   retStr= "openStock";
	   }
	   else if(collateralClass.equalsIgnoreCase("OTHERS") || collateralClass.equalsIgnoreCase("BG")
			   || collateralClass.equalsIgnoreCase("DEBTOR") || collateralClass.equalsIgnoreCase("FD")
			   || collateralClass.equalsIgnoreCase("SBLC") || collateralClass.equalsIgnoreCase("SECURITIES"))
	   {
		   ArrayList<CollateralCapturingVO> fetchCollateralDetails = service.getCollateralCapturingOtherData(dealId,verificationId,collateralId,"P");
		   request.setAttribute("fetchCollateralDetails", fetchCollateralDetails);
		   retStr= "openOthers";
	   }
		request.setAttribute("collateralClass",collateralClass);
		request.setAttribute("collateralId",collateralId);
		request.setAttribute("dealId",dealId);
		request.setAttribute("verificationId",verificationId);
		return mapping.findForward(retStr);
	}
	
	public ActionForward forwardCollateralCapturingData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{
		logger.info("Inside forwardCollateralCapturingData........Dispatch Action");
		
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		String userId=userobj.getUserId();
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String retStr = "";
		boolean status=false;
		String dealId = CommonFunction.checkNull(request.getParameter("dealId"));
		String verificationId = CommonFunction.checkNull(request.getParameter("verificationId"));
		CollateralVerificationDAO service = new CollateralVerificationDAOImpl();
		ArrayList<CollateralCapturingVO> collateralDetails = service.getCollateralCapturingData(dealId,"F",userId);
		
		ArrayList<CollateralCapturingVO> collateralsCaptured = service.getCollateralsCapturedData(dealId,userId);

		logger.info("collateralDetails Size: "+collateralDetails.size());
		logger.info("collateralsCaptured Size: "+collateralsCaptured.size());
		
		if(collateralDetails.size() != collateralsCaptured.size())
		{
			request.setAttribute("sms","Not Equal");
			request.setAttribute("collateralDetails",collateralDetails);
			retStr="forwardCollateralCapturingDataFailed";
		}
		else
		{
			status = service.forwardCollateralCapturingData(dealId,verificationId);
			if(status)
			{
				request.setAttribute("sms","Fwd");
				retStr="forwardCollateralCapturingData";
			}
			else
			{
				request.setAttribute("sms","FwdFailed");
				request.setAttribute("collateralDetails",collateralDetails);
				retStr="forwardCollateralCapturingDataFailed";
			}
			
		}
		return mapping.findForward(retStr);
	}
}