/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;
import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.dao.FieldVerificationDAO;
import com.cp.dao.IndividualFinancialAnalysisDAO;
import com.cp.fundFlowDao.FundFlowAnalysisDAO;
import com.cp.vo.SalesAnalysisVo;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 09-12-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class FundFlowAnalysisBehindAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(FundFlowAnalysisBehindAction.class.getName());
	/* 
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward bankAccountAnalysisBehindDetail(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		
		logger.info("in bankAccountAnalysisBehindDetail................ ");
	
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String bDate="";
		if(userobj!=null)
		{
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in bankAccountAnalysisBehindDetail method of FundFlowAnalysisBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		FundFlowAnalysisDAO fundFlowAnalysisDAO=(FundFlowAnalysisDAO)DaoImplInstanceFactory.getDaoImplInstance(FundFlowAnalysisDAO.IDENTITY);
		logger.info("Implementation class: "+fundFlowAnalysisDAO.getClass());
		String recStatus="";
		 String dealId="";
		    if(session.getAttribute("fundFlowDealId")!=null)
			 {
				 dealId = session.getAttribute("fundFlowDealId").toString();
			 }
		    
		    String status = CommonFunction.checkNull(request.getParameter("status"));
		    CreditProcessingDAO creditProcessing=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	        logger.info("Implementation class: "+creditProcessing.getClass()); 			// changed by asesh
		    //CreditProcessingDAO creditProcessing = new CreditProcessingDAOImpl();
		    if ((dealId != null && !dealId.equals(""))
					&& (status == null || status.equals(""))) {

				ArrayList<Object> leadInfo = creditProcessing
						.getLeadEntryList(dealId);

				ArrayList dealHeader = creditProcessing.getDealHeader(dealId);
				session.setAttribute("dealHeader", dealHeader);

				session.setAttribute("dealId", dealId);
				logger.info("Size of header: " + dealHeader.size());
				logger.info("Size of leadInfo: " + leadInfo.size());
				session.setAttribute("leadInfo", leadInfo);
				session.removeAttribute("viewDeal");
			}

			else if ((dealId != null && !dealId.equals(""))
					&& (status != null && status.equals("UWA"))) {
				logger
						.info(" CreditProcessiongLeadEntryAction in leadEntryCapturing For view and set viewDeal in session");
				ArrayList<Object> leadInfo = creditProcessing
						.getLeadEntryList(dealId);
				session.setAttribute("dealId", dealId);
				session.setAttribute("leadInfo", leadInfo);
				session.setAttribute("viewDeal", "UWA");

			} else {
				session.removeAttribute("viewDeal");
				session.removeAttribute("leadInfo");
				session.removeAttribute("dealId");
				session.removeAttribute("dealHeader");
				session.removeAttribute("subIndustryList");
				session.removeAttribute("relationalManagerList");
			}
		// alok change start
		    int functionId=0;
			if(session.getAttribute("functionId")!=null)
			{
				functionId= Integer.parseInt(session.getAttribute("functionId").toString());
			}
				session.removeAttribute("viewDeal");
			if (functionId==3000951 || functionId==4001231){
				session.setAttribute("viewDeal", "UWA");	
			}
		//alok change end
		    
		    
		    if(session.getAttribute("fundFlowAuthor")!=null && session.getAttribute("fundFlowAuthor").toString().equalsIgnoreCase("A"))
			{
		    	recStatus="F";
				
			}
			else
			{
				recStatus="P";
				
			}  
		   if(session.getAttribute("underWriterViewData")!=null)
		    {
		    	recStatus="A";
		    } 
		 ArrayList bankAcAnalysisList = fundFlowAnalysisDAO.getBankAccountAnalysisDetails("",dealId,recStatus);
	
			//UserObject userobj=(UserObject)session.getAttribute("userobject");
		 if(bankAcAnalysisList.size()>0)
		 {
		    request.setAttribute("bankAcAnalysisList", bankAcAnalysisList);
		 }
		 ArrayList yearList = new ArrayList();
		 
		
		 yearList = fundFlowAnalysisDAO.getYears(bDate);
		 request.setAttribute("yearList", yearList);
		 /*Code added by Arun*/

		 FieldVerificationDAO fieldVerificationdao=(FieldVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(FieldVerificationDAO.IDENTITY);
	     logger.info("Implementation class: "+fieldVerificationdao.getClass()); 	// changed by asesh	
		 ArrayList verifMethodList = fieldVerificationdao.getVerifMethodListList();
		 request.setAttribute("verifMethodList", verifMethodList);
		 session.setAttribute("dealIdForFFAAndFA", dealId);
			 /*Code added by Arun*/
			return mapping.findForward("bankAccuont");
	}
	
	public ActionForward salesAnalysisBehindDetail(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		logger.info("in salesAnalysisBehindDetail .....................");
		
			HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
		    String bDate="";
			if(userobj!=null)
			{
					bDate=userobj.getBusinessdate();
			}else{
				logger.info("here in salesAnalysisBehindDetail method of FundFlowAnalysisBehindAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			DynaValidatorForm salesAnalysisDynaValidatorForm = (DynaValidatorForm) form;
			SalesAnalysisVo vo=new SalesAnalysisVo();
		    org.apache.commons.beanutils.BeanUtils.copyProperties(vo, salesAnalysisDynaValidatorForm);
			FundFlowAnalysisDAO fundFlowAnalysisDAO=(FundFlowAnalysisDAO)DaoImplInstanceFactory.getDaoImplInstance(FundFlowAnalysisDAO.IDENTITY);
			logger.info("Implementation class: "+fundFlowAnalysisDAO.getClass());
			String dealId="";
			String recStatus="";
			  if(session.getAttribute("fundFlowDealId")!=null)
				 {
					 dealId = session.getAttribute("fundFlowDealId").toString();
				 }
			  if(session.getAttribute("fundFlowAuthor")!=null && session.getAttribute("fundFlowAuthor").toString().equalsIgnoreCase("A"))
				{
			    	recStatus="F";
					
				}
			  else if(session.getAttribute("underWriterViewData")!=null)
			    {
			    	recStatus="A";
			    }
				else
				{
					recStatus="P";
					
				}
			  ArrayList yearList = fundFlowAnalysisDAO.getYears(bDate);
				 request.setAttribute("yearList", yearList);
				String yearVal="";
				yearVal=CommonFunction.checkNull(request.getParameter("year"));
				request.setAttribute("yearVal", yearVal);
		if(!yearVal.equalsIgnoreCase("")){
		
			ArrayList salesAnalysisList = fundFlowAnalysisDAO.getSalesAnalysisDetails("",dealId,recStatus,yearVal);
			if(salesAnalysisList.size()>0)
			{
				request.setAttribute("salesAnalysisList", salesAnalysisList);
			}
		}
		
		 
		session.setAttribute("dealIdForFFAAndFA", dealId);
		
		if(session.getAttribute("fundFlowDealId")!=null)
		{
			return mapping.findForward("salesAnalysis");
		 }
		 request.setAttribute("back", "back");
		 return mapping.findForward("newFundFlow");
		
	}
	
	public ActionForward obligationBehindDetail(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		HttpSession session =  request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in obligationBehindDetail method of FundFlowAnalysisBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		String dealId="";
	    if(session.getAttribute("fundFlowDealId")!=null)
		 {
			 dealId = session.getAttribute("fundFlowDealId").toString();
		 }
		FundFlowAnalysisDAO fundFlowAnalysisDAO=(FundFlowAnalysisDAO)DaoImplInstanceFactory.getDaoImplInstance(FundFlowAnalysisDAO.IDENTITY);
		logger.info("Implementation class: "+fundFlowAnalysisDAO.getClass());
		 String recStatus="";
			if(session.getAttribute("fundFlowAuthor")!=null && session.getAttribute("fundFlowAuthor").toString().equalsIgnoreCase("A"))
			{
		    	recStatus="F";
				
			}
			else if(session.getAttribute("underWriterViewData")!=null)
		    {
		    	recStatus="A";
		    }
			else
			{
				recStatus="P";
				
			}   
		ArrayList obligationList = fundFlowAnalysisDAO.getObligationDetails("",dealId,recStatus);
		 if(obligationList.size()>0)
		 {
			 request.setAttribute("obligationList", obligationList);
		 }
		 logger.info("In obligationList size................ "+obligationList.size());
		 /*Code by arun For addition of field in obligation*/

		 IndividualFinancialAnalysisDAO dao=(IndividualFinancialAnalysisDAO)DaoImplInstanceFactory.getDaoImplInstance(IndividualFinancialAnalysisDAO.IDENTITY);
	    logger.info("Implementation class: "+dao.getClass()); 	// changed by asesh
		//IndividualFinancialAnalysisDAO dao = new IndividualFinancialAnalysisDAOImpl();
		ArrayList customerTypeList = dao.getCustomerTypeList(dealId);
		ArrayList obligationTypeList = dao.getObligationTypeList();
		ArrayList customerNameList = dao.getCustomerName(dealId, "PRAPPL");
		ArrayList typeOfLoanList = dao.getTypeOfLoan();
		ArrayList statusList = dao.getGenericMasterInfoList("STATUS");
		ArrayList mobList = dao.getGenericMasterInfoList("MOB");
		request.setAttribute("customerNameList", customerNameList);
		request.setAttribute("customerTypeList", customerTypeList);
		request.setAttribute("obligationTypeList", obligationTypeList);
		request.setAttribute("typeOfLoanList", typeOfLoanList);
		request.setAttribute("mobList", mobList);
		request.setAttribute("statusList", statusList);
		request.setAttribute("vanillaProgramStatusList", statusList);
		FieldVerificationDAO fieldVerificationdao=(FieldVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(FieldVerificationDAO.IDENTITY);
        logger.info("Implementation class: "+fieldVerificationdao.getClass()); 	
		//FieldVerificationDAO fieldVerificationdao=new FieldVerificationDAOImpl();	
		ArrayList verifMethodList = fieldVerificationdao.getVerifMethodListList();
		request.setAttribute("verifMethodList", verifMethodList);
		 /*Code by arun For addition of field in obligation End here*/
		session.setAttribute("dealIdForFFAAndFA", dealId);
		if(session.getAttribute("fundFlowDealId")!=null)
		{
			return mapping.findForward("obligation");
		}
			 request.setAttribute("back", "back");
			 return mapping.findForward("newFundFlow");
	}
}