/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.math.BigDecimal;
import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.CommonPageVo;
import com.lockRecord.action.LockRecordCheck;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/**
 * MyEclipse Struts Creation date: 04-27-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class CommonPageBehindAction extends Action {
	private static final Logger logger = Logger.getLogger(CommonPageBehindAction.class.getName());
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		logger.info("In CommonPageBehindAction(execute)");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String userId=null;
		
		if(userobj!=null)
		{
			userId=userobj.getUserId();				
		}else{
			logger.info("here in execute method of CommonPageBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		session.removeAttribute("leadNo");
		//String dealId = request.getParameter("dealId");
		String dealId = "";
		if (!CommonFunction.checkNull(session.getAttribute("dealId")).equalsIgnoreCase("")) {

			dealId = session.getAttribute("dealId").toString();
	
		} else if (!CommonFunction.checkNull(request.getParameter("dealId")).equalsIgnoreCase("")) {
			dealId = request.getParameter("dealId");
			
		}
		//logger.info("In CommonPageBehindAction(execute).dealId. " + dealId);
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 			// changed by asesh
		//CreditProcessingDAO service = new CreditProcessingDAOImpl();
		
		//logger.info("function id is ........................................"+session.getAttribute("functionId").toString());
		String functionId="";
		int funId = 0;
		
		
		if(session.getAttribute("functionId")!=null)
		{
			functionId=session.getAttribute("functionId").toString();
			funId = Integer.parseInt(functionId);
		}
		
		
		//ServletContext context=getServlet().getServletContext();
		if(context!=null)
		{
			if(funId == 3000951 || funId == 4001231)
			{
				flag =true;
			}
			else
			{
				flag = LockRecordCheck.lockCheck(userId,functionId,dealId,context);
			}
		//flag = LockRecordCheck.lockCheck(userId,functionId,dealId,context);
		logger.info("Flag ........................................ "+flag);
		if(!flag)
		{
			logger.info("Record is Locked");			
			request.setAttribute("sms", "Locked");
			request.setAttribute("recordId", dealId);
			//request.setAttribute("userId", userId);
			return mapping.getInputForward();
		}
		}
	
		ArrayList underWriterList = service.getUnderWriterData(dealId);
		ArrayList creditDecision = service.getCreditDecisionData(dealId);
		String approvalLevel=service.checkApprovalLevel(userId);
	
		session.setAttribute("underWriterList", underWriterList);
		session.setAttribute("creditDecision", creditDecision);
		if(approvalLevel.equalsIgnoreCase("0"))
			session.setAttribute("approvalLevel", "approvalLevel");
		else{
			session.removeAttribute("approvalLevel");
		}
		logger.info("underWriterList.size() --------->>> "+underWriterList.size());
		if(underWriterList.size()>0)
		{
			CommonPageVo commonPageVo =(CommonPageVo)underWriterList.get(0);
			String allWaived=commonPageVo.getAllWaived();
			String fieldResults=commonPageVo.getFieldResults();
			if(CommonFunction.checkNull(allWaived).trim().equalsIgnoreCase("N"))
				session.setAttribute("Positive", fieldResults);
			else
				session.removeAttribute("Positive");
			String devResult=commonPageVo.getDevResults();
			if(CommonFunction.checkNull(devResult).trim().equalsIgnoreCase("Y"))
				session.setAttribute("DevPositive", devResult);
			else
				session.removeAttribute("DevPositive");
			String verificationStatus=commonPageVo.getVerificationStatus();
			if(!CommonFunction.checkNull(verificationStatus).trim().equalsIgnoreCase("0"))
				session.setAttribute("fviStatus", "NI");
			else if(CommonFunction.checkNull(commonPageVo.getAllWaived()).trim().equalsIgnoreCase("Y")&& !CommonFunction.checkNull(commonPageVo.getVerification()).trim().equalsIgnoreCase("0"))
				session.setAttribute("fviStatus", "W");
			else
				session.removeAttribute("fviStatus");			
			
		}
		
		/*Iterator<Object> it = underWriterList.iterator();
		int i=0;
		while(i<underWriterList.size()-1)
		{
			list1.add((CommonPageVo) it.next());
			i++;
		}

		if(it.hasNext())
		{
			CommonPageVo  tb1 = (CommonPageVo) it.next();
			logger.info("............ "+tb1.getFieldResults());
			
			if(tb1.getFieldResults().equalsIgnoreCase("P") || tb1.getFieldResults().equalsIgnoreCase("N")){
				session.setAttribute("Positive", "Positive");
			}else {
				session.removeAttribute("Positive");
			}
			
			if(tb1.getDevResults().equalsIgnoreCase("A")){
				session.setAttribute("DevPositive", "DevPositive");
			}else {
				session.removeAttribute("DevPositive");
			}
		}*/
		String countFundFlowQuery ="select count(1) from cr_bank_analysis_dtl b where b.REC_STATUS='A' and b.DEAL_ID='"+dealId+"'";
		logger.info("countFundFlowQuery: "+countFundFlowQuery);
		String countFundFlow = ConnectionDAO.singleReturn(countFundFlowQuery);
		countFundFlowQuery=null;
		if(CommonFunction.checkNull(countFundFlow).equalsIgnoreCase("0"))
		{
			session.removeAttribute("countFundFlow");
		}
		else
		{
			session.setAttribute("countFundFlow", countFundFlow);
		}
		
		
		String countFinancialAnalysisQuery ="select count(1) from cr_financial_data_dtl b where b.REC_STATUS='A' and b.DEAL_ID='"+dealId+"'";
		logger.info("countFinancialAnalysisQuery: "+countFinancialAnalysisQuery);
		String countFinancialAnalysis = ConnectionDAO.singleReturn(countFinancialAnalysisQuery);
		countFinancialAnalysisQuery=null;
		if(CommonFunction.checkNull(countFinancialAnalysis).equalsIgnoreCase("0"))
		{
			session.removeAttribute("countFinancialAnalysis");
		}
		else
		{
			session.setAttribute("countFinancialAnalysis", countFinancialAnalysis);
		}
		
		String countRepayTypeQuery ="select count(1) from cr_deal_loan_dtl b where b.DEAL_REPAYMENT_TYPE='I' and b.DEAL_ID='"+dealId+"'";
		logger.info("countRepayTypeQuery: "+countRepayTypeQuery);
		String countRepayType = ConnectionDAO.singleReturn(countRepayTypeQuery);
		countRepayTypeQuery=null;
		if(CommonFunction.checkNull(countRepayType).equalsIgnoreCase("0"))
		{
			session.removeAttribute("countRepayType");
		}
		else
		{
			session.setAttribute("countRepayType", countRepayType);
		}
		
		ArrayList dealHeader = service.getDealHeader(dealId);
		session.setAttribute("dealHeader", dealHeader);
		
		session.setAttribute("dealId", dealId);
		functionId=null;
		service=null;
		String customerGroupType="N";
		String customerType="I";
		String groupDesc="";
		String custQry=" select CUSTOMER_GROUP_TYPE,CUSTOMER_TYPE,customer_group_desc "+
					" from cr_deal_dtl a "+
					" join cr_deal_customer_m b on(a.deal_customer_id=b.customer_id) where deal_id='"+CommonFunction.checkNull(dealId).trim()+"' ";
	    logger.info("Customer Type Query is    :  "+custQry);
		ArrayList custList = ConnectionDAO.sqlSelect(custQry);
		for(int i=0;i<custList.size();i++)
		{
			ArrayList data1=(ArrayList)custList.get(i);
			customerGroupType=CommonFunction.checkNull(data1.get(0)).trim();
			customerType=CommonFunction.checkNull(data1.get(1)).trim();
			groupDesc=CommonFunction.checkNull(data1.get(2)).trim();
			session.setAttribute("UWcustomerGroupType", customerGroupType);
			session.setAttribute("UWcustomerType", customerType);
			session.setAttribute("groupNameText", groupDesc);
		}
		
		String exQry=" select LOAN_BALANCE_PRINCIPAL,LOAN_OVERDUE_PRINCIPAL,SD_ADVICE_AMOUNT,DEAL_SD_CHARGES,EXPOSURE_AMOUNT,TERM_LOAN_AMOUNT,INCLUDE_EXPOSURE,EXPOSURE_WITH_SD " +
	    " from UNDER_WRITER_SEARCH_TEMP_DATA where deal_id='"+CommonFunction.checkNull(dealId).trim()+"' AND USER_ID='"+CommonFunction.checkNull(userId).trim()+"'";
	    logger.info("Exposure Query is    :  "+exQry);
		ArrayList getGroupExposureDataDetail = ConnectionDAO.sqlSelect(exQry);
		logger.info("getGroupExposureDataDetail.size()---->>>"+getGroupExposureDataDetail.size());
		for(int i=0;i<getGroupExposureDataDetail.size();i++)
		{
			logger.info("in for loop of getGroupExposureDataDetail ---->>> ");
			ArrayList data=(ArrayList)getGroupExposureDataDetail.get(i);
			String balPrincipal=CommonFunction.checkNull(data.get(0)).trim();
			logger.info("balPrincipal--->>>"+balPrincipal);
			if(CommonFunction.checkNull(balPrincipal).trim().equalsIgnoreCase(""))
				balPrincipal="0.00";
			logger.info("balPrincipal11--->>>"+balPrincipal);
			String overDuePrincipal=CommonFunction.checkNull(data.get(1)).trim();
			logger.info("overDuePrincipal--->>>"+overDuePrincipal);
			if(CommonFunction.checkNull(overDuePrincipal).trim().equalsIgnoreCase(""))
				overDuePrincipal="0.00";
			logger.info("overDuePrincipal111--->>>"+overDuePrincipal);
			String sdAdviceAmt=CommonFunction.checkNull(data.get(2)).trim();
			logger.info("sdAdviceAmt--->>>"+sdAdviceAmt);
			if(CommonFunction.checkNull(sdAdviceAmt).trim().equalsIgnoreCase(""))
				sdAdviceAmt="0.00";
			logger.info("sdAdviceAmt111------->>>"+sdAdviceAmt);
			String dealSDCharge=CommonFunction.checkNull(data.get(3)).trim();
			logger.info("dealSDCharge------->>>"+dealSDCharge);
			if(CommonFunction.checkNull(dealSDCharge).trim().equalsIgnoreCase(""))
				dealSDCharge="0.00";
			logger.info("dealSDCharge1111------->>>"+dealSDCharge);
			String loanAmt=CommonFunction.checkNull(data.get(5)).trim();
			logger.info("loanAmt------->>>"+loanAmt);
			if(CommonFunction.checkNull(loanAmt).trim().equalsIgnoreCase("")){
				loanAmt="0.00";	
			}
			logger.info("loanAmt111111------->>>"+loanAmt);
			BigDecimal balancePrincipalAmt = new BigDecimal("0.00");
			BigDecimal overDuePrincipalAmt = new BigDecimal("0.00");
			BigDecimal sdAdviceAmount = new BigDecimal("0.00");
			BigDecimal dealSDChargeAmt = new BigDecimal("0.00");
			BigDecimal loanAmount = new BigDecimal("0.00");
			BigDecimal eposureAmount = new BigDecimal("0.00");
			
			balancePrincipalAmt = new BigDecimal(balPrincipal.toString());
			logger.info("balancePrincipalAmt=============> "+balancePrincipalAmt);
			overDuePrincipalAmt = new BigDecimal(overDuePrincipal.toString());
			logger.info("overDuePrincipalAmt=============> "+overDuePrincipalAmt);
			sdAdviceAmount = new BigDecimal(sdAdviceAmt.toString());
			logger.info("sdAdviceAmount=============> "+sdAdviceAmount);
			dealSDChargeAmt = new BigDecimal(dealSDCharge.toString());
			logger.info("dealSDChargeAmt=============> "+dealSDChargeAmt);
			loanAmount = new BigDecimal(loanAmt.toString());
			logger.info("loanAmount=============> "+loanAmount);
			eposureAmount=loanAmount;		
			logger.info("eposureAmount----------------->>>"+eposureAmount);
			// Exposure Logic start
			String IncludeExposure=CommonFunction.checkNull(data.get(6)).trim();
			logger.info("IncludeExposure----------------->>>"+IncludeExposure);
			String exposureWithSD=CommonFunction.checkNull(data.get(7)).trim();
			logger.info("exposureWithSD----------------->>>"+exposureWithSD);
			if(CommonFunction.checkNull(customerType).trim().equalsIgnoreCase("I"))
			{
				balancePrincipalAmt = new BigDecimal("0.00");
				overDuePrincipalAmt = new BigDecimal("0.00");
				sdAdviceAmount = new BigDecimal("0.00");
			}
			logger.info("customerType----------------->>>"+customerType);
			if(CommonFunction.checkNull(IncludeExposure).trim().equalsIgnoreCase("Y"))
			{
				if(CommonFunction.checkNull(exposureWithSD).trim().equalsIgnoreCase("Y"))
				{
					eposureAmount=balancePrincipalAmt.add(overDuePrincipalAmt).subtract(sdAdviceAmount).subtract(dealSDChargeAmt).add(loanAmount);
				}
				else
				{
					eposureAmount=balancePrincipalAmt.add(loanAmount);
				}
			}
			
			session.setAttribute("dealExposureAmount", eposureAmount);
			session.setAttribute("dealExLoanAmount", loanAmount);
			
			String limitQry=" select CUSTOMER_GROUP_EXPOSURE_LIMIT from cr_deal_dtl a join cr_deal_customer_m b on(a.deal_customer_id=b.customer_id) where deal_id='"+CommonFunction.checkNull(dealId).trim()+"' ";
		    logger.info("Exposure Limit Query is    :  "+limitQry);
		    String exposureLimit=ConnectionDAO.singleReturn(limitQry);
		    exposureLimit=CommonFunction.checkNull(exposureLimit).trim();
		    logger.info("exposureLimit is  -------------->>>>>  :  "+exposureLimit);
		    if(CommonFunction.checkNull(exposureLimit).trim().equalsIgnoreCase(""))
		    	exposureLimit="0.00";
		    session.setAttribute("exposureLimit", exposureLimit);
			  ///		Himanshu Verma		Changes started for Facility Details Enhancement
				String dealloanId = "0";
				String dealQuery = "select MIN(DEAL_LOAN_ID) from cr_deal_loan_dtl where DEAL_ID = "+ dealId;
				logger.info("In Deal Loan Query: " + dealQuery);
				dealloanId = ConnectionDAO.singleReturn(dealQuery);
				logger.info("In dealloanId:  "+ dealloanId);
				String isFacilityDetailRequired = "N";
				String facilityDetailQry=" SELECT IF ((SELECT IFNULL(PARAMETER_VALUE,'N') FROM PARAMETER_MST WHERE PARAMETER_KEY = 'FACILITY_DETAIL_FUNCTIONALITY') = 'Y' ";
				facilityDetailQry = facilityDetailQry + "AND ONE_DEAL_ONE_LOAN='N', 'S', 'E') RESULT ";
				facilityDetailQry = facilityDetailQry + "FROM CR_DEAL_LOAN_DTL A ";
				facilityDetailQry = facilityDetailQry + "JOIN CR_PRODUCT_M B ON A.DEAL_PRODUCT = B.PRODUCT_ID ";
				facilityDetailQry = facilityDetailQry + "WHERE DEAL_ID = '"+CommonFunction.checkNull(dealId).trim()+"' AND DEAL_LOAN_ID = '"+CommonFunction.checkNull(dealloanId).trim()+"' ";
			    logger.info("Facility Detail Query is :  "+facilityDetailQry);
			    isFacilityDetailRequired=ConnectionDAO.singleReturn(facilityDetailQry);
			    if ("S".equalsIgnoreCase(isFacilityDetailRequired))
			    	session.setAttribute("isFacilityDetailRequired", isFacilityDetailRequired);
			    else 
			    	//session.removeAttribute("isFacilityDetailRequired"); ankita
			    	session.setAttribute("isFacilityDetailRequired", isFacilityDetailRequired);
				////		Himanshu Verma		Changes ended for Facility Details Enhancement
				
		}	
		return mapping.findForward("success");
	}
}