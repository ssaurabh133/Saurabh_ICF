/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.text.DecimalFormat;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.CreditProcessingCustomerEntryVo;
import com.logger.LoggerMsg;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 09-16-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class UpdateGuaranteeAmount extends DispatchAction {

	DecimalFormat myFormatter = new DecimalFormat("###,###.####");
	private static final Logger logger = Logger.getLogger(UpdateGuaranteeAmount.class.getName());
	public ActionForward guaranteeAmountBehindAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception
	{
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		if(userobj==null)
		{
			logger.info("in  guaranteeAmountBehindAction method of  UpdateGuaranteeAmount action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		if(request.getParameter("hideId")!=null)
		{
			request.setAttribute("id", request.getParameter("hideId"));
		}
		if(request.getParameter("amount")!=null)
		{			
	    		Number reconNum=myFormatter.parse(request.getParameter("amount"));
	    		request.setAttribute("amount", myFormatter.format(reconNum) );
		}
		
		  return mapping.findForward("success");
		}
		
public ActionForward saveBankAccountAnalysisDetails(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)	
	
	throws Exception{
		HttpSession session =  request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in saveBankAccountAnalysisDetails method of UpdateGuaranteeAmount action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		DynaValidatorForm guaranteeAmountDynaValidatorForm = (DynaValidatorForm) form;
		CreditProcessingCustomerEntryVo vo=new CreditProcessingCustomerEntryVo();
		if(request.getParameter("id")!=null)
		{
			vo.setId(request.getParameter("id"));
		}
	    org.apache.commons.beanutils.BeanUtils.copyProperties(vo, guaranteeAmountDynaValidatorForm);
	    CreditProcessingDAO creditProcessingDAO=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+creditProcessingDAO.getClass()); 	//changed by asesh
	    //CreditProcessingDAO creditProcessingDAO = new CreditProcessingDAOImpl();
	    flag=creditProcessingDAO.saveGuaranteeAmount(vo);
	    LoggerMsg.info("flag :: "+flag);
		if(flag)
		{
			request.setAttribute("msg", "S");
		}
		else
		{
			request.setAttribute("msg", "E");
		}
		return mapping.findForward("success");
	}


public ActionForward guaranteeAmountOpenCM(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)throws Exception
{
	HttpSession session = request.getSession();
	boolean flag=false;
	UserObject userobj=(UserObject)session.getAttribute("userobject");
	
	if(userobj==null)
	{
		logger.info("in  guaranteeAmountOpenCM method of  UpdateGuaranteeAmount action the session is out----------------");
		return mapping.findForward("sessionOut");
	}
	if(request.getParameter("hideId")!=null)
	{
		request.setAttribute("id", request.getParameter("hideId"));
	}
	if(request.getParameter("amount")!=null)
	{			
    		Number reconNum=myFormatter.parse(request.getParameter("amount"));
    		request.setAttribute("amount", myFormatter.format(reconNum) );
	}
	
	  return mapping.findForward("openCMSuccess");
	}

public ActionForward saveGuaranteeAmountAtCM(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)	
	
	throws Exception{
		HttpSession session =  request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in saveGuaranteeAmountAtCM method of UpdateGuaranteeAmount action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		DynaValidatorForm guaranteeAmountDynaValidatorForm = (DynaValidatorForm) form;
		CreditProcessingCustomerEntryVo vo=new CreditProcessingCustomerEntryVo();
		if(request.getParameter("id")!=null)
		{
			vo.setId(request.getParameter("id"));
		}
	    org.apache.commons.beanutils.BeanUtils.copyProperties(vo, guaranteeAmountDynaValidatorForm);
	    
	    CreditProcessingDAO creditProcessingDAO=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+creditProcessingDAO.getClass()); 	//changed by asesh
	    //CreditProcessingDAO creditProcessingDAO = new CreditProcessingDAOImpl();
	    flag=creditProcessingDAO.saveGuaranteeAmountAtCM(vo,source);
	    LoggerMsg.info("flag :: "+flag);
		if(flag)
		{
			request.setAttribute("msg", "S");
		}
		else
		{
			request.setAttribute("msg", "E");
		}
		return mapping.findForward("saveAmountAtCM");
	}

}