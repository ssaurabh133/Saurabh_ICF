/*package com.cp.daoImplMSSQL;

import java.io.File;
import java.math.BigDecimal;
import java.rmi.RemoteException;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
//import java.util.Map;
import java.util.ResourceBundle;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringEscapeUtils;
import org.apache.log4j.Logger;

import com.VO.CustomerSaveVo;
import com.cm.vo.DisbursalSearchVO;
import com.cm.vo.InstallmentPlanForCMVO;
import com.cm.vo.LoanDetailForCMVO;
import com.cm.vo.NoOfDisbursalVo;
import com.cm.vo.SecurityDepositVO;
import com.cm.vo.TenureAmountVo;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.PrepStmtObject;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.ApplicantTypeVO;
import com.cp.vo.BuyerSupplierOtherVo;
import com.cp.vo.BuyerVo;
import com.cp.vo.ChargeVo;
import com.cp.vo.CodeDescVo;
import com.cp.vo.CollateralVo;
import com.cp.vo.CommonDealVo;
import com.cp.vo.CommonPageSecVo;
import com.cp.vo.CommonPageVo;
import com.cp.vo.ConsumerVo;
import com.cp.vo.CpInsuranceVo;
import com.cp.vo.CreditProcessingCustomerEntryVo;
import com.cp.vo.CreditProcessingLeadEntryVo;
import com.cp.vo.CreditProcessingNotepadVo;
import com.cp.vo.DealDisbursalVo;
import com.cp.vo.DealMovementVo;
import com.cp.vo.DocumentsVo;
import com.cp.vo.ExistingAssetVo;
import com.cp.vo.FacilityDetailsVo;
import com.cp.vo.FieldVerificationVo;
import com.cp.vo.FleetDetailsVo;
import com.cp.vo.HeaderInfoVo;
import com.cp.vo.LeadCaptureVo;
import com.cp.vo.LeaddetailDealVo;
import com.cp.vo.LinkCustomerVo;
import com.cp.vo.LoanDetailVo;
import com.cp.vo.LoanedProductVo;
import com.cp.vo.OtherChargesPlanVo;
import com.cp.vo.QueryProcessingVo;
import com.cp.vo.RelationalManagerVo;
import com.cp.vo.RepayScheduleVo;
import com.cp.vo.ReprocessingDealVo;
import com.cp.vo.SchemeVo;
import com.cp.vo.ScoringVO;
import com.cp.vo.SpecialConditionVo;
import com.cp.vo.TermSheetVo;
import com.cp.vo.UnderwriterApprovalVo;
import com.cp.vo.UnderwritingDocUploadVo;
import com.cp.vo.Viability;
import com.logger.LoggerMsg;
import com.masters.vo.GcdGroupMasterVo;
import com.tabDependencyCheck.RefreshFlagValueInsert;
import com.tabDependencyCheck.RefreshFlagVo;



public class MSSQLCreditProcessingDAOImpl implements CreditProcessingDAO 
{
	private static final Logger logger = Logger.getLogger(MSSQLCreditProcessingDAOImpl.class.getName());
	ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");
	String dateFormatWithTime=resource.getString("lbl.dateWithTimeInDao");
	String dateFormat=resource.getString("lbl.dateInDao");
	int no=Integer.parseInt(resource.getString("msg.pageSizeForMaster"));
	//Added  by sachin for MS SQL
	String dbType=resource.getString("lbl.dbType");
	String dbo=resource.getString("lbl.dbPrefix");
	//String selectFrom = resource.getString("lbl.selectFrom");
	//end by sachin for MS SQL
	Connection con=null;
	Statement stmt=null;
	PreparedStatement pstmt=null;
	CallableStatement cstm=null;
	ResultSet rs=null;
	StringBuffer bufInsUpdSql = null;
	ArrayList qryList = null;
	ArrayList qryList1 = null;
	CallableStatement cs = null;
	PrepStmtObject  delPrepStmtObject = null;
	DecimalFormat myFormatter = new DecimalFormat("###,##0.00######");
	//DecimalFormat myFormatter = new DecimalFormat("###.##");
	
	ArrayList qryListB = null;
	ArrayList qryListS = null;

	public String getProductType(String DealID)
	{
		logger.info("getProductType");
		StringBuilder query=new StringBuilder();
		query.append("select DEAL_PRODUCT_CATEGORY from cr_deal_loan_dtl where DEAL_ID='"+DealID+"'");
		logger.info("In getProductType"+query.toString());
		return  (String)ConnectionDAO.singleReturn(query.toString());
				
	}
	public boolean deleteViabilityDtl(String dealid)
	{
		boolean status=false;
		logger.info("deleteViabilityDtl");
		StringBuilder query=new StringBuilder();
		query.append("delete from cr_viability_dtl where DEAL_ID='"+dealid+"'");
		logger.info("In.....deleteViabilityDtl"+query.toString());
		ArrayList list=new ArrayList();
		list.add(query);
		try {
			status=ConnectionDAO.sqlInsUpdDelete(list);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally
		{
			query=null;
			list.clear();
			list=null;
		}
		return status;
	}
	
	
	public int getViabilityCount(String dealid)
	{
		StringBuilder query=new StringBuilder();
		query.append("select count(0) from cr_viability_dtl where DEAL_ID='"+dealid+"'");
		logger.info("In....getViabilityCount"+query.toString());
		String val=ConnectionDAO.singleReturn(query.toString());
		int count=Integer.parseInt(val);
		return count;
		
	}
	public ArrayList getViability(String DealId)
	{
		Viability voa=null;
		ArrayList branchList=new ArrayList();
		ArrayList data=new ArrayList();
		StringBuilder returnquery=new StringBuilder();
		returnquery.append("select NO_OF_DAY_ON_ROAD,NO_OF_KM_RUN_PER_DAY,NO_OF_KM_RUN_PER_MONTH,RATE_PER_KM,EARNING_PER_DAY," +
				" EARNING_PER_MONTH, EXPENSE_MONTHLY,DRIVER_SALARY,FUEL_COST,TYRE_COST,PERMIT_TAX,INSRANCE,MAINTENANCE,OTHERS," +
				" TOTAL_EXPENSES,NET_EARNING,EMI_PER_MONTH,NET_SAVING,REC_STATUS,MAKER_ID," +
				" MAKER_DATE from cr_viability_dtl where DEAL_ID='"+DealId+"'");		
		try {
			logger.info(" In......getViability"+returnquery.toString());
			branchList = ConnectionDAO.sqlSelect(returnquery.toString());
	        for(int i=0;i<branchList.size();i++)
	    	    {	    	    
	    	    	ArrayList bdetails1=(ArrayList)branchList.get(i);
	    	    	if(bdetails1.size()>0)
	    			{
	    	    		voa=new Viability();    	    		
	    	    		    	    		
	    	    	    voa.setVonroad(CommonFunction.checkNull(bdetails1.get(0)));
	    	    			    	    			    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(1)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(1))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setVrunday(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setVrunday("0.0000");	
	    	    		}
	    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(2)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(2))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setVrunmonth(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setVrunmonth("0.0000");	
	    	    		}
	    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(3)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(3))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setRpkm(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setRpkm("0.0000");	
	    	    		}
	    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(4)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(4))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setEpday(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setEpday("0.0000");	
	    	    		}
	    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(5)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(5))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setEpermonth(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setEpermonth("0.0000");	
	    	    		}
	    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(6)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(6))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setExmonthly(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setExmonthly("0.0000");	
	    	    		}
	    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(7)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(7))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setDrsalary(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setDrsalary("0.0000");	
	    	    		}
	    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(8)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(8))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setFcost(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setFcost("0.0000");	
	    	    		}
	    	    		if(!CommonFunction.checkNull(bdetails1.get(9)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(9))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setTcost(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setTcost("0.0000");	
	    	    		}
	    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(10)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(10))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setPermittax(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setPermittax("0.0000");	
	    	    		}
	    	    		if(!CommonFunction.checkNull(bdetails1.get(11)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(11))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setInsurance(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setInsurance("0.0000");	
	    	    		}
	    	    		if(!CommonFunction.checkNull(bdetails1.get(12)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(12))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setMaintenance(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setMaintenance("0.0000");	
	    	    		}
	    	    		if(!CommonFunction.checkNull(bdetails1.get(13)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(13))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setOthers(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setOthers("0.0000");	
	    	    		}
	    	    		if(!CommonFunction.checkNull(bdetails1.get(14)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(14))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setToexpenses(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setToexpenses("0.0000");	
	    	    		}
	    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(15)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(15))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setNearning(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setNearning("0.0000");	
	    	    		}
	    	    		if(!CommonFunction.checkNull(bdetails1.get(16)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(16))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setEpmonth(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setEpmonth("0.0000");	
	    	    		}
	    	    		if(!CommonFunction.checkNull(bdetails1.get(17)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(17))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setNsaving(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setNsaving("0.0000");	
	    	    		}
	    	    		
	    	    		
	    	    		data.add(voa);
	    	    		
	    	    		
	    			}
	    	}
			
		
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally
		{
			voa=null;
			branchList=null;
			returnquery=null;
			
		}
	
		return data;
				
	}
	
	public ArrayList<Viability> saveViability(Viability vo) 
	{
		ArrayList qryList=new ArrayList();
		ArrayList data=new ArrayList();		
		StringBuilder query=new StringBuilder();
		Viability voa=null;
		query.append("select count(0) from cr_viability_dtl where DEAL_ID='"+vo.getDealid()+"'");
		String val=ConnectionDAO.singleReturn(query.toString());
		int count=Integer.parseInt(val);
		if(count>0)
		{
			logger.info("In update saveViability");
			boolean status = false; 
			StringBuilder queryUpdate=new StringBuilder();
			 queryUpdate.append("update cr_viability_dtl set NO_OF_DAY_ON_ROAD=?,NO_OF_KM_RUN_PER_DAY=?,NO_OF_KM_RUN_PER_MONTH=?,RATE_PER_KM=?," +
			 		" EARNING_PER_DAY=?,EARNING_PER_MONTH=?,EXPENSE_MONTHLY=?,DRIVER_SALARY=?,FUEL_COST=?,TYRE_COST=?," +
			 		" PERMIT_TAX=?,INSRANCE=?,MAINTENANCE=?,OTHERS=?,TOTAL_EXPENSES=?,NET_EARNING=?,EMI_PER_MONTH=?," +
			 		" NET_SAVING=?,REC_STATUS=?,MAKER_ID=?,MAKER_DATE=");

			// Added for MS SQL Starts Here

			queryUpdate.append(dbo);
			queryUpdate.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"') + ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ");
			queryUpdate.append(" where DEAL_ID='"+vo.getDealid()+"' ");
			// Added for MS SQL Starts Here
			
			PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
			if((CommonFunction.checkNull(vo.getVonroad())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse(vo.getVonroad()).toString());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			
			
			if((CommonFunction.checkNull(vo.getVrunday())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse(vo.getVrunday()).toString());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
			
			if((CommonFunction.checkNull(vo.getVrunmonth())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse(vo.getVrunmonth()).toString());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
			
			if((CommonFunction.checkNull(vo.getRpkm())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse(vo.getRpkm()).toString());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
				
			if((CommonFunction.checkNull(vo.getEpday())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse(vo.getEpday()).toString());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
			
			if((CommonFunction.checkNull(vo.getEpermonth())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse(vo.getEpermonth()).toString());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			
			
			if((CommonFunction.checkNull(vo.getExmonthly())).trim().equalsIgnoreCase(""))				
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse(vo.getExmonthly()).toString());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
			
			if((CommonFunction.checkNull(vo.getDrsalary())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse(vo.getDrsalary()).toString());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
			
			if((CommonFunction.checkNull(vo.getFcost())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse(vo.getFcost()).toString());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}				
			
			
			if((CommonFunction.checkNull(vo.getTcost())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse(vo.getTcost()).toString());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}	
			
			
			if((CommonFunction.checkNull(vo.getPermittax())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse(vo.getPermittax()).toString());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
			if((CommonFunction.checkNull(vo.getInsurance())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse(vo.getInsurance()).toString());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
			if((CommonFunction.checkNull(vo.getMaintenance())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse(vo.getMaintenance()).toString());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			
			if((CommonFunction.checkNull(vo.getOthers())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse(vo.getOthers()).toString());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
			if((CommonFunction.checkNull(vo.getToexpenses())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse(vo.getToexpenses()).toString());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
				
			if((CommonFunction.checkNull(vo.getNearning())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse(vo.getNearning()).toString());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}				
				
			if((CommonFunction.checkNull(vo.getEpmonth())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse(vo.getEpmonth()).toString());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			
			
			if((CommonFunction.checkNull(vo.getNsaving())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse(vo.getNsaving()).toString());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
				  insertPrepStmtObject.addString("A");
						
			

			if((CommonFunction.checkNull(vo.getMakerid())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getMakerid()).trim());
			
			if((CommonFunction.checkNull(vo.getMakerdate())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getMakerdate()).trim());

			insertPrepStmtObject.setSql(queryUpdate.toString());
			logger.info("IN saveViability() update query1 ### "+insertPrepStmtObject.printQuery());
			qryList.add(insertPrepStmtObject);
			logger.info("In saveViability ........ update query: "+queryUpdate.toString());			
			queryUpdate=null;
			
			try
			{
				status =ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
				logger.info("In saveViability.........update status: "+status);
			}
			catch(Exception e){
				e.printStackTrace();
			}			
		}
		
		
		else
		{
			
			logger.info("In insert saveViability");
			boolean status = false; 
			 StringBuffer bufInsSql =new StringBuffer();						
				bufInsSql.append("insert into cr_viability_dtl(DEAL_ID,NO_OF_DAY_ON_ROAD,NO_OF_KM_RUN_PER_DAY,NO_OF_KM_RUN_PER_MONTH,RATE_PER_KM,EARNING_PER_DAY,EARNING_PER_MONTH,EXPENSE_MONTHLY,DRIVER_SALARY,FUEL_COST,TYRE_COST,PERMIT_TAX,INSRANCE,MAINTENANCE,OTHERS,TOTAL_EXPENSES,NET_EARNING,EMI_PER_MONTH,NET_SAVING,REC_STATUS,MAKER_ID,MAKER_DATE)");
				bufInsSql.append(" values ( ");
				bufInsSql.append(" ?," );
				bufInsSql.append(" ?," );
				bufInsSql.append(" ?," );				
				bufInsSql.append(" ?," );
				bufInsSql.append(" ?," );
				bufInsSql.append(" ?," );
				bufInsSql.append(" ?," );
				bufInsSql.append(" ?," );
				bufInsSql.append(" ?," );
				bufInsSql.append(" ?," );
				bufInsSql.append(" ?," );
				bufInsSql.append(" ?," );
				bufInsSql.append(" ?," );
				bufInsSql.append(" ?," );
				bufInsSql.append(" ?," );
				bufInsSql.append(" ?," );
				bufInsSql.append(" ?," );
				bufInsSql.append(" ?," );
				bufInsSql.append(" ?," );
				bufInsSql.append(" ?," );
				bufInsSql.append(" ?," );
				// Added for MS SQL Starts Here
				
				bufInsSql.append(dbo);
				bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) )");
				// Added for MS SQL Starts Here
				
			 
			 
			PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
			if((CommonFunction.checkNull(vo.getDealid())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse(vo.getDealid()).toString());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			
			
				if((CommonFunction.checkNull(vo.getVonroad())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse(vo.getVonroad()).toString());
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				
				
				if((CommonFunction.checkNull(vo.getVrunday())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse(vo.getVrunday()).toString());
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					
				
				if((CommonFunction.checkNull(vo.getVrunmonth())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse(vo.getVrunmonth()).toString());
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					
				
				if((CommonFunction.checkNull(vo.getRpkm())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse(vo.getRpkm()).toString());
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					
					
				if((CommonFunction.checkNull(vo.getEpday())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse(vo.getEpday()).toString());
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					
				
				if((CommonFunction.checkNull(vo.getEpermonth())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse(vo.getEpermonth()).toString());
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				
				
				if((CommonFunction.checkNull(vo.getExmonthly())).trim().equalsIgnoreCase(""))				
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse(vo.getExmonthly()).toString());
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					
				
				if((CommonFunction.checkNull(vo.getDrsalary())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse(vo.getDrsalary()).toString());
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					
				
				if((CommonFunction.checkNull(vo.getFcost())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse(vo.getFcost()).toString());
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}				
				
				
				if((CommonFunction.checkNull(vo.getTcost())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse(vo.getTcost()).toString());
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}	
				
				
				if((CommonFunction.checkNull(vo.getPermittax())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse(vo.getPermittax()).toString());
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					
				if((CommonFunction.checkNull(vo.getInsurance())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse(vo.getInsurance()).toString());
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					
				if((CommonFunction.checkNull(vo.getMaintenance())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse(vo.getMaintenance()).toString());
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				
				if((CommonFunction.checkNull(vo.getOthers())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse(vo.getOthers()).toString());
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					
				if((CommonFunction.checkNull(vo.getToexpenses())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse(vo.getToexpenses()).toString());
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
					
					
				if((CommonFunction.checkNull(vo.getNearning())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse(vo.getNearning()).toString());
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}				
					
				if((CommonFunction.checkNull(vo.getEpmonth())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse(vo.getEpmonth()).toString());
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				
				
				if((CommonFunction.checkNull(vo.getNsaving())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse(vo.getNsaving()).toString());
					} catch (ParseException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}				
					
			     insertPrepStmtObject.addString("A");
			

			if((CommonFunction.checkNull(vo.getMakerid())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getMakerid()).trim());
			
			if((CommonFunction.checkNull(vo.getMakerdate())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getMakerdate()).trim());
			

			insertPrepStmtObject.setSql(bufInsSql.toString());
			logger.info("IN saveViability() insert query1 ### "+insertPrepStmtObject.printQuery());
			qryList.add(insertPrepStmtObject);
			logger.info("In saveViability ........ insert query: "+bufInsSql.toString());			
					
			try
			{
				status =ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
				logger.info("In saveViability.........insert status: "+status);
			}
			catch(Exception e){
				e.printStackTrace();
			}	
			
			
			
			
		}
		StringBuilder returnquery=new StringBuilder();
		returnquery.append("select NO_OF_DAY_ON_ROAD,NO_OF_KM_RUN_PER_DAY,NO_OF_KM_RUN_PER_MONTH,RATE_PER_KM,EARNING_PER_DAY," +
				" EARNING_PER_MONTH, EXPENSE_MONTHLY,DRIVER_SALARY,FUEL_COST,TYRE_COST,PERMIT_TAX,INSRANCE,MAINTENANCE,OTHERS," +
				" TOTAL_EXPENSES,NET_EARNING,EMI_PER_MONTH,NET_SAVING,REC_STATUS,MAKER_ID," +
				" MAKER_DATE from cr_viability_dtl where DEAL_ID='"+vo.getDealid()+"'");
		
		ArrayList branchList=new ArrayList();
		try {
			logger.info("In......saveViability"+returnquery.toString());
			branchList = ConnectionDAO.sqlSelect(returnquery.toString());
	        for(int i=0;i<branchList.size();i++)
	    	    {	    	    
	    	    	ArrayList bdetails1=(ArrayList)branchList.get(i);
	    	    	if(bdetails1.size()>0)
	    			{
	    	    		voa=new Viability();
	    	    		
	    	    		    	    		
	    	    	   voa.setVonroad(CommonFunction.checkNull(bdetails1.get(0)));
	    	    			    	    			    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(1)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(1))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setVrunday(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setVrunday("0.0000");	
	    	    		}
	    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(2)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(2))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setVrunmonth(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setVrunmonth("0.0000");	
	    	    		}
	    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(3)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(3))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setRpkm(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setRpkm("0.0000");	
	    	    		}
	    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(4)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(4))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setEpday(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setEpday("0.0000");	
	    	    		}
	    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(5)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(5))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setEpermonth(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setEpermonth("0.0000");	
	    	    		}
	    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(6)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(6))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setExmonthly(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setExmonthly("0.0000");	
	    	    		}
	    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(7)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(7))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setDrsalary(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setDrsalary("0.0000");	
	    	    		}
	    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(8)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(8))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setFcost(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setFcost("0.0000");	
	    	    		}
	    	    		if(!CommonFunction.checkNull(bdetails1.get(9)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(9))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setTcost(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setTcost("0.0000");	
	    	    		}
	    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(10)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(10))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setPermittax(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setPermittax("0.0000");	
	    	    		}
	    	    		if(!CommonFunction.checkNull(bdetails1.get(11)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(11))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setInsurance(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setInsurance("0.0000");	
	    	    		}
	    	    		if(!CommonFunction.checkNull(bdetails1.get(12)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(12))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setMaintenance(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setMaintenance("0.0000");	
	    	    		}
	    	    		if(!CommonFunction.checkNull(bdetails1.get(13)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(13))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setOthers(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setOthers("0.0000");	
	    	    		}
	    	    		if(!CommonFunction.checkNull(bdetails1.get(14)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(14))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setToexpenses(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setToexpenses("0.0000");	
	    	    		}
	    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(15)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(15))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setNearning(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setNearning("0.0000");	
	    	    		}
	    	    		if(!CommonFunction.checkNull(bdetails1.get(16)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(16))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setEpmonth(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setEpmonth("0.0000");	
	    	    		}
	    	    		if(!CommonFunction.checkNull(bdetails1.get(17)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(17))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
	    	    		voa.setNsaving(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			voa.setNsaving("0.0000");	
	    	    		}
	    	    		
	    	    		
	    	    		data.add(voa);
	    	    		
	    	    		
	    			}
	    	}
			
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally
		{
			vo=null;
			qryList=null;
			query=null;
			returnquery=null;
			branchList.clear();
			branchList=null;
			voa=null;
			
		}
	
		return data;
		
		
	}

	public ArrayList<CodeDescVo> getBranchList()
	{
		ArrayList<CodeDescVo> list=new ArrayList<CodeDescVo>();
		try{
	StringBuilder query=new StringBuilder();
		query.append("SELECT BRANCH_ID,BRANCH_DESC from com_branch_m");
		logger.info("In........getBranchList "+query.toString());
		ArrayList branchList = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getBranchList "+branchList.size());
		
		query=null;
		
		for(int i=0;i<branchList.size();i++){
			logger.info("getBranchList...Outer FOR loop "+CommonFunction.checkNull(branchList.get(i)).toString());
			ArrayList data=(ArrayList)branchList.get(i);
			if(data.size()>0)	{
			CodeDescVo branchVo = new CodeDescVo();
			branchVo.setId((CommonFunction.checkNull(data.get(0))).trim());
			branchVo.setName((CommonFunction.checkNull(data.get(1))).trim());
			list.add(branchVo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}


	public ArrayList<RelationalManagerVo> getRelationalManagerList(String branch)
	{
		ArrayList<RelationalManagerVo> list=new ArrayList<RelationalManagerVo>();
		try{
			StringBuilder query=new StringBuilder();
			query.append("SELECT id,name from cp_relationship_manager" +
					     " where branch_fk_id="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(Integer.parseInt(branch)).trim()));
			logger.info("In........getRelationalManagerList"+query.toString());
			ArrayList rmList = ConnectionDAO.sqlSelect(query.toString());
			
			query=null;
			
			logger.info("getRelationalManagerList "+rmList.size());
			for(int i=0;i<rmList.size();i++){
				logger.info("getRelationalManagerList...Outer FOR loop "+CommonFunction.checkNull(rmList.get(i)).toString());
				ArrayList data=(ArrayList)rmList.get(i);
				if(data.size()>0)	{
				RelationalManagerVo relationalManagerVo=new RelationalManagerVo();
				relationalManagerVo.setId(Integer.parseInt((CommonFunction.checkNull(data.get(0))).trim()));
				relationalManagerVo.setName((CommonFunction.checkNull(data.get(1)).trim()));
				list.add(relationalManagerVo);
			}
			}

			}catch(Exception e){
				e.printStackTrace();
			}
			return list;
	}




	public ArrayList<Object> getApplicantDetailAll() {

				 ArrayList<Object> list=new ArrayList<Object>();
					try{
						StringBuilder query=new StringBuilder();
					query.append("select DEAL_CUSTOMER_ROLE_ID,DEAL_CUSTOMER_ID,DEAL_CUSTOMER_NAME,DOC_DESC,DEAL_CUSTOMER_TYPE," +
							"DEAL_EXISTING_CUSTOMER from cr_deal_customer_role,generic_master where DEAL_CUSTOMER_ROLE_TYPE=VALUE and GENERIC_KEY='APP_TYPE'");

					logger.info("In.......getApplicantDetailAll"+query.toString());
					ArrayList applicantDetail = ConnectionDAO.sqlSelect(query.toString());
					logger.info("getApplicantDetailAll "+applicantDetail.size());
					
					query=null;
					
					for(int i=0;i<applicantDetail.size();i++){
						logger.info("getApplicantDetailAll...Outer FOR loop "+CommonFunction.checkNull(applicantDetail.get(i)).toString());
						ArrayList data=(ArrayList)applicantDetail.get(i);
						if(data.size()>0)	{
						CreditProcessingCustomerEntryVo appl=new CreditProcessingCustomerEntryVo();
						appl.setCustomerId((CommonFunction.checkNull(data.get(0))).trim());
						appl.setCustomerName((CommonFunction.checkNull(data.get(1))).trim());
						appl.setApplicantType((CommonFunction.checkNull(data.get(2))).trim());
						appl.setApplicantCategory((CommonFunction.checkNull(data.get(3))).trim());
						appl.setExistingCustomer((CommonFunction.checkNull(data.get(4))).trim());
						list.add(appl);
					}
					}
					}catch(Exception e){
						e.printStackTrace();
					}
					return list;
			}

	
	public int saveCPLeadEntry(Object ob)
	  {
		String dateTime=null;
		CreditProcessingLeadEntryVo creditVo = (CreditProcessingLeadEntryVo)ob;
		if(CommonFunction.checkNull(creditVo.getLeadTime()).equalsIgnoreCase(""))
		{
			dateTime=creditVo.getLeadDate().trim();
		}
		else
		{
			dateTime=creditVo.getLeadDate().trim()+" "+creditVo.getLeadTime().trim().substring(0, 5);
		}
        
		logger.info("dateTime : "+dateTime);

		int maxId=0;
		String dealNoStatus=null;
		int a[]=null;
		ArrayList qryList = new ArrayList();
		PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

		long vCode=0;
		if(creditVo.getLbxvendorCode()!=null && !creditVo.getLbxvendorCode().equalsIgnoreCase(""))
		{
			vCode=Long.parseLong(creditVo.getLbxvendorCode());
		}
		logger.info("In saveCPLeadEntry..vendor Code....."+vCode);
		try
		{
		  if(creditVo.getDealNo()!=null && !CommonFunction.checkNull(creditVo.getDealNo()).equalsIgnoreCase(""))
		  {
			  StringBuilder query=new StringBuilder();
			  query.append("SELECT DEAL_ID FROM cr_deal_dtl WHERE DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(creditVo.getDealId()).trim())+"'");
			  logger.info("In.....saveCPLeadEntry"+query.toString());
			  dealNoStatus=ConnectionDAO.singleReturn(query.toString());
			  
			  query=null;
		  }
		  
		    // asesh space start
			StringBuilder query4=new StringBuilder();
			StringBuffer query5=new StringBuffer();
			String dealPM="";
			query4.append("SELECT USER_REPORTING_TO FROM SEC_USER_M WHERE USER_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(creditVo.getLbxRelationship()).trim())+"'");
			logger.info("......query4"+query4.toString());
			dealPM = ConnectionDAO.singleReturn(query4.toString());
			// asesh space end  
		if(dealNoStatus!=null && !dealNoStatus.equals(""))
		{
			logger.info("In update saveCPLeadEntry");
			boolean status = false;
 
			 StringBuilder queryUpdate=new StringBuilder();
			 queryUpdate.append("update cr_deal_dtl set DEAL_APPLICATION_FORM_NO=?," );	  
			 queryUpdate.append("DEAL_DATE=");
			 queryUpdate.append(dbo);
			 queryUpdate.append("STR_TO_DATE(?,'"+dateFormatWithTime+"'),DEAL_ENCODED_DATE=");
			 queryUpdate.append(dbo);
			 queryUpdate.append("STR_TO_DATE(?,'"+dateFormatWithTime+"') ");
			 queryUpdate.append(",DEAL_BRANCH=?,DEAL_INDUSTRY_ID=?,DEAL_SUB_INDUSTRY_ID=?, DEAL_SOURCE_TYPE=?,DEAL_SOURCE_NAME=?," );
			 queryUpdate.append(" DEAL_VENDOR_CODE=?,DEAL_RM=?,DEAL_CATEGORY=?,DEALER_EXECUTIVE_NAME=?,DEALER_MANAGER_NAME=?,GENERATED_BY=? " );
			 if(CommonFunction.checkNull(creditVo.getMakerIdStatus()).equalsIgnoreCase("3000206"))
			 {
				 logger.info("Maker Id/Maker Date is updated ");
				 queryUpdate.append(" , MAKER_ID=?,MAKER_DATE=" );
				 queryUpdate.append(dbo);
				 queryUpdate.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ");
				
			 }
			
			  queryUpdate.append(",AREA_CODE=?,DEAL_RO=?,DEAL_PM=?,REFERRED_BY=?,FI_APPRAISER_NAME=?,FI_DECISION=?,FI_REMARKS=?,MAKER_REMARKS=?,CASE_VISITED_BY=? where DEAL_ID=?");
			  
			//PrepStmtObject prepStmt = new PrepStmtObject();
			if((CommonFunction.checkNull(creditVo.getApplicationFormNo())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getApplicationFormNo()).trim());
			
			if((CommonFunction.checkNull(dateTime)).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((dateTime).trim());
			
			if((CommonFunction.checkNull(creditVo.getBussinessDate())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getBussinessDate()).trim());
			
			if((CommonFunction.checkNull(creditVo.getLbxBranchId())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getLbxBranchId()).trim());
			
			if((CommonFunction.checkNull(creditVo.getLbxIndustry())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getLbxIndustry()).trim());
			
			if((CommonFunction.checkNull(creditVo.getLbxSubIndustry())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getLbxSubIndustry()).trim());
			
			if((CommonFunction.checkNull(creditVo.getSource())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getSource()).trim());
			
			if((CommonFunction.checkNull(creditVo.getSourcedesc())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getSourcedesc().trim()));
			
			if((CommonFunction.checkNull(vCode)).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addInt(vCode);
			
			if(CommonFunction.checkNull((creditVo.getLbxRelationship())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getLbxRelationship()).trim());
			
			
			if((CommonFunction.checkNull(creditVo.getDealCat())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getDealCat()).trim());

			
			//code added by Ritesh
			if((CommonFunction.checkNull(creditVo.getDealerExecutive())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getDealerExecutive()).trim());
			
			if((CommonFunction.checkNull(creditVo.getDealerManager())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getDealerManager()).trim());
	
			//code added by saurabh
			if(CommonFunction.checkNull((creditVo.getLeadGeneratorBy())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getLeadGeneratorBy()).trim());
			//saurabh space end
			 if(CommonFunction.checkNull(creditVo.getMakerIdStatus()).equalsIgnoreCase("3000206"))
			 {
				if(CommonFunction.checkNull((creditVo.getMakerId())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((creditVo.getMakerId()).trim());
				
				
				if((CommonFunction.checkNull(creditVo.getMakerDate())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((creditVo.getMakerDate()).trim());
			 }
			
			if((CommonFunction.checkNull(creditVo.getLbxareaCodeVal())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getLbxareaCodeVal()).trim());
			//Asesh space starts ******
			if((CommonFunction.checkNull(creditVo.getLbxUserSearchId())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getLbxUserSearchId()).trim());
			if(CommonFunction.checkNull(dealPM).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(dealPM);
			
			if(CommonFunction.checkNull(creditVo.getReferredBy()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getReferredBy()).trim());
			
			
			if((CommonFunction.checkNull(creditVo.getFiAppraiserName())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getFiAppraiserName()).trim());
			
			if(CommonFunction.checkNull(creditVo.getFidecisionDeal()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(creditVo.getFidecisionDeal());
			
			if(CommonFunction.checkNull(creditVo.getFiRemarksDeal()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getFiRemarksDeal()).trim());
			
			if(CommonFunction.checkNull(creditVo.getMakerRemark()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getMakerRemark()).trim());
			if(CommonFunction.checkNull(creditVo.getCaseVisitedBy()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getCaseVisitedBy()).trim());
			
			//Asesh space end
			if((CommonFunction.checkNull(creditVo.getDealId())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getDealId()).trim());

			insertPrepStmtObject.setSql(queryUpdate.toString());
			logger.info("IN saveCPLeadEntry() update query1 ### "+insertPrepStmtObject.printQuery());
			qryList.add(insertPrepStmtObject);
			logger.info("In saveCPLeadEntry ........ update query: "+queryUpdate.toString());
			
			queryUpdate=null;
			
			try
			{
				status =ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
				logger.info("In saveCPLeadEntry.........update status: "+status);
			}
			catch(Exception e){
				e.printStackTrace();
			}
			

			    logger.info("In saveCPLeadEntry......................"+status);
				if(status)
				{

					 maxId=Integer.parseInt(creditVo.getDealId());
					 logger.info("maxId : "+maxId);
				}

		}
		else
		{
		 
		 // if(!applformNo)
		//  {
			logger.info("In insert saveCPLeadEntry");
			StringBuffer bufInsSql =	new StringBuffer();
					bufInsSql.append("insert into cr_deal_dtl(LEAD_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,DEAL_DATE,DEAL_ENCODED_DATE,DEAL_BRANCH,DEAL_INDUSTRY_ID,DEAL_SUB_INDUSTRY_ID,DEAL_SOURCE_TYPE,DEAL_SOURCE_NAME,DEAL_VENDOR_CODE,DEAL_RM,DEAL_CATEGORY,AREA_CODE,REC_STATUS,GENERATED_BY,MAKER_ID,DEALER_EXECUTIVE_NAME,DEALER_MANAGER_NAME,REFRESH_FLAG,MAKER_DATE,DEAL_INITIATION_DATE,DEAL_RO,DEAL_PM,REFERRED_BY,FI_APPRAISER_NAME,FI_DECISION,FI_REMARKS,MAKER_REMARKS,CASE_VISITED_BY)");
			bufInsSql.append(" values ( ");
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			//bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')," );
			bufInsSql.append(dbo);			 
			bufInsSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"'), ");
			//bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')," );
			bufInsSql.append(dbo); 
			bufInsSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"'), ");
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
            bufInsSql.append(" 'NNNNNNNNNNNNNNN'," );//REFRESH_FLAG
			//bufInsSql.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND)," );
            bufInsSql.append(dbo);
            bufInsSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"') + ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9), ");
            //Nishant space starts
			//bufInsSql.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND)," );//DEAL_INITIATION_DATE
            bufInsSql.append(dbo);
            bufInsSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"') + ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9), ");
            //Nishant space end
			//Asesh space starts
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ? )" );
			//Asesh space end
			if((CommonFunction.checkNull(creditVo.getLbxLeadNo())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getLbxLeadNo()).trim());
			if((CommonFunction.checkNull(creditVo.getDealNo())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getDealNo()).trim());
			if((CommonFunction.checkNull(creditVo.getApplicationFormNo())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getApplicationFormNo()).trim());

			insertPrepStmtObject.addString((dateTime).trim());
			
			if((CommonFunction.checkNull(creditVo.getBussinessDate())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getBussinessDate()).trim());

			if((CommonFunction.checkNull(creditVo.getLbxBranchId())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getLbxBranchId()).trim());
			if((CommonFunction.checkNull(creditVo.getLbxIndustry())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getLbxIndustry()).trim());
			if((CommonFunction.checkNull(creditVo.getLbxSubIndustry())).trim().equalsIgnoreCase(""))
			    insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getLbxSubIndustry()).trim());
			if((CommonFunction.checkNull(creditVo.getSource())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getSource()).trim());
			if((CommonFunction.checkNull(creditVo.getSourcedesc())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getSourcedesc()).trim());

			insertPrepStmtObject.addString((""+vCode).trim());

			if((CommonFunction.checkNull(creditVo.getLbxRelationship())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getLbxRelationship()).trim());
			
			if((CommonFunction.checkNull(creditVo.getDealCat())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getDealCat()).trim());
			//kanika code
			
			if((CommonFunction.checkNull(creditVo.getLbxareaCodeVal())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getLbxareaCodeVal()).trim());
			//kanika code end

			insertPrepStmtObject.addString("P");//Status
		// SAURABH 	
			if((CommonFunction.checkNull(creditVo.getLeadGeneratorBy())).trim().equals(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getLeadGeneratorBy()).trim());//generated by
			
			//sAURABH

			if((CommonFunction.checkNull(creditVo.getUserId())).trim().equals(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getUserId()).trim());//maker Id

						
			if((CommonFunction.checkNull(creditVo.getDealerExecutive())).trim().equals(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getDealerExecutive()).trim());//DEALER_EXECUTIVE_NAME
			
			if((CommonFunction.checkNull(creditVo.getDealerManager())).trim().equals(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getDealerManager()).trim());//DEALER_MANAGER_NAME


			if((CommonFunction.checkNull(creditVo.getBussinessDate())).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getBussinessDate()));
			//Nishant space starts
			if((CommonFunction.checkNull(creditVo.getBussinessDate())).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getBussinessDate()));
			//Nishant space end
			//Asesh space starts
			if((CommonFunction.checkNull(creditVo.getLbxUserSearchId())).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getLbxUserSearchId()));
			if(CommonFunction.checkNull(dealPM).trim().equals(""))
			insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(dealPM);
			
			if((CommonFunction.checkNull(creditVo.getReferredBy())).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getReferredBy()));
			
			if((CommonFunction.checkNull(creditVo.getFiAppraiserName())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getFiAppraiserName()).trim());
			
			if(CommonFunction.checkNull(creditVo.getFidecisionDeal()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(creditVo.getFidecisionDeal());
			
			if(CommonFunction.checkNull(creditVo.getFiRemarksDeal()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getFiRemarksDeal()).trim());
			
			if(CommonFunction.checkNull(creditVo.getMakerRemark()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getMakerRemark()).trim());
			
			if(CommonFunction.checkNull(creditVo.getCaseVisitedBy()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((creditVo.getCaseVisitedBy()).trim());
			
			//Asesh space end
			insertPrepStmtObject.setSql(bufInsSql.toString());
			logger.info("IN saveCPLeadEntry() insert query1 ### "+insertPrepStmtObject.printQuery());
			
			
			bufInsSql=null;
			
			qryList.add(insertPrepStmtObject);
			boolean status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
		    logger.info("In saveCustomer......................"+status);
			if(status)
			{
				StringBuilder query3=new StringBuilder();
				 query3.append("Select distinct max(DEAL_ID) from cr_deal_dtl  WITH (ROWLOCK) ");
				  
				  StringBuilder id=new StringBuilder();
				  id.append(ConnectionDAO.singleReturn(query3.toString()));
				 maxId=Integer.parseInt(id.toString());
//				 logger.info("maxId : "+maxId);
//				    RefreshFlagVo vo = new RefreshFlagVo();
//					vo.setRecordId(maxId);
//					vo.setModuleName("CP");
//					vo.setFlagValue("NNNNNNNNNNNNNNN");
//					boolean refreshFlag = RefreshFlagValueInsert.insertRefreshFlag(vo);
					
					StringBuilder checkStageM=new StringBuilder();
				  checkStageM.append(CommonFunction.stageMovement(creditVo.getCompanyId(), "DC","I",""+maxId, "DC", creditVo.getBussinessDate(),creditVo.getUserId()));
				 logger.info("checkStageM : "+checkStageM);
				 
				 query3=null;
				 checkStageM=null;
				 id=null;
			}
		    }
		  else
		  {
			  maxId=0;
		  }
		}


		}catch(Exception e){
			e.printStackTrace();
		}
		finally
		{
			dealNoStatus=null;
		}
		return maxId;

	}




	public ArrayList getProductTypeList() {
		ArrayList list=new ArrayList();
		try{
			StringBuilder query=new StringBuilder();
		 query.append("SELECT PRODUCT_ID,PRODUCT_DESC from cr_product_m where REC_STATUS='A'");
		logger.info("getProductTypeList"+query.toString());
		CodeDescVo branchVo=null;
		ArrayList product = ConnectionDAO.sqlSelect(query.toString());
		
		query=null;
		logger.info("getProductTypeList"+product.size());
		for(int i=0;i<product.size();i++){

			logger.info("getProductTypeList"+product.get(i).toString());
			ArrayList product1=(ArrayList)product.get(i);
			if(product1.size()>0)
			{
			    branchVo = new CodeDescVo();
				branchVo.setId((CommonFunction.checkNull(product1.get(0))));
				branchVo.setName((CommonFunction.checkNull(product1.get(1))).trim());
				list.add(branchVo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}
	
	
	public ArrayList<CodeDescVo> getProductList(String productType) {
		ArrayList<CodeDescVo> list=new ArrayList<CodeDescVo>();
		try{
			StringBuilder query=new StringBuilder();
		 query.append("SELECT PRODUCT_ID,PRODUCT_DESC from com_product_m where MODULE_ID="+(CommonFunction.checkNull(productType).trim()));
		logger.info("IN......getProductList"+query.toString());
		 ArrayList productList = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getProductList "+productList.size());
		
		query=null;
		
		for(int i=0;i<productList.size();i++){
			logger.info("getProductList...Outer FOR loop "+CommonFunction.checkNull(productList.get(i)).toString());
			ArrayList data=(ArrayList)productList.get(i);
			if(data.size()>0)	{
			CodeDescVo branchVo = new CodeDescVo();
			branchVo.setId((CommonFunction.checkNull(data.get(0))).trim());
			branchVo.setName((CommonFunction.checkNull(data.get(1))).trim());
			list.add(branchVo);
		}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		
		return list;
	}
	
	
	public ArrayList<CodeDescVo> getSchemeList(String product)
	{
		ArrayList<CodeDescVo> list=new ArrayList<CodeDescVo>();
		try{
			StringBuilder query=new StringBuilder();
		 query.append("SELECT SCHEME_ID,SCHEME_DESC from cr_scheme_m where PRODUCT_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(product)).trim()+"' AND REC_STATUS='A' " );
		 logger.info("in.....getSchemeList"+query.toString());
		 ArrayList schemeList = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getSchemeList "+schemeList.size());
		
		query=null;
		
		for(int i=0;i<schemeList.size();i++){
			logger.info("getSchemeList...Outer FOR loop "+CommonFunction.checkNull(schemeList.get(i)).toString());
			ArrayList data=(ArrayList)schemeList.get(i);
			if(data.size()>0)	{
			CodeDescVo branchVo = new CodeDescVo();
			branchVo.setId((CommonFunction.checkNull(data.get(0))).trim());
			branchVo.setName((CommonFunction.checkNull(data.get(1))).trim());
			list.add(branchVo);
		 }
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}
	
	
	public ArrayList<LoanedProductVo> getLoanListOfProduct(String dealID) 
	{
		ArrayList<LoanedProductVo> list=new ArrayList<LoanedProductVo>();
		try{
			StringBuilder query=new StringBuilder();
		 query.append("SELECT M.MODULE_DESC,P.PRODUCT_DESC,S.SCHEME_DESC,P.LOAN_TYPE,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_PRODUCT_SEQ,D.STATUS "+
                      " FROM cr_deal_loan_dtl D,com_module_m M,cr_product_m P,cr_scheme_m S WHERE DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealID)).trim()+"' AND M.MODULE_ID=DEAL_PRODUCT_TYPE and DEAL_PRODUCT = P.PRODUCT_ID and DEAL_SCHEME=S.SCHEME_ID");
		logger.info("In.....getLoanListOfProduct"+query.toString());
		 ArrayList loanListOfProduct = ConnectionDAO.sqlSelect(query.toString());
		
		query=null;
		
		logger.info("getLoanListOfProduct "+loanListOfProduct.size());
		for(int i=0;i<loanListOfProduct.size();i++){
			logger.info("getLoanListOfProduct...Outer FOR loop "+CommonFunction.checkNull(loanListOfProduct.get(i)).toString());
			ArrayList data=(ArrayList)loanListOfProduct.get(i);
			if(data.size()>0)	{
			LoanedProductVo loanProduct = new LoanedProductVo();
			loanProduct.setProductType((CommonFunction.checkNull(data.get(0))).trim());
			loanProduct.setProduct((CommonFunction.checkNull(data.get(1))).trim());
			loanProduct.setScheme((CommonFunction.checkNull(data.get(2))).trim());
			loanProduct.setLoanType((CommonFunction.checkNull(data.get(3))).trim());
			loanProduct.setRequestedLoanAmount((CommonFunction.checkNull(data.get(4))).trim());
			loanProduct.setRequestedLoanTenure((CommonFunction.checkNull(data.get(5))).trim());
			loanProduct.setLoanProductSeq((CommonFunction.checkNull(data.get(6))).trim());
			loanProduct.setStatus((CommonFunction.checkNull(data.get(7))).trim());
			list.add(loanProduct);
		}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		
		return list;
	}

	public ArrayList<Object> getAddressList() {
		ArrayList<Object> list=new ArrayList<Object>();
		try{
			StringBuilder query=new StringBuilder();
		 query.append("select g.VALUE,g.DESCRIPTION from generic_master g,generic_master_keys h where h.GENERIC_KEY='ADDRESS_TYPE' and g.GENERIC_KEY=h.GENERIC_KEY");
		 logger.info("In......getAddressList"+query.toString());
		 ArrayList addressList = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getAddressList "+addressList.size());
		
		query=null;
		
		for(int i=0;i<addressList.size();i++){
			ArrayList data=(ArrayList)addressList.get(i);
			if(data.size()>0)	{
			CodeDescVo buyerVo=new CodeDescVo();
			buyerVo.setId((CommonFunction.checkNull(data.get(0))).trim());
			buyerVo.setName((CommonFunction.checkNull(data.get(1))).trim());
			list.add(buyerVo);
		}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		
		return list;
	}

	    public ArrayList<Object> getBusinessPartnerTypeList()
	    {
	    	ArrayList<Object> list=new ArrayList<Object>();
			try{
				StringBuilder query=new StringBuilder();
			 query.append("select g.VALUE,g.DESCRIPTION from generic_master g,generic_master_keys h where h.GENERIC_KEY='BPTYPE' and g.GENERIC_KEY=h.GENERIC_KEY");
			 logger.info("In.....getBusinessPartnerTypeList "+query.toString());
			 ArrayList businessPartnerTypeList = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getBusinessPartnerTypeList "+businessPartnerTypeList.size());
			
			query=null;
			
			for(int i=0;i<businessPartnerTypeList.size();i++){
				logger.info("getBusinessPartnerTypeList...Outer FOR loop "+CommonFunction.checkNull(businessPartnerTypeList.get(i)).toString());
				ArrayList data=(ArrayList)businessPartnerTypeList.get(i);
				if(data.size()>0)	{
				CodeDescVo buyerVo=new CodeDescVo();
				buyerVo.setId((CommonFunction.checkNull(data.get(0))).trim());
				buyerVo.setName((CommonFunction.checkNull(data.get(1))).trim());
				list.add(buyerVo);
			}
			}
			}catch(Exception e){
				e.printStackTrace();
			}
			
			return list;
		}




	    public boolean saveBuyerDetails(Object ob) {
			BuyerVo vo = (BuyerVo)ob;
			
			logger.info("saveBuyerDetailsvo.getUserId(): "+vo.getUserId());
			boolean status = false;
			StringBuffer bufInsUpdSql = new StringBuffer();
			qryList = new ArrayList();
			qryListB = new ArrayList();
			PrepStmtObject  insertPrepStmtObject =  new PrepStmtObject();
			StringBuffer bufInsUpdSql1 = new StringBuffer();
			PrepStmtObject  insertPrepStmtObject1 =  new PrepStmtObject ();
			try {

			bufInsUpdSql.append("insert into cr_deal_buyer_supplier_dtl(DEAL_ID,DEAL_BUYER_SUPPLIER_RELATION,DEAL_BUYER_SUPPLIER_TYPE,DEAL_BUYER_SUPPLIER_NAME," +
						" DEAL_BUYER_SUPPLIER_CONTACT,DEAL_BUYER_SUPPLIER_DESIGNATION,DEAL_BUYER_SUPPLIER_MOBILE,DEAL_BUYER_SUPPLIER_EMAIL,DEAL_BUYER_SUPPLIER_MONTLY_SALES,DEAL_BUYER_SUPPLIER_PAYMENT_TERM," +
						" DEAL_BUYER_SUPPLIER_PRODUCT_TYPE,DEAL_BUYER_SUPPLIER_VINTAGE,DEAL_BUYER_SUPPLIER_ADDRESS_TYPE,DEAL_BUYER_SUPPLIER_ADDRESS,DEAL_BUYER_SUPPLIER_COUNTRY,DEAL_BUYER_SUPPLIER_STATE,DEAL_BUYER_SUPPLIER_DISTRICT,DEAL_BUYER_SUPPLIER_PINCODE,REC_STATUS,MAKER_ID,MAKER_DATE,ADDRESS_LINE_2,ADDRESS_LINE_3,TAHSIL)");
				  bufInsUpdSql.append(" values( ");
				  bufInsUpdSql.append(" ?," );//DEAL_ID
			      bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_RELATION
			      bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_TYPE
				  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_NAME
				  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_CONTACT
				  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_DESIGNATION
				  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_MOBILE
				  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_EMAIL
				  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_MONTLY_SALES
				  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_PAYMENT_TERM
				  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_PRODUCT_TYPE
				  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_VINTAGE
				  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_ADDRESS_TYPE
				  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_ADDRESS
				  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_COUNTRY
				  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_STATE
				  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_DISTRICT
				  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_PINCODE
				  bufInsUpdSql.append(" 'P'," );								//REC_STATUS
				  bufInsUpdSql.append(" ?," );//MAKER_ID
			    //  bufInsUpdSql.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND))");//MAKER_DATE
				  bufInsUpdSql.append(dbo);
				  bufInsUpdSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9),");//MAKER_DATE
				  bufInsUpdSql.append(" ?," );//ADDRESS_LINE_2
				  bufInsUpdSql.append(" ?," );//ADDRESS_LINE_3
				  bufInsUpdSql.append(" ?)" );//TAHSIL
                  
				 if(CommonFunction.checkNull((vo.getDealId()).trim()).equalsIgnoreCase(""))
		              insertPrepStmtObject.addNull();
		              else
		              insertPrepStmtObject.addString((vo.getDealId().trim()));
				 
				 
				
				      insertPrepStmtObject.addString("B");


				 
				      insertPrepStmtObject.addString("B");
				      
				 
				  if(CommonFunction.checkNull((vo.getBusinessPartnerName()).trim()).equalsIgnoreCase(""))
				      insertPrepStmtObject.addNull();
				      else
				      insertPrepStmtObject.addString((vo.getBusinessPartnerName().trim()));


				  if(CommonFunction.checkNull((vo.getContactPerson()).trim()).equalsIgnoreCase(""))
				      insertPrepStmtObject.addNull();
				      else
				      insertPrepStmtObject.addString((vo.getContactPerson().trim()));


			  if(CommonFunction.checkNull((vo.getDesignation()).trim()).equalsIgnoreCase(""))
					  insertPrepStmtObject.addNull();
					  else
					  insertPrepStmtObject.addString((vo.getDesignation().trim()));


				  if(CommonFunction.checkNull((vo.getMobile()).trim()).equalsIgnoreCase(""))
					  insertPrepStmtObject.addNull();
					  else
					  insertPrepStmtObject.addString((vo.getMobile().trim()));


				  if(CommonFunction.checkNull((vo.getEmail()).trim()).equalsIgnoreCase(""))
					  insertPrepStmtObject.addNull();
					  else
					  insertPrepStmtObject.addString((vo.getEmail().trim()));


				  if(CommonFunction.checkNull((vo.getAveragePurchaseSales()).trim()).equalsIgnoreCase(""))
					  insertPrepStmtObject.addNull();
					  else
					  insertPrepStmtObject.addString(myFormatter.parse((vo.getAveragePurchaseSales().trim())).toString());

				  logger.info("vo.getAveragePurchaseSales(): "+vo.getAveragePurchaseSales());
				  logger.info("myFormatter.parse((vo.getAveragePurchaseSales().trim())).toString(): "+myFormatter.parse((vo.getAveragePurchaseSales().trim())).toString());
				  if(CommonFunction.checkNull((vo.getPaymentTerms()).trim()).equalsIgnoreCase(""))
					  insertPrepStmtObject.addNull();
				  else
				  insertPrepStmtObject.addString((vo.getPaymentTerms().trim()));


				  if(CommonFunction.checkNull((vo.getProductType()).trim()).equalsIgnoreCase(""))
					   insertPrepStmtObject.addNull();
					   else
					   insertPrepStmtObject.addString((vo.getProductType().trim()));


				  if(CommonFunction.checkNull((vo.getVintageOfRelationship()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
					   else
					   insertPrepStmtObject.addString((vo.getVintageOfRelationship().trim()));
				  
				  
				  if((CommonFunction.checkNull(vo.getAddress())).trim().equalsIgnoreCase(""))
					  insertPrepStmtObject.addNull();
				      else
				    	  insertPrepStmtObject.addString((vo.getAddress()).trim());
				  
				  
				  if((CommonFunction.checkNull(vo.getAddressLine1())).trim().equalsIgnoreCase(""))
					  insertPrepStmtObject.addNull();
					   else
						   insertPrepStmtObject.addString((vo.getAddressLine1()).trim());


					if((CommonFunction.checkNull(vo.getTxtCountryCode())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
				       else
				    	   insertPrepStmtObject.addString((vo.getTxtCountryCode()).trim());

				    if((CommonFunction.checkNull(vo.getTxtStateCode())).trim().equalsIgnoreCase(""))
				    	insertPrepStmtObject.addNull();
					   else
						   insertPrepStmtObject.addString((vo.getTxtStateCode()).trim());

				   if((CommonFunction.checkNull(vo.getTxtDistCode())).trim().equalsIgnoreCase(""))
					   insertPrepStmtObject.addNull();
				    else
				    	insertPrepStmtObject.addString((vo.getTxtDistCode()).trim());


				  if((CommonFunction.checkNull(vo.getPincode())).trim().equalsIgnoreCase(""))
					  insertPrepStmtObject.addNull();
					 else
						 insertPrepStmtObject.addString((vo.getPincode()).trim());



				  if(CommonFunction.checkNull((vo.getUserId())).equalsIgnoreCase(""))
						 insertPrepStmtObject.addNull();
						 else
				        insertPrepStmtObject.addString((vo.getUserId()));

				  if(CommonFunction.checkNull((vo.getMakerDate())).equalsIgnoreCase(""))
						 insertPrepStmtObject.addNull();
						 else
				        insertPrepStmtObject.addString((vo.getMakerDate()));
				  if((CommonFunction.checkNull(vo.getAddressLine2())).trim().equalsIgnoreCase(""))
					  insertPrepStmtObject.addNull();
					   else
						   insertPrepStmtObject.addString((vo.getAddressLine2()).trim());
				  
				  if((CommonFunction.checkNull(vo.getAddressLine3())).trim().equalsIgnoreCase(""))
					  insertPrepStmtObject.addNull();
					   else
						   insertPrepStmtObject.addString((vo.getAddressLine3()).trim());
				  
				  if((CommonFunction.checkNull(vo.getTxtTahsil())).trim().equalsIgnoreCase(""))
					  insertPrepStmtObject.addNull();
					   else
					  insertPrepStmtObject.addString((vo.getTxtTahsil()).trim());

					   insertPrepStmtObject.setSql(bufInsUpdSql.toString());

			        logger.info("IN Deal Buyer() insert query1 ### "+insertPrepStmtObject.printQuery());
			        qryListB.add(insertPrepStmtObject);
			        status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryListB);
			        logger.info("In cr deal buyer supplier dtl tables......................"+status);
			        
			        String queryB = "Select distinct max(DEAL_BUYER_SUPPLIER_ID) from cr_deal_buyer_supplier_dtl"; 
			        String deal_buyerId = ConnectionDAO.singleReturn(queryB);		    	    
//		    	    for(int i=0;i<bdetailsB.size();i++)
//		    	    {
//		    	    	ArrayList bdetails1=(ArrayList)bdetailsB.get(i);
//		    	    	if(bdetails1.size()>0)
//		    			{ 
//			              deal_buyerId = bdetails1.get(0).toString();
//			              
//		    			}
//		    	    }
			     logger.info("deal_buyerId"+deal_buyerId);
				 bufInsUpdSql1.append("insert into cr_deal_address_m(ADDRESS_TYPE, BPTYPE, BPID, ADDRESS_LINE1,COUNTRY, STATE, DISTRICT, PINCODE)");
				 bufInsUpdSql1.append("values( ");
			     bufInsUpdSql1.append(" ?, " );
				 bufInsUpdSql1.append(" ?, " );
				 bufInsUpdSql1.append(" "+(CommonFunction.checkNull(deal_buyerId)).trim()+", " );
				 bufInsUpdSql1.append(" ?, " );
			     bufInsUpdSql1.append(" ?, " );
				 bufInsUpdSql1.append(" ?, " );
				 bufInsUpdSql1.append(" ?, " );
				 bufInsUpdSql1.append(" ? ) " );

				if(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAddress())).trim().equalsIgnoreCase(""))
		           insertPrepStmtObject1.addNull();
			      else
		         insertPrepStmtObject1.addString(StringEscapeUtils.escapeSql(vo.getAddress()).trim());

			   // if(CommonFunction.checkNull(vo.getBpType()).equalsIgnoreCase(""))
			    //	insertPrepStmtObject1.addNull();
			     //else
			       insertPrepStmtObject1.addString("B");
			  	

		       if(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAddressLine1())).trim().equalsIgnoreCase(""))
			      insertPrepStmtObject1.addNull();
				   else
				   insertPrepStmtObject1.addString(StringEscapeUtils.escapeSql(vo.getAddressLine1()).trim());


				if(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getTxtCountryCode())).trim().equalsIgnoreCase(""))
			      insertPrepStmtObject1.addNull();
			       else
				   insertPrepStmtObject1.addString(StringEscapeUtils.escapeSql(vo.getTxtCountryCode()).trim());

			    if(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getTxtStateCode())).trim().equalsIgnoreCase(""))
				   insertPrepStmtObject1.addNull();
				   else
			     insertPrepStmtObject1.addString(StringEscapeUtils.escapeSql(vo.getTxtStateCode()).trim());

			   if(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getTxtDistCode())).trim().equalsIgnoreCase(""))
		          insertPrepStmtObject1.addNull();
			    else
				  insertPrepStmtObject1.addString(StringEscapeUtils.escapeSql(vo.getTxtDistCode()).trim());


			  if(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getPincode())).trim().equalsIgnoreCase(""))
				 insertPrepStmtObject1.addNull();
				 else
		        insertPrepStmtObject1.addString(StringEscapeUtils.escapeSql(vo.getPincode()).trim());


				 insertPrepStmtObject1.setSql(bufInsUpdSql1.toString());


	             logger.info("IN Deal Buyer() insert query1 ### "+insertPrepStmtObject1.printQuery());

	                qryList.add(insertPrepStmtObject1);
	               
	               status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
	               logger.info("In savebuyer......................"+status); 
		 		   }catch(Exception e){
		 		   e.printStackTrace();
			       }
		 		   finally
		 		   {
		 			  bufInsUpdSql=null;
		 			 bufInsUpdSql1=null;
		 		   }
		      	return status;

		}
	    
	    
	    public ArrayList<Object> getBuyerDetailsAll(String bptype,String bRelation,String id)
		{
		   BuyerVo vo=null;
		   logger.info("bptype"+bptype);
    	   logger.info("id"+id);
    	   logger.info("Business Relation"+bRelation);

    	   ArrayList<Object> list=new ArrayList<Object>();
	       try
	       {
	    	  //String query ="SELECT c.DEAL_BUYER_SUPPLIER_ID,c.DEAL_BUYER_SUPPLIER_RELATION,c.DEAL_BUYER_SUPPLIER_NAME,c.DEAL_BUYER_SUPPLIER_MONTLY_SALES,c.DEAL_BUYER_SUPPLIER_PAYMENT_TERM,c.DEAL_BUYER_SUPPLIER_PRODUCT_TYPE,c.DEAL_BUYER_SUPPLIER_VINTAGE,e.DISTRICT_DESC from cr_deal_buyer_supplier_dtl c left join cr_deal_address_m d on c.DEAL_ID=d.BPID left join com_district_m e on d.DISTRICT=e.DISTRICT_ID where d.BPTYPE='"+bptype+"' and DEAL_ID="+id;
               
	    	   StringBuilder query=new StringBuilder();
	    	    query.append("SELECT c.DEAL_BUYER_SUPPLIER_ID,");
	    	    query.append("case when c.DEAL_BUYER_SUPPLIER_RELATION='B' then 'Buyer' else '' end as DEAL_BUYER_SUPPLIER_RELATION ,c.DEAL_BUYER_SUPPLIER_NAME,c.DEAL_BUYER_SUPPLIER_MONTLY_SALES,c.DEAL_BUYER_SUPPLIER_PAYMENT_TERM,c.DEAL_BUYER_SUPPLIER_PRODUCT_TYPE,c.DEAL_BUYER_SUPPLIER_VINTAGE from cr_deal_buyer_supplier_dtl c where DEAL_BUYER_SUPPLIER_RELATION='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(bRelation)).trim()+"' and DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim());
	    	   logger.info("query"+query.toString());

               ArrayList bdetails = ConnectionDAO.sqlSelect(query.toString());
	    	    logger.info("getBuyerDetailsAll: "+bdetails.size());
	    	    
	    	    query=null;
	    	    
	    	    for(int i=0;i<bdetails.size();i++)
	    	    {
	    	    	logger.info("getBuyerDetailsAll"+bdetails.get(i).toString());
	    	    	ArrayList bdetails1=(ArrayList)bdetails.get(i);
	    	    	if(bdetails1.size()>0)
	    			{
	    	    	   vo =  new BuyerVo();
	    	    		vo.setPrimaryId((CommonFunction.checkNull(bdetails1.get(0))).trim());
	    	    		vo.setBusinessRelationship((CommonFunction.checkNull(bdetails1.get(1))).trim());
	    	    		vo.setBusinessPartnerName((CommonFunction.checkNull(bdetails1.get(2))).trim());
	    	    		
	    	    		if(!CommonFunction.checkNull(bdetails1.get(3)).equalsIgnoreCase(""))
	    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(3))).trim());
	    	    		vo.setAveragePurchaseSales(myFormatter.format(reconNum));
	    	    		}
	    	    		
	    	    		vo.setPaymentTerms((CommonFunction.checkNull(bdetails1.get(4))).trim());
	    	    		vo.setProductType((CommonFunction.checkNull(bdetails1.get(5))).trim());
	    	    		vo.setVintageOfRelationship((CommonFunction.checkNull(bdetails1.get(6))).trim());
	    	    		//vo.setDist(CommonFunction.checkNull(bdetails1.get(7)).toString());
	    			}

	    			list.add(vo);
	    		}
	    		}catch(Exception e){
	    			e.printStackTrace();
	    		}
	    		logger.info("Value of List is in dao is="+list);
	    		return list;

	    	}

	    public ArrayList<Object> modifyBuyerDetailsAll(String bptype,String addrId)
			{
				  logger.info("Value of Address ID in modify is ="+addrId);
				   BuyerVo vo=new BuyerVo();
				   ArrayList<Object> list=new ArrayList<Object>();
		       try
		       {
//			       String query ="SELECT c.DEAL_BUYER_SUPPLIER_ID,c.DEAL_BUYER_SUPPLIER_RELATION,c.DEAL_BUYER_SUPPLIER_TYPE,c.DEAL_BUYER_SUPPLIER_NAME,DEAL_BUYER_SUPPLIER_CONTACT,c.DEAL_BUYER_SUPPLIER_DESIGNATION," +
//			       		         "c.DEAL_BUYER_SUPPLIER_MOBILE,c.DEAL_BUYER_SUPPLIER_EMAIL,c.DEAL_BUYER_SUPPLIER_MONTLY_SALES,c.DEAL_BUYER_SUPPLIER_PAYMENT_TERM,c.DEAL_BUYER_SUPPLIER_PRODUCT_TYPE,c.DEAL_BUYER_SUPPLIER_VINTAGE," +
//			       		         "d.ADDRESS_TYPE,d.BPTYPE,d.BPID,d.ADDRESS_LINE1,d.COUNTRY,d.STATE,d.PINCODE,e.DISTRICT_DESC from cr_deal_buyer_supplier_dtl c left join cr_deal_address_m d on c.DEAL_ID=d.BPID left join com_district_m e on d.DISTRICT=e.DISTRICT_ID where d.BPTYPE='"+bptype+"' and c.DEAL_BUYER_SUPPLIER_ID='"+addrId+"'";
//
		    	   StringBuilder query=new StringBuilder();
			        query.append("Select distinct c.DEAL_BUYER_SUPPLIER_ID,c.DEAL_BUYER_SUPPLIER_RELATION,c.DEAL_BUYER_SUPPLIER_NAME," +
			       		" DEAL_BUYER_SUPPLIER_CONTACT,c.DEAL_BUYER_SUPPLIER_DESIGNATION,c.DEAL_BUYER_SUPPLIER_MOBILE,c.DEAL_BUYER_SUPPLIER_EMAIL," +
			       		" c.DEAL_BUYER_SUPPLIER_MONTLY_SALES,c.DEAL_BUYER_SUPPLIER_PAYMENT_TERM,c.DEAL_BUYER_SUPPLIER_PRODUCT_TYPE," +
			       		" c.DEAL_BUYER_SUPPLIER_VINTAGE,c.DEAL_BUYER_SUPPLIER_ADDRESS,c.DEAL_BUYER_SUPPLIER_PINCODE," +
			       		" c.DEAL_BUYER_SUPPLIER_TYPE,c.DEAL_BUYER_SUPPLIER_ADDRESS_TYPE,c.DEAL_BUYER_SUPPLIER_COUNTRY,c.DEAL_BUYER_SUPPLIER_STATE,c.DEAL_BUYER_SUPPLIER_DISTRICT,c.ADDRESS_LINE_2,c.ADDRESS_LINE_3,c.TAHSIL from cr_deal_buyer_supplier_dtl c " +
			       		" where c.DEAL_BUYER_SUPPLIER_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(addrId)).trim()+"'");
	       	       logger.info("modifyBuyerDetailsAll fetch data:"+query.toString());
			       ArrayList bdetails = ConnectionDAO.sqlSelect(query.toString());
			       logger.info("modifyBuyerDetailsAll"+bdetails.size());
			       
			       query=null;
			       
			       for(int i=0;i<bdetails.size();i++)
			       {
     	    	    	//logger.info("getBuyerDetailsAll"+bdetails.get(i).toString());
     	    	    	ArrayList bdetails1=(ArrayList)bdetails.get(i);
     	    	    	for(int k=0;k<bdetails1.size();k++)
     	    			{
			     	    	//logger.info("getBuyerDetailsAll"+bdetails1.get(k).toString());
		    	    		vo.setPrimaryId((CommonFunction.checkNull(bdetails1.get(0))).trim());
		    	    		vo.setBusinessRelationship((CommonFunction.checkNull(bdetails1.get(1))).trim());
		    	    		//vo.setBusinessPartnerType((CommonFunction.checkNull(bdetails1.get(2))).trim());
		    	    		vo.setBusinessPartnerName((CommonFunction.checkNull(bdetails1.get(2))).trim());
		    	    		vo.setContactPerson((CommonFunction.checkNull(bdetails1.get(3))).trim());
		    	    		vo.setDesignation((CommonFunction.checkNull(bdetails1.get(4))).trim());
		    	    		vo.setMobile((CommonFunction.checkNull(bdetails1.get(5))).trim());
		    	    		vo.setEmail((CommonFunction.checkNull(bdetails1.get(6))).trim());

		    	    		if(!CommonFunction.checkNull(bdetails1.get(7)).equalsIgnoreCase(""))
		    	    		{
			    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(7))).trim());  
			    	    		vo.setAveragePurchaseSales(myFormatter.format(reconNum));
		    	    		}

		    	    		vo.setPaymentTerms((CommonFunction.checkNull(bdetails1.get(8))).trim());
		    	    		vo.setProductType((CommonFunction.checkNull(bdetails1.get(9))).trim());
		    	    		vo.setVintageOfRelationship((CommonFunction.checkNull(bdetails1.get(10))).trim());
		    	    		
		    	    		
		    	    		vo.setAddressLine1((CommonFunction.checkNull(bdetails1.get(11))).trim());
		    	    		vo.setPincode((CommonFunction.checkNull(bdetails1.get(12))).trim());
		    	    		logger.info("Address Type: "+bdetails1.get(14));
		    	    		vo.setBpType((CommonFunction.checkNull(bdetails1.get(13))).trim());
		    	    		//vo.setBpId((CommonFunction.checkNull(bdetails1.get(14))).trim());
		    	    		vo.setAddress((CommonFunction.checkNull(bdetails1.get(14))).trim());
		    	    		
		    	    		//vo.setCountry((CommonFunction.checkNull(bdetails1.get(16))).trim());
		    	    		//vo.setState((CommonFunction.checkNull(bdetails1.get(17))).trim());
		    	    		//vo.setPincode((CommonFunction.checkNull(bdetails1.get(18))).trim());
		    	    		//vo.setDist((CommonFunction.checkNull(bdetails1.get(19))).trim());
		    	    		//vo.sethBuyerSupplierBPType((CommonFunction.checkNull(bdetails1.get(20))).trim());
		    	    		//vo.sethBuyerSupplierAddress((CommonFunction.checkNull(bdetails1.get(21))).trim());
		    	    		vo.setTxtCountryCode((CommonFunction.checkNull(bdetails1.get(15))).trim());
		    	    		vo.setTxtStateCode((CommonFunction.checkNull(bdetails1.get(16))).trim());
		    	    		vo.setTxtDistCode((CommonFunction.checkNull(bdetails1.get(17))).trim());
		    	    		vo.setAddressLine2((CommonFunction.checkNull(bdetails1.get(18))).trim());
		    	    		vo.setAddressLine3((CommonFunction.checkNull(bdetails1.get(19))).trim());
		    	    		vo.setTxtTahsil((CommonFunction.checkNull(bdetails1.get(20))).trim());

		    			}

		    			list.add(vo);
		    		}
		    		}catch(Exception e){
		    			e.printStackTrace();
		    		}
		    		logger.info("Value of List is in dao is..................="+list);
		    		return list;

		    	}
			
			
		public boolean updateBuyerDetailsAll(Object ob,String bptype, String id){
			logger.info("Value of Address ID in Updation  is ="+id);
			BuyerVo vo = (BuyerVo)ob;
			boolean status = false;
			StringBuffer bufInsUpdSql = new StringBuffer();
			qryList = new ArrayList();
		//	StringBuffer bufInsUpdSql1 = new StringBuffer();
			try 
			{
				 bufInsUpdSql.append(" UPDATE cr_deal_buyer_supplier_dtl");
				 bufInsUpdSql.append(" SET DEAL_BUYER_SUPPLIER_TYPE =?,DEAL_BUYER_SUPPLIER_RELATION =?," +
				 		               "DEAL_BUYER_SUPPLIER_NAME =?,DEAL_BUYER_SUPPLIER_CONTACT =?," +
				 		               "DEAL_BUYER_SUPPLIER_DESIGNATION =?,DEAL_BUYER_SUPPLIER_MOBILE =?,DEAL_BUYER_SUPPLIER_EMAIL =?," +
				 		               "DEAL_BUYER_SUPPLIER_MONTLY_SALES =?,DEAL_BUYER_SUPPLIER_PAYMENT_TERM =?,DEAL_BUYER_SUPPLIER_PRODUCT_TYPE =?," +
				 		               "DEAL_BUYER_SUPPLIER_VINTAGE =?,DEAL_BUYER_SUPPLIER_ADDRESS_TYPE=?,DEAL_BUYER_SUPPLIER_ADDRESS=?," +
				 		               "DEAL_BUYER_SUPPLIER_COUNTRY=?,DEAL_BUYER_SUPPLIER_STATE=?,DEAL_BUYER_SUPPLIER_DISTRICT=?," +
				 		               "DEAL_BUYER_SUPPLIER_PINCODE=?,MAKER_ID=?,MAKER_DATE=" );
				// bufInsUpdSql.append("DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND)");
				bufInsUpdSql.append(dbo);
				bufInsUpdSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ");
				bufInsUpdSql.append(" ,ADDRESS_LINE_2=?,ADDRESS_LINE_3=?,TAHSIL=?");
				 bufInsUpdSql.append(" WHERE DEAL_BUYER_SUPPLIER_ID=?");
				 PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
				 
				 insertPrepStmtObject.addString("B");
				 
				 insertPrepStmtObject.addString("B");
				 
				 if((CommonFunction.checkNull(vo.getBusinessPartnerName())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((vo.getBusinessPartnerName()).trim());
				 
				 if((CommonFunction.checkNull(vo.getContactPerson())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((vo.getContactPerson()).trim());
				 
				 if((CommonFunction.checkNull(vo.getDesignation())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((vo.getDesignation()).trim());
				 
				 if((CommonFunction.checkNull(vo.getMobile())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((vo.getMobile()).trim());
				 
				 if((CommonFunction.checkNull(vo.getEmail())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((vo.getEmail()).trim());
				 
				 if((CommonFunction.checkNull(vo.getAveragePurchaseSales().trim()).toString()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(myFormatter.parse((vo.getAveragePurchaseSales()).trim()).toString());
				 
				 logger.info("vo.getAveragePurchaseSales(): "+vo.getAveragePurchaseSales());
				  logger.info("myFormatter.parse((vo.getAveragePurchaseSales().trim())).toString(): "+myFormatter.parse((vo.getAveragePurchaseSales().trim())).toString());
				 
				 if((CommonFunction.checkNull(vo.getPaymentTerms())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((vo.getPaymentTerms()).trim());
				 
				 if((CommonFunction.checkNull(vo.getProductType()).trim()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((vo.getProductType()).trim());
				 
				 if((CommonFunction.checkNull(vo.getVintageOfRelationship()).trim()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((vo.getVintageOfRelationship()).trim());
				 
				  if((CommonFunction.checkNull(vo.getAddress())).trim().equalsIgnoreCase(""))
					  insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString((vo.getAddress()).trim());
				     
				     if((CommonFunction.checkNull(vo.getAddressLine1())).trim().equalsIgnoreCase(""))
				    	 insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString((vo.getAddressLine1()).trim());
				     
				     if((CommonFunction.checkNull(vo.getTxtCountryCode())).trim().equalsIgnoreCase(""))
				    	 insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString((vo.getTxtCountryCode()).trim());
				     
				     if((CommonFunction.checkNull(vo.getTxtStateCode())).trim().equalsIgnoreCase(""))
				    	 insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString((vo.getTxtStateCode()).trim());
				     
				     if((CommonFunction.checkNull(vo.getTxtDistCode())).trim().equalsIgnoreCase(""))
				    	 insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString((vo.getTxtDistCode()).trim());
				     
				     if((CommonFunction.checkNull(vo.getPincode())).trim().equalsIgnoreCase(""))
				    	 insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString((vo.getPincode()).trim());
				   //------------------------------------------
						if(CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString((vo.getUserId()).trim());
						
						if(CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString((vo.getMakerDate()).trim());
						//------------------------------------------
						if((CommonFunction.checkNull(vo.getAddressLine2())).trim().equalsIgnoreCase(""))
					    	 insertPrepStmtObject.addNull();
							else
								insertPrepStmtObject.addString((vo.getAddressLine2()).trim()); 
						if((CommonFunction.checkNull(vo.getAddressLine3())).trim().equalsIgnoreCase(""))
					    	 insertPrepStmtObject.addNull();
							else
								insertPrepStmtObject.addString((vo.getAddressLine3()).trim()); 
						if((CommonFunction.checkNull(vo.getTxtTahsil())).trim().equalsIgnoreCase(""))
					    	 insertPrepStmtObject.addNull();
							else
								insertPrepStmtObject.addString((vo.getTxtTahsil()).trim());  
			 
				 if((CommonFunction.checkNull(id).trim()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((id).trim());
				 insertPrepStmtObject.setSql(bufInsUpdSql.toString());
				 logger.info("IN Deal Buyer() UPDATE query1 ### "+insertPrepStmtObject.printQuery());
				 qryList.add(insertPrepStmtObject);
//			     logger.info("IN Deal Buyer() UPDATE query1 ### "+bufInsUpdSql);
//			     qryList.add(bufInsUpdSql);
				 
			     bufInsUpdSql1.append(" UPDATE cr_deal_address_m");
			     bufInsUpdSql1.append(" SET ADDRESS_TYPE =?,ADDRESS_LINE1 =?,COUNTRY =?,STATE =?,DISTRICT =?,PINCODE =?");
			     bufInsUpdSql1.append(" WHERE BPTYPE=? and BPID=?");
			     PrepStmtObject insertPrepStmtObject2 = new PrepStmtObject();
			     
			     if(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.gethBuyerSupplierAddress())).trim().equalsIgnoreCase(""))
			    	 insertPrepStmtObject2.addNull();
					else
						insertPrepStmtObject2.addString(StringEscapeUtils.escapeSql(vo.gethBuyerSupplierAddress()).trim());
			     
			     if(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAddressLine1())).trim().equalsIgnoreCase(""))
			    	 insertPrepStmtObject2.addNull();
					else
						insertPrepStmtObject2.addString(StringEscapeUtils.escapeSql(vo.getAddressLine1()).trim());
			     
			     if(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getTxtCountryCode())).trim().equalsIgnoreCase(""))
			    	 insertPrepStmtObject2.addNull();
					else
						insertPrepStmtObject2.addString(StringEscapeUtils.escapeSql(vo.getTxtCountryCode()).trim());
			     
			     if(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getTxtCountryCode())).trim().equalsIgnoreCase(""))
			    	 insertPrepStmtObject2.addNull();
					else
						insertPrepStmtObject2.addString(StringEscapeUtils.escapeSql(vo.getTxtCountryCode()).trim());
			     
			     if(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getTxtDistCode())).trim().equalsIgnoreCase(""))
			    	 insertPrepStmtObject2.addNull();
					else
						insertPrepStmtObject2.addString(StringEscapeUtils.escapeSql(vo.getTxtDistCode()).trim());
			     
			     if(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getPincode())).trim().equalsIgnoreCase(""))
			    	 insertPrepStmtObject2.addNull();
					else
						insertPrepStmtObject2.addString(StringEscapeUtils.escapeSql(vo.getPincode()).trim());
			     
			     insertPrepStmtObject2.addString("B");
			     
			     if(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getBpId())).trim().equalsIgnoreCase(""))
			    	 insertPrepStmtObject2.addNull();
					else
						insertPrepStmtObject2.addString(StringEscapeUtils.escapeSql(vo.getBpId()).trim());
			     
			     insertPrepStmtObject2.setSql(bufInsUpdSql1.toString());
				 logger.info("IN Deal Buyer() update cr_deal_address_m query1 ### "+insertPrepStmtObject2.printQuery());
				 qryList.add(insertPrepStmtObject2);
//	             logger.info("IN Deal Buyer() update cr_deal_address_m query1 ### "+bufInsUpdSql1);
//	             qryList.add(bufInsUpdSql1);
 
 
	             status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
	             logger.info("In savebuyer......................"+status);
		 	}catch(Exception e){
		 		   e.printStackTrace();
			      }
		 	finally
		 	{
		 		bufInsUpdSql=null;
		 		//bufInsUpdSql1=null;
		 	}
		 	return status;
		 	}
			
			
		 public boolean deleteBuyerDetails(String[] id,String bptype)
		    {
		    	logger.info("BPStatus for buyer..............................................................."+bptype);
				boolean status = false;
		    	try
		    	{
		    	qryList = new ArrayList();
		    	bufInsUpdSql = new StringBuffer();
			
				for(int k=0;k<id.length;k++)
				{
					 StringBuilder query=new StringBuilder();
					 query.append("Delete from cr_deal_buyer_supplier_dtl where DEAL_BUYER_SUPPLIER_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()+"'");
					 logger.info("IN.....deleteBuyerDetails "+query.toString());
					qryList.add(query);
					query=null;
				}
				
                logger.info("delete query: "+qryList.get(0));
                
				status=ConnectionDAO.sqlInsUpdDelete(qryList);
				logger.info("Status of Deletion is ="+status);
			    }
		    	catch(Exception e)
		    	{
				e.printStackTrace();
			}

			return status;
		}


			 public boolean saveSupplierDetails(Object ob) {
				 BuyerVo vo = (BuyerVo)ob;
					
					logger.info("saveSupplierDetails vo.getUserId(): "+vo.getUserId());
					boolean status = false;
					StringBuffer bufInsUpdSql = new StringBuffer();
					qryList = new ArrayList();
					qryListB = new ArrayList();
					PrepStmtObject  insertPrepStmtObject =  new PrepStmtObject();
				
					PrepStmtObject  insertPrepStmtObject1 =  new PrepStmtObject ();
					try {

					bufInsUpdSql.append("insert into cr_deal_buyer_supplier_dtl(DEAL_ID,DEAL_BUYER_SUPPLIER_RELATION,DEAL_BUYER_SUPPLIER_TYPE,DEAL_BUYER_SUPPLIER_NAME," +
								" DEAL_BUYER_SUPPLIER_CONTACT,DEAL_BUYER_SUPPLIER_DESIGNATION,DEAL_BUYER_SUPPLIER_MOBILE,DEAL_BUYER_SUPPLIER_EMAIL,DEAL_BUYER_SUPPLIER_MONTLY_SALES,DEAL_BUYER_SUPPLIER_PAYMENT_TERM," +
								" DEAL_BUYER_SUPPLIER_PRODUCT_TYPE,DEAL_BUYER_SUPPLIER_VINTAGE,DEAL_BUYER_SUPPLIER_ADDRESS_TYPE,DEAL_BUYER_SUPPLIER_ADDRESS,DEAL_BUYER_SUPPLIER_COUNTRY,DEAL_BUYER_SUPPLIER_STATE,DEAL_BUYER_SUPPLIER_DISTRICT,DEAL_BUYER_SUPPLIER_PINCODE,REC_STATUS,MAKER_ID,MAKER_DATE,ADDRESS_LINE_2,ADDRESS_LINE_3,TAHSIL)");
						  bufInsUpdSql.append(" values( ");
						  bufInsUpdSql.append(" ?," );//DEAL_ID
					      bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_RELATION
					      bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_TYPE
						  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_NAME
						  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_CONTACT
						  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_DESIGNATION
						  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_MOBILE
						  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_EMAIL
						  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_MONTLY_SALES
						  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_PAYMENT_TERM
						  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_PRODUCT_TYPE
						  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_VINTAGE
						  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_ADDRESS_TYPE
						  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_ADDRESS
						  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_COUNTRY
						  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_STATE
						  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_DISTRICT
						  bufInsUpdSql.append(" ?," );//DEAL_BUYER_SUPPLIER_PINCODE
						  bufInsUpdSql.append(" 'P'," );								//REC_STATUS
						  bufInsUpdSql.append(" ?," );//MAKER_ID
					      //bufInsUpdSql.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND))");//MAKER_DATE
					     bufInsUpdSql.append(dbo);
					     bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ");//MAKER_DATE
					     bufInsUpdSql.append(" ,?" );//Address Line 2
					      bufInsUpdSql.append(" ,?" );//Address Line 3
					      bufInsUpdSql.append(" ,?)" );//TAHSIL
					      if(CommonFunction.checkNull((vo.getDealId()).trim()).equalsIgnoreCase(""))
				              insertPrepStmtObject.addNull();
				              else
				              insertPrepStmtObject.addString((vo.getDealId().trim()));
						 
						 
						
						      insertPrepStmtObject.addString("S");


						 
						      insertPrepStmtObject.addString("S");
						      
						 
						  if(CommonFunction.checkNull((vo.getBusinessPartnerName()).trim()).equalsIgnoreCase(""))
						      insertPrepStmtObject.addNull();
						      else
						      insertPrepStmtObject.addString((vo.getBusinessPartnerName().trim()));


						  if(CommonFunction.checkNull((vo.getContactPerson()).trim()).equalsIgnoreCase(""))
						      insertPrepStmtObject.addNull();
						      else
						      insertPrepStmtObject.addString((vo.getContactPerson().trim()));


					  if(CommonFunction.checkNull((vo.getDesignation()).trim()).equalsIgnoreCase(""))
							  insertPrepStmtObject.addNull();
							  else
							  insertPrepStmtObject.addString((vo.getDesignation().trim()));


						  if(CommonFunction.checkNull((vo.getMobile()).trim()).equalsIgnoreCase(""))
							  insertPrepStmtObject.addNull();
							  else
							  insertPrepStmtObject.addString((vo.getMobile().trim()));


						  if(CommonFunction.checkNull((vo.getEmail()).trim()).equalsIgnoreCase(""))
							  insertPrepStmtObject.addNull();
							  else
							  insertPrepStmtObject.addString((vo.getEmail().trim()));


						  if(CommonFunction.checkNull((vo.getAveragePurchaseSales()).trim()).equalsIgnoreCase(""))
							  insertPrepStmtObject.addNull();
							  else
							  insertPrepStmtObject.addString(myFormatter.parse((vo.getAveragePurchaseSales().trim())).toString());

						  logger.info("vo.getAveragePurchaseSales(): "+vo.getAveragePurchaseSales());
						  logger.info("myFormatter.parse((vo.getAveragePurchaseSales().trim())).toString(): "+myFormatter.parse((vo.getAveragePurchaseSales().trim())).toString());
						  if(CommonFunction.checkNull((vo.getPaymentTerms()).trim()).equalsIgnoreCase(""))
							  insertPrepStmtObject.addNull();
						  else
						  insertPrepStmtObject.addString((vo.getPaymentTerms().trim()));


						  if(CommonFunction.checkNull((vo.getProductType()).trim()).equalsIgnoreCase(""))
							   insertPrepStmtObject.addNull();
							   else
							   insertPrepStmtObject.addString((vo.getProductType().trim()));


						  if(CommonFunction.checkNull((vo.getVintageOfRelationship()).trim()).equalsIgnoreCase(""))
						   insertPrepStmtObject.addNull();
							   else
							   insertPrepStmtObject.addString((vo.getVintageOfRelationship().trim()));
						  
						  
						  if((CommonFunction.checkNull(vo.getAddress())).trim().equalsIgnoreCase(""))
							  insertPrepStmtObject.addNull();
						      else
						    	  insertPrepStmtObject.addString((vo.getAddress()).trim());
						  
						  
						  if((CommonFunction.checkNull(vo.getAddressLine1())).trim().equalsIgnoreCase(""))
							  insertPrepStmtObject.addNull();
							   else
								   insertPrepStmtObject.addString((vo.getAddressLine1()).trim());


							if((CommonFunction.checkNull(vo.getTxtCountryCode())).trim().equalsIgnoreCase(""))
								insertPrepStmtObject.addNull();
						       else
						    	   insertPrepStmtObject.addString((vo.getTxtCountryCode()).trim());

						    if((CommonFunction.checkNull(vo.getTxtStateCode())).trim().equalsIgnoreCase(""))
						    	insertPrepStmtObject.addNull();
							   else
								   insertPrepStmtObject.addString((vo.getTxtStateCode()).trim());

						   if((CommonFunction.checkNull(vo.getTxtDistCode())).trim().equalsIgnoreCase(""))
							   insertPrepStmtObject.addNull();
						    else
						    	insertPrepStmtObject.addString((vo.getTxtDistCode()).trim());


						  if((CommonFunction.checkNull(vo.getPincode())).trim().equalsIgnoreCase(""))
							  insertPrepStmtObject.addNull();
							 else
								 insertPrepStmtObject.addString((vo.getPincode()).trim());



						  if(CommonFunction.checkNull((vo.getUserId())).equalsIgnoreCase(""))
								 insertPrepStmtObject.addNull();
								 else
						        insertPrepStmtObject.addString((vo.getUserId()));

						  if(CommonFunction.checkNull((vo.getMakerDate())).equalsIgnoreCase(""))
								 insertPrepStmtObject.addNull();
								 else
						        insertPrepStmtObject.addString((vo.getMakerDate()));

						  if((CommonFunction.checkNull(vo.getAddressLine2())).trim().equalsIgnoreCase(""))
							  insertPrepStmtObject.addNull();
							   else
								   insertPrepStmtObject.addString((vo.getAddressLine2()).trim());
						  if((CommonFunction.checkNull(vo.getAddressLine3())).trim().equalsIgnoreCase(""))
							  insertPrepStmtObject.addNull();
							   else
								   insertPrepStmtObject.addString((vo.getAddressLine3()).trim());
						  if((CommonFunction.checkNull(vo.getTxtTahsil())).trim().equalsIgnoreCase(""))
							  insertPrepStmtObject.addNull();
							   else
								   insertPrepStmtObject.addString((vo.getTxtTahsil()).trim());
							   insertPrepStmtObject.setSql(bufInsUpdSql.toString());

					        logger.info("IN Deal saveSupplierDetails() insert query1 ### "+insertPrepStmtObject.printQuery());
					        qryListB.add(insertPrepStmtObject);
					        status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryListB);
					        logger.info("In cr deal buyer supplier dtl tables......................"+status);
				        
					}catch(Exception e){
				 		   e.printStackTrace();
					       }
				 		   finally
				 		   {
				 			  bufInsUpdSql=null;
						 	//	bufInsUpdSql1=null;
				 		   }
				      	return status;

				}


			 public ArrayList<Object> getSupplierDetailsAll(String bptype1,String sRelation,String id)
			    {
		            BuyerVo vo = null;
			    	ArrayList<Object> list=new ArrayList<Object>();
				       try
				       {
				    	   logger.info("bptype1"+bptype1);
				    	   logger.info("id"+id);

					        StringBuilder query=new StringBuilder();
				    	    query.append("SELECT c.DEAL_BUYER_SUPPLIER_ID," +
				    	    	//	"if(c.DEAL_BUYER_SUPPLIER_RELATION='S','Supplier','') as DEAL_BUYER_SUPPLIER_RELATION" +
				    	    		"case when c.DEAL_BUYER_SUPPLIER_RELATION='S' then 'Supplier' else '' end as DEAL_BUYER_SUPPLIER_RELATION,c.DEAL_BUYER_SUPPLIER_NAME,c.DEAL_BUYER_SUPPLIER_MONTLY_SALES,c.DEAL_BUYER_SUPPLIER_PAYMENT_TERM,c.DEAL_BUYER_SUPPLIER_PRODUCT_TYPE,c.DEAL_BUYER_SUPPLIER_VINTAGE from cr_deal_buyer_supplier_dtl c where DEAL_BUYER_SUPPLIER_RELATION='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(sRelation)).trim()+"' and DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim());
				    	    logger.info("BPStatus for Supplier..............................................................."+bptype1);
				    	    logger.info("In......getSupplierDetailsAll  :   "+query.toString());
				    	    ArrayList bdetails = ConnectionDAO.sqlSelect(query.toString());
				    	    logger.info("getSupplierDetailsAll  :  "+bdetails.size());
				    	    
				    	    query=null;
				    	    
				    	    for(int i=0;i<bdetails.size();i++)
				    	    {
				    	    	logger.info("getSupplierDetailsAll"+bdetails.get(i).toString());
				    	    	ArrayList bdetails1=(ArrayList)bdetails.get(i);
				    	    	if(bdetails1.size()>0)
				    			{
				    	    	   vo =  new BuyerVo();
				    	    		vo.setPrimaryId((CommonFunction.checkNull(bdetails1.get(0))).trim());
				    	    		vo.setBusinessRelationship((CommonFunction.checkNull(bdetails1.get(1))).trim());
				    	    		vo.setBusinessPartnerName((CommonFunction.checkNull(bdetails1.get(2))).trim());

				    	    		if(!CommonFunction.checkNull(bdetails1.get(3)).equalsIgnoreCase(""))
				    	    		{
				    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(3))).trim());  
					    	    		vo.setAveragePurchaseSales(myFormatter.format(reconNum));
				    	    		}
				    	    		
				    	    		
				    	    		
				    	    		
				    	    		vo.setPaymentTerms((CommonFunction.checkNull(bdetails1.get(4))).trim());
				    	    		vo.setProductType((CommonFunction.checkNull(bdetails1.get(5))).trim());
				    	    		vo.setVintageOfRelationship((CommonFunction.checkNull(bdetails1.get(6))).trim());
//				    	    		vo.setDist(CommonFunction.checkNull(bdetails1.get(7)).toString());

				    			}

				    			list.add(vo);
				    		}
				    		}catch(Exception e){
				    			e.printStackTrace();
				    		}

				    		return list;

				    	}
			
			 public ArrayList<Object> modifySupplierDetailsAll(String bptype1,String addrId)
				{
				 logger.info("Value of Address ID in modify is ="+addrId);
				   BuyerVo vo=new BuyerVo();
				   ArrayList<Object> list=new ArrayList<Object>();
		       try
		       {

		    	   StringBuilder query=new StringBuilder();
			        query.append("Select distinct c.DEAL_BUYER_SUPPLIER_ID,c.DEAL_BUYER_SUPPLIER_RELATION,c.DEAL_BUYER_SUPPLIER_NAME," +
			       		" DEAL_BUYER_SUPPLIER_CONTACT,c.DEAL_BUYER_SUPPLIER_DESIGNATION,c.DEAL_BUYER_SUPPLIER_MOBILE,c.DEAL_BUYER_SUPPLIER_EMAIL," +
			       		" c.DEAL_BUYER_SUPPLIER_MONTLY_SALES,c.DEAL_BUYER_SUPPLIER_PAYMENT_TERM,c.DEAL_BUYER_SUPPLIER_PRODUCT_TYPE," +
			       		" c.DEAL_BUYER_SUPPLIER_VINTAGE,c.DEAL_BUYER_SUPPLIER_ADDRESS,c.DEAL_BUYER_SUPPLIER_PINCODE," +
			       		" c.DEAL_BUYER_SUPPLIER_TYPE,c.DEAL_BUYER_SUPPLIER_ADDRESS_TYPE,c.DEAL_BUYER_SUPPLIER_COUNTRY,c.DEAL_BUYER_SUPPLIER_STATE,c.DEAL_BUYER_SUPPLIER_DISTRICT,c.ADDRESS_LINE_2,c.ADDRESS_LINE_3,c.TAHSIL  from cr_deal_buyer_supplier_dtl c " +
			       		" where c.DEAL_BUYER_SUPPLIER_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(addrId)).trim()+"'");
	       	       logger.info("modifyBuyerDetailsAll fetch data:"+query.toString());
			       ArrayList bdetails = ConnectionDAO.sqlSelect(query.toString());
			       logger.info("modifyBuyerDetailsAll"+bdetails.size());
			       
			       query=null;
			       
			       for(int i=0;i<bdetails.size();i++)
			       {
   	    	    	//logger.info("getBuyerDetailsAll"+bdetails.get(i).toString());
   	    	    	ArrayList bdetails1=(ArrayList)bdetails.get(i);
   	    	    	for(int k=0;k<bdetails1.size();k++)
   	    			{
			     	    	//logger.info("getBuyerDetailsAll"+bdetails1.get(k).toString());
		    	    		vo.setPrimaryId((CommonFunction.checkNull(bdetails1.get(0))).trim());
		    	    		vo.setBusinessRelationship((CommonFunction.checkNull(bdetails1.get(1))).trim());
		    	    		//vo.setBusinessPartnerType((CommonFunction.checkNull(bdetails1.get(2))).trim());
		    	    		vo.setBusinessPartnerName((CommonFunction.checkNull(bdetails1.get(2))).trim());
		    	    		vo.setContactPerson((CommonFunction.checkNull(bdetails1.get(3))).trim());
		    	    		vo.setDesignation((CommonFunction.checkNull(bdetails1.get(4))).trim());
		    	    		vo.setMobile((CommonFunction.checkNull(bdetails1.get(5))).trim());
		    	    		vo.setEmail((CommonFunction.checkNull(bdetails1.get(6))).trim());

		    	    		if(!CommonFunction.checkNull(bdetails1.get(7)).equalsIgnoreCase(""))
		    	    		{
			    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(7))).trim());  
			    	    		vo.setAveragePurchaseSales(myFormatter.format(reconNum));
		    	    		}

		    	    		vo.setPaymentTerms((CommonFunction.checkNull(bdetails1.get(8))).trim());
		    	    		vo.setProductType((CommonFunction.checkNull(bdetails1.get(9))).trim());
		    	    		vo.setVintageOfRelationship((CommonFunction.checkNull(bdetails1.get(10))).trim());
		    	    		
		    	    		
		    	    		vo.setAddressLine1((CommonFunction.checkNull(bdetails1.get(11))).trim());
		    	    		vo.setPincode((CommonFunction.checkNull(bdetails1.get(12))).trim());
		    	    		logger.info("Address Type: "+bdetails1.get(14));
		    	    		vo.setBpType((CommonFunction.checkNull(bdetails1.get(13))).trim());
		    	    		//vo.setBpId((CommonFunction.checkNull(bdetails1.get(14))).trim());
		    	    		vo.setAddress((CommonFunction.checkNull(bdetails1.get(14))).trim());
		    	    		
		    	    		//vo.setCountry((CommonFunction.checkNull(bdetails1.get(16))).trim());
		    	    		//vo.setState((CommonFunction.checkNull(bdetails1.get(17))).trim());
		    	    		//vo.setPincode((CommonFunction.checkNull(bdetails1.get(18))).trim());
		    	    		//vo.setDist((CommonFunction.checkNull(bdetails1.get(19))).trim());
		    	    		//vo.sethBuyerSupplierBPType((CommonFunction.checkNull(bdetails1.get(20))).trim());
		    	    		//vo.sethBuyerSupplierAddress((CommonFunction.checkNull(bdetails1.get(21))).trim());
		    	    		vo.setTxtCountryCode((CommonFunction.checkNull(bdetails1.get(15))).trim());
		    	    		vo.setTxtStateCode((CommonFunction.checkNull(bdetails1.get(16))).trim());
		    	    		vo.setTxtDistCode((CommonFunction.checkNull(bdetails1.get(17))).trim());
		    	    		vo.setAddressLine2((CommonFunction.checkNull(bdetails1.get(18))).trim());		    	    		
		    	    		vo.setAddressLine3((CommonFunction.checkNull(bdetails1.get(19))).trim());
		    	    		vo.setTxtTahsil((CommonFunction.checkNull(bdetails1.get(20))).trim());

		    			}

		    			list.add(vo);
		    		}
		    		}catch(Exception e){
		    			e.printStackTrace();
		    		}
		    		logger.info("Value of List is in dao is..................="+list);
		    		return list;

			    	}

			 public boolean updateSupplierDetailsAll(Object ob,String bptype1, String primaryId)
		     {
				 logger.info("Value of Address ID in Updation  is ="+primaryId);
					BuyerVo vo = (BuyerVo)ob;
					logger.info("Value of Address ID in Updation  is ="+vo.getMakerDate());
					boolean status = false;
					StringBuffer bufInsUpdSql = new StringBuffer();
					qryList = new ArrayList();
					try 
					{
						 bufInsUpdSql.append(" UPDATE cr_deal_buyer_supplier_dtl");
						 bufInsUpdSql.append(" SET DEAL_BUYER_SUPPLIER_TYPE =?,DEAL_BUYER_SUPPLIER_RELATION =?," +
						 		               "DEAL_BUYER_SUPPLIER_NAME =?,DEAL_BUYER_SUPPLIER_CONTACT =?," +
						 		               "DEAL_BUYER_SUPPLIER_DESIGNATION =?,DEAL_BUYER_SUPPLIER_MOBILE =?,DEAL_BUYER_SUPPLIER_EMAIL =?," +
						 		               "DEAL_BUYER_SUPPLIER_MONTLY_SALES =?,DEAL_BUYER_SUPPLIER_PAYMENT_TERM =?,DEAL_BUYER_SUPPLIER_PRODUCT_TYPE =?," +
						 		               "DEAL_BUYER_SUPPLIER_VINTAGE =?,DEAL_BUYER_SUPPLIER_ADDRESS_TYPE=?,DEAL_BUYER_SUPPLIER_ADDRESS=?," +
						 		               "DEAL_BUYER_SUPPLIER_COUNTRY=?,DEAL_BUYER_SUPPLIER_STATE=?,DEAL_BUYER_SUPPLIER_DISTRICT=?," +
						 		               "DEAL_BUYER_SUPPLIER_PINCODE=?,MAKER_ID=?,MAKER_DATE=" );
						// bufInsUpdSql.append("	DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND)");
						 bufInsUpdSql.append(dbo);
						bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ");
						bufInsUpdSql.append("  ,ADDRESS_LINE_2=?,ADDRESS_LINE_3=?,TAHSIL=?");
						bufInsUpdSql.append(" WHERE DEAL_BUYER_SUPPLIER_ID=?");
						 PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
						 
						 insertPrepStmtObject.addString("S");
						 
						 insertPrepStmtObject.addString("S");
						 
						 if((CommonFunction.checkNull(vo.getBusinessPartnerName())).trim().equalsIgnoreCase(""))
								insertPrepStmtObject.addNull();
							else
								insertPrepStmtObject.addString((vo.getBusinessPartnerName()).trim());
						 
						 if((CommonFunction.checkNull(vo.getContactPerson())).trim().equalsIgnoreCase(""))
								insertPrepStmtObject.addNull();
							else
								insertPrepStmtObject.addString((vo.getContactPerson()).trim());
						 
						 if((CommonFunction.checkNull(vo.getDesignation())).trim().equalsIgnoreCase(""))
								insertPrepStmtObject.addNull();
							else
								insertPrepStmtObject.addString((vo.getDesignation()).trim());
						 
						 if((CommonFunction.checkNull(vo.getMobile())).trim().equalsIgnoreCase(""))
								insertPrepStmtObject.addNull();
							else
								insertPrepStmtObject.addString((vo.getMobile()).trim());
						 
						 if((CommonFunction.checkNull(vo.getEmail())).trim().equalsIgnoreCase(""))
								insertPrepStmtObject.addNull();
							else
								insertPrepStmtObject.addString((vo.getEmail()).trim());
						 
						 if((CommonFunction.checkNull(vo.getAveragePurchaseSales().trim()).toString()).equalsIgnoreCase(""))
								insertPrepStmtObject.addNull();
							else
								insertPrepStmtObject.addString(myFormatter.parse((vo.getAveragePurchaseSales()).trim()).toString());
						 
						 logger.info("vo.getAveragePurchaseSales(): "+vo.getAveragePurchaseSales());
						  logger.info("myFormatter.parse((vo.getAveragePurchaseSales().trim())).toString(): "+myFormatter.parse((vo.getAveragePurchaseSales().trim())).toString());
						 
						 if((CommonFunction.checkNull(vo.getPaymentTerms())).trim().equalsIgnoreCase(""))
								insertPrepStmtObject.addNull();
							else
								insertPrepStmtObject.addString((vo.getPaymentTerms()).trim());
						 
						 if((CommonFunction.checkNull(vo.getProductType()).trim()).equalsIgnoreCase(""))
								insertPrepStmtObject.addNull();
							else
								insertPrepStmtObject.addString((vo.getProductType()).trim());
						 
						 if((CommonFunction.checkNull(vo.getVintageOfRelationship()).trim()).equalsIgnoreCase(""))
								insertPrepStmtObject.addNull();
							else
								insertPrepStmtObject.addString((vo.getVintageOfRelationship()).trim());
						 
						  if((CommonFunction.checkNull(vo.getAddress())).trim().equalsIgnoreCase(""))
							  insertPrepStmtObject.addNull();
								else
									insertPrepStmtObject.addString((vo.getAddress()).trim());
						     
						     if((CommonFunction.checkNull(vo.getAddressLine1())).trim().equalsIgnoreCase(""))
						    	 insertPrepStmtObject.addNull();
								else
									insertPrepStmtObject.addString((vo.getAddressLine1()).trim());
						     
						     if((CommonFunction.checkNull(vo.getTxtCountryCode())).trim().equalsIgnoreCase(""))
						    	 insertPrepStmtObject.addNull();
								else
									insertPrepStmtObject.addString((vo.getTxtCountryCode()).trim());
						     
						     if((CommonFunction.checkNull(vo.getTxtStateCode())).trim().equalsIgnoreCase(""))
						    	 insertPrepStmtObject.addNull();
								else
									insertPrepStmtObject.addString((vo.getTxtStateCode()).trim());
						     
						     if((CommonFunction.checkNull(vo.getTxtDistCode())).trim().equalsIgnoreCase(""))
						    	 insertPrepStmtObject.addNull();
								else
									insertPrepStmtObject.addString((vo.getTxtDistCode()).trim());
						     
						     if((CommonFunction.checkNull(vo.getPincode())).trim().equalsIgnoreCase(""))
						    	 insertPrepStmtObject.addNull();
								else
									insertPrepStmtObject.addString((vo.getPincode()).trim());
						   //------------------------------------------
								if(CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
									insertPrepStmtObject.addNull();
								else
									insertPrepStmtObject.addString((vo.getUserId()).trim());
								
								if(CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
									insertPrepStmtObject.addNull();
								else
									insertPrepStmtObject.addString((vo.getMakerDate()).trim());
								//------------------------------------------
								 if((CommonFunction.checkNull(vo.getAddressLine2())).trim().equalsIgnoreCase(""))
							    	 insertPrepStmtObject.addNull();
									else
										insertPrepStmtObject.addString((vo.getAddressLine2()).trim());	 
							if((CommonFunction.checkNull(vo.getAddressLine3())).trim().equalsIgnoreCase(""))
							    	 insertPrepStmtObject.addNull();
									else
										insertPrepStmtObject.addString((vo.getAddressLine3()).trim());	
							if((CommonFunction.checkNull(vo.getTxtTahsil())).trim().equalsIgnoreCase(""))
							     insertPrepStmtObject.addNull();
							else
								insertPrepStmtObject.addString((vo.getTxtTahsil()).trim()); 
					 
						 if((CommonFunction.checkNull(primaryId).trim()).equalsIgnoreCase(""))
								insertPrepStmtObject.addNull();
							else
								insertPrepStmtObject.addString((primaryId).trim());
						
						 insertPrepStmtObject.setSql(bufInsUpdSql.toString());
						 logger.info("IN Deal Buyer() UPDATE query1 ### "+insertPrepStmtObject.printQuery());
						 qryList.add(insertPrepStmtObject);


			             status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			             logger.info("In savebuyer......................"+status);
				 	}catch(Exception e){
				 		   e.printStackTrace();
					      }
				 	finally
				 	{
				 		bufInsUpdSql=null;
				 	//	bufInsUpdSql1=null;
				 	}
				 	return status;

		}
			
			 public boolean deleteSupplierDetails(String[] id,String bptype1)

			    {
			    	logger.info("BPStatus for Supplier..............................................................."+bptype1);
					boolean status = false;
			    	try
			    	{
			    	qryList = new ArrayList();
			    	bufInsUpdSql = new StringBuffer();
					delPrepStmtObject =  new PrepStmtObject();
					for(int k=0;k<id.length;k++)
					{
						 StringBuilder query=new StringBuilder();
					 query.append("Delete cr_deal_buyer_supplier_dtl,cr_deal_address_m from cr_deal_buyer_supplier_dtl left join cr_deal_address_m on DEAL_BUYER_SUPPLIER_ID=BPID where DEAL_BUYER_SUPPLIER_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()+"'AND BPTYPE='S'");
					 logger.info("In.......deleteSupplierDetails"+query.toString());
					 delPrepStmtObject.setSql(query.toString());
					qryList.add(delPrepStmtObject);
					
					query=null;
					
					}
					status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);

					logger.info("Status of Deletion is ="+status);
				    }
			    	catch(Exception e)
			    	{
					e.printStackTrace();
				}

				return status;
			}
			 
			 
			 


	public boolean saveLoanDetails(Object ob)
	{
		
		LoanDetailVo loanVo = (LoanDetailVo)ob;

		boolean status=false;
		ArrayList qryList = new ArrayList();
		PrepStmtObject insertPrepStmtObject = null;
		PrepStmtObject deletePrepStmtObject=null;
		logger.info("In saveCustomer....saveLoanDetails..."+loanVo.getDealLoanId()+"loanVo.getType() "+loanVo.getType());
		try{
			 StringBuilder q=new StringBuilder();
		 q.append("select DEAL_LOAN_ID from cr_deal_loan_dtl where DEAL_LOAN_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanVo.getDealLoanId())).trim()+"'");
		 logger.info("In ...saveLoanDetails...select...query"+q.toString());
		 boolean upd = ConnectionDAO.checkStatus(q.toString());
		
		q=null;
		
			if(upd)
			{
				
				// Start by Prashant
				logger.info("In saveCustomer....saveLoanDetails...Update mode");
				StringBuilder deleteInst=new StringBuilder();
				deleteInst.append("DELETE from cr_deal_installment_plan where DEAL_LOAN_ID=?");
				deletePrepStmtObject = new PrepStmtObject();
				if ((CommonFunction.checkNull(loanVo.getDealLoanId())).trim().equalsIgnoreCase(""))
					deletePrepStmtObject.addNull();
				else
					deletePrepStmtObject.addString((loanVo.getDealLoanId()).trim());
				
				deletePrepStmtObject.setSql(deleteInst.toString());
				logger.info("IN saveLoanDetails() delete query1 ### "+deletePrepStmtObject.printQuery());
				qryList.add(deletePrepStmtObject);
				// End by Prashant
				StringBuilder query=new StringBuilder();
				 query.append("update cr_deal_loan_dtl set DEAL_PRODUCT=?,DEAL_SCHEME=?, " );
				// query.append(" DEAL_DISBURSAL_DATE=STR_TO_DATE(?,'"+dateFormat+"')," );
				 
					 query.append(" DEAL_DISBURSAL_DATE=");
					 query.append(dbo);
					 query.append("STR_TO_DATE(?,'"+dateFormat+"'),");
					 query.append(" DEAL_ASSET_COST=?,DEAL_MARGIN_RATE=?, " );
					 query.append(" DEAL_MARGIN_AMOUNT=?,DEAL_LOAN_AMOUNT=?,DEAL_TENURE=?," );
					 query.append(" DEAL_REPAYMENT_FREQ=?, " );
					 query.append(" DEAL_RATE_TYPE=?,DEAL_RATE_METHOD=?,DEAL_BASE_RATE_TYPE=?,DEAL_BASE_RATE=?, " );
					 query.append(" DEAL_MARKUP=?,DEAL_FINAL_RATE=?,DEAL_REPAYMENT_TYPE=?,DEAL_INSTALLMENT_TYPE=?, DEAL_INSTALLMENT_MODE=?, " );
					 query.append(" DEAL_REPAYMENT_MODE=?,DEAL_NO_OF_INSTALLMENT=?,DEAL_LOAN_PURPOSE=?,DEAL_SECTOR_TYPE=?,DEAL_ADVANCE_INSTL=?," );
				// query.append("DEAL_REPAY_EFF_DATE=STR_TO_DATE(?,'"+dateFormat+"'),DEAL_MATURITY_DATE=STR_TO_DATE(?,'"+dateFormat+"')," );
				 
					 query.append(" DEAL_REPAY_EFF_DATE=");
					 query.append(dbo);
					 query.append("STR_TO_DATE(?,'"+dateFormat+"'),DEAL_MATURITY_DATE=");
					 query.append(dbo);
					 query.append("STR_TO_DATE(?,'"+dateFormat+"'),");
	
					 query.append("DEAL_DUE_DAY=?," );
				 //query.append("NEXT_DUE_DATE=STR_TO_DATE(?,'"+dateFormat+"')," );
					 query.append(" NEXT_DUE_DATE=");
					 query.append(dbo);
					 query.append("STR_TO_DATE(?,'"+dateFormat+"'), ");
					 query.append("DEAL_FLAT_RATE=?,DEAL_EFF_RATE=?,MAKER_ID=?,MAKER_DATE=" );
				 //query.append("DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND)," );
				query.append(dbo);
				query.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9), ");
				 query.append("LOAN_TYPE=?,DEAL_INT_CALC_FROM=?,TENURE_IN_DAY=?,DEAL_FLOATING_FIXED_PERIOD=?,NO_OF_ASSET=?,LOAN_CLASSIFICATION=? where DEAL_LOAN_ID=?");
				 
				insertPrepStmtObject = new PrepStmtObject();
				
				if ((CommonFunction.checkNull(loanVo.getLbxProductID())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getLbxProductID()).trim());
				
				if ((CommonFunction.checkNull(loanVo.getLbxscheme())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getLbxscheme()).trim());
				
				if ((CommonFunction.checkNull(loanVo.getDisbursalDate())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getDisbursalDate()).trim());
				
				if ((CommonFunction.checkNull(loanVo.getAssetCost())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(myFormatter.parse((loanVo.getAssetCost()).trim()).toString());

				
				if ((CommonFunction.checkNull(loanVo.getMarginPerc())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(myFormatter.parse((loanVo.getMarginPerc()).trim()).toString());
					//insertPrepStmtObject.addString((loanVo.getMarginPerc()).trim());
				
				if ((CommonFunction.checkNull(loanVo.getMarginAmount())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(myFormatter.parse((loanVo.getMarginAmount()).trim()).toString());
					//insertPrepStmtObject.addString((loanVo.getMarginAmount()).trim());
				
				if ((CommonFunction.checkNull(loanVo.getRequestedLoanAmount())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(myFormatter.parse((loanVo.getRequestedLoanAmount()).trim()).toString());
					//insertPrepStmtObject.addString((loanVo.getRequestedLoanAmount()).trim());
				
				if ((CommonFunction.checkNull(loanVo.getRequestedLoanTenure())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getRequestedLoanTenure()).trim());
				
				if ((CommonFunction.checkNull(loanVo.getFrequency())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getFrequency()).trim());
				
				if ((CommonFunction.checkNull(loanVo.getRateType())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getRateType()).trim());
				
				if ((CommonFunction.checkNull(loanVo.getType())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getType()).trim());
				
				if ((CommonFunction.checkNull(loanVo.getBaseRateType())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getBaseRateType()).trim());
				
				if ((CommonFunction.checkNull(loanVo.getBaseRate())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(myFormatter.parse((loanVo.getBaseRate()).trim()).toString());
					//insertPrepStmtObject.addString((loanVo.getBaseRate()).trim());
				
				if ((CommonFunction.checkNull(loanVo.getMarkUp())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(myFormatter.parse((loanVo.getMarkUp()).trim()).toString());
					//insertPrepStmtObject.addString((loanVo.getMarkUp()).trim());
				
				if ((CommonFunction.checkNull(loanVo.getEffectiveRate())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(myFormatter.parse((loanVo.getEffectiveRate()).trim()).toString());
					//insertPrepStmtObject.addString((loanVo.getEffectiveRate()).trim());
				
				if ((CommonFunction.checkNull(loanVo.getRepaymentType())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getRepaymentType()).trim());
				
				if ((CommonFunction.checkNull(loanVo.getInstallmentType())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getInstallmentType()).trim());
				
				if ((CommonFunction.checkNull(loanVo.getInstMode())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getInstMode()).trim());
				
				if (CommonFunction.checkNull((loanVo.getPaymentMode())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getPaymentMode()).trim());
				
				if (CommonFunction.checkNull((loanVo.getNoOfInstall())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getNoOfInstall()).trim());
				
				
				if ((CommonFunction.checkNull(loanVo.getLbxLoanPurpose())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getLbxLoanPurpose()).trim());
				
				if (CommonFunction.checkNull((loanVo.getSectorType())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getSectorType()).trim());
				
				if (CommonFunction.checkNull((loanVo.getInstallments())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addString("0");
				else
					insertPrepStmtObject.addString((loanVo.getInstallments()).trim());
				
				if (CommonFunction.checkNull((loanVo.getRepayEffectiveDate())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getRepayEffectiveDate()).trim());
				
				if (CommonFunction.checkNull((loanVo.getMaturityDate())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getMaturityDate()).trim());
				
				if (CommonFunction.checkNull((loanVo.getCycleDate())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getCycleDate()).trim());
				
				if (CommonFunction.checkNull((loanVo.getNextDueDate())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getNextDueDate()).trim());
				
				if((CommonFunction.checkNull(loanVo.getRateType())).trim().equalsIgnoreCase("F"))
				{
					if((CommonFunction.checkNull(loanVo.getEffectiveRate())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(myFormatter.parse((loanVo.getEffectiveRate()).trim()).toString());
				}
				else
				{
					insertPrepStmtObject.addNull();
				}
				if((CommonFunction.checkNull(loanVo.getRateType())).trim().equalsIgnoreCase("E"))
				{
					if((CommonFunction.checkNull(loanVo.getEffectiveRate())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(myFormatter.parse((loanVo.getEffectiveRate()).trim()).toString());
				}
				else
				{
					insertPrepStmtObject.addNull();
				}
				
				if (CommonFunction.checkNull((loanVo.getUserId())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getUserId()).trim());
				
				if (CommonFunction.checkNull((loanVo.getBgDate())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getBgDate()).trim());
				//-----Loan_type
				
				if (CommonFunction.checkNull((loanVo.getLoanType())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getLoanType()).trim());
				
				//----Loan_type
				//Start @surendra code for Int. Calc. From
				logger.info("IN DAOIMPL SAVE LOAN Int. Calc. From---"+CommonFunction.checkNull(loanVo.getInterestCalc()));
				if (CommonFunction.checkNull((loanVo.getInterestCalc())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getInterestCalc()).trim());
				
				if (CommonFunction.checkNull((loanVo.getTenureInDay())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getTenureInDay()).trim());
				
				if (CommonFunction.checkNull((loanVo.getFixPriod())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addInt(0);
				else
					insertPrepStmtObject.addString((loanVo.getFixPriod()).trim());
				
				//End @surendra	code	
				if (CommonFunction.checkNull((loanVo.getNoOfAsset())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addInt(0);
				else
					insertPrepStmtObject.addString((loanVo.getNoOfAsset()).trim());	
				
				if (CommonFunction.checkNull((loanVo.getLbxLoanClassification())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addInt(0);
				else
					insertPrepStmtObject.addString((loanVo.getLbxLoanClassification()).trim());	
				
				if (CommonFunction.checkNull(loanVo.getDealLoanId()).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(loanVo.getDealLoanId().trim());
				
				insertPrepStmtObject.setSql(query.toString());
				logger.info("IN saveLoanDetails() update query1 ### "+insertPrepStmtObject.printQuery());
				qryList.add(insertPrepStmtObject);
				status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
				logger.info("In saveCustomer......................"+status);
				
				query=null;
			}
			else
			{
				//String q2="select DEAL_PRODUCT from cr_deal_loan_dtl where DEAL_PRODUCT='"+loanVo.getLbxProductID()+"' and DEAL_ID="+loanVo.getDealId();
				
				StringBuilder q2=new StringBuilder();
				 q2.append("select DEAL_LOAN_ID from cr_deal_loan_dtl where DEAL_ID="+loanVo.getDealId());
				logger.info("query of loan detail table: "+q2);
				status=ConnectionDAO.checkStatus(q2.toString());
				logger.info("status of loan detail table: "+status);
				
				q2=null;
				
				if(!status)
				{
					StringBuffer bufInsSql =new StringBuffer();
					bufInsSql.append("insert into cr_deal_loan_dtl(DEAL_ID,DEAL_PRODUCT_CATEGORY,DEAL_PRODUCT, " +
							"DEAL_SCHEME,DEAL_PRODUCT_TYPE,DEAL_DISBURSAL_DATE,DEAL_ASSET_COST,DEAL_MARGIN_RATE, " +
							"DEAL_MARGIN_AMOUNT,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_REPAYMENT_FREQ, " +
							"DEAL_RATE_TYPE,DEAL_RATE_METHOD,DEAL_BASE_RATE_TYPE,DEAL_BASE_RATE, " +
							"DEAL_MARKUP,DEAL_FINAL_RATE,DEAL_REPAYMENT_TYPE,DEAL_INSTALLMENT_TYPE, DEAL_INSTALLMENT_MODE, DEAL_NO_OF_INSTALLMENT,  " +
							"DEAL_REPAYMENT_MODE,DEAL_LOAN_PURPOSE,REC_STATUS,MAKER_ID,MAKER_DATE,DEAL_SECTOR_TYPE,DEAL_ADVANCE_INSTL,DEAL_REPAY_EFF_DATE,DEAL_MATURITY_DATE,DEAL_DUE_DAY,NEXT_DUE_DATE,DEAL_FLAT_RATE,DEAL_EFF_RATE,LOAN_TYPE,DEAL_INT_CALC_FROM,TENURE_IN_DAY,DEAL_FLOATING_FIXED_PERIOD,NO_OF_ASSET,LOAN_CLASSIFICATION )");
					bufInsSql.append(" values ( ");
					bufInsSql.append(" ?," );//DEAL_ID
					bufInsSql.append(" ?," );//DEAL_PRODUCT_CATEGORY
					bufInsSql.append(" ?," );//DEAL_PRODUCT
					bufInsSql.append(" ?," );//DEAL_SCHEME
					bufInsSql.append(" ?," );//DEAL_PRODUCT_TYPE
					//bufInsSql.append(" (?,'"+dateFormat+"')," );//DEAL_DISBURSAL_DATE
					bufInsSql.append(dbo);//DEAL_DISBURSAL_DATE 
					bufInsSql.append("STR_TO_DATE(?,'"+dateFormat+"'),");
					bufInsSql.append(" ?," );//DEAL_ASSET_COST
					bufInsSql.append(" ?," );//DEAL_MARGIN_RATE
					bufInsSql.append(" ?," );//DEAL_MARGIN_AMOUNT
					bufInsSql.append(" ?," );//DEAL_LOAN_AMOUNT
					bufInsSql.append(" ?," );//DEAL_TENURE
					bufInsSql.append(" ?," );//DEAL_REPAYMENT_FREQ
					bufInsSql.append(" ?," );//DEAL_RATE_TYPE
					bufInsSql.append(" ?," );//DEAL_RATE_METHOD
					bufInsSql.append(" ?," );//DEAL_BASE_RATE_TYPE
					bufInsSql.append(" ?," );//DEAL_BASE_RATE
					bufInsSql.append(" ?," );//DEAL_MARKUP
					bufInsSql.append(" ?," );//DEAL_FINAL_RATE
					bufInsSql.append(" ?," );//DEAL_REPAYMENT_TYPE
					bufInsSql.append(" ?," );//DEAL_INSTALLMENT_TYPE
					bufInsSql.append(" ?," );//DEAL_INSTALLMENT_MODE
					bufInsSql.append(" ?," );//DEAL_NO_OF_INSTALLMENT
					bufInsSql.append(" ?," );//DEAL_REPAYMENT_MODE
					bufInsSql.append(" ?," );//DEAL_LOAN_PURPOSE
					bufInsSql.append(" ?," );//REC_STATUS
					bufInsSql.append(" ?," );//MAKER_ID
					//bufInsSql.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND), " );//MAKER_DATE
					bufInsSql.append(dbo);
					bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9), ");//MAKER_DATE
					bufInsSql.append(" ?," );//DEAL_SECTOR_TYPE
					bufInsSql.append(" ?," );//DEAL_ADVANCE_INSTL
					//bufInsSql.append(" STR_TO_DATE(?,'"+dateFormat+"')," );//DEAL_REPAY_EFF_DATE
					bufInsSql.append(dbo);//DEAL_REPAY_EFF_DATE 
					bufInsSql.append("STR_TO_DATE(?,'"+dateFormat+"'),");
					 
					//bufInsSql.append(" STR_TO_DATE(?,'"+dateFormat+"')," );//DEAL_MATURITY_DATE
					bufInsSql.append(dbo);//DEAL_MATURITY_DATE
					bufInsSql.append("STR_TO_DATE(?,'"+dateFormat+"'),");
					
					bufInsSql.append(" ?, " );//DEAL_CYCLE_DATE
					//bufInsSql.append(" STR_TO_DATE(?,'"+dateFormat+"')," );//DEAL_MATURITY_DATE
					
					bufInsSql.append(dbo);//DEAL_MATURITY_DATE
					 
					bufInsSql.append("STR_TO_DATE(?,'"+dateFormat+"'),");
					 
					bufInsSql.append(" ?," );//DEAL_FLAT_RATE
					bufInsSql.append(" ?," );//DEAL_EFF_RATE
					bufInsSql.append(" ? ," );//LOAN_TYPE
					bufInsSql.append(" ? ," );//DEAL_INT_CALC_FROM
					bufInsSql.append(" ? ," );//tenure_in_day
					bufInsSql.append(" ? ," );//DEAL_FLOATING_FIXED_PERIOD
					bufInsSql.append(" ?, " );//NO_OF_ASSET	
					bufInsSql.append(" ? " );//LOAN_CLASSIFICATION
					bufInsSql.append(")" );
					
					
					logger.info("In........saveLoanDetails"+bufInsSql.toString());
					insertPrepStmtObject = new PrepStmtObject();

					if((CommonFunction.checkNull(loanVo.getDealId())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((loanVo.getDealId()).trim());
					if((CommonFunction.checkNull(loanVo.getProductType())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((loanVo.getProductType()).trim());
					if((CommonFunction.checkNull(loanVo.getLbxProductID())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((loanVo.getLbxProductID()).trim());
					if((CommonFunction.checkNull(loanVo.getLbxscheme())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((loanVo.getLbxscheme()).trim());
					
					if((CommonFunction.checkNull(loanVo.getProductTypeFlag())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((loanVo.getProductTypeFlag()).trim());
					
					if((CommonFunction.checkNull(loanVo.getDisbursalDate())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((loanVo.getDisbursalDate()).trim());
					
					if((loanVo.getAssetCost()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(myFormatter.parse((loanVo.getAssetCost()).trim()).toString());
					
					if((loanVo.getMarginPerc()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(myFormatter.parse((loanVo.getMarginPerc()).trim()).toString());
					if((CommonFunction.checkNull(loanVo.getMarginAmount()).trim()).equalsIgnoreCase(""))
					    insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(myFormatter.parse((loanVo.getMarginAmount()).trim()).toString());
					if((CommonFunction.checkNull(loanVo.getRequestedLoanAmount())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(myFormatter.parse((loanVo.getRequestedLoanAmount()).trim()).toString());
					if((CommonFunction.checkNull(loanVo.getRequestedLoanTenure())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((loanVo.getRequestedLoanTenure()).trim());
					if((CommonFunction.checkNull(loanVo.getFrequency())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((loanVo.getFrequency()).trim());

					if((CommonFunction.checkNull(loanVo.getRateType())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((loanVo.getRateType()).trim());

					if((CommonFunction.checkNull(loanVo.getType())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((loanVo.getType()).trim());

					if((CommonFunction.checkNull(loanVo.getBaseRateType())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((loanVo.getBaseRateType()).trim());

					if((CommonFunction.checkNull(loanVo.getBaseRate())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((loanVo.getBaseRate()).trim());

					if((CommonFunction.checkNull(loanVo.getMarkUp())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(myFormatter.parse((loanVo.getMarkUp()).trim()).toString());

					if((CommonFunction.checkNull(loanVo.getEffectiveRate())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(myFormatter.parse((loanVo.getEffectiveRate()).trim()).toString());

					if((CommonFunction.checkNull(loanVo.getRepaymentType())).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
					else
							insertPrepStmtObject.addString((loanVo.getRepaymentType()).trim());
					if((CommonFunction.checkNull(loanVo.getInstallmentType())).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
					else
							insertPrepStmtObject.addString((loanVo.getInstallmentType()).trim());
					if((CommonFunction.checkNull(loanVo.getInstMode())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
				else
						insertPrepStmtObject.addString((loanVo.getInstMode()).trim());
					
							
				if((CommonFunction.checkNull(loanVo.getNoOfInstall())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
				else
						insertPrepStmtObject.addString((loanVo.getNoOfInstall()).trim());

					if((CommonFunction.checkNull(loanVo.getPaymentMode())).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
					else
							insertPrepStmtObject.addString((loanVo.getPaymentMode()).trim());
					if((CommonFunction.checkNull(loanVo.getLbxLoanPurpose())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
				     else
						insertPrepStmtObject.addString((loanVo.getLbxLoanPurpose()).trim());

						insertPrepStmtObject.addString("P");//Status
						if((CommonFunction.checkNull(loanVo.getUserId())).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
					     else
							insertPrepStmtObject.addString((loanVo.getUserId()).trim());
						
						if((CommonFunction.checkNull(loanVo.getBgDate())).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
					     else
							insertPrepStmtObject.addString((loanVo.getBgDate()).trim());
						
						
						if (CommonFunction.checkNull((loanVo.getSectorType())).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString((loanVo.getSectorType()).trim());
					
						if (CommonFunction.checkNull((loanVo.getInstallments())).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addString("0");
						else
							insertPrepStmtObject.addString((loanVo.getInstallments()).trim());
						
						if (CommonFunction.checkNull((loanVo.getRepayEffectiveDate())).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString((loanVo.getRepayEffectiveDate()).trim());
						
						if (CommonFunction.checkNull((loanVo.getMaturityDate())).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString((loanVo.getMaturityDate()).trim());
						
						if (CommonFunction.checkNull((loanVo.getCycleDate())).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString((loanVo.getCycleDate()).trim());
						
						if (CommonFunction.checkNull((loanVo.getNextDueDate())).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString((loanVo.getNextDueDate()).trim());
						
						if((CommonFunction.checkNull(loanVo.getRateType())).trim().equalsIgnoreCase("F"))
						{
							if((CommonFunction.checkNull(loanVo.getEffectiveRate())).trim().equalsIgnoreCase(""))
								insertPrepStmtObject.addNull();
							else
								insertPrepStmtObject.addString(myFormatter.parse((loanVo.getEffectiveRate()).trim()).toString());
						}
						else
						{
							insertPrepStmtObject.addNull();
						}
						if((CommonFunction.checkNull(loanVo.getRateType())).trim().equalsIgnoreCase("E"))
						{
							if((CommonFunction.checkNull(loanVo.getEffectiveRate())).trim().equalsIgnoreCase(""))
								insertPrepStmtObject.addNull();
							else
								insertPrepStmtObject.addString(myFormatter.parse((loanVo.getEffectiveRate()).trim()).toString());
						}
						else
						{
							insertPrepStmtObject.addNull();
						}
						
						if (CommonFunction.checkNull((loanVo.getLoanType())).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString((loanVo.getLoanType()).trim());
						
						//Start @surendra code for Int. Calc. From
						logger.info("IN DAOIMPL SAVE LOAN Int. Calc. From---"+CommonFunction.checkNull(loanVo.getInterestCalc()));
						if (CommonFunction.checkNull((loanVo.getInterestCalc())).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString((loanVo.getInterestCalc()).trim());
						
						if (CommonFunction.checkNull((loanVo.getTenureInDay())).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString((loanVo.getTenureInDay()).trim());
						
						if (CommonFunction.checkNull((loanVo.getFixPriod())).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addInt(0);
						else
							insertPrepStmtObject.addString((loanVo.getFixPriod()).trim());
						
						if (CommonFunction.checkNull((loanVo.getNoOfAsset())).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addInt(0);
						else
							insertPrepStmtObject.addString((loanVo.getNoOfAsset()).trim());	
						
						if (CommonFunction.checkNull((loanVo.getLbxLoanClassification())).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addInt(0);
						else
							insertPrepStmtObject.addString((loanVo.getLbxLoanClassification()).trim());	
						
						//End @surendra	code
						insertPrepStmtObject.setSql(bufInsSql.toString());
						logger.info("IN SaveLoan() insert query1 ### "+insertPrepStmtObject.printQuery());
						qryList.add(insertPrepStmtObject);
						status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
					    logger.info("In saveCustomer......................"+status);
					    
					    bufInsSql=null;
                        StringBuilder checkStageM=new StringBuilder();
						logger.info("Company Id: "+loanVo.getCompanyId()+" dealId: "+loanVo.getDealId());
						checkStageM.append(CommonFunction.stageMovement(loanVo.getCompanyId(), "DC","I",loanVo.getDealId(), "DC", loanVo.getBgDate(),loanVo.getUserId()));
						logger.info("checkStageM : "+checkStageM);
				}
				else
				{
					status=false;
				}
				
			}



		if(status)
		{
			logger.info("status : "+status);
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		


		return status;
	}




	public boolean saveNotepadData(Object ob) {
		CreditProcessingNotepadVo vo = (CreditProcessingNotepadVo)ob;
		boolean status=false;
		
		StringBuilder metingdateTime=new StringBuilder();
		StringBuilder followupdateTime=new StringBuilder();
		StringBuilder commonId=new StringBuilder();
//		String metingdateTime="";
//		String followupdateTime="";
//		String commonId="";
		if(vo.getLoanId()!=null && !vo.getLoanId().equalsIgnoreCase(""))
		{
			commonId.append(vo.getLoanId());
		}
		else
		{
			commonId.append(vo.getDealId());
		}
		if(vo.getFollowUp().equalsIgnoreCase("Y")){
			metingdateTime.append(vo.getMeetingDate()+" "+vo.getMeetingTime());
			followupdateTime.append(vo.getFollowupDate()+" "+vo.getFollowupTime());
			logger.info("In saveNotepadData..............."+metingdateTime+"......................Dao Impl....111"+followupdateTime);
		}
		else if(vo.getFollowUp().equalsIgnoreCase("N")){
			metingdateTime.append(vo.getMeetingDate()+" "+vo.getMeetingTime());
		}
			logger.info("In saveNotepadData.....................................Dao Impl....111");
			logger.info("VALUE OF FollowUpDateTime....................................."+followupdateTime);
			ArrayList qryList = new ArrayList();
			PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
			try{

			logger.info("In insert customer address part");
			StringBuffer bufInsSql =	new StringBuffer();
			bufInsSql.append("insert into cr_notepad_dtl(TXN_TYPE,TXN_ID,NOTEPAD_DATE,NOTEPAD_CODE,NOTEPAD_COMMENTS,PERSON_MET,MEETING_LOCATION,FOLLOWUP_REQD,FOLLOWUP_DATE,FOLLOWUP_REMARKS,FOLLOWUP_PERSON,FOLLOWUP_LOCATION,MAKER_ID,MAKER_DATE)");
			bufInsSql.append(" values ( ");
			bufInsSql.append(" ?," ); //TXN_TYPE
			bufInsSql.append(" ?," ); //TXN_ID
			bufInsSql.append(dbo);
			bufInsSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')," ); //Notepad_date or in this case meeting date.
			bufInsSql.append(" ?," ); //Notepad_code
			bufInsSql.append(" ?," ); //Notepad_comments
			bufInsSql.append(" ?," ); //Person_met
			bufInsSql.append(" ?," ); //Meeting_location
			bufInsSql.append(" ?," ); //followup_reqd
			bufInsSql.append(dbo);
			bufInsSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')," ); //followup_date
			bufInsSql.append(" ?," ); //followup_remarks
			bufInsSql.append(" ?," ); //followup_person
			bufInsSql.append(" ?," ); //followup_location
			bufInsSql.append(" ?," ); //maker_id
			//bufInsSql.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND))" ); //maker_date
			bufInsSql.append(dbo);
			bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9)) ");//maker_date
			
			
			if((CommonFunction.checkNull(vo.getTxnType())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getTxnType()).trim());

			if((CommonFunction.checkNull(commonId.toString()).trim()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((commonId.toString()).trim()); //txn_id

			if((CommonFunction.checkNull(metingdateTime)).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((metingdateTime.toString()).trim());

			if((CommonFunction.checkNull(vo.getNoteCode())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getNoteCode()).trim());

			if((CommonFunction.checkNull(vo.getMeetingRemarks())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getMeetingRemarks()).trim());

			if((CommonFunction.checkNull(vo.getPersonMet())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getPersonMet()).trim());

			if((CommonFunction.checkNull(vo.getMeetingLocation())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getMeetingLocation()).trim());

			if((CommonFunction.checkNull(vo.getFollowUp())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getFollowUp()).trim());

			if((CommonFunction.checkNull(followupdateTime)).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((followupdateTime.toString()).trim());

			if((CommonFunction.checkNull(vo.getFollowupRemarks())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getFollowupRemarks()).trim());
			if((CommonFunction.checkNull(vo.getFollowUpPerson())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getFollowUpPerson()).trim());
			if((CommonFunction.checkNull(vo.getFollowUpLocation())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getFollowUpLocation()).trim());
			if((CommonFunction.checkNull(vo.getUserId()).trim()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getUserId()).trim()); //maker_id
			if((CommonFunction.checkNull(vo.getMakerDate()).trim()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getMakerDate()).trim()); //maker_date

			insertPrepStmtObject.setSql(bufInsSql.toString());
			logger.info("IN saveNotepadData() insert query1 ### "+insertPrepStmtObject.printQuery());
			qryList.add(insertPrepStmtObject);
			status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			logger.info("In saveNotepadData......................"+status);


	       	}catch(Exception e){
			e.printStackTrace();
		}
	       	finally
	       	{
	       		metingdateTime=null;
	    		followupdateTime=null;
	    		commonId=null;
	       	}
	return status;
	}

	public ArrayList getNoteCode(){
		ArrayList list=new ArrayList();
		try{
			logger.info("In getNoteCode..........................DAOImpl");
			StringBuilder query=new StringBuilder();
			 query.append("select gm.value, gm.description from generic_master gm,generic_master_keys gmk where gm.generic_key='note_code'and gmk.generic_key='note_code' and gm.REC_STATUS='A' and gm.value!='PD'");
			logger.info("query: "+query.toString());
			CreditProcessingNotepadVo noteVO=null;
			ArrayList product = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getNoteCode "+product.size());
			
			query=null;
			
			for(int i=0;i<product.size();i++){
				logger.info("getNoteCode "+CommonFunction.checkNull(product.get(i)).toString());
				ArrayList data=(ArrayList)product.get(i);
				if(data.size()>0){
					noteVO = new CreditProcessingNotepadVo();
					noteVO.setNoteCodeValue((CommonFunction.checkNull(data.get(0))).trim());
					noteVO.setNoteCodeDescription((CommonFunction.checkNull(data.get(1))).trim());
					list.add(noteVO);
				}
			}

			}catch(Exception e){
				e.printStackTrace();
			}
		return list;
	}

//Ritu Start
	public ArrayList getNotepadDataForNotepad(String txnid) {
		ArrayList list=new ArrayList();
			try{
				logger.info("In getNotepadDataForNotepad......Dao Impl"+txnid);
				
				StringBuilder query=new StringBuilder();				
				
				query.append("select distinct b.description ,");
				query.append(dbo);
				query.append("DATE_FORMAT(notepad_date,'"+dateFormatWithTime+"'),person_met,meeting_location," );
						//"if(followup_reqd='N','NO','YES') as followup_reqd,"+
				query.append("case when followup_reqd='N' then 'NO' else 'YES' end as followup_reqd,");
				query.append(dbo);
				query.append("DATE_FORMAT(followup_date,'"+dateFormatWithTime+"'),followup_location,notepad_comments,followup_remarks,FOLLOWUP_PERSON, " );
				query.append(" s.USER_NAME,");
				query.append(dbo);
				query.append("DATE_FORMAT(a.maker_date,'"+dateFormatWithTime+"') from cr_notepad_dtl a,generic_master b,sec_user_m s");
				query.append(" where notepad_code=b.value and " );
				query.append("txn_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnid)).trim()+"' and TXN_TYPE='LIM'" );
				query.append(" and a.MAKER_ID=s.USER_ID and a.notepad_code!='PD' " );
				query.append("union all " );
				query.append(" select distinct b.description ,");
				query.append(dbo);
				query.append("DATE_FORMAT(notepad_date,'"+dateFormatWithTime+"'),person_met,meeting_location," );
						//"if(followup_reqd='N','NO','YES') as followup_reqd,"+
				query.append("case when followup_reqd='N' then 'NO' else 'YES' end as followup_reqd,");
				query.append(dbo);
				query.append("DATE_FORMAT(followup_date,'"+dateFormatWithTime+"'),followup_location,notepad_comments,followup_remarks,FOLLOWUP_PERSON, " );
				query.append(" s.USER_NAME,");
				query.append(dbo);
				query.append("DATE_FORMAT(a.maker_date,'"+dateFormatWithTime+"') from cr_notepad_dtl a,generic_master b,sec_user_m s");
				query.append(" where notepad_code=b.value and " );
				query.append("txn_id=(SELECT LOAN_DEAL_ID FROM  CR_LOAN_DTL WHERE LOAN_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnid)).trim()+"') and TXN_TYPE='DC'" );
				query.append(" and a.MAKER_ID=s.USER_ID and a.notepad_code!='PD'");
				query.append(" union all ");
				query.append(" select distinct b.description ,dbo.DATE_FORMAT(notepad_date,'%d-%m-%Y %H:%i'),person_met,meeting_location,iif(followup_reqd='N','NO','YES') as followup_reqd, dbo.DATE_FORMAT(followup_date,'%d-%m-%Y %H:%i'),followup_location,notepad_comments,followup_remarks,FOLLOWUP_PERSON,  s.USER_NAME,dbo.DATE_FORMAT(a.maker_date,'%d-%m-%Y %H:%i') ");
				query.append(" from cr_notepad_dtl a,generic_master b,sec_user_m s ");
				query.append(" where notepad_code=b.value and txn_id = (select a.lead_id from cr_deal_dtl a left join cr_loan_dtl b on b.loan_deal_id=a.deal_id where b.loan_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnid)).trim()+"') and TXN_TYPE in ('LT','LP') and a.MAKER_ID=s.USER_ID and a.notepad_code!='PD' ");
			logger.info("In getNotepadData"+query.toString());
			
			CreditProcessingNotepadVo noteVO=null;
			ArrayList product = ConnectionDAO.sqlSelect(query.toString());			
			logger.info("getNotepadData "+product.size());

			query=null;
			
			for(int i=0;i<product.size();i++){
				logger.info("getNotepadDataList "+CommonFunction.checkNull(product.get(i)).toString());
				ArrayList data=(ArrayList)product.get(i);
				if(data.size()>0){
					noteVO = new CreditProcessingNotepadVo();
					noteVO.setNoteCodeDescription((CommonFunction.checkNull(data.get(0))).trim());
					//noteVO.setNoteCode(data.get(0).toString());
					noteVO.setMeetingDate((CommonFunction.checkNull(data.get(1))).trim());
					noteVO.setPersonMet((CommonFunction.checkNull(data.get(2))).trim());
					noteVO.setMeetingLocation((CommonFunction.checkNull(data.get(3))).trim());
					noteVO.setFollowUp((CommonFunction.checkNull(data.get(4))).trim());
					noteVO.setFollowupDate((CommonFunction.checkNull(data.get(5))).trim());
					noteVO.setFollowUpLocation((CommonFunction.checkNull(data.get(6))).trim());
					noteVO.setMeetingRemarks((CommonFunction.checkNull(data.get(7))).trim());
					noteVO.setFollowupRemarks((CommonFunction.checkNull(data.get(8))).trim());
					noteVO.setFollowUpPerson((CommonFunction.checkNull(data.get(9))).trim());
					noteVO.setUserName((CommonFunction.checkNull(data.get(10))).trim());
					noteVO.setCreationDate((CommonFunction.checkNull(data.get(11))).trim());
					list.add(noteVO);
				}
			}
			}catch(Exception e){
				e.printStackTrace();
			}
		return list;
	}
//Ritu End
	public ArrayList getNotepadData(String txnid,String txnType) {
		ArrayList list=new ArrayList();
			try{
				logger.info("In getNotepadData......Dao Impl"+txnType);
				
				StringBuilder query=new StringBuilder();
				
			  query.append("select distinct b.description ,");
			  query.append(dbo);
			  query.append("DATE_FORMAT(notepad_date,'"+dateFormatWithTime+"'),person_met,meeting_location," );
			  		      //" if(followup_reqd='N','NO','YES') as followup_reqd,"+
			  query.append("case when followup_reqd='N' then 'NO' else 'YES' end as followup_reqd,");
			  query.append(dbo);
			  query.append("DATE_FORMAT(followup_date,'"+dateFormatWithTime+"'),followup_location,notepad_comments,followup_remarks,FOLLOWUP_PERSON, " );
			  query.append(" s.USER_NAME,");
			  query.append(dbo);
			  query.append("DATE_FORMAT(a.maker_date,'"+dateFormatWithTime+"') from cr_notepad_dtl a,generic_master b,sec_user_m s");
			  query.append(" where notepad_code=b.value and " );
			  query.append("txn_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnid)).trim()+"' and TXN_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()+"'" );
			  query.append(" and a.MAKER_ID=s.USER_ID and a.notepad_code!='PD'");
			
			logger.info("In getNotepadData"+query.toString());
			
			CreditProcessingNotepadVo noteVO=null;
			ArrayList product = ConnectionDAO.sqlSelect(query.toString());			
			logger.info("getNotepadData "+product.size());

			query=null;
			
			for(int i=0;i<product.size();i++){
				logger.info("getNotepadDataList "+CommonFunction.checkNull(product.get(i)).toString());
				ArrayList data=(ArrayList)product.get(i);
				if(data.size()>0){
					noteVO = new CreditProcessingNotepadVo();
					noteVO.setNoteCodeDescription((CommonFunction.checkNull(data.get(0))).trim());
					//noteVO.setNoteCode(data.get(0).toString());
					noteVO.setMeetingDate((CommonFunction.checkNull(data.get(1))).trim());
					noteVO.setPersonMet((CommonFunction.checkNull(data.get(2))).trim());
					noteVO.setMeetingLocation((CommonFunction.checkNull(data.get(3))).trim());
					noteVO.setFollowUp((CommonFunction.checkNull(data.get(4))).trim());
					noteVO.setFollowupDate((CommonFunction.checkNull(data.get(5))).trim());
					noteVO.setFollowUpLocation((CommonFunction.checkNull(data.get(6))).trim());
					noteVO.setMeetingRemarks((CommonFunction.checkNull(data.get(7))).trim());
					noteVO.setFollowupRemarks((CommonFunction.checkNull(data.get(8))).trim());
					noteVO.setFollowUpPerson((CommonFunction.checkNull(data.get(9))).trim());
					noteVO.setUserName((CommonFunction.checkNull(data.get(10))).trim());
					noteVO.setCreationDate((CommonFunction.checkNull(data.get(11))).trim());
					list.add(noteVO);
				}
			}
			}catch(Exception e){
				e.printStackTrace();
			}
		return list;
	}




	
	
	public ArrayList getLeadNotepadData(String txnid,String txnType) {
		ArrayList list=new ArrayList();
			try{
				logger.info("In getNotepadData......Dao Impl"+txnType);
				
				StringBuilder query=new StringBuilder();
				  query.append("select distinct b.description ,");
				  query.append(dbo);
				  query.append("DATE_FORMAT(notepad_date,'"+dateFormatWithTime+"'),person_met,meeting_location," );
				  		//"if(followup_reqd='N','NO','YES') as followup_reqd,"+
				  query.append("case when followup_reqd='N' then 'NO' else 'YES' end as followup_reqd,");
				  query.append(dbo);
				  query.append("DATE_FORMAT(followup_date,'"+dateFormatWithTime+"'),followup_location,notepad_comments,followup_remarks,FOLLOWUP_PERSON, " );
				  query.append(" s.USER_NAME,");
				  query.append(dbo);
				  query.append("DATE_FORMAT(a.maker_date,'"+dateFormatWithTime+"') from cr_notepad_dtl a,generic_master b,sec_user_m s");
				  query.append(" where notepad_code=b.value and " );
				  query.append("txn_id=(select LEAD_ID from cr_deal_dtl where DEAL_ID=(select LOAN_DEAL_ID from cr_loan_dtl where LOAN_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnid)).trim()+"')) and TXN_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()+"'" );
				  query.append(" and a.MAKER_ID=s.USER_ID and a.notepad_code!='PD'");
			
			logger.info("In getNotepadData"+query.toString());
			
			CreditProcessingNotepadVo noteVO=null;
			ArrayList product = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getNotepadData "+product.size());
			
			query=null;

			for(int i=0;i<product.size();i++){
				logger.info("getNotepadDataList "+CommonFunction.checkNull(product.get(i)).toString());
				ArrayList data=(ArrayList)product.get(i);
				if(data.size()>0){
					noteVO = new CreditProcessingNotepadVo();
					noteVO.setNoteCodeDescription((CommonFunction.checkNull(data.get(0))).trim());
					//noteVO.setNoteCode(data.get(0).toString());
					noteVO.setMeetingDate((CommonFunction.checkNull(data.get(1))).trim());
					noteVO.setPersonMet((CommonFunction.checkNull(data.get(2))).trim());
					noteVO.setMeetingLocation((CommonFunction.checkNull(data.get(3))).trim());
					noteVO.setFollowUp((CommonFunction.checkNull(data.get(4))).trim());
					noteVO.setFollowupDate((CommonFunction.checkNull(data.get(5))).trim());
					noteVO.setFollowUpLocation((CommonFunction.checkNull(data.get(6))).trim());
					noteVO.setMeetingRemarks((CommonFunction.checkNull(data.get(7))).trim());
					noteVO.setFollowupRemarks((CommonFunction.checkNull(data.get(8))).trim());
					noteVO.setFollowUpPerson((CommonFunction.checkNull(data.get(9))).trim());
					noteVO.setUserName((CommonFunction.checkNull(data.get(10))).trim());
					noteVO.setCreationDate((CommonFunction.checkNull(data.get(11))).trim());
					list.add(noteVO);
				}
			}
			}catch(Exception e){
				e.printStackTrace();
			}
		return list;
	}

	public ArrayList getLeadNotepadDataCP(String txnid,String txnType) {
		ArrayList list=new ArrayList();
			try{
				logger.info("In getLeadNotepadDataCP(......Dao Impl"+txnType);
				
				StringBuilder query=new StringBuilder();
				  query.append("select distinct b.description ,");
				  query.append(dbo);
				  query.append("DATE_FORMAT(notepad_date,'"+dateFormatWithTime+"'),person_met,meeting_location," );
				  		//"if(followup_reqd='N','NO','YES') as followup_reqd,"+
				  query.append("case when followup_reqd='N' then 'NO' else 'YES' end as followup_reqd,");
				  query.append(dbo);
				  query.append("DATE_FORMAT(followup_date,'"+dateFormatWithTime+"'),followup_location,notepad_comments,followup_remarks,FOLLOWUP_PERSON, " );
				  query.append(" s.USER_NAME,");
				  query.append(dbo);
				  query.append("DATE_FORMAT(a.maker_date,'"+dateFormatWithTime+"') from cr_notepad_dtl a,generic_master b,sec_user_m s");
				  query.append(" where notepad_code=b.value and " );
				  query.append("txn_id=(select LEAD_ID from cr_deal_dtl where DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnid)).trim()+"') and TXN_TYPE  in ('LT','LP') " );
				  query.append(" and a.MAKER_ID=s.USER_ID and a.notepad_code!='PD'");
			
			logger.info("In getNotepadData"+query.toString());
			
			CreditProcessingNotepadVo noteVO=null;
			ArrayList product = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getNotepadData "+product.size());
			
			query=null;

			for(int i=0;i<product.size();i++){
				logger.info("getNotepadDataList "+CommonFunction.checkNull(product.get(i)).toString());
				ArrayList data=(ArrayList)product.get(i);
				if(data.size()>0){
					noteVO = new CreditProcessingNotepadVo();
					noteVO.setNoteCodeDescription((CommonFunction.checkNull(data.get(0))).trim());
					//noteVO.setNoteCode(data.get(0).toString());
					noteVO.setMeetingDate((CommonFunction.checkNull(data.get(1))).trim());
					noteVO.setPersonMet((CommonFunction.checkNull(data.get(2))).trim());
					noteVO.setMeetingLocation((CommonFunction.checkNull(data.get(3))).trim());
					noteVO.setFollowUp((CommonFunction.checkNull(data.get(4))).trim());
					noteVO.setFollowupDate((CommonFunction.checkNull(data.get(5))).trim());
					noteVO.setFollowUpLocation((CommonFunction.checkNull(data.get(6))).trim());
					noteVO.setMeetingRemarks((CommonFunction.checkNull(data.get(7))).trim());
					noteVO.setFollowupRemarks((CommonFunction.checkNull(data.get(8))).trim());
					noteVO.setFollowUpPerson((CommonFunction.checkNull(data.get(9))).trim());
					noteVO.setUserName((CommonFunction.checkNull(data.get(10))).trim());
					noteVO.setCreationDate((CommonFunction.checkNull(data.get(11))).trim());
					list.add(noteVO);
				}
			}
			}catch(Exception e){
				e.printStackTrace();
			}
		return list;
	}


	
	public ArrayList getLoanDetailList(String dealId) {
		ArrayList list=new ArrayList();
		try{
			StringBuilder query=new StringBuilder();
		 query.append("SELECT DEAL_LOAN_ID,DEAL_PRODUCT,DEAL_SCHEME,p.PRODUCT_DESC,s.SCHEME_DESC,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_RATE_TYPE,DEAL_RATE_METHOD,DEAL_LOAN_PURPOSE,d.TENURE_IN_DAY,d.DEAL_FLOATING_FIXED_PERIOD,pl.DESCRIPTION from cr_deal_loan_dtl d left join cr_product_m p on d.DEAL_PRODUCT=p.PRODUCT_ID left join cr_scheme_m s on d.DEAL_SCHEME=s.SCHEME_ID left join generic_master pl on pl.VALUE=d.DEAL_LOAN_PURPOSE where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		logger.info("getLoanDetailList"+query.toString());
		LoanDetailVo loanVo = null;
		ArrayList loandeatail = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getProductTypeList"+loandeatail.size());
		
		query=null;
		
		for(int i=0;i<loandeatail.size();i++){

			logger.info("getProductTypeList"+loandeatail.get(i).toString());
			ArrayList loandeatail1=(ArrayList)loandeatail.get(i);
			if(loandeatail1.size()>0)
			{
				loanVo = new LoanDetailVo();
				loanVo.setDealLoanId((CommonFunction.checkNull(loandeatail1.get(0))).trim());
				loanVo.setLbxProductID((CommonFunction.checkNull(loandeatail1.get(1))).trim());
				loanVo.setLbxscheme((CommonFunction.checkNull(loandeatail1.get(2))).trim());
				loanVo.setProduct((CommonFunction.checkNull(loandeatail1.get(3))).trim());
				loanVo.setScheme((CommonFunction.checkNull(loandeatail1.get(4))).trim());
				
				if(!CommonFunction.checkNull(loandeatail1.get(5)).equalsIgnoreCase(""))	
				{
					Number reconNum =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(5))).trim());
					loanVo.setRequestedLoanAmount(myFormatter.format(reconNum));
				}

				
				loanVo.setRequestedLoanTenure((CommonFunction.checkNull(loandeatail1.get(6))).trim());


				if((CommonFunction.checkNull(loandeatail1.get(7)).trim()).equals("F"))
				{
					loanVo.setRateType("Flat Rate");
				}
				else if((CommonFunction.checkNull(loandeatail1.get(7)).trim()).equals("E"))
				{
					loanVo.setRateType("Effective Rate");
				}


				if((CommonFunction.checkNull(loandeatail1.get(8)).trim()).equals("F"))
				{
					loanVo.setType("Fixed");
				}
				else if((CommonFunction.checkNull(loandeatail1.get(8)).trim()).equals("L"))
				{
					loanVo.setType("Floating");
				}
				else
				{
					loanVo.setType("");
				}


				loanVo.setLbxLoanPurpose((CommonFunction.checkNull(loandeatail1.get(9))).trim());
				loanVo.setTenureInDay((CommonFunction.checkNull(loandeatail1.get(10))).trim());
				loanVo.setFixPriod((CommonFunction.checkNull(loandeatail1.get(11))).trim());
				loanVo.setLoanPurpose((CommonFunction.checkNull(loandeatail1.get(12))).trim());
				list.add(loanVo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}


		return list;
	}

	public boolean deleteLoanDetails(String[] id) {
		
		
		logger.info("deleteLoanDetails for deleteLoanDetails......"+id);
		boolean status = false;
    	try
    	{
    	qryList = new ArrayList();
    	bufInsUpdSql = new StringBuffer();
	
		for(int k=0;k<id.length;k++)
		{
			StringBuilder query=new StringBuilder();
			 query.append("delete from cr_deal_loan_dtl where DEAL_LOAN_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim());
	        logger.info("In.....deleteLoanDetails"+query.toString());
			qryList.add(query);
			query=null;
		}
		
        logger.info("delete query: "+qryList.get(0));
        
		status=ConnectionDAO.sqlInsUpdDelete(qryList);
		logger.info("Status of Deletion is ="+status);
	    }
    	catch(Exception e)
    	{
		e.printStackTrace();
	}
	return status;
	
}


	public boolean deleteChargeInstallmentRepay(String dealId, String[] dealLoanId) {
		
		logger.info("deleteChargeInstallmentRepay for deleteChargeInstallmentRepay....dealLoanId.."+dealLoanId+" dealId "+dealId);
		boolean status = false;
    	try
    	{
    	qryList = new ArrayList();
    	//bufInsUpdSql = new StringBuffer();
	
		for(int k=0;k<dealLoanId.length;k++)
		{
			StringBuilder deleteChatge=new StringBuilder();
			StringBuilder deleteInstallment=new StringBuilder();
			StringBuilder deleteSecurity=new StringBuilder();
			StringBuilder deleteRepay=new StringBuilder();
			 deleteChatge.append("delete from cr_deal_txncharges_dtl where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+" and DEAL_LOAN_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId[k])).trim());
			 deleteSecurity.append("delete from cr_deal_sd_m where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+" and DEAL_LOAN_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId[k])).trim());
			 deleteInstallment.append("delete from cr_deal_installment_plan where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+" and DEAL_LOAN_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId[k])).trim());
			 deleteRepay.append("delete from cr_deal_repaysch_dtl where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+" and DEAL_LOAN_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId[k])).trim());
			logger.info("delete query:deleteChatge "+deleteChatge.toString());
			logger.info("delete query:deleteSecurity "+deleteSecurity.toString());
			logger.info("delete query:deleteInstallment "+deleteInstallment.toString());
			logger.info("delete query:deleteRepay "+deleteRepay.toString());
			qryList.add(deleteChatge);
			qryList.add(deleteSecurity);
			qryList.add(deleteInstallment);
			qryList.add(deleteRepay);
			
			deleteChatge=null;
			deleteSecurity=null;
			deleteInstallment=null;
			deleteRepay=null;
		}
		
             
		status=ConnectionDAO.sqlInsUpdDelete(qryList);
		logger.info("Status of Deletion is ="+status);
	    }
    	catch(Exception e)
    	{
		e.printStackTrace();
	}
	return status;
	}




	
	
	public ArrayList<Object> getLeadEntryList(String leadId) 
{
		ArrayList<Object> list=new ArrayList<Object>();
		try{
			StringBuilder query=new StringBuilder();
		 query.append("SELECT DEAL_ID,DEAL_APPLICATION_FORM_NO,");
		 query.append(dbo);
		 query.append("DATE_FORMAT(DEAL_DATE,'"+dateFormatWithTime+"'),");
		 query.append(dbo);
		 query.append("DATE_FORMAT(DEAL_ENCODED_DATE,'"+dateFormatWithTime+"'), ");
		 query.append("DEAL_BRANCH,b.BRANCH_DESC,DEAL_INDUSTRY_ID,i.INDUSTRY_DESC,DEAL_SUB_INDUSTRY_ID,s.SUB_INDUSTRY_DESC,DEAL_SOURCE_TYPE,DEAL_SOURCE_NAME,DEAL_VENDOR_CODE,DEAL_RM,r.USER_NAME,c.DEALER_DESC,DEAL_NO,DEAL_CATEGORY,d.LEAD_ID,L.CUSTOMER_NAME ");
		 query.append(",d.REC_STATUS,d.AREA_CODE,(SELECT B.AREA_CODE_NAME FROM com_areacode_m B WHERE B.AREA_CODE=d.AREA_CODE)AS areaCodeName,d.GENERATED_BY,(select DESCRIPTION from generic_master where value=DEAL_SOURCE_TYPE AND GENERIC_KEY='SOURCE_TYPE')lovSourceDes,sm.USER_NAME,DEAL_RO ,DEALER_EXECUTIVE_NAME,DEALER_MANAGER_NAME,DEAL_DATE,d.RATE_APPROVAL_REMARKS,");
		 query.append(" iif(L.LEAD_ID is null, ");
		 query.append(" CASE ISNULL(d.GENERATED_BY,'') WHEN 'RM' THEN  'RM / SALES EXEC' WHEN  'VENDOR' THEN 'VENDOR/DEALER' WHEN 'BRANCH' ");
		 query.append(" THEN 'TELECALLER / BRANCH'  ELSE  ISNULL(d.GENERATED_BY,'') END ,CASE ISNULL(d.GENERATED_BY,'') WHEN 'RM' THEN  'RM / SALES EXEC' WHEN  'VENDOR' THEN 'DEALER' WHEN 'BRANCH' ");
		 query.append(" THEN 'TELECALLER' WHEN 'RO' THEN 'RM / SALES EXEC' WHEN 'OTHERS' THEN 'OTHERS' ELSE  ISNULL(d.GENERATED_BY,'') END)AS SOURCE_TYPE_DESC,d.REFERRED_BY,d.FI_APPRAISER_NAME,d.FI_DECISION,d.FI_REMARKS,d.MAKER_REMARKS,d.CASE_VISITED_BY  ");
		 query.append(" from cr_deal_dtl d  ");
		 query.append("left join com_branch_m b on b.BRANCH_ID=d.DEAL_BRANCH ");
		 query.append("left join com_industry_m i on i.INDUSTRY_ID=d.DEAL_INDUSTRY_ID ");
		 query.append("left join com_sub_industry_m s on s.sub_industry_id=d.DEAL_SUB_INDUSTRY_ID ");
		 query.append("left join sec_user_m r on r.USER_ID=d.DEAL_RM ");
		 query.append("left join cr_dsa_dealer_m c on c.DEALER_ID=d.DEAL_VENDOR_CODE ");
		 query.append("left join cr_lead_dtl L on L.LEAD_ID=d.LEAD_ID " );
		 query.append("left join sec_user_m sm on sm.USER_ID=d.DEAL_RO ");
		 query.append("where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(leadId)).trim());
		
		logger.info("getLeadEntryList"+query.toString());
		CreditProcessingLeadEntryVo loanVo = null;
		ArrayList leaddeatail = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getLeadEntryList"+leaddeatail.size());
		
		query=null;
		
		for(int i=0;i<leaddeatail.size();i++){

			logger.info("getLeadEntryList"+leaddeatail.get(i).toString());
			ArrayList leaddeatail1=(ArrayList)leaddeatail.get(i);
			if(leaddeatail1.size()>0)
			{
				logger.info("getLeadEntryList"+leaddeatail1.size());
				loanVo = new CreditProcessingLeadEntryVo();
				loanVo.setDealId((CommonFunction.checkNull(leaddeatail1.get(0))).trim());
				loanVo.setApplicationFormNo((CommonFunction.checkNull(leaddeatail1.get(1))).trim());
				loanVo.setLeadDate((CommonFunction.checkNull(leaddeatail1.get(2))).trim().substring(0,10));
				loanVo.setLeadTime((CommonFunction.checkNull(leaddeatail1.get(29))).trim().substring(11,16));


				loanVo.setDateEncoded((CommonFunction.checkNull(leaddeatail1.get(3))).trim());

				loanVo.setLbxBranchId((CommonFunction.checkNull(leaddeatail1.get(4))).trim());
				loanVo.setBranch((CommonFunction.checkNull(leaddeatail1.get(5))).trim());

				loanVo.setLbxIndustry((CommonFunction.checkNull(leaddeatail1.get(6))).trim());
				loanVo.setIndustry((CommonFunction.checkNull(leaddeatail1.get(7))).trim());

				loanVo.setLbxSubIndustry((CommonFunction.checkNull(leaddeatail1.get(8))).trim());
				loanVo.setSubIndustry((CommonFunction.checkNull(leaddeatail1.get(9))).trim());
				//logger.info("Industry..  "+CommonFunction.checkNull(leaddeatail1.get(8)).toString());
				loanVo.setSource((CommonFunction.checkNull(leaddeatail1.get(10))).trim());
				loanVo.setSourcedesc((CommonFunction.checkNull(leaddeatail1.get(11))).trim());
				
				loanVo.setLbxvendorCode((CommonFunction.checkNull(leaddeatail1.get(12))).trim());
				loanVo.setLbxRelationship((CommonFunction.checkNull(leaddeatail1.get(13))).trim());
				loanVo.setRelationshipManager(CommonFunction.checkNull(leaddeatail1.get(14)).toString());
				loanVo.setVendorCode((CommonFunction.checkNull(leaddeatail1.get(15))).trim());
				loanVo.setDealNo((CommonFunction.checkNull(leaddeatail1.get(16))).trim());
				loanVo.setDealCat((CommonFunction.checkNull(leaddeatail1.get(17))).trim());
				loanVo.setLeadNo((CommonFunction.checkNull(leaddeatail1.get(18))).trim());
				loanVo.setCustomerName((CommonFunction.checkNull(leaddeatail1.get(19))).trim());
				loanVo.setRecStatus((CommonFunction.checkNull(leaddeatail1.get(20))).trim());
				loanVo.setLbxareaCodeVal((CommonFunction.checkNull(leaddeatail1.get(21))).trim());
				loanVo.setAreaCodename((CommonFunction.checkNull(leaddeatail1.get(22))).trim());
				loanVo.setLeadGeneratorBy((CommonFunction.checkNull(leaddeatail1.get(23))).trim());
				loanVo.setLovSourceDes((CommonFunction.checkNull(leaddeatail1.get(24))).trim());
				loanVo.setGeneratedUser((CommonFunction.checkNull(leaddeatail1.get(25))).trim());
				loanVo.setLeadRo((CommonFunction.checkNull(leaddeatail1.get(26))).trim());
				loanVo.setDealerExecutive((CommonFunction.checkNull(leaddeatail1.get(27))).trim());
				loanVo.setDealerManager((CommonFunction.checkNull(leaddeatail1.get(28))).trim());
				loanVo.setRateApprovalRemark((CommonFunction.checkNull(leaddeatail1.get(30))).trim());
				loanVo.setLeadGeneratorByDesc((CommonFunction.checkNull(leaddeatail1.get(31))).trim());
				loanVo.setReferredBy((CommonFunction.checkNull(leaddeatail1.get(32))).trim());
				
				loanVo.setFiAppraiserName((CommonFunction.checkNull(leaddeatail1.get(33))).trim());
				loanVo.setFidecisionDeal((CommonFunction.checkNull(leaddeatail1.get(34))).trim());
				loanVo.setFiRemarksDeal((CommonFunction.checkNull(leaddeatail1.get(35))).trim());
				loanVo.setMakerRemark((CommonFunction.checkNull(leaddeatail1.get(36))).trim());
				loanVo.setCaseVisitedBy((CommonFunction.checkNull(leaddeatail1.get(37))).trim());
				
				list.add(loanVo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}

	public ArrayList<Object> getsourceTypeList() {

		ArrayList<Object> list=new ArrayList<Object>();
		try{
			StringBuilder query=new StringBuilder();
		 query.append("SELECT M.VALUE,M.DESCRIPTION FROM generic_master M,generic_master_keys K WHERE K.GENERIC_KEY='SOURCE_TYPE' AND K.GENERIC_KEY=M.GENERIC_KEY and m.REC_STATUS='A'");
		logger.info("getsourceTypeList"+query.toString());
		CodeDescVo vo = null;
		ArrayList source = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getsourceTypeList"+source.size());
		
		query=null;
		
		for(int i=0;i<source.size();i++){

			logger.info("getsourceTypeList"+source.get(i).toString());
			ArrayList subsource=(ArrayList)source.get(i);
			if(subsource.size()>0)
			{
				logger.info("getsourceTypeList"+subsource.size());
				vo = new CodeDescVo();
				vo.setId((CommonFunction.checkNull(subsource.get(0))).trim());
				vo.setName((CommonFunction.checkNull(subsource.get(1))).trim());
				list.add(vo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
		}

	public ArrayList getBaseRateList(String businessdate) {
		ArrayList list=new ArrayList();
		try{
			StringBuilder query=new StringBuilder();
		 query.append("SELECT A.BASE_RATE_TYPE FROM cr_base_rate_m A WHERE A.REC_STATUS='A' and A.EFFECTIVE_FROM =" );
		 query.append(" (SELECT MAX(B.EFFECTIVE_FROM) FROM cr_base_rate_m B WHERE B.REC_STATUS='A' and " );
		 query.append("A.BASE_RATE_TYPE= B.BASE_RATE_TYPE AND B.EFFECTIVE_FROM <= ");
		 query.append(dbo);
		 query.append("STR_TO_DATE('"+businessdate+"','"+dateFormat+"'))");
		logger.info("query : "+query.toString());
		CodeDescVo branchVo=null;
		ArrayList baseRate = ConnectionDAO.sqlSelect(query.toString());
		logger.info("query : "+query.toString());
		
		query=null;
		
		for(int i=0;i<baseRate.size();i++){

			logger.info("getProductTypeList"+baseRate.get(i).toString());
			ArrayList baseRate1=(ArrayList)baseRate.get(i);
			if(baseRate1.size()>0)
			{
			    branchVo = new CodeDescVo();
			    
				branchVo.setId((CommonFunction.checkNull(baseRate1.get(0))).trim());
				 logger.info("id.................................. "+(CommonFunction.checkNull(baseRate1.get(0))).trim());
				list.add(branchVo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}

	public String getBaseRate(String baseRateType,String bDate) {

		String baseRate="";

		try{
			StringBuilder query=new StringBuilder();
			 query.append("SELECT BASE_RATE  from cr_base_rate_m where BASE_RATE_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(baseRateType))+"' and  REC_STATUS='A' and  EFFECTIVE_FROM=(select max(EFFECTIVE_FROM)");
			 query.append("from cr_base_rate_m where BASE_RATE_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(baseRateType))+"' and  REC_STATUS='A' and dbo.date(EFFECTIVE_FROM) <= ");
			 query.append(dbo);
			 query.append("STR_TO_DATE('"+bDate+"','"+dateFormat+"')) ");
			 query.append(" and dbo.date(EFFECTIVE_FROM) <= ");
			 query.append(dbo);
			 query.append("STR_TO_DATE('"+bDate+"','"+dateFormat+"') ");
			logger.info("getBaseRate"+query.toString());
			baseRate = ConnectionDAO.singleReturn(query.toString());
			logger.info("getBaseRate"+baseRate);
			
			query=null;
			
			}catch(Exception e){
				e.printStackTrace();
			}
			return baseRate;
	}

	public ArrayList getLoanDetailScheme(String scheme,String bdate) {
		ArrayList<Object> list=new ArrayList<Object>();
		try{
			
			StringBuilder query=new StringBuilder();
		 query.append("SELECT TOP 1 DEFAULT_MARGIN_RATE,RATE_TYPE,RATE_METHOD,S.BASE_RATE_TYPE,B.BASE_RATE,DEF_FLAT_RATE,");
		 query.append(" DEF_EFF_RATE,DEF_TENURE,REPAYMENT_FREQ,INSTALLMENT_TYPE,REPAYMENT_MODE,INSTALLMENT_MODE ,P.REPAYMENT_TYPE,P.REVOLVING_FLAG");
		 query.append(" ,MIN_MARGIN_RATE,MAX_MARGIN_RATE,MIN_TENURE,MAX_TENURE,MIN_AMT_FIN,MAX_AMT_FIN,P.ASSET_FLAG,p.DAYS_BASIS,S.FLOATING_FIXED_PERIOD,S.MIN_FLAT_RATE,S.MAX_FLAT_RATE,S.MIN_EFF_RATE,S.MAX_EFF_RATE " );
		 query.append("from cr_scheme_m S LEFT JOIN cr_base_rate_m B ON S.BASE_RATE_TYPE=B.BASE_RATE_TYPE AND B.rec_status='A' and b.EFFECTIVE_FROM <= ");
		 query.append(dbo);
		 query.append("STR_TO_DATE('"+bdate+"','"+dateFormat+"') ");
		 query.append(" LEFT JOIN cr_product_m P ON S.PRODUCT_ID=P.PRODUCT_ID");
		 query.append(" where SCHEME_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(scheme)).trim()+" AND S.REC_STATUS='A' " );
		 query.append(" order by b.EFFECTIVE_FROM desc ");
		 

		logger.info("getLoanDetailScheme  :  "+query.toString());
		SchemeVo schemeVo = null;
		ArrayList schemedeatail = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getLeadEntryList"+schemedeatail.size());
		
		query=null;
		
		for(int i=0;i<schemedeatail.size();i++){

			logger.info("getLeadEntryList"+schemedeatail.get(i).toString());
			ArrayList schemedeatail1=(ArrayList)schemedeatail.get(i);
			if(schemedeatail1.size()>0)
			{
				logger.info("getLeadEntryList"+schemedeatail1.size());
				schemeVo = new SchemeVo();
				if(!CommonFunction.checkNull(schemedeatail1.get(0)).equalsIgnoreCase(""))
				{
				Number reconNum =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(0))).trim());
				schemeVo.setDefMarginRate(myFormatter.format(reconNum));
				}
				schemeVo.setRateTYPE((CommonFunction.checkNull(schemedeatail1.get(1))).trim());
				schemeVo.setRateMethod((CommonFunction.checkNull(schemedeatail1.get(2))).trim());
				schemeVo.setBaseRateType((CommonFunction.checkNull(schemedeatail1.get(3))).trim());
				if(!CommonFunction.checkNull(schemedeatail1.get(4)).equalsIgnoreCase(""))
				{
					Number reconNumb =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(4))).trim());
					schemeVo.setBaseRate(myFormatter.format(reconNumb));
				}
				if(!CommonFunction.checkNull(schemedeatail1.get(5)).equalsIgnoreCase(""))
				{
					Number reconNumd =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(5))).trim());
					schemeVo.setDefFlatRate(myFormatter.format(reconNumd));
				}
				else
				{
					schemeVo.setDefFlatRate("0.0000000");
				}
				if(!CommonFunction.checkNull(schemedeatail1.get(6)).equalsIgnoreCase(""))
				{
					Number reconNume =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(6))).trim());
					schemeVo.setDefEffRate(myFormatter.format(reconNume));
				}
				else
				{
					schemeVo.setDefEffRate("0.0000000");
				}
				//schemeVo.setDefEffRate((CommonFunction.checkNull(schemedeatail1.get(6))).trim());
				schemeVo.setDefTenure((CommonFunction.checkNull(schemedeatail1.get(7))).trim());
				schemeVo.setRepaymentFREQ((CommonFunction.checkNull(schemedeatail1.get(8))).trim());
				schemeVo.setInstallmentTYPE((CommonFunction.checkNull(schemedeatail1.get(9))).trim());
				schemeVo.setRepaymentMODE((CommonFunction.checkNull(schemedeatail1.get(10))).trim());
				schemeVo.setInstallmentMODE((CommonFunction.checkNull(schemedeatail1.get(11))).trim());
				schemeVo.setRepaymentType((CommonFunction.checkNull(schemedeatail1.get(12))).trim());
				schemeVo.setRevolvingFlag((CommonFunction.checkNull(schemedeatail1.get(13))).trim());
				if(!CommonFunction.checkNull(schemedeatail1.get(14)).equalsIgnoreCase(""))
				{	
					Number reconNumm =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(14))).trim());
					schemeVo.setMinMarginRate(myFormatter.format(reconNumm));
				}
				//schemeVo.setMinMarginRate((CommonFunction.checkNull(schemedeatail1.get(14))).trim());
				if(!CommonFunction.checkNull(schemedeatail1.get(15)).equalsIgnoreCase(""))
				{	
					Number reconNumR =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(15))).trim());
					schemeVo.setMaxMarginRate(myFormatter.format(reconNumR));
				}
				//schemeVo.setMaxMarginRate((CommonFunction.checkNull(schemedeatail1.get(15))).trim());
				schemeVo.setMinTenure((CommonFunction.checkNull(schemedeatail1.get(16))).trim());
				schemeVo.setMaxTenure((CommonFunction.checkNull(schemedeatail1.get(17))).trim());
			
				if(!CommonFunction.checkNull(schemedeatail1.get(18)).equalsIgnoreCase(""))
				{
					Number reconNumf =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(18))).trim());
					schemeVo.setMinFinance(myFormatter.format(reconNumf));
				}
				
				//schemeVo.setMinFinance((CommonFunction.checkNull(schemedeatail1.get(18))).trim());
				if(!CommonFunction.checkNull(schemedeatail1.get(19)).equalsIgnoreCase(""))
				{
					Number reconNummF =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(19))).trim());
					schemeVo.setMaxFinance(myFormatter.format(reconNummF));
				}
				//schemeVo.setMaxFinance((CommonFunction.checkNull(schemedeatail1.get(19))).trim());
				schemeVo.setAssetFlag((CommonFunction.checkNull(schemedeatail1.get(20))).trim());
				schemeVo.setDaysBasis((CommonFunction.checkNull(schemedeatail1.get(21))).trim());
				schemeVo.setFixPriod((CommonFunction.checkNull(schemedeatail1.get(22))).trim());
				if(!CommonFunction.checkNull(schemedeatail1.get(23)).equalsIgnoreCase(""))
				{
					Number reconNumd =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(23))).trim());
					schemeVo.setMinFlatRate(myFormatter.format(reconNumd));
				}
				else
				{
					schemeVo.setMinFlatRate("0.0000000");
				}
				if(!CommonFunction.checkNull(schemedeatail1.get(24)).equalsIgnoreCase(""))
				{
					Number reconNumd =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(24))).trim());
					schemeVo.setMaxFlatRate(myFormatter.format(reconNumd));
				}
				else
				{
					schemeVo.setMaxFlatRate("0.0000000");
				}
			
		
				if(!CommonFunction.checkNull(schemedeatail1.get(25)).equalsIgnoreCase(""))
				{
					Number reconNumd =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(25))).trim());
					schemeVo.setMinEffectiveRate(myFormatter.format(reconNumd));
				}
				else
				{
					schemeVo.setMinEffectiveRate("0.0000000");
				}
				if(!CommonFunction.checkNull(schemedeatail1.get(26)).equalsIgnoreCase(""))
				{
					Number reconNumd =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(26))).trim());
					schemeVo.setMaxEffectiveRate(myFormatter.format(reconNumd));
				}
				else
				{
					schemeVo.setMaxEffectiveRate("0.0000000");
				}
		
				list.add(schemeVo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}

	
	public ArrayList getAllLoanDetails(String dealLoanId) 
	{
		logger.info("dealLoanId: "+dealLoanId);
		ArrayList<Object> list=new ArrayList<Object>();
		try{
		//con= (Connection) ConnectionDAO.getConnection();
			StringBuilder query=new StringBuilder();
		 query.append("SELECT DEAL_PRODUCT,DEAL_SCHEME,");
		 query.append(dbo);
		 query.append("DATE_FORMAT(DEAL_DISBURSAL_DATE,'"+dateFormat+"'),DEAL_ASSET_COST," );
		 query.append(" DEAL_MARGIN_RATE,DEAL_MARGIN_AMOUNT,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_REPAYMENT_FREQ,DEAL_RATE_TYPE," );
		 query.append(" DEAL_RATE_METHOD,DEAL_BASE_RATE_TYPE,DEAL_BASE_RATE,DEAL_MARKUP,DEAL_FINAL_RATE,DEAL_REPAYMENT_TYPE,DEAL_INSTALLMENT_TYPE," );
		 query.append(" DEAL_INSTALLMENT_MODE,DEAL_REPAYMENT_MODE,DEAL_LOAN_PURPOSE,DEAL_LOAN_ID,p.PRODUCT_DESC,s.SCHEME_DESC,s.MIN_AMT_FIN,s.MAX_AMT_FIN," );
		 query.append(" s.MIN_MARGIN_RATE,s.MAX_MARGIN_RATE,s.MIN_TENURE,s.MAX_TENURE,p.ASSET_FLAG,d.DEAL_NO_OF_INSTALLMENT,p.ASSET_FLAG,DEAL_SECTOR_TYPE," );
		 query.append(" DEAL_ADVANCE_INSTL,");
		 query.append(dbo);
		 query.append("DATE_FORMAT(DEAL_REPAY_EFF_DATE,'"+dateFormat+"') ,");
		 query.append(dbo);
		 query.append("DATE_FORMAT(DEAL_MATURITY_DATE,'"+dateFormat+"')," );
		 query.append(" DEAL_DUE_DAY,");
		 query.append(dbo);
		 query.append("DATE_FORMAT(NEXT_DUE_DATE,'"+dateFormat+"'),g.value,S.RATE_METHOD,DEAL_INT_CALC_FROM,d.NET_LTV,d.TENURE_IN_DAY,p.DAYS_BASIS,d.DEAL_FLOATING_FIXED_PERIOD,S.MIN_FLAT_RATE,S.MAX_FLAT_RATE,S.MIN_EFF_RATE,S.MAX_EFF_RATE,S.DEF_FLAT_RATE,S.DEF_EFF_RATE,d.NO_OF_ASSET,LOAN_CLASSIFICATION,pl.DESCRIPTION from cr_deal_loan_dtl d " );
		 query.append(" left join cr_product_m p on d.DEAL_PRODUCT=p.PRODUCT_ID left join cr_scheme_m s on d.DEAL_SCHEME=s.SCHEME_ID left join generic_master g " );
		 query.append(" on g.VALUE=d.LOAN_TYPE left join generic_master pl on pl.VALUE=d.DEAL_LOAN_PURPOSE where d.DEAL_LOAN_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId)).trim());
		logger.info("getAllLoanDetails: "+query.toString());
		//stmt=(Statement) con.createStatement();
		//rs=stmt.executeQuery(query);
		LoanDetailVo loanVo = null;
		ArrayList loandeatail = ConnectionDAO.sqlSelect(query.toString());
	//	logger.info("getAllLoanDetails"+loandeatail.size());
		
		query=null;
		
		if(loandeatail.size()>0){
		for(int i=0;i<loandeatail.size();i++){

			logger.info("getAllLoanDetails"+loandeatail.get(i).toString());
			ArrayList loandeatail1=(ArrayList)loandeatail.get(i);
			if(loandeatail1.size()>0)
			{
				logger.info("getAllLoanDetails"+loandeatail1.size());
				loanVo = new LoanDetailVo();
				loanVo.setLbxProductID((CommonFunction.checkNull(loandeatail1.get(0))).trim());
				loanVo.setLbxscheme((CommonFunction.checkNull(loandeatail1.get(1))).trim());
				loanVo.setDisbursalDate((CommonFunction.checkNull(loandeatail1.get(2))).trim());
				if(!CommonFunction.checkNull(loandeatail1.get(3)).equalsIgnoreCase(""))
				{
					Number reconNum =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(3))).trim());
					loanVo.setAssetCost(myFormatter.format(reconNum));
				}
				if(!CommonFunction.checkNull(loandeatail1.get(4)).equalsIgnoreCase(""))
				{
					Number reconNumP =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(4))).trim());
					loanVo.setMarginPerc(myFormatter.format(reconNumP));
					loanVo.setLtvPerc(myFormatter.format(100-reconNumP.doubleValue()));
				}
				else
				{
					loanVo.setLtvPerc("100.00");
				}
				//loanVo.setMarginPerc((CommonFunction.checkNull(loandeatail1.get(4))).trim());
				//logger.info("Margin Amount: "+(CommonFunction.checkNull(loandeatail1.get(5))).trim());
				if(!CommonFunction.checkNull(loandeatail1.get(5)).equalsIgnoreCase(""))
				{
					Number reconNumA =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(5))).trim());
					loanVo.setMarginAmount(myFormatter.format(reconNumA));
				}
				//loanVo.setMarginAmount((CommonFunction.checkNull(loandeatail1.get(5))).trim());
				if(!CommonFunction.checkNull(loandeatail1.get(6)).equalsIgnoreCase(""))
				{
					Number reconNumL =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(6))).trim());
					loanVo.setRequestedLoanAmount(myFormatter.format(reconNumL));
				}
				//loanVo.setRequestedLoanAmount((CommonFunction.checkNull(loandeatail1.get(6))).trim());
				loanVo.setRequestedLoanTenure((CommonFunction.checkNull(loandeatail1.get(7))).trim());
				loanVo.setFrequency((CommonFunction.checkNull(loandeatail1.get(8))).trim());
				loanVo.setRateType((CommonFunction.checkNull(loandeatail1.get(9))).trim());
				loanVo.setType((CommonFunction.checkNull(loandeatail1.get(10))).trim());
				 logger.info("base rate type............... "+(CommonFunction.checkNull(loandeatail1.get(11))).trim());
				loanVo.setBaseRateType((CommonFunction.checkNull(loandeatail1.get(11))).trim());
				if(!CommonFunction.checkNull(loandeatail1.get(12)).equalsIgnoreCase(""))
				{
					Number reconNumb =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(12))).trim());
					loanVo.setBaseRate(myFormatter.format(reconNumb));
				}
				//loanVo.setBaseRate((CommonFunction.checkNull(loandeatail1.get(12))).trim());
				if(!CommonFunction.checkNull(loandeatail1.get(13)).equalsIgnoreCase(""))
				{
					Number reconNumU =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(13))).trim());
					loanVo.setMarkUp(myFormatter.format(reconNumU));
				}
				//loanVo.setMarkUp((CommonFunction.checkNull(loandeatail1.get(13))).trim());
				if(!CommonFunction.checkNull(loandeatail1.get(14)).equalsIgnoreCase(""))
				{
					Number reconNumE =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(14))).trim());
					loanVo.setEffectiveRate(myFormatter.format(reconNumE));
				}
				//loanVo.setEffectiveRate((CommonFunction.checkNull(loandeatail1.get(14))).trim());

				loanVo.setRepaymentType((CommonFunction.checkNull(loandeatail1.get(15))).trim());
				if(CommonFunction.checkNull(loandeatail1.get(15)).trim().equalsIgnoreCase("I"))
				{
					loanVo.setShowRepaymentType("INSTALLMENT");
				}
				else if(CommonFunction.checkNull(loandeatail1.get(15)).trim().equalsIgnoreCase("N"))
				{
					loanVo.setShowRepaymentType("NON-INSTALLMENT");
				}
				loanVo.setInstallmentType((CommonFunction.checkNull(loandeatail1.get(16))).trim());
				loanVo.setInstMode((CommonFunction.checkNull(loandeatail1.get(17))).trim());
				loanVo.setPaymentMode((CommonFunction.checkNull(loandeatail1.get(18))).trim());
				loanVo.setLbxLoanPurpose((CommonFunction.checkNull(loandeatail1.get(19))).trim());
				loanVo.setDealLoanId((CommonFunction.checkNull(loandeatail1.get(20))).trim());
				loanVo.setProduct((CommonFunction.checkNull(loandeatail1.get(21))).trim());
				loanVo.setScheme((CommonFunction.checkNull(loandeatail1.get(22))).trim());
				if(!CommonFunction.checkNull(loandeatail1.get(23)).equalsIgnoreCase(""))
				{
					Number reconNumf =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(23))).trim());
					loanVo.setMinFinanceAmount(myFormatter.format(reconNumf));
				}
               // loanVo.setMinFinanceAmount((CommonFunction.checkNull(loandeatail1.get(23))).trim());
				if(!CommonFunction.checkNull(loandeatail1.get(24)).equalsIgnoreCase(""))
				{
					Number reconNummf =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(24))).trim());
					loanVo.setMaxFinanceAmount(myFormatter.format(reconNummf));
				}
               // loanVo.setMaxFinanceAmount((CommonFunction.checkNull(loandeatail1.get(24))).trim());
				if(!CommonFunction.checkNull(loandeatail1.get(25)).equalsIgnoreCase(""))
				{
					Number reconNummr =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(25))).trim());
					loanVo.setMinMRate(myFormatter.format(reconNummr));
				}
                //loanVo.setMinMRate((CommonFunction.checkNull(loandeatail1.get(25))).trim());
				if(!CommonFunction.checkNull(loandeatail1.get(26)).equalsIgnoreCase(""))
				{
					Number reconNummm =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(26))).trim());
					loanVo.setMaxMRate(myFormatter.format(reconNummm));
				}
               // loanVo.setMaxMRate((CommonFunction.checkNull(loandeatail1.get(26))).trim());
                loanVo.setMinTenure((CommonFunction.checkNull(loandeatail1.get(27))).trim());
                loanVo.setMaxTenure((CommonFunction.checkNull(loandeatail1.get(28))).trim());
                loanVo.setAssetFlag((CommonFunction.checkNull(loandeatail1.get(29))).trim());
                loanVo.setNoOfInstall((CommonFunction.checkNull(loandeatail1.get(30))).trim());
                loanVo.setProductTypeFlag((CommonFunction.checkNull(loandeatail1.get(31))).trim());
                loanVo.setSectorType((CommonFunction.checkNull(loandeatail1.get(32))).trim());
                
                loanVo.setInstallments((CommonFunction.checkNull(loandeatail1.get(33))).trim());
                loanVo.setRepayEffectiveDate((CommonFunction.checkNull(loandeatail1.get(34))).trim());
                loanVo.setMaturityDate((CommonFunction.checkNull(loandeatail1.get(35))).trim());
                loanVo.setCycleDate((CommonFunction.checkNull(loandeatail1.get(36))).trim());
                loanVo.setNextDueDate((CommonFunction.checkNull(loandeatail1.get(37))).trim());
                loanVo.setLoanType((CommonFunction.checkNull(loandeatail1.get(38))).trim());
                loanVo.setRateMethodType((CommonFunction.checkNull(loandeatail1.get(39))).trim());
                logger.info("getAllLoanDetails: Interest Calc From---"+CommonFunction.checkNull(loandeatail1.get(40)));
                loanVo.setInterestCalc((CommonFunction.checkNull(loandeatail1.get(40))).trim());
                loanVo.setNetLtv((CommonFunction.checkNull(loandeatail1.get(41))).trim());
                loanVo.setTenureInDay((CommonFunction.checkNull(loandeatail1.get(42))).trim());
                loanVo.setDaysBasis((CommonFunction.checkNull(loandeatail1.get(43))).trim());
                loanVo.setFixPriod((CommonFunction.checkNull(loandeatail1.get(44))).trim());
                
                if(!CommonFunction.checkNull(loandeatail1.get(45)).equalsIgnoreCase(""))
				{
					Number reconNumd =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(45))).trim());
					loanVo.setMinFlatRate(myFormatter.format(reconNumd));
				}
				else
				{
					loanVo.setMinFlatRate("0.0000000");
				}
				if(!CommonFunction.checkNull(loandeatail1.get(46)).equalsIgnoreCase(""))
				{
					Number reconNumd =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(46))).trim());
					loanVo.setMaxFlatRate(myFormatter.format(reconNumd));
				}
				else
				{
					loanVo.setMaxFlatRate("0.0000000");
				}
			
		
				if(!CommonFunction.checkNull(loandeatail1.get(47)).equalsIgnoreCase(""))
				{
					Number reconNumd =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(47))).trim());
					loanVo.setMinEffectiveRate(myFormatter.format(reconNumd));
				}
				else
				{
					loanVo.setMinEffectiveRate("0.0000000");
				}
				if(!CommonFunction.checkNull(loandeatail1.get(48)).equalsIgnoreCase(""))
				{
					Number reconNumd =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(48))).trim());
					loanVo.setMaxEffectiveRate(myFormatter.format(reconNumd));
				}
				else
				{
					loanVo.setMaxEffectiveRate("0.0000000");
				}
			    
				if(!CommonFunction.checkNull(loandeatail1.get(49)).equalsIgnoreCase(""))
				{
					Number reconNumd =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(49))).trim());
					loanVo.setDefaultFlatRate(myFormatter.format(reconNumd));
				}
				else
				{
					loanVo.setDefaultFlatRate("0.0000000");
				}
				if(!CommonFunction.checkNull(loandeatail1.get(50)).equalsIgnoreCase(""))
				{
					Number reconNumd =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(50))).trim());
					loanVo.setDefaultEffectiveRate(myFormatter.format(reconNumd));
				}
				else
				{
					loanVo.setDefaultEffectiveRate("0.0000000");
				}
				loanVo.setNoOfAsset((CommonFunction.checkNull(loandeatail1.get(51))).trim());
				loanVo.setLbxLoanClassification((CommonFunction.checkNull(loandeatail1.get(52))).trim());
				loanVo.setLoanPurpose((CommonFunction.checkNull(loandeatail1.get(53))).trim());
                
                list.add(loanVo);
			}
		}}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}



	public ArrayList getUnderWriterData(String id) {
		ArrayList list=new ArrayList();
		try{
			logger.info("In getUnderWriterData..........................DAOImpl"+id);
			StringBuilder query=new StringBuilder();
			 query.append(" select distinct d.deal_no,d.deal_application_form_no,g.CUSTOMER_NAME, d.deal_source_type,d.deal_source_name,r.USER_NAME, ");
					   // "if((select count(1) from cr_deal_verification_dtl where REC_STATUS='C' AND VERIFICATION_ACTION='I' and VERIFICATION_STATUS !='W' and DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()+"' LIMIT 1)>0,'N','Y')as allWaived, "+
			 query.append("case when (select " );
			 if(dbType.equalsIgnoreCase("MSSQL"))
				{
				 query.append(" TOP 1 ");
					
				}
			 query.append(  " count(1) from cr_deal_verification_dtl where REC_STATUS='C' AND VERIFICATION_ACTION='I' and VERIFICATION_STATUS !='W' and DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()+"'" );
            if(!dbType.equalsIgnoreCase("MSSQL") && dbo.equalsIgnoreCase(""))
				{
				 query.append(" LIMIT 1 ");
					
				}
			query.append(")>0 then 'N' else 'Y' end as allWaived,");
			query.append("(select distinct " );
		     if(dbType.equalsIgnoreCase("MSSQL"))
				{
				 query.append(" TOP 1 ");
					
				}
		     query.append("  VERIFICATION_STATUS from cr_deal_verification_dtl where REC_STATUS='C' AND VERIFICATION_ACTION='I' and DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()+"'");
		      if(!dbType.equalsIgnoreCase("MSSQL") && dbo.equalsIgnoreCase(""))
				{
				 query.append(" LIMIT 1 ");
					
				}
		      query.append(	")as fv_stats, ");
		      query.append("(select distinct ");
		      if(dbType.equalsIgnoreCase("MSSQL"))
				{
				 query.append(" TOP 1 ");
					
				}
		      query.append("  VERIFICATION_REMARKS from cr_deal_verification_dtl where REC_STATUS='C'AND VERIFICATION_ACTION='I' and DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()+"'" );
		      if(!dbType.equalsIgnoreCase("MSSQL") && dbo.equalsIgnoreCase(""))
				{
				 query.append(" LIMIT 1 ");
					
				}
		      query.append(	")as fv_remarks, ");
		     // query.append("if((select count(1) from cr_policy_decision where REC_STATUS='A' and DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()+"')>0,'Y','N')as deviationStats,DEAL_CUSTOMER_TYPE  ");
		      query.append("case when (select count(1) from cr_policy_decision where REC_STATUS='A' and DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()+"')>0 then 'Y' else 'N' end as deviationStats,DEAL_CUSTOMER_TYPE, ");
		      query.append("(select count(1) from cr_deal_verification_dtl where VERIFICATION_ACTION='I' AND deal_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()+"') as verificationStatus, ");
		      query.append("(select count(1) from cr_deal_verification_dtl where deal_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()+"') as verification ");
		      query.append(" from cr_deal_dtl d,cr_deal_customer_m g,sec_user_m r where d.deal_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()+"' ");
		      	query.append( " and d.deal_customer_id =g.CUSTOMER_ID and d.DEAL_RM=r.USER_ID ");
			
			logger.info("In getUnderWriterData...............query...........DAOImpl"+query.toString());
			CommonPageVo noteVO=null;
			ArrayList product = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getUnderWriterData "+product.size());
			
			query=null;
			
			for(int i=0;i<product.size();i++){
				logger.info("getUnderWriterData...Outer FOR loop "+CommonFunction.checkNull(product.get(i)).toString());
				ArrayList data=(ArrayList)product.get(i);
				if(data.size()>0)	{
					noteVO = new CommonPageVo();
					noteVO.setDealNo((CommonFunction.checkNull(data.get(0))).trim());
					noteVO.setApplicationFormNo((CommonFunction.checkNull(data.get(1))).trim());
					noteVO.setCustomerName((CommonFunction.checkNull(data.get(2))).trim());
					noteVO.setsourcingPartnerType((CommonFunction.checkNull(data.get(3))).trim());
					noteVO.setSourcingPartnerName((CommonFunction.checkNull(data.get(4))).trim());
					noteVO.setDealRm((CommonFunction.checkNull(data.get(5))).trim());
					noteVO.setAllWaived((CommonFunction.checkNull(data.get(6))).trim());
					noteVO.setFieldResults((CommonFunction.checkNull(data.get(7))).trim());
					noteVO.setFieldRemarks((CommonFunction.checkNull(data.get(8))).trim());
					noteVO.setDevResults(CommonFunction.checkNull(data.get(9)).trim());
					noteVO.setCustomerType(CommonFunction.checkNull(data.get(10)).trim());
					noteVO.setVerificationStatus(CommonFunction.checkNull(data.get(11)).trim());
					noteVO.setVerification(CommonFunction.checkNull(data.get(12)).trim());
					list.add(noteVO);
				}
			}
		}
		catch(Exception e){
			e.printStackTrace();
		}

		return list;
	}

	public ArrayList getCreditDecisionData(String dealId) {
		ArrayList list=new ArrayList();
		try{
			double sancAmtDisp=0.0;
			logger.info("In getCreditDecisionData..........................DAOImpl"+dealId);
			String valDays="";
			StringBuilder valQuery = new StringBuilder();
			valQuery.append("select Validity_Days from cr_scheme_m csm left join cr_deal_loan_dtl cld on (cld.DEAL_SCHEME=csm.SCHEME_ID) and (cld.DEAL_PRODUCT=csm.PRODUCT_ID) where cld.deal_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"'");
			logger.info("Validity days query : " + valQuery.toString());
			valDays=ConnectionDAO.singleReturn(valQuery.toString());
			StringBuilder query=new StringBuilder();
			 query.append("select dl.deal_loan_id,d.deal_id,p.PRODUCT_DESC," );
			 //query.append("if(dl.deal_product_type='R','Revoloving','Non-Revoloving') deal_product_type ," );
			 query.append(" case when p.revolving_flag='Y' then 'Revolving' else 'Non-Revolving' end as deal_product_type,");
			 query.append(" dl.deal_loan_purpose, dl.deal_loan_amount,dl.deal_sanction_amount," );
			 query.append("dl.deal_tenure,dl.DEAL_FLAT_RATE,");
			 query.append(dbo);
			 query.append("DATE_FORMAT(dl.DEAL_SANCTION_VALID_TILL,'"+dateFormat+"')," );
			 query.append("dl.DEAL_IRR2,dl.DEAL_EFF_RATE,she.MIN_IRR,she.MAX_IRR,dl.DEAL_REPAYMENT_TYPE,(select dbo.DATE_FORMAT(DATEADD(DAY,"+CommonFunction.checkNull(valDays).trim()+",PARAMETER_VALUE),'%d-%m-%Y') from parameter_mst where PARAMETER_KEY='BUSINESS_DATE')as valid_date" );
			 query.append(" from cr_deal_loan_dtl dl, cr_deal_dtl d, cr_product_m p ,cr_scheme_m she" );
			 query.append(" where d.deal_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' " );
			 query.append("and dl.deal_id=d.deal_id and dl.deal_product=p.PRODUCT_ID and she.SCHEME_ID = dl.DEAL_SCHEME");
			logger.info("In getCreditDecisionData...............query...........DAOImpl"+query.toString());
			
			CommonPageVo noteVO=null;
			ArrayList product = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getCreditDecisionData "+product.size());
			
			query=null;
			
			for(int i=0;i<product.size();i++){
				logger.info("getCreditDecisionData...Outer FOR loop "+CommonFunction.checkNull(product.get(i)).toString());
				ArrayList data=(ArrayList)product.get(i);
		  if(data.size()>0)	{
					noteVO = new CommonPageVo();
					noteVO.setDealLoanId((CommonFunction.checkNull(data.get(0))).trim());
					noteVO.setDealId((CommonFunction.checkNull(data.get(1))).trim());
					noteVO.setProduct((CommonFunction.checkNull(data.get(2))).trim());
					noteVO.setCreditType((CommonFunction.checkNull(data.get(3))).trim());
					noteVO.setPurpose((CommonFunction.checkNull(data.get(4))).trim());
					
					if(!CommonFunction.checkNull(data.get(5)).equalsIgnoreCase(""))
					{
						Number reconNummm =myFormatter.parse((CommonFunction.checkNull(data.get(5))).trim());
						noteVO.setRequestAmt(myFormatter.format(reconNummm));
					}
					
					//noteVO.setRequestAmt((CommonFunction.checkNull(data.get(5))).trim());
					
					if(!CommonFunction.checkNull(data.get(6)).equalsIgnoreCase(""))
					{
						Number reconNummm =myFormatter.parse((CommonFunction.checkNull(data.get(6))).trim());
						noteVO.setSancAmt(myFormatter.format(reconNummm));
					}
					noteVO.setSancAmt((CommonFunction.checkNull(data.get(6))).trim());
					noteVO.setUnderTenure((CommonFunction.checkNull(data.get(7))).trim());
					if(!CommonFunction.checkNull(data.get(8)).equalsIgnoreCase(""))
					{
						Number reconNummm =myFormatter.parse((CommonFunction.checkNull(data.get(8))).trim());
						noteVO.setEmi(myFormatter.format(reconNummm));
					}
					//noteVO.setEmi((CommonFunction.checkNull(data.get(8))).trim());
					if(noteVO.getSancAmt()!=null && !(noteVO.getSancAmt()).equals(""))
					{
						sancAmtDisp=sancAmtDisp+Double.parseDouble((noteVO.getSancAmt()));
						if(!CommonFunction.checkNull(sancAmtDisp).equalsIgnoreCase(""))
						{
							Number reconNummm =myFormatter.parse(CommonFunction.checkNull(sancAmtDisp));
							//noteVO.setSancAmt(myFormatter.format(reconNummm));
							noteVO.setSancAmtDisp(myFormatter.format(reconNummm));
						}
						
					}
					if(!CommonFunction.checkNull(data.get(6)).equalsIgnoreCase(""))
					{
						Number reconNummm =myFormatter.parse((CommonFunction.checkNull(data.get(6))).trim());
						noteVO.setSancAmt(myFormatter.format(reconNummm));
					}
					if(CommonFunction.checkNull(data.get(9)).equalsIgnoreCase(""))
					{
						logger.info("sanc valid date : " + data.get(15));
						noteVO.setSancDate((CommonFunction.checkNull(data.get(15))).trim());
					}
					else
					{
						noteVO.setSancDate((CommonFunction.checkNull(data.get(9))).trim());
					}
					if(!CommonFunction.checkNull(data.get(10)).equalsIgnoreCase(""))
					{
						Number reconNummm =myFormatter.parse((CommonFunction.checkNull(data.get(10))).trim());
						noteVO.setBusIrr(myFormatter.format(reconNummm));
					}
					if(!CommonFunction.checkNull(data.get(10)).equalsIgnoreCase(""))
					{
						Number reconNummm =myFormatter.parse((CommonFunction.checkNull(data.get(10))).trim());
						noteVO.setBusIrr(myFormatter.format(reconNummm));
					}
					if(!CommonFunction.checkNull(data.get(11)).equalsIgnoreCase(""))
					{
						Number reconNummm =myFormatter.parse((CommonFunction.checkNull(data.get(11))).trim());
						noteVO.setEffectiveRate(myFormatter.format(reconNummm));
					}
					noteVO.setMinIRR((CommonFunction.checkNull(data.get(12))).trim());
					noteVO.setMaxIRR((CommonFunction.checkNull(data.get(13))).trim());
					noteVO.setRepayType((CommonFunction.checkNull(data.get(14))).trim());
					list.add(noteVO);
				}

			}
		}
		catch(Exception e){
			e.printStackTrace();
		}

		return list;
	}

	
	
	
	public ArrayList getApplicationDocuments(String entityType,String commonId,String stage, String txnType,String source) {
		ArrayList<Object> list=new ArrayList<Object>();
		try
		{
			String table="cr_document_dtl";
			if(CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
				table="cr_document_dtl_edit";
		StringBuilder query=new StringBuilder();	
		 query.append("  SELECT TXN_DOC_ID,DOC_ID,DOC_DESC,");
		 query.append(dbo);
		 query.append("DATE_FORMAT(DOC_RECEIVED_DATE,'"+dateFormat+"'),"); 
		 query.append(dbo);
		 query.append("DATE_FORMAT(DOC_DEFFRED_DATE,'"+dateFormat+"'),");
		 query.append(dbo);
		 query.append("DATE_FORMAT(DOC_EXPIRY_DATE,'"+dateFormat+"'), ");
		 query.append("	DOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS,Doc_Expiry_Flag,DOC_CHILD_FLAG,DOC_CHILD_IDS,d.ENTITY_ID ");
		 query.append("	from "+table+" d ");
		 query.append("	where DOC_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()+"'and TXNID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()+" and TXN_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()+"' and STAGE_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()+"'and ENTITY_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()+"");
		logger.info("getDocumentsDetai Queryl: "+query.toString());
		DocumentsVo docsVo = null;
		ArrayList docsdeatail = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getDocumentsDetail OUTER ARRAYLIST SIZE: "+docsdeatail.size());
		
		
		
		for(int i=0;i<docsdeatail.size();i++){

			ArrayList docsdeatail1=(ArrayList)docsdeatail.get(i);
			if(docsdeatail1.size()>0)
			{
				docsVo = new DocumentsVo();
				docsVo.setDocId((CommonFunction.checkNull(docsdeatail1.get(0))).trim());
				docsVo.setRealDocId((CommonFunction.checkNull(docsdeatail1.get(1))).trim());
				docsVo.setDocDesc((CommonFunction.checkNull(docsdeatail1.get(2))).trim());
				docsVo.setRecieveDate((CommonFunction.checkNull(docsdeatail1.get(3))).trim());
				docsVo.setDeferDate((CommonFunction.checkNull(docsdeatail1.get(4))).trim());
				docsVo.setExpirDate((CommonFunction.checkNull(docsdeatail1.get(5))).trim());

				if((CommonFunction.checkNull(docsdeatail1.get(6)).trim()).equals("Y"))
				{
					docsVo.setMandatory("MANDATORY");
				}
				else if((CommonFunction.checkNull(docsdeatail1.get(6)).trim()).equals("N"))
				{
					docsVo.setMandatory("NON-MANDATORY");
				}

				if((CommonFunction.checkNull(docsdeatail1.get(7)).trim()).equals("Y"))
				{
					docsVo.setOriginal("ORIGINAL");
				}
				else if((CommonFunction.checkNull(docsdeatail1.get(7)).trim()).equals("N"))
				{
					docsVo.setOriginal("PHOTOCOPY");
				}

				docsVo.setDocStatus((CommonFunction.checkNull(docsdeatail1.get(8))).trim());
				docsVo.setRemark((CommonFunction.checkNull(docsdeatail1.get(9))).trim());
				docsVo.setExpirFlag((CommonFunction.checkNull(docsdeatail1.get(10))).trim());
				docsVo.setDocChildFlag((CommonFunction.checkNull(docsdeatail1.get(11))).trim());
				docsVo.setDocChildId((CommonFunction.checkNull(docsdeatail1.get(12))).trim());
				docsVo.setEntityId((CommonFunction.checkNull(docsdeatail1.get(13))).trim());
				list.add(docsVo);
			}
			query=null;
		}

		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}


public boolean saveCollateralDetails(Object ob) {
		
		int maxId=0;
		CollateralVo vo = (CollateralVo)ob;
		qryList = new ArrayList();
		qryList1 = new ArrayList();
		String standard="";
		boolean status = false;
		StringBuffer bufInsUpdSql = new StringBuffer();
		PrepStmtObject  insertPrepStmtObject =  new PrepStmtObject();
		StringBuffer bufInsUpdSql1 = new StringBuffer();

		PrepStmtObject  insertPrepStmtObject1 =  new PrepStmtObject();
		logger.info("vo.getAssetStandard::::::Insert::::::::"+vo.getAssetStandard());
		logger.info("getColltype2::::::Insert::::::::"+vo.getColltype2());
		 if(vo.getColltype2().equalsIgnoreCase("ASSET")){
		    if (vo.getAssetStandard()!= null && vo.getAssetStandard().equals("on")) {
			standard = "Y";
		    }else {
			standard = "N";}
		 }

		try {  
			bufInsUpdSql.append("insert into cr_asset_collateral_m(ASSET_TYPE,ASSET_NEW_OLD,ASSET_COLLATERAL_CLASS,ASSET_COLLATERAL_DESC, ASSET_COLLATERAL_VALUE, " +
					"ASSET_SUPPLIER,ASSET_MANUFATURER,ASSET_SUPPLIER_DESC,ASSET_MANUFATURER_DESC,COLLATERAL_SECURITY_MARGIN,DEFAULT_LTV, FD_AMOUNT, FD_TENURE, FD_RATE, FD_BOOK_DATE, FD_MATURITY_DATE, FD_AGENCY_NAME, FD_AGENCY_RATING, " +
					"FD_APPLICANT, SBLC_AMOUNT, SBLC_VALIDITY, SBLC_ISSUING_DATE, SBLC_PARENT_COMPANY, SECURITY_TYPE, SECURITY_CATEGORY, " +
					"SECURITY_MARKET_VALUE, MACHINE_MAKE, MACHINE_MODEL, MACHINE_TYPE, MACHINE_OWNER, MACHINE_MANUFACTURING_YEAR, MACHINE_IDENTIFICATION_NO, " +
					"MACHINE_COLLATERAL_COST, MACHINE_MARGIN, PROPERTY_TYPE, PROPERTY_ADDRESS, ADDRESS_LINE2, ADDRESS_LINE3, COUNTRY, STATE, DISTRICT, PINCODE, TEHSIL, PROPERTY_AREA, PROPERTY_CONSTRUCTION, " +
					"PROPERY_VALUE, PROPERTY_OWNER,MORTAGE_TYPE, VEHICLE_MAKE, VEHICLE_MODEL, MAKE_MODEL_ID, VEHICLE_TYPE, VEHICLE_OWNER, VEHICLE_MANUFACTURING_YEAR, " +
					"VEHICLE_REGISTRATION_NO, VEHICLE_REGISTRATION_DATE, VEHICLE_CHASIS_NUMBER, VEHICLE_Insurer, VEHICLE_INSURED_DATE, " +
					"VEHICLE_COLLATERAL_COST, VEHICLE_MARGIN, STOCK_TYPE, STOCK_NATURE, STOCK_VALUE, STOCK_GODOWN_ADDRESS, STOCK_INVENTORY_CYCLE, " +
					"DEBTOR_TYPE, DEBTOR_TOTAL_OUTSTANDING,BG_TYPE,BG_AMOUNT,BG_ISSUE_DATE,BG_VALIDITY_DATE,BG_ISSUING_BANK,INVOICE_DATE," +
					"ASSET_LEVEL,VILLAGE_NAME_LANDMARK,TXN_VALUE,TECH_VERIFICATION,DOCUMENT_VALUE,ADDITIONAL_CONSTRUCTION,BUILT_UP_AREA,REC_STATUS, MAKER_ID, MAKER_DATE," +
					"MACHINE_VALUE,MACHINE_DISCOUNT,VEHICLE_VALUE,VEHICLE_DISCOUNT,LOAN_AMOUNT,SECURITY,VEHICLE_ASSET_STATE,VEHICLE_ASSET_USES_TYPE,ASSET_STANDARD,LAWYER_NAME,VALUER_NAME,PROPERTY_DIRECTION,ENGINE_NUMBER,PROPERTY_TITLE,PROPERTY_STATUS,CARPET_AREA,TECHNICAL_VAL1,TECHNICAL_VAL2,BUILDUPAREASQMTR,ISSUEING_BANK_ID,ISSUEING_BRANCH_ID,SUPER_BUILDUP_AREA,PROPERTY_OWNER_GCD_ID,VALUATION_METHOD_ID,VALUATION_AMOUNT," +
					"INSURANCE_POLICY_NO,INSURANCE_PREMIUM_AMOUNT,INSURANCE_POLICY_START_DATE,INSURANCE_MATURITY_DATE,INSURANCE_PREMIUM_FREQUENCY,INSURANCE_NOMINEE,INSURANCE_RELATION_WITH_NOMINEE,INSURANCE_TENURE,INSURANCE_AGENCY,COVER_NOTE,SUM_ASSURED,VEHICLE_IDV,VEHICLE_VALUATION_AMOUNT,VEHICLE_GRID_VALUE,INVOICE_NO,VECHICLE_INVOICE_DATE,RC_RECEIVED,RC_RECEIVED_DATE,PROPERTY_TOTAL_AREA,DEALER_EXECUTIVE_ID,DEALER_MANAGER_ID)");
	
			bufInsUpdSql.append("values(");
			bufInsUpdSql.append(" ?," ); //ASSET_TYPE
			bufInsUpdSql.append(" ?," ); //ASSET_NEW_OLD
			bufInsUpdSql.append(" ?," );//ASSET_COLLATERAL_CLASS
			bufInsUpdSql.append(" ?," );//ASSET_COLLATERAL_DESC
			bufInsUpdSql.append(" ?," ); //ASSET_COLLATERAL_VALUE
			bufInsUpdSql.append(" ?," );//ASSET_SUPPLIER
			bufInsUpdSql.append(" ?," ); //ASSET_MANUFATURER
			bufInsUpdSql.append(" ?," ); //ASSET_SUPPLIER_DESC
			bufInsUpdSql.append(" ?," );//ASSET_MANUFATURER_DESC
			bufInsUpdSql.append(" ?," ); //COLLATERAL_SECURITY_MARGIN
			bufInsUpdSql.append(" ?," ); //DEfault LTV
			bufInsUpdSql.append(" ?," ); //FD_AMOUNT
			bufInsUpdSql.append(" ?," ); //FD_TENURE
			bufInsUpdSql.append(" ?," ); //FD_RATE
			bufInsUpdSql.append(dbo);
			bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),");//FD_BOOK_DATE
			bufInsUpdSql.append(dbo);
			bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),");//FD_MATURITY_DATE
			bufInsUpdSql.append(" ?," ); 	//FD_AGENCY_NAME
			bufInsUpdSql.append(" ?," ); //FD_AGENCY_RATING
			bufInsUpdSql.append(" ?," ); //FD_APPLICANT
			bufInsUpdSql.append(" ?," );//SBLC_AMOUNT
			bufInsUpdSql.append(dbo);
			bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),"); //SBLC_VALIDITY
			bufInsUpdSql.append(dbo);
			bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),");	//SBLC_ISSUING_DATE
			bufInsUpdSql.append(" ?," );//SBLC_PARENT_COMPANY
			bufInsUpdSql.append(" ?," ); //SECURITY_TYPE
			bufInsUpdSql.append(" ?," );//SECURITY_CATEGORY
			bufInsUpdSql.append(" ?," ); //SECURITY_MARKET_VALUE
			bufInsUpdSql.append(" ?," ); //MACHINE_MAKE
			bufInsUpdSql.append(" ?," );//MACHINE_MODEL
			bufInsUpdSql.append(" ?," ); //MACHINE_TYPE
			bufInsUpdSql.append(" ?," );//MACHINE_OWNER
			bufInsUpdSql.append(dbo);
			bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),"); //MACHINE_MANUFACTURING_YEAR
			bufInsUpdSql.append(" ?," ); //MACHINE_IDENTIFICATION_NO
			bufInsUpdSql.append(" ?," );//MACHINE_COLLATERAL_COST
			bufInsUpdSql.append(" ?," ); //MACHINE_MARGIN
			bufInsUpdSql.append(" ?," );//PROPERTY_TYPE
			bufInsUpdSql.append(" ?," ); //PROPERTY_ADDRESS
			//Nishant space starts
			bufInsUpdSql.append(" ?," ); //ADDRESS_LINE2
			bufInsUpdSql.append(" ?," ); //ADDRESS_LINE3
			bufInsUpdSql.append(" ?," ); //COUNTRY
			bufInsUpdSql.append(" ?," ); //STATE
			bufInsUpdSql.append(" ?," ); //DISTRICT
			bufInsUpdSql.append(" ?," ); //PINCODE
			bufInsUpdSql.append(" ?," ); //TEHSIL
			//Nishant space end
			bufInsUpdSql.append(" ?," ); //PROPERTY_AREA
			bufInsUpdSql.append(" ?," ); //PROPERTY_CONSTRUCTION
			bufInsUpdSql.append(" ?," ); //PROPERY_VALUE
			bufInsUpdSql.append(" ?," );//PROPERTY_OWNER
			bufInsUpdSql.append(" ?," );//MORTAGE_TYPE
			bufInsUpdSql.append(" ?," ); //VEHICLE_MAKE
			bufInsUpdSql.append(" ?," ); //VEHICLE_MODEL 
			bufInsUpdSql.append(" ?," ); //MAKE_MODEL_ID,
			bufInsUpdSql.append(" ?," ); //VEHICLE_TYPE
			bufInsUpdSql.append(" ?," ); //VEHICLE_OWNER
			//bufInsUpdSql.append(" STR_TO_DATE(?,'"+dateFormat+"'),");//VEHICLE_MANUFACTURING_YEAR
			bufInsUpdSql.append(" ?,");//VEHICLE_MANUFACTURING_YEAR
			bufInsUpdSql.append(" ?," );  //VEHICLE_REGISTRATION_NO
			bufInsUpdSql.append(dbo);
			bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),"); //VEHICLE_REGISTRATION_DATE
			bufInsUpdSql.append(" ?," );//VEHICLE_CHASIS_NUMBER
			bufInsUpdSql.append(" ?," ); //VEHICLE_Insurer
			bufInsUpdSql.append(dbo);
			bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),");//VEHICLE_INSURED_DATE
			bufInsUpdSql.append(" ?," ); //VEHICLE_COLLATERAL_COST
			bufInsUpdSql.append(" ?," ); 	//VEHICLE_MARGIN
			bufInsUpdSql.append(" ?," ); //STOCK_TYPE
			bufInsUpdSql.append(" ?," ); //STOCK_NATURE
			bufInsUpdSql.append(" ?," );//STOCK_VALUE
			bufInsUpdSql.append(" ?," );  //STOCK_GODOWN_ADDRESS
			bufInsUpdSql.append(" ?," ); //STOCK_INVENTORY_CYCLE	
			bufInsUpdSql.append(" ?," ); //DEBTOR_TYPE
			bufInsUpdSql.append(" ?," ); //DEBTOR_TOTAL_OUTSTANDING
			bufInsUpdSql.append(" ?," );//BG_TYPE
			bufInsUpdSql.append(" ?," );  //BG_AMOUNT
			bufInsUpdSql.append(dbo);
			bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),"  );//BG_ISSUE_DATE
			bufInsUpdSql.append(dbo);
			bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"')," );//BG_VALIDITY_DATE
			bufInsUpdSql.append(" ?," ); //BG_ISSUING_BANK
			bufInsUpdSql.append(dbo);
			bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),"  );//Invoice Date
			//Nishant space starts
			bufInsUpdSql.append(" ?," );//ASSET_LEVEL
			bufInsUpdSql.append(" ?," );//VILLAGE_NAME_LANDMARK    
			bufInsUpdSql.append(" ?," );//TXN_VALUE                
			bufInsUpdSql.append(" ?," );//TECH_VERIFICATION        
			bufInsUpdSql.append(" ?," );//DOCUMENT_VALUE           
			bufInsUpdSql.append(" ?," );//ADDITIONAL_CONSTRUCTION
			bufInsUpdSql.append(" ?," );//BUILT_UP_AREA
			//Nishant space end
			bufInsUpdSql.append(" ?," );//REC_STATUS
		    bufInsUpdSql.append(" ?," );  //MAKER_ID
		   // bufInsUpdSql.append("DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND)," ); 	//MAKER_DATE
		    bufInsUpdSql.append(dbo);
		    bufInsUpdSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9), ");//MAKER_DATE
		    bufInsUpdSql.append(" ?," );//MACHINE_VALUE
		    bufInsUpdSql.append(" ?," );  //MACHINE_DISCOUNT
		    bufInsUpdSql.append(" ?," ); //VEHICLE_VALUE
		    bufInsUpdSql.append(" ?," ); //VEHICLE_DISCOUNT 
		    bufInsUpdSql.append(" ?," ); //LOAN_AMOUNT
		    bufInsUpdSql.append(" ?," );//SECURITY 
// prashant
		    bufInsUpdSql.append(" ?," );//VEHICLE_ASSET_STATE 
		    bufInsUpdSql.append(" ?, " );//VEHICLE_ASSET_USES_TYPE
//Anil		    
		    bufInsUpdSql.append(" ?, " );//ASSET_STANDARD
		    bufInsUpdSql.append(" ?, " );//LAWYER_NAME
		    bufInsUpdSql.append(" ?, " );//VALUER_NAME
		    bufInsUpdSql.append(" ?, " );//PROPERTY_DIRECTION
		    bufInsUpdSql.append(" ?, " );//ENGINE_NUMBER

		    bufInsUpdSql.append(" ?, " );//PROPERTY_TITLE
		    bufInsUpdSql.append(" ?, " );//PROPERTY_STATUS
		    bufInsUpdSql.append(" ?, " );//CARPET_AREA
		    bufInsUpdSql.append(" ?, " );//TECHNICAL_VAL1
		    bufInsUpdSql.append(" ?, " );//TECHNICAL_VAL2
		    bufInsUpdSql.append(" ?, " );//BUILDUPAREASQMTR
		    bufInsUpdSql.append(" ?, " );//ISSUEING_BANK_ID
		    bufInsUpdSql.append(" ?, " );//ISSUEING_BRANCH_ID
		    bufInsUpdSql.append(" ?, " );//SUPER_BUILDUP_AREA
		    //////////////////////
		    bufInsUpdSql.append(" ?, " );//PROPERTY_OWNER_GCD_ID
		    bufInsUpdSql.append(" ?, " );//VALUATION_METHOD_ID
		    bufInsUpdSql.append(" ?, " );//VALUATION_AMOUNT
		    bufInsUpdSql.append(" ?, " );//INSURANCE_POLICY_NO
		    bufInsUpdSql.append(" ?, " );//INSURANCE_PREMIUM_AMOUNT
			bufInsUpdSql.append(dbo);
		    bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),");//INSURANCE_POLICY_START_DATE
			bufInsUpdSql.append(dbo);
			bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),");//INSURANCE_MATURITY_DATE
		    bufInsUpdSql.append(" ?, " );//INSURANCE_PREMIUM_FREQUENCY
		    bufInsUpdSql.append(" ?, " );//INSURANCE_NOMINEE
		    bufInsUpdSql.append(" ?, " );//INSURANCE_RELATION_WITH_NOMINEE
		    bufInsUpdSql.append(" ?, " );//INSURANCE_TENURE
		    bufInsUpdSql.append(" ?, " );//INSURANCE_AGENCY
		    bufInsUpdSql.append(" ?, " );//COVER_NOTE
		    bufInsUpdSql.append(" ?, " );//SUM_ASSURED
		    bufInsUpdSql.append(" ?, " );//VEHICLE_IDV 
		    bufInsUpdSql.append(" ?, " );//VEHICLE_VALUATION_AMOUNT
		    bufInsUpdSql.append(" ?, " );//VEHICLE_GRID_VALUE		    
		    bufInsUpdSql.append(" ?, " );//INVOICE_NO
			bufInsUpdSql.append(dbo);
		    bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),");//VECHICLE_INVOICE_DATE
		    bufInsUpdSql.append(" ?, " );//RC_RECEIVED
			bufInsUpdSql.append(dbo);
		    bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),");//RC_RECEIVED_DATE
		    bufInsUpdSql.append(" ?, " );//PROPERTY_TOTAL_AREA
		    bufInsUpdSql.append(" ?, " );//DEALER_EXECUTIVE_ID
		    bufInsUpdSql.append(" ?) " ); //DEALER_MANAGER_ID

		  if((CommonFunction.checkNull(vo.getColltype2())).trim().equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
          else
              insertPrepStmtObject.addString((vo.getColltype2()).trim());

          if((CommonFunction.checkNull(vo.getAssetNature())).trim().equalsIgnoreCase(""))
	          insertPrepStmtObject.addNull();
	      else
	          insertPrepStmtObject.addString((vo.getAssetNature()).trim());
	         
	      if((CommonFunction.checkNull(vo.getColltype1())).trim().equalsIgnoreCase(""))
	          insertPrepStmtObject.addNull();
	      else
	          insertPrepStmtObject.addString((vo.getColltype1()).trim());

          if((CommonFunction.checkNull(vo.getAssetsCollateralDesc())).trim().equalsIgnoreCase(""))
               insertPrepStmtObject.addNull();
          else
               insertPrepStmtObject.addString((vo.getAssetsCollateralDesc()).trim());

	      if((CommonFunction.checkNull(vo.getAssetsCollateralValue())).trim().equalsIgnoreCase(""))
	        	 insertPrepStmtObject.addString("0.0000");
	       else
	             insertPrepStmtObject.addString(myFormatter.parse((vo.getAssetsCollateralValue()).trim()).toString());

	       if((CommonFunction.checkNull(vo.getLbxmachineSupplier())).trim().equalsIgnoreCase(""))
	             insertPrepStmtObject.addNull();
	       else
	             insertPrepStmtObject.addString((vo.getLbxmachineSupplier()).trim());

	   if((CommonFunction.checkNull(vo.getLbxmachineManufact())).trim().equalsIgnoreCase(""))
	           insertPrepStmtObject.addNull();
	       else
	             insertPrepStmtObject.addString((vo.getLbxmachineManufact()).trim());//Manufacturer desc
	                
//	      if((CommonFunction.checkNull(vo.getSupplierDesc())).trim().equalsIgnoreCase(""))
//		       insertPrepStmtObject.addNull();
//		   else
//		         insertPrepStmtObject.addString((vo.getSupplierDesc()).trim());
//
//		 if((CommonFunction.checkNull(vo.getAssetManufactDesc())).trim().equalsIgnoreCase(""))
//			    insertPrepStmtObject.addNull();
//		    else
//			      insertPrepStmtObject.addString((vo.getAssetManufactDesc()).trim());//manufacturer desc

	   if((CommonFunction.checkNull(vo.getMachineSupplier())).trim().equalsIgnoreCase(""))//ASSET_SUPPLIER_DESC
		   insertPrepStmtObject.addNull();
	   else
		   insertPrepStmtObject.addString((vo.getMachineSupplier()).trim()); 

	   if((CommonFunction.checkNull(vo.getAssetManufact())).trim().equalsIgnoreCase(""))//manufacturer desc
		   insertPrepStmtObject.addNull();
	   else
		   insertPrepStmtObject.addString((vo.getAssetManufact()).trim()); 
			                
	      if((CommonFunction.checkNull(vo.getCollateralSecurityMargin())).trim().equalsIgnoreCase(""))
			   	   insertPrepStmtObject.addString("0.0000");
		         else
			       insertPrepStmtObject.addString(myFormatter.parse((vo.getCollateralSecurityMargin()).trim()).toString()); 
	      if((CommonFunction.checkNull(vo.getCollateralSecurityMarginDF())).trim().equalsIgnoreCase(""))
		   	   insertPrepStmtObject.addString("0.0000");
	         else
		       insertPrepStmtObject.addString(myFormatter.parse((vo.getCollateralSecurityMarginDF()).trim()).toString());
	         
	      if((CommonFunction.checkNull(vo.getFdAmount())).trim().equalsIgnoreCase(""))
	              insertPrepStmtObject.addString("0.0000");
	             else
	                insertPrepStmtObject.addString(myFormatter.parse((vo.getFdAmount()).trim()).toString());

	       if((CommonFunction.checkNull(vo.getFdTenure())).trim().equalsIgnoreCase(""))
	              insertPrepStmtObject.addNull();
	            else
	              insertPrepStmtObject.addString((vo.getFdTenure()).trim());

	         if((CommonFunction.checkNull(vo.getFdRate())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	              else
	                insertPrepStmtObject.addString(myFormatter.parse((vo.getFdRate()).trim()).toString());

	         if((CommonFunction.checkNull(vo.getFdBookDate())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getFdBookDate()).trim());

	         if((CommonFunction.checkNull(vo.getFdMatureDate())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getFdMatureDate()).trim());

	         if((CommonFunction.checkNull(vo.getFdAgencyName())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getFdAgencyName()).trim());

	         if((CommonFunction.checkNull(vo.getFdAgencyRating())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getFdAgencyRating()).trim());

	         if((CommonFunction.checkNull(vo.getFdApplicants())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getFdApplicants()).trim());

	         if((CommonFunction.checkNull(vo.getSblcAmount())).trim().equalsIgnoreCase(""))
	        	 insertPrepStmtObject.addString("0.0000");
	               else
	                insertPrepStmtObject.addString(myFormatter.parse((vo.getSblcAmount()).trim()).toString());

	         if((CommonFunction.checkNull(vo.getSblcValidity())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getSblcValidity()).trim());

	         if((CommonFunction.checkNull(vo.getSblcIssuingDate())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getSblcIssuingDate()).trim());

	         if((CommonFunction.checkNull(vo.getSblcParentCompany())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getSblcParentCompany()).trim());

	         if((CommonFunction.checkNull(vo.getSecurityType())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getSecurityType()).trim());

	         if((CommonFunction.checkNull(vo.getSecurityCategory())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getSecurityCategory()).trim());

	         if((CommonFunction.checkNull(vo.getSecurityMarketValue())).trim().equalsIgnoreCase(""))
	        	 insertPrepStmtObject.addString("0.0000");
	               else
	                insertPrepStmtObject.addString(myFormatter.parse((vo.getSecurityMarketValue()).trim()).toString());

	         if((CommonFunction.checkNull(vo.getMachineMake())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getMachineMake()).trim());

	         if((CommonFunction.checkNull(vo.getMachineModel())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getMachineModel()).trim());

	         if((CommonFunction.checkNull(vo.getMachineType())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getMachineType()).trim());

	         if((CommonFunction.checkNull(vo.getMachineOwner())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getMachineOwner()).trim());

	         if((CommonFunction.checkNull(vo.getMachineYearOfManufact())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getMachineYearOfManufact()).trim());

	         if((CommonFunction.checkNull(vo.getMachineIdNo())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getMachineIdNo()).trim());

	         
	         if((CommonFunction.checkNull(vo.getMachineCollateralCost())).trim().equalsIgnoreCase(""))
	        	 insertPrepStmtObject.addString("0.0000");
	               else
	                insertPrepStmtObject.addString(myFormatter.parse((vo.getMachineCollateralCost()).trim()).toString());

	         if((CommonFunction.checkNull(vo.getMachineMargin())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString(myFormatter.parse((vo.getMachineMargin()).trim()).toString());

	         if((CommonFunction.checkNull(vo.getPropertyType())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getPropertyType()).trim());

	         if((CommonFunction.checkNull(vo.getPropertyAddress())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getPropertyAddress()).trim());
	         //Nishant space start
	         if((CommonFunction.checkNull(vo.getAddr2())).trim().equalsIgnoreCase(""))
	               insertPrepStmtObject.addNull();
	         else
	               insertPrepStmtObject.addString((vo.getAddr2()).trim());
	         if((CommonFunction.checkNull(vo.getAddr3())).trim().equalsIgnoreCase(""))
	               insertPrepStmtObject.addNull();
	         else
	               insertPrepStmtObject.addString((vo.getAddr3()).trim());
	         if((CommonFunction.checkNull(vo.getTxtCountryCode())).trim().equalsIgnoreCase(""))
	               insertPrepStmtObject.addNull();
	         else
	               insertPrepStmtObject.addString((vo.getTxtCountryCode()).trim());
	         if((CommonFunction.checkNull(vo.getTxtStateCode())).trim().equalsIgnoreCase(""))
	               insertPrepStmtObject.addNull();
	         else
	               insertPrepStmtObject.addString((vo.getTxtStateCode()).trim());
	         if((CommonFunction.checkNull(vo.getTxtDistCode())).trim().equalsIgnoreCase(""))
	               insertPrepStmtObject.addNull();
	         else
	               insertPrepStmtObject.addString((vo.getTxtDistCode()).trim());
	         if((CommonFunction.checkNull(vo.getPincode())).trim().equalsIgnoreCase(""))
	               insertPrepStmtObject.addNull();
	         else
	               insertPrepStmtObject.addString((vo.getPincode()).trim());
	         if((CommonFunction.checkNull(vo.getTahsil())).trim().equalsIgnoreCase(""))
	        	 	insertPrepStmtObject.addNull();
	         else
	        	 	insertPrepStmtObject.addString((vo.getTahsil()).trim());
	         //Nishant space end
	         if((CommonFunction.checkNull(vo.getPropertyArea())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getPropertyArea()).trim());

	         if((CommonFunction.checkNull(vo.getPropertyConstruct())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getPropertyConstruct()).trim());

	         if((CommonFunction.checkNull(vo.getAssetsCollateralValue())).trim().equalsIgnoreCase(""))
	        	 insertPrepStmtObject.addString("0.0000");
	               else
	                insertPrepStmtObject.addString(myFormatter.parse((vo.getAssetsCollateralValue()).trim()).toString());

	         if(CommonFunction.checkNull((vo.getPropertyOwner())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getPropertyOwner()).trim());

	         if(CommonFunction.checkNull((vo.getMortgage())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getMortgage()).trim());

	         if(CommonFunction.checkNull((vo.getVehicleMake())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getVehicleMake()).trim());

	         if(CommonFunction.checkNull((vo.getVehicleModel())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getVehicleModel()).trim());
	         
	         if(CommonFunction.checkNull((vo.getMake_model_id())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getMake_model_id()).trim());

	         if(CommonFunction.checkNull((vo.getVehicleType())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getVehicleType()).trim());

	         if((CommonFunction.checkNull(vo.getVehicleOwner())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getVehicleOwner()).trim());

	         if((CommonFunction.checkNull(vo.getVehicleYearOfManufact())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getVehicleYearOfManufact()).trim());

	         if(CommonFunction.checkNull((vo.getVehicleRegNo())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getVehicleRegNo()).trim());

	         if((CommonFunction.checkNull(vo.getVehicleRegDate())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getVehicleRegDate()).trim());

	         if((CommonFunction.checkNull(vo.getVehicleChesisNo())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getVehicleChesisNo()).trim());

	         if((CommonFunction.checkNull(vo.getVehicleInsurer())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getVehicleInsurer()).trim());

	         if((CommonFunction.checkNull(vo.getVehicleInsureDate())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getVehicleInsureDate()).trim());

	         if((CommonFunction.checkNull(vo.getVehicleCollateralCost())).trim().equalsIgnoreCase(""))
	        	 insertPrepStmtObject.addString("0.0000");
	               else
	                insertPrepStmtObject.addString(myFormatter.parse((vo.getVehicleCollateralCost()).trim()).toString());

	         if((CommonFunction.checkNull(vo.getVehicleMargin())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString(myFormatter.parse((vo.getVehicleMargin()).trim()).toString());

	         if((CommonFunction.checkNull(vo.getStockType())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getStockType()).trim());

	         if((CommonFunction.checkNull(vo.getStockNature())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getStockNature()).trim());

	         if((CommonFunction.checkNull(vo.getAssetsCollateralValue())).trim().equalsIgnoreCase(""))// stock value
	                insertPrepStmtObject.addString("0.0000");
	               else
	                insertPrepStmtObject.addString(myFormatter.parse((vo.getAssetsCollateralValue()).trim()).toString());

	         if((CommonFunction.checkNull(vo.getStockAddress())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getStockAddress()).trim());

	         if((CommonFunction.checkNull(vo.getStockCycle())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getStockCycle()).trim());


	         if((CommonFunction.checkNull(vo.getDebtorType())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getDebtorType()).trim());

	         if((CommonFunction.checkNull(vo.getDebtorTotal())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getDebtorTotal()).trim());


	         ---------------------------------------------------------  ----------------------------     
	         
	         if((CommonFunction.checkNull(vo.getBgType())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getBgType()).trim());

	         if((CommonFunction.checkNull(vo.getAssetsCollateralValue())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString(myFormatter.parse((vo.getAssetsCollateralValue()).trim()).toString());

	         if((CommonFunction.checkNull(vo.getBgInDate())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getBgInDate()).trim());


	         if((CommonFunction.checkNull(vo.getBgValidity())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getBgValidity()).trim());

	         if((CommonFunction.checkNull(vo.getBgIssuing())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getBgIssuing()).trim());

	         if((CommonFunction.checkNull(vo.getInvoiceDate())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getInvoiceDate()).trim());
	         
	         //Nishant space start
	         
	         if((CommonFunction.checkNull(vo.getAssetLevel())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	         else
	                insertPrepStmtObject.addString((vo.getAssetLevel()).trim());
	         if((CommonFunction.checkNull(vo.getVillageLandmark())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	         else
	                insertPrepStmtObject.addString((vo.getVillageLandmark()).trim());
	         if((CommonFunction.checkNull(vo.getTxnValue())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	         else
	                insertPrepStmtObject.addString(myFormatter.parse((vo.getTxnValue()).trim()).toString());
	         if((CommonFunction.checkNull(vo.getTechValuation())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	         else
	                insertPrepStmtObject.addString(myFormatter.parse((vo.getTechValuation()).trim()).toString());
	         if((CommonFunction.checkNull(vo.getDocValue())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	         else
	                insertPrepStmtObject.addString(myFormatter.parse((vo.getDocValue()).trim()).toString());
	         if((CommonFunction.checkNull(vo.getAddConstruction())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	         else
	                insertPrepStmtObject.addString(myFormatter.parse((vo.getAddConstruction()).trim()).toString());
	         if((CommonFunction.checkNull(vo.getBuildUpArea())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	         else
	                insertPrepStmtObject.addString((vo.getBuildUpArea()).trim());
	         
	         //Nishant space end
	         
	        // if(CommonFunction.checkNull("").equalsIgnoreCase(""))
	               // insertPrepStmtObject.addNull();
	              // else
	                insertPrepStmtObject.addString("P");


	        if((CommonFunction.checkNull(vo.getUserId())).trim().equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getUserId()).trim());

	         if((CommonFunction.checkNull(vo.getMakerDate())).equalsIgnoreCase(""))
	                insertPrepStmtObject.addNull();
	               else
	                insertPrepStmtObject.addString((vo.getMakerDate()));
	         //ritu
	         if((CommonFunction.checkNull(vo.getAssetsCost())).trim().equalsIgnoreCase(""))
	        	 insertPrepStmtObject.addString("0.00");
	               else
	                insertPrepStmtObject.addString(myFormatter.parse((vo.getAssetsCost()).trim()).toString());

	         if((CommonFunction.checkNull(vo.getAssetsDiscount())).trim().equalsIgnoreCase(""))
	        	 insertPrepStmtObject.addString("0.00");
	               else
	                insertPrepStmtObject.addString(myFormatter.parse((vo.getAssetsDiscount()).trim()).toString());
	         
	         if((CommonFunction.checkNull(vo.getVehicleCost())).trim().equalsIgnoreCase(""))
	        	 insertPrepStmtObject.addString("0.00");
	               else
	                insertPrepStmtObject.addString(myFormatter.parse((vo.getVehicleCost()).trim()).toString());
	         
	         if((CommonFunction.checkNull(vo.getVehicleDiscount())).trim().equalsIgnoreCase(""))
	        	 insertPrepStmtObject.addString("0.00");
	               else
	                insertPrepStmtObject.addString(myFormatter.parse((vo.getVehicleDiscount()).trim()).toString());

			 	         
	         	   insertPrepStmtObject.setSql(bufInsUpdSql.toString());
	         
	        
	         if((CommonFunction.checkNull(vo.getLoanAmount())).trim().equalsIgnoreCase(""))
	 	       	 insertPrepStmtObject.addString("0.00");
	 	     else
	 	    	 insertPrepStmtObject.addString(myFormatter.parse((vo.getLoanAmount()).trim()).toString());
	         
	         if((CommonFunction.checkNull(vo.getSecurityTypes())).trim().equalsIgnoreCase(""))
	              insertPrepStmtObject.addNull();
	          else
	              insertPrepStmtObject.addString((vo.getSecurityTypes()).trim());

	//Prashant 		
	         if((CommonFunction.checkNull(vo.getTxtStateCode())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((vo.getTxtStateCode()).trim());
	         
	         if((CommonFunction.checkNull(vo.getUsageType())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((vo.getUsageType()).trim());
    //Anil
	         if (CommonFunction.checkNull(standard).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(standard);
	         //Nishant space starts
	         if((CommonFunction.checkNull(vo.getLawyerName())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
	         else
					insertPrepStmtObject.addString((vo.getLawyerName()).trim());
	         
	         if((CommonFunction.checkNull(vo.getValuerName())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
	         else
					insertPrepStmtObject.addString((vo.getValuerName()).trim());
	         
	         if((CommonFunction.checkNull(vo.getPropertyDirection())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
	         else
					insertPrepStmtObject.addString((vo.getPropertyDirection()).trim());
	         //Nishant space end
	         
	         if (CommonFunction.checkNull(vo.getEngineNumber()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(vo.getEngineNumber());
	         
		     
//	         //sachin
	         if ((CommonFunction.checkNull(vo.getPropertyTitle()).trim()).equalsIgnoreCase("")){
				   logger.info("getPropertyTitlecccccc"+vo.getPropertyTitle());
				   insertPrepStmtObject.addNull();}
				else
				   insertPrepStmtObject.addString((vo.getPropertyTitle()).trim());
			   
			   if((CommonFunction.checkNull(vo.getPropertyStatus()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
					  else
						  insertPrepStmtObject.addString((vo.getPropertyStatus()).trim());
			   
			   if((CommonFunction.checkNull(vo.getCarpetArea()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
					  else
						  insertPrepStmtObject.addString(myFormatter.parse((vo.getCarpetArea()).trim()).toString());

			   
			   if((CommonFunction.checkNull(vo.getTechnicalValuation1()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
					  else
						  insertPrepStmtObject.addString(myFormatter.parse((vo.getTechnicalValuation1()).trim()).toString());

			   
			   if((CommonFunction.checkNull(vo.getTechnicalValuation2()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
					  else
						  insertPrepStmtObject.addString(myFormatter.parse((vo.getTechnicalValuation2()).trim()).toString());

			   if((CommonFunction.checkNull(vo.getBuildUpAreaSQMTR()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
					  else
						  insertPrepStmtObject.addString(myFormatter.parse((vo.getBuildUpAreaSQMTR()).trim()).toString());

			   

			   if((CommonFunction.checkNull(vo.getLbxBankID()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
					  else
						  insertPrepStmtObject.addString((vo.getLbxBankID()).trim());

			   if((CommonFunction.checkNull(vo.getLbxBranchID()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
					  else
						  insertPrepStmtObject.addString((vo.getLbxBranchID()).trim());
			   
			   if((CommonFunction.checkNull(vo.getSuperBuildUpArea()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
					  else
						  insertPrepStmtObject.addString(myFormatter.parse((vo.getSuperBuildUpArea()).trim()).toString());
			   
			   if((CommonFunction.checkNull(vo.getPropertyOwnerGcdId()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
			   else
				   insertPrepStmtObject.addString((vo.getPropertyOwnerGcdId()).trim());
			   if((CommonFunction.checkNull(vo.getValuationMethodId()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
			   else
				   insertPrepStmtObject.addString((vo.getValuationMethodId()).trim());
			   if((CommonFunction.checkNull(vo.getValuationAmount()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addString("0.0000");
			   else
					insertPrepStmtObject.addString(myFormatter.parse((vo.getValuationAmount()).trim()).toString());
			   
		//////////////////////////////////////
			   
			   if((CommonFunction.checkNull(vo.getPolicyNo()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
					  else
						  insertPrepStmtObject.addString((vo.getPolicyNo()).trim());

			   
			   if((CommonFunction.checkNull(vo.getPremiumAmount()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addString("0.0000");
					  else
						  insertPrepStmtObject.addString(myFormatter.parse((vo.getPremiumAmount()).trim()).toString());

			   if((CommonFunction.checkNull(vo.getPolicyStartDate()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
					  else
						  insertPrepStmtObject.addString((vo.getPolicyStartDate()).trim());

			   

			   if((CommonFunction.checkNull(vo.getInsMatureDate()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
					  else
						  insertPrepStmtObject.addString((vo.getInsMatureDate()).trim());

			   if((CommonFunction.checkNull(vo.getPremiumFrequency()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
					  else
						  insertPrepStmtObject.addString((vo.getPremiumFrequency()).trim());
			   
			   if((CommonFunction.checkNull(vo.getNominee()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
					  else
						  insertPrepStmtObject.addString((vo.getNominee()).trim());

			   if((CommonFunction.checkNull(vo.getRelWithNominee()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
			   else
				   insertPrepStmtObject.addString((vo.getRelWithNominee()).trim());
			   
			   if((CommonFunction.checkNull(vo.getTenureYear()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
			   else
				   insertPrepStmtObject.addString((vo.getTenureYear()).trim());
			   
			   if((CommonFunction.checkNull(vo.getLbxInsuranceAgency()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
			   else
				   insertPrepStmtObject.addString((vo.getLbxInsuranceAgency()).trim());
			   if((CommonFunction.checkNull(vo.getCoverNoteNo()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
			   else
				   insertPrepStmtObject.addString((vo.getCoverNoteNo()).trim());
			   if((CommonFunction.checkNull(vo.getSumAssured()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addString("0.0000");
			   else
					insertPrepStmtObject.addString(myFormatter.parse((vo.getSumAssured()).trim()).toString());
			   
//////////////////////////////////////change for vehicle//////////////////////////////////////////////////////////			  
			   if((CommonFunction.checkNull(vo.getIdv()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addString("0.0000");
			   else
					insertPrepStmtObject.addString(myFormatter.parse((vo.getIdv()).trim()).toString());
			   
			   if((CommonFunction.checkNull(vo.getValuationCost()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addString("0.0000");
			   else
					insertPrepStmtObject.addString(myFormatter.parse((vo.getValuationCost()).trim()).toString());
			   
			   if((CommonFunction.checkNull(vo.getGridValue()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addString("0.0000");
			   else
					insertPrepStmtObject.addString(myFormatter.parse((vo.getGridValue()).trim()).toString());
			   



			   //end by sachin
			   //KK Start
			   if((CommonFunction.checkNull(vo.getInvoiceNumber()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
			   else
					insertPrepStmtObject.addString(vo.getInvoiceNumber().trim());
			   
			   if((CommonFunction.checkNull(vo.getVehicleInvoiceDate()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
			   else
				   insertPrepStmtObject.addString((vo.getVehicleInvoiceDate()).trim());
			   
			   if((CommonFunction.checkNull(vo.getRcReceived()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
			   else
					insertPrepStmtObject.addString(vo.getRcReceived().trim());
			   
			   if((CommonFunction.checkNull(vo.getRcReceivedDate()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
			   else
				   insertPrepStmtObject.addString((vo.getRcReceivedDate()).trim());
			   //KK end
//START BY SACHIN
			   if((CommonFunction.checkNull(vo.getTotalArea()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
			   else
				   insertPrepStmtObject.addString(myFormatter.parse((vo.getTotalArea()).trim()).toString());
			   
			   if((CommonFunction.checkNull(vo.getLbxDealerExecutive()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
			   else
				   insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getLbxDealerExecutive()));
			   
			   if((CommonFunction.checkNull(vo.getLbxDealerManager()).trim()).equalsIgnoreCase(""))
				   insertPrepStmtObject.addNull();
			   else
				   insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getLbxDealerManager()));
			   
//END BY SACHIN
	         
	 	           insertPrepStmtObject.setSql(bufInsUpdSql.toString());

				   logger.info("IN Machinery() insert query1 ### "+insertPrepStmtObject.printQuery());
				   qryList.add(insertPrepStmtObject);
				   status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			       if(status)
			       {
			    	   StringBuilder query3=new StringBuilder();
				    query3.append("Select distinct max(ASSET_ID) from cr_asset_collateral_m  WITH (ROWLOCK) ");
				    
				    StringBuilder id=new StringBuilder();
				  id.append(ConnectionDAO.singleReturn(query3.toString()));
				   maxId=Integer.parseInt(id.toString());
				   logger.info("maxId : "+maxId);
				   
				   query3=null;
				   id=null;
				   
			       }
			       String table="";
			       if(CommonFunction.checkNull(vo.getSource()).trim().equalsIgnoreCase("ED"))
			    	   table="cr_loan_collateral_m_edit";
			       else
			    	   table="cr_loan_collateral_m";
			       if(vo.getLoanId()!=null && !vo.getLoanId().equalsIgnoreCase(""))
			       {
			    	   bufInsUpdSql1.append("insert into "+table+"(LOAN_ID,ASSETID,REC_STATUS,MAKER_ID,MAKER_DATE)");
					   bufInsUpdSql1.append("values(");
					   bufInsUpdSql1.append(" ?," );
					   bufInsUpdSql1.append(" ?," );
					   bufInsUpdSql1.append(" ?," );
					   bufInsUpdSql1.append(" ?," );
					   bufInsUpdSql1.append(dbo);
					   bufInsUpdSql1.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9)) ");		   
					  
					   if((CommonFunction.checkNull(vo.getLoanId())).trim().equalsIgnoreCase(""))
						   insertPrepStmtObject1.addNull();
					   else
						  insertPrepStmtObject1.addString((vo.getLoanId()).trim());
				
					   if((CommonFunction.checkNull(maxId)).trim().equalsIgnoreCase(""))
							  insertPrepStmtObject1.addNull();
						else
							  insertPrepStmtObject1.addString((""+maxId).trim());

					   insertPrepStmtObject1.addString("P");
					   if((CommonFunction.checkNull(vo.getUserId()).trim()).equalsIgnoreCase(""))
						  insertPrepStmtObject1.addNull();
					   else
						  insertPrepStmtObject1.addString((vo.getUserId()).trim());

					   if((CommonFunction.checkNull(vo.getMakerDate().trim())).equalsIgnoreCase(""))
						  insertPrepStmtObject1.addNull();
					   else
						  insertPrepStmtObject1.addString((vo.getMakerDate()).trim());

					  insertPrepStmtObject1.setSql(bufInsUpdSql1.toString());

			        logger.info("IN In CM insert query1 into cr_loan_collateral_m  ### "+insertPrepStmtObject1.printQuery());
			        qryList1.add(insertPrepStmtObject1);
			        status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList1);
	                logger.info("In MAchinery......................"+status);
	                
	                //code added by neeraj
	                if(CommonFunction.checkNull(vo.getSource()).trim().equalsIgnoreCase("ED"))
		            {
	                	String q1="select EDIT_REFRESH_FLAG from cr_loan_dtl where loan_id="+vo.getLoanId();
	                	String refresh=ConnectionDAO.singleReturn(q1);
	                	if(CommonFunction.checkNull(refresh).trim().equalsIgnoreCase(""))
	                		refresh="   ";
	                	String ref="YN"+refresh.charAt(2);
	                	ArrayList queryList=new ArrayList();
	                	StringBuffer insert = new StringBuffer();
	                	insert.append("INSERT INTO cr_asset_collateral_m_edit SELECT * FROM cr_asset_collateral_m WHERE ASSET_ID="+maxId);
	                	PrepStmtObject stmt = new PrepStmtObject();
	                	stmt.setSql(insert.toString());	
		            	queryList.add(stmt);		           
		            	StringBuffer updatLoan = new StringBuffer();
		            	updatLoan.append("update cr_loan_dtl set EDIT_REFRESH_FLAG='"+ref+"' where loan_id="+vo.getLoanId());
		            	PrepStmtObject prepStmt = new PrepStmtObject();
		            	prepStmt.setSql(updatLoan.toString());	
		            	queryList.add(prepStmt);		           
		            	status=ConnectionDAO.sqlInsUpdDeletePrepStmt(queryList);  
		            	
		            }
		            //neeraj space end
			       }
			       else
			       {
			    	   bufInsUpdSql1.append("insert into cr_deal_collateral_m(DEAL_ID,ASSETID,REC_STATUS,MAKER_ID,MAKER_DATE)");
					   bufInsUpdSql1.append("values(");
					   bufInsUpdSql1.append(" ?," );
					   bufInsUpdSql1.append(" ?," );
					   bufInsUpdSql1.append(" ?," );
					   bufInsUpdSql1.append(" ?," );
					   //bufInsUpdSql1.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND) ) " );
					    bufInsUpdSql1.append(dbo);
						bufInsUpdSql1.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9)) ");
					   if((CommonFunction.checkNull(vo.getDealId())).trim().equalsIgnoreCase(""))
							  insertPrepStmtObject1.addNull();
							  else
							  insertPrepStmtObject1.addString((vo.getDealId()).trim());


					   if((CommonFunction.checkNull(maxId)).trim().equalsIgnoreCase(""))
							  insertPrepStmtObject1.addNull();
							  else
							  insertPrepStmtObject1.addString((""+maxId).trim());

					   insertPrepStmtObject1.addString("P");
					   if((CommonFunction.checkNull(vo.getUserId()).trim()).equalsIgnoreCase(""))
							  insertPrepStmtObject1.addNull();
							  else
							  insertPrepStmtObject1.addString((vo.getUserId()).trim());

					   if((CommonFunction.checkNull(vo.getMakerDate()).trim()).equalsIgnoreCase(""))
							  insertPrepStmtObject1.addNull();
							  else
							  insertPrepStmtObject1.addString((vo.getMakerDate()).trim());

					  insertPrepStmtObject1.setSql(bufInsUpdSql1.toString());

			        logger.info("IN credit processing insert cr_deal_collateral_m query1 ### "+insertPrepStmtObject1.printQuery());
			        qryList1.add(insertPrepStmtObject1);
			        status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList1);
	                logger.info("In MAchinery......................"+status);
			       }

	 		    }catch(Exception e){
	 		    e.printStackTrace();
		       }
	 		    finally
	 		    {
	 		    	bufInsUpdSql=null;
	 		    	bufInsUpdSql1=null;	
	 		    	standard=null;	
	 		    }
	      	   return status;
	      	   }
	
	public ArrayList<Object> getCollateralDetailsAll(String dealId)
              {
            	 CollateralVo vo=null;
    	         ArrayList<Object> list=new ArrayList<Object>();
	            try
	           {
	    	    logger.info("Value of Assets Id in dao is...................."+dealId);
	    	    StringBuilder query=new StringBuilder();
		         query.append("SELECT c.ASSET_ID,c.ASSET_COLLATERAL_DESC,c.ASSET_COLLATERAL_VALUE,c.ASSET_TYPE, ASSET_COLLATERAL_CLASS from cr_asset_collateral_m c left join cr_deal_collateral_m d on c.ASSET_ID=d.ASSETID where d.DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"'");

		        logger.info("query"+query.toString());
		        ArrayList bdetails = ConnectionDAO.sqlSelect(query.toString());
	    	    logger.info("CollateralDetailsAll"+bdetails.size());
	    	    
	    	    query=null;
	    	    for(int i=0;i< bdetails.size();i++)
	    	    {
	    	    	logger.info("Collateral"+bdetails.get(i).toString());
	    	    	ArrayList bdetails1=(ArrayList)bdetails.get(i);
	    	    	if(bdetails1.size()>0)
	    			{
	    	    	   vo =  new CollateralVo();
	    	    		vo.setAssetsId((CommonFunction.checkNull(bdetails1.get(0))).trim());
	    	    		vo.setAssetsCollateralDesc((CommonFunction.checkNull(bdetails1.get(1))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(2))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(2))).trim());
		    	    		vo.setAssetsCollateralValue(myFormatter.format(reconNum));
	    	    		}
	    	    		
	    	    		vo.setColltype2((CommonFunction.checkNull(bdetails1.get(3))).trim());
	    	    		vo.setColltype1((CommonFunction.checkNull(bdetails1.get(4))).trim());
	    			}

	    			list.add(vo);
	    		
	    		}
	    		logger.info("list"+list.size());
	    		}catch(Exception e){
	    			e.printStackTrace();
	    		}

	    		return list;

	    	}

	 public ArrayList<Object> fetchCollateralDetailsAll(String primaryId,String propValue,String source)
     {
    	 logger.info("in fetchCollateralDetailsAll()");
   	 CollateralVo vo=null;
   	 //SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy");
        ArrayList<Object> list=new ArrayList<Object>();
        String table="cr_asset_collateral_m";
        if(CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
       	table="cr_asset_collateral_m_edit";
        
	            try
	           {
	            logger.info("Value of Assets Id in dao is...................."+primaryId);
	            logger.info("Value of Property in dao is...................."+propValue);
	            StringBuilder query=new StringBuilder();
	             query.append("Select ");
	             if(dbType.equalsIgnoreCase("MSSQL"))
					{
	            	 query.append(" TOP 1 ");
					}
	             query.append(" c.ASSET_ID, c.ASSET_TYPE, c.ASSET_NEW_OLD, c.ASSET_COLLATERAL_DESC, c.ASSET_COLLATERAL_VALUE, " );
	             query.append(" c.COLLATERAL_SECURITY_MARGIN, c.FD_AMOUNT, c.FD_TENURE, c.FD_RATE,");
	             query.append(dbo);
	             query.append("DATE_FORMAT(c.FD_BOOK_DATE,'"+dateFormat+"'), ");
	             query.append(dbo);
	             query.append("DATE_FORMAT(c.FD_MATURITY_DATE,'"+dateFormat+"'), c.FD_AGENCY_NAME, " );
	             query.append(" c.FD_AGENCY_RATING, c.FD_APPLICANT, c.SBLC_AMOUNT,");
	             query.append(dbo);
	             query.append("DATE_FORMAT(c.SBLC_VALIDITY,'"+dateFormat+"'), ");
	             query.append(dbo);
	             query.append("DATE_FORMAT(c.SBLC_ISSUING_DATE,'"+dateFormat+"'), c.SBLC_PARENT_COMPANY, " );
	             query.append(" c.SECURITY_TYPE, c.SECURITY_CATEGORY, c.SECURITY_MARKET_VALUE, c.MACHINE_MAKE, c.MACHINE_MODEL, c.MACHINE_TYPE, " );
	             query.append(" c.MACHINE_OWNER, ");
	             query.append(dbo);
	             query.append("DATE_FORMAT(c.MACHINE_MANUFACTURING_YEAR,'"+dateFormat+"'), c.MACHINE_IDENTIFICATION_NO, c.ASSET_SUPPLIER, c.MACHINE_COLLATERAL_COST, " );
	             query.append(" c.MACHINE_MARGIN, c.PROPERTY_TYPE, c.PROPERTY_ADDRESS, c.PROPERTY_AREA, c.PROPERTY_CONSTRUCTION,c.PROPERTY_OWNER,c.MORTAGE_TYPE, " );
	             query.append(" c.VEHICLE_MAKE, c.VEHICLE_MODEL, c.VEHICLE_TYPE, c.VEHICLE_OWNER, c.VEHICLE_MANUFACTURING_YEAR, " );
	             query.append(" c.VEHICLE_REGISTRATION_NO,");
	             query.append(dbo);
	             query.append("DATE_FORMAT(c.VEHICLE_REGISTRATION_DATE,'"+dateFormat+"'), c.VEHICLE_CHASIS_NUMBER, c.VEHICLE_Insurer,");
	             query.append(dbo);
	             query.append("DATE_FORMAT(c.VEHICLE_INSURED_DATE,'"+dateFormat+"'), " );
	             query.append(" c.VEHICLE_COLLATERAL_COST, c.VEHICLE_MARGIN, c.STOCK_TYPE, c.STOCK_NATURE, c.STOCK_GODOWN_ADDRESS, " );
	             query.append(" c.STOCK_INVENTORY_CYCLE, c.DEBTOR_TYPE, c.DEBTOR_TOTAL_OUTSTANDING,c.ASSET_COLLATERAL_CLASS, c.BG_TYPE,");
	             query.append(dbo);
	             query.append("DATE_FORMAT(c.BG_ISSUE_DATE,'"+dateFormat+"'),");
	             query.append(dbo);
	             query.append("DATE_FORMAT(c.BG_VALIDITY_DATE,'"+dateFormat+"')," );
	             query.append(" BG_ISSUING_BANK ,ds.DEALER_DESC,c.ASSET_MANUFATURER,c.ASSET_MANUFATURER_DESC,c.ASSET_SUPPLIER_DESC,");
	             query.append(dbo);
	             query.append("DATE_FORMAT(c.INVOICE_DATE,'"+dateFormat+"')," );
	             query.append("c.MACHINE_VALUE,c.MACHINE_DISCOUNT,C.VEHICLE_VALUE,C.VEHICLE_DISCOUNT ,c.LOAN_AMOUNT,c.SECURITY,c.VEHICLE_ASSET_STATE,st.STATE_DESC,c.VEHICLE_ASSET_USES_TYPE,c.DEFAULT_LTV, " );
	             query.append("c.VILLAGE_NAME_LANDMARK,c.BUILT_UP_AREA,c.TXN_VALUE,c.TECH_VERIFICATION,c.DOCUMENT_VALUE,c.ADDITIONAL_CONSTRUCTION,c.ASSET_LEVEL," );
	             query.append("c.ADDRESS_LINE2,c.ADDRESS_LINE3,ccm.COUNTRY_DESC,csm.STATE_DESC,cdm.DISTRICT_DESC,c.TEHSIL,c.PINCODE,c.COUNTRY,c.STATE,c.DISTRICT,c.ASSET_STANDARD,c.LAWYER_NAME,c.VALUER_NAME,c.PROPERTY_DIRECTION,c.ENGINE_NUMBER,c.PROPERTY_STATUS,c.PROPERTY_TITLE,c.CARPET_AREA,c.TECHNICAL_VAL1,c.TECHNICAL_VAL2,c.BUILDUPAREASQMTR,c.ISSUEING_BANK_ID,(SELECT BANK_NAME FROM com_bank_m where BANK_ID=c.ISSUEING_BANK_ID)BANK_NAME,c.ISSUEING_BRANCH_ID,(SELECT BANK_BRANCH_NAME FROM com_bankbranch_m where BANK_BRANCH_ID=c.ISSUEING_BRANCH_ID)BRANCHNAME,c.SUPER_BUILDUP_AREA, " );
	             query.append(" c.PROPERTY_OWNER_GCD_ID,C.VALUATION_METHOD_ID,(SELECT  DESCRIPTION FROM GENERIC_MASTER WHERE GENERIC_KEY='VALUATION_METHOD' AND VALUE=C.VALUATION_METHOD_ID )AS VALUATION_DESC,C.VALUATION_AMOUNT,C.INSURANCE_POLICY_NO,C.INSURANCE_PREMIUM_AMOUNT,");
	             query.append(dbo);
	             query.append("DATE_FORMAT(C.INSURANCE_POLICY_START_DATE,'"+dateFormat+"'),");
	             query.append(dbo);
	             query.append("DATE_FORMAT(C.INSURANCE_MATURITY_DATE,'"+dateFormat+"'),C.INSURANCE_PREMIUM_FREQUENCY,C.INSURANCE_NOMINEE,C.INSURANCE_RELATION_WITH_NOMINEE,C.INSURANCE_TENURE, ");
	             query.append(" C.INSURANCE_AGENCY,(select AGENCY_NAME from com_agency_m where agency_type='INS' and REC_STATUS='A' AND agency_code=C.INSURANCE_AGENCY)INSURANCE_AGENCY_NAME,C.COVER_NOTE,C.SUM_ASSURED,C.VEHICLE_IDV,C.VEHICLE_VALUATION_AMOUNT,C.VEHICLE_GRID_VALUE,C.INVOICE_NO,  ");
	             query.append(dbo);
	             query.append("DATE_FORMAT(C.VECHICLE_INVOICE_DATE,'"+dateFormat+"'),C.RC_RECEIVED,");
	             query.append(dbo);
	             query.append("DATE_FORMAT(C.RC_RECEIVED_DATE,'"+dateFormat+"'),C.PROPERTY_TOTAL_AREA,c.MAKE_MODEL_ID,C.DEALER_EXECUTIVE_ID,C.DEALER_MANAGER_ID,E.EMPLOYEE_NAME,M.EMPLOYEE_NAME,C.VALUER_NAME  ");
	             query.append(" from "+table+" c " +
	             		//"left join cr_deal_collateral_m d on c.ASSET_ID=d.ASSETID " +
	             		"left join cr_dsa_dealer_m ds on c.ASSET_SUPPLIER=ds.DEALER_ID left join com_state_m st on c.VEHICLE_ASSET_STATE=st.STATE_ID " );
	             query.append(" left join com_country_m ccm on c.COUNTRY=ccm.COUNTRY_ID left join com_state_m csm on c.STATE=csm.STATE_ID left join com_district_m cdm on c.DISTRICT=cdm.DISTRICT_ID " );
	             query.append(" left join COM_BP_EMPLOYEE_M E ON E.BP_EMP_ID=C.DEALER_EXECUTIVE_ID " );
	             query.append(	" left join COM_BP_EMPLOYEE_M M ON M.BP_EMP_ID=C.DEALER_MANAGER_ID " );
	             query.append(" where c.ASSET_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(primaryId)).trim()+" and c.ASSET_COLLATERAL_CLASS='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(propValue)).trim()+"'");
	             if(!dbType.equalsIgnoreCase("MSSQL") && dbo.equalsIgnoreCase(""))
					{
	            	 query.append(" limit 1 ");
					}
	            
	            logger.info("in fetchCollateralDetailsAll()   Query  :  "+query.toString());
		        ArrayList bdetails = ConnectionDAO.sqlSelect(query.toString());
	    	    logger.info("CollateralDetailsFetchAll"+bdetails.size());
	    	    
	    	    query=null;
	    	    int size=bdetails.size();
	    	    for(int i=0;i< bdetails.size();i++)
	    	    {
	    	    	ArrayList bdetails1=(ArrayList)bdetails.get(i);
	    	    	if(bdetails1.size()>0)
	    			{
	    	    	   vo =  new CollateralVo();
  	    		        vo.setAssetsId((CommonFunction.checkNull(bdetails1.get(0))).trim());
	    	    		vo.setColltype2((CommonFunction.checkNull(bdetails1.get(1))).trim());
	    	    		vo.setAssetNature((CommonFunction.checkNull(bdetails1.get(2))).trim());
	    	    		vo.setAssetsCollateralDesc((CommonFunction.checkNull(bdetails1.get(3))).trim());
	    	    		
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(4))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(4))).trim());
		    	    		vo.setAssetsCollateralValue(myFormatter.format(reconNum));
	    	    		}
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(5))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(5))).trim());
		    	    		vo.setCollateralSecurityMargin(myFormatter.format(reconNum));
	    	    		}	    	    		
	    	    		
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(6))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(6))).trim());
		    	    		vo.setFdAmount(myFormatter.format(reconNum));
	    	    		}	  
	    	    		
	    	    		vo.setFdTenure((CommonFunction.checkNull(bdetails1.get(7))).trim());
	    	    		
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(8))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(8))).trim());
		    	    		vo.setFdRate(myFormatter.format(reconNum));
	    	    		}	
	    	    		
	    	    		vo.setFdBookDate((CommonFunction.checkNull(bdetails1.get(9))).trim());
	    	    		vo.setFdMatureDate((CommonFunction.checkNull(bdetails1.get(10))).trim());
	    	    		vo.setFdAgencyName((CommonFunction.checkNull(bdetails1.get(11))).trim());
	    	    		vo.setFdAgencyRating((CommonFunction.checkNull(bdetails1.get(12))).trim());
	    	    		vo.setFdApplicants((CommonFunction.checkNull(bdetails1.get(13))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(14))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(14))).trim());
		    	    		vo.setSblcAmount(myFormatter.format(reconNum));
	    	    		}	
	    	    	
	    	    		vo.setSblcValidity((CommonFunction.checkNull(bdetails1.get(15))).trim());
	    	    		vo.setSblcIssuingDate((CommonFunction.checkNull(bdetails1.get(16))).trim());
	    	    		vo.setSblcParentCompany((CommonFunction.checkNull(bdetails1.get(17))).trim());
	    	    		vo.setSecurityType((CommonFunction.checkNull(bdetails1.get(18))).trim());
	    	    		vo.setSecurityCategory((CommonFunction.checkNull(bdetails1.get(19))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(20))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(20))).trim());
		    	    		vo.setSecurityMarketValue(myFormatter.format(reconNum));
	    	    		}	
	    	    		
	    	    		vo.setMachineMake((CommonFunction.checkNull(bdetails1.get(21))).trim());
	    	    		vo.setMachineModel((CommonFunction.checkNull(bdetails1.get(22))).trim());
	    	    		vo.setMachineType((CommonFunction.checkNull(bdetails1.get(23))).trim());
	    	    		vo.setMachineOwner((CommonFunction.checkNull(bdetails1.get(24))).trim());
	    	    		vo.setMachineYearOfManufact((CommonFunction.checkNull(bdetails1.get(25))).trim());
	    	    		vo.setMachineIdNo((CommonFunction.checkNull(bdetails1.get(26))).trim());
	    	    		vo.setLbxmachineSupplier((CommonFunction.checkNull(bdetails1.get(27))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(28))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(28))).trim());
		    	    		vo.setMachineCollateralCost(myFormatter.format(reconNum));
	    	    		}
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(29))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(29))).trim());
		    	    		vo.setMachineMargin(myFormatter.format(reconNum));
	    	    		}
	    	    	
	    	    		vo.setPropertyType((CommonFunction.checkNull(bdetails1.get(30))).trim());
	    	    		vo.setPropertyAddress((CommonFunction.checkNull(bdetails1.get(31))).trim());
	    	    		vo.setPropertyArea((CommonFunction.checkNull(bdetails1.get(32))).trim());
	    	    		vo.setPropertyConstruct((CommonFunction.checkNull(bdetails1.get(33))).trim());
	    	    		vo.setPropertyOwner((CommonFunction.checkNull(bdetails1.get(34))).trim());
	    	    		vo.setMortgage((CommonFunction.checkNull(bdetails1.get(35))).trim());
	    	    		vo.setVehicleMake((CommonFunction.checkNull(bdetails1.get(36))).trim());
	    	    		vo.setVehicleModel((CommonFunction.checkNull(bdetails1.get(37))).trim());
	    	    		vo.setVehicleType((CommonFunction.checkNull(bdetails1.get(38))).trim());
	    	    		vo.setVehicleOwner((CommonFunction.checkNull(bdetails1.get(39))).trim());
	    	    		vo.setVehicleYearOfManufact((CommonFunction.checkNull(bdetails1.get(40))).trim());
	    	    		vo.setVehicleRegNo((CommonFunction.checkNull(bdetails1.get(41))).trim());
	    	    		vo.setVehicleRegDate((CommonFunction.checkNull(bdetails1.get(42))).trim());
	    	    		vo.setVehicleChesisNo((CommonFunction.checkNull(bdetails1.get(43))).trim());
	    	    		vo.setVehicleInsurer((CommonFunction.checkNull(bdetails1.get(44))).trim());
	    	    		vo.setVehicleInsureDate((CommonFunction.checkNull(bdetails1.get(45))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(46))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(46))).trim());
		    	    		vo.setVehicleCollateralCost(myFormatter.format(reconNum));
	    	    		}
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(47))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(47))).trim());
		    	    		vo.setVehicleMargin(myFormatter.format(reconNum));
	    	    		}
	    	    		
	    	    		vo.setStockType((CommonFunction.checkNull(bdetails1.get(48))).trim());
	    	    		vo.setStockNature((CommonFunction.checkNull(bdetails1.get(49))).trim());
	    	    		vo.setStockAddress((CommonFunction.checkNull(bdetails1.get(50))).trim());
	    	    		vo.setStockCycle((CommonFunction.checkNull(bdetails1.get(51))).trim());
	    	    		vo.setDebtorType((CommonFunction.checkNull(bdetails1.get(52))).trim());
	    	    		vo.setDebtorTotal((CommonFunction.checkNull(bdetails1.get(53))).trim());
	    	    		vo.setColltype1((CommonFunction.checkNull(bdetails1.get(54))).trim());
	    	    		vo.setBgType((CommonFunction.checkNull(bdetails1.get(55))).trim());
	    	    		vo.setBgInDate((CommonFunction.checkNull(bdetails1.get(56))).trim());
	    	    		vo.setBgValidity((CommonFunction.checkNull(bdetails1.get(57))).trim());
	    	    		
	    	    	
	    	    		vo.setBgIssuing((CommonFunction.checkNull(bdetails1.get(58))).trim());
	    	    		
//	    	    		supplierDesc
//	    	    		assetManufactDesc
	    	    		vo.setMachineSupplier(CommonFunction.checkNull(bdetails1.get(59)).toString());
	    	    		logger.info("setMachineSupplier:::::::"+bdetails1.get(60));
	    	    		vo.setLbxmachineManufact((CommonFunction.checkNull(bdetails1.get(60))).trim());
	    	    		logger.info("setLbxmachineManufact:::::::"+bdetails1.get(60));
	    	    		vo.setAssetManufactDesc((CommonFunction.checkNull(bdetails1.get(61))).trim());
	    	    		logger.info("setAssetManufactDesc:::::::::::"+bdetails1.get(61));
	    	    		vo.setSupplierDesc((CommonFunction.checkNull(bdetails1.get(62))).trim());
	    	    		logger.info("setSupplierDesc:::::::::::"+bdetails1.get(62));
	    	    		vo.setInvoiceDate((CommonFunction.checkNull(bdetails1.get(63))).trim());
	    	    		logger.info("setInvoiceDate::::::::::"+bdetails1.get(63));
	    	    		
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(64))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(64))).trim());
		    	    		vo.setAssetsCost(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			vo.setAssetsCost("0.00");
	    	    		}
	    	    		
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(65))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(65))).trim());
		    	    		vo.setAssetsDiscount(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			vo.setAssetsDiscount("0.00");
	    	    		}
	    	    		
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(66))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(66))).trim());
		    	    		vo.setVehicleCost(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			vo.setVehicleCost("0.00");
	    	    		}
	    	    		
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(67))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(67))).trim());
		    	    		vo.setVehicleDiscount(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			vo.setVehicleDiscount("0.00");
	    	    		}
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(68))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum1 =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(68))).trim());
		    	    		vo.setLoanAmount(myFormatter.format(reconNum1));
	    	    		}
	    	    		else
	    	    		{
	    	    			vo.setLoanAmount("0.00");
	    	    		}
	    	    		vo.setSecurityTypes((CommonFunction.checkNull(bdetails1.get(69))).trim());
//Prashant
	    	    		vo.setTxtStateCode((CommonFunction.checkNull(bdetails1.get(70))).trim());
	    	    		vo.setAssetState((CommonFunction.checkNull(bdetails1.get(71))).trim());
	    	    		
	    	    		vo.setUsageType((CommonFunction.checkNull(bdetails1.get(72))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(73))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum1 =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(73))).trim());
		    	    		vo.setCollateralSecurityMarginDF(myFormatter.format(reconNum1));
	    	    		}

	    	    		//Nishant space start
	    	    		vo.setVillageLandmark((CommonFunction.checkNull(bdetails1.get(74))).trim());
	    	    		vo.setBuildUpArea((CommonFunction.checkNull(bdetails1.get(75))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(76))).trim().equalsIgnoreCase(""))
	    	    		{
	    	    			Number num = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(76))).trim());
	    	    			vo.setTxnValue(myFormatter.format(num));
	    	    		}
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(77))).trim().equalsIgnoreCase(""))
	    	    		{
	    	    			Number num = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(77))).trim());
	    	    			vo.setTechValuation(myFormatter.format(num));
	    	    		}
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(78))).trim().equalsIgnoreCase(""))
	    	    		{
	    	    			Number num = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(78))).trim());
	    	    			vo.setDocValue(myFormatter.format(num));
	    	    		}
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(79))).trim().equalsIgnoreCase(""))
	    	    		{
	    	    			Number num = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(79))).trim());
	    	    			vo.setAddConstruction(myFormatter.format(num));
	    	    		}
	    	    		vo.setAssetLevel((CommonFunction.checkNull(bdetails1.get(80))).trim());
	    	    		vo.setAddr2((CommonFunction.checkNull(bdetails1.get(81))).trim());
	    	    		vo.setAddr3((CommonFunction.checkNull(bdetails1.get(82))).trim());
	    	    		vo.setCountry((CommonFunction.checkNull(bdetails1.get(83))).trim());
	    	    		vo.setState((CommonFunction.checkNull(bdetails1.get(84))).trim());
	    	    		vo.setDist((CommonFunction.checkNull(bdetails1.get(85))).trim());
	    	    		vo.setTahsil((CommonFunction.checkNull(bdetails1.get(86))).trim());
	    	    		vo.setPincode((CommonFunction.checkNull(bdetails1.get(87))).trim());
	    	    		vo.setTxtCountryCode((CommonFunction.checkNull(bdetails1.get(88))).trim());
	    	    		vo.setTxtStateCode((CommonFunction.checkNull(bdetails1.get(89))).trim());
	    	    		vo.setTxtDistCode((CommonFunction.checkNull(bdetails1.get(90))).trim());
	    	    		vo.setAssetStandard((CommonFunction.checkNull(bdetails1.get(91))).trim());
	    	    		vo.setLawyerName((CommonFunction.checkNull(bdetails1.get(92))).trim());
	    	    		vo.setValuerName((CommonFunction.checkNull(bdetails1.get(93))).trim());
	    	    		vo.setPropertyDirection((CommonFunction.checkNull(bdetails1.get(94))).trim());
	    	    		vo.setEngineNumber((CommonFunction.checkNull(bdetails1.get(95))).trim());
	    	    		vo.setPropertyStatus((CommonFunction.checkNull(bdetails1.get(96))).trim());
	    	    		vo.setPropertyTitle((CommonFunction.checkNull(bdetails1.get(97))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(98))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(98))).trim());
		    	    		vo.setCarpetArea(myFormatter.format(reconNum));
	    	    		}
	//    	    		vo.setCarpetArea((CommonFunction.checkNull(bdetails1.get(97))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(99))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(99))).trim());
		    	    		vo.setTechnicalValuation1(myFormatter.format(reconNum));
	    	    		}
	    	//    		vo.setTechnicalValuation1((CommonFunction.checkNull(bdetails1.get(98))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(100))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(100))).trim());
		    	    		vo.setTechnicalValuation2(myFormatter.format(reconNum));
	    	    		}
	    	//    		vo.setTechnicalValuation2((CommonFunction.checkNull(bdetails1.get(99))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(101))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(101))).trim());
		    	    		vo.setBuildUpAreaSQMTR(myFormatter.format(reconNum));
	    	    		}
//	    	    		vo.setBuildUpAreaSQMTR((CommonFunction.checkNull(bdetails1.get(100))).trim());
	    	    		vo.setLbxBankID((CommonFunction.checkNull(bdetails1.get(102))).trim());
	    	    		vo.setBank((CommonFunction.checkNull(bdetails1.get(103))).trim());
	    	    		vo.setLbxBranchID((CommonFunction.checkNull(bdetails1.get(104))).trim());
	    	    		vo.setBranch((CommonFunction.checkNull(bdetails1.get(105))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(106))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(106))).trim());
		    	    		vo.setSuperBuildUpArea(myFormatter.format(reconNum));
	    	    		}
	    	    		
	    	    		vo.setPropertyOwnerGcdId((CommonFunction.checkNull(bdetails1.get(107))).trim());
	    	    		vo.setValuationMethodId((CommonFunction.checkNull(bdetails1.get(108))).trim());
	    	    		vo.setValuationMethod((CommonFunction.checkNull(bdetails1.get(109))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(110))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(110))).trim());
		    	    		vo.setValuationAmount(myFormatter.format(reconNum));
	    	    		}
	    	    		vo.setPolicyNo((CommonFunction.checkNull(bdetails1.get(111))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(112))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(112))).trim());
		    	    		vo.setPremiumAmount(myFormatter.format(reconNum));
	    	    		}
	    	    		vo.setPolicyStartDate((CommonFunction.checkNull(bdetails1.get(113))).trim());
	    	    		vo.setInsMatureDate((CommonFunction.checkNull(bdetails1.get(114))).trim());
	    	    		vo.setPremiumFrequency((CommonFunction.checkNull(bdetails1.get(115))).trim());
	    	    		vo.setNominee((CommonFunction.checkNull(bdetails1.get(116))).trim());
	    	    		vo.setRelWithNominee((CommonFunction.checkNull(bdetails1.get(117))).trim());
	    	    		
	    	    		vo.setTenureYear((CommonFunction.checkNull(bdetails1.get(118))).trim());
	    	    		vo.setLbxInsuranceAgency((CommonFunction.checkNull(bdetails1.get(119))).trim());
	    	    		vo.setInsuranceAgency((CommonFunction.checkNull(bdetails1.get(120))).trim());
	    	    		vo.setCoverNoteNo((CommonFunction.checkNull(bdetails1.get(121))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(122))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(122))).trim());
		    	    		vo.setSumAssured(myFormatter.format(reconNum));
	    	    		}
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(123))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(123))).trim());
		    	    		vo.setIdv(myFormatter.format(reconNum));
	    	    		}
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(124))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(124))).trim());
		    	    		vo.setValuationCost(myFormatter.format(reconNum));
	    	    		}
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(125))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(125))).trim());
		    	    		vo.setGridValue(myFormatter.format(reconNum));
	    	    		}

	    	    		//Nishant space end
	    	    		
	    	    		vo.setInvoiceNumber((CommonFunction.checkNull(bdetails1.get(126))).trim());
	    	    		vo.setVehicleInvoiceDate((CommonFunction.checkNull(bdetails1.get(127))).trim());
	    	    		vo.setRcReceived((CommonFunction.checkNull(bdetails1.get(128))).trim());
	    	    		vo.setRcReceivedDate((CommonFunction.checkNull(bdetails1.get(129))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(130))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(130))).trim());
		    	    		vo.setTotalArea(myFormatter.format(reconNum));
	    	    		}
	    	    		vo.setMake_model_id((CommonFunction.checkNull(bdetails1.get(131))).trim());
	    	    		
	    	    		vo.setLbxDealerExecutive((CommonFunction.checkNull(bdetails1.get(132))).trim());
	    	    		vo.setLbxDealerManager((CommonFunction.checkNull(bdetails1.get(133))).trim());
	    	    		vo.setDealerExecutive((CommonFunction.checkNull(bdetails1.get(134))).trim());
	    	    		vo.setDealerManager((CommonFunction.checkNull(bdetails1.get(135))).trim());
	    	    		vo.setValuerName((CommonFunction.checkNull(bdetails1.get(136))).trim());
                    }
	    			list.add(vo);
	    		}
	    		}catch(Exception e){
	    			e.printStackTrace();
	    		}

	    		return list;

	    	}

             public boolean updateCollateralDetailsAll(Object ob,String primaryId ,String assetType,String source)
    	     {
             CollateralVo vo=(CollateralVo)ob;
    		 boolean status = false;
    		 String standard="";
    		 logger.info("vo.getAssetStandard:::::Update:::::::::"+vo.getAssetStandard());
    		   		 
    		 logger.info("getColltype2::::::Insert::::::::"+vo.getColltype2());
    		 if(vo.getColltype2().equalsIgnoreCase("ASSET")){
    			if (vo.getAssetStandard()!= null && vo.getAssetStandard().equals("on")) 
    		     {
    			 standard="Y";
    		    } else{
    			 standard="N";}
    		 }
    		 StringBuffer bufInsUpdSql = new StringBuffer();
    		 logger.info("vo.getVehicleMargin(): ---updateCollateralDetailsAll---"+vo.getVehicleMargin());
    		 if((CommonFunction.checkNull( vo.getLbxmachineSupplier())).trim().equalsIgnoreCase(""))
    		 {
    			 vo.setLbxmachineSupplier("0");
    		 }
    		 if((CommonFunction.checkNull(vo.getLbxmachineManufact())).trim().equalsIgnoreCase(""))
    		 {
    			 vo.setLbxmachineManufact("0");
    		 }
    		 if((CommonFunction.checkNull( vo.getSecurityCategory())).trim().equalsIgnoreCase(""))
    		 {
    			 vo.setSecurityCategory("");
    		 }
    		  if((CommonFunction.checkNull(vo.getCollateralSecurityMargin())).trim().equalsIgnoreCase(""))
    		 {
    			 vo.setCollateralSecurityMargin("0");
    		 }
    		  if((CommonFunction.checkNull(vo.getCollateralSecurityMarginDF())).trim().equalsIgnoreCase(""))
     		 {
     			 vo.setCollateralSecurityMarginDF("0");
     		 }
    		 if((CommonFunction.checkNull(vo.getFdAmount())).trim().equalsIgnoreCase(""))
    		 {
    			 vo.setFdAmount("0.00");
    		 }
    		 if((CommonFunction.checkNull(vo.getSblcAmount())).trim().equalsIgnoreCase(""))
    		 {
    			 vo.setSblcAmount("0.00");
    		 }
    		 if((CommonFunction.checkNull(vo.getSecurityMarketValue())).trim().equalsIgnoreCase(""))
    		 {
    			 vo.setSecurityMarketValue("0.00");
    		 }
    		 if((CommonFunction.checkNull(vo.getMachineCollateralCost())).trim().equalsIgnoreCase(""))
    		 {
    			 vo.setMachineCollateralCost("0.00");
    		 }
    		 if((CommonFunction.checkNull(vo.getAssetsCollateralValue())).trim().equalsIgnoreCase(""))
    		 {
    			 vo.setAssetsCollateralValue("0.00");
    		 }
    		 if((CommonFunction.checkNull(vo.getVehicleCollateralCost())).trim().equalsIgnoreCase(""))
    		 {
    			 vo.setVehicleCollateralCost("0.00");
    		 }
    		 if((CommonFunction.checkNull(vo.getAssetsCost())).trim().equalsIgnoreCase(""))
    		 {
    			 vo.setAssetsCost("0.00");
    		 }
    		 if((CommonFunction.checkNull(vo.getAssetsDiscount())).trim().equalsIgnoreCase(""))
    		 {
    			 vo.setAssetsDiscount("0.00");
    		 }
    		 if((CommonFunction.checkNull(vo.getVehicleCost())).trim().equalsIgnoreCase(""))
    		 {
    			 vo.setVehicleCost("0.00");
    		 }
    		 if((CommonFunction.checkNull(vo.getVehicleDiscount())).trim().equalsIgnoreCase(""))
    		 {
    			 vo.setVehicleDiscount("0.00");
    		 }
    		 qryList = new ArrayList();
    		 
    		    try 
    		    {
    		    	String table="cr_asset_collateral_m";
    		    	if(CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
    		    		table="cr_asset_collateral_m_edit";
    		    	
    			 bufInsUpdSql.append("UPDATE "+table+" ");
    			 bufInsUpdSql.append(" SET ASSET_TYPE=?,ASSET_NEW_OLD=?,ASSET_COLLATERAL_DESC=?,ASSET_COLLATERAL_VALUE=?," );
    			 bufInsUpdSql.append("COLLATERAL_SECURITY_MARGIN=?,DEFAULT_LTV=?, FD_AMOUNT=?,FD_TENURE=?,FD_RATE=?,FD_BOOK_DATE=");
    			 bufInsUpdSql.append(dbo);
    			 bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"')," );
    			 bufInsUpdSql.append(" FD_MATURITY_DATE=");
    			 bufInsUpdSql.append(dbo);
    			 bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),FD_AGENCY_NAME=?," );
    			 bufInsUpdSql.append(" FD_AGENCY_RATING=?,FD_APPLICANT=?,SBLC_AMOUNT=?,SBLC_VALIDITY=");
    			 bufInsUpdSql.append(dbo);
    			 bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"')," );
    			 bufInsUpdSql.append(" SBLC_ISSUING_DATE=");
    			 bufInsUpdSql.append(dbo);
    			 bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),SBLC_PARENT_COMPANY=?," );
    			bufInsUpdSql.append(" SECURITY_TYPE=?,SECURITY_CATEGORY=?,SECURITY_MARKET_VALUE=?,MACHINE_MAKE=?,MACHINE_MODEL=?,MACHINE_TYPE=?," );
    			bufInsUpdSql.append(" MACHINE_OWNER=?,MACHINE_MANUFACTURING_YEAR=");
    			bufInsUpdSql.append(dbo);
    			bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),MACHINE_IDENTIFICATION_NO=?," );
    			bufInsUpdSql.append(" ASSET_SUPPLIER=?,MACHINE_COLLATERAL_COST=?,MACHINE_MARGIN=?," );
    			bufInsUpdSql.append(" PROPERTY_TYPE=?,PROPERTY_ADDRESS=?,PROPERTY_AREA=?,PROPERTY_CONSTRUCTION=?,PROPERY_VALUE=?,");
    			bufInsUpdSql.append(" PROPERTY_OWNER=?,MORTAGE_TYPE=?,VEHICLE_MAKE=?, VEHICLE_MODEL=?,MAKE_MODEL_ID=?,VEHICLE_TYPE=?,VEHICLE_OWNER=?," );
    			bufInsUpdSql.append(" VEHICLE_MANUFACTURING_YEAR=?, VEHICLE_REGISTRATION_NO=?," );
    			bufInsUpdSql.append(" VEHICLE_REGISTRATION_DATE=");
    			bufInsUpdSql.append(dbo);
    			bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'), VEHICLE_CHASIS_NUMBER=?,VEHICLE_Insurer=?," );
    			bufInsUpdSql.append(" VEHICLE_INSURED_DATE=");
    			bufInsUpdSql.append(dbo);
    			bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),VEHICLE_COLLATERAL_COST=?," );
    			bufInsUpdSql.append(" VEHICLE_MARGIN=?,STOCK_TYPE=?, STOCK_NATURE=?,STOCK_GODOWN_ADDRESS=?,STOCK_INVENTORY_CYCLE=?,DEBTOR_TYPE=?," );
    			bufInsUpdSql.append(" DEBTOR_TOTAL_OUTSTANDING=?,ASSET_COLLATERAL_CLASS=?,ASSET_MANUFATURER=?,ASSET_SUPPLIER_DESC=?," );
    			bufInsUpdSql.append(" ASSET_MANUFATURER_DESC=?,BG_ISSUING_BANK=?,INVOICE_DATE=");
    			bufInsUpdSql.append(dbo);
    			bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"')," );
    			bufInsUpdSql.append(" MAKER_ID=?,MAKER_DATE=");
    			//bufInsUpdSql.append( "DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND)," );
    			bufInsUpdSql.append(dbo);
    			bufInsUpdSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9), ");
    			bufInsUpdSql.append(" MACHINE_VALUE=?,MACHINE_DISCOUNT=?,VEHICLE_VALUE=?,VEHICLE_DISCOUNT=?,LOAN_AMOUNT=?,SECURITY=?,VEHICLE_ASSET_STATE=?,VEHICLE_ASSET_USES_TYPE=?," );
    			bufInsUpdSql.append(" ASSET_LEVEL=?,VILLAGE_NAME_LANDMARK=?,TXN_VALUE=?,TECH_VERIFICATION=?,DOCUMENT_VALUE=?,ADDITIONAL_CONSTRUCTION=?,BUILT_UP_AREA=?," );
    			bufInsUpdSql.append(" ADDRESS_LINE2=?,ADDRESS_LINE3=?,COUNTRY=?,STATE=?,DISTRICT=?,PINCODE=?,TEHSIL=?,ASSET_STANDARD=?,LAWYER_NAME=?,VALUER_NAME=?,PROPERTY_DIRECTION=?,ENGINE_NUMBER=?,PROPERTY_TITLE=?,PROPERTY_STATUS=?,CARPET_AREA=?,TECHNICAL_VAL1=?,TECHNICAL_VAL2=?,BUILDUPAREASQMTR=?,ISSUEING_BANK_ID=?,ISSUEING_BRANCH_ID=?,SUPER_BUILDUP_AREA=?,PROPERTY_OWNER_GCD_ID=?,VALUATION_METHOD_ID=?,VALUATION_AMOUNT=?,  ");
    			bufInsUpdSql.append("INSURANCE_POLICY_NO=?,INSURANCE_PREMIUM_AMOUNT=?,INSURANCE_POLICY_START_DATE=");
    			bufInsUpdSql.append(dbo);
    			bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),INSURANCE_MATURITY_DATE=");
    			bufInsUpdSql.append(dbo);
    			bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),INSURANCE_PREMIUM_FREQUENCY=?,INSURANCE_NOMINEE=?,INSURANCE_RELATION_WITH_NOMINEE=?,INSURANCE_TENURE=?,INSURANCE_AGENCY=?,COVER_NOTE=?,SUM_ASSURED=?,VEHICLE_IDV=?,VEHICLE_VALUATION_AMOUNT=?,VEHICLE_GRID_VALUE=?,INVOICE_NO=?,VECHICLE_INVOICE_DATE=    ");
    			bufInsUpdSql.append(dbo);
    			bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),RC_RECEIVED=?,RC_RECEIVED_DATE=");
    			bufInsUpdSql.append(dbo);
    			bufInsUpdSql.append("STR_TO_DATE(?,'"+dateFormat+"'),PROPERTY_TOTAL_AREA=?,DEALER_EXECUTIVE_ID=?,DEALER_MANAGER_ID=? ");
    			bufInsUpdSql.append(" WHERE ASSET_ID=? AND ASSET_TYPE=? ");
                         
                         PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
                         
                         if((CommonFunction.checkNull(vo.getColltype2())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getColltype2()).trim());
                         
                         if((CommonFunction.checkNull(vo.getAssetNature())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getAssetNature()).trim());
                         
                         if((CommonFunction.checkNull(vo.getAssetsCollateralDesc())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getAssetsCollateralDesc()).trim());
                         
                         if((CommonFunction.checkNull(vo.getAssetsCollateralValue())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString(myFormatter.parse((vo.getAssetsCollateralValue()).trim()).toString());
                         
                         if((CommonFunction.checkNull(vo.getCollateralSecurityMargin())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					//insertPrepStmtObject.addString(myFormatter.parse((vo.getCollateralSecurityMargin()).trim()).toString());
         					insertPrepStmtObject.addString((vo.getCollateralSecurityMargin()).trim());
                         if((CommonFunction.checkNull(vo.getCollateralSecurityMarginDF())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString(myFormatter.parse((vo.getCollateralSecurityMarginDF()).trim()).toString());
                         
                         if((CommonFunction.checkNull(vo.getFdAmount())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString(myFormatter.parse((vo.getFdAmount()).trim()).toString());
                         
                         if((CommonFunction.checkNull(vo.getFdTenure())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getFdTenure()).trim());
                         
                         if((CommonFunction.checkNull(vo.getFdRate())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString(myFormatter.parse((vo.getFdRate()).trim()).toString());
                         
                         if((CommonFunction.checkNull(vo.getFdBookDate())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getFdBookDate()).trim());
                         
                         if((CommonFunction.checkNull(vo.getFdMatureDate())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getFdMatureDate()).trim());
                         
                         if((CommonFunction.checkNull(vo.getFdAgencyName())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getFdAgencyName()).trim());
                         
                         if((CommonFunction.checkNull(vo.getFdAgencyRating())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getFdAgencyRating()).trim());
                         
                         if((CommonFunction.checkNull(vo.getFdApplicants())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getFdApplicants()).trim());
                         
                         if((CommonFunction.checkNull(vo.getSblcAmount())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString(myFormatter.parse((vo.getSblcAmount()).trim()).toString());
                         
                         if((CommonFunction.checkNull(vo.getSblcValidity())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getSblcValidity()).trim());
                         
                         if((CommonFunction.checkNull(vo.getSblcIssuingDate())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getSblcIssuingDate()).trim());
                         
                         if((CommonFunction.checkNull(vo.getSblcParentCompany())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getSblcParentCompany()).trim());
                         
                         if((CommonFunction.checkNull(vo.getSecurityType())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getSecurityType()).trim());
                         
                         if((CommonFunction.checkNull(vo.getSecurityCategory())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getSecurityCategory()).trim());
                         
                         if((CommonFunction.checkNull(vo.getSecurityMarketValue())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString(myFormatter.parse((vo.getSecurityMarketValue()).trim()).toString());
                         
                         if((CommonFunction.checkNull(vo.getMachineMake())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getMachineMake()).trim());
                         
                         if((CommonFunction.checkNull(vo.getMachineModel())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getMachineModel()).trim());
                         
                         if((CommonFunction.checkNull(vo.getMachineType())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getMachineType()).trim());
                         
                         if((CommonFunction.checkNull(vo.getMachineOwner())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getMachineOwner()).trim());
                         
                         if((CommonFunction.checkNull(vo.getMachineYearOfManufact())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getMachineYearOfManufact()).trim());
                         
                         if((CommonFunction.checkNull(vo.getMachineIdNo())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getMachineIdNo()).trim());
                         
                         if((CommonFunction.checkNull(vo.getLbxmachineSupplier())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getLbxmachineSupplier()).trim());
                         
                         if((CommonFunction.checkNull(vo.getMachineCollateralCost())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString(myFormatter.parse((vo.getMachineCollateralCost()).trim()).toString());
                         
                         if((CommonFunction.checkNull(vo.getMachineMargin())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString(myFormatter.parse((vo.getMachineMargin()).trim()).toString());
                         
                         if((CommonFunction.checkNull(vo.getPropertyType())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getPropertyType()).trim());
                         
                         if((CommonFunction.checkNull(vo.getPropertyAddress())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getPropertyAddress()).trim());
                         
                         if((CommonFunction.checkNull(vo.getPropertyArea())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getPropertyArea()).trim());
                         
                         if((CommonFunction.checkNull(vo.getPropertyConstruct())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getPropertyConstruct()).trim());
                         
                         if((CommonFunction.checkNull(vo.getAssetsCollateralValue())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString(myFormatter.parse((vo.getAssetsCollateralValue()).trim()).toString());
                         
                         if((CommonFunction.checkNull(vo.getPropertyOwner())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addNull();
         				else
         					insertPrepStmtObject.addString((vo.getPropertyOwner()).trim());
                         //richa
                         if((CommonFunction.checkNull(vo.getMortgage())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString((vo.getMortgage()).trim());
                          
                         
                         if((CommonFunction.checkNull(vo.getVehicleMake())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString((vo.getVehicleMake()).trim());
                         
                         if((CommonFunction.checkNull(vo.getVehicleModel())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString((vo.getVehicleModel()).trim());
                         
                         if((CommonFunction.checkNull(vo.getMake_model_id())).trim().equalsIgnoreCase(""))
           					insertPrepStmtObject.addNull();
           				else
           					insertPrepStmtObject.addString((vo.getMake_model_id()).trim());
                         
                         if((CommonFunction.checkNull(vo.getVehicleType())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString((vo.getVehicleType()).trim());
                         
                         if((CommonFunction.checkNull(vo.getVehicleOwner())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString((vo.getVehicleOwner()).trim());
                         
                         if((CommonFunction.checkNull(vo.getVehicleYearOfManufact())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString((vo.getVehicleYearOfManufact()).trim());
                         
                         if((CommonFunction.checkNull(vo.getVehicleRegNo())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString(vo.getVehicleRegNo().trim());
                         
                         if((CommonFunction.checkNull(vo.getVehicleRegDate())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString((vo.getVehicleRegDate()).trim());
                         
                         if((CommonFunction.checkNull(vo.getVehicleChesisNo())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString((vo.getVehicleChesisNo()).trim());
                         
                         if((CommonFunction.checkNull(vo.getVehicleInsurer())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString((vo.getVehicleInsurer()).trim());
                         
                         if((CommonFunction.checkNull(vo.getVehicleInsureDate())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString((vo.getVehicleInsureDate()).trim());
                         
                         if((CommonFunction.checkNull(vo.getVehicleCollateralCost())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString(myFormatter.parse((vo.getVehicleCollateralCost()).trim()).toString());
                         
                         if((CommonFunction.checkNull(vo.getVehicleMargin())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString(myFormatter.parse((vo.getVehicleMargin()).trim()).toString());
                         
                         if((CommonFunction.checkNull(vo.getStockType())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString((vo.getStockType()).trim());
                         
                         if((CommonFunction.checkNull(vo.getStockNature())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString((vo.getStockNature()).trim());
                         
                         if((CommonFunction.checkNull(vo.getStockAddress())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString((vo.getStockAddress()).trim());
                         
                         if((CommonFunction.checkNull(vo.getStockCycle())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString((vo.getStockCycle()).trim());
                         
                         if((CommonFunction.checkNull(vo.getDebtorType())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString((vo.getDebtorType()).trim());
                         
                         if((CommonFunction.checkNull(vo.getDebtorTotal())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString((vo.getDebtorTotal()).trim());
                         
                         if((CommonFunction.checkNull(vo.getColltype1())).trim().equalsIgnoreCase(""))
           					insertPrepStmtObject.addNull();
           				else
           					insertPrepStmtObject.addString((vo.getColltype1()).trim());
                         
                         if((CommonFunction.checkNull(vo.getLbxmachineManufact())).trim().equalsIgnoreCase(""))
           					insertPrepStmtObject.addNull();
           				else
           					insertPrepStmtObject.addString((vo.getLbxmachineManufact()).trim());
//                         
//                         if((CommonFunction.checkNull(vo.getSupplierDesc())).trim().equalsIgnoreCase(""))
//                					insertPrepStmtObject.addNull();
//                				else
//                					insertPrepStmtObject.addString((vo.getSupplierDesc().trim()));
//                              
//                              if((CommonFunction.checkNull(vo.getAssetManufactDesc())).trim().equalsIgnoreCase(""))
//                					insertPrepStmtObject.addNull();
//                				else
//                					insertPrepStmtObject.addString((vo.getAssetManufactDesc()).trim()); 

                        	
                  	   if((CommonFunction.checkNull(vo.getMachineSupplier())).trim().equalsIgnoreCase(""))//ASSET_SUPPLIER_DESC
                  		   insertPrepStmtObject.addNull();
                  	   else
                  		   insertPrepStmtObject.addString((vo.getMachineSupplier()).trim()); 
                                                  
                  	   if((CommonFunction.checkNull(vo.getAssetManufact())).trim().equalsIgnoreCase(""))//manufacturer desc
                  		   insertPrepStmtObject.addNull();
                  	   else
                  		   insertPrepStmtObject.addString((vo.getAssetManufact()).trim()); 
                         
                         
                         if((CommonFunction.checkNull(vo.getBgIssuing())).trim().equalsIgnoreCase(""))
           					insertPrepStmtObject.addNull();
           				else
           					insertPrepStmtObject.addString((vo.getBgIssuing()).trim());
                         
                         
                         if((CommonFunction.checkNull(vo.getInvoiceDate())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString((vo.getInvoiceDate()).trim());
                       //------------------------------------------
 						if(CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
 							insertPrepStmtObject.addNull();
 						else
 							insertPrepStmtObject.addString((vo.getUserId()).trim());
 						
 						if(CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
 							insertPrepStmtObject.addNull();
 						else
 							insertPrepStmtObject.addString((vo.getMakerDate()).trim());
 						
 						if((CommonFunction.checkNull(vo.getAssetsCost())).trim().equalsIgnoreCase(""))
         					insertPrepStmtObject.addString("0.00");
         				else
         					insertPrepStmtObject.addString(myFormatter.parse((vo.getAssetsCost()).trim()).toString());
                         
 						if((CommonFunction.checkNull(vo.getAssetsDiscount())).trim().equalsIgnoreCase(""))
 							insertPrepStmtObject.addString("0.00");
         				else
         					insertPrepStmtObject.addString(myFormatter.parse((vo.getAssetsDiscount()).trim()).toString());
                         
 						if((CommonFunction.checkNull(vo.getVehicleCost())).trim().equalsIgnoreCase(""))
 							insertPrepStmtObject.addString("0.00");
         				else
         					insertPrepStmtObject.addString(myFormatter.parse((vo.getVehicleCost()).trim()).toString());
                         
 						if((CommonFunction.checkNull(vo.getVehicleDiscount())).trim().equalsIgnoreCase(""))
 							insertPrepStmtObject.addString("0.00");
         				else
         					insertPrepStmtObject.addString(myFormatter.parse((vo.getVehicleDiscount()).trim()).toString());
 						
 						if((CommonFunction.checkNull(vo.getLoanAmount())).trim().equalsIgnoreCase(""))
 	         				insertPrepStmtObject.addNull();
 	         			else
 	         				insertPrepStmtObject.addString(myFormatter.parse((vo.getLoanAmount()).trim()).toString());
 						
 						if((CommonFunction.checkNull(vo.getSecurityTypes())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString((vo.getSecurityTypes()).trim());
 	//Prashant					
 						if((CommonFunction.checkNull(vo.getTxtStateCode())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString((vo.getTxtStateCode()).trim());
 						
 						if((CommonFunction.checkNull(vo.getUsageType())).trim().equalsIgnoreCase(""))
          					insertPrepStmtObject.addNull();
          				else
          					insertPrepStmtObject.addString((vo.getUsageType()).trim());
 						//Nishant space start
 				         
 				         if((CommonFunction.checkNull(vo.getAssetLevel())).trim().equalsIgnoreCase(""))
 				                insertPrepStmtObject.addNull();
 				         else
 				                insertPrepStmtObject.addString((vo.getAssetLevel()).trim());
 				         if((CommonFunction.checkNull(vo.getVillageLandmark())).trim().equalsIgnoreCase(""))
 				                insertPrepStmtObject.addNull();
 				         else
 				                insertPrepStmtObject.addString((vo.getVillageLandmark()).trim());
 				         if((CommonFunction.checkNull(vo.getTxnValue())).trim().equalsIgnoreCase(""))
 				                insertPrepStmtObject.addNull();
 				         else
 				                insertPrepStmtObject.addString(myFormatter.parse((vo.getTxnValue()).trim()).toString());
 				         if((CommonFunction.checkNull(vo.getTechValuation())).trim().equalsIgnoreCase(""))
 				                insertPrepStmtObject.addNull();
 				         else
 				                insertPrepStmtObject.addString(myFormatter.parse((vo.getTechValuation()).trim()).toString());
 				         if((CommonFunction.checkNull(vo.getDocValue())).trim().equalsIgnoreCase(""))
 				                insertPrepStmtObject.addNull();
 				         else
 				                insertPrepStmtObject.addString(myFormatter.parse((vo.getDocValue()).trim()).toString());
 				         if((CommonFunction.checkNull(vo.getAddConstruction())).trim().equalsIgnoreCase(""))
 				                insertPrepStmtObject.addNull();
 				         else
 				                insertPrepStmtObject.addString(myFormatter.parse((vo.getAddConstruction()).trim()).toString());
 				         if((CommonFunction.checkNull(vo.getBuildUpArea())).trim().equalsIgnoreCase(""))
 				                insertPrepStmtObject.addNull();
 				         else
 				                insertPrepStmtObject.addString((vo.getBuildUpArea()).trim());
 				         if((CommonFunction.checkNull(vo.getAddr2())).trim().equalsIgnoreCase(""))
 				        	 	insertPrepStmtObject.addNull();
 				         else
 				        	 	insertPrepStmtObject.addString((vo.getAddr2()).trim());
 				         if((CommonFunction.checkNull(vo.getAddr3())).trim().equalsIgnoreCase(""))
 			              		insertPrepStmtObject.addNull();
 				         else
 				        	 	insertPrepStmtObject.addString((vo.getAddr3()).trim());
 				         if((CommonFunction.checkNull(vo.getTxtCountryCode())).trim().equalsIgnoreCase(""))
 				        	 	insertPrepStmtObject.addNull();
 				         else
 				        	 	insertPrepStmtObject.addString((vo.getTxtCountryCode()).trim());
 				         if((CommonFunction.checkNull(vo.getTxtStateCode())).trim().equalsIgnoreCase(""))
 				        	 	insertPrepStmtObject.addNull();
 				         else
 				        	 	insertPrepStmtObject.addString((vo.getTxtStateCode()).trim());
 				         if((CommonFunction.checkNull(vo.getTxtDistCode())).trim().equalsIgnoreCase(""))
 				        	 	insertPrepStmtObject.addNull();
 				         else
 				        	 	insertPrepStmtObject.addString((vo.getTxtDistCode()).trim());
 				         if((CommonFunction.checkNull(vo.getPincode())).trim().equalsIgnoreCase(""))
 				        	 	insertPrepStmtObject.addNull();
 				         else
 				        	 	insertPrepStmtObject.addString((vo.getPincode()).trim());
 				         if((CommonFunction.checkNull(vo.getTahsil())).trim().equalsIgnoreCase(""))
 				        	 	insertPrepStmtObject.addNull();
 				         else
 				        	 	insertPrepStmtObject.addString((vo.getTahsil()).trim());
 			         
 				         //Nishant space end
                        
 						//------------------------------------------
 //Anil						
 						if((CommonFunction.checkNull(standard)).equalsIgnoreCase(""))
        					insertPrepStmtObject.addNull();
        				else
        					insertPrepStmtObject.addString((standard));
 						//------------------------------------------
                        
 						//Nishant space starts
 						if((CommonFunction.checkNull(vo.getLawyerName())).trim().equalsIgnoreCase(""))
				        	 	insertPrepStmtObject.addNull();
				         else
				        	 	insertPrepStmtObject.addString((vo.getLawyerName()).trim());
 						if((CommonFunction.checkNull(vo.getValuerName())).trim().equalsIgnoreCase(""))
				        	 	insertPrepStmtObject.addNull();
				         else
				        	 	insertPrepStmtObject.addString((vo.getValuerName()).trim());
 						if((CommonFunction.checkNull(vo.getPropertyDirection())).trim().equalsIgnoreCase(""))
				        	 	insertPrepStmtObject.addNull();
				         else
				        	 	insertPrepStmtObject.addString((vo.getPropertyDirection()).trim());
 						//Nishant Space end
 						
 						if((CommonFunction.checkNull(vo.getEngineNumber())).equalsIgnoreCase(""))
        					insertPrepStmtObject.addNull();
        				else
        					insertPrepStmtObject.addString((vo.getEngineNumber()));
 						
 						//sachin
 						
 						if((CommonFunction.checkNull(vo.getPropertyTitle()).trim()).equalsIgnoreCase(""))
 						   insertPrepStmtObject.addNull();
 							  else
 								  insertPrepStmtObject.addString((vo.getPropertyTitle()).trim());
 					   
 					  
 						if((CommonFunction.checkNull(vo.getPropertyStatus()).trim()).equalsIgnoreCase(""))
 						   insertPrepStmtObject.addNull();
 							  else
 								  insertPrepStmtObject.addString((vo.getPropertyStatus()).trim());
 					   
 					   if((CommonFunction.checkNull(vo.getCarpetArea()).trim()).equalsIgnoreCase(""))
 						   insertPrepStmtObject.addNull();
 							  else
 								 insertPrepStmtObject.addString(myFormatter.parse((vo.getCarpetArea()).trim()).toString());

 					   
 					   if((CommonFunction.checkNull(vo.getTechnicalValuation1()).trim()).equalsIgnoreCase(""))
 						   insertPrepStmtObject.addNull();
 							  else
 								 insertPrepStmtObject.addString(myFormatter.parse((vo.getTechnicalValuation1()).trim()).toString());

 					   
 					   if((CommonFunction.checkNull(vo.getTechnicalValuation2()).trim()).equalsIgnoreCase(""))
 						   insertPrepStmtObject.addNull();
 							  else
 								 insertPrepStmtObject.addString(myFormatter.parse((vo.getTechnicalValuation2()).trim()).toString());

 					   if((CommonFunction.checkNull(vo.getBuildUpAreaSQMTR()).trim()).equalsIgnoreCase(""))
 						   insertPrepStmtObject.addNull();
 							  else
 								 insertPrepStmtObject.addString(myFormatter.parse((vo.getBuildUpAreaSQMTR()).trim()).toString());
 
 					   if((CommonFunction.checkNull(vo.getLbxBankID()).trim()).equalsIgnoreCase(""))
 						   insertPrepStmtObject.addNull();
 							  else
 								  insertPrepStmtObject.addString((vo.getLbxBankID()).trim());
 					   if((CommonFunction.checkNull(vo.getLbxBranchID()).trim()).equalsIgnoreCase(""))
 						   insertPrepStmtObject.addNull();
 							  else
 								  insertPrepStmtObject.addString((vo.getLbxBranchID()).trim());
// 					  if((CommonFunction.checkNull(vo.getTechValuation())).trim().equalsIgnoreCase(""))
//			                insertPrepStmtObject.addNull();
//			         else
//			                insertPrepStmtObject.addString(myFormatter.parse((vo.getTechValuation()).trim()).toString());
 					  if((CommonFunction.checkNull(vo.getSuperBuildUpArea()).trim()).equalsIgnoreCase(""))
						   insertPrepStmtObject.addNull();
 					  	else
						insertPrepStmtObject.addString(myFormatter.parse((vo.getSuperBuildUpArea()).trim()).toString());
 					  
 					 if((CommonFunction.checkNull(vo.getPropertyOwnerGcdId()).trim()).equalsIgnoreCase(""))
						   insertPrepStmtObject.addNull();
							  else
								  insertPrepStmtObject.addString((vo.getPropertyOwnerGcdId()).trim());
					if((CommonFunction.checkNull(vo.getValuationMethodId()).trim()).equalsIgnoreCase(""))
					   insertPrepStmtObject.addNull();
				   else
					   insertPrepStmtObject.addString((vo.getValuationMethodId()).trim());
				   if((CommonFunction.checkNull(vo.getValuationAmount()).trim()).equalsIgnoreCase(""))
					   insertPrepStmtObject.addString("0.0000");
				   else
						insertPrepStmtObject.addString(myFormatter.parse((vo.getValuationAmount()).trim()).toString());
					 //////////////////////////////////////
				  if((CommonFunction.checkNull(vo.getPolicyNo()).trim()).equalsIgnoreCase(""))
					   insertPrepStmtObject.addNull();
						  else
							  insertPrepStmtObject.addString((vo.getPolicyNo()).trim());

				   
				   if((CommonFunction.checkNull(vo.getPremiumAmount()).trim()).equalsIgnoreCase(""))
					   insertPrepStmtObject.addString("0.0000");
						  else
							  insertPrepStmtObject.addString(myFormatter.parse((vo.getPremiumAmount()).trim()).toString());

				   if((CommonFunction.checkNull(vo.getPolicyStartDate()).trim()).equalsIgnoreCase(""))
					   insertPrepStmtObject.addNull();
						  else
							  insertPrepStmtObject.addString((vo.getPolicyStartDate()).trim());

				   

				   if((CommonFunction.checkNull(vo.getInsMatureDate()).trim()).equalsIgnoreCase(""))
					   insertPrepStmtObject.addNull();
						  else
							  insertPrepStmtObject.addString((vo.getInsMatureDate()).trim());

				   if((CommonFunction.checkNull(vo.getPremiumFrequency()).trim()).equalsIgnoreCase(""))
					   insertPrepStmtObject.addNull();
						  else
							  insertPrepStmtObject.addString((vo.getPremiumFrequency()).trim());
				   
				   if((CommonFunction.checkNull(vo.getNominee()).trim()).equalsIgnoreCase(""))
					   insertPrepStmtObject.addNull();
						  else
							  insertPrepStmtObject.addString((vo.getNominee()).trim());

				   if((CommonFunction.checkNull(vo.getRelWithNominee()).trim()).equalsIgnoreCase(""))
					   insertPrepStmtObject.addNull();
				   else
					   insertPrepStmtObject.addString((vo.getRelWithNominee()).trim());
				   
				   if((CommonFunction.checkNull(vo.getTenureYear()).trim()).equalsIgnoreCase(""))
					   insertPrepStmtObject.addNull();
				   else
					   insertPrepStmtObject.addString((vo.getTenureYear()).trim());
				   
				   
	 				  if((CommonFunction.checkNull(vo.getLbxInsuranceAgency()).trim()).equalsIgnoreCase(""))
	 					   insertPrepStmtObject.addNull();
	 				   else
	 					   insertPrepStmtObject.addString((vo.getLbxInsuranceAgency()).trim());
	 				  
	 				   if((CommonFunction.checkNull(vo.getCoverNoteNo()).trim()).equalsIgnoreCase(""))
	 					   insertPrepStmtObject.addNull();
	 				   else
	 					   insertPrepStmtObject.addString((vo.getCoverNoteNo()).trim());
	 				   
	 				   if((CommonFunction.checkNull(vo.getSumAssured()).trim()).equalsIgnoreCase(""))
	 					   insertPrepStmtObject.addString("0.0000");
	 				   else
	 						insertPrepStmtObject.addString(myFormatter.parse((vo.getSumAssured()).trim()).toString());
	 				   
	  				  if((CommonFunction.checkNull(vo.getIdv()).trim()).equalsIgnoreCase(""))
	  					   insertPrepStmtObject.addString("0.0000");
	  				   else
	  						insertPrepStmtObject.addString(myFormatter.parse((vo.getIdv()).trim()).toString());
	  				   
	  				   if((CommonFunction.checkNull(vo.getValuationCost()).trim()).equalsIgnoreCase(""))
	  					   insertPrepStmtObject.addString("0.0000");
	  				   else
	  						insertPrepStmtObject.addString(myFormatter.parse((vo.getValuationCost()).trim()).toString());
	  				   
	  				   if((CommonFunction.checkNull(vo.getGridValue()).trim()).equalsIgnoreCase(""))
	  					   insertPrepStmtObject.addString("0.0000");
	  				   else
	  						insertPrepStmtObject.addString(myFormatter.parse((vo.getGridValue()).trim()).toString());




 					   //sachin
	  				   //KK Start
	  				   if((CommonFunction.checkNull(vo.getInvoiceNumber()).trim()).equalsIgnoreCase(""))
	  					   insertPrepStmtObject.addNull();
	  				   else
	  						insertPrepStmtObject.addString(vo.getInvoiceNumber().trim());
	  				   
	  				   if((CommonFunction.checkNull(vo.getVehicleInvoiceDate()).trim()).equalsIgnoreCase(""))
	  					   insertPrepStmtObject.addNull();
	  				   else
	  					   insertPrepStmtObject.addString((vo.getVehicleInvoiceDate()).trim());
	  				   
	  				   if((CommonFunction.checkNull(vo.getRcReceived()).trim()).equalsIgnoreCase(""))
	  					   insertPrepStmtObject.addNull();
	  				   else
	  						insertPrepStmtObject.addString(vo.getRcReceived().trim());
	  				   
	  				   if((CommonFunction.checkNull(vo.getRcReceivedDate()).trim()).equalsIgnoreCase(""))
	  					   insertPrepStmtObject.addNull();
	  				   else
	  					   insertPrepStmtObject.addString((vo.getRcReceivedDate()).trim());
	  				   //KK end
//	  				   start by sachin
	  				   
	  				   	if((CommonFunction.checkNull(vo.getTotalArea()).trim()).equalsIgnoreCase(""))
 						   insertPrepStmtObject.addNull();
 						 else
 						   insertPrepStmtObject.addString(myFormatter.parse((vo.getTotalArea()).trim()).toString());
	  				   	
	  				  if((CommonFunction.checkNull(vo.getLbxDealerExecutive()).trim()).equalsIgnoreCase(""))
	  					   insertPrepStmtObject.addNull();
	  				   else
	  					   insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getLbxDealerExecutive()));
	  				   
	  				   if((CommonFunction.checkNull(vo.getLbxDealerManager()).trim()).equalsIgnoreCase(""))
	  					   insertPrepStmtObject.addNull();
	  				   else
	  					   insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getLbxDealerManager()));
	  				   
//	  				   	end by sachin
	  				   	
                         if((CommonFunction.checkNull(primaryId)).trim().equalsIgnoreCase(""))
           					insertPrepStmtObject.addNull();
           				else
           					insertPrepStmtObject.addString((primaryId).trim());
                         
                         if((CommonFunction.checkNull(assetType)).trim().equalsIgnoreCase(""))
           					insertPrepStmtObject.addNull();
           				else
           					insertPrepStmtObject.addString((assetType).trim());
                         
                         

                                                             
                         insertPrepStmtObject.setSql(bufInsUpdSql.toString());
                         logger.info("IN Deal cr_asset_collateral_m UPDATE query1 ### "+insertPrepStmtObject.printQuery());
                         qryList.add(insertPrepStmtObject);
                         status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
                         logger.info("In UPDATE STATUS IS=......................"+status);
                        }
                        catch(Exception e){
    		    	e.printStackTrace();
    		    }
    		    finally
    		    {
    		    	bufInsUpdSql=null;
    		    	standard=null;
    		    	vo=null;
    		    	    		    }
    		    return status;
    	     }

             public boolean deleteCollateralDetails(String assetId, String type,String source)
             {
     		
         	 return false;
         }


             
        public boolean saveDocument(Object ob,String source) {
		DocumentsVo vo = (DocumentsVo)ob;
		logger.info("In saveDocument....saveDocument...Update mod"+vo.getChildId());
		String dId[] = vo.getDocumentId();
		String dstatus[] = vo.getStatus();
		String drec[] = vo.getRecievedDate();
		String ddef[] = vo.getDeferedDate();
		String expDate[]=vo.getExpiryDate();
		String dremark[] = vo.getRemarks();
		String chId[] = vo.getChildId();
		String chk[] = vo.getChk();
		logger.info("Child Id:"+ vo.getChildId());
		qryList=new ArrayList();
		boolean status=false;
		String table="cr_document_dtl";
		if(CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
			table="cr_document_dtl_edit";
		
		for(int k=0;k<vo.getDocumentId().length; k++)
		{
			    logger.info("Doc Id in saveDocument: "+dId[k]);
			    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
				StringBuffer bufInsSql =	new StringBuffer();
				bufInsSql.append("update "+table+" set DOC_STATUS=?, ");
				bufInsSql.append(" DOC_RECEIVED_DATE=");
				bufInsSql.append(dbo);
				bufInsSql.append("STR_TO_DATE(?,'"+dateFormat+"'), ");
				bufInsSql.append(" DOC_DEFFRED_DATE=");
				bufInsSql.append(dbo);
				bufInsSql.append("STR_TO_DATE(?,'"+dateFormat+"'),DOC_EXPIRY_DATE=");
				bufInsSql.append(dbo);
				bufInsSql.append("STR_TO_DATE(?,'"+dateFormat+"'), " ); //deal id
				bufInsSql.append(" DOC_REMARKS=?,MAKER_ID=?,MAKER_DATE=");
				//bufInsSql.append("DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND)" );
				bufInsSql.append(dbo);
				bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ");
				bufInsSql.append(",DOC_CHILD_IDS=?"); //query date
				bufInsSql.append(" where TXN_DOC_ID=?"); //query remarks
								
				if((CommonFunction.checkNull(dstatus[k])).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((dstatus[k]).trim());
				if((CommonFunction.checkNull(drec[k])).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((drec[k]).trim());
				if((CommonFunction.checkNull(ddef[k])).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((ddef[k]).trim());
				if((CommonFunction.checkNull(expDate[k])).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((expDate[k]).trim());
				if((CommonFunction.checkNull(dremark[k])).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((dremark[k]).trim());
				if((CommonFunction.checkNull(vo.getUserId()).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((vo.getUserId()).trim());
				
				if((CommonFunction.checkNull(vo.getBussinessDate()).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((vo.getBussinessDate()).trim()); //maker_date
				
				if(chId==null)
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((chId[k]).trim()); //child Id
				
				if((CommonFunction.checkNull(dId[k]).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((dId[k]).trim()); //doc id
				
				
				insertPrepStmtObject.setSql(bufInsSql.toString());
				logger.info("IN saveDocument() UPDATE query1 ### "+insertPrepStmtObject.printQuery());
				qryList.add(insertPrepStmtObject);
				
						
				bufInsSql=null;

		}
		
//		Changes By Amit Starts
		logger.info("chk.length: "+chk.length);
		StringBuffer bufInsSql2 =	new StringBuffer();
		bufInsSql2.append("select count(1) from "+table+" where txn_type='"+CommonFunction.checkNull(vo.getTxnType()).trim()+"'" +
				" and txnid='"+CommonFunction.checkNull((vo.getTxnId()).trim())+"' " +
				" and stage_id='"+CommonFunction.checkNull((vo.getStageId()).trim())+"' " +
				" and doc_type='"+CommonFunction.checkNull((vo.getDocType()).trim())+"' " +
				" and doc_id is null ");
		String countStr = ConnectionDAO.singleReturn(bufInsSql2.toString());
		logger.info("Count before delete: "+countStr);
		
		StringBuffer bufInsSql1 =	new StringBuffer();
		PrepStmtObject insertPrepStmtObject1 = new PrepStmtObject();
		if(Integer.parseInt(CommonFunction.checkNull(countStr))>0)				{
			bufInsSql1.append("delete from "+table+" where txn_type='"+CommonFunction.checkNull(vo.getTxnType()).trim()+"'" +
				" and txnid='"+CommonFunction.checkNull((vo.getTxnId()).trim())+"' " +
				" and stage_id='"+CommonFunction.checkNull((vo.getStageId()).trim())+"' " +
				" and doc_type='"+CommonFunction.checkNull((vo.getDocType()).trim())+"' " +
				" and doc_id is null ");
			insertPrepStmtObject1.setSql(bufInsSql1.toString());
			logger.info("IN SaveDocument() delete query1 ### "+insertPrepStmtObject1.printQuery());
			qryList.add(insertPrepStmtObject1);
		}
		try 
		{
			if(qryList.size()>0)
				status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			else
				status=true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		logger.info("In SaveDocument saving Additional documents......................"+status);
		
		if(chk.length>0 && status)
		{
			ArrayList qryList2=new ArrayList();
			for(int i=0;i<chk.length;i++)
			{
				logger.info("Doc Id in saveDocument: "+chk[i]);
			    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
				StringBuffer bufInsSql =	new StringBuffer();
				
				bufInsSql.append("insert into cr_document_dtl (TXN_TYPE, TXNID, STAGE_ID, DOC_TYPE, ENTITY_ID,");
				bufInsSql.append(" DOC_ID, DOC_DESC, DOC_STATUS, DOC_STATUS_PREV, DOC_RECEIVED_DATE, DOC_DEFFRED_DATE, ");
				bufInsSql.append(" DOC_EXPIRY_DATE, DOC_REMARKS, Doc_Expiry_Flag, DOC_CHILD_IDS, DOC_MANDATORY," );
				bufInsSql.append(" DOC_ORIGINAL, DOC_CHILD_FLAG, REC_STATUS, MAKER_ID,MAKER_DATE)");
				
				bufInsSql.append(" values ( ");
				bufInsSql.append(" ?," ); //TXN_TYPE
				bufInsSql.append(" ?," ); //TXNID
				bufInsSql.append(" ?," ); //STAGE_ID				
				bufInsSql.append(" ?," ); //DOC_TYPE
				bufInsSql.append(" ?," ); //ENTITY_ID
				bufInsSql.append(" ?," ); //DOC_ID
				bufInsSql.append(" ?," ); //DOC_DESC
				bufInsSql.append(" ?," ); //DOC_STATUS
				bufInsSql.append(" ?," ); //DOC_STATUS_PREV
				bufInsSql.append(dbo);	
				bufInsSql.append("STR_TO_DATE(?, '"+dateFormat+"')," ); //DOC_RECEIVED_DATE
				bufInsSql.append(dbo);
				bufInsSql.append("STR_TO_DATE(?, '"+dateFormat+"')," ); //DOC_DEFFRED_DATE
				bufInsSql.append(dbo);
				bufInsSql.append("STR_TO_DATE(?, '"+dateFormat+"')," ); //DOC_EXPIRY_DATE
				bufInsSql.append(" ?," ); //DOC_REMARKS
				bufInsSql.append(" ?," ); //Doc_Expiry_Flag
				bufInsSql.append(" ?," ); //DOC_CHILD_IDS
				bufInsSql.append(" ?," ); //DOC_MANDATORY
				bufInsSql.append(" ?," ); //DOC_ORIGINAL
				bufInsSql.append(" ?," ); //DOC_CHILD_FLAG
				bufInsSql.append(" ?," ); //REC_STATUS
				bufInsSql.append(" ?," ); //MAKER_ID
				//bufInsSql.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND) )" );
				bufInsSql.append(dbo);
				bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9)) ");
				 
				if(CommonFunction.checkNull((vo.getTxnType()).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
		        else
		            insertPrepStmtObject.addString((vo.getTxnType().trim()));
				
				if(CommonFunction.checkNull((vo.getTxnId()).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
		        else
		            insertPrepStmtObject.addString((vo.getTxnId().trim()));
				
				if(CommonFunction.checkNull((vo.getStageId()).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
		        else
		            insertPrepStmtObject.addString((vo.getStageId().trim()));
				
				if(CommonFunction.checkNull((vo.getDocType()).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
		        else
		            insertPrepStmtObject.addString((vo.getDocType().trim()));
				
				insertPrepStmtObject.addNull();//ENTITY_ID
				
				insertPrepStmtObject.addNull();//DOC_ID
				
				if(CommonFunction.checkNull((vo.getDocNameAdditional()[i]).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
		        else
		            insertPrepStmtObject.addString((vo.getDocNameAdditional()[i].trim()));
				
				if(CommonFunction.checkNull((vo.getAdditionalDocStatus()[i]).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
		        else
		            insertPrepStmtObject.addString((vo.getAdditionalDocStatus()[i].trim()));
				
				insertPrepStmtObject.addNull();//DOC_STATUS_PREV
				
				if(CommonFunction.checkNull((vo.getAdditionalReceivedDate()[i]).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
		        else
		            insertPrepStmtObject.addString((vo.getAdditionalReceivedDate()[i].trim()));
				
				if(CommonFunction.checkNull((vo.getAdditionalDeferredDate()[i]).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
		        else
		            insertPrepStmtObject.addString((vo.getAdditionalDeferredDate()[i].trim()));
				
				if(CommonFunction.checkNull((vo.getAdditionalExpiryDate()[i]).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
		        else
		            insertPrepStmtObject.addString((vo.getAdditionalExpiryDate()[i].trim()));
				
				if(CommonFunction.checkNull((vo.getAdditionalRemarks()[i]).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
		        else
		            insertPrepStmtObject.addString((vo.getAdditionalRemarks()[i].trim()));
				
				if(CommonFunction.checkNull((vo.getAdditionalExpiryDate()[i]).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addString("N");
		        else
		            insertPrepStmtObject.addString("Y");
				
				insertPrepStmtObject.addNull();//DOC_CHILD_IDS
				
				if(CommonFunction.checkNull((vo.getMandatoryOrNonMandatory()[i]).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
		        else
		            insertPrepStmtObject.addString((vo.getMandatoryOrNonMandatory()[i].trim()));
				
				if(CommonFunction.checkNull((vo.getOriginalOrCopy()[i]).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
		        else
		            insertPrepStmtObject.addString((vo.getOriginalOrCopy()[i].trim()));
				
				insertPrepStmtObject.addString("N");//DOC_CHILD_FLAG
				insertPrepStmtObject.addString("F");//REC_STATUS
				
				if(CommonFunction.checkNull((vo.getUserId()).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
		        else
		            insertPrepStmtObject.addString((vo.getUserId().trim()));
				
				if(CommonFunction.checkNull((vo.getBussinessDate()).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
		        else
		            insertPrepStmtObject.addString((vo.getBussinessDate().trim()));
				
				insertPrepStmtObject.setSql(bufInsSql.toString());
				logger.info("IN SaveDocument() insert query1 ### "+insertPrepStmtObject.printQuery());
				
				qryList2.add(insertPrepStmtObject);
				bufInsSql=null;
				bufInsSql1=null;
				bufInsSql2=null;
				insertPrepStmtObject1=null;
				insertPrepStmtObject=null;
				try 
				{
					status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList2);
					if(CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED") && status)
					{
				    	String q1="select top 1 TXN_DOC_ID from cr_document_dtl order by TXN_DOC_ID desc";
				    	String ratingID=ConnectionDAO.singleReturn(q1);
				    	String query="INSERT INTO cr_document_dtl_edit select * from cr_document_dtl where TXN_DOC_ID="+ratingID;
				    	PrepStmtObject stmt = new PrepStmtObject();
				    	stmt.setSql(query);
				    	ArrayList list=new ArrayList();
				    	list.add(stmt);
				    	status=ConnectionDAO.sqlInsUpdDeletePrepStmt(list);
				    	logger.info("Edit Insert Status  :  "+status);
				    	
				    	String query2="delete from cr_document_dtl where TXN_DOC_ID="+ratingID;
				    	PrepStmtObject stmt2 = new PrepStmtObject();
				    	stmt2.setSql(query2);
				    	ArrayList list2=new ArrayList();
				    	list2.add(stmt2);
				    	status=ConnectionDAO.sqlInsUpdDeletePrepStmt(list2);
				    	logger.info("Edit delete Status  :  "+status);		
					}
				}catch (Exception e) 
				{e.printStackTrace();}
			}
		}
		logger.info("In SaveDocument saving Additional documents......................"+status);
		return status;
	}
       
    public String getGroupExposureLimitCheck(CommonPageSecVo vo)
		{
			logger.info("Inside getGroupExposureLimitCheck .....................DAOImpl");
			
			String[] dealIdArr = vo.getDealId();
			String[] sancAmtArr = vo.getSancAmt();
			BigDecimal balPrin = null;
			BigDecimal overdueprin=null;
			BigDecimal balancePrincipal=new BigDecimal("0.00");
			BigDecimal overduePrincipal=new BigDecimal("0.00");
			String status="";
//			String dealId="";
//			String sancAmt = "";
			
			StringBuilder dealId=new StringBuilder();
			StringBuilder sancAmt=new StringBuilder();
			for(int k=0;k<1;k++)
			{
				dealId.append(dealIdArr[0]);
				sancAmt.append(sancAmtArr[0]);
			}
			try
			{
				StringBuilder query1=new StringBuilder();
				BigDecimal groupExposureLimit=new BigDecimal("0.00");
				query1.append("select sum(CUSTOMER_GROUP_EXPOSURE_LIMIT) from cr_deal_customer_m where customer_id=(select deal_customer_id from cr_deal_dtl where deal_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId))+"')");
				logger.info("In...getGroupExposureLimitCheck...query1"+query1.toString());
				String groupExposureLimitStr = ConnectionDAO.singleReturn(query1.toString());
				if(!CommonFunction.checkNull(groupExposureLimitStr).equalsIgnoreCase(""))
				{
					 groupExposureLimit = new BigDecimal(groupExposureLimitStr);
				}
				
				logger.info("group Exposure Limit: "+groupExposureLimit);
				
				StringBuilder query2=new StringBuilder();
				 query2.append("select customer_group_id from cr_deal_customer_m where customer_id="+
									"(select deal_customer_id from cr_deal_dtl where deal_id=" +
									"'"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId))+"')");
				 logger.info("In...getGroupExposureLimitCheck...query2"+query2.toString());
				 String groupId = ConnectionDAO.singleReturn(query2.toString());
				
				
					StringBuilder query4=new StringBuilder();
					query4.append("select ");
					query4.append("ISNULL(sum(LOAN_BALANCE_PRINCIPAL),0)+");
					query4.append("ISNULL(sum(LOAN_OVERDUE_PRINCIPAL),0) from cr_loan_dtl where LOAN_CUSTOMER_ID IN (select customer_id from gcd_customer_m where GROUP_ID='"+groupId+"' and GROUP_ID<>'' and customer_status='A') and rec_status='A'");
					String balancePrincipalOutStr = ConnectionDAO.singleReturn(query4.toString());
					logger.info("query4: "+query4.toString());
					BigDecimal principalOutstanding=new BigDecimal("0.00"); 
				if(!CommonFunction.checkNull(balancePrincipalOutStr).equalsIgnoreCase(""))
				{
					principalOutstanding =  new BigDecimal(balancePrincipalOutStr);
				}
				BigDecimal sanctionAmt = new BigDecimal("0.00");
				if(!CommonFunction.checkNull(sancAmt).equalsIgnoreCase(""))
				{
					sanctionAmt= new BigDecimal(myFormatter.parse(CommonFunction.checkNull(sancAmt)).toString());
				}
				int res=0;
				logger.info("principalOutstanding1: "+principalOutstanding);
				if(!CommonFunction.checkNull(principalOutstanding).equalsIgnoreCase("") &&!CommonFunction.checkNull(sancAmt).equalsIgnoreCase("") && !CommonFunction.checkNull(groupExposureLimit).equalsIgnoreCase(""))
				{
					res = principalOutstanding.add(sanctionAmt).compareTo(groupExposureLimit);
				}
				logger.info("principalOutstanding+sanctionAmt: "+principalOutstanding);
				logger.info("sanctionAmt: "+sanctionAmt);
				logger.info("groupExposureLimit: "+groupExposureLimit);
				logger.info("res: "+res);
				if(res>0)
				{
					status="groupExposure";
				}
				
				query1=null;
				query2=null;
				
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
			finally
			{
				dealId=null;
				sancAmt=null;
			}
			logger.info("Group Exposure Limit Status: "+status);
			return status;
		}
		
		public String getCustomerExposureLimitCheck(CommonPageSecVo vo)
		{
			logger.info("Inside getCustomerExposureLimitCheck .....................DAOImpl");
			String balancePrincipalStr[]=null;
			String overduePrincipalStr[]=null;
			String[] dealIdArr = vo.getDealId();
			String[] sancAmtArr = vo.getSancAmt();
			BigDecimal balPrin=null;
			BigDecimal overdueprin=null;
			BigDecimal balancePrincipal=new BigDecimal("0.00");
			BigDecimal overduePrincipal=new BigDecimal("0.00");
			String status="";
//			String dealId="";
//			String sancAmt = "";
			StringBuilder dealId=new StringBuilder();
			StringBuilder sancAmt=new StringBuilder();
			
			for(int k=0;k<1;k++)
			{
				dealId.append(dealIdArr[0]);
				sancAmt.append(sancAmtArr[0]);
			}
			try
			{
				BigDecimal customerExposureLimit =new BigDecimal("0.00"); 
				StringBuilder query1=new StringBuilder();
				 query1.append("select sum(customer_exposure_limit) from cr_scheme_m where scheme_id="+
									"(select deal_scheme from cr_deal_loan_dtl where deal_id=" +
										"'"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId))+"')");
				 logger.info("In...getCustomerExposureLimitCheck...query1"+query1.toString());
				 String customerExposureLimitStr = ConnectionDAO.singleReturn(query1.toString());
				if(!CommonFunction.checkNull(customerExposureLimitStr).equalsIgnoreCase(""))
				{
					 customerExposureLimit = new BigDecimal(customerExposureLimitStr);
				}
						
				StringBuilder query2=new StringBuilder();
				 query2.append("select gcd_customer_id from cr_deal_customer_m where customer_id=" +
									"(select deal_customer_id from cr_deal_dtl where deal_id=" +
									"'"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId))+"')");
				 logger.info("In...getCustomerExposureLimitCheck...query2"+query2.toString());
				 String customerId = ConnectionDAO.singleReturn(query2.toString());
				
				StringBuilder query3=new StringBuilder();
				 query3.append("select deal_scheme from cr_deal_loan_dtl where deal_id="+
									"'"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId))+"'");
				 logger.info("In...getCustomerExposureLimitCheck...query3"+query3.toString());
				 String schemeId = ConnectionDAO.singleReturn(query3.toString());
				
				StringBuilder query4=new StringBuilder();
				 query4.append("select deal_product from cr_deal_loan_dtl where deal_id="+
									"'"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId))+"'");
				 logger.info("In...getCustomerExposureLimitCheck...query4"+query4.toString());
				 String productId = ConnectionDAO.singleReturn(query4.toString());
				
				StringBuilder query5=new StringBuilder();
				 query5.append("select sum(LOAN_BALANCE_PRINCIPAL),sum(LOAN_OVERDUE_PRINCIPAL) from cr_loan_dtl where loan_customer_id='"+customerId+"'" +
						" and loan_scheme='"+schemeId+"' and loan_product='"+productId+"' and rec_status='A'");
				logger.info("query5: "+query5.toString());
				ArrayList loanList = ConnectionDAO.sqlSelect(query5.toString());
				for(int j=0;j<loanList.size();j++)
				{
		            ArrayList data=(ArrayList)loanList.get(j);
		            balancePrincipalStr= new String[loanList.size()];
					overduePrincipalStr= new String[loanList.size()];
		            if(data.size()>0)
		            {
		            	balancePrincipalStr[j] = (CommonFunction.checkNull(data.get(0)).toString().trim());
		            	if(balancePrincipalStr[j].equalsIgnoreCase(""))
		            		balPrin = new BigDecimal("0.00");
		            	else
		            		balPrin = new BigDecimal(balancePrincipalStr[j]);
		            	overduePrincipalStr[j] = (CommonFunction.checkNull(data.get(1)).toString().trim());
		            	if(overduePrincipalStr[j].equalsIgnoreCase(""))
		            		overdueprin = new BigDecimal("0.00");
		            	else
		            		overdueprin = new BigDecimal(overduePrincipalStr[j]);
		            	balancePrincipal = balancePrincipal.add(balPrin);
		            	overduePrincipal = overduePrincipal.add(overdueprin);
		            }
				}
				logger.info("principalOutstanding: "+balancePrincipal);
				logger.info("Over Due: "+overduePrincipal);
				BigDecimal principalOutstanding =  balancePrincipal.add(overduePrincipal);
				BigDecimal sanctionAmt = new BigDecimal("0.00"); 
				if(!CommonFunction.checkNull(sancAmt).equalsIgnoreCase(""))
				{
					sanctionAmt = new BigDecimal(myFormatter.parse(CommonFunction.checkNull(sancAmt)).toString());
				}
				logger.info("principalOutstanding1: "+principalOutstanding);
				int res=0;
				if(!CommonFunction.checkNull(principalOutstanding).equalsIgnoreCase("") && !CommonFunction.checkNull(sanctionAmt).equalsIgnoreCase("") && !CommonFunction.checkNull(customerExposureLimit).equalsIgnoreCase(""))
				{
					res = principalOutstanding.add(sanctionAmt).compareTo(customerExposureLimit);
				}
				logger.info("principalOutstanding2: "+principalOutstanding);
				logger.info("sanctionAmt: "+sanctionAmt);
				logger.info("customerExposureLimit: "+customerExposureLimit);
				logger.info("res: "+res);
				if(res>0)
				{
					status="customerExposure";
				}
				query1=null;
				query2=null;
				query3=null;
				query4=null;
				query5=null;
				productId=null;
				schemeId=null;
				customerId=null;
				
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
			finally
			{
				dealId=null;
				sancAmt=null;
			}
			return status;
		}

  
	public double updateCreditDecision(Object ob)
	{
		CommonPageSecVo vo = (CommonPageSecVo)ob;
		logger.info("In updateCreditDecision.......Update mode "+vo.getDealLoanId().length);
		String dealId[] = vo.getDealId();
		double sancAmtDisp = 0.0;
		String dealLoanId[]=vo.getDealLoanId();
		String creditType[] = vo.getCreditType();
		String sancAmt[] = vo.getSancAmt();
		String underTenure[] = vo.getUnderTenure();
		String emi[] = vo.getEmi();
		String sancDate[] = vo.getSancDate();
		String bIrr[] = vo.getBusIrr();
		String effRate[] = vo.getEffectiveRate();
		qryList=new ArrayList();
		PrepStmtObject insertPrepStmtObject = null;
		for(int k=0;k<vo.getDealLoanId().length; k++)
		{

			StringBuilder query=new StringBuilder();
			query.append("update cr_deal_loan_dtl set  REDY_TO_AUTHOR='Y',rec_status='F',deal_sanction_amount=?, ");
			query.append(" DEAL_SANCTION_DATE= ");
			query.append(dbo);
			query.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')," );
			query.append(" DEAL_SANCTION_VALID_TILL=");
			query.append(dbo);
			query.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')" );
			query.append(" where deal_id=? and deal_loan_id=?");
			 
			logger.info("In...updateCreditDecision...query"+query.toString());
			insertPrepStmtObject = new PrepStmtObject();
			
			if ((CommonFunction.checkNull(sancAmt[k])).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse((sancAmt[k])).toString().trim());
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		
			
			if ((CommonFunction.checkNull(vo.getBussinessDate())).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getBussinessDate()).trim());
			
			if ((CommonFunction.checkNull(sancDate[k])).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((sancDate[k]).trim());
		
			if ((CommonFunction.checkNull(dealId[k])).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((dealId[k]).trim());
			
			if ((CommonFunction.checkNull(dealLoanId[k])).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((dealLoanId[k]).trim());
						
			insertPrepStmtObject.setSql(query.toString());
           	qryList.add(insertPrepStmtObject);
           	
           	query=null;
           	try {
				sancAmtDisp = sancAmtDisp+Double.parseDouble(myFormatter.parse((sancAmt[k])).toString().trim());
			} catch (NumberFormatException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		logger.info("IN updateCreditDecision() update query1 ### "+qryList.get(0));
		boolean status=false;
		try {
			status =ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			logger.info("In updateCreditDecision......................status= "+status);
		} catch (Exception e) {
			e.printStackTrace();
		}
		if(status)
		{
			return sancAmtDisp;
		}
		else
		{
			return sancAmtDisp=0;
		}

	}



	public boolean saveUnderwritingQueryData(Object ob,String dealId){
		QueryProcessingVo vo = (QueryProcessingVo)ob;
		boolean status=false;
		StringBuilder queryDateTime=new StringBuilder();
		StringBuilder resolutionDateTime=new StringBuilder();

		if((CommonFunction.checkNull(vo.getResolutionTime()).trim().equalsIgnoreCase("")))
		{
			resolutionDateTime.append(vo.getResolutionDate());
		}
		else
		{
			if(CommonFunction.checkNull(vo.getResolutionTime()).trim().length()>=5)
			{
				String rdate=CommonFunction.checkNull(vo.getResolutionDate())+" "+CommonFunction.checkNull(vo.getResolutionTime()).trim().substring(0,5);
				resolutionDateTime.append(rdate);
			}
			else
			{
				resolutionDateTime.append(vo.getResolutionDate());
			}
		}
			
		if (CommonFunction.checkNull(vo.getQueryTime()).trim().equalsIgnoreCase("")){
			
			queryDateTime.append(vo.getQueryDate());
		  }
		else
		 {
			if(CommonFunction.checkNull(vo.getQueryTime()).trim().length()>=5)
			{
				String qdate=CommonFunction.checkNull(vo.getQueryDate())+" "+CommonFunction.checkNull(vo.getQueryTime()).trim().substring(0,5);
				queryDateTime.append(qdate);
			}
			else
			{
				queryDateTime.append(CommonFunction.checkNull(vo.getQueryDate()));
			}
		}
		logger.info("resolution date= "+resolutionDateTime);
		logger.info("queryDateTime date= "+queryDateTime);
		logger.info("In saveUnderwritingQueryData.....................................Dao Impl....111");
		ArrayList qryList = new ArrayList();
		PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
		try{
			logger.info("In insert query data part");
			StringBuffer bufInsSql =	new StringBuffer();
			bufInsSql.append("insert into deal_query_dtl(deal_id,query_date,query_remarks,resolution_status,resolution_datetime,resolution_remarks,maker_id,user_id,maker_date,QUERY_TYPE )");
			bufInsSql.append(" values ( ");
			bufInsSql.append(" ?," ); //deal id
			bufInsSql.append(dbo);
			bufInsSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')," ); //query date
			bufInsSql.append(" ?," ); //query remarks
			bufInsSql.append(" ?," ); //resolution status
			bufInsSql.append(dbo);
			bufInsSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')," ); // resolution date
			bufInsSql.append(" ?," ); //resolution remarks
			bufInsSql.append(" ?," ); //maker_id
			bufInsSql.append(" ?," ); //user id
			//bufInsSql.append("DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND))" ); //maker_date
			bufInsSql.append(dbo);
			bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9)," ); //maker_date
			bufInsSql.append(" ? )" );//query_type
			
			if((CommonFunction.checkNull(vo.getDealId())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getDealId()).trim());
			if((CommonFunction.checkNull(queryDateTime)).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((queryDateTime.toString()).trim());
			if((CommonFunction.checkNull(vo.getQueryRemarks())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getQueryRemarks()).trim());
			if((CommonFunction.checkNull(vo.getResolutionStatus())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getResolutionStatus()).trim());
			if((CommonFunction.checkNull(resolutionDateTime)).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((resolutionDateTime.toString()).trim());
			if((CommonFunction.checkNull(vo.getResolutionRemarks())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getResolutionRemarks()).trim());
			if((CommonFunction.checkNull(vo.getUserId())).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getUserId())); //maker_id
			
			if((CommonFunction.checkNull(vo.getLbxUserId())).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getLbxUserId())); //user id
			
			if((CommonFunction.checkNull(vo.getMakerDate())).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getMakerDate())); //maker_date
			
			if((CommonFunction.checkNull(vo.getQueryType())).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getQueryType())); //query_type
			insertPrepStmtObject.setSql(bufInsSql.toString());
			logger.info("IN saveUnderwritingQueryData() insert query1 ### "+insertPrepStmtObject.printQuery());
			qryList.add(insertPrepStmtObject);
			status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			logger.info("In saveUnderwritingQueryData......................"+status);

			bufInsSql=null;
	       	}catch(Exception e){
			e.printStackTrace();
		}
	       	finally
	       	{
	       		queryDateTime=null;
	       		resolutionDateTime=null;
	       	}
	return status;
	}


	
	
	public ArrayList getUnderwritingQueryData(String dealId){
		ArrayList list=new ArrayList();
		try{
			logger.info("In getUnderwritingQueryDatasssssss..........................DAOImpl");//+dealId);
			StringBuilder query=new StringBuilder();
			query.append("select deal_id,");
			query.append(dbo);
			query.append("DATE_FORMAT(query_date,'"+dateFormatWithTime+"'),query_remarks,case when resolution_status='P' then 'Pending' else 'Resolved' end as resolution_status,");
			query.append(dbo);
			query.append("DATE_FORMAT(resolution_datetime,'"+dateFormatWithTime+"'),resolution_remarks,u.USER_NAME,resolution_status,DEAL_QUERY_ID," +
					 "(select USER_NAME from sec_user_m where USER_ID=q.MAKER_ID)MAKER_ID,QUERY_TYPE,case when QUERY_TYPE='CRT' then 'CRITERIA RELATED' when QUERY_TYPE='CLA' then 'CLARIFICATION RELATED'  when QUERY_TYPE='BNK' then 'BANK RELATED'  when QUERY_TYPE='DOC' then 'DOCUMENTS RELATED'  when QUERY_TYPE='MJD' then 'MAJOR DEBTOR'  when QUERY_TYPE='MAC' then 'MAJOR CREDITOR'   end as QUERY_TYPE_DESC  from deal_query_dtl q left join sec_user_m u on u.user_id=q.user_id " +
			 		" where deal_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"'");
			logger.info("In getUnderWriterData...............query...........DAOImpl"+query.toString());
			QueryProcessingVo vo= null;
			ArrayList product = ConnectionDAO.sqlSelect(query.toString());
			//logger.info("getUnderwritingQueryData "+product.size());
			
			query=null;
			
			for(int i=0;i<product.size();i++){
				//logger.info("getUnderwritingQueryData...FOR loop "+CommonFunction.checkNull(product.get(i)).toString());
				ArrayList data=(ArrayList)product.get(i);
				if(data.size()>0)	{
					vo = new QueryProcessingVo();
					vo.setDealId((CommonFunction.checkNull(data.get(0))).trim());
					vo.setQueryDate((CommonFunction.checkNull(data.get(1))).trim());
					vo.setQueryRemarks((CommonFunction.checkNull(data.get(2))).trim());
					vo.setResolution((CommonFunction.checkNull(data.get(3))).trim());
					vo.setResolutionDate((CommonFunction.checkNull(data.get(4))).trim());
					vo.setResolutionRemarks((CommonFunction.checkNull(data.get(5))).trim());
					vo.setUserId((CommonFunction.checkNull(data.get(6))).trim());
					vo.setResolutionStatus((CommonFunction.checkNull(data.get(7))).trim());
					vo.setDealQueryId((CommonFunction.checkNull(data.get(8))).trim());
					vo.setInitiatedBy((CommonFunction.checkNull(data.get(9))).trim());
					vo.setQueryType((CommonFunction.checkNull(data.get(10))).trim());
					vo.setQueryTypeDesc((CommonFunction.checkNull(data.get(11))).trim());
					list.add(vo);
				}
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;

	}


	public String collectDocuments(String txnType, String dealId, String stage,String source) 
	{
		//CallableStatement cst=null;neeraj
		    String status="";
			ArrayList<Object> in =new ArrayList<Object>();
			ArrayList<Object> out =new ArrayList<Object>();
			ArrayList outMessages = new ArrayList();
//			String s1="";
//			String s2="";
			StringBuilder s1=new StringBuilder();
			StringBuilder s2=new StringBuilder();
			try 
			{			
				logger.info("In collectDocuments proc( Insert_Document_Checklist )");
				logger.info("In DocsCollectionInCMBehindAction collectDocuments txnType: "+txnType+" dealId: "+dealId+" stage: "+stage);
				in.add(txnType);
				in.add(dealId);
				in.add(stage);
				in.add(CommonFunction.checkNull(source).trim());
				out.add(s1);
				out.add(s2);
				outMessages=(ArrayList) ConnectionDAO.callSP("Insert_Document_Checklist",in,out);
				if(outMessages!=null && outMessages.size()>0)
				{
					s1.append(CommonFunction.checkNull(outMessages.get(0)));
					
					if(s1!=null && s1.toString().equalsIgnoreCase("S"))
					{
						status=s1.toString();
						logger.info("Procedure s1----"+s1);
					}
					else if(s1!=null && s1.toString().equalsIgnoreCase("E"))
					{
						s2.append(CommonFunction.checkNull(outMessages.get(1)));
						logger.info("Procedure Error Message----"+s2);
						status=s2.toString();
					}
					
				}
		
			} 
			catch (Exception e) 
			{e.printStackTrace();}
			finally

			{
				s1=null;
				s2=null;
				in=null;
				out=null;
				outMessages=null;
			
			}
		return status ;
	}


	public ArrayList showUnderwritingQueryData(Object ob){
		
		QueryProcessingVo vo = (QueryProcessingVo)ob;
		
		ArrayList list=new ArrayList();
			

		try{
			logger.info("In showUnderwritingQueryData..........................DAOImpl");//+dealId);
			
			StringBuilder query=new StringBuilder();
			 query.append("select deal_id,");
			 query.append(dbo);
			 query.append("DATE_FORMAT(query_date,'"+dateFormatWithTime+"'),query_remarks,case when resolution_status='P' then 'Pending' else 'Resolved' end as resolution_status ,");
			 query.append(dbo);
			 query.append("DATE_FORMAT(resolution_datetime,'"+dateFormatWithTime+"'),resolution_remarks ,u.USER_NAME,q.user_id,resolution_status,DEAL_QUERY_ID from deal_query_dtl q left join sec_user_m u on u.user_id=q.user_id" );			 
			 query.append(" where DEAL_QUERY_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getDealQueryId())).trim()+"' ");
			logger.info("In showUnderwritingQueryData...............query...........DAOImpl"+query.toString());
			ArrayList product = ConnectionDAO.sqlSelect(query.toString());
			
			query=null;
			//logger.info("showUnderwritingQueryData "+product.size());
			for(int i=0;i<product.size();i++)
			{
				//logger.info("showUnderwritingQueryData...FOR loop "+CommonFunction.checkNull(product.get(i)).toString());
				ArrayList data=(ArrayList)product.get(i);
				if(data.size()>0)	{
					vo = new QueryProcessingVo();
					vo.setDealId((CommonFunction.checkNull(data.get(0))).trim());
					//logger.info("QueryDate: "+(CommonFunction.checkNull(data.get(1))).trim());
					if(!CommonFunction.checkNull(data.get(1)).trim().equalsIgnoreCase(""))
					{
						vo.setQueryDate((CommonFunction.checkNull(data.get(1))).trim().substring(0,10));
						//vo.setQueryTime((CommonFunction.checkNull(data.get(1))).trim().substring(11,15));
					}
					
					vo.setQueryRemarks((CommonFunction.checkNull(data.get(2))).trim());
					vo.setResolution((CommonFunction.checkNull(data.get(3))).trim());
					vo.setResolutionDate((CommonFunction.checkNull(data.get(4))).trim());
					vo.setResolutionRemarks((CommonFunction.checkNull(data.get(5))).trim());
					vo.setUserId((CommonFunction.checkNull(data.get(6))).trim());
					vo.setLbxUserId((CommonFunction.checkNull(data.get(7))).trim());
					vo.setResolutionStatus((CommonFunction.checkNull(data.get(8))).trim());
					vo.setDealQueryId((CommonFunction.checkNull(data.get(9))).trim());
					list.add(vo);
				
				}
				
				
				
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		
		return list;

	}

	public boolean updateUnderwritingQueryData(Object ob,String dealId){
		
		QueryProcessingVo vo = (QueryProcessingVo)ob;
		
		logger.info("In updateUnderwritingQueryData.......Update mode ");
	     String resolutionDateTime="";
		if(CommonFunction.checkNull(vo.getResolutionTime()).equalsIgnoreCase(""))
		{
			resolutionDateTime=vo.getResolutionDate().trim();
		}
		else
		{
			resolutionDateTime=vo.getResolutionDate().trim()+" "+vo.getResolutionTime().trim().substring(0, 5);
		}
        
		logger.info("resolutionDateTime : "+resolutionDateTime);

		

		qryList=new ArrayList();
		StringBuilder query=new StringBuilder();
		 query.append("update deal_query_dtl set resolution_status=?,resolution_datetime=" );
		 //query.append("DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND),");
		 query.append(dbo);
		 query.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9), ");
		 query.append("resolution_remarks=?,MAKER_DATE=");
		 //query.append("DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND)," );
		 query.append(dbo);
		 query.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9), ");
		 query.append("user_id=?,QUERY_TYPE=? where DEAL_QUERY_ID=? ");
		 PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
        
        if((CommonFunction.checkNull(vo.getResolutionStatus())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getResolutionStatus()).trim());
        
        if((CommonFunction.checkNull(resolutionDateTime)).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((resolutionDateTime.toString()).trim());
        
        if((CommonFunction.checkNull(vo.getResolutionRemarks())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getResolutionRemarks()).trim());
      //------------------------------------------
//		if(CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
//			insertPrepStmtObject.addNull();
//		else
//			insertPrepStmtObject.addString((vo.getUserId()).trim());
		
		if(CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getMakerDate()).trim());
		
		if(CommonFunction.checkNull(vo.getLbxUserId()).trim().equalsIgnoreCase(""))
			if(!(CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase("")))
				insertPrepStmtObject.addString((vo.getUserId()).trim());
			else
				insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getLbxUserId()).trim());
		
		if((CommonFunction.checkNull(vo.getQueryType())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString(vo.getQueryType().trim());
		//------------------------------------------
        
        if((CommonFunction.checkNull(vo.getDealQueryId())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString(vo.getDealQueryId().trim());
        
        
        
            insertPrepStmtObject.setSql(query.toString());
        logger.info("IN updateUnderwritingQueryData() update query1 ### 1...."+insertPrepStmtObject.printQuery());
		qryList.add(insertPrepStmtObject);
		boolean status=false;
		try {
			status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
		} catch (Exception e) {
			e.printStackTrace();
		}
		finally
		{
			query=null;
			resolutionDateTime=null;
			
		}
	    //logger.info("In updateUnderwritingQueryData......................status= "+status);
	    return status;

	}

	public boolean updatesecuritydeposit(ChargeVo cv,String dealId){
		StringBuffer bufInsSql =	new StringBuffer();
		qryList=new ArrayList();
		boolean status=false;
		String amt="";
		StringBuilder query=new StringBuilder();
		query.append("select ");
		if(dbType.equalsIgnoreCase("MSSQL"))
		{
			query.append(" TOP 1 ");
		}
		query.append(" DEAL_CHARGE_CALCULATED_AMOUNT from  cr_deal_txncharges_dtl where DEAL_ID='"+dealId+"' and DEAL_CHARGE_CODE=103 " );
		if(!dbType.equalsIgnoreCase("MSSQL") && dbo.equalsIgnoreCase(""))
		{
			query.append(" limit 1 ");
		}
		logger.info("In updatesecuritydeposit() .. "+query.toString());
		amt = CommonFunction.checkNull(ConnectionDAO.singleReturn(query.toString()));
		logger.info("In updatesecuritydeposit() SD Amount to be.. "+amt);
		
		query=null;
		
		if(amt=="")
			amt="0.00";
		
		if(Double.parseDouble(CommonFunction.checkNull(amt).trim())==0.00){
		bufInsSql.append("update cr_deal_sd_m set SD_INTEREST_TYPE=?,SD_INTEREST_RATE=?,SD_INTEREST=? where DEAL_ID='"+dealId+"'");
		PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
		
		
			insertPrepStmtObject.addString("N");
		
			try {
				insertPrepStmtObject.addString(myFormatter.parse("0.00").toString());
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {
				insertPrepStmtObject.addString(myFormatter.parse("0.00").toString());
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			finally
			{
				
				query=null;
				
			}
			
		
	
		


		logger.info("ibufInsUpdSql.toString()" + bufInsSql.toString());
		insertPrepStmtObject.setSql(bufInsSql.toString());

		logger.info("IN updatesecuritydeposit query1 ### "
				+ insertPrepStmtObject.printQuery());

		qryList.add(insertPrepStmtObject);
		try {
			status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		}
		return status;
		
	}

	
	
	public boolean saveCharges(Object ob) {
		ChargeVo vo = (ChargeVo)ob;
		logger.info("In saveCharges....saveCharges...Update mod:  "+vo.getChargeIdDtl());
		qryList=new ArrayList();
		PrepStmtObject insertPrepStmtObject = null;
    		String dId[] = vo.getChargeIdDtl();
    		String finalAmount[] = vo.getFinalAmount();
    		String chargeAmount[]=vo.getChargeAmount();
    		
    		String taxAmount1[] = vo.getDealChargeTaxAmountInConfig1();
    		String taxAmount2[]=vo.getDealChargeTaxAmountInConfig2();
    		String tdsAmount[] = vo.getDealChargeTdsAmountInConfig();
    		String netAmount[]=vo.getDealChargeNetAmountInConfig();
    		
         if(!CommonFunction.checkNull(vo.getChargeIdDtl()).equalsIgnoreCase(""))
         {
    		for(int k=0;k<vo.getChargeIdDtl().length; k++)
    		{
    			logger.info("Charge Id in saveCharges: "+dId[k]);
    			StringBuilder query=new StringBuilder();
    			 query.append("update cr_deal_txncharges_dtl set DEAL_CHARGE_FINAL_AMOUNT=?,DEAL_CHARGE_CALCULATED_AMOUNT=?,DEAL_CHARGE_TAX_AMOUNT1=?,DEAL_CHARGE_TAX_AMOUNT2=?,");
    			 query.append("DEAL_CHARGE_TDS_AMOUNT=?,DEAL_CHARGE_NET_AMOUNT=?, REC_STATUS=?,MAKER_ID=?,MAKER_DATE=");
    			 //query.append("DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND) ");
    			 query.append(dbo);
    			 query.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ");
    			 query.append(" where DEAL_CHARGE_DTL_ID=?");
    			
    			 logger.info("In saveCharges.. "+query.toString());
    			 insertPrepStmtObject = new PrepStmtObject();
    			
    			if((CommonFunction.checkNull(finalAmount[k])).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse((finalAmount[k]).trim()).toString());
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					//insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(finalAmount[k]).trim());
    			
    			if((CommonFunction.checkNull(chargeAmount[k])).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse((chargeAmount[k]).trim()).toString());
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

			if((CommonFunction.checkNull(taxAmount1[k])).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse((taxAmount1[k]).trim()).toString());
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			
				//insertPrepStmtObject.addString((finalAmount[k]).trim());
			
			if((CommonFunction.checkNull(taxAmount2[k])).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse((taxAmount2[k]).trim()).toString());
				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				if((CommonFunction.checkNull(tdsAmount[k])).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse((tdsAmount[k]).trim()).toString());
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
			
					//insertPrepStmtObject.addString((finalAmount[k]).trim());
				
				if((CommonFunction.checkNull(netAmount[k])).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					try {
						insertPrepStmtObject.addString(myFormatter.parse((netAmount[k]).trim()).toString());
					} catch (ParseException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					//insertPrepStmtObject.addString((chargeAmount[k]).trim());
    			
    			insertPrepStmtObject.addString("P");
    			
    			if((CommonFunction.checkNull(vo.getUserId())).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((vo.getUserId()));
    			
    			if((CommonFunction.checkNull(vo.getBussinessDate())).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((vo.getBussinessDate()));
    			
    			if((CommonFunction.checkNull(dId[k])).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((dId[k]).trim());
    			
    			insertPrepStmtObject.setSql(query.toString());
    			qryList.add(insertPrepStmtObject);
    		query=null;
    		}
         }

		//  logger.info("IN saveCharges() update query1 ### "+qryList.get(0));
		//logger.info("IN SaveLoan() update query1 ### "+qryList.get(1));

			boolean status=false;
			try {
				status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			} catch (Exception e) {
				e.printStackTrace();
			}
		    logger.info("In saveCharges......................"+status);
		return status;
	}

	public boolean checkUploadFeasibility(String dealId)
	{
		boolean status=false;
		try
		{
			logger.info("In check Upload Feasibility..........................DAOImpl");
			StringBuilder noOfDocument=new StringBuilder();
			int limitOfUploadDocument=0;
			noOfDocument.append("select PARAMETER_VALUE from PARAMETER_MST  where PARAMETER_KEY='NUMBER_OF_DOCUMENT_UPLOAD'");
			String uploadDocument=(String)ConnectionDAO.singleReturn(noOfDocument.toString());
			if(!CommonFunction.checkNull(uploadDocument).equalsIgnoreCase(""))
			{
				limitOfUploadDocument=Integer.parseInt(uploadDocument);
			}
			else
			{
				limitOfUploadDocument=0;
			}
			noOfDocument=null;
			String strReturn=null;
			int count=0;
			StringBuilder query=new StringBuilder();
			 query.append("select count(txn_id) from cr_uploaded_documents where txn_id='"+dealId+"' and txn_type='DC'");
			logger.info("In check Upload Feasibility...............query...........DAOImpl "+query.toString());
			Connection conn= ConnectionDAO.getConnection();
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery(query.toString());
			if (rs.next()) {
                strReturn = rs.getString(1);
            }
			count=Integer.parseInt(strReturn);
			conn.close();
			if(count<limitOfUploadDocument)
			{
				status=true;
			}
			else if(count>=limitOfUploadDocument)
			{
				status=false;
			}
			logger.info("Resultset value====  "+count);
			
			query=null;
			
		}catch(Exception e){
			e.printStackTrace();
		}
		return status;
	}

	public boolean uploadUnderwritingData(Object ob)
	{
		UnderwritingDocUploadVo uwDocVo = (UnderwritingDocUploadVo)ob;
		boolean status=false;
		logger.info("Inside DAO Impl: File= "+uwDocVo.getDocFile());
		logger.info("Inside DAO Impl: deal id= "+uwDocVo.getDealId());
		//boolean uploadStatus=UploadDocument.docUpload(uwDocVo.getDocFile(),uwDocVo.getDealId());
		//if(uploadStatus)
		//{
			logger.info("Document Uploaded Successfully");
			ArrayList qryList = new ArrayList();
			PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
			try{
				logger.info("In insert part of uploadUnderwritingData....");
				StringBuffer bufInsSql =	new StringBuffer();
				bufInsSql.append("insert into cr_uploaded_documents(txn_type,txn_id,document_desc,file_name,document_path,uploaded_by,uploaded_date)");
				bufInsSql.append(" values ( ");
				bufInsSql.append(" ?," ); //TXN_TYPE
				bufInsSql.append(" ?," ); //TXN_ID
				bufInsSql.append(" ?," ); //Document Description
				bufInsSql.append(" ?," ); //File Name
				bufInsSql.append(" ?," ); //Document Path
				bufInsSql.append(" ?," ); //Uploaded By
				bufInsSql.append(dbo); 
				bufInsSql.append("sysdate())" );
				
				
					insertPrepStmtObject.addString(("DC").trim());
					
				if((CommonFunction.checkNull(uwDocVo.getDealId())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((uwDocVo.getDealId()).trim());
				if((CommonFunction.checkNull(uwDocVo.getDocDescription())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((uwDocVo.getDocDescription()).trim());
				if(CommonFunction.checkNull(uwDocVo.getFileName()).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(CommonFunction.checkNull(uwDocVo.getFileName()).trim());
				if((CommonFunction.checkNull(uwDocVo.getDocPath())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((uwDocVo.getDocPath()).trim());
				if((CommonFunction.checkNull(uwDocVo.getUserName())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((uwDocVo.getUserName()).trim());
				
				insertPrepStmtObject.setSql(bufInsSql.toString());
							
				logger.info("IN uploadUnderwritingData() insert query1 ### "+insertPrepStmtObject.printQuery());
				qryList.add(insertPrepStmtObject);
				status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
				logger.info("In uploadUnderwritingData.................query status..... "+status);
				bufInsSql=null;
			}catch(Exception e){
				e.printStackTrace();
			}
		return status;
	}

	
	public boolean uploadUnderwritingDataForCm(Object ob)
	{
		UnderwritingDocUploadVo uwDocVo = (UnderwritingDocUploadVo)ob;
		boolean status=false;
		logger.info("Inside DAO Impl: File= "+uwDocVo.getDocFile());
		logger.info("Inside DAO Impl: deal id= "+uwDocVo.getDealId());
		//boolean uploadStatus=UploadDocument.docUpload(uwDocVo.getDocFile(),uwDocVo.getDealId());
		//if(uploadStatus)
		//{
			logger.info("Document Uploaded Successfully");
			ArrayList qryList = new ArrayList();
			PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
			try{
				logger.info("In insert part of uploadUnderwritingData....");
				StringBuffer bufInsSql =	new StringBuffer();
				bufInsSql.append("insert into cr_uploaded_documents(txn_type,txn_id,document_desc,file_name,document_path,uploaded_by,uploaded_date)");
				bufInsSql.append(" values ( ");
				bufInsSql.append(" ?," ); //TXN_TYPE
				bufInsSql.append(" ?," ); //TXN_ID
				bufInsSql.append(" ?," ); //Document Description
				bufInsSql.append(" ?," ); //File Name
				bufInsSql.append(" ?," ); //Document Path
				bufInsSql.append(" ?," ); //Uploaded By
				
				bufInsSql.append(dbo); 
				bufInsSql.append("sysdate())" );

				
					insertPrepStmtObject.addString(("LIM").trim());
					
				if((CommonFunction.checkNull(uwDocVo.getDealId())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((uwDocVo.getDealId()).trim());
				if((CommonFunction.checkNull(uwDocVo.getDocDescription())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((uwDocVo.getDocDescription()).trim());
				if(CommonFunction.checkNull(uwDocVo.getFileName()).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(CommonFunction.checkNull(uwDocVo.getFileName()).trim());
				if((CommonFunction.checkNull(uwDocVo.getDocPath())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((uwDocVo.getDocPath()).trim());
				if((CommonFunction.checkNull(uwDocVo.getUserName())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((uwDocVo.getUserName()).trim());
				insertPrepStmtObject.setSql(bufInsSql.toString());
											
				logger.info("IN uploadUnderwritingData() insert query1 ### "+insertPrepStmtObject.printQuery());
				qryList.add(insertPrepStmtObject);
				status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
				logger.info("In uploadUnderwritingData.................query status..... "+status);
				bufInsSql=null;
			}catch(Exception e){
				e.printStackTrace();
			}
		return status;
	}

	public ArrayList getUploadUnderwritingData(String dealId)
	{
		ArrayList list=new ArrayList();
		ArrayList data=null;
		try{
			//logger.info("In getUploadUnderwritingData..........................DAOImpl"+dealId);
			StringBuilder query=new StringBuilder();
			query.append(" SELECT A.TXN_ID, A.FILE_NAME, A.DOCUMENT_DESC, B.USER_NAME,S.STAGE_DESC FROM CR_UPLOADED_DOCUMENTS A JOIN SEC_USER_M B ON A.UPLOADED_BY=B.USER_ID JOIN CR_STAGE_M S ON S.STAGE_ID=A.TXN_TYPE where txn_id='"+dealId+"' and TXN_TYPE='DC'");
			//logger.info("In getUploadUnderwritingData...............query...........DAOImpl"+query);
			UnderwritingDocUploadVo uwDocVo = null;
			ArrayList product = ConnectionDAO.sqlSelect(query.toString());
			//logger.info("getUploadUnderwritingData size of list Product "+product.size());
			query=null;
			for(int i=0;i<product.size();i++){
				
				 data=(ArrayList)product.get(i);
				if(data.size()>0)	{
					uwDocVo=new UnderwritingDocUploadVo();
					uwDocVo.setDealId((CommonFunction.checkNull(data.get(0))).trim());
					uwDocVo.setFileName(CommonFunction.checkNull(data.get(1)).trim());
					uwDocVo.setDocDescription((CommonFunction.checkNull(data.get(2))).trim());
					uwDocVo.setUserName((CommonFunction.checkNull(data.get(3))).trim());
					uwDocVo.setUploadedState((CommonFunction.checkNull(data.get(4))).trim());
					list.add(uwDocVo);
					uwDocVo=null;
				}
			}
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			
			data=null;
			
		}

		return list;
	}
//sachin
public ArrayList getUploadUnderwritingDataForCm(String dealId)
{
	ArrayList list=new ArrayList();
	ArrayList data=null;
	try{
		//logger.info("In getUploadUnderwritingData..........................DAOImpl"+dealId);
		StringBuilder query=new StringBuilder();
		 query.append(" SELECT A.TXN_ID, A.FILE_NAME, A.DOCUMENT_DESC, B.USER_NAME,S.STAGE_DESC,A.TXN_TYPE FROM CR_UPLOADED_DOCUMENTS A JOIN SEC_USER_M B ON A.UPLOADED_BY=B.USER_ID JOIN CR_STAGE_M S ON S.STAGE_ID=A.TXN_TYPE where txn_id='"+dealId+"' and TXN_TYPE='LIM'");
		logger.info("In getUploadUnderwritingDataForCm...............query...........DAOImpl"+query);
		UnderwritingDocUploadVo uwDocVo = null;
		ArrayList product = ConnectionDAO.sqlSelect(query.toString());
		//logger.info("getUploadUnderwritingData size of list Product "+product.size());
		query=null;
		for(int i=0;i<product.size();i++){
			
			data=(ArrayList)product.get(i);
			if(data.size()>0)	{
				uwDocVo=new UnderwritingDocUploadVo();
				uwDocVo.setTxnId((CommonFunction.checkNull(data.get(0))).trim());
				uwDocVo.setFileName(CommonFunction.checkNull(data.get(1)).trim());
				uwDocVo.setDocDescription((CommonFunction.checkNull(data.get(2))).trim());
				uwDocVo.setUserName((CommonFunction.checkNull(data.get(3))).trim());
				uwDocVo.setUploadedState((CommonFunction.checkNull(data.get(4))).trim());
				uwDocVo.setTxnType((CommonFunction.checkNull(data.get(5))).trim());
				list.add(uwDocVo);
				uwDocVo=null;
			}
		}
	}
	catch(Exception e){
		e.printStackTrace();
	}
	finally{
		data=null;

	}

	return list;
}

//end by sachin

public ArrayList getUploadUnderwritingDataForCmCp(String dealId)
{
	ArrayList list=new ArrayList();
	ArrayList data=null;
	try{
		//logger.info("In getUploadUnderwritingDataForCmCp..........................Loan Id : "+dealId);
		String deaId = ConnectionDAO.singleReturn("select LOAN_DEAL_ID from cr_loan_dtl where LOAN_ID='"+dealId+"'");
		//logger.info("In getUploadUnderwritingDataForCmCp..........................Deal Id : "+deaId);
		StringBuilder query=new StringBuilder();
		query.append("SELECT A.TXN_ID, A.FILE_NAME, A.DOCUMENT_DESC, B.USER_NAME,S.STAGE_DESC,A.TXN_TYPE FROM CR_UPLOADED_DOCUMENTS A JOIN SEC_USER_M B ON A.UPLOADED_BY=B.USER_ID JOIN CR_STAGE_M S ON S.STAGE_ID=A.TXN_TYPE where txn_id='"+deaId+"' and TXN_TYPE='DC'");
		logger.info("In getUploadUnderwritingDataForCmCp...............query...........DAOImpl"+query);
		UnderwritingDocUploadVo uwDocVo = null;
		ArrayList product = ConnectionDAO.sqlSelect(query.toString());
		//logger.info("getUploadUnderwritingData size of list Product "+product.size());
		query=null;
		for(int i=0;i<product.size();i++){
		
			data=(ArrayList)product.get(i);
			if(data.size()>0)	{
				uwDocVo=new UnderwritingDocUploadVo();
				uwDocVo.setTxnId((CommonFunction.checkNull(data.get(0))).trim());
				uwDocVo.setFileName(CommonFunction.checkNull(data.get(1)).trim());
				uwDocVo.setDocDescription((CommonFunction.checkNull(data.get(2))).trim());
				uwDocVo.setUserName((CommonFunction.checkNull(data.get(3))).trim());
				uwDocVo.setUploadedState((CommonFunction.checkNull(data.get(4))).trim());
				uwDocVo.setTxnType((CommonFunction.checkNull(data.get(5))).trim());
				list.add(uwDocVo);
				uwDocVo=null;
			}
			
		}
	}
	catch(Exception e){
		e.printStackTrace();
	}
	finally{
	
		
		data=null;
	}

	return list;
}
public boolean deleteDocumentUploadEntry(String documentName,String dealId) {

	logger.info("In deleteDocumentUploadEntry .......DAOImpl.."+StringEscapeUtils.escapeSql(CommonFunction.checkNull(documentName).trim()));
        boolean status=false;
	try{
		StringBuilder query=new StringBuilder();
		query.append("delete from cr_uploaded_documents where file_name='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(documentName).trim())+"' and txn_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' and txn_type='DC'");
		logger.info("In.....deleteDocumentUploadEntry"+query.toString());
		qryList  = new ArrayList();
		qryList.add(query);
		status=ConnectionDAO.sqlInsUpdDelete(qryList);
		logger.info("Deletion Status :"+status);
		query=null;
		}catch(Exception e){
			e.printStackTrace();
		}
		return status;
}
//sachin

public boolean deleteDocumentUploadEntryForCm(String documentName,String dealId) {

	logger.info("In deleteDocumentUploadEntry .......DAOImpl.."+StringEscapeUtils.escapeSql(CommonFunction.checkNull(documentName).trim()));
        boolean status=false;
	try{
		StringBuilder query=new StringBuilder();
		query.append("delete from cr_uploaded_documents where file_name='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(documentName).trim())+"' and txn_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' and txn_type='LIM'");
		qryList  = new ArrayList();
		qryList.add(query);
		logger.info("In.....deleteDocumentUploadEntryForCm"+query.toString());
		status=ConnectionDAO.sqlInsUpdDelete(qryList);
		logger.info("Deletion Status :"+status);
		query=null;
		}catch(Exception e){
			e.printStackTrace();
		}
		return status;
}


//end by sachin
//neeraj kumar tripathi
public String callProcedure(String dealCap,String dealId)
{
	ArrayList list =new ArrayList();
	String message="";
	try 
	{
		int dId = Integer.parseInt(dealId);		
		StringBuilder custIdQ=new StringBuilder();
		StringBuilder custId=new StringBuilder();
		StringBuilder suplId=new StringBuilder();
		StringBuilder manfId=new StringBuilder();
		StringBuilder supllierIdQ=new StringBuilder();
		StringBuilder exactManfId=new StringBuilder();
		StringBuilder exactSuplId=new StringBuilder();

		 custIdQ.append("select DEAL_CUSTOMER_ID from cr_deal_dtl where DEAL_ID="+dealId);
		 suplId.append("SU;");
		 manfId.append("MF;");
		 custId.append(ConnectionDAO.singleReturn(custIdQ.toString()));
		logger.info("In callProcedure for deal customerId: "+custId);
		 supllierIdQ.append("select distinct ASSET_SUPPLIER from cr_deal_collateral_m d,cr_asset_collateral_m a "+ 
								" where d.ASSETID=a.ASSET_ID and a.ASSET_TYPE='ASSET'  and  DEAL_ID="+dealId);
		 
		 logger.info("In callProcedure for deal supplier: "+supllierIdQ.toString());
		ArrayList supllierIdList=ConnectionDAO.sqlSelect(supllierIdQ.toString());
		
		supllierIdQ=null;
		
		if(supllierIdList.size()>0)
		{
			for(int i=0;i<supllierIdList.size();i++)
			{
				ArrayList subsupllierIdList=(ArrayList)supllierIdList.get(i);
				if(subsupllierIdList.size()>0)
				  suplId.append(CommonFunction.checkNull(subsupllierIdList.get(0))+"|SU;");
			}
		}
		logger.info("In callProcedure for deal ## suplId ## "+suplId);
	    logger.info("In callProcedure for deal appendSQL true----  in check index Of"+suplId.lastIndexOf("SU;") +"------"+(suplId.length()-3));
	    if(suplId.lastIndexOf("SU;") == (suplId.length()-3))
	    {
	    	logger.info("In callProcedure for deal appendSQL true----  in check index Of");
	    	exactSuplId.append((suplId).substring(0,(suplId.length()-3)));
	    	logger.info("In callProcedure for deal ...suplId."+exactSuplId);
	    }
	    StringBuilder manufactIdQ=new StringBuilder();
		 manufactIdQ.append("select distinct ASSET_MANUFATURER from cr_deal_collateral_m d,cr_asset_collateral_m a "+ 
			                   " where d.ASSETID=a.ASSET_ID and a.ASSET_TYPE='ASSET'  and  DEAL_ID="+dealId);
		 logger.info("In callProcedure for deal manufact: "+manufactIdQ.toString());
			ArrayList manufactIdList=ConnectionDAO.sqlSelect(manufactIdQ.toString());	
			logger.info("manufactIdList.size(): "+manufactIdList.size());
			manufactIdQ=null;
		if(manufactIdList.size()>0)
		{
			for(int i=0;i<manufactIdList.size();i++)
			{
				ArrayList submanufactIdList=(ArrayList)manufactIdList.get(i);
				if(submanufactIdList.size()>0)
				{
						  manfId.append(CommonFunction.checkNull(submanufactIdList.get(0))+"|MF;");;
						 // manfId=manfId+2+"|MF;";
				}
			}
		}
		logger.info("In callProcedure for deal ## manfId ## "+manfId);
		logger.info("In callProcedure for deal In appendSQL true----  in check index Of"+manfId.lastIndexOf("MF;") +"------"+(manfId.length()-3));
		if(manfId.lastIndexOf("MF;") == (manfId.length()-3))
		{
		    logger.info("In appendSQL true----  in check index Of");
		    exactManfId.append((manfId).substring(0,(manfId.length()-3)));
		    logger.info("In callProcedure for deal.exactManfId  ."+exactManfId);
		}
		StringBuilder productQuery=new StringBuilder();
		
		 productQuery.append("select DEAL_PRODUCT,DEAL_SCHEME,DEAL_LOAN_AMOUNT,DEAL_MARGIN_AMOUNT,DEAL_LOAN_ID from cr_deal_loan_dtl where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		logger.info("In callProcedure for deal productQuery: "+productQuery);
		ArrayList productList=ConnectionDAO.sqlSelect(productQuery.toString());
		
		productQuery=null;
		StringBuilder checkQuery=new StringBuilder();

		 checkQuery.append("select DEAL_CHARGE_DTL_ID from cr_deal_txncharges_dtl where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		logger.info("checkQuery: "+checkQuery.toString());
		boolean status = ConnectionDAO.checkStatus(checkQuery.toString());
		
		checkQuery=null;
		if(!status)
		{
			String repayQuery="select DEAL_REPAYMENT_TYPE from cr_deal_loan_dtl where deal_id='"+dealId+"'";
			String repay=ConnectionDAO.singleReturn(repayQuery.toString());
			
			RefreshFlagVo vo1 = new RefreshFlagVo();
			vo1.setRecordId(Integer.parseInt(dealId));
	    	vo1.setTabIndex(6);
	    	vo1.setModuleName("CP");
	    	vo1.setNonInstallment(repay);
    		RefreshFlagValueInsert.updateRefreshFlag(vo1);
    		
		  for(int i=0;i<productList.size();i++)
		  {
			  ArrayList subproductList=(ArrayList)productList.get(i);
			  if(subproductList.size()>0)
			  {
				   StringBuffer chargeStr=new StringBuffer();				  
                   if(!CommonFunction.checkNull(subproductList.get(2)).equalsIgnoreCase(""))
                	   chargeStr.append("2;"+subproductList.get(2)+"|");
                   if(!CommonFunction.checkNull(subproductList.get(3)).equalsIgnoreCase(""))
                	   chargeStr.append("3;"+CommonFunction.checkNull(subproductList.get(3))+"|");                   
                    String bpStr="CS;"+custId+"|"+exactSuplId+exactManfId;
					String dealLoanId=CommonFunction.checkNull(subproductList.get(4));
					int loanDId=0;
					if(!dealLoanId.equalsIgnoreCase(""))
						loanDId=Integer.parseInt(dealLoanId);					
					logger.info(" STAGE INFO: "+dealCap+"DealLoanId from crdealLoandtl: "+loanDId+ " Total Charges: "+chargeStr+ " bpStr:  "+bpStr+ " Product: "+subproductList.get(0)+ " Scheme: "+subproductList.get(1));
					logger.info("GET_CHARGES in deal capturing");
					ArrayList<Object> in =new ArrayList<Object>();
					ArrayList<Object> out =new ArrayList<Object>();
					ArrayList outMessages = new ArrayList();					
					StringBuilder s1=new StringBuilder();
					StringBuilder s2=new StringBuilder();
					try 
					{
						in.add(dealCap);
						in.add(loanDId);
						in.add(CommonFunction.checkNull(subproductList.get(0)).toString());
						in.add(CommonFunction.checkNull(subproductList.get(1)).toString());
						in.add(chargeStr.toString());
						in.add(bpStr);
						out.add(s1);
						out.add(s2);					
						outMessages=(ArrayList) ConnectionDAO.callSP("GET_CHARGES",in,out);
						if(outMessages!=null && outMessages.size()>0)
						{
							s1.append(CommonFunction.checkNull(outMessages.get(0)));
														
							if(s1!=null && s1.toString().equalsIgnoreCase("S"))
							{
								
								message=s1.toString();
								logger.info("Procedure s1----"+s1);
							}
							else if(s1!=null && s1.toString().equalsIgnoreCase("E"))
							{
								s2.append(CommonFunction.checkNull(outMessages.get(1)));
								logger.info("Procedure Error Message----"+s2);
								message=s2.toString();
							}	
							logger.info("s1  :  "+s1);
							logger.info("s2  :  "+s2);
							
							s1=null;
							s2=null;
						}
					}
					catch (Exception e) 
					{e.printStackTrace();}
					finally
					{	
						
						in=null;
						out=null;
						outMessages=null;
					    exactManfId=null;
					    exactSuplId=null;

					}
			  	}
			 }	
		  
		}
	} 
	catch (Exception e) 
	{e.printStackTrace();}	
return message;
}
public ArrayList getchargesDetail(String dealCap,String dealId) 
{
	ArrayList list =new ArrayList();	
	try
	{			
		ChargeVo vo =null;
		StringBuilder query=new StringBuilder();
		 query.append("select DEAL_CHARGE_DTL_ID,DEAL_CHARGE_TYPE,DEAL_CHARGE_CODE,CHARGE_DESC," );
		 query.append(" GM.DESCRIPTION,v.DEALER_DESC,DEAL_CHARGE_CALCULATED_AMOUNT," );
		 query.append(" DEAL_CHARGE_FINAL_AMOUNT,d.CUSTOMER_NAME,p.DEAL_LOAN_AMOUNT,(");
		 query.append("ISNULL(P.DEAL_ASSET_COST,0)-");
		 query.append("ISNULL(P.DEAL_LOAN_AMOUNT,0)) AS 'MARGIN AMOUNT'," );
		 query.append(" DEAL_CHARGE_CALCULATED_ON,");
		 // query.append("if(DEAL_CHARGE_METHOD='P','PERCENTAGE','FLAT'),");
		 query.append("case when DEAL_CHARGE_METHOD='P' then 'PERCENTAGE' else 'FLAT' end as DEAL_CHARGE_METHOD,");
		 //query.append("if(DEAL_CHARGE_TAX_INCLUSIVE='N','NO','YES')," );
		 query.append("case when DEAL_CHARGE_TAX_INCLUSIVE='N' then 'NO' else 'YES' end as DEAL_CHARGE_TAX_INCLUSIVE,");
		 query.append(" DEAL_CHARGE_TAX_RATE1,DEAL_CHARGE_TAX_RATE2,DEAL_CHARGE_BP_TYPE,");
		// query.append("if(DEAL_MIN_CHARGE_METHOD='P','PERCENTAGE','FLAT'),");
		 query.append("case when DEAL_MIN_CHARGE_METHOD='P' then 'PERCENTAGE' else 'FLAT' end as DEAL_MIN_CHARGE_METHOD,");
		 query.append("DEAL_CHARGE_MIN_CHARGE_AMOUNT," +
					" DEAL_CHARGE_TAX_APPLICABLE,DEAL_CHARGE_TDS_APPLICABLE,DEAL_CHARGE_TAX_AMOUNT1,DEAL_CHARGE_TAX_AMOUNT2,DEAL_CHARGE_MIN_CHARGE_AMOUNT,DEAL_CHARGE_TDS_RATE,DEAL_CHARGE_TDS_AMOUNT,DEAL_CHARGE_NET_AMOUNT,DEAL_CHARGE_APPLICATION_STAGE, " +
					" (SELECT sum(DEAL_CHARGE_CALCULATED_AMOUNT) from  CR_DEAL_TXNCHARGES_DTL where DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' and DEAL_CHARGE_BP_TYPE='CS' and DEAL_CHARGE_TYPE='R') as CUST_CHARGE_AMOUNT, "+
					" (SELECT sum(DEAL_CHARGE_FINAL_AMOUNT) from  CR_DEAL_TXNCHARGES_DTL where DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' and DEAL_CHARGE_BP_TYPE='CS' and DEAL_CHARGE_TYPE='R') as CUST_FINAL_CHARGE_AMOUNT "+
					" from cr_deal_txncharges_dtl t " +
					" left join com_charge_code_m c on t.DEAL_CHARGE_CODE=c.CHARGE_CODE " +
					" left join cr_dsa_dealer_m v on v.DEALER_ID=t.DEAL_CHARGE_BP_ID and v.BP_TYPE=t.DEAL_CHARGE_BP_TYPE and v.REC_STATUS='A' " +
					" left join cr_deal_customer_m d on d.CUSTOMER_ID=t.DEAL_CHARGE_BP_ID "+
					" left join cr_deal_loan_dtl p on p.DEAL_ID=t.DEAL_ID  "+
					" left join generic_master GM on GM.VALUE=DEAL_CHARGE_BP_TYPE and GM.GENERIC_KEY='BPTYPE' "+
					" where  t.DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' " );
		logger.info("getchargesDetail in deal  query "+query.toString());
		ArrayList charges = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getchargesDetail in deal  size "+charges.size());
		
		query=null;
		
		for(int i=0;i<charges.size();i++){
		//logger.info("showUnderwritingQueryData...FOR loop "+CommonFunction.checkNull(product.get(i)).toString());
		ArrayList subcharges=(ArrayList)charges.get(i);
		if(subcharges.size()>0)	
		{
			vo = new ChargeVo();
			vo.setChargeId((CommonFunction.checkNull(subcharges.get(0))).trim());
			if((CommonFunction.checkNull(subcharges.get(1)).trim()).equals("R"))
			{
				vo.setChargeType("Receivable");
			}
			else if((CommonFunction.checkNull(subcharges.get(1)).trim()).equals("P"))
			{
				vo.setChargeType("Payable");
			}
			vo.setChargeCode((CommonFunction.checkNull(subcharges.get(2))).trim());
			vo.setChargeDesc((CommonFunction.checkNull(subcharges.get(3))).trim());
			vo.setChargeBPType((CommonFunction.checkNull(subcharges.get(4)).trim()));
			if((CommonFunction.checkNull(subcharges.get(16)).trim()).equals("CS"))
			{						
				vo.setChargeBPId((CommonFunction.checkNull(subcharges.get(8))).trim());
			}
			else
			{
				vo.setChargeBPId((CommonFunction.checkNull(subcharges.get(5))).trim());
			}
			if(!CommonFunction.checkNull(subcharges.get(6)).equalsIgnoreCase(""))
    		{
   	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(6))).trim());
   	    		vo.setChargeCal(myFormatter.format(reconNum));
    		}
			if(!CommonFunction.checkNull(subcharges.get(7)).equalsIgnoreCase(""))
    		{
   	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(7))).trim());
   	    		vo.setChargeFinal(myFormatter.format(reconNum));
    		}
		
			vo.setLoanAmount((CommonFunction.checkNull(subcharges.get(9))).trim());
			vo.setMarginAmount((CommonFunction.checkNull(subcharges.get(10))).trim());
			vo.setChargeCalculatedOn((CommonFunction.checkNull(subcharges.get(11))).trim());
			vo.setChargeMethod((CommonFunction.checkNull(subcharges.get(12))).trim());
			vo.setTaxsInclusive((CommonFunction.checkNull(subcharges.get(13))).trim());
			if(!CommonFunction.checkNull(subcharges.get(14)).equalsIgnoreCase(""))
    		{
   	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(14))).trim());
   	    		vo.setTaxtRat1(myFormatter.format(reconNum));
    		}
			if(!CommonFunction.checkNull(subcharges.get(15)).equalsIgnoreCase(""))
    		{
   	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(15))).trim());
   	    		logger.info("setTaxtRat2: "+reconNum);
   	    		vo.setTaxtRat2(myFormatter.format(reconNum));
    		}
			vo.setMinChargeMethod((CommonFunction.checkNull(subcharges.get(17))).trim());
			vo.setMinChargeCalculatedOn((CommonFunction.checkNull(subcharges.get(18))).trim());
			vo.setDealChargeTaxApp((CommonFunction.checkNull(subcharges.get(19))).trim());
			vo.setDealChargeTdsApp((CommonFunction.checkNull(subcharges.get(20))).trim());
			if(!CommonFunction.checkNull(subcharges.get(21)).equalsIgnoreCase(""))
    		{
   	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(21))).trim());
   	    		vo.setDealChargeTaxAmount1(myFormatter.format(reconNum));
    		}
			if(!CommonFunction.checkNull(subcharges.get(22)).equalsIgnoreCase(""))
    		{
   	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(22))).trim());
   	    		//logger.info("setTaxtRat2: "+reconNum);
   	    		vo.setDealChargeTaxAmount2(myFormatter.format(reconNum));
    		}
			if(!CommonFunction.checkNull(subcharges.get(23)).equalsIgnoreCase(""))
			{
	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(23))).trim());
	    		vo.setDealChargeMinChargeAmount(myFormatter.format(reconNum));
    	    }
			if(!CommonFunction.checkNull(subcharges.get(24)).equalsIgnoreCase(""))
    	    {
	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(24))).trim());
	    		//logger.info("setTaxtRat2: "+reconNum);
	    		vo.setDealChargeTdsRate(myFormatter.format(reconNum));
    	    }
			if(!CommonFunction.checkNull(subcharges.get(25)).equalsIgnoreCase(""))
    	    {
	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(25))).trim());
	    		vo.setDealChargeTdsAmount(myFormatter.format(reconNum));
    	    }
			if(!CommonFunction.checkNull(subcharges.get(26)).equalsIgnoreCase(""))
    	    {
	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(26))).trim());
	    		//logger.info("setTaxtRat2: "+reconNum);
	    		vo.setDealChargeNetAmount(myFormatter.format(reconNum));
    	    }
			vo.setApplStage(CommonFunction.checkNull(subcharges.get(27)));
			if(!CommonFunction.checkNull(subcharges.get(28)).equalsIgnoreCase(""))
    		{
   	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(28))).trim());
   	    		vo.setCustomerCharge(myFormatter.format(reconNum));
   	    		
    		}
			if(!CommonFunction.checkNull(subcharges.get(29)).equalsIgnoreCase(""))
    		{
   	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(29))).trim());
   	    		vo.setCustomerFinalCharge(myFormatter.format(reconNum));
   	    		
    		}
		
			list.add(vo);
		 }
		}
	}
	catch (Exception e) 
	{e.printStackTrace();}
	return list;
}





	public ArrayList fetchHeader(String id) {
		ArrayList list=new ArrayList();
		try{

			StringBuilder query=new StringBuilder();
			StringBuilder query1=new StringBuilder();
			logger.info("In fetchHeader.....DAOImpl.....................");//+dealId);
			 query .append("select d.deal_id, deal_no,c.CUSTOMER_NAME,");
			 query.append(dbo);
			 query.append("DATE_FORMAT(deal_date,'"+dateFormat+"'),c.CUSTOMER_NAME from cr_deal_dtl d left join cr_deal_customer_m c");
			 query.append(" on d.DEAL_CUSTOMER_ID = c.CUSTOMER_ID");
			 query.append(" where d.DEAL_ID="+id);
			
			 logger.info("In fetchHeader.......query1...........DAOImpl........"+query1);
			 
			 query1.append("select DEAL_PRODUCT_CATEGORY,deal_product,DEAL_SCHEME,DEAL_LOAN_AMOUNT,DEAL_MARGIN_AMOUNT  from cr_deal_loan_dtl where  deal_id="+id);

			logger.info("In fetchHeader.......query...........DAOImpl........"+query1);
			HeaderInfoVo vo= null;
			HeaderInfoVo vo1= null;
			ArrayList header = ConnectionDAO.sqlSelect(query.toString());
			ArrayList header1=ConnectionDAO.sqlSelect(query1.toString());
			
			query1=null;
			query=null;

			if(header1.size()>1)
			{
				vo1 = new HeaderInfoVo();
				ArrayList subheader=(ArrayList)header1.get(0);
				vo1.setDealProductCat(CommonFunction.checkNull(subheader.get(0)).toString());
				vo1.setDealProduct("Multiple");
				vo1.setDealScheme("Multiple");
			}
			else if(header1!=null && header1.size()!=0)
			{
				vo1 = new HeaderInfoVo();
				ArrayList subheader=(ArrayList)header1.get(0);
				vo1.setDealProductCat(CommonFunction.checkNull(subheader.get(0)).toString());
				vo1.setDealProduct(CommonFunction.checkNull(subheader.get(1)).toString());
				vo1.setDealScheme(CommonFunction.checkNull(subheader.get(2)).toString());
			}

			//logger.info("getUnderwritingQueryData "+product.size());
			for(int i=0;i<header.size();i++){
				//logger.info("getUnderwritingQueryData...FOR loop "+CommonFunction.checkNull(product.get(i)).toString());
				ArrayList subheader=(ArrayList)header.get(i);
				if(subheader.size()>0)	{
					vo = new HeaderInfoVo();
					vo.setDealId(CommonFunction.checkNull(subheader.get(0)).toString());
					vo.setDealNo(CommonFunction.checkNull(subheader.get(1)).toString());
					if(subheader.get(2)!=null)
					{
						vo.setDealCustomerName(CommonFunction.checkNull(subheader.get(2)).toString());
					}
					else if(subheader.get(4)!=null)
					{
						vo.setDealCustomerName(CommonFunction.checkNull(subheader.get(4)).toString());
					}

					vo.setDealDate(CommonFunction.checkNull(subheader.get(3)).toString());
					list.add(vo);
				}
			}
			list.add(vo1);

		}catch(Exception e){
			e.printStackTrace();
		}
		return list;

	}
	public ArrayList getDealHeader(String id)
	{
		ArrayList list=new ArrayList();
		try
		{
			StringBuilder query=new StringBuilder();
			 query.append(" select ");
			 if(dbType.equalsIgnoreCase("MSSQL"))
				{
				 query.append(" TOP 1 ");
				}
			 query.append(" d.deal_id, deal_no,d.DEAL_CUSTOMER_ID,deal.CUSTOMER_NAME,");
			 query.append(dbo);
			 query.append("DATE_FORMAT(deal_date,'"+dateFormat+"'),p.PRODUCT_DESC,s.SCHEME_DESC,l.DEAL_PRODUCT_CATEGORY,d.REC_STATUS,S.MIN_AMT_FIN,S.MAX_AMT_FIN  from cr_deal_dtl d ");
			 query.append(" left join cr_deal_loan_dtl l on d.DEAL_ID=l.DEAL_ID");
			 query.append(" left join cr_product_m p on l.DEAL_PRODUCT=p.PRODUCT_ID");
			 query.append(" left join cr_scheme_m s on l.DEAL_SCHEME=s.SCHEME_ID");
			 query.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID");
			 query.append(" where d.DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()+" ");
			 if(!dbType.equalsIgnoreCase("MSSQL") && dbo.equalsIgnoreCase(""))
				{
				 query.append(" limit 1");
				}
			
			logger.info("getDealHeader Query: "+query.toString());
			
			HeaderInfoVo vo= null;
			ArrayList header = ConnectionDAO.sqlSelect(query.toString());
			
			query=null;
			int size=header.size();
			for(int i=0;i<size;i++){
				
				ArrayList header1=(ArrayList)header.get(i);
				if(header1!=null && header1.size()>0)
				{
					vo = new HeaderInfoVo();
					vo.setDealId((CommonFunction.checkNull(header1.get(0))).trim());
					vo.setDealNo((CommonFunction.checkNull(header1.get(1))).trim());
					vo.setDealCustomerId((CommonFunction.checkNull(header1.get(2))).trim());
					vo.setDealCustomerName((CommonFunction.checkNull(header1.get(3))).trim());
					vo.setDealDate((CommonFunction.checkNull(header1.get(4))).trim());
					vo.setDealProduct((CommonFunction.checkNull(header1.get(5))).trim());
					vo.setDealScheme((CommonFunction.checkNull(header1.get(6))).trim());
					vo.setDealProductCat((CommonFunction.checkNull(header1.get(7))).trim());
					vo.setSchemeMinAmt((CommonFunction.checkNull(header1.get(9))).trim());
					vo.setSchemeMaxAmt((CommonFunction.checkNull(header1.get(10))).trim());
					list.add(vo);
					vo=null;
				}
				header1.clear();
				header1=null;
			}
			header.clear();
			header=null;
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}

		return list;
	}
	
	public String getAppraiserType(String dealId,String verificationId)
	{

		String flag="";
		StringBuilder query = new StringBuilder();
		query.append("SELECT APPRAISER_TYPE FROM cr_deal_verification_dtl WHERE DEAL_ID= '"+dealId+"' and VERIFICATION_ID="+verificationId+"");
		logger.info("APPRAISER_TYPE:::::::::::::::::"+query.toString());
		try
		{
			flag = ConnectionDAO.singleReturn(query.toString());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return flag;

	}
	
	//sachin
	
	public ArrayList getDealHeaderForCm(String id)
	{
		ArrayList list=new ArrayList();
		try
		{
			StringBuilder query=new StringBuilder();
			query.append(" select distinct ");
			if(dbType.equalsIgnoreCase("MSSQL"))
			{
				query.append(" TOP 1 ");
			}
			query.append("cld.LOAN_ID,cld.LOAN_NO,cld.LOAN_REFERENCE_NO,gcd.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,cld.LOAN_PRODUCT_CATEGORY,");
			query.append(dbo);
			query.append("DATE_FORMAT(cld.LOAN_INITIATION_DATE,'"+dateFormat+"') from cr_loan_dtl cld ");
			query.append("left join cr_product_m p on cld.loan_product=p.PRODUCT_ID  left join gcd_customer_m gcd on gcd.CUSTOMER_ID=cld.loan_CUSTOMER_ID");
			query.append(" left join cr_scheme_m s on cld.loan_SCHEME=s.SCHEME_ID ");
			query.append(" where cld.LOAN_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()+" ");
			if(!dbType.equalsIgnoreCase("MSSQL") && dbo.equalsIgnoreCase(""))
			{
				query.append(" limit 1");
			}
			logger.info("getDealHeader Query: "+query.toString());
			
			HeaderInfoVo vo= null;
			ArrayList header = ConnectionDAO.sqlSelect(query.toString());
			
			query=null;
			for(int i=0;i<header.size();i++){
				logger.info("header"+header.size());
				ArrayList header1=(ArrayList)header.get(i);
				if(header1!=null && header1.size()>0)
				{
					vo = new HeaderInfoVo();
					vo.setDealId((CommonFunction.checkNull(header1.get(0))).trim());
					vo.setDealNo((CommonFunction.checkNull(header1.get(1))).trim());
					//vo.setDealCustomerId((CommonFunction.checkNull(header1.get(2))).trim());
					vo.setDealCustomerName((CommonFunction.checkNull(header1.get(3))).trim());
					//vo.setDealDate((CommonFunction.checkNull(header1.get(4))).trim());
					vo.setDealProduct((CommonFunction.checkNull(header1.get(4))).trim());
					vo.setDealScheme((CommonFunction.checkNull(header1.get(5))).trim());
					vo.setDealProductCat((CommonFunction.checkNull(header1.get(6))).trim());
					vo.setDealDate((CommonFunction.checkNull(header1.get(7))).trim());
					list.add(vo);
				}
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}

		return list;
	}


    public String checkStage(String dealId) {

		String status="";
		StringBuilder productCategoryType=new StringBuilder();
		StringBuilder commAddr=new StringBuilder();
		StringBuilder gAddr=new StringBuilder();
		String gauranterStatus="";
		String coapplicantStatus="";
		ArrayList gCheckAddr=new ArrayList();
		StringBuilder coAddr=new StringBuilder();
		ArrayList coCheckAddr=new ArrayList();
		StringBuilder guram=new StringBuilder();
		StringBuilder tenure=new StringBuilder();
		StringBuilder sdAmount=new StringBuilder();
		StringBuilder checkSDAm=new StringBuilder();
		StringBuilder q1=new StringBuilder();
		StringBuilder q2=new StringBuilder();
		StringBuilder q3=new StringBuilder();
		StringBuilder q4=new StringBuilder();
		StringBuilder q5=new StringBuilder();
		StringBuilder q8=new StringBuilder();
		StringBuilder q9=new StringBuilder();
		StringBuilder q10=new StringBuilder();
		StringBuilder q11=new StringBuilder();
		StringBuilder checkSDQ=new StringBuilder();
		StringBuilder q12=new StringBuilder();
		StringBuilder q7=new StringBuilder();
		StringBuilder q13=new StringBuilder();
		StringBuilder q15=new StringBuilder();
		StringBuilder q18=new StringBuilder();
		StringBuilder q19=new StringBuilder();
		StringBuilder q20=new StringBuilder();
		StringBuilder q21=new StringBuilder();
		StringBuilder referenceCountQuery=new StringBuilder();
		StringBuilder marginQuery=new StringBuilder();
		
		productCategoryType.append("select count(1) from cr_deal_loan_dtl where DEAL_PRODUCT_CATEGORY!='TA' and DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		String referenceCountParaQuery="select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY='APPLICANT_REFERENCE_COUNT'";
		referenceCountQuery.append("select count(*) from cr_deal_reference_m where ");
		referenceCountQuery.append("ISNULL(BPTYPE,'CS')='CS' and BPID=(select DEAL_CUSTOMER_ID from cr_deal_dtl where deal_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"')");
		q1.append("select DEAL_CUSTOMER_ID from cr_deal_dtl where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		logger.info("In.......checkStage...q1"+q1.toString());
		q2.append("select DEAL_LOAN_ID from cr_deal_loan_dtl where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		logger.info("In.......checkStage...q2"+q2.toString());
		q3.append("select DEAL_ID from cr_deal_collateral_m where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		logger.info("In.......checkStage...q3"+q3.toString());
		q4.append("select count(1) from cr_deal_txncharges_dtl where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		logger.info("In.......checkStage...q4"+q4.toString());
		q5.append("select DOC_STATUS from cr_document_dtl where TXNID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+" and ENTITY_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+" and DOC_MANDATORY='Y' and STAGE_ID='PRS' AND TXN_TYPE='DC'");
		logger.info("In.......checkStage...q5"+q5.toString());
		q9.append("select DOC_STATUS from cr_document_dtl where TXNID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+" and ENTITY_ID in (select DEAL_CUSTOMER_ID from cr_deal_customer_role where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+") and DOC_MANDATORY='Y' and STAGE_ID='PRS' AND TXN_TYPE='DC'");
		logger.info("In.......checkStage...q9"+q9.toString());
		q10.append("select DOC_STATUS from cr_document_dtl where TXNID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+" and ENTITY_ID in (select ASSETID from cr_deal_collateral_m where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+")  and DOC_MANDATORY='Y' and STAGE_ID='PRS' AND TXN_TYPE='DC'");
		logger.info("In.......checkStage...q10"+q10.toString());
		q8.append("SELECT GUARANTEE_AMOUNT FROM cr_deal_customer_role WHERE DEAL_CUSTOMER_ROLE_TYPE='GUARANTOR' AND DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		logger.info("In.......checkStage...q8"+q8.toString());
		q11.append("select SD_TENURE from cr_deal_sd_m s,cr_deal_loan_dtl d where d.DEAL_ID=s.DEAL_ID and s.SD_TENURE<=d.DEAL_TENURE"+
				" and d.DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		checkSDQ.append("SELECT ");
		checkSDQ.append("ISNULL(S.SD_AMOUNT,0) FROM cr_deal_sd_m s  WHERE  S.DEAL_ID ="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		checkSDAm.append(ConnectionDAO.singleReturn(checkSDQ.toString()));
		q12.append("SELECT ");
		q12.append("ISNULL(C.DEAL_CHARGE_FINAL_AMOUNT,0) FROM cr_deal_txncharges_dtl c WHERE  c.DEAL_CHARGE_CODE='103' AND c.DEAL_ID ="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		try 
		{
			logger.info("Customer Detail Query: "+q1.toString());
		    boolean cust = ConnectionDAO.checkStatus(q1.toString());
		    if(!cust)
			{
				status="CS";
				return status;
			}
		    q7.append("select count(*) FROM cr_deal_address_m where BPID=(SELECT DEAL_CUSTOMER_ID FROM cr_deal_dtl WHERE DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+") and BPTYPE='CS' and COMMUNICATION_ADDRESS='Y'");
			logger.info("Applicant Communication Address check query : "+q7.toString());
			commAddr.append(ConnectionDAO.singleReturn(q7.toString()));
			if(!commAddr.toString().equalsIgnoreCase("1"))
			{
				status="CA";
				return status;
			}
			q13.append("SELECT DEAL_CUSTOMER_ID FROM cr_deal_customer_role where DEAL_CUSTOMER_ROLE_TYPE='GUARANTOR' AND DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
			logger.info("Gurantor ID List check query : "+q13.toString());
			gCheckAddr=ConnectionDAO.sqlSelect(q13.toString());
			if(!CommonFunction.checkNull(gCheckAddr).equalsIgnoreCase("") && gCheckAddr.size()>0)
			{
				int ff=gCheckAddr.size();
				for(int j=0;j<ff;j++)
				{	
					ArrayList data=(ArrayList)gCheckAddr.get(j);
					int flag=data.size();
					if(flag>0)
					{
						StringBuilder q14=new StringBuilder();
						gAddr=new StringBuilder();
						q14.append("select count(*) FROM cr_deal_address_m where BPID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(data.get(0))).trim()+"' and BPTYPE='CS' and COMMUNICATION_ADDRESS='Y'");
						logger.info("Gurantor communication address check query  : "+q14.toString());
						gAddr.append(ConnectionDAO.singleReturn(q14.toString()));
						q14=null;								
					}
					if(gAddr.toString().equalsIgnoreCase("0"))
					{
						status="CA";
						return status;
					}					
				}
			}
			q15.append("SELECT DEAL_CUSTOMER_ID FROM cr_deal_customer_role where DEAL_CUSTOMER_ROLE_TYPE='COAPPL' AND DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
			logger.info("Coapplicant ID List check query : "+q15.toString());
			coCheckAddr=ConnectionDAO.sqlSelect(q15.toString());
			
			if(!CommonFunction.checkNull(coCheckAddr).equalsIgnoreCase("") && coCheckAddr.size()>0)
			{
				int ff=coCheckAddr.size();
				for(int j=0;j<ff;j++)
				{
					ArrayList data=(ArrayList)coCheckAddr.get(j);
					int flag=data.size();
					if(flag>0)
					{		
						StringBuilder q16=new StringBuilder();
						coAddr=new StringBuilder();
						q16.append("select count(*) FROM cr_deal_address_m where BPID = '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(data.get(0))).trim()+"' and BPTYPE='CS' and COMMUNICATION_ADDRESS='Y'");
						logger.info("CO Applicant communication address check query  : "+q16.toString());
						coAddr.append(ConnectionDAO.singleReturn(q16.toString()));
						q16=null;
					}
					if(coAddr.toString().equalsIgnoreCase("0"))
					{
						status="CA";
						return status;
					}
				}
			}
			if(!CommonFunction.checkNull(gCheckAddr).equalsIgnoreCase("") && gCheckAddr.size()>0)
			{
				String guaraneeAmountQuery="select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY='GUARANTEE_AMOUNT'";
				String guaraneeAmountPara = ConnectionDAO.singleReturn(guaraneeAmountQuery);
				logger.info("guaraneeAmountPara:::::::::::::::"+guaraneeAmountPara);
		        if(CommonFunction.checkNull(guaraneeAmountPara).equalsIgnoreCase("Y"))
		        {
		        	logger.info("Gurantor Amount Query : "+q8.toString());
		        	guram.append(ConnectionDAO.singleReturn(q8.toString()));
		        	if(guram!=null && guram.toString().equalsIgnoreCase("0.0000"))
		        	{
		        		status="GA";
		        		return status;
		        	}
		        }
			}
			
			logger.info("productCategoryType query : "+productCategoryType.toString());
 			int categoryCount= Integer.parseInt(ConnectionDAO.singleReturn(productCategoryType.toString()));
 			logger.info("categoryCount::::::"+categoryCount);
			logger.info("ReferenceCount Parameter Query : "+referenceCountParaQuery);
		    String referenceCountPara = ConnectionDAO.singleReturn(referenceCountParaQuery);
		    logger.info("ReferenceCount Query : "+referenceCountQuery.toString());
			String referenceCountForCustomer = ConnectionDAO.singleReturn(referenceCountQuery.toString());
			int rcp =0;
			int rcfc =0;
			if(!CommonFunction.checkNull(referenceCountPara).equalsIgnoreCase(""))
				 rcp=Integer.parseInt(referenceCountPara); 
	    	if(!CommonFunction.checkNull(referenceCountForCustomer).equalsIgnoreCase(""))
				 rcfc=Integer.parseInt(referenceCountForCustomer); 
			if((rcp>rcfc) && (categoryCount>0))
			{
				status="CUSTREF";
				return status;
			}
			logger.info("Loan Detail Query: "+q2.toString());
		    boolean loanDetail = ConnectionDAO.checkStatus(q2.toString());
		    if(!loanDetail)
			{
				status="LD";
				return status;
			}
			logger.info("SD Amount Query  :  "+q12.toString());
			sdAmount.append(ConnectionDAO.singleReturn(q12.toString()));
			if(sdAmount!=null && !CommonFunction.checkNull(sdAmount).equalsIgnoreCase("0"))
			{
				if(!CommonFunction.checkNull(sdAmount).equalsIgnoreCase(CommonFunction.checkNull(checkSDAm)))
				{
					logger.info("SD Tenure Query  :  "+q11.toString());
					tenure.append(ConnectionDAO.singleReturn(q11.toString()));
					if(CommonFunction.checkNull(tenure).equalsIgnoreCase(""))
					{
						status="TE";
						return status;
					}
					else
					{
						status="SD";
						return status;
					}				
				}
			}
			logger.info("Asset Detail Query: "+q3.toString());
		    boolean asset = ConnectionDAO.checkStatus(q3.toString());
		    if(!asset)
			{
				StringBuilder prodFlagQ=new StringBuilder();
				prodFlagQ.append("select count(*) from cr_deal_loan_dtl dl,cr_product_m p where dl.DEAL_PRODUCT=p.PRODUCT_ID and p.ASSET_FLAG='N' and DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"'");
				StringBuilder prodFlag=new StringBuilder();
				prodFlag.append(ConnectionDAO.singleReturn(prodFlagQ.toString()));
				logger.info("prodFlagQ: "+prodFlagQ+"status "+prodFlag);
				prodFlagQ=null;
				if(CommonFunction.checkNull(prodFlag).equalsIgnoreCase("0"))
				{
					status="AC";
					return status;
				}								
			}
		    int c1=0;
			int c2=0;
			String query1="select count(1) from cr_deal_loan_dtl l,com_charges_m p where l.DEAL_PRODUCT=p.PRODUCT_ID and l.DEAL_SCHEME=p.scheme_id and DEF_STAGE_ID='DC'  and p.rec_status='A' and l.deal_id="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim();
			logger.info(" Query To find charges defined on product scheme combination or not : "+query1.toString());
			c1 = Integer.parseInt(ConnectionDAO.singleReturn(query1.toString()));
			if(c1==0) 
			{
				String query2="select count(*) from cr_deal_loan_dtl l,com_charges_m p where l.DEAL_PRODUCT=p.PRODUCT_ID  and p.rec_status='A' AND DEF_STAGE_ID='DC' and l.deal_id="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim();
				logger.info(" Query To find charges defined on product  : "+query2.toString());
				c2 = Integer.parseInt(ConnectionDAO.singleReturn(query2.toString()));
			}
 			if(c1 !=0 || c2 != 0)	
			{
 				logger.info("Charge query : "+q4.toString());
 				int charge = Integer.parseInt(ConnectionDAO.singleReturn(q4.toString()));
 				if (charge==0)
 				{
 					status = "CH";
 					return status;
 				}
			}
		    
			ArrayList docs= ConnectionDAO.sqlSelect(q5.toString());
		    if(docs!=null || CommonFunction.checkNull(docs).equals(""))
			{
					int size = docs.size();
					for(int j=0;j<size;j++)
					{
					  ArrayList dataList=(ArrayList)docs.get(j);
					  if(dataList.size()>0)
					  {
						  String docMode=dataList.get(0).toString();
						  if(docMode.equalsIgnoreCase("P")||docMode.equalsIgnoreCase("W"))
						  {
							    status="DC";
								return status;									
						  }								 
					  }
				   }					  
			 }
		    ArrayList docs1= ConnectionDAO.sqlSelect(q9.toString());
		    if(docs1!=null || CommonFunction.checkNull(docs1).equals(""))
			{
					int size = docs1.size();
					for(int j=0;j<size;j++)
					{
					  ArrayList dataList=(ArrayList)docs1.get(j);
					  if(dataList.size()>0)
					  {
						  String docMode=dataList.get(0).toString();
						  if(docMode.equalsIgnoreCase("P")||docMode.equalsIgnoreCase("W"))
						  {
							    status="DC";
								return status;									
						  }								 
					  }
				   }					  
			 }
		     ArrayList docs2= ConnectionDAO.sqlSelect(q10.toString());
		     if(docs2!=null || CommonFunction.checkNull(docs2).equals(""))
			 {
				int size = docs2.size();
				for(int j=0;j<size;j++)
				{
					  ArrayList dataList=(ArrayList)docs2.get(j);
					  if(dataList.size()>0)
					  {
						  String docMode=dataList.get(0).toString();
						  if(docMode.equalsIgnoreCase("P")||docMode.equalsIgnoreCase("W"))
						  {
							    status="DC";
								return status;									
						  }								 
					  }
				   }					  
			 }

		    String dealLoanIdQuery="select DEAL_LOAN_ID from cr_deal_loan_dtl where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim();
		    logger.info("dealLoanIdQuery: "+dealLoanIdQuery.toString());
		    String dealLoanId=ConnectionDAO.singleReturn(dealLoanIdQuery);
		    logger.info("dealLoanId: "+dealLoanId);
		    marginQuery.append("select (");
		    marginQuery.append("isnull(DEAL_ASSET_COST,0)-");
		    marginQuery.append("isnull(DEAL_LOAN_AMOUNT,0)) as 'Margin Amount' from cr_deal_loan_dtl where DEAL_LOAN_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId)).trim()+"'");
		    logger.info("marginQuery: "+marginQuery.toString());
		    String marginAmount=ConnectionDAO.singleReturn(marginQuery.toString());
		    logger.info("marginAmount: "+marginAmount);
		    String query101="select  c.DEAL_CHARGE_FINAL_AMOUNT from cr_deal_txncharges_dtl c where  DEAL_CHARGE_CODE=101 and DEAL_LOAN_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId)).trim()+"'";
		    logger.info("query101: "+query101);
		    String query101Amount=ConnectionDAO.singleReturn(query101);
		    double query101Amt=0;
		    if(!CommonFunction.checkNull(query101Amount).equalsIgnoreCase(""))
		    {
		       query101Amt=Double.parseDouble(query101Amount);
		    }
		    logger.info("query101Amount: "+query101Amount);
		    String query102="select  c.DEAL_CHARGE_FINAL_AMOUNT from cr_deal_txncharges_dtl c where  DEAL_CHARGE_CODE=102 and DEAL_LOAN_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId)).trim()+"'";
		    logger.info("query102: "+query102);
		    String query102Amount=ConnectionDAO.singleReturn(query102);
		    double query102Amt=0;
		    if(!CommonFunction.checkNull(query102Amount).equalsIgnoreCase(""))
		    {
		       query102Amt=Double.parseDouble(query102Amount);
		    }
		    logger.info("query102Amount: "+query102Amount);
		    if(!CommonFunction.checkNull(query101Amount).equalsIgnoreCase("") && !CommonFunction.checkNull(query102Amount).equalsIgnoreCase(""))
		    {
		    	if(!CommonFunction.checkNull(query102Amount).equalsIgnoreCase(CommonFunction.checkNull(query101Amount)))
		    	{
		    		status="bothcharge";
		    		return status;		
		    	}
		    }
		    else if( (query101Amt>0 && !CommonFunction.checkNull(query101Amount).equalsIgnoreCase("")) || (query102Amt>0 && !CommonFunction.checkNull(query102Amount).equalsIgnoreCase("")))
		    {
		    	status="bothNotExist";
		    	return status;		
		    }
		    
		   //Yogesh Start
		    ArrayList list = getAssetLoanDetailAmount(dealId);
			if(list.size()>0)
			{
				ArrayList sublist=(ArrayList)list.get(0);
				String repyType=CommonFunction.checkNull((String)sublist.get(0));
				String astFlag=CommonFunction.checkNull((String)sublist.get(1));
				logger.info("repyType     :    "+repyType);
				logger.info("astFlag      :    "+astFlag);	
		    
		    if(repyType.trim().equalsIgnoreCase("I") && astFlag.trim().equalsIgnoreCase("A"))
			{
		    	StringBuilder noOfAssetLoanQry=new StringBuilder();
		    	noOfAssetLoanQry.append("select NO_OF_ASSET from cr_deal_loan_dtl where deal_id='"+dealId.trim()+"' ");
		    	String noOfAssetLoan=ConnectionDAO.singleReturn(noOfAssetLoanQry.toString());
		    	if(CommonFunction.checkNull(noOfAssetLoan).equalsIgnoreCase(""))
		    		noOfAssetLoan="0";
		    	StringBuilder noOfAssetQry=new StringBuilder();
		    	noOfAssetQry.append("select count(1) from cr_deal_collateral_m a join cr_asset_collateral_m b on(b.ASSET_ID=a.ASSETID) where b.ASSET_TYPE='ASSET'  and a.DEAL_ID="+dealId.trim());
		    	String noOfAsset=ConnectionDAO.singleReturn(noOfAssetQry.toString());
		    	if(CommonFunction.checkNull(noOfAsset).equalsIgnoreCase(""))
		    		noOfAsset="0";
		    	int loanAsstCt=Integer.parseInt(noOfAssetLoan);
		    	int asstCt=Integer.parseInt(noOfAsset);
		    	if(loanAsstCt>asstCt)
		    	{
		    		status="ASSETCT";
		    		return status;
		    	}	    
		    	
				StringBuilder query=new StringBuilder();						
				query.append("select count(1) from cr_deal_collateral_m a join cr_asset_collateral_m b on(b.ASSET_ID=a.ASSETID) where b.ASSET_TYPE='ASSET' and a.DEAL_ID="+dealId.trim());
				logger.info("In execute()  query   :   "+ query.toString());
				String ct=ConnectionDAO.singleReturn(query.toString());
				logger.info("In execute()  count   :   "+ ct);
				//For vehicle starts
				StringBuilder queryV=new StringBuilder();
				queryV.append("select count(1) from cr_deal_collateral_m a join cr_asset_collateral_m b on(b.ASSET_ID=a.ASSETID) where b.ASSET_TYPE='ASSET' and b.ASSET_COLLATERAL_CLASS='VEHICLE' and a.DEAL_ID="+dealId.trim());
				logger.info("In execute() vehicle  query   :   "+ queryV.toString());
				String vehicleCount=ConnectionDAO.singleReturn(queryV.toString());
				int val1=0;
				if(CommonFunction.checkNull(vehicleCount).equalsIgnoreCase(""))
					val1=0;
				else
					val1=Integer.parseInt(vehicleCount);
				//For vehicle end
				int value=0;
				if(ct == null)
					value=0;
				else
					value=Integer.parseInt(ct);
				logger.info("value      :    "+value);
				if(value>0)//this deal have some asset of vichel type
				{
					String astcstLD=(String)sublist.get(2);
					String lnamtLD=(String)sublist.get(3);					
					String astcstAD=(String)sublist.get(4);					
					String lnamtAD=(String)sublist.get(5);							
					double asstcstLD;
					double loanamtLD;
					double asstcstAD;
					double loanamtAD;							
					if(astcstLD ==null)
						asstcstLD=0.0;
					else
						asstcstLD=Double.parseDouble(astcstLD);							
					if(lnamtLD ==null)
						loanamtLD=0.0;
					else
						loanamtLD=Double.parseDouble(lnamtLD);							
					if(astcstAD ==null)
						asstcstAD=0.0;
					else
						asstcstAD=Double.parseDouble(astcstAD);							
					if(lnamtAD ==null)
						loanamtAD=0.0;
					else
						loanamtAD=Double.parseDouble(lnamtAD);
					
					logger.info("asstcstLD    :    "+asstcstLD);
					logger.info("loanamtLD    :    "+loanamtLD);
					logger.info("asstcstAD    :    "+asstcstAD);
					logger.info("loanamtAD    :    "+loanamtAD);
					
					int val=0;
					if(val1 == 0)
					{
						if(asstcstLD != asstcstAD)
							val=1;
					}
					else
					{
						if(asstcstLD != asstcstAD && loanamtLD == loanamtAD)
							val=1;
						if(asstcstLD == asstcstAD && loanamtLD != loanamtAD)
							val=2;
						if(asstcstLD != asstcstAD && loanamtLD != loanamtAD)
							val=3;
					}
					logger.info("val    :    "+val);
					logger.info("val1   :    " + val1);
					if(val>0)
					{
						status=val+"";
						return status;
						//request.setAttribute("astLonError","astLonError");
						//request.setAttribute("val",val);
						//request.setAttribute("asstcstAD",asstcstAD);
						//request.setAttribute("loanamtAD",loanamtAD);
						
					}							
				}		
			}
		}
		   //Yogesh end 
			//Nishant Space starts
			StringBuilder queryToCheckVehicle = new StringBuilder();  
			StringBuilder queryToCheckTotalVehicle = new StringBuilder();
			queryToCheckVehicle.append("select count(1) from cr_deal_collateral_m a join cr_asset_collateral_m b on(b.ASSET_ID=a.ASSETID) ");
			queryToCheckVehicle.append("left join cr_make_model_master c on (b.MAKE_MODEL_ID=c.MAKE_MODEL_ID) left join cr_deal_loan_dtl d on (d.DEAL_ID=a.DEAL_ID) ");
			queryToCheckVehicle.append(" where b.ASSET_COLLATERAL_CLASS='VEHICLE' and a.DEAL_ID="+dealId+" ");
			queryToCheckVehicle.append(" AND c.PRODUCT_ID=d.deal_product AND ((ISNULL(c.SCHEME_ID,'')<>'' and c.SCHEME_ID=d.deal_scheme) OR (ISNULL(c.SCHEME_ID,'')='' and 'a'='a'))");
			
			queryToCheckTotalVehicle.append("select count(1) from cr_deal_collateral_m a join cr_asset_collateral_m b on(b.ASSET_ID=a.ASSETID) ");
			queryToCheckTotalVehicle.append(" where b.ASSET_COLLATERAL_CLASS='VEHICLE' and a.DEAL_ID="+dealId+" ");
			
			String checkVehicleCount = ConnectionDAO.singleReturn(queryToCheckVehicle.toString());
			String checkTotalVehicleCount = ConnectionDAO.singleReturn(queryToCheckTotalVehicle.toString());
			logger.info("checkVehicleCount :: " + checkVehicleCount);
			logger.info("checkTotalVehicleCount :: " + checkTotalVehicleCount);
			if(!CommonFunction.checkNull(checkVehicleCount).equals(checkTotalVehicleCount))
			{
				status="VEHICLECT";
			}
			queryToCheckVehicle=null;
			queryToCheckTotalVehicle=null;
			checkVehicleCount=null;
			checkTotalVehicleCount=null;
			//Nishant Space ends  
		    
		}
		catch (SQLException e) 
		{e.printStackTrace();}
		finally
		{
			q1=null;
			q2=null;
			q3=null;
			q4=null;
			q5=null;
			q7=null;
			q8=null;
			q9=null;
			q10=null;
			q11=null;
			q12=null;
			q13=null;
			q15=null;
			gAddr=null;	
			coAddr=null;
			guram=null;
			tenure=null;
			sdAmount=null;
			checkSDAm=null;
			commAddr=null;
		}
		return status;
	}

	public boolean stageForward(String dealId,String bDate) {

		logger.info("In stageForward.......Update mode "+dealId);
		qryList=new ArrayList();
		StringBuilder query1=new StringBuilder();
		StringBuilder query2=new StringBuilder();
		//StringBuilder query3=new StringBuilder();
		StringBuilder query4=new StringBuilder();
		StringBuilder query5=new StringBuilder();
		StringBuilder query6=new StringBuilder();
		StringBuilder query7=new StringBuilder();
		 query1.append("update cr_deal_dtl set DEAL_FORWARDED_DATE=");
		 //query1.append("DATE_ADD(STR_TO_DATE('"+bDate+"', '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND),");
		 query1.append(dbo);
		 query1.append(" STR_TO_DATE('"+bDate+"','"+dateFormatWithTime+"') +' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9), ");
		 query1.append(" REC_STATUS='F' where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		 logger.info("In.......stageForward...query1"+query1.toString());
		 query2.append("update cr_deal_customer_role set STATUS='F' where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		 logger.info("In.......stageForward...query2"+query2.toString());
		 // query3.append("update cr_deal_buyer_supplier_dtl set REC_STATUS='P' where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		 query4.append("update cr_deal_loan_dtl set REC_STATUS='F' where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		 logger.info("In.......stageForward...query4"+query4.toString());
		 
		 query5.append("update cr_deal_collateral_m set REC_STATUS='F' where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		 logger.info("In.......stageForward...query5"+query5.toString());
		 query6.append("update cr_deal_txncharges_dtl set REC_STATUS='F' where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		 logger.info("In.......stageForward...query6"+query6.toString());
		 query7.append("update cr_document_dtl set REC_STATUS='F' where TXNID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		 logger.info("In.......stageForward...query7"+query7.toString());


        qryList.add(query1);
        qryList.add(query2);
      // qryList.add(query3);
        qryList.add(query4);
        qryList.add(query5);
        qryList.add(query6);
        qryList.add(query7);



		boolean status=false;

		try {
			status = ConnectionDAO.sqlInsUpdDelete(qryList);
			logger.info("In stageForward......................status= "+status);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		finally
		{
			query1=null;
			query2=null;
			//query3=null;
			query4=null;
			query5=null;
			query6=null;
			query7=null;
		}
		return status;
	}
 // Scoring Search by Manisha
	public ArrayList<ScoringVO> scoringSearchGrid(ScoringVO scoringVo) {
		ArrayList list=new ArrayList();
		try
		{
			
			logger.info("Date Format: "+dateFormat);
			ArrayList header=null;
			int count=0;
			int startRecordIndex=0;
			int endRecordIndex = no;

			logger.info("here userid++++++++++++++++++++++++++++++++++++++++++++++++++++++++ "+scoringVo.getReportingToUserId());
			 			String userNameQ="select USER_NAME from sec_user_m where REC_STATUS='A' and USER_ID='"+scoringVo.getReportingToUserId()+"'";
			 			String userName=ConnectionDAO.singleReturn(userNameQ);
			 			logger.info("userNameQ: "+userNameQ+" userName: "+userName);
			 			
			 			userNameQ=null;
			 			
			boolean appendSQL=false;
			StringBuffer bufInsSql=new StringBuffer();
			StringBuffer bufInsSqlTempCount = new StringBuffer();
			StringBuilder dealId=new StringBuilder();
			StringBuilder appNo=new StringBuilder();
			StringBuilder appDate=new StringBuilder();
			StringBuilder custName=new StringBuilder();
			StringBuilder productId=new StringBuilder();
			
			
			 dealId.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getLbxDealNo())).trim()));
			 appNo.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getApplicationno())).trim()));
			 appDate.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getApplicationdate())).trim()));
			 custName.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getCustomerName())).trim()));
			 productId.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getLbxProductID())).trim()));
			
			bufInsSql.append(" select distinct SD.DEAL_ID,D.DEAL_NO,D.DEAL_APPLICATION_FORM_NO,");
			bufInsSql.append(dbo);
			bufInsSql.append("DATE_FORMAT(D.DEAL_DATE,'"+dateFormat+"'),deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,(SELECT USER_NAME FROM SEC_USER_M WHERE USER_ID=SD.MAKER_ID) MAKER_ID from cr_scoring_m SD  ");
			bufInsSql.append(" LEFT JOIN cr_deal_dtl d ON SD.DEAL_ID=d.DEAL_ID ");
			bufInsSql.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID ");
			bufInsSql.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID ");
			bufInsSql.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
			bufInsSql.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID WHERE SD.REC_STATUS='P'");
			
			bufInsSqlTempCount.append(" select  count(1) FROM cr_scoring_m SD ,cr_deal_dtl d , cr_deal_loan_dtl n ,cr_product_m p, cr_deal_customer_m deal,cr_scheme_m s " +
			  		"  where SD.DEAL_ID=d.DEAL_ID and d.DEAL_ID=n.DEAL_ID  and  n.DEAL_SCHEME=s.SCHEME_ID  and " +
			  		" n.DEAL_PRODUCT=p.PRODUCT_ID  and deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID and SD.REC_STATUS='P'") ;
			  	
			 
						
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getLbxDealNo()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getApplicationno())).trim().equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getApplicationdate())).trim().equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getCustomerName()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getLbxProductID()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getLbxscheme()).trim()).equalsIgnoreCase(""))))
			{
		   	  bufInsSql.append(" AND d.MAKER_ID='"+StringEscapeUtils.escapeSql(scoringVo.getReportingToUserId()).trim()+"'  and  d.DEAL_ID='"+StringEscapeUtils.escapeSql(scoringVo.getLbxDealNo()).trim()+"' AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(scoringVo.getApplicationno()).trim()+"' AND ");
		   	  bufInsSql.append(dbo);
		   	  bufInsSql.append("date(d.DEAL_DATE) =");
		   	  bufInsSql.append(dbo);
		   	  bufInsSql.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(scoringVo.getApplicationdate()).trim()+"','"+dateFormat+"') AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(scoringVo.getCustomerName()).trim()+"%' AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(scoringVo.getLbxProductID()).trim()+"'AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(scoringVo.getLbxscheme()).trim()+"'");
		   	  bufInsSqlTempCount.append(" AND d.MAKER_ID='"+StringEscapeUtils.escapeSql(scoringVo.getReportingToUserId()).trim()+"'  and  d.DEAL_ID='"+StringEscapeUtils.escapeSql(scoringVo.getLbxDealNo()).trim()+"' AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(scoringVo.getApplicationno()).trim()+"' AND ");
		   	  bufInsSqlTempCount.append(dbo);
		   	  bufInsSqlTempCount.append("date(d.DEAL_DATE) =");
		   	  bufInsSqlTempCount.append(dbo);
		   	  bufInsSqlTempCount.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(scoringVo.getApplicationdate()).trim()+"','"+dateFormat+"') AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(scoringVo.getCustomerName()).trim()+"%' AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(scoringVo.getLbxProductID()).trim()+"'AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(scoringVo.getLbxscheme()).trim()+"'");
			}
			
			//if(((scoringVo.getLbxDealNo().equalsIgnoreCase("")))||((scoringVo.getApplicationno().equalsIgnoreCase("")))||((scoringVo.getApplicationdate().equalsIgnoreCase("")))||((scoringVo.getCustomerName().equalsIgnoreCase("")))||((scoringVo.getLbxProductID().equalsIgnoreCase("")))||((scoringVo.getLbxscheme().equalsIgnoreCase("")))||((scoringVo.getStage().equalsIgnoreCase("")))){
			//	appendSQL=true;
			//}
		
	
		
		
			 if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getLbxDealNo())).trim().equalsIgnoreCase("")))) {
		        bufInsSql.append(" AND d.DEAL_ID='"+StringEscapeUtils.escapeSql(scoringVo.getLbxDealNo()).trim()+"' ");
		        bufInsSqlTempCount.append(" AND d.DEAL_ID='"+StringEscapeUtils.escapeSql(scoringVo.getLbxDealNo()).trim()+"'");
		   	 appendSQL=true;
		   	  
		     }
			 
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getApplicationno())).trim().equalsIgnoreCase("")))) {
		   	  bufInsSql.append(" AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(scoringVo.getApplicationno()).trim()+"' ");
		   	  bufInsSqlTempCount.append(" AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(scoringVo.getApplicationno()).trim()+"' ");
		   	  appendSQL=true;
		     }
			
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getApplicationdate())).trim().equalsIgnoreCase("")))) {
		   	  bufInsSql.append(" AND ");
		   	  bufInsSql.append(dbo);
		   	  bufInsSql.append("date(d.DEAL_DATE) =");
		   	  bufInsSql.append(dbo);
		   	  bufInsSql.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(scoringVo.getApplicationdate()).trim()+"','"+dateFormat+"') ");
		   	  bufInsSqlTempCount.append(" AND ");
		   	  bufInsSqlTempCount.append(dbo);
		   	  bufInsSqlTempCount.append("date(d.DEAL_DATE) =");
		   	  bufInsSqlTempCount.append(dbo);
		   	  bufInsSqlTempCount.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(scoringVo.getApplicationdate()).trim()+"','"+dateFormat+"')");
		   	  appendSQL=true;
		     }
			
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getCustomerName())).trim().equalsIgnoreCase("")))) {
		   	  bufInsSql.append(" AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(scoringVo.getCustomerName()).trim()+"%'");
		   	  bufInsSqlTempCount.append(" AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(scoringVo.getCustomerName()).trim()+"%'");
		   	  appendSQL=true;
		     }
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getLbxProductID())).trim().equalsIgnoreCase("")))) {
			   	  bufInsSql.append(" AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(scoringVo.getLbxProductID()).trim()+"'  ");
			   	  bufInsSqlTempCount.append(" AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(scoringVo.getLbxProductID()).trim()+"'");
			   	  appendSQL=true;
			     }
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getLbxscheme())).trim().equalsIgnoreCase("")))) {
			   	  bufInsSql.append(" AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(scoringVo.getLbxscheme()).trim()+"' ");
			   	  bufInsSqlTempCount.append(" AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(scoringVo.getLbxscheme()).trim()+"' ");
			   	  appendSQL=true;
			     }
			
			if (((StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getReportingToUserId())).trim().equalsIgnoreCase(""))))
			{
				bufInsSql.append(" and Sd.MAKER_ID='"+StringEscapeUtils.escapeSql(scoringVo.getUserId()).trim()+"' ");	
				bufInsSqlTempCount.append(" and Sd.MAKER_ID='"+StringEscapeUtils.escapeSql(scoringVo.getUserId()).trim()+"'");
//				appendSQL = true;
				logger.debug("Rituuuuuuuuuuu a");				
			}
			else{
				bufInsSql.append(" and Sd.MAKER_ID='"+StringEscapeUtils.escapeSql(scoringVo.getReportingToUserId()).trim()+"' ");	
				bufInsSqlTempCount.append(" and Sd.MAKER_ID='"+StringEscapeUtils.escapeSql(scoringVo.getReportingToUserId()).trim()+"'");
//				appendSQL = true;
				logger.debug("Rituuuuuuuuuuu b");
			    }
			
			
			 count =Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
	 			 logger.info("bufInsSqlTempCount : "+bufInsSqlTempCount.toString());
	 			
	 			if((dealId.toString().trim()==null && appNo.toString().trim()==null && appDate.toString().trim()==null && custName.toString().trim()==null && productId.toString().trim()==null) || (dealId.toString().trim().equalsIgnoreCase("") && appNo.toString().trim().equalsIgnoreCase("") && appDate.toString().trim().equalsIgnoreCase("") && custName.toString().trim().equalsIgnoreCase("") && productId.toString().trim().equalsIgnoreCase("")) || scoringVo.getCurrentPageLink()>1)
	 			{
	 			
	 			 logger.info("current PAge Link no .................... "+scoringVo.getCurrentPageLink());
	 			if(scoringVo.getCurrentPageLink()>1)
	 			{
	 				startRecordIndex = (scoringVo.getCurrentPageLink()-1)*no;
	 				endRecordIndex = no;
	 				 logger.info("startRecordIndex .................... "+startRecordIndex);
	 				 logger.info("endRecordIndex .................... "+endRecordIndex);
	 			}
	 			}	
	 			 logger.info("query : "+bufInsSql.toString());
	 		     header = ConnectionDAO.sqlSelect(bufInsSql.toString());

			for(int i=0;i<header.size();i++){
			//	logger.info("header: "+header.size());
				ArrayList header1=(ArrayList)header.get(i);
				if(header1!=null && header1.size()>0)
				{
					ScoringVO vo = new ScoringVO();
				
					vo.setLbxDealNo("<a href=scoringProcessAction.do?method=savedScoringData&viewMode=&lbxDealNo="+(CommonFunction.checkNull(header1.get(0))).trim()+">"+(CommonFunction.checkNull(header1.get(1)))+"</a>");
				
					vo.setDealNo((CommonFunction.checkNull(header1.get(1))).trim());
					vo.setApplicationno((CommonFunction.checkNull(header1.get(2))).trim());
					vo.setApplicationdate((CommonFunction.checkNull(header1.get(3))).trim());
					vo.setCustomerName((CommonFunction.checkNull(header1.get(4))).trim());
					vo.setProduct((CommonFunction.checkNull(header1.get(5))).trim());
					vo.setScheme((CommonFunction.checkNull(header1.get(6))).trim());
					vo.setReportingToUserId(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(header1.get(7))).trim());
					vo.setTotalRecordSize(count);
					 list.add(vo);
				}
			}
			
			if(header.size()==0)
			{
				fetchVo = new CommonDealVo();
				fetchVo.setTotalRecordSize(count);
				list.add(fetchVo);
				request.setAttribute("flag","yes");
				
			}
			 logger.info("getTotalRecordSize : "+scoringVo.getTotalRecordSize());
			 
			 dealId=null;
			 bufInsSql=null;
			 bufInsSqlTempCount=null;
			 appNo=null;
			 appDate=null;
			 custName=null;
			 productId=null;
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		 logger.info("Detail List when searchList is : "+list);
		
		return list;
	}
      // Scoring List 
	public ArrayList<ScoringVO> getScoringList(ScoringVO scoringVo)
	{

		
	ArrayList<ScoringVO> scoringList=new ArrayList<ScoringVO>();
	try{
		  ArrayList searchlist=new ArrayList();
	logger.info("In searchPaymentData....................");
	StringBuffer bufInsSql =	new StringBuffer();

	bufInsSql.append(" Select SDT.DEAL_ID,D.DEAL_NO,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,n.DEAL_LOAN_AMOUNT,n.DEAL_TENURE,n.DEAL_LOAN_PURPOSE, " +		  
	  		"  SDT.SCORING_PARAM_CODE,SDT.SCORING_PARAM_VALUE,SDT.SCORING_PARAM_SCORE,SDT.SCORING_WEIGHTAGE," +
	  		"  SDT.SCORING_PARAM_RESULT,SD.SCORING_DECISION,SD.REMARKS,SDT.SCORING_ID  " +	
	  		"  from cr_scoring_dtl SDT LEFT JOIN cr_scoring_m SD ON SDT.SCORING_ID=SD.SCORING_ID " +
	  		" LEFT JOIN cr_deal_dtl d ON SD.DEAL_ID=d.DEAL_ID " +
	  		" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID " +
	  		" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID " +
	  		" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID " +
	  	    " left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID " +
	  	    " WHERE SDT.DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getLbxDealNo()).trim())+"'" +
	  	    " and SDT.REC_STATUS='P' ");
	  
	logger.info("In searchPaymentData......... query..........."+bufInsSql.toString());
	     searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());
	    logger.info("getScoringList search Data size is...."+searchlist.size());

	      for(int i=0;i<searchlist.size();i++){
//	logger.info("getScoringList search List "+searchlist.get(i).toString());
	ArrayList data=(ArrayList)searchlist.get(i);

	 if(data.size()>0){
		ScoringVO VO = new ScoringVO();
		  VO.setLbxDealNo((CommonFunction.checkNull(data.get(0)).trim()));
		  VO.setDealNo((CommonFunction.checkNull(data.get(1)).trim()));
		  VO.setCustomerName((CommonFunction.checkNull(data.get(2)).trim()));
		  logger.info(" setCustomerName:-------------"+data.get(2));
		  VO.setDealProduct((CommonFunction.checkNull(data.get(3)).trim()));
		  logger.info("  setDealProduct:-------------"+data.get(3));
		  VO.setDealScheme((CommonFunction.checkNull(data.get(4)).trim()));
		  logger.info("setDealScheme:-------------"+data.get(4));
		 
		  
		  if(!CommonFunction.checkNull(data.get(5)).equalsIgnoreCase(""))
    	  {
    	  Number LoanAmount = myFormatter.parse((CommonFunction.checkNull(data.get(5))).trim());
		  logger.info("LoanAmount: "+LoanAmount);    	 
    	  VO.setLoanAmount(myFormatter.format(LoanAmount));
    	  }
		  VO.setLoanTenure((CommonFunction.checkNull(data.get(6)).trim()));
		  VO.setLoanPurpose((CommonFunction.checkNull(data.get(7)).trim()));
		  VO.setPramName((CommonFunction.checkNull(data.get(8)).trim()));
		  VO.setParamValue((CommonFunction.checkNull(data.get(9)).trim()));
		  VO.setParamScore((CommonFunction.checkNull(data.get(10)).trim()));
		  VO.setParamWeightage((CommonFunction.checkNull(data.get(11)).trim()));
		  logger.info(" setBankAccount:-------------"+data.get(11));
		  VO.setWeightageScore((CommonFunction.checkNull(data.get(12)).trim()));
		  VO.setDecision((CommonFunction.checkNull(data.get(13)).trim()));
		  VO.setRemark((CommonFunction.checkNull(data.get(14)).trim()));
		  VO.setScoringID((CommonFunction.checkNull(data.get(15)).trim()));
		  scoringList.add(VO);	
	 }

	}
	      bufInsSql=null;
	}catch(Exception e){
		e.printStackTrace();
			}
	
	return  scoringList;	
	}
	
	
	public boolean updateOnSaveScore(ScoringVO scoringVo){
		
		StringBuffer sBUpdQry =	new StringBuffer();
		ArrayList<ScoringVO> getDataList=new ArrayList<ScoringVO>();
		PrepStmtObject updatePrepStmtObject = new PrepStmtObject();	
		boolean status=false;
		logger.info("In updateOnSaveScore,,,,,");
		 ArrayList queryList=new ArrayList();
		try{
			  
          
 
             sBUpdQry.append(" UPDATE cr_scoring_m SET SCORING_DECISION =?, ");
             sBUpdQry.append(" REMARKS=? WHERE SCORING_ID=? ");
         

              if((CommonFunction.checkNull(scoringVo.getDecision())).trim().equalsIgnoreCase(""))
					updatePrepStmtObject.addNull();
				else
					updatePrepStmtObject.addString((CommonFunction.checkNull(scoringVo.getDecision()).trim()));
				if((CommonFunction.checkNull(scoringVo.getRemark())).equalsIgnoreCase(""))
    				updatePrepStmtObject.addNull();
				else
					updatePrepStmtObject.addString((CommonFunction.checkNull(scoringVo.getRemark()).trim()));

				//-------------
				if((CommonFunction.checkNull(scoringVo.getUserId()).trim()).equalsIgnoreCase(""))
					updatePrepStmtObject.addNull();
				else
					updatePrepStmtObject.addString((CommonFunction.checkNull(scoringVo.getUserId()).trim()));
				
				if((CommonFunction.checkNull(scoringVo.getBusinessdate()).trim()).equalsIgnoreCase(""))
					updatePrepStmtObject.addNull();
				else
					updatePrepStmtObject.addString((CommonFunction.checkNull(scoringVo.getBusinessdate()).trim()));

				//--------------------
				

				if((CommonFunction.checkNull(scoringVo.getScoringID())).equalsIgnoreCase(""))
				    updatePrepStmtObject.addNull();
				else
					updatePrepStmtObject.addString((CommonFunction.checkNull(scoringVo.getScoringID()).trim()));
		
				

				updatePrepStmtObject.setSql(sBUpdQry.toString());
				
				queryList.add(updatePrepStmtObject);
				logger.info("IN updateOnSaveScore query1 ### "+updatePrepStmtObject.printQuery());
			
				status =ConnectionDAO.sqlInsUpdDeletePrepStmt(queryList);
				logger.info("In updateOnSaveScore....................."+status);
                
     
		
		}catch(Exception e){
			e.printStackTrace();
		}
		finally
		{
			 sBUpdQry =null;
		}

		return status;
	}

	
	
	
	public String getFileInfo(String dealId,String fileName)
	{
		String filePath="";
		try
		{
		logger.info("In getFileInfo..........................DAOImpl");
		StringBuffer query =	new StringBuffer();
		 query.append("select document_path from cr_uploaded_documents where txn_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' and file_name='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(fileName)).trim()+"' AND TXN_TYPE='DC'");
		logger.info("In getFileInfo...............query...........DAOImpl "+query.toString());
		filePath = ConnectionDAO.singleReturn(query.toString()); 
		logger.info("Resultset value====  "+filePath);
		query=null;

	}catch(Exception e){
		e.printStackTrace();
	}
		return filePath;
	}

		public String getFileInfoForCm(String dealId,String fileName)
	{
		String filePath="";
		try
		{
		logger.info("In getFileInfo..........................DAOImpl");
		StringBuffer query =	new StringBuffer();
		 query.append("select document_path from cr_uploaded_documents where txn_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' and file_name='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(fileName)).trim()+"' AND TXN_TYPE='LIM'");
		logger.info("In getFileInfo...............query...........DAOImpl "+query.toString());
		filePath = ConnectionDAO.singleReturn(query.toString()); 
		logger.info("Resultset value====  "+filePath);
		query=null;

	}catch(Exception e){
		e.printStackTrace();
	}
		return filePath;
	}

		public String getFileInfoForCmCp(String dealId,String fileName)
		{
			String filePath="";
			try
			{
			logger.info("In getFileInfo..........................DAOImpl");
			String deaId = ConnectionDAO.singleReturn("select LOAN_DEAL_ID from cr_loan_dtl where LOAN_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"'");
			StringBuffer query =	new StringBuffer();
			 query.append("select document_path from cr_uploaded_documents where txn_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(deaId)).trim()+"' and file_name='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(fileName)).trim()+"' AND TXN_TYPE='DC'");
			logger.info("In getFileInfo...............query...........DAOImpl "+query.toString());
			filePath = ConnectionDAO.singleReturn(query.toString()); 
			logger.info("Resultset value====  "+filePath);
			query=null;

		}catch(Exception e){
			e.printStackTrace();
		}
			return filePath;
		}	



public ArrayList<ApplicantTypeVO> getApplicantList()
{
	ArrayList<ApplicantTypeVO> list=new ArrayList<ApplicantTypeVO>();
	ArrayList applicantList = null;
	ArrayList subList = null;
	try{
		StringBuffer query =	new StringBuffer();
	 query.append("SELECT VALUE,DESCRIPTION FROM generic_master  "
        		+"where GENERIC_KEY='CUST_ROLE' and REC_STATUS='A' order by DESCRIPTION  ");
	applicantList = ConnectionDAO.sqlSelect(query.toString());
	query=null;
	for(int i=0;i<applicantList.size();i++){
		subList=(ArrayList)applicantList.get(i);
		logger.info("In getApplicantList......sublist size: "+subList.size());
		if(subList.size()>0){
			ApplicantTypeVO av=new ApplicantTypeVO();
		    av.setApplicant_code((CommonFunction.checkNull(subList.get(0))).trim());
			av.setApplicant_desc((CommonFunction.checkNull(subList.get(1))).trim());
			list.add(av);
		}

	}
	}catch(Exception e){
		e.printStackTrace();
	}
	return list;
}


public ArrayList<Object> getApplicantDetailAll(String dealId) {
	CreditProcessingCustomerEntryVo appl=new CreditProcessingCustomerEntryVo();
		 ArrayList<Object> list=new ArrayList<Object>();
			try{

				StringBuffer query =	new StringBuffer();
				 query.append("select DEAL_CUSTOMER_ID,DEAL_CUSTOMER_NAME,M.DESCRIPTION,DEAL_CUSTOMER_TYPE,DEAL_EXISTING_CUSTOMER from cr_deal_customer_role S,generic_master M "+
	                "where deal_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' and M.VALUE=S.DEAL_CUSTOMER_ROLE_TYPE");
			logger.info("Query Result: "+query.toString());
			ArrayList appdetails = ConnectionDAO.sqlSelect(query.toString());
    	    logger.info("getApplicantDetailsAll"+appdetails.size());
    	    query=null;
    	    for(int i=0;i<appdetails.size();i++)
    	    {
    	    	logger.info("getApplicantDetailsAll"+appdetails.get(i).toString());
    	    	ArrayList adetails1=(ArrayList)appdetails.get(i);
    	    	if(adetails1.size()>0)
    			{
    	    		appl = new CreditProcessingCustomerEntryVo();

    	    		appl.setCustomerId((CommonFunction.checkNull(adetails1.get(0))).trim());
    	    		appl.setCustomerName((CommonFunction.checkNull(adetails1.get(1))).trim());
    	    		//appl.setCat(adetails1.get(2).toString());
    	    		appl.setApplicantType((CommonFunction.checkNull(adetails1.get(2))).trim());
    	    		//logger.info("Category: "+adetails1.get(3).toString());
    	    		appl.setApplicantCategory((CommonFunction.checkNull(adetails1.get(3))).trim());
    	    		appl.setExistingCustomer((CommonFunction.checkNull(adetails1.get(4))).trim());
    	    		appl.setFlagForUpdate("updateFlag");
    	    		list.add(appl);
    			}
    		}
    		}catch(Exception e){
    			e.printStackTrace();
    		}
    		logger.info("Value of List in dao is="+list);
    		return list;
	}


public int deleteCustomerEntry(String cust_id) {

	logger.info("In delete ......."+cust_id);
        int status=0;
        boolean delStatus = false;
	try{
		StringBuffer query =	new StringBuffer();
		 query.append("delete from cr_deal_customer_role where DEAL_CUSTOMER_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(cust_id)).trim());
		qryList.add(query);
		logger.info("In.......deleteCustomerEntry...query"+query.toString());
		delStatus = ConnectionDAO.sqlInsUpdDelete(qryList);
		logger.info("Deletion Status :"+delStatus);
		
		query=null;
		}catch(Exception e){
			e.printStackTrace();
		}
		if(delStatus)
		{
			status=2;
		}
		return status;
}


public ArrayList<Object> searchApplicant(LinkCustomerVo vo) 
{
	logger.info("In searchApplicant");

	 ArrayList<Object> list=new ArrayList<Object>();
 	ArrayList<Object> deatilList=new ArrayList<Object>();
	 LinkCustomerVo appl=null;
	 
	 StringBuilder tableName=new StringBuilder();
	 String loanNo="";
	 tableName.append("cr_deal_customer_m");
	 if(vo.getLoanNO()!=null)
	 	 loanNo=vo.getLoanNO().trim();
	 
		 if(vo.getLoanNO().equalsIgnoreCase(""))
			 tableName.append("cr_deal_customer_m");			 
		 else
			 tableName.append("gcd_customer_m");
	 
//	 if((vo.getStatus()!=null) && (!vo.getStatus().equalsIgnoreCase("")) && vo.getStatus().equalsIgnoreCase("C"))
//	 {
//		
//		 tableName=new StringBuilder();
//		 tableName.append("cr_deal_customer_m");
//	 }
  try
  {
	   
		boolean appendSQL=false;
		StringBuffer bufInsSql=new StringBuffer();
		if(vo.getLoanNO().equalsIgnoreCase(""))
			bufInsSql.append("select DISTINCT CUSTOMER_ID,CUSTOMER_NAME,CUSTOMER_CONSTITUTION,CUSTOMER_BUSINESS_SEGMENT,iif(CUSTOMER_TYPE='I','INDIVIDUAL','CORPORATE'), "+
					" DEAL_APPLICATION_FORM_NO,loan_no,cr_deal_dtl.DEAL_NO from cr_deal_customer_m "+
					" left join cr_deal_customer_role r on (r.DEAL_CUSTOMER_ID=cr_deal_customer_m.CUSTOMER_ID) "+
					" left outer join cr_deal_dtl on(cr_deal_dtl.DEAL_ID=r.deal_id) "+
					" left outer join cr_loan_dtl on(cr_loan_dtl.LOAN_DEAL_ID=cr_deal_dtl.DEAL_ID) "+
					" left outer join cr_deal_address_m on (r.DEAL_CUSTOMER_ID=cr_deal_address_m.BPID) "+
					" left join cr_deal_collateral_m on (cr_deal_dtl.DEAL_ID=cr_deal_collateral_m.DEAL_ID) and cr_deal_collateral_m.rec_status='A' "+
					" left join cr_asset_collateral_m on (cr_deal_collateral_m.ASSETID=cr_asset_collateral_m.ASSET_ID) where 'a'='a' ");
	else				
		  bufInsSql.append(" select distinct gcd_customer_m.CUSTOMER_ID,cr_deal_customer_m.CUSTOMER_NAME,gcd_customer_m.CUSTOMER_CONSTITUTION,gcd_customer_m.CUSTOMER_BUSINESS_SEGMENT, "+
					" iif(gcd_customer_m.CUSTOMER_TYPE='I','INDIVIDUAL','CORPORATE'),LOAN_REFERENCE_NO,loan_no ,cr_deal_dtl.deal_no  "+
					" from gcd_customer_m   "+
					" left join cr_loan_customer_role  on (cr_loan_customer_role.gcd_id=gcd_customer_m.CUSTOMER_ID)  "+ 
					" left outer join cr_loan_dtl on(cr_loan_dtl.loan_id=cr_loan_customer_role.loan_ID)  "+
					" left outer join cr_deal_dtl on(cr_deal_dtl.DEAL_ID=cr_loan_dtl.loan_deal_id) "  +
					" join cr_deal_customer_m on (cr_deal_customer_m.GCD_CUSTOMER_ID=gcd_customer_m.customer_id) where 'a'='a' "); 
	
		if(!vo.getLbxcustomerId().trim().equalsIgnoreCase(""))
		   bufInsSql.append(" and CUSTOMER_ID='"+StringEscapeUtils.escapeSql(vo.getLbxcustomerId()).trim()+"'");
		if(!vo.getCustomerName().trim().equalsIgnoreCase(""))
			bufInsSql.append(" and CUSTOMER_NAME like '%"+StringEscapeUtils.escapeSql(vo.getCustomerName()).trim()+"%'");
		if(!vo.getPanNo().trim().equalsIgnoreCase(""))
		   	bufInsSql.append(" and CUSTMER_PAN='"+StringEscapeUtils.escapeSql(vo.getPanNo()).trim()+"'");
		if(!vo.getRegistrationNo().trim().equalsIgnoreCase(""))
		   	bufInsSql.append(" and CUSTOMER_REGISTRATION_NO='"+StringEscapeUtils.escapeSql(vo.getRegistrationNo()).trim()+"'");
		if(vo.getLoanNO().equalsIgnoreCase(""))
		{
			if(!vo.getAppFormNo().trim().equalsIgnoreCase(""))
				bufInsSql.append(" and DEAL_APPLICATION_FORM_NO ='"+StringEscapeUtils.escapeSql(vo.getAppFormNo()).trim()+"'");
		}
		else
		{
			if(!vo.getLoanNO().trim().equalsIgnoreCase(""))
				bufInsSql.append(" and cr_loan_customer_role.loan_id  ='"+StringEscapeUtils.escapeSql(vo.getLoanID()).trim()+"'");
			if(!vo.getAppFormNo().trim().equalsIgnoreCase(""))
				bufInsSql.append(" and LOAN_REFERENCE_NO ='"+StringEscapeUtils.escapeSql(vo.getAppFormNo()).trim()+"'");
		}
		//mradul starts here for search
				
		if(!vo.getFatherHusband().trim().equalsIgnoreCase(""))
			   bufInsSql.append(" and FATHER_HUSBAND_NAME like '%"+StringEscapeUtils.escapeSql(vo.getFatherHusband()).trim()+"%'");
		if(!vo.getBirthDate().trim().equalsIgnoreCase(""))
			   bufInsSql.append(" and CUSTOMER_DOB='"+CommonFunction.changeFormat(CommonFunction.checkNull(vo.getBirthDate()).trim())+"' ");
		if(!vo.getMoblieNo().trim().equalsIgnoreCase(""))
			   bufInsSql.append(" and PRIMARY_PHONE='"+StringEscapeUtils.escapeSql(vo.getMoblieNo()).trim()+"'");
		if(!vo.getTelephoneNo().trim().equalsIgnoreCase(""))
			   bufInsSql.append(" and ALTERNATE_PHONE='"+StringEscapeUtils.escapeSql(vo.getTelephoneNo()).trim()+"'");
		if(!vo.getDrivingLicense().trim().equalsIgnoreCase(""))
			   bufInsSql.append(" and DRIVING_LICENSE='"+StringEscapeUtils.escapeSql(vo.getDrivingLicense()).trim()+"'");
		if(!vo.getVehicleNo().trim().equalsIgnoreCase(""))
			   bufInsSql.append(" and VEHICLE_REGISTRATION_NO='"+StringEscapeUtils.escapeSql(vo.getVehicleNo()).trim()+"'");
		
		//mradul ends here for search
	
	 logger.info("searchApplicant() of CreditProcessingDAOImpl Query : "+bufInsSql.toString());
	  deatilList= ConnectionDAO.sqlSelect(bufInsSql.toString()); 
     bufInsSql=null;
     if(deatilList.size()>0){
     for(int i=0;i<deatilList.size();i++){
			logger.info("getApprovalData...FOR loop "+CommonFunction.checkNull(deatilList.get(i)).toString());
			ArrayList data=(ArrayList)deatilList.get(i);
			if(data.size()>0)	{
				appl = new LinkCustomerVo();
				//vo = new HeaderInfoVo();
				appl.setCustomerId((CommonFunction.checkNull(data.get(0))).trim());
				appl.setCustomerName((CommonFunction.checkNull(data.get(1))).trim());
				appl.setConstitution((CommonFunction.checkNull(data.get(2))).trim());
				appl.setBusinessSegment((CommonFunction.checkNull(data.get(3))).trim());
				appl.setCustType((CommonFunction.checkNull(data.get(4))).trim());
				appl.setAppFormNo((CommonFunction.checkNull(data.get(5))).trim());
				appl.setLoanNO((CommonFunction.checkNull(data.get(6))).trim());	
				appl.setDealNO((CommonFunction.checkNull(data.get(7))).trim());
				list.add(appl);
			}
     }
	}
	bufInsSql=null;
  }
  
     catch(Exception e){
		e.printStackTrace();
	}
     finally{
    	 tableName=null;
     }
	
	
	return list;
}




public boolean saveApprovalData(Object ob) {
	
	UnderwriterApprovalVo vo = (UnderwriterApprovalVo)ob;
	boolean status=false;
	logger.info("In saveApprovalData.....................................Dao Impl....111");
	ArrayList qryList = new ArrayList();
	PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
	try{

	logger.info("In insert Approval Data part");
	StringBuffer bufInsSql =	new StringBuffer();
	bufInsSql.append("insert into cr_deal_approval_dtl(deal_id,approval_level,approval_decision,approval_by,approval_date,approval_remarks)");
	bufInsSql.append(" values ( ");
	bufInsSql.append(" ?," ); //deal_id
	bufInsSql.append(" ?," ); //approval_level
	bufInsSql.append(" ?," ); //approval_decision
	bufInsSql.append(" ?," ); //approval_by
	bufInsSql.append(dbo);
	bufInsSql.append("STR_TO_DATE(?,'"+dateFormat+"')," ); //approval_date
	bufInsSql.append(" ? )" ); //approval_remarks

	if((CommonFunction.checkNull(vo.getDealId()).trim()).equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((CommonFunction.checkNull(vo.getDealId()).trim()));

	if((CommonFunction.checkNull(vo.getApprovalLevel()).trim()).equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((CommonFunction.checkNull(vo.getApprovalLevel()).trim()));

	if((CommonFunction.checkNull(vo.getDecision()).trim()).equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((CommonFunction.checkNull(vo.getDecision()).trim()));

	if((CommonFunction.checkNull(vo.getUserName()).trim()).equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((CommonFunction.checkNull(vo.getUserName()).trim()));
	
	if((CommonFunction.checkNull(vo.getMakerDate()).trim()).equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((CommonFunction.checkNull(vo.getMakerDate()).trim()));

	if((CommonFunction.checkNull(vo.getRemarks()).trim()).equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((CommonFunction.checkNull(vo.getRemarks()).trim()));

	insertPrepStmtObject.setSql(bufInsSql.toString());
	logger.info("IN saveApprovalData() insert query1 ### "+insertPrepStmtObject.printQuery());
	qryList.add(insertPrepStmtObject);
	status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
	logger.info("In saveApprovalData......................"+status);
	
	bufInsSql=null;
	}catch(Exception e){
		e.printStackTrace();
	}
return status;
}

public ArrayList getApprovalData(String dealId,String role) {
	ArrayList list=new ArrayList();
	String roleName="";
	try{
		logger.info("In getApprovalData..........................DAOImpl"+dealId);
		
		StringBuilder queryPrim=new StringBuilder();
		 queryPrim.append("select role_name from role_master where role_id='"+role+"'");
		logger.info("In getApprovalData...............queryPrim...........DAOImpl "+queryPrim.toString());
		roleName=ConnectionDAO.singleReturn(queryPrim.toString());

		logger.info("Resultset value==== "+roleName);

		StringBuilder query=new StringBuilder();
		 query.append("select approval_by,approval_level,approval_decision,approval_remarks,");
		 query.append(dbo);
		 query.append("DATE_FORMAT(APPROVAL_DATE,'"+dateFormatWithTime+"'),R.REASON_DESC,(select USER_NAME from SEC_USER_M where USER_ID=approval_by) USER_NAME from cr_deal_approval_dtl A LEFT JOIN com_reason_m R ON R.REASON_ID=A.REASON_ID where deal_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"'");
		logger.info("In getApprovalData...............query...........DAOImpl"+query.toString());
		UnderwriterApprovalVo noteVO=null;
		ArrayList product = ConnectionDAO.sqlSelect(query.toString()); 
		logger.info("getApprovalData "+product.size());
		query=null;
		queryPrim=null;
		
		for(int i=0;i<product.size();i++){
			logger.info("getApprovalData...FOR loop "+CommonFunction.checkNull(product.get(i)).toString());
			ArrayList data=(ArrayList)product.get(i);
			if(data.size()>0)	{
				noteVO = new UnderwriterApprovalVo();
				noteVO.setUserName((CommonFunction.checkNull(data.get(0))).trim()+" - "+(CommonFunction.checkNull(data.get(6))).trim());
				noteVO.setApprovalLevel((CommonFunction.checkNull(data.get(1))).trim());
				if(CommonFunction.checkNull(data.get(2)).equalsIgnoreCase("P"))
				{
					noteVO.setDecision("Send Back");
				}
				else if(CommonFunction.checkNull(data.get(2)).equalsIgnoreCase("A"))
				{
					noteVO.setDecision("Approved");
				}
				else if(CommonFunction.checkNull(data.get(2)).equalsIgnoreCase("X"))
				{
					noteVO.setDecision("Rejected");
				}
				//(CommonFunction.checkNull(data.get(2))).trim());
				noteVO.setRemarks((CommonFunction.checkNull(data.get(3))).trim());
				noteVO.setMakerDate((CommonFunction.checkNull(data.get(4))).trim());
				noteVO.setReasonDesc((CommonFunction.checkNull(data.get(5))).trim());
				list.add(noteVO);
			}
		}
	}
	catch(Exception e){
		e.printStackTrace();
	}
	return list;
}


public String updateApprovalData(Object ob) {
	
	UnderwriterApprovalVo vo = (UnderwriterApprovalVo)ob;
	if(CommonFunction.checkNull(vo.getLbxReason()).equalsIgnoreCase(""))
	{
		vo.setLbxReason("0");
	}
	logger.info("In updateApprovalData......DealId:  "+vo.getDealId()+"UserId:  "+vo.getUserId()+"Approval decision:  "+vo.getDecision()+"Reverse Stage:  "+vo.getReversingStage()+"Reprocessing flag:  "+vo.getRpStageFlag()+" Reason Id: "+vo.getLbxReason());
	CallableStatement cst=null;
	String statusProc="";
	
	int x=0;
	boolean status=false;
	
	Connection con=ConnectionDAO.getConnection();
	try 
	{
		ArrayList<Object> in =new ArrayList<Object>();
		ArrayList<Object> out =new ArrayList<Object>();
		ArrayList outMessages = new ArrayList();
		String s1="";
		String s2="";
		in.add(vo.getDealId());
		in.add(vo.getUserId());
		String date=CommonFunction.changeFormat(vo.getMakerDate());
		in.add(date);
		in.add(vo.getDecision());
		in.add(vo.getReversingStage());
		in.add(vo.getRpStageFlag());
		in.add(vo.getRemarks());
		in.add(vo.getLbxReason());
		out.add(s1);
		out.add(s2);
		
		logger.info("CP_Underwriter_Approval ("+in.toString()+","+out.toString()+")");
		outMessages=(ArrayList) ConnectionDAO.callSP("CP_Underwriter_Approval",in,out);
		s1=CommonFunction.checkNull(outMessages.get(0));
		s2=CommonFunction.checkNull(outMessages.get(1));
	    logger.info("s1  : "+s1);
	    logger.info("s2  : "+s2);	
	    if(s1.equalsIgnoreCase("S"))
		{
			statusProc=s1;
			status=true;
			logger.info("Procedure Error Message----"+s2);
		}
		else
		{
			statusProc=s2;
			logger.info("Procedure Error Message----"+s2);
		}		

	} catch (Exception e)
	{e.printStackTrace();}
	return statusProc;
}


public boolean checkApplicationFormNo(String appNo,String dealId) {

	logger.info("Application Form Number: "+appNo+"dealId: "+dealId);
	StringBuilder q=new StringBuilder();
   if(dealId!=null && !CommonFunction.checkNull(dealId).equalsIgnoreCase(""))
   {
		q.append("select DEAL_APPLICATION_FORM_NO from cr_deal_dtl where DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(appNo)).trim()+"' and deal_Id is not null and rec_status!='X' and deal_Id!="+CommonFunction.checkNull(dealId).trim());
   }
   else
   {
		q.append("select DEAL_APPLICATION_FORM_NO from cr_deal_dtl where DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(appNo)).trim()+"' and deal_Id is not null and rec_status!='X' ");
   }
	boolean status=false;
	logger.info("In........checkApplicationFormNo"+q.toString());
	status=ConnectionDAO.checkStatus(q.toString());
	q=null;
	return status;
}
	
	
	public int moveFromGCD(String customerId,String applType,String dealId,String tableStatus)
	{
		logger.info("In moveFromGCD");
		 boolean status1=false;
		CallableStatement cst=null;
		int statusProc=0;
		StringBuilder q=new StringBuilder();
		if(tableStatus.equalsIgnoreCase("G"))
		{
			 q.append("select GCD_ID from cr_deal_customer_role where GCD_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(customerId)).trim()+" and DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		}
		else if(tableStatus.equalsIgnoreCase("C"))
		{
			 q.append("select GCD_ID from cr_deal_customer_role where DEAL_CUSTOMER_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(customerId)).trim()+" and DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		}
		logger.info("Query: "+q.toString());
        boolean exist=ConnectionDAO.checkStatus(q.toString());
        
        q=null;
	    
        if(exist)
        {
        	statusProc=0;
        }
        else
        {
        	     
		    Connection con=ConnectionDAO.getConnection();
		try {
			cst=con.prepareCall("{call Gcd_Customer_Link(?,?,?,?,?,?)}");
			cst.setString(1, dealId);
			cst.setString(2, customerId);
			cst.setString(3, applType);
			cst.setString(4, tableStatus);
			
			cst.registerOutParameter(5, Types.CHAR);
			cst.registerOutParameter(6, Types.CHAR);
			
			statusProc=cst.executeUpdate();
			
			String s1 = cst.getString(5);
			String s2 = cst.getString(6);
			logger.info("s1: "+s1);
			logger.info("s2: "+s2);
			
			if(s1!=null && s1.equalsIgnoreCase("S"))
			{
				status1=true;
				con.commit();
				logger.info("Procedure Error Message----"+s2);
			}
			else
			{
				con.rollback();
				logger.info("Procedure Error Message----"+s2);
			}
			logger.info("s1: "+s1);
			logger.info("s2: "+s2);
			
			s1=null;
			s2=null;
		} catch (Exception e) {
			try {
				con.rollback();
			} catch (SQLException e1) {
				logger.info("Rollback Gcd_Customer_Link proc( Gcd_Customer_Link )"+e1);
				e1.printStackTrace();
			}
			e.printStackTrace();
		}
		finally
		{
			try {
				//con.commit();
				con.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	
//		}
//	
//		catch(Exception e)
//		{
//			logger.info("Exception In approve: "+e);
//		}
//		finally{
//			try {
//				con.close();
//			} catch (SQLException e) {
//				e.printStackTrace();
//			}
//	
		}
        }
		return statusProc;	
	 }


	public ArrayList getAssets(ExistingAssetVo sh) {
		ArrayList list=new ArrayList();
		try
		{
			ArrayList header=null;
			ExistingAssetVo fetchVo= null;

			logger.info("openType test in DAOImpl : " + sh.getOpenType());
			StringBuffer bufInsSql=new StringBuffer();
			if(CommonFunction.checkNull(sh.getOpenType()).trim().equalsIgnoreCase("D"))
			{
				bufInsSql.append("select DISTINCT b.ASSETID,a.ASSET_TYPE,a.ASSET_COLLATERAL_DESC,a.ASSET_COLLATERAL_CLASS,a.ASSET_COLLATERAL_VALUE from cr_asset_collateral_m a ");
				bufInsSql.append(" join cr_deal_collateral_m b on(b.ASSETID=a.ASSET_ID) left join cr_deal_dtl c on(c.DEAL_ID=b.DEAL_ID) left join cr_deal_customer_m d on (c.DEAL_CUSTOMER_ID=d.CUSTOMER_ID) ");
				bufInsSql.append(" where a.ASSET_TYPE='COLLATERAL' and b.REC_STATUS<>'X' ");
				// and c.DEAL_CUSTOMER_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getApplicantCustId())).trim()+"'");
				if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getLbxDealNo()).trim()).equalsIgnoreCase("")))) 
					bufInsSql.append(" and b.DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getLbxLoanNoHID())).trim()+"'");
				if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getCustomerName()).trim()).equalsIgnoreCase("")))) 
					bufInsSql.append(" and d.CUSTOMER_NAME like '%"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getCustomerName())).trim()+"%'");
				if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getLbxCollateralId()).trim()).equalsIgnoreCase("")))) 
					bufInsSql.append(" and b.ASSETID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getLbxCollateralId())).trim()+"'");
				if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getAssetDesc()).trim()).equalsIgnoreCase("")))) 
					bufInsSql.append(" and a.ASSET_COLLATERAL_DESC LIKE '%"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getAssetDesc())).trim()+"%'");
			}
			else
			{
				bufInsSql.append("select A.ASSETID,D.ASSET_TYPE,D.ASSET_COLLATERAL_DESC,D.ASSET_COLLATERAL_CLASS,D.ASSET_COLLATERAL_VALUE from cr_loan_collateral_m  A,");
				bufInsSql.append(" cr_asset_collateral_m D, cr_loan_dtl L, gcd_customer_m G where L.LOAN_CUSTOMER_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getApplicantCustId())).trim()+"'");
				bufInsSql.append(" and A.REC_STATUS='A' and D.ASSET_ID=A.ASSETID and A.LOAN_ID = L.LOAN_ID and G.CUSTOMER_ID=L.LOAN_CUSTOMER_ID ");
				if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getLbxDealNo()).trim()).equalsIgnoreCase("")))) 
					bufInsSql.append("  and A.LOAN_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getLbxLoanNoHID())).trim()+"'");
				if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getCustomerName()).trim()).equalsIgnoreCase("")))) 
					bufInsSql.append("  and G.CUSTOMER_NAME like '%"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getCustomerName())).trim()+"%'");
				if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getLbxCollateralId()).trim()).equalsIgnoreCase("")))) 
					bufInsSql.append("  and A.ASSETID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getLbxCollateralId())).trim()+"'");
				if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getAssetDesc()).trim()).equalsIgnoreCase("")))) 
					bufInsSql.append("  and D.ASSET_COLLATERAL_DESC LIKE '%"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getAssetDesc())).trim()+"%'");
			}

			logger.info("in getAssets()  :  "+bufInsSql.toString());
			header = ConnectionDAO.sqlSelect(bufInsSql.toString());
			int size=header.size();
			for(int i=0;i<size;i++)
			{
				ArrayList header1=(ArrayList)header.get(i);
				if(header1!=null && header1.size()>0)
				{
					fetchVo = new ExistingAssetVo();
					fetchVo.setLbxCollateralId((CommonFunction.checkNull(header1.get(0))).trim());
					fetchVo.setAssetType((CommonFunction.checkNull(header1.get(1))).trim());
					fetchVo.setAssetDesc((CommonFunction.checkNull(header1.get(2))).trim());
					fetchVo.setAssetClass((CommonFunction.checkNull(header1.get(3))).trim());
					fetchVo.setAssetValue((CommonFunction.checkNull(header1.get(4))).trim());
					list.add(fetchVo);
				}
			}

			
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}

		return list;
	}


	public ArrayList getAssetsAll(String asset) {
		ArrayList list=new ArrayList();
		try{
			StringBuffer query=new StringBuffer();
//		 query.append("SELECT VALUE,DESCRIPTION FROM generic_master  "
//	        +"where GENERIC_KEY='ASSET_CLASS' and REC_STATUS='A'");
			
			query.append("SELECT a.ASSET_COLLATERAL_CLASS,b.DESCRIPTION FROM CR_ASSET_PRODUCT_CATEGORY_M a join generic_master b on a.ASSET_COLLATERAL_CLASS=b.VALUE ");
			query.append("WHERE a.ASSET_TYPE='ASSET'  and a.REC_STATUS='A' and b.GENERIC_KEY='asset_class' ");
		    query.append(" AND a.PRODUCT_CATEGORY='"+CommonFunction.checkNull(asset)+"'");
		   
		logger.info("In creditProcessingDaoI getAssetsAll"+query);
		ArrayList assetAll = ConnectionDAO.sqlSelect(query.toString());
		query=null;
		for(int i=0;i<assetAll.size();i++){

			ArrayList subList=(ArrayList)assetAll.get(i);
			logger.info("In getAssetsAll......sublist size: "+subList.size());
			if(subList.size()>0){
				CodeDescVo av=new CodeDescVo();
				av.setId((CommonFunction.checkNull(subList.get(0))).trim());
				av.setName((CommonFunction.checkNull(subList.get(1))).trim());
				list.add(av);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;

	}


	public ArrayList getCollateralsAll(String coll) {
		
		ArrayList list=new ArrayList();
		try{
			StringBuffer query=new StringBuffer();
			
			query.append("SELECT a.ASSET_COLLATERAL_CLASS,b.DESCRIPTION FROM CR_ASSET_PRODUCT_CATEGORY_M a join generic_master b on a.ASSET_COLLATERAL_CLASS=b.VALUE ");
			query.append("WHERE a.ASSET_TYPE='COLLATERAL'  and a.REC_STATUS='A' and b.GENERIC_KEY='COLLATERAL_CLASS' ");		
			query.append(" AND a.PRODUCT_CATEGORY='"+CommonFunction.checkNull(coll)+"'");		
	
			
			//			query.append("SELECT ASSET_COLLATERAL_CLASS,ASSET_COLLATERAL_DESC FROM CR_ASSET_PRODUCT_CATEGORY_M WHERE ASSET_TYPE='COLLATERAL' AND REC_STATUS='A' AND PRODUCT_CATEGORY='"+coll+"'");	
//		 query.append("SELECT VALUE,DESCRIPTION FROM generic_master  "
//	        +"where GENERIC_KEY='COLLATERAL_CLASS' and REC_STATUS='A'");
		logger.info("In creditProcessingDaoI getCollateralsAll"+query);
		
		ArrayList collateralsAll = ConnectionDAO.sqlSelect(query.toString());
		query=null;
		for(int i=0;i<collateralsAll.size();i++){
			ArrayList sublist = (ArrayList) collateralsAll.get(i);
			if(sublist.size()>0){
				CodeDescVo av=new CodeDescVo();
			    av.setId((CommonFunction.checkNull(sublist.get(0))).trim());
				av.setName((CommonFunction.checkNull(sublist.get(1))).trim());
				list.add(av);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}

	public ArrayList getAssetCollateralDocuments(String entityType,String commonId,String stage, String txnType,String source) {
		ArrayList<Object> list=new ArrayList<Object>();
		try{
			
			String tabName="cr_loan_collateral_m";
			String Commonid="LOAN_ID";
			String docTable="cr_document_dtl";
			String assetTable="cr_asset_collateral_m";
			
			if(CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
			{
				tabName="cr_loan_collateral_m_edit";
				docTable="cr_document_dtl_edit";
				assetTable="cr_asset_collateral_m_edit";
			}			
			if(stage.equalsIgnoreCase("PRS"))
			{
				tabName="cr_deal_collateral_m";
				Commonid="DEAL_ID";
			}
			StringBuilder query=new StringBuilder();
		 query.append(" SELECT DISTINCT TXN_DOC_ID,DOC_ID,DOC_DESC,R.ASSETID,ASSET_COLLATERAL_CLASS, ");
		 query.append(dbo);
		 query.append("DATE_FORMAT(DOC_RECEIVED_DATE,'"+dateFormat+"'),"); 
		 query.append(dbo);
		 query.append("DATE_FORMAT(DOC_DEFFRED_DATE,'"+dateFormat+"'),");
		 query.append(dbo);
		 query.append("DATE_FORMAT(DOC_EXPIRY_DATE,'"+dateFormat+"'), ");
		 query.append("  DOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS,Doc_Expiry_Flag,DOC_CHILD_FLAG,DOC_CHILD_IDS,D.ENTITY_ID,ASSET_COLLATERAL_DESC ");
		 query.append("  from "+docTable+" d, "+tabName+" R,"+assetTable+" A ");
		 query.append(" where DOC_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()+"'and TXNID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()+" and TXN_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()+"' and STAGE_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()+"'");
		 query.append(" AND D.TXNID = R."+StringEscapeUtils.escapeSql(CommonFunction.checkNull(Commonid)).trim()+" ");
		 query.append(" AND D.ENTITY_ID = R.ASSETID ");
		 query.append(" AND R.ASSETID=A.ASSET_ID");
		logger.info("getDocumentsDetail getAssetCollateralDocuments Queryl: "+query.toString());
		DocumentsVo docsVo = null;
		ArrayList docsdeatail = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getDocumentsDetail OUTER ARRAYLIST SIZE: "+docsdeatail.size());
		
		query=null;
		
		for(int i=0;i<docsdeatail.size();i++){

			logger.info("getDocumentsDetail"+docsdeatail.get(i).toString());
			ArrayList docsdeatail1=(ArrayList)docsdeatail.get(i);
			logger.info("getDocumentsDetail INNNER ARRAYLIST SIZE: "+docsdeatail1.size());
			if(docsdeatail1.size()>0)
			{
				docsVo = new DocumentsVo();
				docsVo.setDocId((CommonFunction.checkNull(docsdeatail1.get(0))).trim());
				docsVo.setRealDocId((CommonFunction.checkNull(docsdeatail1.get(1))).trim());
				docsVo.setDocDesc((CommonFunction.checkNull(docsdeatail1.get(2))).trim());
				docsVo.setType((CommonFunction.checkNull(docsdeatail1.get(4))).trim());
				docsVo.setRecieveDate((CommonFunction.checkNull(docsdeatail1.get(5))).trim());
				docsVo.setDeferDate((CommonFunction.checkNull(docsdeatail1.get(6))).trim());
				docsVo.setExpirDate((CommonFunction.checkNull(docsdeatail1.get(7))).trim());

				if((CommonFunction.checkNull(docsdeatail1.get(8)).trim()).equals("Y"))
				{
					docsVo.setMandatory("MANDATORY");
				}
				else 	if((CommonFunction.checkNull(docsdeatail1.get(8)).trim()).equals("N"))
				{
					docsVo.setMandatory("NON-MANDATORY");
				}

				if((CommonFunction.checkNull(docsdeatail1.get(9)).trim()).equals("Y"))
				{
					docsVo.setOriginal("ORIGINAL");
				}
				else if((CommonFunction.checkNull(docsdeatail1.get(9)).trim()).equals("N"))
				{
					docsVo.setOriginal("PHOTOCOPY");
				}

				
				docsVo.setDocStatus((CommonFunction.checkNull(docsdeatail1.get(10))).trim());
				docsVo.setRemark((CommonFunction.checkNull(docsdeatail1.get(11))).trim());
				docsVo.setExpirFlag((CommonFunction.checkNull(docsdeatail1.get(12))).trim());
				docsVo.setDocChildFlag((CommonFunction.checkNull(docsdeatail1.get(13))).trim());
				docsVo.setDocChildId((CommonFunction.checkNull(docsdeatail1.get(14))).trim());
				docsVo.setEntityId((CommonFunction.checkNull(docsdeatail1.get(15))).trim());
				docsVo.setAssetCollateralDesc((CommonFunction.checkNull(docsdeatail1.get(16))).trim());
				list.add(docsVo);
			}
		}
		tabName=null;
		Commonid=null;
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}


	public ArrayList getAllApplicantDocs(String entityType,String commonId,String stage, String txnType,String source) {
		ArrayList<Object> list=new ArrayList<Object>();
		try
		{
			String docTable="cr_document_dtl";
			String custTable="gcd_customer_m";
			String roleTable="CR_LOAN_CUSTOMER_ROLE";
			if(CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
			{
				docTable="cr_document_dtl_edit";
				custTable="gcd_customer_m_edit";
				roleTable="CR_LOAN_CUSTOMER_ROLE_edit";
			}
			StringBuilder query=new StringBuilder();
			
			if(stage.equalsIgnoreCase("PRD")||stage.equalsIgnoreCase("POD"))
			{
				query.append(" SELECT DISTINCT TXN_DOC_ID,DOC_ID,DOC_DESC,g.CUSTOMER_NAME, ");
				query.append(dbo);
				query.append("DATE_FORMAT(DOC_RECEIVED_DATE,'"+dateFormat+"'),"); 
				query.append(dbo);
				query.append("DATE_FORMAT(DOC_DEFFRED_DATE,'"+dateFormat+"'),");
				query.append(dbo);
				query.append("DATE_FORMAT(DOC_EXPIRY_DATE,'"+dateFormat+"'), ");
				query.append("	DOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS,Doc_Expiry_Flag,DOC_CHILD_FLAG,DOC_CHILD_IDS,D.ENTITY_ID ");
				query.append("	from "+docTable+" d, "+custTable+" g, cr_loan_dtl L,"+roleTable+" R ");
				query.append("	where DOC_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()+"'and TXNID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()+" and TXN_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()+"' and STAGE_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()+"'");
				query.append("	AND D.TXNID = L.LOAN_ID "); 
				query.append("	AND D.ENTITY_ID=R.GCD_ID and R.GCD_ID=g.CUSTOMER_ID AND R.LOAN_CUSTOMER_ROLE_TYPE = '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()+"' "); 
	
			}
			else if(stage.equalsIgnoreCase("PRS"))
			{
				query.append(" SELECT DISTINCT TXN_DOC_ID,DOC_ID,DOC_DESC,c.CUSTOMER_NAME, ");
				query.append(dbo);
				query.append("DATE_FORMAT(DOC_RECEIVED_DATE,'"+dateFormat+"'),");
				query.append(dbo);
				query.append("DATE_FORMAT(DOC_DEFFRED_DATE,'"+dateFormat+"'),");
				query.append(dbo);
				query.append("DATE_FORMAT(DOC_EXPIRY_DATE,'"+dateFormat+"'), ");
				query.append("	DOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS,Doc_Expiry_Flag,DOC_CHILD_FLAG,DOC_CHILD_IDS,D.ENTITY_ID ");
				query.append( "	from cr_document_dtl d, CR_DEAL_CUSTOMER_M c, CR_DEAL_CUSTOMER_ROLE r ");
				query.append("	where DOC_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()+"'and TXNID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()+" and TXN_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()+"' and STAGE_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()+"'");
				query.append("	AND D.TXNID = r.DEAL_ID "); 
				query.append("	AND R.DEAL_CUSTOMER_ROLE_TYPE = '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()+"' ");
				query.append("	AND D.ENTITY_ID=r.DEAL_CUSTOMER_ID and r.DEAL_CUSTOMER_ID=c.CUSTOMER_ID"); 
	
			}
		
		logger.info("getDocumentsDetai Queryl: "+query.toString());
		
		DocumentsVo docsVo = null;
		ArrayList docsdeatail = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getDocumentsDetail OUTER ARRAYLIST SIZE: "+docsdeatail.size());
		
		query=null;
		
		for(int i=0;i<docsdeatail.size();i++){

			logger.info("getDocumentsDetail"+docsdeatail.get(i).toString());
			ArrayList docsdeatail1=(ArrayList)docsdeatail.get(i);
			logger.info("getDocumentsDetail INNNER ARRAYLIST SIZE: "+docsdeatail1.size());
			if(docsdeatail1.size()>0)
			{
				docsVo = new DocumentsVo();
				docsVo.setDocId((CommonFunction.checkNull(docsdeatail1.get(0))).trim());
				docsVo.setRealDocId((CommonFunction.checkNull(docsdeatail1.get(1))).trim());
				docsVo.setDocDesc((CommonFunction.checkNull(docsdeatail1.get(2))).trim());
				docsVo.setApplName((CommonFunction.checkNull(docsdeatail1.get(3))).trim());
				docsVo.setRecieveDate((CommonFunction.checkNull(docsdeatail1.get(4))).trim());
				docsVo.setDeferDate((CommonFunction.checkNull(docsdeatail1.get(5))).trim());
				docsVo.setExpirDate((CommonFunction.checkNull(docsdeatail1.get(6))).trim());

				if((CommonFunction.checkNull(docsdeatail1.get(7)).trim()).equals("Y"))
				{
					docsVo.setMandatory("MANDATORY");
				}
				else 	if((CommonFunction.checkNull(docsdeatail1.get(7)).trim()).equals("N"))
				{
					docsVo.setMandatory("NON-MANDATORY");
				}

				if((CommonFunction.checkNull(docsdeatail1.get(8)).trim()).equals("Y"))
				{
					docsVo.setOriginal("ORIGINAL");
				}
				else if((CommonFunction.checkNull(docsdeatail1.get(8)).trim()).equals("N"))
				{
					docsVo.setOriginal("PHOTOCOPY");
				}

				
				docsVo.setDocStatus((CommonFunction.checkNull(docsdeatail1.get(9))).trim());
				docsVo.setRemark((CommonFunction.checkNull(docsdeatail1.get(10))).trim());
				docsVo.setExpirFlag((CommonFunction.checkNull(docsdeatail1.get(11))).trim());
				docsVo.setDocChildFlag((CommonFunction.checkNull(docsdeatail1.get(12))).trim());
				docsVo.setDocChildId((CommonFunction.checkNull(docsdeatail1.get(13))).trim());
				docsVo.setEntityId((CommonFunction.checkNull(docsdeatail1.get(14))).trim());
				list.add(docsVo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}
	
	//start by sachin
	
	public ArrayList getAssetCollateralDealDocuments(String entityType,String commonId,String stage, String txnType) {
		ArrayList<Object> list=new ArrayList<Object>();
		try{
			
			StringBuilder tabName=new StringBuilder();
			StringBuilder Commonid=new StringBuilder();
			
		 if(stage.equalsIgnoreCase("PRS"))
			{
				tabName.append("cr_deal_collateral_m");
				Commonid.append("dEAL_ID");
			}
			StringBuilder query=new StringBuilder();
		 query.append(" SELECT DISTINCT TXN_DOC_ID,DOC_ID,DOC_DESC,R.ASSETID,ASSET_COLLATERAL_CLASS, ");
		 query.append(dbo);
		 query.append("DATE_FORMAT(DOC_RECEIVED_DATE,'"+dateFormat+"'),"); 
		 query.append(dbo);
		 query.append("DATE_FORMAT(DOC_DEFFRED_DATE,'"+dateFormat+"'),");
		 query.append(dbo);
		 query.append("DATE_FORMAT(DOC_EXPIRY_DATE,'"+dateFormat+"'), ");
		 query.append("  DOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS,Doc_Expiry_Flag,DOC_CHILD_FLAG,DOC_CHILD_IDS,D.ENTITY_ID,ASSET_COLLATERAL_DESC ");
		 query.append("  from cr_document_dtl d, "+tabName+" R,cr_asset_collateral_m A ");
		 query.append(" where DOC_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()+"'and TXNID=(select loan_deal_id from cr_loan_dtl where loan_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()+"')  and TXN_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()+"' and STAGE_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()+"'"); 
		 query.append(" AND D.TXNID = R."+StringEscapeUtils.escapeSql(CommonFunction.checkNull(Commonid)).trim()+" ");
		 query.append(" AND D.ENTITY_ID = R.ASSETID "); 
		 query.append(" AND R.ASSETID=A.ASSET_ID");
		logger.info("getDocumentsDetail getAssetCollateralDealDocuments Queryl: "+query.toString());
		DocumentsVo docsVo = null;
		ArrayList docsdeatail = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getDocumentsDealDetail OUTER ARRAYLIST SIZE: "+docsdeatail.size());
		
		query=null;
		
		for(int i=0;i<docsdeatail.size();i++){

			logger.info("getDocumentsDealDetail"+docsdeatail.get(i).toString());
			ArrayList docsdeatail1=(ArrayList)docsdeatail.get(i);
			logger.info("getDocumentsDealDetail INNNER ARRAYLIST SIZE: "+docsdeatail1.size());
			if(docsdeatail1.size()>0)
			{
				docsVo = new DocumentsVo();
				docsVo.setDocId((CommonFunction.checkNull(docsdeatail1.get(0))).trim());
				docsVo.setRealDocId((CommonFunction.checkNull(docsdeatail1.get(1))).trim());
				docsVo.setDocDesc((CommonFunction.checkNull(docsdeatail1.get(2))).trim());
				docsVo.setType((CommonFunction.checkNull(docsdeatail1.get(4))).trim());
				docsVo.setRecieveDate((CommonFunction.checkNull(docsdeatail1.get(5))).trim());
				docsVo.setDeferDate((CommonFunction.checkNull(docsdeatail1.get(6))).trim());
				docsVo.setExpirDate((CommonFunction.checkNull(docsdeatail1.get(7))).trim());

				if((CommonFunction.checkNull(docsdeatail1.get(8)).trim()).equals("Y"))
				{
					docsVo.setMandatory("MANDATORY");
				}
				else 	if((CommonFunction.checkNull(docsdeatail1.get(8)).trim()).equals("N"))
				{
					docsVo.setMandatory("NON-MANDATORY");
				}

				if((CommonFunction.checkNull(docsdeatail1.get(9)).trim()).equals("Y"))
				{
					docsVo.setOriginal("ORIGINAL");
				}
				else if((CommonFunction.checkNull(docsdeatail1.get(9)).trim()).equals("N"))
				{
					docsVo.setOriginal("PHOTOCOPY");
				}

				
				docsVo.setDocStatus((CommonFunction.checkNull(docsdeatail1.get(10))).trim());
				docsVo.setRemark((CommonFunction.checkNull(docsdeatail1.get(11))).trim());
				docsVo.setExpirFlag((CommonFunction.checkNull(docsdeatail1.get(12))).trim());
				docsVo.setDocChildFlag((CommonFunction.checkNull(docsdeatail1.get(13))).trim());
				docsVo.setDocChildId((CommonFunction.checkNull(docsdeatail1.get(14))).trim());
				docsVo.setEntityId((CommonFunction.checkNull(docsdeatail1.get(15))).trim());
				docsVo.setAssetCollateralDesc((CommonFunction.checkNull(docsdeatail1.get(16))).trim());
				list.add(docsVo);
			}
		}
		tabName=null;
		Commonid=null;
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}

	
	public ArrayList getAllApplicantDealDocs(String entityType,String commonId,String stage, String txnType) {
		ArrayList<Object> list=new ArrayList<Object>();
		try{
			StringBuilder query=new StringBuilder();
			
					
			
				query.append(" SELECT DISTINCT TXN_DOC_ID,DOC_ID,DOC_DESC,c.CUSTOMER_NAME, ");
				query.append(dbo);
				query.append("DATE_FORMAT(DOC_RECEIVED_DATE,'"+dateFormat+"'),"); 
				query.append(dbo);
				query.append("DATE_FORMAT(DOC_DEFFRED_DATE,'"+dateFormat+"'),");
				query.append(dbo);
				query.append("DATE_FORMAT(DOC_EXPIRY_DATE,'"+dateFormat+"'), ");
				query.append("	DOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS,Doc_Expiry_Flag,DOC_CHILD_FLAG,DOC_CHILD_IDS,D.ENTITY_ID ");
				query.append("	from cr_document_dtl d, CR_DEAL_CUSTOMER_M c, CR_DEAL_CUSTOMER_ROLE r ");
				query.append("	where DOC_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()+"'and TXNID=(select loan_deal_id from cr_loan_dtl where loan_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()+"') and TXN_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()+"' and STAGE_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()+"'");
				query.append("	AND D.TXNID = r.DEAL_ID "); 
				query.append("	AND R.DEAL_CUSTOMER_ROLE_TYPE = '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()+"' "); 
				query.append("	AND D.ENTITY_ID=r.DEAL_CUSTOMER_ID and r.DEAL_CUSTOMER_ID=c.CUSTOMER_ID"); 
	
			
		
		logger.info("getDocumentsDealDetail Queryl: "+query.toString());
		
		DocumentsVo docsVo = null;
		ArrayList docsdeatail = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getDocumentsDealDetail OUTER ARRAYLIST SIZE: "+docsdeatail.size());
		
		query=null;
		
		for(int i=0;i<docsdeatail.size();i++){

			logger.info("getDocumentsDealDetail"+docsdeatail.get(i).toString());
			ArrayList docsdeatail1=(ArrayList)docsdeatail.get(i);
			logger.info("getDocumentsDealDetail INNNER ARRAYLIST SIZE: "+docsdeatail1.size());
			if(docsdeatail1.size()>0)
			{
				docsVo = new DocumentsVo();
				docsVo.setDocId((CommonFunction.checkNull(docsdeatail1.get(0))).trim());
				docsVo.setRealDocId((CommonFunction.checkNull(docsdeatail1.get(1))).trim());
				docsVo.setDocDesc((CommonFunction.checkNull(docsdeatail1.get(2))).trim());
				docsVo.setApplName((CommonFunction.checkNull(docsdeatail1.get(3))).trim());
				docsVo.setRecieveDate((CommonFunction.checkNull(docsdeatail1.get(4))).trim());
				docsVo.setDeferDate((CommonFunction.checkNull(docsdeatail1.get(5))).trim());
				docsVo.setExpirDate((CommonFunction.checkNull(docsdeatail1.get(6))).trim());

				if((CommonFunction.checkNull(docsdeatail1.get(7)).trim()).equals("Y"))
				{
					docsVo.setMandatory("MANDATORY");
				}
				else 	if((CommonFunction.checkNull(docsdeatail1.get(7)).trim()).equals("N"))
				{
					docsVo.setMandatory("NON-MANDATORY");
				}

				if((CommonFunction.checkNull(docsdeatail1.get(8)).trim()).equals("Y"))
				{
					docsVo.setOriginal("ORIGINAL");
				}
				else if((CommonFunction.checkNull(docsdeatail1.get(8)).trim()).equals("N"))
				{
					docsVo.setOriginal("PHOTOCOPY");
				}

				
				docsVo.setDocStatus((CommonFunction.checkNull(docsdeatail1.get(9))).trim());
				docsVo.setRemark((CommonFunction.checkNull(docsdeatail1.get(10))).trim());
				docsVo.setExpirFlag((CommonFunction.checkNull(docsdeatail1.get(11))).trim());
				docsVo.setDocChildFlag((CommonFunction.checkNull(docsdeatail1.get(12))).trim());
				docsVo.setDocChildId((CommonFunction.checkNull(docsdeatail1.get(13))).trim());
				docsVo.setEntityId((CommonFunction.checkNull(docsdeatail1.get(14))).trim());
				list.add(docsVo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}

	
	public ArrayList getAdditionalDealDocs(String entityType, String commonId, String stage, String txnType)
	{
		ArrayList<Object> list=new ArrayList<Object>();
		try{
			StringBuilder query=new StringBuilder();
			
			query.append(" SELECT DISTINCT DOC_DESC,");
			query.append(dbo);
			query.append("DATE_FORMAT(DOC_RECEIVED_DATE,'"+dateFormat+"'),");
			query.append(dbo);
			query.append("DATE_FORMAT(DOC_DEFFRED_DATE,'"+dateFormat+"'),");
			query.append(dbo);
			query.append("DATE_FORMAT(DOC_EXPIRY_DATE,'"+dateFormat+"'), "); 
			query.append("	DOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS" );
			query.append("	from cr_document_dtl d");
			query.append("	where DOC_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()+"' " );
			query.append("  and TXNID=(select loan_deal_id from cr_loan_dtl where loan_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()+"')" );
			query.append("  and TXN_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()+"' " );
			query.append("  and STAGE_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()+"' " );
		    query.append("  and DOC_ID IS NULL ");
				  
		
		logger.info("getAdditionalDealDocs Query: "+query.toString());
		
		DocumentsVo docsVo = null;
		ArrayList docsdeatail = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getAdditionalDealDocs OUTER ARRAYLIST SIZE: "+docsdeatail.size());
		
		query=null;
		
		for(int i=0;i<docsdeatail.size();i++){

			logger.info("getAdditionalDealDocs"+docsdeatail.get(i).toString());
			ArrayList docsdeatail1=(ArrayList)docsdeatail.get(i);
			logger.info("getAdditionalDealDocs INNNER ARRAYLIST SIZE: "+docsdeatail1.size());
			if(docsdeatail1.size()>0)
			{
				docsVo = new DocumentsVo();
				docsVo.setDocNameAddn(CommonFunction.checkNull(docsdeatail1.get(0)).trim());
				docsVo.setAddnReceivedDate(CommonFunction.checkNull(docsdeatail1.get(1)).trim());
				docsVo.setAddnDeferredDate(CommonFunction.checkNull(docsdeatail1.get(2)).trim());
				docsVo.setAddnExpiryDate(CommonFunction.checkNull(docsdeatail1.get(3)).trim());
				docsVo.setMandateOrNonMandate(CommonFunction.checkNull(docsdeatail1.get(4)).trim());
				docsVo.setOrgOrCopy(CommonFunction.checkNull(docsdeatail1.get(5)).trim());
				docsVo.setAddnDocStatus(CommonFunction.checkNull(docsdeatail1.get(6)).trim());
				docsVo.setAddnRemarks(CommonFunction.checkNull(docsdeatail1.get(7)).trim());
				
				
				list.add(docsVo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}
	

	public ArrayList getApplicationDealDocuments(String entityType,String commonId,String stage, String txnType) {
		ArrayList<Object> list=new ArrayList<Object>();
		try{
			StringBuilder query=new StringBuilder();	
		 query.append("  SELECT TXN_DOC_ID,DOC_ID,DOC_DESC,");
		 query.append(dbo);
		 query.append("DATE_FORMAT(DOC_RECEIVED_DATE,'"+dateFormat+"'),"); 
		 query.append(dbo);
		 query.append("DATE_FORMAT(DOC_DEFFRED_DATE,'"+dateFormat+"'),");
		 query.append(dbo);
		 query.append("DATE_FORMAT(DOC_EXPIRY_DATE,'"+dateFormat+"'), ");
		 query.append("	DOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS,Doc_Expiry_Flag,DOC_CHILD_FLAG,DOC_CHILD_IDS,d.ENTITY_ID ");
		 query.append("	from cr_document_dtl d ");
		 query.append("	where DOC_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()+"'and TXNID=(select loan_deal_id from cr_loan_dtl where loan_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()+"') and TXN_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()+"' and STAGE_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()+"'and ENTITY_ID=(select loan_deal_id from cr_loan_dtl where loan_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()+"')");
		logger.info("getDocumentsDetai Queryl: "+query.toString());
		DocumentsVo docsVo = null;
		ArrayList docsdeatail = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getDocumentsDetail OUTER ARRAYLIST SIZE: "+docsdeatail.size());
		
		
		
		for(int i=0;i<docsdeatail.size();i++){

			logger.info("getDocumentsDetail"+docsdeatail.get(i).toString());
			ArrayList docsdeatail1=(ArrayList)docsdeatail.get(i);
			if(docsdeatail1.size()>0)
			{
				logger.info("getDocumentsDetail INNNER ARRAYLIST SIZE: "+docsdeatail1.size());
				docsVo = new DocumentsVo();
				docsVo.setDocId((CommonFunction.checkNull(docsdeatail1.get(0))).trim());
				docsVo.setRealDocId((CommonFunction.checkNull(docsdeatail1.get(1))).trim());
				docsVo.setDocDesc((CommonFunction.checkNull(docsdeatail1.get(2))).trim());
				docsVo.setRecieveDate((CommonFunction.checkNull(docsdeatail1.get(3))).trim());
				logger.info("recieve date:"+CommonFunction.checkNull(docsdeatail1.get(3)));
				docsVo.setDeferDate((CommonFunction.checkNull(docsdeatail1.get(4))).trim());
				docsVo.setExpirDate((CommonFunction.checkNull(docsdeatail1.get(5))).trim());

				if((CommonFunction.checkNull(docsdeatail1.get(6)).trim()).equals("Y"))
				{
					docsVo.setMandatory("MANDATORY");
				}
				else if((CommonFunction.checkNull(docsdeatail1.get(6)).trim()).equals("N"))
				{
					docsVo.setMandatory("NON-MANDATORY");
				}

				if((CommonFunction.checkNull(docsdeatail1.get(7)).trim()).equals("Y"))
				{
					docsVo.setOriginal("ORIGINAL");
				}
				else if((CommonFunction.checkNull(docsdeatail1.get(7)).trim()).equals("N"))
				{
					docsVo.setOriginal("PHOTOCOPY");
				}

				docsVo.setDocStatus((CommonFunction.checkNull(docsdeatail1.get(8))).trim());
				docsVo.setRemark((CommonFunction.checkNull(docsdeatail1.get(9))).trim());
				docsVo.setExpirFlag((CommonFunction.checkNull(docsdeatail1.get(10))).trim());
				docsVo.setDocChildFlag((CommonFunction.checkNull(docsdeatail1.get(11))).trim());
				docsVo.setDocChildId((CommonFunction.checkNull(docsdeatail1.get(12))).trim());
				docsVo.setEntityId((CommonFunction.checkNull(docsdeatail1.get(13))).trim());
				list.add(docsVo);
			}
			query=null;
		}

		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}
	

	
	//end by sachin
	
    // Function Added by Amit Starts
	
	public ArrayList getAdditionalDocs(String entityType, String commonId, String stage, String txnType,String source)
	{
		ArrayList<Object> list=new ArrayList<Object>();
		try
		{
			String table="cr_document_dtl";
			if(CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
				table="cr_document_dtl_edit";
			
			StringBuilder query=new StringBuilder();
			
			query.append(" SELECT DISTINCT DOC_DESC,");
			query.append(dbo);
			query.append("DATE_FORMAT(DOC_RECEIVED_DATE,'"+dateFormat+"'),");
			query.append(dbo);
			query.append("DATE_FORMAT(DOC_DEFFRED_DATE,'"+dateFormat+"'),");
			query.append(dbo);
			query.append("DATE_FORMAT(DOC_EXPIRY_DATE,'"+dateFormat+"'), ");
			query.append("	DOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS");
			query.append("	from "+table+" d"); 
			query.append("	where DOC_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()+"' " );
			query.append("  and TXNID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()+" " );
			query.append("  and TXN_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()+"' " );
			query.append("  and STAGE_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()+"' " );
			query.append("  and DOC_ID IS NULL "); 
		
		logger.info("getAdditionalDocs Query: "+query.toString());
		
		DocumentsVo docsVo = null;
		ArrayList docsdeatail = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getAdditionalDocs OUTER ARRAYLIST SIZE: "+docsdeatail.size());
		
		query=null;
		
		for(int i=0;i<docsdeatail.size();i++){

			ArrayList docsdeatail1=(ArrayList)docsdeatail.get(i);
			if(docsdeatail1.size()>0)
			{
				docsVo = new DocumentsVo();
				docsVo.setDocNameAddn(CommonFunction.checkNull(docsdeatail1.get(0)).trim());
				docsVo.setAddnReceivedDate(CommonFunction.checkNull(docsdeatail1.get(1)).trim());
				docsVo.setAddnDeferredDate(CommonFunction.checkNull(docsdeatail1.get(2)).trim());
				docsVo.setAddnExpiryDate(CommonFunction.checkNull(docsdeatail1.get(3)).trim());
				docsVo.setMandateOrNonMandate(CommonFunction.checkNull(docsdeatail1.get(4)).trim());
				docsVo.setOrgOrCopy(CommonFunction.checkNull(docsdeatail1.get(5)).trim());
				docsVo.setAddnDocStatus(CommonFunction.checkNull(docsdeatail1.get(6)).trim());
				docsVo.setAddnRemarks(CommonFunction.checkNull(docsdeatail1.get(7)).trim());
				list.add(docsVo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}
	
	//Function Added by Amit Ends

	public ArrayList getchargesDetailInCM(String loanStage, String loanId) {
		
		CallableStatement cst=null;
		int dId=0;
		ArrayList list =new ArrayList();
		Connection con=ConnectionDAO.getConnection();
		try {
			if(!loanId.trim().equalsIgnoreCase(""))
			dId = Integer.parseInt(loanId.trim());
			StringBuilder selectQuery=new StringBuilder();
			 selectQuery.append("select LOAN_CUSTOMER_ID,LOAN_PRODUCT,LOAN_SCHEME,LOAN_LOAN_AMOUNT,LOAN_MARGIN_AMOUNT from cr_loan_dtl where LOAN_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim());
			ArrayList productList=ConnectionDAO.sqlSelect(selectQuery.toString());
			
			selectQuery=null;
			
			StringBuilder supllierIdQ=new StringBuilder();
			StringBuilder suplId=new StringBuilder();
			StringBuilder manfId=new StringBuilder();
			StringBuilder exactManfId=new StringBuilder();
			StringBuilder exactSuplId=new StringBuilder();
			 suplId.append("SU;");
			 manfId.append("MF;");
					
			 supllierIdQ.append("select distinct ASSET_SUPPLIER from cr_loan_collateral_m L,cr_asset_collateral_m a "+ 
								" where L.ASSETID=a.ASSET_ID and a.ASSET_TYPE='ASSET'  and  LOAN_ID="+loanId);
			 
			 logger.info("getchargesDetailInCM supllierIdQ:  "+supllierIdQ.toString());
			
		ArrayList supllierIdList=ConnectionDAO.sqlSelect(supllierIdQ.toString());
		
		supllierIdQ=null;
		if(supllierIdList.size()>0)
		{
			for(int i=0;i<supllierIdList.size();i++)
			  {
				  ArrayList subsupllierIdList=(ArrayList)supllierIdList.get(i);
				  if(subsupllierIdList.size()>0)
				  {
					  suplId.append(CommonFunction.checkNull(subsupllierIdList.get(0))+"|SU;");
				  }
			  }
		}
		 logger.info("In getchargesDetailInCM() ## suplId ## "+suplId);
		 logger.info("In getchargesDetailInCM() ## manfId ##length "+suplId.length());
		
		     logger.info("getchargesDetailInCM appendSQL true----  in check index Of"+suplId.lastIndexOf("SU;") +"------"+(suplId.length()-3));
		     if(suplId.lastIndexOf("SU;") == (suplId.length()-3)){
		     logger.info("getchargesDetailInCM appendSQL true----  in check index Of");
		     exactSuplId.append((suplId).substring(0,(suplId.length()-3)));
		     logger.info("getchargesDetailInCM ...suplId."+exactSuplId);
		     }
	     StringBuilder manufactIdQ=new StringBuilder();
			 manufactIdQ.append("select distinct ASSET_MANUFATURER from cr_loan_collateral_m L,cr_asset_collateral_m a "+ 
			                   " where L.ASSETID=a.ASSET_ID and a.ASSET_TYPE='ASSET'  and  LOAN_ID="+loanId);
			 
			 logger.info("getchargesDetailInCM manufactIdQ:  "+manufactIdQ.toString());
			ArrayList manufactIdList=ConnectionDAO.sqlSelect(manufactIdQ.toString());
			
			manufactIdQ=null;
			
			if(manufactIdList.size()>0)
			{
				for(int i=0;i<manufactIdList.size();i++)
				  {
					  ArrayList submanufactIdList=(ArrayList)manufactIdList.get(i);
					  if(submanufactIdList.size()>0)
					  {
						  manfId.append(CommonFunction.checkNull(submanufactIdList.get(0))+"|MF;");;
						 // manfId=manfId+2+"|MF;";
					 }
				  }
			}
			 logger.info("In getchargesDetailInCM() ## manfId ## "+manfId);
			 logger.info("In getchargesDetailInCM() ## manfId ##length "+manfId.length());
			
			     logger.info("getchargesDetailInCM appendSQL true----  in check index Of"+manfId.lastIndexOf("MF;") +"------"+(manfId.length()-3));
			     if(manfId.lastIndexOf("MF;") == (manfId.length()-3)){
			     logger.info("getchargesDetailInCM appendSQL true----  in check index Of");
			    
			     exactManfId.append((manfId).substring(0,(manfId.length()-3)));
			     logger.info("getchargesDetailInCM ...manfId."+exactManfId);
			     
			     }

		     StringBuilder checkQuery=new StringBuilder();
			 checkQuery.append("select DEAL_CHARGE_DTL_ID from cr_txncharges_dtl where TXN_TYPE='LIM' and TXN_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim());
			boolean status = ConnectionDAO.checkStatus(checkQuery.toString());
			
			checkQuery=null;
		if(!status)
		{
		  for(int i=0;i<productList.size();i++)
		  {
			  ArrayList subproductList=(ArrayList)productList.get(i);
			  if(subproductList.size()>0)
			  {
				          String marginAm="0.00";
						  if(!CommonFunction.checkNull(subproductList.get(4)).equalsIgnoreCase(""))
						  {
							  marginAm=CommonFunction.checkNull(subproductList.get(4));
						  }
				    String chargeStr="2;"+CommonFunction.checkNull(subproductList.get(3))+"|3;"+marginAm+"|";

					String bpStr="CS;"+CommonFunction.checkNull(subproductList.get(0))+"|"+exactSuplId+exactManfId;
					con.setAutoCommit(false);
					logger.info("Loan Id/Deal Id "+dId+" STAGE INFO: "+loanStage+ " Total Charges: "+chargeStr+ " customer Id:  "+CommonFunction.checkNull(subproductList.get(0))+ " Product: "+CommonFunction.checkNull(subproductList.get(1))+ " Scheme: "+CommonFunction.checkNull(subproductList.get(2))+"bpStr: "+bpStr);
					cst=con.prepareCall("{call GET_CHARGES(?,?,?,?,?,?,?,?)}");
					cst.setString(1, loanStage);
					cst.setInt(2, dId);
					cst.setString(3, CommonFunction.checkNull(subproductList.get(1)));
					cst.setString(4, CommonFunction.checkNull(subproductList.get(2)));
					cst.setString(5, chargeStr);
					cst.setString(6, bpStr);
					cst.registerOutParameter(7, Types.CHAR);
					cst.registerOutParameter(8, Types.CHAR);
					cst.executeUpdate();
					String s1= cst.getString(7);
					String s2 = cst.getString(8);
					
					if(s1!=null && s1.equalsIgnoreCase("S"))
					{
						status=true;
						con.commit();
						logger.info("Procedure Error Message----"+s2);
					}
					else
					{
						con.rollback();
						logger.info("Procedure Error Message----"+s2);
					}
					logger.info("s1: "+s1);
					logger.info("s2: "+s2);
					
					s1=null;
					s2=null;
				}
			  }
		  }
		} catch (Exception e) {
					try {
						con.rollback();
					} catch (SQLException e1) {
						logger.info("Rollback collectDocuments proc( GET_CHARGES )"+e1);
						e1.printStackTrace();
					}
					e.printStackTrace();
				}
				finally
				{
					

					try {
						//con.commit();
						if(con!=null)
						con.close();
					} catch (SQLException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
//			  }
//		  }
//		}
//		}
//		catch (Exception e) {
//			try {
//				con.rollback();
//			} catch (SQLException e1) {
//				// TODO Auto-generated catch block
//				e1.printStackTrace();
//			}
//			e.printStackTrace();
//		}
//		finally
//		{
//			try {
//				//con.commit();
//				con.close();
//			} catch (SQLException e) {
//				e.printStackTrace();
//			}
//		}
		try
		{
			con=ConnectionDAO.getConnection();
			ChargeVo vo =null;
			StringBuilder query=new StringBuilder();
			 query.append("select DEAL_CHARGE_DTL_ID,DEAL_CHARGE_TYPE,DEAL_CHARGE_CODE,CHARGE_DESC," );
			 query.append(" GM.DESCRIPTION,v.DEALER_DESC,DEAL_CHARGE_CALCULATED_AMOUNT," );
			 query.append(" DEAL_CHARGE_FINAL_AMOUNT,g.CUSTOMER_NAME,L.LOAN_LOAN_AMOUNT," );
			 query.append(" (");
			 query.append("ISNULL(L.LOAN_ASSET_COST,0)-");
			 query.append("ISNULL(L.LOAN_LOAN_AMOUNT,0)) AS 'MARGIN AMOUNT',DEAL_CHARGE_CALCULATED_ON,case when DEAL_CHARGE_METHOD='P' then 'PERCENTAGE' else 'FLAT' end ," );
			 query.append(" case when DEAL_CHARGE_TAX_INCLUSIVE='N' then 'NO' else 'YES' end ,DEAL_CHARGE_TAX_RATE1," );
			 query.append(" DEAL_CHARGE_TAX_RATE2,DEAL_CHARGE_BP_TYPE,case when DEAL_MIN_CHARGE_METHOD='P' then 'PERCENTAGE' else 'FLAT' end ,DEAL_CHARGE_MIN_CHARGE_AMOUNT,");
			 query.append(" DEAL_CHARGE_TAX_APPLICABLE,DEAL_CHARGE_TDS_APPLICABLE,DEAL_CHARGE_TAX_AMOUNT1,DEAL_CHARGE_TAX_AMOUNT2,DEAL_CHARGE_MIN_CHARGE_AMOUNT,DEAL_CHARGE_TDS_RATE,DEAL_CHARGE_TDS_AMOUNT,DEAL_CHARGE_NET_AMOUNT,DEAL_CHARGE_APPLICATION_STAGE, " );
			 query.append(" (SELECT sum(DEAL_CHARGE_CALCULATED_AMOUNT) from  cr_txncharges_dtl where TXN_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim()+"' and DEAL_CHARGE_BP_TYPE='CS' and DEAL_CHARGE_TYPE='R') as CUST_CHARGE_AMOUNT, ");
			 query.append(" (SELECT sum(DEAL_CHARGE_FINAL_AMOUNT) from  cr_txncharges_dtl where TXN_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim()+"' and DEAL_CHARGE_BP_TYPE='CS' and DEAL_CHARGE_TYPE='R') as CUST_FINAL_CHARGE_AMOUNT ");
			 query.append(" from cr_txncharges_dtl t " );
			 query.append(" left join com_charge_code_m c on t.DEAL_CHARGE_CODE=c.CHARGE_CODE ");
			 query.append(" left join cr_dsa_dealer_m v on v.DEALER_ID=t.DEAL_CHARGE_BP_ID and v.BP_TYPE=t.DEAL_CHARGE_BP_TYPE and v.REC_STATUS='A' " );
			 query.append(" left join gcd_customer_m g on g.CUSTOMER_ID=t.DEAL_CHARGE_BP_ID ");
			 query.append(" left join cr_loan_dtl L on L.LOAN_ID=TXN_ID ");
			 query.append(" left join generic_master GM on GM.VALUE=DEAL_CHARGE_BP_TYPE and GM.GENERIC_KEY='BPTYPE' ");
			 query.append(" where TXN_TYPE='LIM' and TXN_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim());
			logger.info("getchargesDetail query "+query.toString());
			ArrayList charges = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getchargesDetail size "+charges.size());
			query=null;
			for(int i=0;i<charges.size();i++){
				//logger.info("showUnderwritingQueryData...FOR loop "+CommonFunction.checkNull(product.get(i)).toString());
				ArrayList subcharges=(ArrayList)charges.get(i);
				if(subcharges.size()>0)	{
					vo = new ChargeVo();
					vo.setChargeId((CommonFunction.checkNull(subcharges.get(0))).trim());
					if((CommonFunction.checkNull(subcharges.get(1)).trim()).equals("R"))
					{
						vo.setChargeType("Receivable");
					}
					else if((CommonFunction.checkNull(subcharges.get(1)).trim()).equals("P"))
					{
						vo.setChargeType("Payable");
					}
					vo.setChargeCode((CommonFunction.checkNull(subcharges.get(2))).trim());
					vo.setChargeDesc((CommonFunction.checkNull(subcharges.get(3))).trim());
					vo.setChargeBPType((CommonFunction.checkNull(subcharges.get(4)).trim()));
					if((CommonFunction.checkNull(subcharges.get(16)).trim()).equals("CS"))
					{
						
						vo.setChargeBPId((CommonFunction.checkNull(subcharges.get(8))).trim());
					}
					else
					{
						vo.setChargeBPId((CommonFunction.checkNull(subcharges.get(5))).trim());
					}
					logger.info("Name : "+vo.getChargeBPId());
					
					if(!CommonFunction.checkNull(subcharges.get(6)).equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(6))).trim());
	    	    		vo.setChargeCal(myFormatter.format(reconNum));
    	    		}
					if(!CommonFunction.checkNull(subcharges.get(7)).equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(7))).trim());
	    	    		vo.setChargeFinal(myFormatter.format(reconNum));
    	    		}

					
					vo.setLoanAmount((CommonFunction.checkNull(subcharges.get(9))).trim());
					vo.setMarginAmount((CommonFunction.checkNull(subcharges.get(10))).trim());
					vo.setChargeCalculatedOn((CommonFunction.checkNull(subcharges.get(11))).trim());
					vo.setChargeMethod((CommonFunction.checkNull(subcharges.get(12))).trim());
					vo.setTaxsInclusive((CommonFunction.checkNull(subcharges.get(13))).trim());
					if(!CommonFunction.checkNull(subcharges.get(14)).equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(14))).trim());
	    	    		vo.setTaxtRat1(myFormatter.format(reconNum));
    	    		}
					if(!CommonFunction.checkNull(subcharges.get(15)).equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(15))).trim());
	    	    		logger.info("setTaxtRat2: "+reconNum);
	    	    		vo.setTaxtRat2(myFormatter.format(reconNum));
    	    		}
					vo.setMinChargeMethod((CommonFunction.checkNull(subcharges.get(17))).trim());
					vo.setMinChargeCalculatedOn((CommonFunction.checkNull(subcharges.get(18))).trim());
					vo.setDealChargeTaxApp((CommonFunction.checkNull(subcharges.get(19))).trim());
					vo.setDealChargeTdsApp((CommonFunction.checkNull(subcharges.get(20))).trim());
					if(!CommonFunction.checkNull(subcharges.get(21)).equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(21))).trim());
	    	    		vo.setDealChargeTaxAmount1(myFormatter.format(reconNum));
    	    		}
					if(!CommonFunction.checkNull(subcharges.get(22)).equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(22))).trim());
	    	    		//logger.info("setTaxtRat2: "+reconNum);
	    	    		vo.setDealChargeTaxAmount2(myFormatter.format(reconNum));
    	    		}
					
					
					if(!CommonFunction.checkNull(subcharges.get(23)).equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(23))).trim());
	    	    		vo.setDealChargeMinChargeAmount(myFormatter.format(reconNum));
    	    		}
					if(!CommonFunction.checkNull(subcharges.get(24)).equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(24))).trim());
	    	    		//logger.info("setTaxtRat2: "+reconNum);
	    	    		vo.setDealChargeTdsRate(myFormatter.format(reconNum));
    	    		}
					if(!CommonFunction.checkNull(subcharges.get(25)).equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(25))).trim());
	    	    		vo.setDealChargeTdsAmount(myFormatter.format(reconNum));
    	    		}
					if(!CommonFunction.checkNull(subcharges.get(26)).equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(26))).trim());
	    	    		//logger.info("setTaxtRat2: "+reconNum);
	    	    		vo.setDealChargeNetAmount(myFormatter.format(reconNum));
    	    		}
					

					vo.setApplStage((CommonFunction.checkNull(subcharges.get(27))).trim());
					if(!CommonFunction.checkNull(subcharges.get(28)).equalsIgnoreCase(""))
		    		{
		   	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(28))).trim());
		   	    		vo.setCustomerCharge(myFormatter.format(reconNum));
		   	    		
		    		}
					if(!CommonFunction.checkNull(subcharges.get(29)).equalsIgnoreCase(""))
		    		{
		   	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(29))).trim());
		   	    		vo.setCustomerFinalCharge(myFormatter.format(reconNum));
		   	    		
		    		}

					list.add(vo);
		            }
				}
		}
				catch (Exception e) {
			e.printStackTrace();
		}
		finally
		{
			try {
				if(con!=null)
				con.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return list;
	}


	public ArrayList getChildDocs(String docId) {
		ArrayList list=new ArrayList();
		try{
			StringBuilder query=new StringBuilder();
		 query.append("select DOC_CHILD_ID,DOC_DESC from cr_document_child_m  "
	        +"where REC_STATUS='A' and  DOC_ID="+docId);
		logger.info("In creditProcessingDaoI getChildDocs"+query.toString());
		
		ArrayList collateralsAll = ConnectionDAO.sqlSelect(query.toString());
		
		query=null;
		
		for(int i=0;i<collateralsAll.size();i++){
			ArrayList sublist = (ArrayList) collateralsAll.get(i);
			if(sublist.size()>0){
				CodeDescVo av=new CodeDescVo();
			    av.setId((CommonFunction.checkNull(sublist.get(0))).trim());
				av.setName((CommonFunction.checkNull(sublist.get(1))).trim());
				list.add(av);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	 }


//avinash code start 
	
	public ArrayList<ConsumerVo> getCibilData(Object ob) {
		ArrayList list=new ArrayList();
		ConsumerVo vo =(ConsumerVo)ob;
		try{
			StringBuilder query=new StringBuilder();
		 query.append("SELECT CIBIL_ID,CONSUMER_NAME,");
		 query.append(dbo);
		 query.append("DATE_FORMAT(DEAL_DATE,'"+dateFormatWithTime+"'),CIBIL_SCORE,TOTAL_ACCOUNTS,TOTAL_OVERDUE_ACCOUNTS,HIGHER_SANCTION_AMOUNT,CURRENT_BALANCE,OVERDUE_BALANCE,NO_OF_ENQUIRIES,case when DECISION='A' then 'Approved' else 'Rejected' end as DECISION,COMMENT from cr_cibil_dtl where  DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getDealId().trim())+"'");
		logger.info("getDATA:Query "+query.toString());
		
		ArrayList list1 = ConnectionDAO.sqlSelect(query.toString());
		query=null;
		
		logger.info("getList"+list1.size());
		for(int i=0;i<list1.size();i++){

			logger.info("getList"+list1.get(i).toString());
			ArrayList list2=(ArrayList)list1.get(i);
			if(list2.size()>0)
			{
				vo = new ConsumerVo();
				vo.setCivilId((CommonFunction.checkNull(list2.get(0))));
				vo.setConsumername((CommonFunction.checkNull(list2.get(1))));
				vo.setDateandtime((CommonFunction.checkNull(list2.get(2)).toString()));
				vo.setCibilCodes((CommonFunction.checkNull(list2.get(3)).toString()));
	        	vo.setTotalAc(CommonFunction.checkNull(list2.get(4)).toString());
	    
				vo.setTotalOverdueac(CommonFunction.checkNull(list2.get(5)).toString());
				
		    	
	        	if(!CommonFunction.checkNull(list2.get(6)).equalsIgnoreCase(""))
	    		{
	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(list2.get(6))).trim());
	    		vo.setHigherSanctionAmount(myFormatter.format(reconNum));
	    		}
			
	         	if(!CommonFunction.checkNull(list2.get(7)).equalsIgnoreCase(""))
	    		{
	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(list2.get(7))).trim());
	    		vo.setCurrentBalance(myFormatter.format(reconNum));
	    		}
	         	
	         	if(!CommonFunction.checkNull(list2.get(8)).equalsIgnoreCase(""))
	    		{
	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(list2.get(8))).trim());
	    		vo.setOverDue(myFormatter.format(reconNum));
	    		}
				
				vo.setNoofEnquiry(CommonFunction.checkNull(list2.get(9)).toString());
				vo.setDecison(CommonFunction.checkNull(list2.get(10)).toString());
				vo.setComment(CommonFunction.checkNull(list2.get(11)).toString());		
					
				list.add(vo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}

	public int saveCibilData(Object ob) {
		
		boolean status=false;
		int maxId=0;
		ConsumerVo vo =(ConsumerVo)ob;
		
		String name=vo.getConsumername();
		String dateTime = CommonFunction.checkNull(vo.getLeadDate())+" "+CommonFunction.checkNull(vo.getLeadTime());
		logger.info("name......................."+name);
		logger.info("In SaveCibildata.....................................CreditProcessing Impl");
		ArrayList qryList = new ArrayList();
		PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
		String stat="X";
		//String query="select CONSUMER_NAME,DATE_FORMAT(DEAL_DATE,'%d-%m-%Y %H:%i'),CIBIL_SCORE,TOTAL_ACCOUNTS,TOTAL_OVERDUE_ACCOUNTS,HIGHER_SANCTION_AMOUNT,CURRENT_BALANCE,OVERDUE_BALANCE,NO_OF_ENQUIRIES,if(DECISION='Y','Approve','Reject')AS DECISION,COMMENT from cr_cibil_dtl where  CUSTOMER_NAME='"+StringEscapeUtils.escapeSql(vo.getConsumername().trim())+"'";
		//logger.info("In .....................................Dao Impl"+query);
		//boolean st=ConnectionDAO.checkStatus(query);
		

		//if(!st)
		//{		

		try{
			
			logger.info("In insert ");
			StringBuffer bufInsSql =new StringBuffer();
			bufInsSql.append("insert into cr_cibil_dtl(DEAL_ID,CONSUMER_NAME,DEAL_DATE,CIBIL_SCORE,TOTAL_ACCOUNTS,TOTAL_OVERDUE_ACCOUNTS,HIGHER_SANCTION_AMOUNT,CURRENT_BALANCE,OVERDUE_BALANCE,NO_OF_ENQUIRIES,DECISION,COMMENT)");
			bufInsSql.append(" values ( ");
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(dbo);
			bufInsSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ?," );
			bufInsSql.append(" ? )" );
			  logger.info("In....saveCibilData....bufInsSql"+bufInsSql.toString());
			if(CommonFunction.checkNull(vo.getDealId()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(vo.getDealId().trim())));

			
			if(CommonFunction.checkNull(vo.getConsumername()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(vo.getConsumername().trim())));

			if(CommonFunction.checkNull(dateTime).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(dateTime.trim())));

			
			if(CommonFunction.checkNull(vo.getCibilCodes()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(vo.getCibilCodes().trim())));
			
			if(CommonFunction.checkNull(vo.getTotalAc()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(vo.getTotalAc().trim())));

			if(CommonFunction.checkNull(vo.getTotalOverdueac()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(vo.getTotalOverdueac().trim())));
			
			
			 if(CommonFunction.checkNull((vo.getHigherSanctionAmount()).trim()).equalsIgnoreCase(""))
				  insertPrepStmtObject.addNull();
				  else
				  insertPrepStmtObject.addString(myFormatter.parse((vo.getHigherSanctionAmount().trim())).toString());


			 if(CommonFunction.checkNull((vo.getCurrentBalance()).trim()).equalsIgnoreCase(""))
				  insertPrepStmtObject.addNull();
				  else
				  insertPrepStmtObject.addString(myFormatter.parse((vo.getCurrentBalance().trim())).toString());	
			
			
			 if(CommonFunction.checkNull((vo.getOverDue()).trim()).equalsIgnoreCase(""))
				  insertPrepStmtObject.addNull();
				  else
				  insertPrepStmtObject.addString(myFormatter.parse((vo.getOverDue().trim())).toString());
			
						
			if(CommonFunction.checkNull(vo.getNoofEnquiry()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(vo.getNoofEnquiry().trim())));
			
					
			if(CommonFunction.checkNull(vo.getDecison()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(vo.getDecison().trim())));
			if(CommonFunction.checkNull(vo.getComment()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(vo.getComment().trim())));

			insertPrepStmtObject.setSql(bufInsSql.toString());
			qryList.add(insertPrepStmtObject);
			status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			if(status && (vo.getDecison().trim().equalsIgnoreCase("A")))
			{				
                StringBuilder checkStageM=new StringBuilder();
				logger.info("Company Id: "+vo.getCompanyId()+" dealId: "+vo.getDealId());
				checkStageM.append(CommonFunction.stageMovement(vo.getCompanyId(), "DC","F",vo.getDealId(), "CBL", vo.getMakerDate(),vo.getUserName()));
				logger.info("checkStageM : "+checkStageM);				
				
			}
			
			 String maxIdQuery="Select distinct max(CIBIL_ID) from cr_cibil_dtl  WITH (ROWLOCK) ";
			    
			  logger.info("In....saveCibilData."+maxIdQuery.toString());
			   String id=ConnectionDAO.singleReturn(maxIdQuery);
			   maxId=Integer.parseInt(id.toString());
			   logger.info("maxId : "+maxId);
			
			logger.info("In saveCibilData......................"+status);
			
			bufInsSql=null;
		
		}catch(Exception e){
			e.printStackTrace();
		}
		finally
		{
			name=null;
			dateTime=null;
		}
		//}
		return maxId;

	}
	
	public boolean deleteCibilEntry(String[] s1,String dealId){

		 ArrayList qrylist = new ArrayList();
	        boolean delStatus = false;
		try{
			for(int i=0;i<s1.length;i++)
			{
				StringBuilder query=new StringBuilder();
				StringBuilder query2=new StringBuilder();
				query.append("delete from cr_cibil_dtl where CIBIL_ID='"+s1[i]+"'");
				logger.info("query "+query.toString());
				query2.append("delete from cr_uploaded_documents where txn_id='"+s1[i]+"' and txn_type='CBL'");
				logger.info("query2 "+query2.toString());
				qrylist.add(query);
				qrylist.add(query2);
				query=null;
				query2=null;
				uploadedCibilDocsDelete(dealId,s1[i]);
		
			}
		
			 delStatus = ConnectionDAO.sqlInsUpdDelete(qrylist);
			 
			logger.info("Deletion Status :"+delStatus);
			}catch(Exception e){
				e.printStackTrace();
			}
			 
			return delStatus;
	}

	
//avinash code end	

//Neeraj code start
public String callRefreshChargesDetailPro(String dealCap, String dealId)
{
	String message="";
	boolean status=false;
	int dId = Integer.parseInt(dealId);
	StringBuilder custIdQ=new StringBuilder();
	 custIdQ.append("select DEAL_CUSTOMER_ID from cr_deal_dtl where DEAL_ID="+dealId);
	logger.info("callRefreshChargesDetailPro in deal custIdQ: "+custIdQ);
	StringBuilder suplId=new StringBuilder();
	StringBuilder manfId=new StringBuilder();
	StringBuilder custId=new StringBuilder();
	StringBuilder exactManfId=new StringBuilder();
	StringBuilder exactSuplId=new StringBuilder();
	 suplId.append("SU;");
	 manfId.append("MF;");
	 logger.info("In....callRefreshChargesDetailPro in deal customerId: "+custIdQ.toString());	
	 custId.append(ConnectionDAO.singleReturn(custIdQ.toString()));
	logger.info("callRefreshChargesDetailPro in deal customerId: "+custId);	
	StringBuilder supllierIdQ=new StringBuilder();
	 supllierIdQ.append("select distinct ASSET_SUPPLIER from cr_deal_collateral_m d,cr_asset_collateral_m a "+ 
						" where d.ASSETID=a.ASSET_ID and a.ASSET_TYPE='ASSET'  and  DEAL_ID="+dealId);
	 
	 logger.info("callRefreshChargesDetailPro in deal supllierIdQ : "+supllierIdQ.toString());	
	ArrayList supllierIdList=null;
	
	StringBuilder manufactIdQ=new StringBuilder();
	ArrayList manufactIdList=null;
	ArrayList productList=null;
	logger.info("supllierIdQ: "+supllierIdQ.toString());
	try
	{
			supllierIdList=ConnectionDAO.sqlSelect(supllierIdQ.toString());
			if(supllierIdList.size()>0)
			{
				for(int i=0;i<supllierIdList.size();i++)
				{
					ArrayList subsupllierIdList=(ArrayList)supllierIdList.get(i);
					if(subsupllierIdList.size()>0)
					  suplId.append(CommonFunction.checkNull(subsupllierIdList.get(0))+"|SU;");
				}
			}
			logger.info("callRefreshChargesDetailPro in deal ## suplId ## "+suplId);
			logger.info("callRefreshChargesDetailPro in deal appendSQL true----  in check index Of"+suplId.lastIndexOf("SU;") +"------"+(suplId.length()-3));
			if(suplId.toString().lastIndexOf("SU;") == (suplId.toString().length()-3))
			{
				logger.info("callRefreshChargesDetailPro in deal appendSQL true----  in check index Of");
				exactSuplId.append((suplId).substring(0,(suplId.length()-3)));
				logger.info("callRefreshChargesDetailPro in deal ...exactSuplId."+exactSuplId);
			}
			manufactIdQ.append("select distinct ASSET_MANUFATURER from cr_deal_collateral_m d,cr_asset_collateral_m a "+ 
		                  " where d.ASSETID=a.ASSET_ID and a.ASSET_TYPE='ASSET'  and  DEAL_ID="+dealId);
			
			 logger.info("callRefreshChargesDetailPro in deal manufactIdQ : "+manufactIdQ.toString());	
			manufactIdList=ConnectionDAO.sqlSelect(manufactIdQ.toString());
			if(manufactIdList.size()>0)
			{
				for(int i=0;i<manufactIdList.size();i++)
				{
					ArrayList submanufactIdList=(ArrayList)manufactIdList.get(i);
					if(submanufactIdList.size()>0)
						manfId.append(CommonFunction.checkNull(submanufactIdList.get(0))+"|MF;");;
				}
			}
			logger.info("callRefreshChargesDetailPro in deal ## manfId ## "+manfId);
			logger.info("callRefreshChargesDetailPro in deal appendSQL true----  in check index Of"+manfId.lastIndexOf("MF;") +"------"+(manfId.length()-3));
			if(manfId.lastIndexOf("MF;") == (manfId.length()-3))
			{
				logger.info("callRefreshChargesDetailPro in deal appendSQL true----  in check index Of");
				exactManfId.append((manfId).substring(0,(manfId.length()-3)));
				logger.info("callRefreshChargesDetailPro in deal ...exactManfId."+exactManfId);
			}
			
			StringBuilder productQuery=new StringBuilder();
			 productQuery.append("select DEAL_PRODUCT,DEAL_SCHEME,DEAL_LOAN_AMOUNT,DEAL_MARGIN_AMOUNT,DEAL_LOAN_ID from cr_deal_loan_dtl where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
			logger.info("callRefreshChargesDetailPro in deal productQuery: "+productQuery.toString());
			productList=ConnectionDAO.sqlSelect(productQuery.toString());
			logger.info("callRefreshChargesDetailPro in deal productQuery: "+productList);
			productQuery=null;
			
			for(int i=0;i<productList.size();i++)
			{
				ArrayList subproductList=(ArrayList)productList.get(i);
				if(subproductList.size()>0)
				{
					StringBuffer chargeStr=new StringBuffer();
					if(!CommonFunction.checkNull(subproductList.get(2)).equalsIgnoreCase(""))
						chargeStr.append("2;"+subproductList.get(2)+"|");
					if(!CommonFunction.checkNull(subproductList.get(3)).equalsIgnoreCase(""))
						chargeStr.append("3;"+CommonFunction.checkNull(subproductList.get(3))+"|");
					String bpStr="CS;"+custId+"|"+exactSuplId+exactManfId;
					String dealLoanId=CommonFunction.checkNull(subproductList.get(4));
					int loanDId=0;
					if(!dealLoanId.equalsIgnoreCase(""))
						loanDId=Integer.parseInt(dealLoanId);
					ArrayList<Object> in =new ArrayList<Object>();
					ArrayList<Object> out =new ArrayList<Object>();
					ArrayList outMessages = new ArrayList();
					StringBuilder s1=new StringBuilder();
					StringBuilder s2=new StringBuilder();
					try 
					{		
						in.add(dealCap);
						in.add(loanDId);
						in.add(CommonFunction.checkNull(subproductList.get(0)).toString());
						in.add(CommonFunction.checkNull(subproductList.get(1)).toString());
						in.add(chargeStr.toString());
						in.add(bpStr);
						out.add(s1);
						out.add(s2);
						logger.info(" STAGE INFO: "+dealCap+"DealLoanId from crdealLoandtl: "+loanDId+ " Total Charges: "+chargeStr+ " customer Id:  "+bpStr+ " Product: "+subproductList.get(0)+ " Scheme: "+subproductList.get(1));
						logger.info("callRefreshChargesDetailPro in GET_CHARGES deal in deal capturing");
						outMessages=(ArrayList) ConnectionDAO.callSP("GET_CHARGES",in,out);
						if(outMessages!=null && outMessages.size()>0)
						{
							s1.append(CommonFunction.checkNull(outMessages.get(0)));							
							if(s1!=null && s1.toString().equalsIgnoreCase("S"))
							{
								message=s1.toString();
								logger.info("GET_CHARGES Procedure s1----"+s1);
							}
							else if(s1!=null && s1.toString().equalsIgnoreCase("E"))
							{
								s2.append(CommonFunction.checkNull(outMessages.get(1)));
								logger.info("GET_CHARGES Procedure Error Message----"+s2);
								message=s2.toString();
							}					
						}		
					} 
					catch (Exception e) 
					{e.printStackTrace();}
					finally
					{
						s1=null;
						s2=null;
						in=null;
						out=null;
						outMessages=null;	
						chargeStr=null;
						bpStr=null;
						dealLoanId=null;
						exactManfId=null;
						exactSuplId=null;

					}
				}
			}
		}
		catch (Exception e) 
		{e.printStackTrace();}
		finally
		{
			custIdQ=null;
			suplId=null;
			manfId=null;
			custId=null;
			supllierIdQ=null;
			supllierIdList=null;
			manufactIdQ=null;
			manufactIdList=null;
			productList=null;			
		}
		return message;
}

public ArrayList refreshchargesDetail(String dealCap,String dealId) 
{
	
	ArrayList list =new ArrayList();
	ChargeVo vo =null;
	StringBuilder query=new StringBuilder();
	ArrayList charges=null;
	ArrayList subcharges=null;
	try
	{
		query.append("select DEAL_CHARGE_DTL_ID,DEAL_CHARGE_TYPE,DEAL_CHARGE_CODE,CHARGE_DESC," );
		query.append(" GM.DESCRIPTION,v.DEALER_DESC,DEAL_CHARGE_CALCULATED_AMOUNT," );
		query.append(" DEAL_CHARGE_FINAL_AMOUNT,d.CUSTOMER_NAME,p.DEAL_LOAN_AMOUNT,(");
		query.append("ISNULL(P.DEAL_ASSET_COST,0)-");
		query.append("ISNULL(P.DEAL_LOAN_AMOUNT,0)) AS 'MARGIN AMOUNT'," );
		query.append(" DEAL_CHARGE_CALCULATED_ON,case when DEAL_CHARGE_METHOD='P' then 'PERCENTAGE' else 'FLAT' end,case when DEAL_CHARGE_TAX_INCLUSIVE='N' then 'NO' else 'YES' end," );
		query.append(" DEAL_CHARGE_TAX_RATE1,DEAL_CHARGE_TAX_RATE2,DEAL_CHARGE_BP_TYPE,case when DEAL_MIN_CHARGE_METHOD='P' then 'PERCENTAGE' else 'FLAT' end,DEAL_CHARGE_MIN_CHARGE_AMOUNT, " );
		query.append(" DEAL_CHARGE_TAX_APPLICABLE,DEAL_CHARGE_TDS_APPLICABLE,DEAL_CHARGE_TAX_AMOUNT1,DEAL_CHARGE_TAX_AMOUNT2,DEAL_CHARGE_MIN_CHARGE_AMOUNT,DEAL_CHARGE_TDS_RATE,DEAL_CHARGE_TDS_AMOUNT,DEAL_CHARGE_NET_AMOUNT,DEAL_CHARGE_APPLICATION_STAGE, " );
		query.append(" (SELECT sum(DEAL_CHARGE_CALCULATED_AMOUNT) from  CR_DEAL_TXNCHARGES_DTL where DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' and DEAL_CHARGE_BP_TYPE='CS' and DEAL_CHARGE_TYPE='R') as CUST_CHARGE_AMOUNT, ");
		query.append(" (SELECT sum(DEAL_CHARGE_FINAL_AMOUNT) from  CR_DEAL_TXNCHARGES_DTL where DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' and DEAL_CHARGE_BP_TYPE='CS' and DEAL_CHARGE_TYPE='R') as CUST_FINAL_CHARGE_AMOUNT ");
		query.append(" from cr_deal_txncharges_dtl t " );
		query.append(" left join com_charge_code_m c on t.DEAL_CHARGE_CODE=c.CHARGE_CODE " );
		query.append(" left join cr_dsa_dealer_m v on v.DEALER_ID=t.DEAL_CHARGE_BP_ID and v.BP_TYPE=t.DEAL_CHARGE_BP_TYPE and v.REC_STATUS='A' " );
		query.append(" left join cr_deal_customer_m d on d.CUSTOMER_ID=t.DEAL_CHARGE_BP_ID ");
		query.append(" left join cr_deal_loan_dtl p on p.DEAL_ID=t.DEAL_ID  ");
		query.append(" left join generic_master GM on GM.VALUE=DEAL_CHARGE_BP_TYPE and GM.GENERIC_KEY='BPTYPE' ");
		query.append(" where t.DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		logger.info("refreshchargesDetail for getting charges in deal query "+query.toString());
		charges = ConnectionDAO.sqlSelect(query.toString());
		logger.info("refreshchargesDetail for getting charges in deal  size "+charges.size());
		for(int i=0;i<charges.size();i++)
		{
			subcharges=(ArrayList)charges.get(i);
			if(subcharges.size()>0)	
			{
				vo = new ChargeVo();
				vo.setChargeId((CommonFunction.checkNull(subcharges.get(0))).trim());
				if((CommonFunction.checkNull(subcharges.get(1)).trim()).equals("R"))
				vo.setChargeType("Receivable");
				else if((CommonFunction.checkNull(subcharges.get(1)).trim()).equals("P"))
				vo.setChargeType("Payable");
				vo.setChargeCode((CommonFunction.checkNull(subcharges.get(2))).trim());
				vo.setChargeDesc((CommonFunction.checkNull(subcharges.get(3))).trim());
				vo.setChargeBPType((CommonFunction.checkNull(subcharges.get(4)).trim()));
				if((CommonFunction.checkNull(subcharges.get(16)).trim()).equals("CS"))
				vo.setChargeBPId((CommonFunction.checkNull(subcharges.get(8))).trim());
				else
				vo.setChargeBPId((CommonFunction.checkNull(subcharges.get(5))).trim());
				if(!CommonFunction.checkNull(subcharges.get(6)).equalsIgnoreCase(""))
	    	    {
		    	 		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(6))).trim());
		    	   		vo.setChargeCal(myFormatter.format(reconNum));
	    	    }
				if(!CommonFunction.checkNull(subcharges.get(7)).equalsIgnoreCase(""))
	    	    {
		    	   		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(7))).trim());
		    	   		vo.setChargeFinal(myFormatter.format(reconNum));
	    	    }					
				vo.setLoanAmount((CommonFunction.checkNull(subcharges.get(9))).trim());
				vo.setMarginAmount((CommonFunction.checkNull(subcharges.get(10))).trim());
				vo.setChargeCalculatedOn((CommonFunction.checkNull(subcharges.get(11))).trim());
				vo.setChargeMethod((CommonFunction.checkNull(subcharges.get(12))).trim());
				vo.setTaxsInclusive((CommonFunction.checkNull(subcharges.get(13))).trim());
				if(!CommonFunction.checkNull(subcharges.get(14)).equalsIgnoreCase(""))
	    	    {
		    	 		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(14))).trim());
		    	   		vo.setTaxtRat1(myFormatter.format(reconNum));
	    	    }
				if(!CommonFunction.checkNull(subcharges.get(15)).equalsIgnoreCase(""))
	    	    {
		    	   		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(15))).trim());
		    	   		logger.info("setTaxtRat2: "+reconNum);
		    	   		vo.setTaxtRat2(myFormatter.format(reconNum));
	    	    }
				vo.setMinChargeMethod((CommonFunction.checkNull(subcharges.get(17))).trim());
				vo.setMinChargeCalculatedOn((CommonFunction.checkNull(subcharges.get(18))).trim());
				vo.setDealChargeTaxApp((CommonFunction.checkNull(subcharges.get(19))).trim());
				vo.setDealChargeTdsApp((CommonFunction.checkNull(subcharges.get(20))).trim());
				if(!CommonFunction.checkNull(subcharges.get(21)).equalsIgnoreCase(""))
	    	    {
		    	  		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(21))).trim());
		    	   		vo.setDealChargeTaxAmount1(myFormatter.format(reconNum));
	    	    }
				if(!CommonFunction.checkNull(subcharges.get(22)).equalsIgnoreCase(""))
	    	    {
		    	   		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(22))).trim());
		    	   		//logger.info("setTaxtRat2: "+reconNum);
		    	   		vo.setDealChargeTaxAmount2(myFormatter.format(reconNum));
	    	    }				
				if(!CommonFunction.checkNull(subcharges.get(23)).equalsIgnoreCase(""))
	    	    {
		    	 		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(23))).trim());
		    	   		vo.setDealChargeMinChargeAmount(myFormatter.format(reconNum));
	    	    }
				if(!CommonFunction.checkNull(subcharges.get(24)).equalsIgnoreCase(""))
	    	    {
		    	   		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(24))).trim());
		    	   		//logger.info("setTaxtRat2: "+reconNum);
		    	   		vo.setDealChargeTdsRate(myFormatter.format(reconNum));
	    	    }
				if(!CommonFunction.checkNull(subcharges.get(25)).equalsIgnoreCase(""))
	    	    {
		    	   		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(25))).trim());
		    	   		vo.setDealChargeTdsAmount(myFormatter.format(reconNum));
	    	    }
				if(!CommonFunction.checkNull(subcharges.get(26)).equalsIgnoreCase(""))
	    	    {
		    	   		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(26))).trim());
		    	   		//logger.info("setTaxtRat2: "+reconNum);
		    	   		vo.setDealChargeNetAmount(myFormatter.format(reconNum));
	    	    }				
				vo.setApplStage(CommonFunction.checkNull(subcharges.get(27)));	
				if(!CommonFunction.checkNull(subcharges.get(28)).equalsIgnoreCase(""))
	    		{
	   	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(28))).trim());
	   	    		vo.setCustomerCharge(myFormatter.format(reconNum));
	   	    		
	    		}
				if(!CommonFunction.checkNull(subcharges.get(29)).equalsIgnoreCase(""))
	    		{
	   	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(29))).trim());
	   	    		vo.setCustomerFinalCharge(myFormatter.format(reconNum));
	   	    		
	    		}
			
				list.add(vo);
		  }
		}
	}
	catch (Exception e) 
	{e.printStackTrace();}
	finally
	{
		vo =null;
		query=null;
		charges=null;
		subcharges=null;
	}
	return list;
}




	//Manisha Code Starts
//manisha Personal Discussion code starts
	
	public ArrayList<CreditProcessingNotepadVo> showPDData(CreditProcessingNotepadVo pdVo){

 		ArrayList<CreditProcessingNotepadVo> PDList=new ArrayList<CreditProcessingNotepadVo>();
 		
 		try{
 			ArrayList mainList=new ArrayList ();
 			ArrayList subList =new ArrayList();
 			CallableStatement cst=null;
 			logger.info(" In showPDData....");	
 				
 			StringBuilder query=new StringBuilder();
 			query.append(" select case when NOTEPAD_CODE='PD' then 'Personal Discussion' else '' end as NOTEPAD_CODE,");
 			query.append(dbo);
 			query.append("DATE_FORMAT(NOTEPAD_DATE,'"+dateFormatWithTime+"'),PERSON_MET,MEETING_LOCATION, ");
 			query.append(" NOTEPAD_COMMENTS,case when followup_reqd='N' then 'NO' else 'YES' end as followup_reqd,");
 			query.append(dbo);
 			query.append("DATE_FORMAT(FOLLOWUP_DATE,'"+dateFormatWithTime+"'),FOLLOWUP_PERSON,");    
 			query.append(" FOLLOWUP_LOCATION,FOLLOWUP_REMARKS, s.USER_NAME,");
 			query.append(dbo);
 			query.append("DATE_FORMAT(a.maker_date,'"+dateFormatWithTime+"') from cr_notepad_dtl a ,sec_user_m s where NOTEPAD_CODE='PD' and a.MAKER_ID=s.USER_ID and txn_id='"+StringEscapeUtils.escapeSql(pdVo.getDealId())+"'");
 			
 			logger.info("In showPDData"+query.toString());	
 			
 			mainList=ConnectionDAO.sqlSelect(query.toString());
 			query=null;
 			
 			for(int i=0;i<mainList.size();i++)
 			{
 				subList= (ArrayList)mainList.get(i);
 				if(subList.size()>0){
 					CreditProcessingNotepadVo pdvo = new CreditProcessingNotepadVo();
 					pdvo.setPdCode((CommonFunction.checkNull(subList.get(0)).trim()));
 					pdvo.setPdDate((CommonFunction.checkNull(subList.get(1)).trim()));
 					pdvo.setPersonMet((CommonFunction.checkNull(subList.get(2)).trim()));
 					pdvo.setPdMeetingLocation((CommonFunction.checkNull(subList.get(3)).trim()));
 					pdvo.setPdRemark((CommonFunction.checkNull(subList.get(4)).trim()));
 					pdvo.setFollowUp((CommonFunction.checkNull(subList.get(5)).trim()));
 					pdvo.setFollowupDate((CommonFunction.checkNull(subList.get(6)).trim()));
 					pdvo.setFollowUpPerson((CommonFunction.checkNull(subList.get(7)).trim()));
 					pdvo.setFollowUpLocation((CommonFunction.checkNull(subList.get(8)).trim()));
 					pdvo.setFollowupRemarks((CommonFunction.checkNull(subList.get(9)).trim())); 				
 					pdvo.setUserName((CommonFunction.checkNull(subList.get(10))).trim());
 					pdvo.setCreationDate((CommonFunction.checkNull(subList.get(11))).trim());
 					
 					PDList.add(pdvo);
 				}
 			}
 				}catch(Exception e){
 					e.printStackTrace();
 				}


 				return PDList;
 			}
	 
	
	 public boolean savePersonalDiscussion(CreditProcessingNotepadVo pdVo) {
		 
			ArrayList<CreditProcessingNotepadVo> getDataList=new ArrayList<CreditProcessingNotepadVo>();
			PrepStmtObject insertPrepStmtObject = new PrepStmtObject();	
			boolean status=false;
			StringBuilder pddateTime=new StringBuilder();
			StringBuilder followupdateTime=new StringBuilder();
			String ptime="";
			String ftime="";
			if(CommonFunction.checkNull(pdVo.getFollowUp()).equalsIgnoreCase("Y")){
				if(CommonFunction.checkNull(pdVo.getPdTime()).equalsIgnoreCase("")){
					ptime="";
				}else{
					ptime=CommonFunction.checkNull(pdVo.getPdTime()).substring(0, 5);
				}
				
				if(CommonFunction.checkNull(pdVo.getFollowupTime()).equalsIgnoreCase("")){
					ftime="";
				}else{
					ftime=CommonFunction.checkNull(pdVo.getFollowupTime()).substring(0, 5);
				}
				pddateTime.append(CommonFunction.checkNull(pdVo.getPdDate())+" "+ptime);
				followupdateTime.append(CommonFunction.checkNull(pdVo.getFollowupDate())+" "+ftime);
			}else if(CommonFunction.checkNull(pdVo.getFollowUp()).equalsIgnoreCase("N")){
				if(CommonFunction.checkNull(pdVo.getPdTime()).equalsIgnoreCase("")){
					ptime="";
				}else{
					ptime=CommonFunction.checkNull(pdVo.getPdTime()).substring(0, 5);
				}
				pddateTime.append(CommonFunction.checkNull(pdVo.getPdDate())+" "+ptime);
			}
			
			
				logger.info("In savePersonalDiscussion.....................................Dao Impl....111");
				logger.info("VALUE OF FollowUpDateTime....................................."+followupdateTime);
			
			 ArrayList qryList = new ArrayList();
			
				try{

				    StringBuffer bufInsSql =	new StringBuffer();
					bufInsSql.append("insert into cr_notepad_dtl (txn_id,NOTEPAD_CODE,NOTEPAD_DATE," +
					" PERSON_MET,MEETING_LOCATION,NOTEPAD_COMMENTS,FOLLOWUP_REQD," +
	               " FOLLOWUP_DATE,FOLLOWUP_PERSON,FOLLOWUP_LOCATION,FOLLOWUP_REMARKS,MAKER_ID,MAKER_DATE )");
					bufInsSql.append(" values ( ");
					bufInsSql.append(" ?," );
					bufInsSql.append(" ?," );
					bufInsSql.append(dbo);
					bufInsSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')," ); 
					bufInsSql.append(" ?," );
					bufInsSql.append(" ?," );
					bufInsSql.append(" ?," );
					bufInsSql.append(" ?," );
					bufInsSql.append(dbo);
					bufInsSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')," ); 
					bufInsSql.append(" ?," );
					bufInsSql.append(" ?," );
					bufInsSql.append(" ?," );		
					bufInsSql.append(" ?," );
				    //bufInsSql.append("DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND))" );
				    bufInsSql.append(dbo);
					bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"') + ' '+substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9)) ");
				    if(CommonFunction.checkNull(pdVo.getDealId()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((pdVo.getDealId()).trim());
					
					if(CommonFunction.checkNull(pdVo.getHidpdCode()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((pdVo.getHidpdCode()).trim());
					if((CommonFunction.checkNull(pddateTime.toString())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((pddateTime.toString()).trim());

					
					if(CommonFunction.checkNull(pdVo.getPersonMet()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((pdVo.getPersonMet()).trim());
				
					if(CommonFunction.checkNull(pdVo.getPdMeetingLocation()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((pdVo.getPdMeetingLocation()).trim());
					if(CommonFunction.checkNull(pdVo.getPdRemark()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((pdVo.getPdRemark()).trim());
					
					if((CommonFunction.checkNull(pdVo.getFollowUp())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((pdVo.getFollowUp()).trim());

					if((CommonFunction.checkNull(followupdateTime.toString())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((followupdateTime.toString()).trim());
	
					if((CommonFunction.checkNull(pdVo.getFollowUpPerson())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((pdVo.getFollowUpPerson()).trim());
					
					if((CommonFunction.checkNull(pdVo.getFollowUpLocation())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((pdVo.getFollowUpLocation()).trim());
					if((CommonFunction.checkNull(pdVo.getFollowupRemarks())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((pdVo.getFollowupRemarks()).trim());
					if((CommonFunction.checkNull(pdVo.getUserId()).trim()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((pdVo.getUserId()).trim()); //maker_id
					if((CommonFunction.checkNull(pdVo.getMakerDate()).trim()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((pdVo.getMakerDate()).trim()); //maker_date
		
					insertPrepStmtObject.setSql(bufInsSql.toString());
					
					qryList.add(insertPrepStmtObject);
					logger.info("IN savePersonalDiscussion insert  ### "+insertPrepStmtObject.printQuery());
				
					status =ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
					logger.info("In savePersonalDiscussion ....................."+status);
					
					bufInsSql=null;
			}
				catch(Exception e){
					e.printStackTrace();
				}
				finally
				{
					pddateTime=null;
					followupdateTime=null;
				}

				return status;
			}
	//manisha Search CP
     public ArrayList <DisbursalSearchVO> searchCPGrid(DisbursalSearchVO vo)
 	{
 		StringBuilder dealNo=new StringBuilder();
 	    StringBuilder customerName=new StringBuilder();
   

    	 ArrayList<DisbursalSearchVO> detailListGrid=new 	ArrayList<DisbursalSearchVO>();
 		  try{
 			  ArrayList searchlist=new ArrayList();
 	      logger.info("In searchCPGrid....................");
 	      boolean appendSQL=false;
 	      StringBuffer bufInsSql =	new StringBuffer();
 	    
 	      dealNo.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()));
 	      logger.info("In searchCPGrid......dealNo-  "+dealNo);
 	      customerName.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomerName()).trim()));
 	      
 	        bufInsSql.append(" select A.DEAL_ID,A.DEAL_NO,C.CUSTOMER_NAME,B.DEAL_PRODUCT,P.product_desc,B.DEAL_SCHEME, S.scheme_desc,A.REC_STATUS,br.BRANCH_DESC,su.USER_NAME as maker,author.user_name AS AUTHOR,author.APPROVAL_DATE ,case A.REC_STATUS when 'A' then 'APPROVED '  when 'X' then iif((select count(1) from cr_deal_movement_dtl where REC_STATUS='A' and deal_id=A.DEAL_ID)>0,'REJECTED ','CANCELLED ')when 'P' then 'PENDING 'when 'F' then 'FORWARDED 'end as deal_status" );
 	        bufInsSql.append("  from cr_deal_dtl A  left outer join cr_deal_loan_dtl B on(A.DEAL_ID = B.DEAL_ID) left outer join cr_deal_customer_m C ");
 	        bufInsSql.append(" on(A.DEAL_CUSTOMER_ID =C.CUSTOMER_ID) left outer join cr_product_m P on(P.product_id = B.DEAL_PRODUCT) left outer join cr_scheme_m S");
 	        bufInsSql.append(" on(S.scheme_id = B.DEAL_SCHEME) left outer join com_branch_m br on(br.BRANCH_ID=a.DEAL_BRANCH)left outer join sec_user_m su on (su.USER_ID=a.MAKER_ID) " );
 	        bufInsSql.append(" left outer join ( ");
 	        bufInsSql.append(" SELECT A.deal_id,u.user_name,APPROVAL_DATE FROM cr_deal_approval_dtl A JOIN ( ");
 	        bufInsSql.append(" SELECT MAX(DEAL_APPROVAL_ID)DEAL_APPROVAL_ID,DEAL_ID FROM cr_deal_approval_dtl WHERE DEAL_ID='"+dealNo+"' GROUP BY DEAL_ID ) B ON(A.DEAL_ID=B.DEAL_ID AND A.DEAL_APPROVAL_ID=B.DEAL_APPROVAL_ID) JOIN sec_user_m u on (u.USER_ID=A.APPROVAL_BY) ) author on(author.DEAL_ID=a.DEAL_ID) ");
 	        bufInsSql.append(" WHERE A.DEAL_ID="+dealNo+" ");
 	       
 	    	 logger.info("query ::::::::::::::::::::::::::::::: "+bufInsSql.toString());
			searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());
			
			 logger.info("IN searchCPGrid() search query1 ### "+ bufInsSql.toString());
			 logger.info("searchCPGrid " + searchlist.size());
				
 	      logger.info("searchCPGrid SIZE---"+searchlist.size());
 	      logger.info("searchCPGrid    ........"+bufInsSql.toString());
 	      
 	      bufInsSql=null;
 	      for(int i=0;i<searchlist.size();i++){
 	      logger.info("searchCPGrid search List "+searchlist.get(i).toString());
 	      ArrayList data=(ArrayList)searchlist.get(i);

 	      if(data.size()>0){
 	    	DisbursalSearchVO disVO = new DisbursalSearchVO();
 	    	  
 	    	  disVO.setLbxDealNo((CommonFunction.checkNull(data.get(0)).trim()));
 	    	  disVO.setDealNo((CommonFunction.checkNull(data.get(1)).trim()));
 	    	  logger.info("setCustomerName:-------------"+data.get(2));
 	    	  disVO.setCustomerName((CommonFunction.checkNull(data.get(2)).trim()));
 	    	  disVO.setLbxProductID((CommonFunction.checkNull(data.get(3)).trim()));
 	    	  disVO.setProduct((CommonFunction.checkNull(data.get(4)).trim()));
 	    	  logger.info("setProduct:-------------"+data.get(4));
 	    	  disVO.setLbxscheme((CommonFunction.checkNull(data.get(5)).trim()));
 	    	  disVO.setScheme((CommonFunction.checkNull(data.get(6)).trim()));
 	    	  disVO.setRecStatus((CommonFunction.checkNull(data.get(7)).trim())); 	    
 	    	  disVO.setDealBranch((CommonFunction.checkNull(data.get(8)).trim()));
 	    	  disVO.setMaker((CommonFunction.checkNull(data.get(9)).trim()));
 	    	  disVO.setAuthor((CommonFunction.checkNull(data.get(10)).trim()));
 	    	  disVO.setCurrentStatus((CommonFunction.checkNull(data.get(12)).trim()));
 	    	  detailListGrid.add(disVO);
 	       }

 		      }

 		}catch(Exception e){
 			e.printStackTrace();
 				}
 		finally
 		{
 			dealNo=null;
 			customerName=null;
 		}
 		return  detailListGrid;	
 	}

 	public ArrayList<Object> fetchDealDetail(CommonDealVo vo) {
 		ArrayList list=new ArrayList();
 		try
 		{
 			logger.info("vo.getStage(): "+vo.getStage());
 			logger.info("here userid++++++++++++++++++++++++++++++++++++++++++++++++++++++++ "+vo.getReportingToUserId());
 			String userNameQ="select USER_NAME from sec_user_m where REC_STATUS='A' and USER_ID='"+vo.getReportingToUserId()+"'";
 			String userName=ConnectionDAO.singleReturn(userNameQ);
 			logger.info("userNameQ: "+userNameQ+" userName: "+userName);
 			
 			userNameQ=null;
 			//logger.info("here branch id++++++++++++++++++++++++++++++++++++++++++++++++ "+vo.getBranchId());
 			logger.info("Date Format: "+dateFormat);
 			ArrayList header=null;
 			int count=0;
 			int startRecordIndex=0;
 			int endRecordIndex = no;
 			CommonDealVo fetchVo= (CommonDealVo) vo;
 			boolean appendSQL=false;
 			StringBuffer bufInsSql=new StringBuffer();
 			StringBuffer bufInsSqlTempCount = new StringBuffer();
 			StringBuilder dealId=new StringBuilder();
 			StringBuilder appNo=new StringBuilder();
 			StringBuilder appDate=new StringBuilder();
 			StringBuilder custName=new StringBuilder();
 			StringBuilder productId=new StringBuilder();
 			
 			 dealId.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim()));
 			 appNo.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim()));
 			 appDate.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim()));
 			 custName.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim()));
 			 productId.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim()));
 					
 		
 		if(vo.getStage()!=null && !vo.getStage().equalsIgnoreCase("F"))
 		{
 			logger.info("fetchDealDetail select........");	
 			
 			bufInsSql.append("select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,");
 			bufInsSql.append(dbo);
 			bufInsSql.append("DATE_FORMAT(DEAL_DATE,'"+dateFormat+"') AS DEAL_DATE,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,(SELECT USER_NAME FROM SEC_USER_M WHERE USER_ID=d.MAKER_ID) MAKER_ID ");
 			bufInsSql.append(" from cr_deal_dtl d");
 			bufInsSqlTempCount.append(" select distinct count(1) FROM (select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,");
 			bufInsSqlTempCount.append(dbo);
 			bufInsSqlTempCount.append("DATE_FORMAT(DEAL_DATE,'"+dateFormat+"') AS DEAL_DATE,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC from cr_deal_dtl d ");
 			
 			bufInsSql.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
 			bufInsSqlTempCount.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
 			
 			bufInsSql.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
 			bufInsSqlTempCount.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
 			
 			bufInsSql.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
 			bufInsSqlTempCount.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
 			
 			bufInsSql.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
 			bufInsSqlTempCount.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
 						
 			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim().equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase(""))))
 			{
 		   	  bufInsSql.append("WHERE d.MAKER_ID='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' AND   d.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' AND ");
 		   	  bufInsSql.append(dbo);
 		   	  bufInsSql.append("date(d.DEAL_DATE) =");
 		   	  bufInsSql.append(dbo);
 		   	  bufInsSql.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"'");
 		   	  bufInsSqlTempCount.append("WHERE d.MAKER_ID='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' AND   d.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' AND ");
 		   	  bufInsSqlTempCount.append(dbo);
 		   	  bufInsSqlTempCount.append("date(d.DEAL_DATE) =");
 		   	  bufInsSqlTempCount.append(dbo);
 		   	  bufInsSqlTempCount.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"'");
 			}
 			
 			if(((vo.getLbxDealNo().equalsIgnoreCase("")))||((vo.getApplicationno().equalsIgnoreCase("")))||((vo.getApplicationdate().equalsIgnoreCase("")))||((vo.getCustomername().equalsIgnoreCase("")))||((vo.getLbxProductID().equalsIgnoreCase("")))||((vo.getLbxscheme().equalsIgnoreCase("")))||((vo.getStage().equalsIgnoreCase("")))){
 				appendSQL=true;
 			}
 			
 			if(appendSQL){
 				logger.info("In Where Clause");
 				bufInsSql.append(" WHERE d.MAKER_ID='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' AND   d.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"' ");
 				bufInsSqlTempCount.append(" WHERE d.MAKER_ID='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' AND d.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"' ");
 			}
 			 if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")))) {
  		        bufInsSql.append("AND d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
  		        bufInsSqlTempCount.append("AND d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
  		   	 appendSQL=true;
  		   	  
  		     }
  			 
  			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")))) {
  		   	  bufInsSql.append("AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
  		   	  bufInsSqlTempCount.append("AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
  		   	  appendSQL=true;
  		     }
  			
  			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim().equalsIgnoreCase("")))) {
  				
  		   	  bufInsSql.append("AND ");
  		      bufInsSql.append(dbo);
  		      bufInsSql.append("date(d.DEAL_DATE) =");
  		   	  bufInsSql.append(dbo);
  		   	  bufInsSql.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"')  ");
  		   	  bufInsSqlTempCount.append(dbo);
  		      bufInsSqlTempCount.append("date(d.DEAL_DATE) =");
  		   	  bufInsSqlTempCount.append(dbo);
  		   	  bufInsSqlTempCount.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') ");
  		   	  appendSQL=true;
  		     }
  			
  			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")))) {
  		   	  bufInsSql.append("AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
  		   	  bufInsSqlTempCount.append("AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
  		   	  appendSQL=true;
  		     }
  			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")))) {
  			   	  bufInsSql.append("AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
  			   	  bufInsSqlTempCount.append("AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
  			   	  appendSQL=true;
  			     }
  			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")))) {
  			   	  bufInsSql.append("AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
  			   	  bufInsSqlTempCount.append("AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
  			   	  appendSQL=true;
  			     }
  			
  			if((!(vo.getLbxDealNo().equalsIgnoreCase("")))||(!(vo.getApplicationno().equalsIgnoreCase("")))||(!(vo.getApplicationdate().equalsIgnoreCase("")))||(!(vo.getCustomername().equalsIgnoreCase("")))||(!(vo.getLbxProductID().equalsIgnoreCase("")))||(!(vo.getLbxscheme().equalsIgnoreCase("")))||(!(vo.getStage().equalsIgnoreCase("")))){
  				bufInsSqlTempCount.append(") as b");
  				appendSQL=true;
  			}
  			
  			
  			 String queryCnt=ConnectionDAO.singleReturn(bufInsSqlTempCount.toString());
 			 if(!CommonFunction.checkNull(queryCnt).equalsIgnoreCase(""))
 			 {
 				 count =Integer.parseInt(queryCnt);
 			 }
  			 logger.info("bufInsSqlTempCount : "+bufInsSqlTempCount.toString());
 // 			if((dealId.toString().trim()==null && appNo.toString().trim()==null && appDate.toString().trim()==null && custName.toString().trim()==null && productId.toString().trim()==null) || (dealId.toString().trim().equalsIgnoreCase("") && appNo.toString().trim().equalsIgnoreCase("") && appDate.toString().trim().equalsIgnoreCase("") && custName.toString().trim().equalsIgnoreCase("") && productId.toString().trim().equalsIgnoreCase("")) || fetchVo.getCurrentPageLink()>1)
 //			{
  			
  			 logger.info("current PAge Link no .................... "+fetchVo.getCurrentPageLink());
  			if(fetchVo.getCurrentPageLink()>1)
  			{
  				startRecordIndex = (fetchVo.getCurrentPageLink()-1)*no;
  				endRecordIndex = no;
  				 logger.info("startRecordIndex .................... "+startRecordIndex);
  				 logger.info("endRecordIndex .................... "+endRecordIndex);
  			}
				//bufInsSql.append(CommonFunction.betweenStartEnd(startRecordIndex, endRecordIndex));	
				bufInsSql.append(" ORDER BY d.DEAL_ID OFFSET ");
				bufInsSql.append(startRecordIndex);
				bufInsSql.append(" ROWS FETCH next ");
				bufInsSql.append(endRecordIndex);
				bufInsSql.append(" ROWS ONLY ");
				logger.info("Search fetchDealDetail query for SQL SERVER : " + bufInsSql.toString());
				//query = query +" limit "+startRecordIndex+","+endRecordIndex;
 // 			}
  			 logger.info("query : "+bufInsSql.toString());
  		     header = ConnectionDAO.sqlSelect(bufInsSql.toString());
  		   //logger.info("here &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&"+vo.getUserid());
  						
  			for(int i=0;i<header.size();i++){
  			//	logger.info("header: "+header.size());
  				ArrayList header1=(ArrayList)header.get(i);
  				if(header1!=null && header1.size()>0)
  				{
  					
  					fetchVo = new CommonDealVo();
  			//		logger.info("vo.getStage(): "+vo.getStage());
  					if(vo.getStage().equalsIgnoreCase("F"))
  					{
  						fetchVo.setLbxDealNo("<a href=commonPageBehind.do?dealId="+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+">"+(CommonFunction.checkNull(header1.get(1)))+"</a>");
  					}
  					else
  					{
  						fetchVo.setLbxDealNo("<a href=dealCapturing.do?method=leadEntryCapturing&dealId="+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+">"+(CommonFunction.checkNull(header1.get(1)))+"</a>");
  					}
  					
  					fetchVo.setDealNo((CommonFunction.checkNull(header1.get(1))).trim());
  					fetchVo.setApplicationno((CommonFunction.checkNull(header1.get(2))).trim());
  					fetchVo.setApplicationdate((CommonFunction.checkNull(header1.get(3))).trim());
  					fetchVo.setCustomername((CommonFunction.checkNull(header1.get(4))).trim());
  			//		logger.info("Customer First Name: "+(CommonFunction.checkNull(header1.get(4))).trim());
  					fetchVo.setProduct((CommonFunction.checkNull(header1.get(5))).trim());
  					fetchVo.setScheme((CommonFunction.checkNull(header1.get(6))).trim());
  					fetchVo.setReportingToUserId(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(header1.get(7))).trim());
  					//fetchVo.setUserId(vo.getUserId());
  					fetchVo.setTotalRecordSize(count);
  					list.add(fetchVo);
  					fetchVo=null;
  				}
  				header1.clear();
  				header1=null;
  			}
  			header.clear();
			header=null;
 		}
 		else if(vo.getStage()!=null && vo.getStage().equalsIgnoreCase("F"))
 		{
 			
 			   logger.info("Deal Id: "+vo.getLbxDealNo());
			   logger.info("User Id: "+vo.getReportingToUserId());
			   String branch="";
			   if(vo.getAllBranches().equalsIgnoreCase("on") || !(CommonFunction.checkNull(vo.getLbxDealNo()).trim().equalsIgnoreCase("")) )
			   {
				   String branchMappedToUserQuery="SELECT STUFF((SELECT ',' + CAST(BRANCH_ID AS varchar(10)) FROM sec_user_branch_dtl WHERE USER_ID='"+CommonFunction.checkNull(vo.getReportingToUserId()).trim()+"' AND REC_STATUS='A' FOR XML PATH ('')), 1, 1, '')";
				   branch=ConnectionDAO.singleReturn(branchMappedToUserQuery.toString());
				   logger.info("branchMappedToUserQuery: "+branchMappedToUserQuery+"      branches maped to user:   "+branch);
				   branchMappedToUserQuery=null;
			   }
			   else
			   {
				   branch=vo.getBranchId();
			   }
			   
			   if(CommonFunction.checkNull(branch).equalsIgnoreCase(""))
			   {
				   branch=vo.getBranchId(); 
			   }
			   
			   String status= callProcUnderWriterSerachData(vo);
			   logger.info("status of callProcUnderWriterSerachData: "+status);
			   if(CommonFunction.checkNull(status).equalsIgnoreCase("S"))
			    {
				    bufInsSql.append(" SELECT DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO," );
				    bufInsSql.append(dbo);
				    bufInsSql.append("DATE_FORMAT(DEAL_DATE,'"+dateFormat+"'),CUSTOMER_NAME,PRODUCT_DESC,SCHEME_DESC,MAKER_ID,BRANCH_DESC ");
		 			bufInsSql.append(" FROM under_writer_search_temp_data   ");
		 			//bufInsSqlTempCount.append(" select distinct count(1) FROM (select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,DATE_FORMAT(DEAL_DATE,'"+dateFormat+"'),deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,ua.AMOUNT_TO ,ua.AMOUNT_FROM,n.DEAL_LOAN_AMOUNT from cr_deal_dtl d ");
		 			bufInsSqlTempCount.append(" select distinct count(1) from under_writer_search_temp_data  ");
		 			
			
					if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim().equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase(""))) && ((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on"))))
					{
				   	  bufInsSql.append("WHERE USER_ID='"+CommonFunction.checkNull(vo.getUserId())+"' AND MAKER_ID!='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"'   AND   DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+") and DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' AND date(DEAL_DATE) = "+dbo+"STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') AND CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"'");
				   	  bufInsSqlTempCount.append("WHERE USER_ID='"+CommonFunction.checkNull(vo.getUserId())+"' AND MAKER_ID!='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' AND   DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+")  and DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' AND date(DEAL_DATE) ="+dbo+"STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') AND CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"'");
					}
					
					if(((vo.getLbxDealNo().equalsIgnoreCase("")))||((vo.getApplicationno().equalsIgnoreCase("")))||((vo.getApplicationdate().equalsIgnoreCase("")))||((vo.getCustomername().equalsIgnoreCase("")))||((vo.getLbxProductID().equalsIgnoreCase("")))||((vo.getLbxscheme().equalsIgnoreCase("")))||((vo.getStage().equalsIgnoreCase("")))|| (!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on")))){
						appendSQL=true;
					}
					
					if(appendSQL){
						logger.info("In Where Clause");
						bufInsSql.append(" WHERE USER_ID='"+CommonFunction.checkNull(vo.getUserId())+"' AND MAKER_ID!='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"'    AND   DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+")  AND REC_STATUS='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"' ");
						bufInsSqlTempCount.append(" WHERE USER_ID='"+CommonFunction.checkNull(vo.getUserId())+"' AND MAKER_ID!='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' AND  DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+")  AND REC_STATUS='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"' ");
					}
					
					 if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")))) {
		 		        bufInsSql.append(" AND DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
		 		        bufInsSqlTempCount.append(" AND DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
		 		   	 appendSQL=true;
		 		   	  
		 		     }
		 			 
		 			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")))) {
		 		   	  bufInsSql.append(" AND DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
		 		   	  bufInsSqlTempCount.append(" AND DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
		 		   	  appendSQL=true;
		 		     }
		 			
		 			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim().equalsIgnoreCase("")))) {
		 		   	  bufInsSql.append(" AND DATE(DEAL_DATE) ="+dbo+"STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') ");
		 		   	  bufInsSqlTempCount.append(" AND DATE(DEAL_DATE) ="+dbo+"STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') ");
		 		   	  appendSQL=true;
		 		     }
		 			
		 			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")))) {
		 		   	  bufInsSql.append(" AND CUSTOMER_NAME LIKE'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
		 		   	  bufInsSqlTempCount.append(" AND CUSTOMER_NAME LIKE'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
		 		   	  appendSQL=true;
		 		     }
		 			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")))) {
		 			   	  bufInsSql.append(" AND DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
		 			   	  bufInsSqlTempCount.append(" AND DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
		 			   	  appendSQL=true;
		 			     }
		 			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")))) {
		 			   	  bufInsSql.append(" AND DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
		 			   	  bufInsSqlTempCount.append(" AND DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
		 			   	  appendSQL=true;
		 			     }
		 			 		  			
		  			 logger.info("bufInsSqlTempCount : "+bufInsSqlTempCount.toString());
		  			 count =Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
		  			
		  			//if((dealId.toString().trim()==null && appNo.toString().trim()==null && appDate.toString().trim()==null && custName.toString().trim()==null && productId.toString().trim()==null) || (dealId.toString().trim().equalsIgnoreCase("") && appNo.toString().trim().equalsIgnoreCase("") && appDate.toString().trim().equalsIgnoreCase("") && custName.toString().trim().equalsIgnoreCase("") && productId.toString().trim().equalsIgnoreCase("")) || fetchVo.getCurrentPageLink()>1)
		  			//{
		  			
		  			 logger.info("current PAge Link no .................... "+fetchVo.getCurrentPageLink());
		  			if(fetchVo.getCurrentPageLink()>1)
		  			{
		  				startRecordIndex = (fetchVo.getCurrentPageLink()-1)*no;
		  				endRecordIndex = no;
//		  				 logger.info("startRecordIndex .................... "+startRecordIndex);
//		  				 logger.info("endRecordIndex .................... "+endRecordIndex);
		  			}
		  			
		  			
		  			bufInsSql.append(" ORDER BY DEAL_ID OFFSET ");
					bufInsSql.append(startRecordIndex);
					bufInsSql.append(" ROWS FETCH next ");
					bufInsSql.append(endRecordIndex);
					bufInsSql.append(" ROWS ONLY ");
		  			
		  			
		  			//query = query +" limit "+startRecordIndex+","+endRecordIndex;
		  			//}
		  			 logger.info("Main query : "+bufInsSql.toString());
		  		     header = ConnectionDAO.sqlSelect(bufInsSql.toString());
		  		     
		  		     bufInsSql=null;
		  		     bufInsSqlTempCount=null;
		  		     
		  		   //logger.info("here &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&"+vo.getUserid());
		  			int size=header.size();
		  			for(int i=0;i<size;i++){
		  			//	logger.info("header: "+header.size());
		  				ArrayList header1=(ArrayList)header.get(i);
		  				if(header1!=null && header1.size()>0)
		  				{
		  					
		  					fetchVo = new CommonDealVo();
		  			//		logger.info("vo.getStage(): "+vo.getStage());
		  					if(vo.getStage().equalsIgnoreCase("F"))
		  					{
		  						fetchVo.setLbxDealNo("<a href=commonPageBehind.do?dealId="+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+">"+(CommonFunction.checkNull(header1.get(1)))+"</a>");
		  					}
		  					else
		  					{
		  						fetchVo.setLbxDealNo("<a href=dealCapturing.do?method=leadEntryCapturing&dealId="+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+">"+(CommonFunction.checkNull(header1.get(1)))+"</a>");
		  					}
		  					
		  					fetchVo.setDealNo((CommonFunction.checkNull(header1.get(1))).trim());
		  					fetchVo.setApplicationno((CommonFunction.checkNull(header1.get(2))).trim());
		  					fetchVo.setApplicationdate((CommonFunction.checkNull(header1.get(3))).trim());
		  					fetchVo.setCustomername((CommonFunction.checkNull(header1.get(4))).trim());
		  			//		logger.info("Customer First Name: "+(CommonFunction.checkNull(header1.get(4))).trim());
		  					fetchVo.setProduct((CommonFunction.checkNull(header1.get(5))).trim());
		  					fetchVo.setScheme((CommonFunction.checkNull(header1.get(6))).trim());
		  					fetchVo.setReportingToUserId(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(header1.get(7))).trim());
		  					fetchVo.setAllBranches(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(header1.get(8))).trim());
		  					//fetchVo.setUserId(vo.getUserId());
		  					fetchVo.setTotalRecordSize(count);
		  					list.add(fetchVo);
		  					fetchVo=null;
		  				}
		  				header1.clear();
		  				header1=null;
		  			}
		  			header.clear();
					header=null;
	         }
 		//}
 	}
 		
		
 			if(vo.getStage()!=null && vo.getStage().equalsIgnoreCase("F"))
 	 		{
 				logger.info("Deal Id: "+vo.getLbxDealNo());
 				logger.info("User Id: "+vo.getReportingToUserId());
 				
 				String levelAmountQuery="";
 				String checkforStageMovementQuery="";
 				if(!(vo.getLbxDealNo().equalsIgnoreCase("")))
 				{
 					levelAmountQuery="select  count(*) from cr_user_approval_m A,cr_deal_dtl B,cr_deal_loan_dtl C where A.REC_STATUS='A' and A.USER_ID='"+vo.getReportingToUserId()+"' AND B.DEAL_CURRENT_APPROVAL_LEVEL=A.LEVEL AND C.DEAL_LOAN_AMOUNT>=A.AMOUNT_FROM<=A.AMOUNT_TO AND C.DEAL_ID=B.DEAL_ID AND B.DEAL_ID="+vo.getLbxDealNo();
 				}
 				else
 				{
 					levelAmountQuery="select count(*) from cr_user_approval_m A,cr_deal_dtl B,cr_deal_loan_dtl C where A.REC_STATUS='A' and A.USER_ID='"+vo.getReportingToUserId()+"' AND B.DEAL_CURRENT_APPROVAL_LEVEL=A.LEVEL AND C.DEAL_LOAN_AMOUNT>=A.AMOUNT_FROM<=A.AMOUNT_TO AND C.DEAL_ID=B.DEAL_ID";
 				}
 	 		   
 				logger.info("levelAmountQuery: "+levelAmountQuery);
 				String levelAmountCount=ConnectionDAO.singleReturn(levelAmountQuery);
 				logger.info("levelAmountCount: "+levelAmountCount);
 				if(!(vo.getLbxDealNo().equalsIgnoreCase("")))
 				{
 					checkforStageMovementQuery="select count(*) from cr_deal_movement_dtl where DEAL_STAGE_ID='UNC' AND DEAL_RECEIVED<>'0000-00-00 00:00:00' AND DEAL_FORWARDED='0000-00-00 00:00:00' AND REC_STATUS='A' and DEAL_ID="+vo.getLbxDealNo();
 				}
 				else
 				{
 					checkforStageMovementQuery="select count(*) from cr_deal_movement_dtl where DEAL_STAGE_ID='UNC' AND DEAL_RECEIVED<>'0000-00-00 00:00:00' AND REC_STATUS='A' AND DEAL_FORWARDED='0000-00-00 00:00:00' ";
 				}
 				logger.info("checkforStageMovementQuery: "+checkforStageMovementQuery);
 				String checkforStageMovementCount=ConnectionDAO.singleReturn(checkforStageMovementQuery);
 				logger.info("checkforStageMovementCount: "+checkforStageMovementCount);
 				if(CommonFunction.checkNull(levelAmountCount).equalsIgnoreCase("0"))
 				{
 					list=new ArrayList();
 				}
 	 		}
 			
 			if(header.size()==0)
 			{
 				fetchVo = new CommonDealVo();
 				fetchVo.setTotalRecordSize(count);
 				list.add(fetchVo);
 				request.setAttribute("flag","yes");
 				
 			}
 //		 logger.info("getTotalRecordSize : "+fetchVo.getTotalRecordSize());
 			 dealId=null;
 			 appNo=null;
 			 appDate=null;
 			 custName=null;
 			 productId=null;
 		}
 		catch(Exception e)
 		{
 			e.printStackTrace();
 		}
 		finally
 		{
 			vo=null;
 		}
 		
 		 logger.info("Detail List when searchList is : "+list);
 		
 		return list;
 	}


	public ArrayList getSectorList() {
		ArrayList list=new ArrayList();
		try{
			StringBuilder query=new StringBuilder();
		 query.append("SELECT g.VALUE,g.DESCRIPTION from generic_master g where g.GENERIC_KEY='SECTOR_TYPE' and g.REC_STATUS='A'");
		logger.info("getSectorList"+query.toString());
		CodeDescVo branchVo=null;
		ArrayList baseRate = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getSectorList"+baseRate.size());
		
		query=null;
		for(int i=0;i<baseRate.size();i++){

			logger.info("getSectorList"+baseRate.get(i).toString());
			ArrayList baseRate1=(ArrayList)baseRate.get(i);
			if(baseRate1.size()>0)
			{
			    branchVo = new CodeDescVo();
				branchVo.setId((CommonFunction.checkNull(baseRate1.get(0))).trim());
				branchVo.setName((CommonFunction.checkNull(baseRate1.get(1))).trim());
				list.add(branchVo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}

		return list;
	}
	public ArrayList getinterstCalcFrom() {
		ArrayList list=new ArrayList();
		try{
			StringBuilder query=new StringBuilder();
		 query.append("SELECT gm.VALUE,gm.DESCRIPTION from generic_master gm where gm.GENERIC_KEY='INTERST_CAL_FROM' and gm.REC_STATUS='A'");
		logger.info("getSectorList"+query.toString());
		CodeDescVo branchVo=null;
		ArrayList listData = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getSectorList"+listData.size());
		
		query=null;
		for(int i=0;i<listData.size();i++){

			logger.info("getSectorList"+listData.get(i).toString());
			ArrayList listData1=(ArrayList)listData.get(i);
			if(listData.size()>0)
			{
			    branchVo = new CodeDescVo();
				branchVo.setId((CommonFunction.checkNull(listData1.get(0))).trim());
				branchVo.setName((CommonFunction.checkNull(listData1.get(1))).trim());
				list.add(branchVo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}

		return list;
	}

	public ArrayList getMakerData(String dealId) {
		ArrayList list=new ArrayList();
		String roleName="";
		try{
			logger.info("In getMakerData..........................DAOImpl"+dealId);
			StringBuilder query=new StringBuilder();
			 query.append("select ");
			 if(dbType.equalsIgnoreCase("MSSQL"))
				{
					query.append("TOP 1 ");
				}
			 query.append(" approval_decision,approval_remarks from cr_deal_approval_dtl  where DEAL_APPROVAL_ID=(select max(DEAL_APPROVAL_ID) from cr_deal_approval_dtl where deal_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' and approval_decision='P') ");
			 if(!dbType.equalsIgnoreCase("MSSQL") && dbo.equalsIgnoreCase(""))
				{
				 query.append(" limit 1");
				}
			logger.info("In getMakerData...............query...........DAOImpl"+query.toString());
			UnderwriterApprovalVo noteVO=null;
			ArrayList product = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getApprovalData "+product.size());
			query=null;
			
			for(int i=0;i<product.size();i++){
				logger.info("getApprovalData...FOR loop "+CommonFunction.checkNull(product.get(i)).toString());
				ArrayList data=(ArrayList)product.get(i);
				if(data.size()>0)	{
					noteVO = new UnderwriterApprovalVo();
					//noteVO.setUserName((CommonFunction.checkNull(data.get(0))).trim());
					//noteVO.setApprovalLevel((roleName));
					noteVO.setDecision((CommonFunction.checkNull(data.get(0))).trim());
					noteVO.setRemarks((CommonFunction.checkNull(data.get(1))).trim());
					
					list.add(noteVO);
				}
			}
		}
		catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}


	public ArrayList getNotepadDataInLoanInit(String loanId,String txnType) {
		ArrayList list=new ArrayList();
		try{
			logger.info("In getNotepadDataInLoanInit.....................................Dao Impl");
			StringBuilder query=new StringBuilder();
			query.append("select b.description ,");
			query.append(dbo);
			query.append("DATE_FORMAT(notepad_date,'"+dateFormatWithTime+"'),person_met,meeting_location,case when followup_reqd='N' then 'NO' else 'YES' end as followup_reqd,");
			query.append(dbo);
			query.append("DATE_FORMAT(followup_date,'"+dateFormatWithTime+"'),followup_location,notepad_comments,followup_remarks,FOLLOWUP_PERSON, " );
			query.append(" s.USER_NAME,");
			query.append(dbo);
			query.append("DATE_FORMAT(a.maker_date,'"+dateFormatWithTime+"') from cr_notepad_dtl a,generic_master b,sec_user_m s");
			query.append(" where notepad_code=b.value and TXN_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()+"' and txn_id=(select LOAN_DEAL_ID from cr_loan_dtl where LOAN_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim()+") and a.notepad_code!='PD' and a.MAKER_ID=s.USER_ID");
		
		logger.info("In getNotepadDataInLoanInit"+query.toString());
		
		CreditProcessingNotepadVo noteVO=null;
		ArrayList product = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getNotepadDataInLoanInit "+product.size());
		query=null;

		for(int i=0;i<product.size();i++){
			logger.info("getNotepadDataInLoanInit "+CommonFunction.checkNull(product.get(i)).toString());
			ArrayList data=(ArrayList)product.get(i);
			if(data.size()>0){
				noteVO = new CreditProcessingNotepadVo();
				noteVO.setNoteCodeDescription((CommonFunction.checkNull(data.get(0))).trim());
				//noteVO.setNoteCode(data.get(0).toString());
				noteVO.setMeetingDate((CommonFunction.checkNull(data.get(1))).trim());
				noteVO.setPersonMet((CommonFunction.checkNull(data.get(2))).trim());
				noteVO.setMeetingLocation((CommonFunction.checkNull(data.get(3))).trim());
				noteVO.setFollowUp((CommonFunction.checkNull(data.get(4))).trim());
				noteVO.setFollowupDate((CommonFunction.checkNull(data.get(5))).trim());
				noteVO.setFollowUpLocation((CommonFunction.checkNull(data.get(6))).trim());
				noteVO.setMeetingRemarks((CommonFunction.checkNull(data.get(7))).trim());
				noteVO.setFollowupRemarks((CommonFunction.checkNull(data.get(8))).trim());
				noteVO.setFollowUpPerson((CommonFunction.checkNull(data.get(9))).trim());
				noteVO.setUserName((CommonFunction.checkNull(data.get(10))).trim());
				noteVO.setCreationDate((CommonFunction.checkNull(data.get(11))).trim());
				list.add(noteVO);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
	return list;
	}

	public boolean saveGuaranteeAmount(Object ob)
	{
		CreditProcessingCustomerEntryVo creditVo = (CreditProcessingCustomerEntryVo)ob;
       
		boolean status=false;
		ArrayList qryList = new ArrayList();
		PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
		StringBuilder queryUpdate=new StringBuilder();
		 queryUpdate.append("update cr_deal_customer_role set GUARANTEE_AMOUNT=? where DEAL_CUSTOMER_ROLE_ID=?");
		PrepStmtObject prepStmt = new PrepStmtObject();
		
		 
		if((CommonFunction.checkNull(creditVo.getGuaranteeAmount())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			try {
				insertPrepStmtObject.addString(myFormatter.parse((creditVo.getGuaranteeAmount()).trim()).toString());
			} catch (ParseException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			
		if((CommonFunction.checkNull(creditVo.getId())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((creditVo.getId()).trim());

		insertPrepStmtObject.setSql(queryUpdate.toString());
		logger.info("IN saveGuaranteeAmount() update query1 ### "+insertPrepStmtObject.printQuery());
		qryList.add(insertPrepStmtObject);
			
		try
		{
			status =ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			logger.info("In saveGuaranteeAmount.........update status: "+status);
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally
		{
			queryUpdate=null;
		}
		logger.info("status in dao : "+status);
		return status;
	}

	public ArrayList getTenureAmountInDeal(String dealId) {
		ArrayList list=new ArrayList();
		
		try
		{
		  ArrayList searchlist=new ArrayList();
		  logger.info("In getTenureAmountInDeal....................");
		  
		  StringBuffer bufInsSql =	new StringBuffer();

		  bufInsSql.append("select ");
		  if(dbType.equalsIgnoreCase("MSSQL"))
			{
			  bufInsSql.append(" TOP 1 ");
			}
		  bufInsSql.append(" DEAL_TENURE,DEAL_CHARGE_FINAL_AMOUNT from  cr_deal_loan_dtl L,cr_deal_txncharges_dtl C where L.DEAL_ID="+dealId+" and L.DEAL_ID=C.DEAL_ID and c.DEAL_CHARGE_CODE=103 ");
		  if(!dbType.equalsIgnoreCase("MSSQL") && dbo.equalsIgnoreCase(""))
			{
			  bufInsSql.append(" limit 1");
			}
			  
			  logger.info("In getTenureAmountInDeal......... query..........."+bufInsSql.toString());
		      searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());
		      
		      bufInsSql=null;
		
		  for(int i=0;i<searchlist.size();i++){
		  logger.info("getTenureAmountInDeal  List "+searchlist.get(i));
		  ArrayList data=(ArrayList)searchlist.get(i);
		  if(data.size()>0)
		  {
			 TenureAmountVo receiptvo = new TenureAmountVo();
			 receiptvo.setTenure((CommonFunction.checkNull(data.get(0)).trim()));
			 Number reconNum=0.00;
			 reconNum = myFormatter.parse((CommonFunction.checkNull(data.get(1))).trim());
			 receiptvo.setSecurityAmount(myFormatter.format(reconNum));
			 list.add(receiptvo);	
		   }
		  }

		}catch(Exception e){
			e.printStackTrace();
				}
		return  list;	
	}

	public ArrayList getInstallTypeInDeal(String dealId) {
		 ArrayList<InstallmentPlanForCMVO> list=new ArrayList<InstallmentPlanForCMVO>();
         ArrayList mainList=new ArrayList ();
			ArrayList subList =new ArrayList();
     		
     		try{
     			StringBuilder query=new StringBuilder();
              	 	query.append(" select distinct FROM_INSTL_NO,TO_INSTL_NO,RECOVERY_PERCENT,DEAL_INSTALLMENT_TYPE,DEAL_NO_OF_INSTALLMENT,PRINCIPAL_AMOUNT,INSTALLMENT_AMOUNT,DEAL_RATE_TYPE,DEAL_LOAN_AMOUNT,RECOVERY_TYPE "+
     				"  from cr_deal_loan_dtl L left JOIN cr_deal_installment_plan D on D.DEAL_ID=L.DEAL_ID "+               			
     				" where L.DEAL_ID="+dealId);
     			
     		 logger.info("getInstallType Queryl: "+query.toString());
     		
     		mainList=ConnectionDAO.sqlSelect(query.toString());
     		
     		query=null;
     		
			for(int i=0;i<mainList.size();i++)
			{
				subList= (ArrayList)mainList.get(i);
				if(subList.size()>0){
					InstallmentPlanForCMVO ipVo= new InstallmentPlanForCMVO();
     				ipVo = new InstallmentPlanForCMVO();  
     				if(CommonFunction.checkNull(subList.get(3)).equalsIgnoreCase("E")||CommonFunction.checkNull(subList.get(3)).equalsIgnoreCase("P"))
     				{
     					ipVo.setFromInstallment("1");
     					ipVo.setToInstallment((CommonFunction.checkNull(subList.get(4))).trim());
     					if(!CommonFunction.checkNull(subList.get(2)).equalsIgnoreCase("")){
        				     Number RecoveryPercen = myFormatter.parse((CommonFunction.checkNull(subList.get(2))).trim());
   	 			   
        				     logger.info("RecoveryPercen: "+RecoveryPercen);			
   	 			         ipVo.setRecoveryPercen(myFormatter.format(RecoveryPercen));
        				      }else{
        				     ipVo.setRecoveryPercen("0");
        				          }
     				    ipVo.setInstallmentType((CommonFunction.checkNull(subList.get(3))).trim());
      			  	    ipVo.setTotalInstallment((CommonFunction.checkNull(subList.get(4))).trim());
      			       // ipVo.setRecoveryType("P");
     				}
     				else{
     				    ipVo.setFromInstallment((CommonFunction.checkNull(subList.get(0))).trim());
     				    ipVo.setToInstallment((CommonFunction.checkNull(subList.get(1))).trim());
     				    if(!CommonFunction.checkNull(subList.get(2)).equalsIgnoreCase("")){
     				     Number RecoveryPercen = myFormatter.parse((CommonFunction.checkNull(subList.get(2))).trim());
	 			   
     				     logger.info("RecoveryPercen: "+RecoveryPercen);			
	 			         ipVo.setRecoveryPercen(myFormatter.format(RecoveryPercen));
     				      }else{
     				     ipVo.setRecoveryPercen("0");
     				          }
     				    ipVo.setInstallmentType((CommonFunction.checkNull(subList.get(3))).trim());
     				    ipVo.setTotalInstallment((CommonFunction.checkNull(subList.get(4))).trim());
     				   
       				
       				
     				    }
     				
     				ipVo.setRateType((CommonFunction.checkNull(subList.get(7))).trim());
     				if(!CommonFunction.checkNull(subList.get(5)).equalsIgnoreCase("")){
     				     Number princam = myFormatter.parse((CommonFunction.checkNull(subList.get(5))).trim());
 	 			   
     				     logger.info("princ amount: "+princam);			
 	 			         ipVo.setPrinAm(myFormatter.format(princam));
     				      }else{
     				     ipVo.setPrinAm("0.00");
     				          }
      				if(!CommonFunction.checkNull(subList.get(6)).equalsIgnoreCase("")){
     				     Number instam = myFormatter.parse((CommonFunction.checkNull(subList.get(6))).trim());
 	 			   
     				     logger.info("inst amount: "+instam);			
 	 			         ipVo.setInstalAm(myFormatter.format(instam));
     				      }else{
     				     ipVo.setInstalAm("0.00");
     				          }
     				if(!CommonFunction.checkNull(subList.get(8)).equalsIgnoreCase("")){
     				     Number instam = myFormatter.parse((CommonFunction.checkNull(subList.get(8))).trim());
 	 			   
     				     logger.info("setLoanAmount: "+instam);			
 	 			         ipVo.setLoanAmount(myFormatter.format(instam));
     				      }else{
     				     ipVo.setLoanAmount("0.00");
     				          }
     				ipVo.setRecoveryType((CommonFunction.checkNull(subList.get(9))).trim());
     				   list.add(ipVo);
     			     }
     		  }
     		}catch(Exception e){
     			e.printStackTrace();
     		}
     		return list;
	}


	public ArrayList getCycleDateList(String dealId,String stage) {
		ArrayList list=new ArrayList();
		try{
			StringBuilder query=new StringBuilder();
		 query.append("SELECT CAST(DUE_DAY AS INTEGER) id,CAST(DUE_DAY AS INTEGER) id1 FROM com_next_due_date_m WHERE rec_status='A' ");
		 if(stage.equalsIgnoreCase("LIM"))
			 query.append(" AND PRODUCT_CATEGORY=(select DEAL_PRODUCT_CATEGORY from cr_deal_loan_dtl where deal_id=(select LOAN_DEAL_ID from cr_loan_dtl where loan_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"')) ORDER BY id " );
		 if(stage.equalsIgnoreCase("DC"))
			 query.append(" AND PRODUCT_CATEGORY=(select DEAL_PRODUCT_CATEGORY from cr_deal_loan_dtl where deal_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"') ORDER BY id " );
		logger.info("getCycleDateList: "+query.toString());
		CodeDescVo branchVo=null;
		ArrayList baseRate = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getCycleDateList"+baseRate.size());
		query=null;
		for(int i=0;i<baseRate.size();i++){

			logger.info("getCycleDateList"+baseRate.get(i).toString());
			ArrayList baseRate1=(ArrayList)baseRate.get(i);
			if(baseRate1.size()>0)
			{
			    branchVo = new CodeDescVo();
				branchVo.setId((CommonFunction.checkNull(baseRate1.get(0))).trim());
				branchVo.setName((CommonFunction.checkNull(baseRate1.get(1))).trim());
				list.add(branchVo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}

		return list;
	}
	public ArrayList getCycleDueDay(String scheme,String stage) {
		ArrayList list=new ArrayList();
		try{
			StringBuilder query=new StringBuilder();
		 query.append("SELECT CAST(DUE_DAY AS INTEGER) id,CAST(DUE_DAY AS INTEGER) id1 FROM com_next_due_date_m WHERE rec_status='A' ");
		 if(stage.equalsIgnoreCase("DC"))
		 {
			 query.append("AND PRODUCT_CATEGORY=(select PRODUCT_CATEGORY from cr_scheme_m S left join  cr_product_m P on S.PRODUCT_ID=P.PRODUCT_ID ");
			 query.append("where S.SCHEME_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(scheme)).trim()+" ) ORDER BY id");
		 }
		 if(stage.equalsIgnoreCase("LIM"))
		 {
			 query.append(" AND PRODUCT_CATEGORY=(select DEAL_PRODUCT_CATEGORY from cr_deal_loan_dtl where DEAL_LOAN_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(scheme)).trim()+"') ORDER BY id " ); 
		 }
		logger.info("getCycleDueDay: "+query.toString());
		CodeDescVo branchVo=null;
		ArrayList baseRate = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getCycleDueDay"+baseRate.size());
		query=null;
		for(int i=0;i<baseRate.size();i++){

			logger.info("getCycleDueDay"+baseRate.get(i).toString());
			ArrayList baseRate1=(ArrayList)baseRate.get(i);
			if(baseRate1.size()>0)
			{
			    branchVo = new CodeDescVo();
				branchVo.setId((CommonFunction.checkNull(baseRate1.get(0))).trim());
				branchVo.setName((CommonFunction.checkNull(baseRate1.get(1))).trim());
				list.add(branchVo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}

		return list;
	}

	public ArrayList<Object> getSecurityDetailAllInDeal(String dealId,String functionId) {
		SecurityDepositVO appl = new SecurityDepositVO();
		ArrayList<Object> list = new ArrayList<Object>();
		 
		String tableName="cr_deal_sd_m";
		if(CommonFunction.checkNull(functionId).trim().equalsIgnoreCase("3000955"))
			tableName="cr_deal_sd_emi_calc_m";
		try {
			StringBuilder query=new StringBuilder();
			 query.append("select DEAL_LOAN_ID,DEAL_ID,SD_AMOUNT,SD_INTEREST_TYPE,SD_INTEREST_RATE,SD_COMPOUNDING_FREQ,SD_TENURE,SD_INTEREST,SD_ADJUSTMENT from "+tableName+" S "
					+ "where DEAL_ID=" + dealId);

			ArrayList appdetails = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getSecurityDetailAll" + appdetails.size());
			
			query=null;
			for (int i = 0; i < appdetails.size(); i++) {

				ArrayList adetails1 = (ArrayList) appdetails.get(i);
				for (int k = 0; k < adetails1.size(); k++) {

					appl = new SecurityDepositVO();
					appl.setTxnType((CommonFunction.checkNull(adetails1.get(0)).trim()));
					appl.setTxnId((CommonFunction.checkNull(adetails1.get(1)).trim()));
					
					if(!CommonFunction.checkNull(adetails1.get(2)).trim().equalsIgnoreCase(""))
    	    		{
						Number reconNum =myFormatter.parse((CommonFunction.checkNull(adetails1.get(2))).trim());  
	    	    		 appl.setSecurityAmount(myFormatter.format(reconNum));
    	    		}
					
					//appl.setSecurityAmount((CommonFunction.checkNull(adetails1.get(2)).trim()));
				
					if((CommonFunction.checkNull(adetails1.get(3)).trim()).equalsIgnoreCase("N"))
					{
						appl.setInterestType("NO");
					}
					else 	if((CommonFunction.checkNull(adetails1.get(3)).trim()).equalsIgnoreCase("S"))
					{
						appl.setInterestType("SIMPLE");
					}
					else 	if((CommonFunction.checkNull(adetails1.get(3)).trim()).equalsIgnoreCase("C"))
					{
						appl.setInterestType("COMPOUND");
					}
					
					if(!CommonFunction.checkNull(adetails1.get(4)).trim().equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(adetails1.get(4))).trim());  
	    	    		appl.setInterestRate(myFormatter.format(reconNum));
    	    		}
					//appl.setInterestRate((CommonFunction.checkNull(adetails1.get(4)).trim()));
					appl.setCompoundFrequency((CommonFunction.checkNull(adetails1.get(5)).trim()));
					appl.setTenure((CommonFunction.checkNull(adetails1.get(6)).trim()));
					if(!CommonFunction.checkNull(adetails1.get(7)).trim().equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(adetails1.get(7))).trim());  
	    	    		appl.setRelatedInterest(myFormatter.format(reconNum));
    	    		}
					appl.setSdAdjust((CommonFunction.checkNull(adetails1.get(8)).trim()));

				}

				list.add(appl);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		logger.info("Value of List is in dao is=" + list);
		return list;
	}


	public boolean deleteSecurityDepositInDeal(String[] id) {
		logger.info("In deleteSecurityDeposit. deleteSecurityDepositInDeal......." + id);
		boolean status = false;
		ArrayList queryList = new ArrayList();
		try {
			for (int k = 0; k < id.length; k++) {
				// PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
				StringBuffer bufInsSql = new StringBuffer();
				bufInsSql.append("DELETE FROM cr_deal_sd_m WHERE DEAL_ID="+id[k]);
				logger.info("### bufInsSql #### " + bufInsSql.toString());
				queryList.add(bufInsSql.toString());
				
				bufInsSql=null;
			}
			status = ConnectionDAO.sqlInsUpdDelete(queryList);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return status;
	}


	public boolean saveSecurityDepositInDeal(SecurityDepositVO vo) {
		SecurityDepositVO cv = (SecurityDepositVO) vo;
		ArrayList qryList = new ArrayList();
		StringBuffer bufInsSql = new StringBuffer();
		PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
		boolean status = false;
		logger.info("In saveSecurityDeposit.TXNID(dealId)"+vo.getDealId()+" and TXN_TYPE "+vo.getTxnType());
		try {
			StringBuilder loanDealQuery=new StringBuilder();
			 loanDealQuery.append("select ");
			 if(dbType.equalsIgnoreCase("MSSQL"))
				{
				 loanDealQuery.append(" TOP 1 ");
				}
			 loanDealQuery.append(" DEAL_LOAN_ID from cr_deal_loan_dtl where DEAL_ID="+vo.getDealId()+" ");
			 if(!dbType.equalsIgnoreCase("MSSQL") && dbo.equalsIgnoreCase(""))
				{
				 loanDealQuery.append(" limit 1");
				}
			logger.info("query "+loanDealQuery.toString());
			String loanDealId=ConnectionDAO.singleReturn(loanDealQuery.toString());
			
			logger.info("loanDealId "+loanDealId);
			loanDealQuery=null;
			
			StringBuilder q1=new StringBuilder();
			 q1.append("select count(*) from cr_deal_sd_m where DEAL_ID="+vo.getDealId());
			logger.info("query "+q1);
			String status1=ConnectionDAO.singleReturn(q1.toString());
			
			q1=null;
			
		if(status1.equalsIgnoreCase("0"))
		{
			bufInsSql.append("Insert into cr_deal_sd_m(DEAL_LOAN_ID,DEAL_ID,SD_AMOUNT,SD_INTEREST_TYPE,SD_INTEREST_RATE,SD_COMPOUNDING_FREQ,SD_TENURE,SD_INTEREST,SD_ADJUSTMENT,REC_STATUS,MAKER_ID,MAKER_DATE)");

			bufInsSql.append(" values ( ");
			bufInsSql.append(" '"+loanDealId+"',");
			bufInsSql.append(" ?,");
			bufInsSql.append(" ?,");
			bufInsSql.append(" ?,");
			bufInsSql.append(" ?,");
			bufInsSql.append(" ?,");
			bufInsSql.append(" ?,");
			bufInsSql.append(" ?,");
			bufInsSql.append(" ?,");
			bufInsSql.append(" 'P',");
			bufInsSql.append(" ?,");
			//bufInsSql.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND) )");
			bufInsSql.append(dbo);
			bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) )");
			
			if (CommonFunction.checkNull(cv.getDealId()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getDealId()).trim()));

			
			if (CommonFunction.checkNull(cv.getSecurityAmount()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(cv.getSecurityAmount()).trim())).toString());
			
			
			if (CommonFunction.checkNull(cv.getInterestType()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getInterestType()).trim()));
			
			if (CommonFunction.checkNull(cv.getInterestRate()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(cv.getInterestRate()).trim())).toString());
					
			logger.info("Compound Fre: " +cv.getCompoundFrequency());
			if (CommonFunction.checkNull(cv.getCompoundFrequency()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getCompoundFrequency()).trim()));
			if (CommonFunction.checkNull(cv.getTenure()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getTenure()).trim()));

			
			
			if (CommonFunction.checkNull(cv.getRelatedInterest()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(cv.getRelatedInterest()).trim())).toString());

			
			if (CommonFunction.checkNull(cv.getSdAdjust()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getSdAdjust()).trim()));

			
			if (CommonFunction.checkNull(cv.getUserId()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getUserId()).trim()));

			if (CommonFunction.checkNull(cv.getBussinessDate()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getBussinessDate()).trim()));

			logger.info("ibufInsUpdSql.toString()" + bufInsSql.toString());
			insertPrepStmtObject.setSql(bufInsSql.toString());

			logger.info("IN security deposit insert query1 ### "+ insertPrepStmtObject.printQuery());

			qryList.add(insertPrepStmtObject);
			status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			logger.info("In security deposit......................" + status);
		 }
		else
		{
			bufInsSql.append("update cr_deal_sd_m set SD_INTEREST_TYPE=?,SD_INTEREST_RATE=?,SD_COMPOUNDING_FREQ=?,SD_INTEREST=?,SD_AMOUNT=?, SD_ADJUSTMENT=?,SD_TENURE=?,MAKER_ID=?,MAKER_DATE=");
			//bufInsSql.append("DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND)");
			bufInsSql.append(dbo);
			bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ");
			bufInsSql.append(" where DEAL_ID=?");
			
			if (CommonFunction.checkNull(cv.getInterestType()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getInterestType()).trim()));
			if (CommonFunction.checkNull(cv.getInterestRate()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(cv.getInterestRate()).trim())).toString());
			if (CommonFunction.checkNull(cv.getCompoundFrequency()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getCompoundFrequency()).trim()));
			
			if (CommonFunction.checkNull(cv.getRelatedInterest()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(cv.getRelatedInterest()).trim())).toString());
			
			if (CommonFunction.checkNull(cv.getSecurityAmount()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(cv.getSecurityAmount()).trim())).toString());
			
			if (CommonFunction.checkNull(cv.getSdAdjust()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getSdAdjust()).trim()));
			
			
			if (CommonFunction.checkNull(cv.getTenure()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getTenure()).trim()));
			//==========================================================
			if (CommonFunction.checkNull(cv.getUserId()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getUserId()).trim()));
		

			if (CommonFunction.checkNull(cv.getBussinessDate()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getBussinessDate()).trim()));			
			//==========================================================
		

			if (CommonFunction.checkNull(cv.getDealId()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getDealId()).trim()));


			logger.info("ibufInsUpdSql.toString()" + bufInsSql.toString());
			insertPrepStmtObject.setSql(bufInsSql.toString());

			logger.info("IN security Deposit update query1 ### "+ insertPrepStmtObject.printQuery());

			qryList.add(insertPrepStmtObject);
			status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			logger.info("In security Deposit......................" + status);
			
			bufInsSql=null;
		}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return status;
	}


	public boolean saveInstallPlanInDeal(InstallmentPlanForCMVO ipvo) {
		logger.info("In saveInstallPlan");
			String FromInstallment[] = ipvo.getFromInstall();
			logger.info("In FromInstallment.................."+ipvo.getFromInstall());
			logger.info("In FromInstallment....."+FromInstallment.length);
			String ToInstallment[] = ipvo.getToInstall();
			logger.info("In ToInstallment.................."+ToInstallment.length);
			String RecoveryPercen[] = ipvo.getRecoveryPer();
			logger.info("In RecoveryPercen.................."+RecoveryPercen.length);
			String InstallmentType= ipvo.getInstallmentType();
			logger.info("In saveInstallPlan.................."+ipvo.getInstallmentType());
			String TotalInstallment=ipvo.getTotalInstallment();
			logger.info("In saveInstallPlan.................."+ipvo.getTotalInstallment());
			String toInstallment = ipvo.getToInstallment();	
			logger.info("In toInstallment.................."+toInstallment);
			String prinAmount[] = ipvo.getPrincipalAmount();
   			logger.info("In prinAmount.................."+prinAmount.length);
   			String instalAmount[] = ipvo.getInstallmentAmount();
   			logger.info("In instalAmount.................."+instalAmount.length);
   			String loanId = ipvo.getLoanId();
   			logger.info("loanId........."+loanId);
   			
			ArrayList qryList=new ArrayList();
			boolean status=false;
			try {
				 PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
				 StringBuffer bufInsSql =	new StringBuffer();
				 StringBuilder checkQ=new StringBuilder();
				    checkQ.append("select count(*) from cr_deal_installment_plan where DEAL_ID="+(CommonFunction.checkNull(ipvo.getDealId()).trim())+"");
				   logger.info("In...saveInstallPlanInDeal"+checkQ.toString());
				    String count=ConnectionDAO.singleReturn(checkQ.toString());
				   
				   checkQ=null;
				   
				   if(!count.equalsIgnoreCase("0"))
					  { 
					  insertPrepStmtObject = new PrepStmtObject();
					  StringBuilder qry=new StringBuilder();
					  qry.append("DELETE FROM cr_deal_installment_plan WHERE DEAL_ID='"+(CommonFunction.checkNull(ipvo.getDealId()).trim())+ "'");

					  logger.info("In...saveInstallPlanInDeal...qry"+qry.toString());
				     insertPrepStmtObject.setSql(qry.toString());
					 qryList.add(insertPrepStmtObject);
					// ConnectionDAO.sqlInsUpdDelete(qryList);
					  
					 qry=null;
					  }
			
				 for(int k=0;k<FromInstallment.length;k++)  
				{
					bufInsSql =	new StringBuffer();
			     insertPrepStmtObject = new PrepStmtObject();
				  
				
				  insertPrepStmtObject = new PrepStmtObject();
					bufInsSql.append("insert into cr_deal_installment_plan (DEAL_ID,DEAL_LOAN_ID,FROM_INSTL_NO,TO_INSTL_NO,RECOVERY_PERCENT,PRINCIPAL_AMOUNT,INSTALLMENT_AMOUNT,REC_STATUS,SEQ_NO,RECOVERY_TYPE,MAKER_ID,MAKER_DATE) values(?,?,?,?,?,?,?,?,?,?,?,");
					//bufInsSql.append("DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND))");
					bufInsSql.append(dbo);
					bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9)) ");
					
					if(CommonFunction.checkNull(ipvo.getDealId()).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(ipvo.getDealId().trim()); //deal Id
					
					if(CommonFunction.checkNull(ipvo.getLoanId()).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(ipvo.getLoanId().trim());   // loan Id
					
					if(CommonFunction.checkNull(FromInstallment[k]).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(FromInstallment[k].trim()); //From Installment
					
			    	if(CommonFunction.checkNull(ToInstallment[k]).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
					insertPrepStmtObject.addString(ToInstallment[k].trim());// To Installment 
			    	
			    	 if((CommonFunction.checkNull(RecoveryPercen[k])).trim().equalsIgnoreCase(""))
			        		insertPrepStmtObject.addString("0.00");
					else
					 insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(RecoveryPercen[k]).trim())).toString());
			    	 
			    	 if((CommonFunction.checkNull(prinAmount[k])).trim().equalsIgnoreCase(""))
			        		insertPrepStmtObject.addString("0.00");
					else
					 insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(prinAmount[k]).trim())).toString());// PRINCIPAL_AMOUNT   	
			    	if((CommonFunction.checkNull(instalAmount[k])).trim().equalsIgnoreCase(""))
		        		insertPrepStmtObject.addString("0.00");
				     else
				    insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(instalAmount[k]).trim())).toString());// INSTALLMENT_AMOUNT	
			    	insertPrepStmtObject.addString("P");// REC_STATUS   	   	
									
			    	insertPrepStmtObject.addString(""+(k+1));// To Installment 
			    	
			    	if(CommonFunction.checkNull(ipvo.getRecoveryType()).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
					insertPrepStmtObject.addString(ipvo.getRecoveryType().trim());// RECOVERY_TYPE
			    	//============================================================
			    	if (CommonFunction.checkNull(ipvo.getMakerId()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((CommonFunction.checkNull(ipvo.getMakerId()).trim()));

					
					if (CommonFunction.checkNull(ipvo.getMakerDate()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((CommonFunction.checkNull(ipvo.getMakerDate()).trim()));
			    	//============================================================
			    	
				  
				 	insertPrepStmtObject.setSql(bufInsSql.toString());
					 logger.info("IN saveInstallPlan() insert query1 ### "+insertPrepStmtObject.printQuery());
					qryList.add(insertPrepStmtObject);
					bufInsSql=null;
				  
				}
				
				
					status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
				} catch (Exception e) {
					e.printStackTrace();
				}
			     logger.info("In saveInstallPlan......................"+status);
			return status;
	}


	public boolean updateInstallPlanInDeal(InstallmentPlanForCMVO ipvo) {
		logger.info("In updateInstallPlanInDeal");
		String FromInstallment[] = ipvo.getFromInstall();
		logger.info("In FromInstallment.................."+ipvo.getFromInstall());
		logger.info("In FromInstallment....."+FromInstallment.length);
		String ToInstallment[] = ipvo.getToInstall();
		logger.info("In ToInstallment.................."+ToInstallment.length);
		String RecoveryPercen[] = ipvo.getRecoveryPer();
		logger.info("In RecoveryPercen.................."+RecoveryPercen.length);
		String InstallmentType= ipvo.getInstallmentType();
		logger.info("In saveInstallPlan.................."+ipvo.getInstallmentType());
		String TotalInstallment=ipvo.getTotalInstallment();
		logger.info("In saveInstallPlan.................."+ipvo.getTotalInstallment());
		String toInstallment = ipvo.getToInstallment();	
		logger.info("In toInstallment.................."+toInstallment);
		ArrayList qryList=new ArrayList();
		boolean status=false;
		try {
		
			 for(int k=0;k<FromInstallment.length;k++)  
			{
			  PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
			   StringBuffer bufInsSql =	new StringBuffer();
			   
			   bufInsSql.append("update cr_deal_installment_plan set FROM_INSTL_NO=?,TO_INSTL_NO=?,RECOVERY_PERCENT=?,PRINCIPAL_AMOUNT='0',INSTALLMENT_AMOUNT='0',REC_STATUS='P' where DEAL_ID=? ");
					
					if(CommonFunction.checkNull(FromInstallment[k]).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(FromInstallment[k].trim()); //From Installment
					
			    	if(CommonFunction.checkNull(ToInstallment[k]).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(ToInstallment[k].trim());// To Installment
					
			    	if((CommonFunction.checkNull(RecoveryPercen[k])).trim().equalsIgnoreCase(""))
			    		insertPrepStmtObject.addString("0.00");
					else
						insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(RecoveryPercen[k]).trim())).toString());
					
					if(CommonFunction.checkNull(ipvo.getDealId()).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(ipvo.getDealId().trim());   // loan Id
					   						
				insertPrepStmtObject.setSql(bufInsSql.toString());
				 logger.info("IN updateInstallPlan() insert query1 ### "+insertPrepStmtObject.printQuery());
				qryList.add(insertPrepStmtObject);
				bufInsSql=null;
			  
			}
			
			
				status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			} catch (Exception e) {
				e.printStackTrace();
			}
		     logger.info("In updateInstallPlan......................"+status);
		return status;
	}

	public String generateRepyScheduleInDeal(String dealId,String makerId) {
		boolean status=false;
		CallableStatement cst=null;
		Connection con=ConnectionDAO.getConnection();
		logger.info("Deal id: "+dealId);
		String procval="Noresult";
		try {
			StringBuilder productQuery=new StringBuilder();
			 productQuery.append("select DEAL_LOAN_ID from cr_deal_loan_dtl where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
			logger.info("productQuery: "+productQuery.toString());
			ArrayList productList=ConnectionDAO.sqlSelect(productQuery.toString());
			
			productQuery=null;
			 for(int i=0;i<productList.size();i++)
			  {
				  ArrayList subproductList=(ArrayList)productList.get(i);
				  if(subproductList.size()>0)
				  {
					logger.info("loanDeal Id: "+CommonFunction.checkNull(subproductList.get(0)));
					con.setAutoCommit(false);
					cst=con.prepareCall("{call Generate_Repayment_schedule(?,?,?,?,?)}");
					cst.setString(1, "DC");
					cst.setString(2, CommonFunction.checkNull(subproductList.get(0)));
					cst.setString(3, makerId);
					cst.registerOutParameter(4, Types.CHAR);
					cst.registerOutParameter(5, Types.CHAR);
					cst.execute();
					String s1= cst.getString(4);
					String s2 = cst.getString(5);
					
					if(s1!=null && s1.equalsIgnoreCase("S"))
					{
						status=true;
						con.commit();
						procval=s1;
					}
					else
					{
						procval=s2;
						con.rollback();
					}
					logger.info("status: "+status);
					logger.info("s2: "+s2);
				  }
			  }
		} catch (Exception e) {
			try {
				con.rollback();
			} catch (SQLException e1) {
				logger.info("Roll back in generateRepySchedule: "+e1);
				e1.printStackTrace();
			}
			e.printStackTrace();
		}
		finally
		{
			try {
				con.commit();
				con.close();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
		return procval;
	}


	public ArrayList getFromLoanDtlInDeal(String dealId) {
		ArrayList list = new ArrayList();

		logger.info("In getFromLoanDtlInDeal: ");
		
		ArrayList mainlist = new ArrayList();
		ArrayList subList = new ArrayList();

		try {
			StringBuilder query =new StringBuilder();
			 query.append("select DEAL_RATE_METHOD,DEAL_FLAT_RATE,DEAL_EFF_RATE,DEAL_IRR1,DEAL_IRR2, UPFRONT_ROUNDING_AMOUNT " +
					" from cr_deal_loan_dtl where DEAL_ID="+dealId);
			logger.info("Query in getFromLoanDtlInDeal-----" + query.toString());
			StringBuilder bussIrrQ =new StringBuilder();
			 bussIrrQ.append("select DEAL_BUSINESS_IRR from cr_deal_loan_dtl where DEAL_ID=(select LOAN_DEAL_ID from cr_loan_dtl where LOAN_ID="+dealId+")");
			logger.info("Query in getFromLoanDtlInDeal--DEAL_BUSINESS_IRR---" + bussIrrQ.toString());
			String bussIrr=ConnectionDAO.singleReturn(bussIrrQ.toString());
			logger.info("Query in getFromLoanDtlInDeal--bussIrr---" + bussIrr);
			mainlist = ConnectionDAO.sqlSelect(query.toString());
			
			query=null;
			bussIrrQ=null;

			for (int i = 0; i < mainlist.size(); i++) {
				
				subList = (ArrayList) mainlist.get(i);
				RepayScheduleVo repvo = new RepayScheduleVo();
				if (subList.size()> 0) {
					
                    
					repvo.setLoanRateMethod((CommonFunction.checkNull(subList.get(0)).trim()));
					if(!CommonFunction.checkNull(subList.get(1)).trim().equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subList.get(1))).trim());  
	    	    		repvo.setFinalRate(myFormatter.format(reconNum));
    	    		}
					//repvo.setFinalRate((CommonFunction.checkNull(subList.get(1)).trim()));
					//logger.info("Final Rate: "+CommonFunction.checkNull(subList.get(1)));
					if(!CommonFunction.checkNull(subList.get(2)).trim().equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subList.get(2))).trim());  
	    	    		repvo.setEffectiveRate(myFormatter.format(reconNum));
    	    		}
					//repvo.setEffectiveRate((CommonFunction.checkNull(subList.get(2)).trim()));
					if(!CommonFunction.checkNull(subList.get(3)).trim().equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subList.get(3))).trim());  
	    	    		repvo.setMktIRR1(myFormatter.format(reconNum));
    	    		}
					//repvo.setMktIRR1((CommonFunction.checkNull(subList.get(3)).trim()));
					if(!CommonFunction.checkNull(subList.get(4)).trim().equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subList.get(4))).trim());  
	    	    		repvo.setMktIRR2(myFormatter.format(reconNum));
    	    		}
					// add by saorabh
					if(!CommonFunction.checkNull(subList.get(5)).trim().equalsIgnoreCase(""))
		    		{
	    	    		Number UPFRONT_ROUNDING_AMOUNT =myFormatter.parse((CommonFunction.checkNull(subList.get(5))).trim());  
	    	    		repvo.setUpfrontRoundingAmount(myFormatter.format(UPFRONT_ROUNDING_AMOUNT));
		    		}
					else
					repvo.setUpfrontRoundingAmount("0.00");
					// end by saorabh
					//repvo.setMktIRR2((CommonFunction.checkNull(subList.get(4)).trim()));
					if((CommonFunction.checkNull(subList.get(0)).trim()).equalsIgnoreCase("E"))
                    {
						repvo.setFinalRate("");
                    }
					repvo.setBussIrr(bussIrr);
				
				}
				list.add(repvo);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return list;
	}


	public ArrayList getRepaySchedInDeal(String dealId) {
		ArrayList list = new ArrayList();

		logger.info("In getRepaySched: ");
		
		ArrayList mainlist = new ArrayList();
		ArrayList subList = new ArrayList();

		try {

			StringBuilder query =new StringBuilder();
			 query.append("select INSTL_NO,");
			 query.append(dbo);
			 query.append("DATE_FORMAT(INSTL_DATE,'"+dateFormat+"'),INSTL_AMOUNT,PRIN_COMP,INT_COMP,EXCESS_INT," );
			 query.append(" case when ADV_FLAG='Y' then 'YES' else 'NO' end ,PRIN_OS,OTHER_CHARGES from cr_deal_repaysch_dtl where DEAL_ID="+dealId);
			
			logger.info("Query in getRepaySched-----" + query.toString());
			mainlist = ConnectionDAO.sqlSelect(query.toString());
			
			query=null;

			for (int i = 0; i < mainlist.size(); i++) {
				subList = (ArrayList) mainlist.get(i);
				RepayScheduleVo repvo = new RepayScheduleVo();
				if (subList.size() > 0) {

					
					repvo.setInstNo((CommonFunction.checkNull(subList.get(0)).trim()));
					repvo.setDueDate((CommonFunction.checkNull(subList.get(1)).trim()));
					
					if(!CommonFunction.checkNull(subList.get(2)).trim().equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subList.get(2))).trim());  
	    	    		repvo.setInstAmount(myFormatter.format(reconNum));
    	    		}
					
					//repvo.setInstAmount((CommonFunction.checkNull(subList.get(2)).trim()));
					if(!CommonFunction.checkNull(subList.get(3)).trim().equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subList.get(3))).trim());  
	    	    		repvo.setPrinciple(myFormatter.format(reconNum));
    	    		}
					//repvo.setPrinciple((CommonFunction.checkNull(subList.get(3)).trim()));
					if(!CommonFunction.checkNull(subList.get(4)).trim().equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subList.get(4))).trim());  
	    	    		repvo.setInstCom(myFormatter.format(reconNum));
    	    		}
					//repvo.setInstCom((CommonFunction.checkNull(subList.get(4)).trim()));
					if(!CommonFunction.checkNull(subList.get(5)).trim().equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subList.get(5))).trim());  
	    	    		repvo.setExcess(myFormatter.format(reconNum));
    	    		}
					
					//repvo.setExcess((CommonFunction.checkNull(subList.get(5)).trim()));
					repvo.setAdvFlag((CommonFunction.checkNull(subList.get(6)).trim()));
					if(!CommonFunction.checkNull(subList.get(7)).trim().equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subList.get(7))).trim());  
	    	    		repvo.setPrinOS(myFormatter.format(reconNum));
    	    		}
					//repvo.setPrinOS((CommonFunction.checkNull(subList.get(7)).trim()));
					if(!CommonFunction.checkNull(subList.get(8)).trim().equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subList.get(8))).trim());  
	    	    		repvo.setOtherCharges(myFormatter.format(reconNum));
    	    		}
					else
					{
						repvo.setOtherCharges("0.00");
					}
					
					
				
				}
				list.add(repvo);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return list;
	}


	public ArrayList<Object> getDealCatList() {
		ArrayList<Object> list=new ArrayList<Object>();
		try{
			StringBuilder query =new StringBuilder();
		 query.append("SELECT M.VALUE,M.DESCRIPTION FROM generic_master M,generic_master_keys K WHERE K.GENERIC_KEY='DEAL_CATEGORY' AND K.GENERIC_KEY=M.GENERIC_KEY and m.REC_STATUS='A'");
		logger.info("getDealCatList"+query.toString());
		CodeDescVo vo = null;
		ArrayList source = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getDealCatList"+source.size());
		query=null;
		
		for(int i=0;i<source.size();i++){

			logger.info("getDealCatList"+source.get(i).toString());
			ArrayList subsource=(ArrayList)source.get(i);
			if(subsource.size()>0)
			{
				logger.info("getDealCatList"+subsource.size());
				vo = new CodeDescVo();
				vo.setId((CommonFunction.checkNull(subsource.get(0))).trim());
				vo.setName((CommonFunction.checkNull(subsource.get(1))).trim());
				list.add(vo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}


	public boolean deleteApplDocs(String dealId, String[] dealLoanId) {
		logger.info("deleteApplDocs for deleteApplDocs....dealLoanId.."+dealLoanId+" dealId "+dealId);
		boolean status = false;
    	try
    	{
    	qryList = new ArrayList();
    	bufInsUpdSql = new StringBuffer();
	
		for(int k=0;k<dealLoanId.length;k++)
		{
			StringBuilder deleteChatge =new StringBuilder();
			 deleteChatge.append("delete from cr_document_dtl where TXN_TYPE='DC' AND STAGE_ID='PRS' AND DOC_TYPE='APPL' AND  TXNID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+" and ENTITY_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
			logger.info("delete query:deleteChatge "+deleteChatge.toString());
			qryList.add(deleteChatge);
			
			deleteChatge=null;
		
		}
		            
		status=ConnectionDAO.sqlInsUpdDelete(qryList);
		logger.info("Status of Deletion is ="+status);
	    }
    	catch(Exception e)
    	{
		e.printStackTrace();
	}
	return status;
	}


	public boolean deleteCollateralAssetDocs(String CommonId, String assetId[],
			String type[],String tabType) {
		logger.info("deleteApplDocs for deleteApplDocs....asset id.."+assetId+" dealId/LOANiD "+CommonId+" type: "+type+"From deal/loan stage: "+tabType);
		boolean status = false;
    	try
    	{
    	qryList = new ArrayList();
    	bufInsUpdSql = new StringBuffer();
	
		for(int k=0;k<assetId.length;k++)
		{
			if(tabType.equalsIgnoreCase("D"))
			{
				StringBuilder deleteCharge =new StringBuilder();
				 deleteCharge.append("delete from cr_document_dtl where TXN_TYPE='DC' AND STAGE_ID='PRS' AND DOC_TYPE='"+type[k]+"' AND  TXNID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(CommonId)).trim()+" and ENTITY_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(assetId[k])).trim());
				logger.info("delete query:deletedocs/Deal Stage "+deleteCharge.toString());
				qryList.add(deleteCharge);
				
				deleteCharge=null;
			}
			else if(tabType.equalsIgnoreCase("L"))
			{
				StringBuilder updatePrsDocs =new StringBuilder();
                updatePrsDocs.append("update cr_document_dtl set rec_status='X' where TXN_TYPE='DC' AND STAGE_ID='PRS' AND  TXNID=(select DISTINCT LOAN_DEAL_ID from cr_loan_dtl where loan_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(CommonId)).trim()+"') and ENTITY_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(assetId[k])).trim()+"'");
                logger.info("updatePrsDocs/Loan satge "+updatePrsDocs.toString());
                qryList.add(updatePrsDocs);

				StringBuilder deleteCharge =new StringBuilder();
				 deleteCharge.append("delete from cr_document_dtl where TXN_TYPE='LIM' AND STAGE_ID='PRD' AND  TXNID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(CommonId)).trim()+" and ENTITY_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(assetId[k])).trim());
				logger.info("delete query:deletedocs/Loan satge "+deleteCharge.toString());
				qryList.add(deleteCharge);
				
				deleteCharge=null;
			}
		
		}
		            
		status=ConnectionDAO.sqlInsUpdDelete(qryList);
		logger.info("Status of Deletion is ="+status);
	    }
    	catch(Exception e)
    	{
		e.printStackTrace();
	}
	return status;
	}



	public int dealExisForBuySupp(BuyerVo sh) {
	
	//	ArrayList<Object> list=new ArrayList<Object>();
		int count=0;
		String countStr="";
		
		try{
			StringBuilder query =new StringBuilder();
		 query.append("select count(1) from cr_deal_buyer_supplier_dtl where deal_id='"+sh.getDealId()+"'");
		logger.info("dealExisForBuySupp"+query.toString());		
		countStr = ConnectionDAO.singleReturn(query.toString());
	     logger.info(countStr+"-----countStr");
	
	     count =Integer.parseInt(countStr);
	     logger.info(count+"-----count");
	     query=null;
		}catch(Exception e){
			e.printStackTrace();
		}
		
		
		return count;
	}


	public boolean forwardDealforbuySupp(BuyerVo sh) {
		ArrayList qryList = new ArrayList();
		logger.info("forwardDealforbuySupp");
		boolean status = false;
    	try
    	{    
    		StringBuilder updateDeal =new StringBuilder();
	       updateDeal.append("update cr_deal_buyer_supplier_dtl set REC_STATUS='A' where deal_id='"+sh.getDealId()+"'");
	       logger.info("query-------- "+updateDeal.toString());
	      qryList.add(updateDeal);			
		StringBuilder updateOtherQuery =new StringBuilder();
	  	updateOtherQuery.append("update cr_deal_other_relation_dtl set REC_STATUS='A', AUTHOR_ID='"+sh.getUserId()+"', AUTHOR_DATE= " );
	  	updateOtherQuery.append(dbo);
	  	updateOtherQuery.append("STR_TO_DATE('"+sh.getMakerDate()+"','"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ");
	  	updateOtherQuery.append("where deal_id='"+sh.getDealId()+"'");
	  	logger.info("updateOtherQuery-------- "+updateOtherQuery.toString());
	  	qryList.add(updateOtherQuery);	
	  	
		status=ConnectionDAO.sqlInsUpdDelete(qryList);
		logger.info("Status of Deletion is ="+status);
		updateDeal=null;
	    }
    	catch(Exception e)
    	{
		e.printStackTrace();
	}
	return status;
	}

	
	
	public ArrayList retriveLeadInfoValues(String lbxLeadNo){
		
		logger.info("lead Id in retriveLeadInfoValues "+lbxLeadNo);
		ArrayList<Object> list=new ArrayList<Object>();
		
		try{
			StringBuilder query =new StringBuilder();
		 query.append("select ");
		 query.append("ISNULL(l.SOURCE_TYPE,''),");
		 query.append("ISNULL(l.SOURCE_NAME,''),");
		 query.append("ISNULL(l.SOURCE_CODE,''),");
		 query.append("ISNULL(l.LEAD_SERVICING_RM,''),");
		 query.append("ISNULL((SELECT A.USER_NAME FROM  sec_user_m A WHERE LEAD_SERVICING_RM=A.USER_ID),'')AS rmName," );
		 query.append("ISNULL(l.AREA_CODE,''),");
		 query.append("ISNULL((SELECT B.AREA_CODE_NAME FROM com_areacode_m B WHERE B.AREA_CODE=l.AREA_CODE),'')AS areaCodeName,");
		 query.append("ISNULL(l.SOURCE,''),");
		 query.append("ISNULL((SELECT distinct DESCRIPTION FROM generic_master WHERE VALUE=l.SOURCE and generic_key='SOURCE_TYPE'),'') DESCRIPTION,");
		 query.append("ISNULL(l.SOURCE_DESCRIPTION,'') " );
		 query.append(" ,CASE ISNULL(l.SOURCE_TYPE,'') WHEN 'RM' THEN  'RM / SALES EXEC' WHEN  'VENDOR' THEN 'DEALER' WHEN 'BRANCH' THEN 'TELECALLER' WHEN 'RO' THEN 'RM / SALES EXEC' WHEN 'OTHERS' THEN 'OTHERS' ELSE ISNULL(l.SOURCE_TYPE,'') END AS SOURCE_TYPE_DESC  ");
		 query.append(" from cr_lead_dtl l where l.REC_STATUS='A'  and LEAD_ID= "+lbxLeadNo);
		logger.info("retriveLeadInfoValues :Query "+query.toString());		
		LeadCaptureVo vo=null;
		ArrayList roleList = ConnectionDAO.sqlSelect(query.toString());
		
		logger.info("retriveLeadInfoValues "+roleList.size());
		
		query=null;
		
		for(int i=0;i<roleList.size();i++){
			ArrayList data=(ArrayList)roleList.get(i);
			if(data.size()>0)
			{
				vo =new LeadCaptureVo();
				//vo.setRoleId((CommonFunction.checkNull(data.get(0))));
				vo.setSourceType((CommonFunction.checkNull(data.get(0)).toString()));
				vo.setSourceName((CommonFunction.checkNull(data.get(1)).toString()));
				vo.setSourceCode((CommonFunction.checkNull(data.get(2)).toString()));
				vo.setDealRm((CommonFunction.checkNull(data.get(3)).toString()));
				vo.setDealRmName((CommonFunction.checkNull(data.get(4)).toString()));
				vo.setLbxareaCodeVal((CommonFunction.checkNull(data.get(5)).toString()));
				vo.setAreaCodename((CommonFunction.checkNull(data.get(6)).toString()));
				vo.setSource((CommonFunction.checkNull(data.get(7)).toString()));
				vo.setLovSourceDes((CommonFunction.checkNull(data.get(8)).toString()));
				vo.setSourcedesc((CommonFunction.checkNull(data.get(9)).toString()));
				vo.setSourceTypeDesc((CommonFunction.checkNull(data.get(10)).toString()));
				list.add(vo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}


	public boolean saveBuyersupplierAuthorDetails(BuyerVo sh) {
		logger.info("saveBuyersupplierAuthorDetails");
		boolean status = false;
		StringBuilder query =new StringBuilder();
    	try
    	{
    	qryList = new ArrayList();

	if((sh.getDecision()).equalsIgnoreCase("A")){
		
		  query.append("update cr_deal_buyer_supplier_dtl set rec_status='A' where DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getDealId())).trim()+"'");
		qryList.add(query);
	}else{
		
		  query.append("update cr_deal_buyer_supplier_dtl set rec_status='X' where DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getDealId())).trim()+"'");
			qryList.add(query);
	}
		
			
		
		
        logger.info("delete query: "+query.toString());
        
		status=ConnectionDAO.sqlInsUpdDelete(qryList);
		logger.info("Status of Deletion is ="+status);
	    }
    	catch(Exception e)
    	{
		e.printStackTrace();
	}
    	finally
    	{
    		query=null;
    	}

	return status;
	
	}
	
	

	

public ArrayList<FieldVerificationVo> searchDealDetailforBuyerSuppAuthor(FieldVerificationVo vo,HttpServletRequest request) {
		
		ArrayList<FieldVerificationVo> list = new ArrayList<FieldVerificationVo>();
		logger.info("In searchDealDetailforBuyerSuppAuthor");
		try
		{
			ArrayList header=null;
			int count=0;
			int startRecordIndex=0;
			int endRecordIndex = no;
			FieldVerificationVo fieldVo= (FieldVerificationVo) vo;
			boolean appendSQL=false;
			
			
			StringBuffer bufInsSql=new StringBuffer();
			StringBuffer bufInsSqlTempCount = new StringBuffer();
			
			StringBuilder dealNo=new StringBuilder();
			StringBuilder appDate=new StringBuilder();
			StringBuilder custName=new StringBuilder();
			StringBuilder productId=new StringBuilder();
			StringBuilder schemeId=new StringBuilder();
			StringBuilder initDate=new StringBuilder();
			 dealNo.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim()));
			 appDate.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationDate())).trim()));
			 custName.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomerName())).trim()));
			 productId.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim()));
			 schemeId.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim()));
			 initDate.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getInitiationDate())).trim()));
			 
			bufInsSql.append(" select distinct d.DEAL_ID,d.DEAL_NO,deal.CUSTOMER_NAME,");
			bufInsSql.append(dbo);
			bufInsSql.append("DATE_FORMAT(d.MAKER_DATE,'"+dateFormat+"'),p.PRODUCT_DESC,s.SCHEME_DESC,");
			bufInsSqlTempCount.append(" select distinct count(1) from (select distinct d.DEAL_ID,d.DEAL_NO,deal.CUSTOMER_NAME,d.MAKER_DATE,p.PRODUCT_DESC,s.SCHEME_DESC,");
			bufInsSql.append(" CASE WHEN d.REC_STATUS='F' THEN 'Pending' end as rsstatus,D.DEAL_RM,");
			bufInsSql.append(dbo);
			bufInsSql.append("DATE_FORMAT(D.DEAL_DATE,'"+dateFormat+"')");
			bufInsSqlTempCount.append(" CASE  WHEN d.REC_STATUS='F' THEN 'Pending' end as rsstatus,D.DEAL_RM,");
			bufInsSqlTempCount.append(dbo);
			bufInsSqlTempCount.append("DATE_FORMAT(D.DEAL_DATE,'"+dateFormat+"')");
		//	bufInsSql.append(" from cr_deal_dtl d left join cr_deal_verification_dtl dv on d.DEAL_ID=dv.DEAL_ID ");
			//bufInsSqlTempCount.append(" from cr_deal_dtl d left join cr_deal_verification_dtl dv on d.DEAL_ID=dv.DEAL_ID ");
			bufInsSql.append(" from cr_deal_dtl d left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID "); 
			bufInsSqlTempCount.append(" from cr_deal_dtl d left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID "); 
			bufInsSql.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID "); 
			bufInsSqlTempCount.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID "); 
			bufInsSql.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID Where d.REC_STATUS='F' and d.deal_id in(select DEAL_ID from cr_deal_buyer_supplier_dtl where rec_status='F') "); 
			bufInsSqlTempCount.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID Where d.REC_STATUS='F' and d.deal_id in(select DEAL_ID from cr_deal_buyer_supplier_dtl where rec_status='F') "); 
//			bufInsSql.append(" and d.DEAL_ID not in(select DEAL_ID from cr_deal_verification_dtl where REC_STATUS='F')");
//			bufInsSqlTempCount.append(" and d.DEAL_ID not in(select DEAL_ID from cr_deal_verification_dtl where REC_STATUS='F') ");
			
			if((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")) &&(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomerName()).trim()).equalsIgnoreCase(""))&&(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase(""))&&(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase(""))&&(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getInitiationDate()).trim()).equalsIgnoreCase("")))
			{
				
		   	  bufInsSqlTempCount.append(") as b");
			}
			
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase(""))) &&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomerName()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getInitiationDate()).trim()).equalsIgnoreCase(""))))
			{
		   	  bufInsSql.append("WHERE d.DEAL_ID='"+dealNo+"' AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomerName()).trim()+"%' AND p.PRODUCT_ID='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND s.SCHEME_ID='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND ");
		   	  bufInsSql.append(dbo);
		   	  bufInsSql.append("date(d.MAKER_DATE) =");
		   	  bufInsSql.append(dbo);
			  bufInsSql.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getInitiationDate()).trim()+"','"+dateFormat+"')");
		   	  bufInsSqlTempCount.append("WHERE d.DEAL_ID='"+dealNo+"' AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomerName()).trim()+"%' AND p.PRODUCT_ID='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND s.SCHEME_ID='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND ");
		   	  bufInsSqlTempCount.append(dbo);
		   	  bufInsSqlTempCount.append("date(.MAKER_DATE) =");
		   	  bufInsSqlTempCount.append(dbo);
		   	  bufInsSqlTempCount.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getInitiationDate()).trim()+"','"+dateFormat+"')) as b");
			}
			
			if(((vo.getLbxDealNo().equalsIgnoreCase("")))||((vo.getCustomerName().equalsIgnoreCase("")))||((vo.getLbxProductID().equalsIgnoreCase("")))||((vo.getLbxscheme().equalsIgnoreCase("")))||((vo.getInitiationDate().equalsIgnoreCase("")))){
				appendSQL=true;
			}
			
			 if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")))) {
		        bufInsSql.append(" AND d.DEAL_ID='"+dealNo+"' ");
		        bufInsSqlTempCount.append(" AND d.DEAL_ID='"+dealNo+"' ");
		   	 	appendSQL=true;
		   	  
		     }
			 
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getInitiationDate())).trim().equalsIgnoreCase("")))) {
				bufInsSql.append(" AND ");
				bufInsSql.append(dbo);
				bufInsSql.append("date(d.MAKER_DATE) =");
				bufInsSql.append(dbo);
				bufInsSql.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getInitiationDate()).trim()+"','"+dateFormat+"') ");
				bufInsSqlTempCount.append(" AND ");
				bufInsSqlTempCount.append(dbo);
				bufInsSqlTempCount.append("date(d.MAKER_DATE) =");
				bufInsSqlTempCount.append(dbo);
				bufInsSqlTempCount.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getInitiationDate()).trim()+"','"+dateFormat+"') ");
				appendSQL=true;
		     }
			
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomerName())).trim().equalsIgnoreCase("")))) {
				bufInsSql.append(" AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomerName()).trim()+"%' ");
				bufInsSqlTempCount.append(" AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomerName()).trim()+"%'");
		   	  	appendSQL=true;
		     }
			
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")))) {
				bufInsSql.append(" AND p.PRODUCT_ID='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
			   	  bufInsSqlTempCount.append(" AND p.PRODUCT_ID='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'");
			   	  appendSQL=true;
			     }
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")))) {
				bufInsSql.append(" AND s.SCHEME_ID='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
			   	 bufInsSqlTempCount.append(" AND s.SCHEME_ID='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"'");
			   	  appendSQL=true;
			     }
			if((!(vo.getLbxDealNo().equalsIgnoreCase("")))||(!(vo.getCustomerName().equalsIgnoreCase("")))||(!(vo.getLbxProductID().equalsIgnoreCase("")))||(!(vo.getLbxscheme().equalsIgnoreCase("")))||(!(vo.getInitiationDate().equalsIgnoreCase("")))){
				bufInsSqlTempCount.append(") as b");
				appendSQL=true;
			}	
			 count =Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
			 logger.info("bufInsSqlTempCount : "+bufInsSqlTempCount.toString());
//			if((dealNo.toString().trim()==null && appDate.toString().trim()==null && custName.toString().trim()==null && productId.toString().trim()==null && schemeId.toString().trim()==null) || (dealNo.toString().trim().equalsIgnoreCase("") && appDate.toString().trim().equalsIgnoreCase("") && custName.toString().trim().equalsIgnoreCase("") && productId.toString().trim().equalsIgnoreCase("") && schemeId.toString().trim().equalsIgnoreCase("")) || fieldVo.getCurrentPageLink()>1)
//			{
			
			 logger.info("current PAge Link no .................... "+fieldVo.getCurrentPageLink());
			if(fieldVo.getCurrentPageLink()>1)
			{
				startRecordIndex = (fieldVo.getCurrentPageLink()-1)*no;
				endRecordIndex = no;
				 logger.info("startRecordIndex .................... "+startRecordIndex);
				 logger.info("endRecordIndex .................... "+endRecordIndex);
			}
			bufInsSql.append(" ORDER BY d.DEAL_ID OFFSET ");
			bufInsSql.append(startRecordIndex);
			bufInsSql.append(" ROWS FETCH next ");
			bufInsSql.append(endRecordIndex);
			bufInsSql.append(" ROWS ONLY ");
			logger.info("Search searchDealDetailforBuyerSuppAuthor query for SQL SERVER : " + bufInsSql.toString());
				//bufInsSql.append(CommonFunction.betweenStartEnd(startRecordIndex, endRecordIndex));
			
//			}
			 logger.info("query : "+bufInsSql.toString());
		     header = ConnectionDAO.sqlSelect(bufInsSql.toString());

						
			for(int i=0;i<header.size();i++){
	//			logger.info("header: "+header.size());
				ArrayList header1=(ArrayList)header.get(i);
				if(header1!=null && header1.size()>0)
				{
					
					fieldVo = new FieldVerificationVo();
					
					fieldVo.setLbxDealNo((CommonFunction.checkNull(header1.get(0))).trim());
					fieldVo.setDealNo("<a href=\"#\" onclick=\"modifyBuyerSupplierAuthor('"+((CommonFunction.checkNull(header1.get(0))).trim())+"','"+((CommonFunction.checkNull(header1.get(1))).trim())+"','"+((CommonFunction.checkNull(header1.get(2))).trim())+"'" +
							",'"+((CommonFunction.checkNull(header1.get(8))).trim())+"','"+((CommonFunction.checkNull(header1.get(7))).trim())+"');\" >" +
							((CommonFunction.checkNull(header1.get(1))).trim())+"</a>");
					fieldVo.setCustomerName((CommonFunction.checkNull(header1.get(2))).trim());
					fieldVo.setInitiationDate((CommonFunction.checkNull(header1.get(3))).trim());
					fieldVo.setProduct((CommonFunction.checkNull(header1.get(4))).trim());
					fieldVo.setScheme((CommonFunction.checkNull(header1.get(5))).trim());
					fieldVo.setStatus((CommonFunction.checkNull(header1.get(6))).trim());
					fieldVo.setDealDate((CommonFunction.checkNull(header1.get(8))).trim());
					fieldVo.setRmName((CommonFunction.checkNull(header1.get(7))).trim());
					fieldVo.setReportingToUserId((CommonFunction.checkNull(header1.get(9))).trim());
					fieldVo.setTotalRecordSize(count);
					list.add(fieldVo);
				}
			}
			
			if(header.size()==0)
			{
//				fieldVo = new FieldVerificationVo();
//				fieldVo.setTotalRecordSize(count);
//				list.add(fieldVo);
				request.setAttribute("flag","yes");
				
			}
			 logger.info("getTotalRecordSize : "+fieldVo.getTotalRecordSize());
			 
			 dealNo=null;
			 appDate=null;
			 custName=null;
			 productId=null;
			 schemeId=null;
			 initDate=null;
			 bufInsSql=null;
			 bufInsSqlTempCount=null;
	
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		 logger.info("Detail List when searchList is : "+list.size());
		
		return list;
	}
	
	
public ArrayList<FieldVerificationVo> searchDealDetailforBuyerSupp(FieldVerificationVo vo,HttpServletRequest request) {
		
		ArrayList<FieldVerificationVo> list = new ArrayList<FieldVerificationVo>();
		logger.info("In searchDealDetailforBuyerSupp");
		try
		{
			ArrayList header=null;
			int count=0;
			int startRecordIndex=0;
			int endRecordIndex = no;
			
//			logger.info("here userid++++++++++++++++++++++++++++++++++++++++++++++++++++++++ "+vo.getReportingToUserId());
// 			String userNameQ="select USER_NAME from sec_user_m where REC_STATUS='A' and USER_ID='"+vo.getReportingToUserId()+"'";
// 			String userName=ConnectionDAO.singleReturn(userNameQ);
// 			logger.info("userNameQ: "+userNameQ+" userName: "+userName);
// 			
// 			userNameQ=null;
			FieldVerificationVo fieldVo= (FieldVerificationVo) vo;
			FieldVerificationVo fieldVo1= (FieldVerificationVo) vo;
			boolean appendSQL=false;
			
			
			StringBuffer bufInsSql=new StringBuffer();
			StringBuffer bufInsSqlTempCount = new StringBuffer();
			
			StringBuilder dealNo=new StringBuilder();
			StringBuilder appDate=new StringBuilder();
			StringBuilder custName=new StringBuilder();
			StringBuilder productId=new StringBuilder();
			StringBuilder schemeId=new StringBuilder();
			StringBuilder initDate=new StringBuilder();
			
			 dealNo.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim()));
			logger.info("dealNo"+dealNo);
			 appDate.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationDate())).trim()));
			 custName.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomerName())).trim()));
			 productId.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim()));
			 schemeId.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim()));
			 initDate.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getInitiationDate())).trim()));
			
			 
			
			bufInsSql.append(" select distinct d.DEAL_ID,d.DEAL_NO,deal.CUSTOMER_NAME,");
			bufInsSql.append(dbo);
			bufInsSql.append("DATE_FORMAT(d.MAKER_DATE,'"+dateFormat+"')MAKERDATE,p.PRODUCT_DESC,s.SCHEME_DESC,");
			bufInsSqlTempCount.append(" select distinct count(1) from (select distinct d.DEAL_ID,d.DEAL_NO,deal.CUSTOMER_NAME,d.MAKER_DATE,p.PRODUCT_DESC,s.SCHEME_DESC,");
			
		//start by arun sir	
			bufInsSql.append(" CASE WHEN d.REC_STATUS='F' and bs.rec_status='P'  THEN 'In Process' WHEN d.REC_STATUS='F'  THEN 'Pending' end as rsstatus,D.DEAL_RM,");
			bufInsSql.append(dbo);
			bufInsSql.append("DATE_FORMAT(D.DEAL_DATE,'"+dateFormat+"')DEALDATE");
			bufInsSqlTempCount.append(" CASE WHEN d.REC_STATUS='F' and bs.rec_status='P'  THEN 'In Process' WHEN d.REC_STATUS='F'  THEN 'Pending' end as rsstatus,D.DEAL_RM,");
			bufInsSqlTempCount.append(dbo);
			bufInsSqlTempCount.append("DATE_FORMAT(D.DEAL_DATE,'"+dateFormat+"')DEAL_DATE");
			//bufInsSql.append(" from cr_deal_dtl d left join cr_deal_verification_dtl dv on d.DEAL_ID=dv.DEAL_ID ");
			//bufInsSqlTempCount.append(" from cr_deal_dtl d left join cr_deal_verification_dtl dv on d.DEAL_ID=dv.DEAL_ID ");
		//end by arun sir	
			bufInsSql.append(" ,(SELECT USER_NAME FROM SEC_USER_M WHERE USER_ID=case when (d.REC_STATUS='F' and bs.rec_status='P') then BS.MAKER_ID else d.MAKER_ID end ) MAKER_ID");
			bufInsSqlTempCount.append(" ,(SELECT USER_NAME FROM SEC_USER_M WHERE USER_ID=case when (d.REC_STATUS='F' and bs.rec_status='P') then BS.MAKER_ID else d.MAKER_ID end ) MAKER_ID");
			bufInsSql.append(" from cr_deal_dtl d left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID "); 
			bufInsSqlTempCount.append(" from cr_deal_dtl d left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID "); 
			bufInsSql.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID "); 
			bufInsSqlTempCount.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID "); 
			
			bufInsSql.append(" INNER JOIN cr_deal_movement_dtl M ON M.DEAL_ID=D.DEAL_ID AND M.DEAL_STAGE_ID='BSA' AND M.DEAL_RECEIVED IS NOT NULL AND M.DEAL_FORWARDED IS NULL AND M.REC_STATUS='A'  "); 
			bufInsSqlTempCount.append(" INNER JOIN cr_deal_movement_dtl M ON M.DEAL_ID=D.DEAL_ID AND M.DEAL_STAGE_ID='BSA' AND M.DEAL_RECEIVED IS NOT NULL AND M.DEAL_FORWARDED IS NULL AND M.REC_STATUS='A' "); 
			
			
			bufInsSql.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID left join cr_deal_buyer_supplier_dtl bs on bs.deal_id=d.deal_id Where d.REC_STATUS='F' and d.deal_id not in(select DEAL_ID from cr_deal_buyer_supplier_dtl where rec_status='A') AND  ");
			bufInsSql.append("((ISNULL(bs.rec_status,'X')='P' AND BS.MAKER_ID='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' ) OR (ISNULL(bs.rec_status,'X')<>'P' AND 'a'='a' )) AND  D.DEAL_BRANCH='"+vo.getBranchId()+"'"); 
			bufInsSqlTempCount.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID left join cr_deal_buyer_supplier_dtl bs on bs.deal_id=d.deal_id Where d.REC_STATUS='F' and d.deal_id not in(select DEAL_ID from cr_deal_buyer_supplier_dtl where rec_status='A') AND ");
			bufInsSqlTempCount.append("((ISNULL(bs.rec_status,'X')='P' AND BS.MAKER_ID='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' ) OR (ISNULL(bs.rec_status,'X')<>'P' AND 'a'='a' )) ") ;
			bufInsSqlTempCount.append(" AND D.DEAL_BRANCH='"+vo.getBranchId()+"'"); 
//			bufInsSql.append(" and d.DEAL_ID not in(select DEAL_ID from cr_deal_verification_dtl where REC_STATUS='F')");
//			bufInsSqlTempCount.append(" and d.DEAL_ID not in(select DEAL_ID from cr_deal_verification_dtl where REC_STATUS='F') ");
			
			if (!((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getReportingToUserId())).trim().equalsIgnoreCase(""))))
			{
				bufInsSql.append(" AND bs.MAKER_ID='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' ");	
				bufInsSqlTempCount.append(" AND bs.MAKER_ID='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"'");
				appendSQL = true;
			}
			if (((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getReportingToUserId())).trim().equalsIgnoreCase(""))))
			{
				bufInsSql.append(" AND d.MAKER_ID='"+StringEscapeUtils.escapeSql(vo.getUserId()).trim()+"' ");	
				bufInsSqlTempCount.append(" AND d.MAKER_ID='"+StringEscapeUtils.escapeSql(vo.getUserId()).trim()+"'");
				appendSQL = true;
				logger.debug("Rituuuuuuuuuuu a");				
			}
			else{
				bufInsSql.append(" AND d.MAKER_ID='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' ");	
				bufInsSqlTempCount.append(" AND d.MAKER_ID='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"'");
				appendSQL = true;
				logger.debug("Rituuuuuuuuuuu b");
			    }
			
			if((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")) &&(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomerName()).trim()).equalsIgnoreCase(""))&&(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase(""))&&(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase(""))&&(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getInitiationDate()).trim()).equalsIgnoreCase("")))
			{
				
		   	  bufInsSqlTempCount.append(") as b");
			}
			
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase(""))) &&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomerName()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getInitiationDate()).trim()).equalsIgnoreCase(""))))
			{
		   	  bufInsSql.append("WHERE d.DEAL_ID='"+dealNo+"' AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomerName()).trim()+"%' AND p.PRODUCT_ID='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND s.SCHEME_ID='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND ");
		   	  bufInsSql.append(dbo);
		   	  bufInsSql.append("date(d.MAKER_DATE) =");
		   	  bufInsSql.append(dbo);
		   	  bufInsSql.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getInitiationDate()).trim()+"','"+dateFormat+"')");
		   	  bufInsSqlTempCount.append("WHERE d.DEAL_ID='"+dealNo+"' AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomerName()).trim()+"%' AND p.PRODUCT_ID='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND s.SCHEME_ID='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND ");
		   	  bufInsSqlTempCount.append(dbo);
		   	  bufInsSqlTempCount.append("date(d.MAKER_DATE) =");
		   	  bufInsSqlTempCount.append(dbo);
		   	  bufInsSqlTempCount.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getInitiationDate()).trim()+"','"+dateFormat+"')) as b");
			}
			
			if(((vo.getLbxDealNo().equalsIgnoreCase("")))||((vo.getCustomerName().equalsIgnoreCase("")))||((vo.getLbxProductID().equalsIgnoreCase("")))||((vo.getLbxscheme().equalsIgnoreCase("")))||((vo.getInitiationDate().equalsIgnoreCase("")))){
				appendSQL=true;
			}
			
			 if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")))) {
		        bufInsSql.append(" AND d.DEAL_ID='"+dealNo+"' ");
		        bufInsSqlTempCount.append(" AND d.DEAL_ID='"+dealNo+"' ");
		   	 	appendSQL=true;
		   	  
		     }
			 
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getInitiationDate())).trim().equalsIgnoreCase("")))) {
				bufInsSql.append(" AND ");
				bufInsSql.append(dbo);
				bufInsSql.append("date(d.MAKER_DATE) =");
				bufInsSql.append(dbo);
				bufInsSql.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getInitiationDate()).trim()+"','"+dateFormat+"') ");
				bufInsSqlTempCount.append(" AND ");
				bufInsSqlTempCount.append(dbo);
				bufInsSqlTempCount.append("date(d.MAKER_DATE) =");
				bufInsSqlTempCount.append(dbo);
				bufInsSqlTempCount.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getInitiationDate()).trim()+"','"+dateFormat+"') ");
				appendSQL=true;
		     }
			
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomerName())).trim().equalsIgnoreCase("")))) {
				bufInsSql.append(" AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomerName()).trim()+"%' ");
				bufInsSqlTempCount.append(" AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomerName()).trim()+"%'");
		   	  	appendSQL=true;
		     }
			
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")))) {
				bufInsSql.append(" AND p.PRODUCT_ID='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
			   	  bufInsSqlTempCount.append(" AND p.PRODUCT_ID='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'");
			   	  appendSQL=true;
			     }
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")))) {
				bufInsSql.append(" AND s.SCHEME_ID='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
			   	 bufInsSqlTempCount.append(" AND s.SCHEME_ID='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"'");
			   	  appendSQL=true;
			     }
			
			
			
			if((!(vo.getLbxDealNo().equalsIgnoreCase("")))||(!(vo.getCustomerName().equalsIgnoreCase("")))||(!(vo.getLbxProductID().equalsIgnoreCase("")))||(!(vo.getLbxscheme().equalsIgnoreCase("")))||(!(vo.getInitiationDate().equalsIgnoreCase("")))){
				bufInsSqlTempCount.append(") as b");
				appendSQL=true;
			}	
			 count =Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
			 logger.info("bufInsSqlTempCount : "+bufInsSqlTempCount.toString());
//			if((dealNo.toString().trim()==null && appDate.toString().trim()==null && custName.toString().trim()==null && productId.toString().trim()==null && schemeId.toString().trim()==null) || (dealNo.toString().trim().equalsIgnoreCase("") && appDate.toString().trim().equalsIgnoreCase("") && custName.toString().trim().equalsIgnoreCase("") && productId.toString().trim().equalsIgnoreCase("") && schemeId.toString().trim().equalsIgnoreCase("")) || fieldVo.getCurrentPageLink()>1)
//			{
			
			 logger.info("current PAge Link no .................... "+fieldVo.getCurrentPageLink());
			if(fieldVo.getCurrentPageLink()>1)
			{
				startRecordIndex = (fieldVo.getCurrentPageLink()-1)*no;
				endRecordIndex = no;
				 logger.info("startRecordIndex .................... "+startRecordIndex);
				 logger.info("endRecordIndex .................... "+endRecordIndex);
			}
			bufInsSql.append(" ORDER BY d.DEAL_ID OFFSET ");
			bufInsSql.append(startRecordIndex);
			bufInsSql.append(" ROWS FETCH next ");
			bufInsSql.append(endRecordIndex);
			bufInsSql.append(" ROWS ONLY ");
			logger.info("Search searchDealDetailforBuyerSupp query for SQL SERVER : " + bufInsSql.toString());
			//bufInsSql.append(CommonFunction.betweenStartEnd(startRecordIndex, endRecordIndex));
			
//			}
			 logger.info("query : "+bufInsSql.toString());
		     header = ConnectionDAO.sqlSelect(bufInsSql.toString());

						
			for(int i=0;i<header.size();i++){
	//			logger.info("header: "+header.size());
				ArrayList header1=(ArrayList)header.get(i);
				if(header1!=null && header1.size()>0)
				{
					
					fieldVo1 = new FieldVerificationVo();
					
					fieldVo1.setLbxDealNo((CommonFunction.checkNull(header1.get(0))).trim());
					fieldVo1.setDealNo("<a href=\"#\" onclick=\"modifyBuyerSupplier('"+((CommonFunction.checkNull(header1.get(0))).trim())+"');\" >" +
							((CommonFunction.checkNull(header1.get(1))).trim())+"</a>");
					fieldVo1.setCustomerName((CommonFunction.checkNull(header1.get(2))).trim());
					fieldVo1.setInitiationDate((CommonFunction.checkNull(header1.get(3))).trim());
					fieldVo1.setProduct((CommonFunction.checkNull(header1.get(4))).trim());
					fieldVo1.setScheme((CommonFunction.checkNull(header1.get(5))).trim());
					fieldVo1.setStatus((CommonFunction.checkNull(header1.get(6))).trim());
					fieldVo1.setDealDate((CommonFunction.checkNull(header1.get(8))).trim());
					fieldVo1.setRmName((CommonFunction.checkNull(header1.get(7))).trim());
					fieldVo1.setReportingToUserId(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(header1.get(9))).trim());
					fieldVo1.setTotalRecordSize(count);
					list.add(fieldVo1);
				}
			}
			 logger.info("header.size() : "+header.size());
			if(header.size()==0)
			{
				 logger.info("header.size() 1: "+header.size());
//				fieldVo = new FieldVerificationVo();
//				fieldVo.setTotalRecordSize(count);
//				list.add(fieldVo);
				request.setAttribute("flag","yes");
				
			}
			 logger.info("getTotalRecordSize : "+fieldVo.getTotalRecordSize());
			 
			 dealNo=null;
			 appDate=null;
			 custName=null;
			 productId=null;
			 schemeId=null;
			 initDate=null;
			 bufInsSql=null;
			 bufInsSqlTempCount=null;
	
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
	return list;
	}

public ArrayList getDealMovementDetail(String txnid,String userId) {
	ArrayList list=new ArrayList();
		try{
			logger.info("In getDealMovementDetail......Dao Impl"+txnid);
		   String querypid="select DEAL_PRODUCT_CATEGORY from cr_deal_loan_dtl where deal_id = '"+CommonFunction.checkNull(txnid).trim()+"';";
			logger.info("pid query *******"+querypid);
			String productId=ConnectionDAO.singleReturn(querypid);
			logger.info("product id is ="+productId);
			
			StringBuilder query=new StringBuilder();
			query.append(" SELECT s.STAGE_DESC,case when b.DEAL_FORWARDED IS NOT NULL and ISNULL(b.DEAL_FORWARD_USER,'')<>'' THEN 'COMPLETED' ");
			query.append(" when b.DEAL_FORWARDED IS NULL and ISNULL(b.DEAL_FORWARD_USER,'')='' then 'INITIATED' when b.DEAL_ACTION is null then 'PENDING' end as 'Deal Action', ");
			query.append(" dbo.DATE_FORMAT(b.DEAL_RECEIVED,'"+dateFormatWithTime+"'),dbo.DATE_FORMAT(b.DEAL_FORWARDED,'"+dateFormatWithTime+"'),b.DEAL_FORWARD_USER,b.DEAL_RECEIVED_USER,S.STAGE_SEQ_NO ");  
			query.append(" from cr_deal_movement_dtl b ");
			query.append(" join cr_stage_m s on s.STAGE_ID=b.DEAL_STAGE_ID AND b.deal_id='"+CommonFunction.checkNull(txnid).trim()+"' and b.rec_status='A' ");
			query.append(" ORDER BY b.DEAL_MOVEMENT_ID "); 
			
		  query.append("SELECT distinct s.STAGE_DESC,case when b.DEAL_FORWARDED IS NOT NULL and ");
		  query.append("ISNULL(b.DEAL_FORWARD_USER,'')<>'' THEN 'COMPLETED'");
		  query.append(" when b.DEAL_FORWARDED IS NULL and ");
		  query.append("ISNULL(b.DEAL_FORWARD_USER,'')='' then 'INITIATED' when b.DEAL_ACTION is null then 'PENDING' end as 'Deal Action'," );
		  query.append(dbo);
		  query.append("DATE_FORMAT(b.DEAL_RECEIVED,'"+dateFormatWithTime+"'),");
		  query.append(dbo);
		  query.append("DATE_FORMAT(b.DEAL_FORWARDED,'"+dateFormatWithTime+"')," );
		  query.append(" b.DEAL_FORWARD_USER,b.DEAL_RECEIVED_USER,S.STAGE_SEQ_NO  from (select * from CR_STAGE_WORKFLOW_M where product_id='"+productId+"') a " );
		  query.append(" inner join (select * from cr_deal_movement_dtl where deal_id = '"+CommonFunction.checkNull(txnid).trim()+"' and rec_status='A') b on a.STAGE_ID = b.DEAL_STAGE_ID " );
		  query.append(" inner join cr_stage_m s on s.STAGE_ID=a.STAGE_ID order by S.STAGE_SEQ_NO  " );
		
		logger.info("In getDealMovementDetail   :  "+query.toString());
		
		DealMovementVo vo=null;
		ArrayList dealMovement = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getDealMovementDetail "+dealMovement.size());
		
		query=null;

		for(int i=0;i<dealMovement.size();i++){
			logger.info("getDealMovementDetail "+CommonFunction.checkNull(dealMovement.get(i)).toString());
			ArrayList data=(ArrayList)dealMovement.get(i);
			if(data.size()>0){
				vo = new DealMovementVo();
				vo.setSeqNo((i+1)+"");
				vo.setStage((CommonFunction.checkNull(data.get(0))).trim());
				//noteVO.setNoteCode(data.get(0).toString());
				//if(CommonFunction.checkNull(data.get(1)).equalsIgnoreCase("I"))
				//{
					vo.setAction(CommonFunction.checkNull(data.get(1)));
				//}
//				else if(CommonFunction.checkNull(data.get(1)).equalsIgnoreCase("F"))
//				{
//					vo.setAction("Forwarded");
//				}
//				else
//				{
//					vo.setAction("Sent Back");
//				}
				
				vo.setDealReceived((CommonFunction.checkNull(data.get(2))).trim());
				vo.setDealForwarded((CommonFunction.checkNull(data.get(3))).trim());
				vo.setDealForwardedUser((CommonFunction.checkNull(data.get(4))).trim());
				list.add(vo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
	return list;
}


public ArrayList<Object> docUploadedDetailInSearch(CommonDealVo vo,HttpServletRequest request)
{
		ArrayList list=new ArrayList();
		
		ArrayList header=null;
		ArrayList header1=null;
		StringBuilder bufInsSql=new StringBuilder();
		StringBuilder bufInsSqlTempCount = new StringBuilder();
		CommonDealVo fetchVo= (CommonDealVo) vo;
		try
		{
			logger.info("here userid++++++++++++++++++++++++++++++++++++++++++++++++++++++++ "+vo.getReportingToUserId());
 			String userNameQ="select USER_NAME from sec_user_m where REC_STATUS='A' and USER_ID='"+vo.getReportingToUserId()+"'";
 			String userName=ConnectionDAO.singleReturn(userNameQ);
 			logger.info("userNameQ: "+userNameQ+" userName: "+userName);
    		logger.info("docUploadedDetailInSearch");
			
    		userNameQ=null;
			int count=0;
			int startRecordIndex=0;
			int endRecordIndex = no;
			
			boolean appendSQL=false;
			
			StringBuilder dealId=new StringBuilder();
			StringBuilder appNo=new StringBuilder();
			StringBuilder appDate=new StringBuilder();
			StringBuilder custName=new StringBuilder();
			StringBuilder productId=new StringBuilder();
			
			 dealId.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim()));
			 appNo.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim()));
			 appDate.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim()));
			 custName.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim()));
			 productId.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim()));
			 
			bufInsSql.append("select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,");
			bufInsSql.append(dbo);
			bufInsSql.append("DATE_FORMAT(DEAL_DATE,'"+dateFormat+"'),deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC ");
			bufInsSql.append(" from cr_deal_dtl d");
			bufInsSqlTempCount.append(" select distinct count(1) FROM (select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,");
			bufInsSqlTempCount.append(dbo);
			bufInsSqlTempCount.append("DATE_FORMAT(DEAL_DATE,'"+dateFormat+"')DEALDATE,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC from cr_deal_dtl d ");
			bufInsSql.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
			bufInsSqlTempCount.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
			bufInsSql.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
			bufInsSqlTempCount.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
			bufInsSql.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
			bufInsSqlTempCount.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
			bufInsSql.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
			bufInsSqlTempCount.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
			bufInsSql.append(" left join cr_uploaded_documents U on d.DEAL_ID=U.TXN_ID and TXN_TYPE='DC'");
			bufInsSqlTempCount.append(" left join cr_uploaded_documents U on d.DEAL_ID=U.TXN_ID and TXN_TYPE='DC'");
			
			bufInsSql.append(" LEFT JOIN cr_deal_movement_dtl M ON M.DEAL_ID=D.DEAL_ID AND M.DEAL_FORWARDED IS NOT NULL AND DEAL_STAGE_ID='DC' AND M.REC_STATUS='A' ");
			bufInsSqlTempCount.append(" LEFT JOIN cr_deal_movement_dtl M ON M.DEAL_ID=D.DEAL_ID AND M.DEAL_FORWARDED IS NOT NULL AND DEAL_STAGE_ID='DC' AND M.REC_STATUS='A' ");
		
				
						
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim().equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase(""))))
			{
		   	  bufInsSql.append("WHERE    d.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' AND ");
		   	  bufInsSql.append(dbo);
		   	  bufInsSql.append("date(d.DEAL_DATE) =");
		   	  bufInsSql.append(dbo);
		   	  bufInsSql.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND d.Rec_status='F'");
		   	  bufInsSqlTempCount.append("WHERE   d.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' AND ");
		   	  bufInsSqlTempCount.append(dbo);
		   	  bufInsSqlTempCount.append("date(d.DEAL_DATE) =");
		   	  bufInsSqlTempCount.append(dbo);
		   	  bufInsSqlTempCount.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND d.Rec_status='F'");
			}
			
			if(((vo.getLbxDealNo().equalsIgnoreCase("")))||((vo.getApplicationno().equalsIgnoreCase("")))||((vo.getApplicationdate().equalsIgnoreCase("")))||((vo.getCustomername().equalsIgnoreCase("")))||((vo.getLbxProductID().equalsIgnoreCase("")))||((vo.getLbxscheme().equalsIgnoreCase("")))||((vo.getStage().equalsIgnoreCase("")))){
				appendSQL=true;
			}
			
			if(appendSQL){
				logger.info("In Where Clause");
				bufInsSql.append(" WHERE    d.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and d.Rec_status='F' ");
				bufInsSqlTempCount.append(" WHERE  d.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and d.Rec_status='F' ");
			}
		
			 if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")))) {
		        bufInsSql.append("AND d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
		        bufInsSqlTempCount.append("AND d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
		   	 appendSQL=true;
		   	  
		     }
			 
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")))) {
		   	  bufInsSql.append("AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
		   	  bufInsSqlTempCount.append("AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
		   	  appendSQL=true;
		     }
			
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim().equalsIgnoreCase("")))) {
		   	  bufInsSql.append("AND ");
		   	  bufInsSql.append(dbo);
		   	  bufInsSql.append("date(d.DEAL_DATE) =");
		   	  bufInsSql.append(dbo);
		   	  bufInsSql.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') ");
		   	  bufInsSqlTempCount.append("AND ");
		   	  bufInsSqlTempCount.append(dbo);
		   	  bufInsSqlTempCount.append("date(d.DEAL_DATE) =");
		   	  bufInsSqlTempCount.append(dbo);
		   	  bufInsSqlTempCount.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') ");
		   	  appendSQL=true;
		     }
			
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")))) {
		   	  bufInsSql.append("AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
		   	  bufInsSqlTempCount.append("AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
		   	  appendSQL=true;
		     }
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")))) {
			   	  bufInsSql.append("AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
			   	  bufInsSqlTempCount.append("AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
			   	  appendSQL=true;
			     }
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")))) {
			   	  bufInsSql.append("AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
			   	  bufInsSqlTempCount.append("AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
			   	  appendSQL=true;
			     }
			
			//if((!(vo.getLbxDealNo().equalsIgnoreCase("")))||(!(vo.getApplicationno().equalsIgnoreCase("")))||(!(vo.getApplicationdate().equalsIgnoreCase("")))||(!(vo.getCustomername().equalsIgnoreCase("")))||(!(vo.getLbxProductID().equalsIgnoreCase("")))||(!(vo.getLbxscheme().equalsIgnoreCase("")))){
				bufInsSqlTempCount.append(") as b");
				appendSQL=true;
			//}
			
			 logger.info("bufInsSqlTempCount Query: "+bufInsSqlTempCount.toString());
			 count =Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
			
//			if((dealId.toString().trim()==null && appNo.toString().trim()==null && appDate.toString().trim()==null && custName.toString().trim()==null && productId.toString().trim()==null) || (dealId.toString().trim().equalsIgnoreCase("") && appNo.toString().trim().equalsIgnoreCase("") && appDate.toString().trim().equalsIgnoreCase("") && custName.toString().trim().equalsIgnoreCase("") && productId.toString().trim().equalsIgnoreCase("")) || fetchVo.getCurrentPageLink()>1)
//			{
			
			 logger.info("current PAge Link no .................... "+fetchVo.getCurrentPageLink());
			if(fetchVo.getCurrentPageLink()>1)
			{
				startRecordIndex = (fetchVo.getCurrentPageLink()-1)*no;
				endRecordIndex = no;
				 logger.info("startRecordIndex .................... "+startRecordIndex);
				 logger.info("endRecordIndex .................... "+endRecordIndex);
			}
			bufInsSql.append(" ORDER BY d.DEAL_ID OFFSET ");
			bufInsSql.append(startRecordIndex);
			bufInsSql.append(" ROWS FETCH next ");
			bufInsSql.append(endRecordIndex);
			bufInsSql.append(" ROWS ONLY ");
			logger.info("Search docUploadedDetailInSearch query for SQL SERVER : " + bufInsSql.toString());	
			//bufInsSql.append(CommonFunction.betweenStartEnd(startRecordIndex, endRecordIndex));
			//query = query +" limit "+startRecordIndex+","+endRecordIndex;
//			}
			 logger.info("query : "+bufInsSql.toString());
		     header = ConnectionDAO.sqlSelect(bufInsSql.toString());

						
			for(int i=0;i<header.size();i++){
	//			logger.info("header: "+header.size());
				if(header.size()>0)
				{
					header1=(ArrayList)header.get(i);
				}
				
				if(header1!=null && header1.size()>0)
				{
				
					fetchVo = new CommonDealVo();
					
					fetchVo.setLbxDealNo("<a href=underwritingDocUploadBehind.do?dealId="
	      					+ (CommonFunction.checkNull(header1.get(0)).trim())+">"
	      					+ (CommonFunction.checkNull(header1.get(1)).trim()) + "</a>");
					
					
//					fetchVo.setLbxDealNo("<a href=underwritingDocUploadBehind.do?dealId="+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+">"+(CommonFunction.checkNull(header1.get(1)))+"</a>");
					
					fetchVo.setDealNo((CommonFunction.checkNull(header1.get(1))).trim());
					fetchVo.setApplicationno((CommonFunction.checkNull(header1.get(2))).trim());
					fetchVo.setApplicationdate((CommonFunction.checkNull(header1.get(3))).trim());
					fetchVo.setCustomername((CommonFunction.checkNull(header1.get(4))).trim());
		//			logger.info("Customer First Name: "+(CommonFunction.checkNull(header1.get(4))).trim());
					fetchVo.setProduct((CommonFunction.checkNull(header1.get(5))).trim());
					fetchVo.setScheme((CommonFunction.checkNull(header1.get(6))).trim());
					fetchVo.setReportingToUserId(userName);
					fetchVo.setTotalRecordSize(count);
					
					list.add(fetchVo);
				}
			}
			
			 logger.info("getTotalRecordSize : "+fetchVo.getTotalRecordSize());
		userName=null;
		
		dealId=null;
		appDate=null;
		custName=null;
		productId=null;
		appNo=null;
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally 
		{
			fetchVo=null;
			header1=null;
			header=null;
			bufInsSql=null;
			bufInsSqlTempCount=null;
		}		
		 logger.info("Detail List when searchList is : "+list);		
		return list;
	}

//sachin

public ArrayList<Object> docUploadedDetailInSearchForCm(CommonDealVo vo,HttpServletRequest request)
{
		ArrayList list=new ArrayList();
		
		
		
		ArrayList header=null;
		ArrayList header1=null;
		StringBuilder bufInsSql=new StringBuilder();
		StringBuilder bufInsSqlTempCount = new StringBuilder();
		CommonDealVo fetchVo= (CommonDealVo) vo;
		try
		{
			logger.info("here userid++++++++++++++++++++++++++++++++++++++++++++++++++++++++ "+vo.getReportingToUserId());
 			String userNameQ="select USER_NAME from sec_user_m where REC_STATUS='A' and USER_ID='"+vo.getReportingToUserId()+"'";
 			String userName=ConnectionDAO.singleReturn(userNameQ);
 			logger.info("userNameQ: "+userNameQ+" userName: "+userName);
    		logger.info("docUploadedDetailInSearchForCm");
			
    		userNameQ=null;
			int count=0;
			int startRecordIndex=0;
			int endRecordIndex = no;
			
			boolean appendSQL=false;
			
			StringBuilder dealId=new StringBuilder();
			//StringBuilder appNo=new StringBuilder();
			//StringBuilder appDate=new StringBuilder();
			StringBuilder custName=new StringBuilder();
			StringBuilder productId=new StringBuilder();
			
			 dealId.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim()));
			// appNo.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim()));
			// appDate.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim()));
			 custName.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim()));
			 productId.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim()));
			 	bufInsSql.append("select distinct cld.LOAN_ID,cld.LOAN_NO,cld.LOAN_REFERENCE_NO,cld.LOAN_PRODUCT,cld.LOAN_SCHEME,gcd.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC ");
			 	bufInsSql.append("from cr_loan_dtl cld ");
				bufInsSqlTempCount.append(" select distinct count(1) FROM ( select distinct cld.LOAN_ID,cld.LOAN_NO,cld.LOAN_REFERENCE_NO,cld.LOAN_PRODUCT,cld.LOAN_SCHEME,gcd.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC from cr_loan_dtl cld ");
				bufInsSql.append(" left join cr_product_m p on cld.loan_product=p.PRODUCT_ID ");
				bufInsSqlTempCount.append(" left join cr_product_m p on cld.loan_product=p.PRODUCT_ID  ");
				bufInsSql.append(" left join gcd_customer_m gcd on gcd.CUSTOMER_ID=cld.loan_CUSTOMER_ID    ");
				bufInsSqlTempCount.append(" left join gcd_customer_m gcd on gcd.CUSTOMER_ID=cld.loan_CUSTOMER_ID  ");
				bufInsSql.append(" left join cr_scheme_m s on cld.loan_SCHEME=s.SCHEME_ID   ");
				bufInsSqlTempCount.append(" left join cr_scheme_m s on cld.loan_SCHEME=s.SCHEME_ID ");
				bufInsSql.append(" left join cr_uploaded_documents U on cld.LOAN_id=U.TXN_ID and TXN_TYPE='LIM' ");
				bufInsSqlTempCount.append(" left join cr_uploaded_documents U on cld.LOAN_id=U.TXN_ID and TXN_TYPE='LIM'");
				bufInsSql.append(" where  cld.REC_STATUS in('P','F','A','C')  ");
				bufInsSqlTempCount.append(" where cld.REC_STATUS in('P','F','A','C') ");
				
				
				
				
				
		
				
						
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase(""))))
			{
		   	  bufInsSql.append("   cld.loan_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and cld.LOAN_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND gcd.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND cld.LOAN_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND cld.LOAN_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim());
		   	  bufInsSqlTempCount.append(" cld.loan_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and cld.LOAN_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND gcd.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND cld.LOAN_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND cld.LOAN_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim());
			}
			
		if(((vo.getLbxDealNo().equalsIgnoreCase("")))||((vo.getApplicationno().equalsIgnoreCase("")))||((vo.getApplicationdate().equalsIgnoreCase("")))||((vo.getCustomername().equalsIgnoreCase("")))||((vo.getLbxProductID().equalsIgnoreCase("")))||((vo.getLbxscheme().equalsIgnoreCase("")))||((vo.getStage().equalsIgnoreCase("")))){
				appendSQL=true;
			}
			
			if(appendSQL){
				logger.info("In Where Clause");
				bufInsSql.append(" AND    cld.loan_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' ");
				bufInsSqlTempCount.append(" AND    cld.loan_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' ");
			}
		
			 if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")))) {
		        bufInsSql.append("AND cld.LOAN_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
		        bufInsSqlTempCount.append("AND cld.LOAN_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
		   	 appendSQL=true;
		   	  
		     }
			 
//			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")))) {
//		   	  bufInsSql.append("AND cld.LOAN_REFERENCE_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
//		   	  bufInsSqlTempCount.append("AND cld.LOAN_REFERENCE_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
//		   	  appendSQL=true;
//		     }
//			
//			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim().equalsIgnoreCase("")))) {
//		   	  bufInsSql.append("AND date(d.DEAL_DATE) =STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') ");
//		   	  bufInsSqlTempCount.append("AND date(d.DEAL_DATE) =STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') ");
//		   	  appendSQL=true;
//		     }
			
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")))) {
		   	  bufInsSql.append("AND gcd.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
		   	  bufInsSqlTempCount.append("AND gcd.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
		   	  appendSQL=true;
		     }
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")))) {
			   	  bufInsSql.append("AND cld.LOAN_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
			   	  bufInsSqlTempCount.append("AND cld.LOAN_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
			   	  appendSQL=true;
			     }
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")))) {
			   	  bufInsSql.append("AND cld.LOAN_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
			   	  bufInsSqlTempCount.append("AND cld.LOAN_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
			   	  appendSQL=true;
			     }
			
		//if((!(vo.getLbxDealNo().equalsIgnoreCase("")))||(!(vo.getApplicationno().equalsIgnoreCase("")))||(!(vo.getApplicationdate().equalsIgnoreCase("")))||(!(vo.getCustomername().equalsIgnoreCase("")))||(!(vo.getLbxProductID().equalsIgnoreCase("")))||(!(vo.getLbxscheme().equalsIgnoreCase("")))){
			bufInsSqlTempCount.append(") as b");
				appendSQL=true;
			//}
		
			 logger.info("bufInsSqlTempCount Query: "+bufInsSqlTempCount.toString());
//			 count =Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
				
				 count=Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
			
//			if((dealId.toString().trim()==null && custName.toString().trim()==null && productId.toString().trim()==null) || (dealId.toString().trim().equalsIgnoreCase("") &&   custName.toString().trim().equalsIgnoreCase("") && productId.toString().trim().equalsIgnoreCase("")) || fetchVo.getCurrentPageLink()>1)
//			{
			
			 logger.info("current PAge Link no .................... "+fetchVo.getCurrentPageLink());
			if(fetchVo.getCurrentPageLink()>1)
			{
				startRecordIndex = (fetchVo.getCurrentPageLink()-1)*no;
				endRecordIndex = no;
				 logger.info("startRecordIndex .................... "+startRecordIndex);
				 logger.info("endRecordIndex .................... "+endRecordIndex);
			}
			bufInsSql.append(" ORDER BY cld.LOAN_ID OFFSET ");
			bufInsSql.append(startRecordIndex);
			bufInsSql.append(" ROWS FETCH next ");
			bufInsSql.append(endRecordIndex);
			bufInsSql.append(" ROWS ONLY ");
			logger.info("Search docUploadedDetailInSearchForCm query for SQL SERVER : " + bufInsSql.toString());
			//bufInsSql.append(CommonFunction.betweenStartEnd(startRecordIndex, endRecordIndex));
			//query = query +" limit "+startRecordIndex+","+endRecordIndex;
//			}
			 logger.info("query : "+bufInsSql.toString());
		     header = ConnectionDAO.sqlSelect(bufInsSql.toString());

						
			for(int i=0;i<header.size();i++){
	//			logger.info("header: "+header.size());
				if(header.size()>0)
				{
					header1=(ArrayList)header.get(i);
				}
				
				if(header1!=null && header1.size()>0)
				{
				
					fetchVo = new CommonDealVo();
					
					fetchVo.setLbxDealNo("<a href=underwritingDocUploadBehind.do?loanId="
	      					+ (CommonFunction.checkNull(header1.get(0)).trim())+">"
	      					+ (CommonFunction.checkNull(header1.get(1)).trim()) + "</a>");
					
					
//					fetchVo.setLbxDealNo("<a href=underwritingDocUploadBehind.do?dealId="+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+">"+(CommonFunction.checkNull(header1.get(1)))+"</a>");
					
					fetchVo.setDealNo((CommonFunction.checkNull(header1.get(1))).trim());
					fetchVo.setApplicationno((CommonFunction.checkNull(header1.get(2))).trim());
		    	   //fetchVo.setApplicationdate((CommonFunction.checkNull(header1.get(3))).trim());
					fetchVo.setCustomername((CommonFunction.checkNull(header1.get(5))).trim());
	//			logger.info("Customer First Name: "+(CommonFunction.checkNull(header1.get(4))).trim());
					fetchVo.setProduct((CommonFunction.checkNull(header1.get(6))).trim());
					fetchVo.setScheme((CommonFunction.checkNull(header1.get(7))).trim());
					fetchVo.setReportingToUserId(userName);
					fetchVo.setTotalRecordSize(count);
					
					list.add(fetchVo);
				}
			}
			
			 logger.info("getTotalRecordSize : "+fetchVo.getTotalRecordSize());
		userName=null;
		
		dealId=null;
		//appDate=null;
		custName=null;
		productId=null;
		//appNo=null;
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally 
		{
			fetchVo=null;
			header1=null;
			header=null;
			bufInsSql=null;
			bufInsSqlTempCount=null;
		}		
		 logger.info("Detail List when searchList is : "+list);		
		return list;
	}


//sachin

//yogesh start

public ArrayList<Object> docUploadedDetailInSearchForLegal(CommonDealVo vo,HttpServletRequest request)
{
		ArrayList list=new ArrayList();
		
		
		
		ArrayList header=null;
		ArrayList header1=null;
		StringBuilder bufInsSql=new StringBuilder();
		StringBuilder bufInsSqlTempCount = new StringBuilder();
		CommonDealVo fetchVo= (CommonDealVo) vo;
		try
		{
			logger.info(" In docUploadedDetailInSearchForLegal");
 			String userNameQ="select USER_NAME from sec_user_m where REC_STATUS='A' and USER_ID='"+vo.getReportingToUserId()+"'";
 			String userName=ConnectionDAO.singleReturn(userNameQ);
 			logger.info("userNameQ: "+userNameQ+" userName: "+userName);
    		logger.info(" In docUploadedDetailInSearchForLegal");
			
    		userNameQ=null;
			int count=0;
			int startRecordIndex=0;
			int endRecordIndex = no;
			
			boolean appendSQL=false;
			
			StringBuilder dealId=new StringBuilder();
			//StringBuilder appNo=new StringBuilder();
			//StringBuilder appDate=new StringBuilder();
			StringBuilder custName=new StringBuilder();
			StringBuilder productId=new StringBuilder();
			
			 dealId.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim()));
			// appNo.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim()));
			// appDate.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim()));
			 custName.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim()));
			 productId.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim()));
			 	bufInsSql.append("select distinct cld.LOAN_ID,cld.LOAN_NO,cld.LOAN_REFERENCE_NO,cld.LOAN_PRODUCT,cld.LOAN_SCHEME,gcd.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC ");
			 	bufInsSql.append("from cr_loan_dtl cld ");
				bufInsSqlTempCount.append(" select distinct count(1) FROM ( select distinct cld.LOAN_ID,cld.LOAN_NO,cld.LOAN_REFERENCE_NO,cld.LOAN_PRODUCT,cld.LOAN_SCHEME,gcd.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC from cr_loan_dtl cld ");
				bufInsSql.append(" left join cr_product_m p on cld.loan_product=p.PRODUCT_ID ");
				bufInsSqlTempCount.append(" left join cr_product_m p on cld.loan_product=p.PRODUCT_ID  ");
				bufInsSql.append(" left join gcd_customer_m gcd on gcd.CUSTOMER_ID=cld.loan_CUSTOMER_ID    ");
				bufInsSqlTempCount.append(" left join gcd_customer_m gcd on gcd.CUSTOMER_ID=cld.loan_CUSTOMER_ID  ");
				bufInsSql.append(" left join cr_scheme_m s on cld.loan_SCHEME=s.SCHEME_ID   ");
				bufInsSqlTempCount.append(" left join cr_scheme_m s on cld.loan_SCHEME=s.SCHEME_ID ");
				bufInsSql.append(" left join cr_uploaded_documents U on cld.LOAN_id=U.TXN_ID and TXN_TYPE='LIM'");
				bufInsSqlTempCount.append(" left join cr_uploaded_documents U on cld.LOAN_id=U.TXN_ID and TXN_TYPE='LIM'");
				bufInsSql.append(" JOIN LEGAL_NOTICE_DTL LND ON CLD.LOAN_ID= LND.LOAN_NO ");
				bufInsSql.append(" where  cld.REC_STATUS in('P','F','A')  ");
				bufInsSqlTempCount.append(" JOIN LEGAL_NOTICE_DTL LND ON CLD.LOAN_ID= LND.LOAN_NO ");
				bufInsSqlTempCount.append(" where cld.REC_STATUS in('P','F','A') ");
				
				
				
				
				
		
				
						
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase(""))))
			{
		   	  bufInsSql.append("   cld.loan_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and cld.LOAN_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND gcd.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND cld.LOAN_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND cld.LOAN_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim());
		   	  bufInsSqlTempCount.append(" cld.loan_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and cld.LOAN_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND gcd.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND cld.LOAN_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND cld.LOAN_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim());
			}
			
		if(((vo.getLbxDealNo().equalsIgnoreCase("")))||((vo.getApplicationno().equalsIgnoreCase("")))||((vo.getApplicationdate().equalsIgnoreCase("")))||((vo.getCustomername().equalsIgnoreCase("")))||((vo.getLbxProductID().equalsIgnoreCase("")))||((vo.getLbxscheme().equalsIgnoreCase("")))||((vo.getStage().equalsIgnoreCase("")))){
				appendSQL=true;
			}
			
			if(appendSQL){
				logger.info("In Where Clause");
				bufInsSql.append(" AND    cld.loan_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' ");
				bufInsSqlTempCount.append(" AND    cld.loan_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' ");
			}
		
			 if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")))) {
		        bufInsSql.append("AND cld.LOAN_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
		        bufInsSqlTempCount.append("AND cld.LOAN_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
		   	 appendSQL=true;
		   	  
		     }
			 
//			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")))) {
//		   	  bufInsSql.append("AND cld.LOAN_REFERENCE_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
//		   	  bufInsSqlTempCount.append("AND cld.LOAN_REFERENCE_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
//		   	  appendSQL=true;
//		     }
//			
//			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim().equalsIgnoreCase("")))) {
//		   	  bufInsSql.append("AND date(d.DEAL_DATE) =STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') ");
//		   	  bufInsSqlTempCount.append("AND date(d.DEAL_DATE) =STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') ");
//		   	  appendSQL=true;
//		     }
			
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")))) {
		   	  bufInsSql.append("AND gcd.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
		   	  bufInsSqlTempCount.append("AND gcd.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
		   	  appendSQL=true;
		     }
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")))) {
			   	  bufInsSql.append("AND cld.LOAN_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
			   	  bufInsSqlTempCount.append("AND cld.LOAN_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
			   	  appendSQL=true;
			     }
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")))) {
			   	  bufInsSql.append("AND cld.LOAN_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
			   	  bufInsSqlTempCount.append("AND cld.LOAN_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
			   	  appendSQL=true;
			     }
			
		//if((!(vo.getLbxDealNo().equalsIgnoreCase("")))||(!(vo.getApplicationno().equalsIgnoreCase("")))||(!(vo.getApplicationdate().equalsIgnoreCase("")))||(!(vo.getCustomername().equalsIgnoreCase("")))||(!(vo.getLbxProductID().equalsIgnoreCase("")))||(!(vo.getLbxscheme().equalsIgnoreCase("")))){
			bufInsSqlTempCount.append(") as b");
				appendSQL=true;
			//}
		
			 logger.info("in docUploadedDetailInSearchForLegal bufInsSqlTempCount Query: "+bufInsSqlTempCount.toString());
//			 count =Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
				
				 count=Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
			
//			if((dealId.toString().trim()==null && custName.toString().trim()==null && productId.toString().trim()==null) || (dealId.toString().trim().equalsIgnoreCase("") &&   custName.toString().trim().equalsIgnoreCase("") && productId.toString().trim().equalsIgnoreCase("")) || fetchVo.getCurrentPageLink()>1)
//			{
			
			 logger.info("current PAge Link no .................... "+fetchVo.getCurrentPageLink());
			if(fetchVo.getCurrentPageLink()>1)
			{
				startRecordIndex = (fetchVo.getCurrentPageLink()-1)*no;
				endRecordIndex = no;
				 logger.info("startRecordIndex .................... "+startRecordIndex);
				 logger.info("endRecordIndex .................... "+endRecordIndex);
			}
			bufInsSql.append(" ORDER BY cld.LOAN_ID OFFSET ");
			bufInsSql.append(startRecordIndex);
			bufInsSql.append(" ROWS FETCH next ");
			bufInsSql.append(endRecordIndex);
			bufInsSql.append(" ROWS ONLY ");
			logger.info("Search docUploadedDetailInSearchForLegal query for SQL SERVER : " + bufInsSql.toString());
			//bufInsSql.append(CommonFunction.betweenStartEnd(startRecordIndex, endRecordIndex));
			//query = query +" limit "+startRecordIndex+","+endRecordIndex;
//			}
			 logger.info("query : "+bufInsSql.toString());
		     header = ConnectionDAO.sqlSelect(bufInsSql.toString());

						
			for(int i=0;i<header.size();i++){
	//			logger.info("header: "+header.size());
				if(header.size()>0)
				{
					header1=(ArrayList)header.get(i);
				}
				
				if(header1!=null && header1.size()>0)
				{
				
					fetchVo = new CommonDealVo();
					
					fetchVo.setLbxDealNo("<a href=underwritingDocUploadBehind.do?loanId="
	      					+ (CommonFunction.checkNull(header1.get(0)).trim())+">"
	      					+ (CommonFunction.checkNull(header1.get(1)).trim()) + "</a>");
					
					
//					fetchVo.setLbxDealNo("<a href=underwritingDocUploadBehind.do?dealId="+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+">"+(CommonFunction.checkNull(header1.get(1)))+"</a>");
					
					fetchVo.setDealNo((CommonFunction.checkNull(header1.get(1))).trim());
					fetchVo.setApplicationno((CommonFunction.checkNull(header1.get(2))).trim());
		    	   //fetchVo.setApplicationdate((CommonFunction.checkNull(header1.get(3))).trim());
					fetchVo.setCustomername((CommonFunction.checkNull(header1.get(5))).trim());
	//			logger.info("Customer First Name: "+(CommonFunction.checkNull(header1.get(4))).trim());
					fetchVo.setProduct((CommonFunction.checkNull(header1.get(6))).trim());
					fetchVo.setScheme((CommonFunction.checkNull(header1.get(7))).trim());
					fetchVo.setReportingToUserId(userName);
					fetchVo.setTotalRecordSize(count);
					
					list.add(fetchVo);
				}
			}
			
			 logger.info("getTotalRecordSize : "+fetchVo.getTotalRecordSize());
		userName=null;
		
		dealId=null;
		//appDate=null;
		custName=null;
		productId=null;
		//appNo=null;
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally 
		{
			fetchVo=null;
			header1=null;
			header=null;
			bufInsSql=null;
			bufInsSqlTempCount=null;
		}		
		 logger.info("Detail List when searchList is : "+list);		
		return list;
	}


//sachin

//Yogesh end

public ArrayList getworkFlowStage(String dealId,String funId) {
	ArrayList<CodeDescVo> list=new ArrayList<CodeDescVo>();
	try
	{
		int Id = 0;
		String qualityCheckStatus="N";
		funId=CommonFunction.checkNull(funId).trim();
		if(CommonFunction.checkNull(funId).trim().equalsIgnoreCase(""))
			funId="0";
		Id = Integer.parseInt(funId);
		if(Id!=4000103)
		{
			 String qualityCheckStatusQuery="SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='EDITABLE_QUALITY_CHECK_DEAL'";
			 logger.info("In searchDealForQualityCheck()  :  "+ qualityCheckStatusQuery);
			 qualityCheckStatus=ConnectionDAO.singleReturn(qualityCheckStatusQuery);
		}		
		
		 StringBuilder query=new StringBuilder();
		 if(CommonFunction.checkNull(qualityCheckStatus).equalsIgnoreCase("")||CommonFunction.checkNull(qualityCheckStatus).equalsIgnoreCase("N"))
	     {
	    	 query.append("SELECT DISTINCT W.STAGE_ID,S.STAGE_DESC FROM cr_stage_workflow_m W,cr_stage_m S WHERE W.STAGE_ID=S.STAGE_ID AND W.STAGE_ID NOT IN('QC','UNC')AND W.PRODUCT_ID=(select DEAL_PRODUCT_CATEGORY from cr_deal_loan_dtl where  DEAL_ID='"+dealId+"') AND S.REC_STATUS='A'");
	     }
	     else
	     {
	    	 query.append("SELECT DISTINCT W.STAGE_ID,S.STAGE_DESC FROM cr_stage_workflow_m W,cr_stage_m S WHERE W.STAGE_ID=S.STAGE_ID AND W.STAGE_ID NOT IN('UNC')AND W.PRODUCT_ID=(select DEAL_PRODUCT_CATEGORY from cr_deal_loan_dtl where  DEAL_ID='"+dealId+"') AND S.REC_STATUS='A'");
	     }
	     logger.info("query in getworkFlowStage:--"+query.toString());
	 ArrayList getworkFlowStage = ConnectionDAO.sqlSelect(query.toString());
	

	query=null;
	
	for(int i=0;i<getworkFlowStage.size();i++){
		
		ArrayList data=(ArrayList)getworkFlowStage.get(i);
		if(data.size()>0)	{
		CodeDescVo branchVo = new CodeDescVo();
		branchVo.setId((CommonFunction.checkNull(data.get(0))).trim());
		branchVo.setName((CommonFunction.checkNull(data.get(1))).trim());
		list.add(branchVo);
		}
	}
	}catch(Exception e){
		e.printStackTrace();
	}
	return list;
}


public ArrayList getLoanTypeList() {
	ArrayList list = new ArrayList();
	try {
		logger.info("In getSourceDetailList..........................DAOImpl");
		StringBuilder query=new StringBuilder();
		
		 query.append("SELECT M.VALUE,M.DESCRIPTION FROM generic_master M,generic_master_keys K WHERE K.GENERIC_KEY='LOAN_TYPE' " +
					"AND K.GENERIC_KEY=M.GENERIC_KEY and m.REC_STATUS='A'");
		logger.info("In getSourceDetailList...............query...........DAOImpl"+ query.toString());
		LoanDetailVo loanVo = null;
		ArrayList product = ConnectionDAO.sqlSelect(query.toString());
		
		query=null;
		
		logger.info("getSourceDetailList " + product.size());
		for (int i = 0; i < product.size(); i++) {
			logger.info("getSourceDetailList...Outer FOR loop " + CommonFunction.checkNull(product.get(i)).toString());
			ArrayList data = (ArrayList) product.get(i);
			if (data.size() > 0) {
				loanVo = new LoanDetailVo();
				loanVo.setLoanTypeID((CommonFunction.checkNull(data.get(0))).trim());
				loanVo.setLoanTypeName((CommonFunction.checkNull(data.get(1))).trim());
				list.add(loanVo);
			}

		}
	} catch (Exception e) {
		e.printStackTrace();
	}

	return list;
}

//neeraj tripathi
public ArrayList getAssetLoanDetailAmount(String dealId) 
{
	ArrayList list = new ArrayList();
	try 
	{
		logger.info("In getAssetLoanDetailAmount()");
		StringBuilder query=new StringBuilder();
		
		 query.append("select cr_product_m.REPAYMENT_TYPE,cr_product_m.ASSET_FLAG,cr_deal_loan_dtl.DEAL_ASSET_COST as astcstLD," );
		 query.append("  cr_deal_loan_dtl.DEAL_LOAN_AMOUNT as lonamtLD,ast.ac as astcstAD,ast.lm as lonamtAD from cr_deal_loan_dtl " );
		 query.append("  join cr_product_m on(cr_product_m.PRODUCT_ID=cr_deal_loan_dtl.DEAL_PRODUCT and cr_product_m.PRODUCT_CATEGORY=cr_deal_loan_dtl.DEAL_PRODUCT_CATEGORY) " );
		 query.append("  left outer join (select a.deal_id,sum(");
		 query.append("ISNULL(b.ASSET_COLLATERAL_VALUE,0)) as ac,sum(");
		 query.append("ISNULL(b.LOAN_AMOUNT,0)) as lm " );
		 query.append("  from cr_deal_collateral_m a join cr_asset_collateral_m b on(b.ASSET_ID=a.ASSETID)where b.ASSET_TYPE='ASSET' and a.DEAL_ID="+dealId.trim()+"  group by a.deal_id) " );
		 query.append("  as ast on(ast.deal_id=cr_deal_loan_dtl.DEAL_ID) where cr_deal_loan_dtl.DEAL_ID="+dealId.trim());
		logger.info("In getAssetLoanDetailAmount()  query   :   "+ query.toString());
		list = ConnectionDAO.sqlSelect(query.toString());
		
	}
	catch (Exception e) 
	{e.printStackTrace();}
	return list;
}


public ArrayList getDealWithCibilReport(CommonDealVo vo,
		HttpServletRequest request) {
	
	    ArrayList list=new ArrayList();
		try
		{
			logger.info(" getDealWithCibilReport vo.getStage(): "+vo.getStage());
			logger.info("here userid++++++++++++++++++++++++++++++++++++++++++++++++++++++++ "+vo.getReportingToUserId());
			String userNameQ="select USER_NAME from sec_user_m where REC_STATUS='A' and USER_ID='"+vo.getReportingToUserId()+"'";
			String userName=ConnectionDAO.singleReturn(userNameQ);
			logger.info("userNameQ: "+userNameQ+" userName: "+userName);
			
			userNameQ=null;
			//logger.info("here branch id++++++++++++++++++++++++++++++++++++++++++++++++ "+vo.getBranchId());
			logger.info("Date Format: "+dateFormat);
			ArrayList header=null;
			int count=0;
			int startRecordIndex=0;
			int endRecordIndex = no;
			CommonDealVo fetchVo= (CommonDealVo) vo;
			boolean appendSQL=false;
			StringBuffer bufInsSql=new StringBuffer();
			StringBuffer bufInsSqlTempCount = new StringBuffer();
			StringBuilder dealId=new StringBuilder();
			StringBuilder appNo=new StringBuilder();
			StringBuilder appDate=new StringBuilder();
			StringBuilder custName=new StringBuilder();
			StringBuilder productId=new StringBuilder();
			
			 dealId.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim()));
			 appNo.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim()));
			 appDate.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim()));
			 custName.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim()));
			 productId.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim()));
					
		
			logger.info(" getDealWithCibilReport select........");	

			bufInsSql.append("select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,");
			bufInsSql.append(dbo);
			bufInsSql.append("DATE_FORMAT(DEAL_DATE,'"+dateFormat+"'),deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,(SELECT USER_NAME FROM SEC_USER_M WHERE USER_ID=d.MAKER_ID) MAKER_ID ");
			bufInsSql.append(" from cr_deal_dtl d");
			bufInsSqlTempCount.append(" select distinct count(1) FROM (select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,");
			bufInsSqlTempCount.append(dbo);
			bufInsSqlTempCount.append("DATE_FORMAT(DEAL_DATE,'"+dateFormat+"')AS DEAL_DATE,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC from cr_deal_dtl d ");
			
			bufInsSql.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
			bufInsSqlTempCount.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
			
			bufInsSql.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
			bufInsSqlTempCount.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
			
			bufInsSql.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
			bufInsSqlTempCount.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
			
			bufInsSql.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
			bufInsSqlTempCount.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
			
						
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim().equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase(""))))
			{
		   	  bufInsSql.append("WHERE d.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' AND ");
		   	  bufInsSql.append(dbo);
		   	  bufInsSql.append("date(d.DEAL_DATE) =");
		   	  bufInsSql.append(dbo);
		   	  bufInsSql.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"'");
		   	  bufInsSqlTempCount.append("WHERE d.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' AND ");
		   	  bufInsSqlTempCount.append(dbo);
		   	  bufInsSqlTempCount.append("date(d.DEAL_DATE) =");
		   	  bufInsSqlTempCount.append(dbo);
		   	  bufInsSqlTempCount.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"'");
			}
			
			if(((vo.getLbxDealNo().equalsIgnoreCase("")))||((vo.getApplicationno().equalsIgnoreCase("")))||((vo.getApplicationdate().equalsIgnoreCase("")))||((vo.getCustomername().equalsIgnoreCase("")))||((vo.getLbxProductID().equalsIgnoreCase("")))||((vo.getLbxscheme().equalsIgnoreCase("")))||((vo.getStage().equalsIgnoreCase("")))){
				appendSQL=true;
			}
			
			if(appendSQL){
				logger.info("In Where Clause");
				bufInsSql.append(" WHERE d.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"' ");
				bufInsSqlTempCount.append(" WHERE d.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"' ");
			}
			 if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")))) {
		        bufInsSql.append("AND d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
		        bufInsSqlTempCount.append("AND d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
		   	 appendSQL=true;
		   	  
		     }
			 
			 if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")))) {
		   	  bufInsSql.append("AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
		   	  bufInsSqlTempCount.append("AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
		   	  appendSQL=true;
		     }
			
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim().equalsIgnoreCase("")))) {
		   	  bufInsSql.append("AND ");
		   	  bufInsSql.append(dbo);
		   	  bufInsSql.append("date(d.DEAL_DATE) =");
		   	  bufInsSql.append(dbo);
		   	  bufInsSql.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') ");
		   	  bufInsSqlTempCount.append("AND ");
		   	  bufInsSqlTempCount.append(dbo);
		   	  bufInsSqlTempCount.append("date(d.DEAL_DATE) =");
		   	  bufInsSqlTempCount.append(dbo);
		   	  bufInsSqlTempCount.append("STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') ");
		   	  appendSQL=true;
		     }
			
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")))) {
		   	  bufInsSql.append("AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
		   	  bufInsSqlTempCount.append("AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
		   	  appendSQL=true;
		     }
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")))) {
			   	  bufInsSql.append("AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
			   	  bufInsSqlTempCount.append("AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
			   	  appendSQL=true;
			     }
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")))) {
			   	  bufInsSql.append("AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
			   	  bufInsSqlTempCount.append("AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
			   	  appendSQL=true;
			     }
			
			if((!(vo.getLbxDealNo().equalsIgnoreCase("")))||(!(vo.getApplicationno().equalsIgnoreCase("")))||(!(vo.getApplicationdate().equalsIgnoreCase("")))||(!(vo.getCustomername().equalsIgnoreCase("")))||(!(vo.getLbxProductID().equalsIgnoreCase("")))||(!(vo.getLbxscheme().equalsIgnoreCase("")))||(!(vo.getStage().equalsIgnoreCase("")))){
				bufInsSqlTempCount.append(") as b");
				appendSQL=true;
			}
			
			
			 count =Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
			 logger.info("bufInsSqlTempCount : "+bufInsSqlTempCount.toString());
//			if((dealId.toString().trim()==null && appNo.toString().trim()==null && appDate.toString().trim()==null && custName.toString().trim()==null && productId.toString().trim()==null) || (dealId.toString().trim().equalsIgnoreCase("") && appNo.toString().trim().equalsIgnoreCase("") && appDate.toString().trim().equalsIgnoreCase("") && custName.toString().trim().equalsIgnoreCase("") && productId.toString().trim().equalsIgnoreCase("")) || fetchVo.getCurrentPageLink()>1)
//			{
			
			 logger.info("current PAge Link no .................... "+fetchVo.getCurrentPageLink());
			if(fetchVo.getCurrentPageLink()>1)
			{
				startRecordIndex = (fetchVo.getCurrentPageLink()-1)*no;
				endRecordIndex = no;
				 logger.info("startRecordIndex .................... "+startRecordIndex);
				 logger.info("endRecordIndex .................... "+endRecordIndex);
			}
			bufInsSql.append(" ORDER BY d.DEAL_ID OFFSET ");
			bufInsSql.append(startRecordIndex);
			bufInsSql.append(" ROWS FETCH next ");
			bufInsSql.append(endRecordIndex);
			bufInsSql.append(" ROWS ONLY ");
			logger.info("Search getDealWithCibilReport query for SQL SERVER : " + bufInsSql.toString());

				//bufInsSql.append(CommonFunction.betweenStartEnd(startRecordIndex, endRecordIndex));
			//query = query +" limit "+startRecordIndex+","+endRecordIndex;
//			}
			 logger.info("getDealWithCibilReport query : "+bufInsSql.toString());
		     header = ConnectionDAO.sqlSelect(bufInsSql.toString());
		   //logger.info("here &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&"+vo.getUserid());
						
			for(int i=0;i<header.size();i++){
			//	logger.info("header: "+header.size());
				ArrayList header1=(ArrayList)header.get(i);
				if(header1!=null && header1.size()>0)
				{
					
					fetchVo = new CommonDealVo();
		
					fetchVo.setLbxDealNo("<a href=cibilCustomer.do?method=cibilReportLoad&dealId="+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+">"+(CommonFunction.checkNull(header1.get(1)))+"</a>");
				
					
					fetchVo.setDealNo((CommonFunction.checkNull(header1.get(1))).trim());
					fetchVo.setApplicationno((CommonFunction.checkNull(header1.get(2))).trim());
					fetchVo.setApplicationdate((CommonFunction.checkNull(header1.get(3))).trim());
					fetchVo.setCustomername((CommonFunction.checkNull(header1.get(4))).trim());
			//		logger.info("Customer First Name: "+(CommonFunction.checkNull(header1.get(4))).trim());
					fetchVo.setProduct((CommonFunction.checkNull(header1.get(5))).trim());
					fetchVo.setScheme((CommonFunction.checkNull(header1.get(6))).trim());
					fetchVo.setReportingToUserId(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(header1.get(7))).trim());
					//fetchVo.setUserId(vo.getUserId());
					fetchVo.setTotalRecordSize(count);
					list.add(fetchVo);
				}
			}
	
			 logger.info(" getDealWithCibilReport getTotalRecordSize : "+fetchVo.getTotalRecordSize());
			 dealId=null;
			 appNo=null;
			 appDate=null;
			 custName=null;
			 productId=null;
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		 logger.info(" getDealWithCibilReport Detail List when searchList is : "+list);
		
		return list;
}

public boolean uploadCibilReportData(ConsumerVo uwDocVo)
{

	boolean status=false;
	logger.info("Inside DAO Impl: File= "+uwDocVo.getFileName());
	logger.info("Inside DAO Impl: deal id= "+uwDocVo.getDealId());
	//boolean uploadStatus=UploadDocument.docUpload(uwDocVo.getDocFile(),uwDocVo.getDealId());
	//if(uploadStatus)
	//{
		logger.info("Document Uploaded Successfully");
		ArrayList qryList = new ArrayList();
		PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
		try{
			logger.info("In insert part of uploadUnderwritingData....");
			StringBuffer bufInsSql =	new StringBuffer();
			bufInsSql.append("insert into cr_uploaded_documents(txn_type,txn_id,document_desc,file_name,document_path,uploaded_by,uploaded_date)");
			bufInsSql.append(" values ( ");
			bufInsSql.append(" ?," ); //TXN_TYPE
			bufInsSql.append(" ?," ); //TXN_ID
			bufInsSql.append(" ?," ); //Document Description
			bufInsSql.append(" ?," ); //File Name
			bufInsSql.append(" ?," ); //Document Path
			bufInsSql.append(" ?," ); //Uploaded By
			bufInsSql.append(dbo); 
			bufInsSql.append("sysdate())" ); //Uploaded Date
			
				insertPrepStmtObject.addString(("CBL").trim());
				
			if((CommonFunction.checkNull(uwDocVo.getCivilId())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((uwDocVo.getCivilId()).trim());
			//if((CommonFunction.checkNull(uwDocVo.getDocDescription())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			//else
			//	insertPrepStmtObject.addString((uwDocVo.getDocDescription()).trim());
			if(CommonFunction.checkNull(uwDocVo.getFileName()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(CommonFunction.checkNull(uwDocVo.getFileName()).trim());
			if((CommonFunction.checkNull(uwDocVo.getDocPath())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((uwDocVo.getDocPath()).trim());
			if((CommonFunction.checkNull(uwDocVo.getUserName())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((uwDocVo.getUserName()).trim());


			insertPrepStmtObject.setSql(bufInsSql.toString());
			logger.info("IN uploadUnderwritingData() insert query1 ### "+insertPrepStmtObject.printQuery());
			qryList.add(insertPrepStmtObject);
			status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			logger.info("In uploadUnderwritingData.................query status..... "+status);
			bufInsSql=null;
		}catch(Exception e){
			e.printStackTrace();
		}
	return status;
}


public ArrayList getUploadCibilData(String dealId)
{
	ArrayList list=new ArrayList();
	
	try{
		logger.info("In getUploadCibilData...........cibilId...............DAOImpl"+dealId);
		StringBuilder query=new StringBuilder();
		query.append("select txn_id, file_name, document_desc, uploaded_by from cr_uploaded_documents where txn_id IN (select CIBIL_ID from cr_cibil_dtl where deal_id='"+dealId+"') and TXN_TYPE='CBL'");
		logger.info("In getUploadCibilData...............query...........DAOImpl"+query.toString());
		UnderwritingDocUploadVo uwDocVo = null;
		ArrayList product = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getUploadCibilData size of list Product "+product.size());
		query=null;
		for(int i=0;i<product.size();i++){
			logger.info("getUploadCibilData... FOR loop "+CommonFunction.checkNull(product.get(i)).toString());
			ArrayList data=(ArrayList)product.get(i);
			if(data.size()>0)	{
				uwDocVo=new UnderwritingDocUploadVo();
				uwDocVo.setDealId((CommonFunction.checkNull(data.get(0))).trim());
				uwDocVo.setFileName(CommonFunction.checkNull(data.get(1)).trim());
				uwDocVo.setDocDescription((CommonFunction.checkNull(data.get(2))).trim());
				uwDocVo.setUserName((CommonFunction.checkNull(data.get(3))).trim());
				list.add(uwDocVo);
			}
		}
	}
	catch(Exception e){
		e.printStackTrace();
	}

	return list;
}


public String getFileInfoOFCibilReport(String dealId,String fileName)
{
	String filePath="";
	try
	{
	logger.info("In getFileInfo..........................DAOImpl");
	StringBuffer query =	new StringBuffer();
	 query.append("select document_path from cr_uploaded_documents where txn_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' and file_name='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(fileName)).trim()+"' AND TXN_TYPE='CBL'");
	logger.info("In getFileInfo...............query...........DAOImpl "+query.toString());
	filePath = ConnectionDAO.singleReturn(query.toString()); 
	logger.info("Resultset value====  "+filePath);
	query=null;

}catch(Exception e){
	e.printStackTrace();
}
	return filePath;
}



public  boolean uploadedCibilDocsDelete(String dealId,String cibilId)
{
	boolean status=false;
	try
	{
		String query = "SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='UNDERWRITER_UPLOAD'";
		logger.info("IN......uploadedCibilDocsDelete"+query.toString());
		String rpt= ConnectionDAO.singleReturn(query);
		File directory = new File(rpt+"/"+dealId);
		boolean isDirectory = directory.isDirectory();
		if (isDirectory) {
		      logger.info("the name you have entered is a directory  : "  +directory);
		      logger.info("the path is "  + directory.getAbsolutePath());
			}
		
		String getFileNameQ="select file_name from cr_uploaded_documents where txn_id = '"+cibilId+"' and TXN_TYPE='CBL'";
		
		ArrayList getFileName = ConnectionDAO.sqlSelect(getFileNameQ);
		int size=getFileName.size();
		for(int i=0;size>0;i++)
		{
			ArrayList fileName=(ArrayList)getFileName.get(i);
			if(fileName.size()>0)
			{
				File file= new File(directory.getAbsolutePath(),fileName.get(0).toString());
				boolean exists = file.exists();
				if(exists)
				{
					logger.info("the name you have entered is a file  : "  +file.getName());
				    logger.info("the path is "  + file.getAbsolutePath());
					file.delete();
					status=true;
				}
			}
			
		}
		
	}catch(Exception e){
		e.printStackTrace();
	}
	return status;
	
}

public ArrayList<LeaddetailDealVo> CustomerDetailsList(String leadId) {
	ArrayList<LeaddetailDealVo> list = new ArrayList<LeaddetailDealVo>();

	try {
		
		StringBuilder query=new StringBuilder();
	
	 				
	 				query.append("SELECT distinct l.LEAD_ID,l.CUSTOMER_NAME,l.ADDRESS_LINE1,l.ADDRESS_LINE2,l.ADDRESS_LINE3,l.PINCODE,l.PRIMARY_PHONE,l.ALTERNATE_PHONE");
	 				query.append(",l.EMAIL_ID,l.COUNTRY,l.STATE,l.DISTRICT,l.NO_OF_YEARS,l.INDUSTRY_ID,l.SUB_INDUSTRY_ID,l.CUSTOMER_TYPE," );
	 				query.append("l.ADDRESS_TYPE,l.GROUP_ID,l.CONSTITUTION,REGISTRATION_NO,l.PAN,l.BUSINESS_SEGMENT,l.FIRST_NAME,l.LAST_NAME," );
	 				query.append(dbo);
	 				query.append("DATE_FORMAT(l.CUSTOMER_DOB,'"+dateFormat+"'),l.EXISTING_CUSTOMER,l.PRODUCT,l.SCHEME,l.GROUP_TYPE,l.GROUP_DESC,l.NO_OF_MONTHS," );
	 				query.append("OWNERSHIP,FATHER_HUSBAND_NAME,DRIVING_LICENSE,VOTER_ID,PASSPORT_NUMBER,TAHSIL,LOAN_TYPE from  cr_lead_dtl l where LEAD_ID='"+ StringEscapeUtils.escapeSql(CommonFunction.checkNull(leadId)) + "'");


		logger.info("CustomerDetailsList-------------" + query.toString());
		
		LeaddetailDealVo leadVo = null;
		ArrayList leaddeatail = ConnectionDAO.sqlSelect(query.toString());
		logger.info("CustomerDetailsList----size-----" + leaddeatail.size());
		
		query=null;
		
		for (int i = 0; i < leaddeatail.size(); i++) {

			logger.info("CustomerDetailsList"+ leaddeatail.get(i).toString());
			ArrayList leaddeatail1 = (ArrayList) leaddeatail.get(i);
			if (leaddeatail1.size() > 0) {
				logger.info("CustomerDetailsList=========size======"+ leaddeatail1.size());
				
				leadVo = new LeaddetailDealVo();
				
				leadVo.setLbxLeadNo((CommonFunction.checkNull(leaddeatail1.get(0))).trim());
				leadVo.setCustomerName((CommonFunction.checkNull(leaddeatail1.get(1))).trim());
				leadVo.setAddressLine1((CommonFunction.checkNull(leaddeatail1.get(2))).trim());
				leadVo.setAddressLine2((CommonFunction.checkNull(leaddeatail1.get(3))).trim());
				leadVo.setAddressLine3((CommonFunction.checkNull(leaddeatail1.get(4))).trim());
				leadVo.setPinCode((CommonFunction.checkNull(leaddeatail1.get(5))).trim());
				leadVo.setPhone((CommonFunction.checkNull(leaddeatail1.get(6))).trim());
				leadVo.setAltPhone((CommonFunction.checkNull(leaddeatail1.get(7))).trim());
				leadVo.setEmail((CommonFunction.checkNull(leaddeatail1.get(8))).trim());
				leadVo.setLbxCountry((CommonFunction.checkNull(leaddeatail1.get(9))).trim());
				leadVo.setLbxState((CommonFunction.checkNull(leaddeatail1.get(10))).trim());
				leadVo.setLbxDistrict((CommonFunction.checkNull(leaddeatail1.get(11))).trim());
				leadVo.setNoOfYrs((CommonFunction.checkNull(leaddeatail1.get(12))).trim());
				leadVo.setLbxIndustry((CommonFunction.checkNull(leaddeatail1.get(13))).trim());
				leadVo.setLbxSubIndustry((CommonFunction.checkNull(leaddeatail1.get(14))).trim());
				leadVo.setCustomerType((CommonFunction.checkNull(leaddeatail1.get(15))).trim());
				leadVo.setAddressType((CommonFunction.checkNull(leaddeatail1.get(16))).trim());
				leadVo.setGroupId((CommonFunction.checkNull(leaddeatail1.get(17))).trim());
				leadVo.setConstitution((CommonFunction.checkNull(leaddeatail1.get(18))).trim());
				leadVo.setRegistrationNo((CommonFunction.checkNull(leaddeatail1.get(19))).trim());
				
				leadVo.setPan((CommonFunction.checkNull(leaddeatail1.get(20))).trim());
				leadVo.setBusinessSegment((CommonFunction.checkNull(leaddeatail1.get(21))).trim());
				leadVo.setFirstName((CommonFunction.checkNull(leaddeatail1.get(22))).trim());
				leadVo.setLastName((CommonFunction.checkNull(leaddeatail1.get(23))).trim());
				leadVo.setCustDOB((CommonFunction.checkNull(leaddeatail1.get(24))).trim());
				leadVo.setExistingFlag((CommonFunction.checkNull(leaddeatail1.get(25))).trim());
				leadVo.setLeadProduct((CommonFunction.checkNull(leaddeatail1.get(26))).trim());
				leadVo.setLeadScheme((CommonFunction.checkNull(leaddeatail1.get(27))).trim());
				leadVo.setLeadGroupType((CommonFunction.checkNull(leaddeatail1.get(28))).trim());
				leadVo.setLeadGroupName((CommonFunction.checkNull(leaddeatail1.get(29))).trim());
				leadVo.setNoOfMonths((CommonFunction.checkNull(leaddeatail1.get(30))).trim());
				//kanika code
			
				leadVo.setOwner((CommonFunction.checkNull(leaddeatail1.get(31))).trim());
				leadVo.setFatherHusbandName((CommonFunction.checkNull(leaddeatail1.get(32))).trim());
				leadVo.setDrivingLicence((CommonFunction.checkNull(leaddeatail1.get(33))).trim());
				leadVo.setVoterId((CommonFunction.checkNull(leaddeatail1.get(34))).trim());
				leadVo.setPassportNo((CommonFunction.checkNull(leaddeatail1.get(35))).trim());
				leadVo.setTehsil((CommonFunction.checkNull(leaddeatail1.get(36))).trim());
				leadVo.setLoanType((CommonFunction.checkNull(leaddeatail1.get(37))).trim());
				leadVo.setLbxareaCodeVal((CommonFunction.checkNull(leaddeatail1.get(38))).trim());
				list.add(leadVo);
			
			}
		}
	} catch (Exception e) {
		e.printStackTrace();
	}
	return list;

}


public  String saveLeadCustomerDetails(LeaddetailDealVo vo)
{
	boolean status=false;
	PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
	ArrayList qryList = new ArrayList();
	String result="";
	try
	{

		logger.info("In insert saveLeadCustomerDetails");
		StringBuffer bufInsSql =	new StringBuffer();
		bufInsSql.append("insert into cr_deal_customer_m(CUSTOMER_NAME,CUSTOMER_FNAME,CUSTOMER_LNAME,CUSTOMER_TYPE,CUSTOMER_GROUP_ID,CUSTOMER_DOB,CUSTMER_PAN,CUSTOMER_REGISTRATION_NO" +
		",CUSTOMER_CONSTITUTION,CUSTOMER_BUSINESS_SEGMENT,CUSTOMER_INDUSTRY,CUSTOMER_SUB_INDUSTRY,CUSTOMER_EMAIL,FATHER_HUSBAND_NAME,DRIVING_LICENSE,VOTER_ID,PASSPORT_NUMBER,REC_STATUS,MAKER_ID,CUSTOMER_GROUP_TYPE,CUSTOMER_GROUP_DESC,MAKER_DATE)");
		bufInsSql.append(" values ( ");
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(dbo);
		bufInsSql.append("STR_TO_DATE(?,'"+dateFormat+"')," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
        bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		//bufInsSql.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND) )" );
		bufInsSql.append(dbo);
		bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) )");

	if((CommonFunction.checkNull(vo.getCustomerName())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getCustomerName()).trim());//getCustomerName

	if((CommonFunction.checkNull(vo.getFirstName())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getFirstName()).trim());//getFirstName

	if((CommonFunction.checkNull(vo.getLastName())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getLastName()).trim());//getLastName

	if((CommonFunction.checkNull(vo.getCustomerType())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getCustomerType()).trim());//getCustomerType

	if((CommonFunction.checkNull(vo.getGroupId())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getGroupId()).trim());//getGroupId

	
	
	if((CommonFunction.checkNull(vo.getCustDOB())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getCustDOB()).trim());//getCustDOB

	if((CommonFunction.checkNull(vo.getPan())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getPan()).trim());//CUSTMER_PAN


	if((CommonFunction.checkNull(vo.getRegistrationNo())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getRegistrationNo()).trim());//getRegistrationNo

	

	if((CommonFunction.checkNull(vo.getConstitution())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getConstitution()).trim());//getConstitution

	

	if((CommonFunction.checkNull(vo.getBusinessSegment())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getBusinessSegment()).trim());//getBusinessSegment

	if((CommonFunction.checkNull(vo.getLbxIndustry())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getLbxIndustry()).trim());//getLbxCountry

	if((CommonFunction.checkNull(vo.getLbxSubIndustry())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getLbxSubIndustry()).trim());//getLbxSubIndustry
	if((CommonFunction.checkNull(vo.getEmail())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getEmail()).trim());//getEmail


	if((CommonFunction.checkNull(vo.getFatherHusbandName())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getFatherHusbandName()).trim());//FATHER_HUSBAND_NAME
	

	if((CommonFunction.checkNull(vo.getDrivingLicence())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getDrivingLicence()).trim());//DRIVING_LICENSE

	if((CommonFunction.checkNull(vo.getVoterId())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getVoterId()).trim());//VOTER_ID
	if((CommonFunction.checkNull(vo.getPassportNo())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getPassportNo()).trim());//PASSPORT_NUMBER
	insertPrepStmtObject.addString("A");//Status
	
	if((CommonFunction.checkNull(vo.getMakerId())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getMakerId()).trim());//maker Id
	// Add by prashant
	if((CommonFunction.checkNull(vo.getLeadGroupType())).equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();                    
	else
		insertPrepStmtObject.addString((vo.getLeadGroupType()));                 //CUSTOMER_GROUP_TYPE
	
	if((CommonFunction.checkNull(vo.getLeadGroupName())).equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getLeadGroupName()));              //CUSTOMER_GROUP_DESC
	// End by prashant

	if((CommonFunction.checkNull(vo.getMakerDate())).equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getMakerDate()));

		insertPrepStmtObject.setSql(bufInsSql.toString());
		logger.info("IN saveLeadCustomerDetails() insert query1 ### "+insertPrepStmtObject.printQuery());


		qryList.add(insertPrepStmtObject);
		status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
		if(status){
			
			 String query1="Select max(CUSTOMER_ID) from cr_deal_customer_m  WITH (ROWLOCK) ";
			 String strMax = ConnectionDAO.singleReturn(query1); 
			result=strMax;
		}else{
			result="0";
		}
		logger.info("In saveLeadCustomerDetails..........status............"+status);

	}
	catch(Exception e){
			e.printStackTrace();
	}
	finally
	{
		vo=null;
	}
	return result;
}
public  boolean saveLeadCustomerAddressDetails(LeaddetailDealVo vo)
{
	boolean status=false;
	PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
	ArrayList qryList = new ArrayList();
	try
	{

		logger.info("In insert saveLeadCustomerAddressDetails");
		StringBuffer bufInsSql =	new StringBuffer();
		bufInsSql.append("insert into cr_deal_address_m(ADDRESS_TYPE,ADDRESS_LINE1,ADDRESS_LINE2,ADDRESS_LINE3,COUNTRY,STATE,DISTRICT,PINCODE," +
				"PRIMARY_PHONE,NO_OF_YEARS,ALTERNATE_PHONE,BPID,COMMUNICATION_ADDRESS,REC_STATUS,MAKER_ID,MAKER_DATE,BPTYPE,ADDRESS_DETAIL,TAHSIL,NO_OF_MONTHS)");
		bufInsSql.append(" values ( ");
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );

		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		//bufInsSql.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND)," );
		bufInsSql.append(dbo);
		bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ,");
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ?," );
		bufInsSql.append(" ? )" );


	if((CommonFunction.checkNull(vo.getAddressType())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getAddressType()).trim());//getAddressType

	if((CommonFunction.checkNull(vo.getAddressLine1())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getAddressLine1()).trim());//getAddressLine1

	if((CommonFunction.checkNull(vo.getAddressLine2())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getAddressLine2()).trim());//getAddressLine2

	if((CommonFunction.checkNull(vo.getAddressLine3())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getAddressLine3()).trim());//getAddressLine3

	if((CommonFunction.checkNull(vo.getLbxCountry())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getLbxCountry()).trim());//getLbxCountry

	
	
	if((CommonFunction.checkNull(vo.getLbxState())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getLbxState()).trim());//getLbxState

	if((CommonFunction.checkNull(vo.getLbxDistrict())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getLbxDistrict()).trim());//getLbxDistrict


	if((CommonFunction.checkNull(vo.getPinCode())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getPinCode()).trim());//getPinCode

	

	if((CommonFunction.checkNull(vo.getPhone() )).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getPhone()).trim());//getPhone

	

	if((CommonFunction.checkNull(vo.getNoOfYrs())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getNoOfYrs()).trim());//getNoOfYrs

	if((CommonFunction.checkNull(vo.getAltPhone())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getAltPhone()).trim());//getAltPhone

	if((CommonFunction.checkNull(vo.getBpId())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getBpId()).trim());//bpid

	if((CommonFunction.checkNull(vo.getCommAddress())).trim().equals(""))
		insertPrepStmtObject.addString("N");
	else
		insertPrepStmtObject.addString("Y");

	insertPrepStmtObject.addString("A");//Status
	
	if((CommonFunction.checkNull(vo.getMakerId())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getMakerId()).trim());//maker Id

	if((CommonFunction.checkNull(vo.getMakerDate())).equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getMakerDate()));
	insertPrepStmtObject.addString("CS");
	if((CommonFunction.checkNull(vo.getOwner())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getOwner()).trim());//ADDRESS_DETAIL(getOwner)
	if((CommonFunction.checkNull(vo.getTehsil())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getTehsil()).trim());//TAHSIL
	if((CommonFunction.checkNull(vo.getNoOfMonths())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getNoOfMonths()).trim());//NO_OF_MONTHS
		insertPrepStmtObject.setSql(bufInsSql.toString());
		logger.info("IN saveLeadCustomerAddressDetails() insert query1 ### "+insertPrepStmtObject.printQuery());
		qryList.add(insertPrepStmtObject);
	
		status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
		logger.info("In saveLeadCustomerAddressDetails..........status............"+status);

	}
	catch(Exception e){
			e.printStackTrace();
	}
	finally
	{
		vo=null;
	}
	return status;
}
public  boolean linkLeadCustomer(LeaddetailDealVo vo)
{
	boolean status=false;
	PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
	ArrayList qryList = new ArrayList();
	try
	{

		logger.info("In insert saveLeadCustomerAddressDetails");
		StringBuffer bufInsSql =	new StringBuffer();
		bufInsSql.append("Insert Into cr_deal_customer_role(DEAL_ID,  DEAL_CUSTOMER_ROLE_TYPE, DEAL_CUSTOMER_TYPE,DEAL_CUSTOMER_ID, " +
				"DEAL_EXISTING_CUSTOMER, STATUS, MAKER_ID, MAKER_DATE)") ;
		
		bufInsSql.append(" values ( ");
		bufInsSql.append(" ?," );//DEAL_ID
		bufInsSql.append(" ?," );//DEAL_CUSTOMER_ROLE_TYPE
		bufInsSql.append(" ?," );//DEAL_CUSTOMER_TYPE
		bufInsSql.append(" ?," );//DEAL_CUSTOMER_ID
		bufInsSql.append(" ?," );//DEAL_EXISTING_CUSTOMER
		bufInsSql.append(" ?," );//STATUS
		bufInsSql.append(" ?," );//MAKER_ID
		//bufInsSql.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND) )" );//MAKER_DATE
		bufInsSql.append(dbo);
		bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) )");

	if((CommonFunction.checkNull(vo.getDealId())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getDealId()).trim());//DEAL_ID

	insertPrepStmtObject.addString("PRAPPL");//DEAL_CUSTOMER_ROLE_TYPE
	if((CommonFunction.checkNull(vo.getCustomerType())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getCustomerType()).trim());//DEAL_CUSTOMER_TYPE

	if((CommonFunction.checkNull(vo.getBpId())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getBpId()).trim());//DEAL_CUSTOMER_ID
	if((CommonFunction.checkNull(vo.getExistingFlag())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getExistingFlag()).trim());//DEAL_EXISTING_CUSTOMER
	


	insertPrepStmtObject.addString("A");//Status
	
	if((CommonFunction.checkNull(vo.getMakerId())).trim().equals(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getMakerId()).trim());//maker Id

	if((CommonFunction.checkNull(vo.getMakerDate())).equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getMakerDate()));

		insertPrepStmtObject.setSql(bufInsSql.toString());
		logger.info("IN saveLeadCustomerAddressDetails() insert query1 ### "+insertPrepStmtObject.printQuery());
		qryList.add(insertPrepStmtObject);
	
		status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
		logger.info("In saveLeadCustomerAddressDetails..........status............"+status);

	}
	catch(Exception e){
			e.printStackTrace();
	}
	finally
	{
		vo=null;
	}
	return status;
}
public boolean updateDealCustomer(LeaddetailDealVo vo) {
	logger.info("In updateDealCustomer");
	
	ArrayList qryList=new ArrayList();
	boolean status=false;
	try {
	
		 PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
		   StringBuffer bufInsSql =	new StringBuffer();
		   
		   bufInsSql.append("Update cr_deal_dtl set DEAL_CUSTOMER_ID=?, DEAL_EXISTING_CUSTOMER=? ,DEAL_CUSTOMER_TYPE=?  where  DEAL_ID=?; ");
		
		   if(CommonFunction.checkNull(vo.getBpId()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(vo.getBpId().trim());   // getBpId
		   if(CommonFunction.checkNull(vo.getExistingFlag()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(vo.getExistingFlag().trim());   // DEAL_EXISTING_CUSTOMER
		   if(CommonFunction.checkNull(vo.getCustomerType()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(vo.getCustomerType().trim());   // getCustomerType
		   
				if(CommonFunction.checkNull(vo.getDealId()).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(vo.getDealId().trim());   // deal Id
				   						
			insertPrepStmtObject.setSql(bufInsSql.toString());
			 logger.info("IN updateDealCustomer() insert query1 ### "+insertPrepStmtObject.printQuery());
			qryList.add(insertPrepStmtObject);
			bufInsSql=null;
		  
		
			status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
		} catch (Exception e) {
			e.printStackTrace();
		}
	     logger.info("In updateDealCustomer......................"+status);
	return status;
}





public ArrayList getProductSchemeDetailsFromLead(String product, String scheme,
		String loanTenure, String loanAmount, String loanPurpose,String bdate,String loanType,String sectorType,String loanPurposeValue, String premium) {
	
		ArrayList<Object> list=new ArrayList<Object>();
		try{
			
			StringBuilder query=new StringBuilder();
		 query.append("SELECT ");
		 if(dbType.equalsIgnoreCase("MSSQL"))
			{
			 query.append(" TOP 1 ");
			}
		 query.append(" DEFAULT_MARGIN_RATE,RATE_TYPE,RATE_METHOD,S.BASE_RATE_TYPE,B.BASE_RATE,DEF_FLAT_RATE,");
		 query.append(" DEF_EFF_RATE,DEF_TENURE,REPAYMENT_FREQ,INSTALLMENT_TYPE,REPAYMENT_MODE,INSTALLMENT_MODE ,P.REPAYMENT_TYPE,P.REVOLVING_FLAG");
		 query.append(" ,MIN_MARGIN_RATE,MAX_MARGIN_RATE,MIN_TENURE,MAX_TENURE,MIN_AMT_FIN,MAX_AMT_FIN,P.ASSET_FLAG,p.PRODUCT_DESC,s.SCHEME_DESC,p.PRODUCT_CATEGORY,p.DAYS_BASIS,S.FLOATING_FIXED_PERIOD,S.MIN_FLAT_RATE,S.MAX_FLAT_RATE,S.MIN_EFF_RATE,S.MAX_EFF_RATE,dbo.date_format(DATEADD(MONTH, "+loanTenure+", dbo.STR_TO_DATE('"+bdate+"','"+dateFormat+"')),'"+dateFormat+"') from cr_scheme_m S " );
		 query.append(" LEFT JOIN cr_base_rate_m B ON S.BASE_RATE_TYPE=B.BASE_RATE_TYPE AND B.rec_status='A' and b.EFFECTIVE_FROM <= ");
		 query.append(dbo);
		 query.append("STR_TO_DATE('"+bdate+"','"+dateFormat+"') ");
		 query.append(" LEFT JOIN cr_product_m P ON S.PRODUCT_ID=P.PRODUCT_ID");
		 query.append(" where SCHEME_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(scheme)).trim()+" AND S.REC_STATUS='A' " );
		 query.append(" order by b.EFFECTIVE_FROM desc ");
		 if(!dbType.equalsIgnoreCase("MSSQL") && dbo.equalsIgnoreCase(""))
			{
			 query.append(" limit 1" );
			}
			
		logger.info("getLoanDetailScheme"+query.toString());
		LoanDetailVo loanVo = null;
		ArrayList schemedeatail = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getLeadEntryList"+schemedeatail.size());
		
		query=null;
		
		for(int i=0;i<schemedeatail.size();i++){

			logger.info("getLeadEntryList"+schemedeatail.get(i).toString());
			ArrayList schemedeatail1=(ArrayList)schemedeatail.get(i);
			if(schemedeatail1.size()>0)
			{
				logger.info("getLeadEntryList"+schemedeatail1.size());
				loanVo = new LoanDetailVo();
				if(!CommonFunction.checkNull(schemedeatail1.get(0)).equalsIgnoreCase(""))
				{
				Number reconNum =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(0))).trim());
				loanVo.setMarginPerc(myFormatter.format(reconNum));
				double ltv=100-reconNum.doubleValue();
				loanVo.setLtvPerc(""+ltv);
				}
				loanVo.setRateType((CommonFunction.checkNull(schemedeatail1.get(1))).trim());
				loanVo.setType((CommonFunction.checkNull(schemedeatail1.get(2))).trim());
				loanVo.setBaseRateType((CommonFunction.checkNull(schemedeatail1.get(3))).trim());
				if(!CommonFunction.checkNull(schemedeatail1.get(4)).equalsIgnoreCase(""))
				{
					Number reconNumb =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(4))).trim());
					loanVo.setBaseRate(myFormatter.format(reconNumb));
				}
				
				if((CommonFunction.checkNull(schemedeatail1.get(1))).trim().equalsIgnoreCase("E"))
				{
				    Number effRate=0.00;
					Number baseRate=0.00;
					if(!CommonFunction.checkNull(schemedeatail1.get(6)).equalsIgnoreCase(""))
					{
						effRate =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(6))).trim());
					}
					if(!CommonFunction.checkNull(schemedeatail1.get(4)).equalsIgnoreCase(""))
					{
						baseRate =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(4))).trim());
					}
					Number markUp=effRate.doubleValue()-baseRate.doubleValue();
					loanVo.setEffectiveRate(myFormatter.format(effRate));
					loanVo.setMarkUp(myFormatter.format(markUp));
				}
				else
				{
					String fltRT=CommonFunction.checkNull(schemedeatail1.get(5));
					if(fltRT.trim().equalsIgnoreCase(""))
						fltRT="0.00";
					String bsRT=CommonFunction.checkNull(schemedeatail1.get(4));
					if(bsRT.trim().equalsIgnoreCase(""))
						bsRT="0.00";
					Number flatRate =myFormatter.parse((fltRT).trim());
					Number baseRate =myFormatter.parse((bsRT).trim());
					Number markUp=flatRate.doubleValue()-baseRate.doubleValue();
					loanVo.setEffectiveRate(myFormatter.format(flatRate));
					loanVo.setMarkUp(myFormatter.format(markUp));
				}
				//schemeVo.setDefEffRate((CommonFunction.checkNull(schemedeatail1.get(6))).trim());
				loanVo.setRequestedLoanTenure((CommonFunction.checkNull(schemedeatail1.get(7))).trim());
				loanVo.setFrequency((CommonFunction.checkNull(schemedeatail1.get(8))).trim());
				int freqMonth=0;
			 	if((CommonFunction.checkNull(schemedeatail1.get(8))).trim().equalsIgnoreCase("M"))
	    	   	{
	    	   		freqMonth=1;
	    	   	}
	    	   	else if((CommonFunction.checkNull(schemedeatail1.get(8))).trim().equalsIgnoreCase("B"))
	    	   	{
	    	   		freqMonth=2;
	    	   	}
	    	   	else if((CommonFunction.checkNull(schemedeatail1.get(8))).trim().equalsIgnoreCase("Q"))
	    	   	{
	    	   		freqMonth=3;
	    	   	}
	    	   	else if((CommonFunction.checkNull(schemedeatail1.get(8))).trim().equalsIgnoreCase("H"))
	    	   	{
	    	   		freqMonth=6;
	    	   	}
	    	   	else if((CommonFunction.checkNull(schemedeatail1.get(8))).trim().equalsIgnoreCase("Y"))
	    	   	{
	    	   		freqMonth=12;
	    	   	}
			 	int parseTenure=Integer.parseInt(loanTenure);
				int calcInsat=parseTenure/freqMonth;
				loanVo.setNoOfInstall(""+calcInsat);
				loanVo.setInstallmentType((CommonFunction.checkNull(schemedeatail1.get(9))).trim());
				loanVo.setPaymentMode((CommonFunction.checkNull(schemedeatail1.get(10))).trim());
				loanVo.setInstMode((CommonFunction.checkNull(schemedeatail1.get(11))).trim());
				loanVo.setRepaymentType((CommonFunction.checkNull(schemedeatail1.get(12))).trim());
				if((CommonFunction.checkNull(schemedeatail1.get(12))).trim().equalsIgnoreCase("I"))
				{
					loanVo.setShowRepaymentType("INSTALLMENT");
				}
				else
				{
					loanVo.setShowRepaymentType("NON-INSTALLMENT");
				}
				
				//loanVo.setr((CommonFunction.checkNull(schemedeatail1.get(13))).trim());
				if(!CommonFunction.checkNull(schemedeatail1.get(14)).equalsIgnoreCase(""))
				{	
					Number reconNumm =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(14))).trim());
					loanVo.setMinMRate(myFormatter.format(reconNumm));
				}
				//schemeVo.setMinMarginRate((CommonFunction.checkNull(schemedeatail1.get(14))).trim());
				if(!CommonFunction.checkNull(schemedeatail1.get(15)).equalsIgnoreCase(""))
				{	
					Number reconNumR =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(15))).trim());
					loanVo.setMaxMRate(myFormatter.format(reconNumR));
				}
				//schemeVo.setMaxMarginRate((CommonFunction.checkNull(schemedeatail1.get(15))).trim());
				loanVo.setMinTenure((CommonFunction.checkNull(schemedeatail1.get(16))).trim());
				loanVo.setMaxTenure((CommonFunction.checkNull(schemedeatail1.get(17))).trim());
			
				if(!CommonFunction.checkNull(schemedeatail1.get(18)).equalsIgnoreCase(""))
				{
					Number reconNumf =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(18))).trim());
					loanVo.setMinFinanceAmount(myFormatter.format(reconNumf));
				}
				
				//schemeVo.setMinFinance((CommonFunction.checkNull(schemedeatail1.get(18))).trim());
				if(!CommonFunction.checkNull(schemedeatail1.get(19)).equalsIgnoreCase(""))
				{
					Number reconNummF =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(19))).trim());
					loanVo.setMaxFinanceAmount(myFormatter.format(reconNummF));
				}
				//schemeVo.setMaxFinance((CommonFunction.checkNull(schemedeatail1.get(19))).trim());
				loanVo.setAssetFlag((CommonFunction.checkNull(schemedeatail1.get(20))).trim());
				loanVo.setProduct((CommonFunction.checkNull(schemedeatail1.get(21))).trim());
				loanVo.setScheme((CommonFunction.checkNull(schemedeatail1.get(22))).trim());
				loanVo.setProductType((CommonFunction.checkNull(schemedeatail1.get(23))).trim());
				loanVo.setDaysBasis((CommonFunction.checkNull(schemedeatail1.get(24))).trim());
				loanVo.setLbxProductID(product);
				loanVo.setLbxscheme(scheme);
				
				loanVo.setRequestedLoanTenure(loanTenure);
				if(!CommonFunction.checkNull(loanAmount).equalsIgnoreCase(""))
				{
					logger.info("loanAmount: "+loanAmount);
					Number reconNummF =myFormatter.parse(loanAmount);
					loanVo.setRequestedLoanAmount(myFormatter.format(reconNummF));
				}
				loanVo.setLoanPurpose(loanPurpose);
				loanVo.setLoanType(loanType);
				loanVo.setFixPriod((CommonFunction.checkNull(schemedeatail1.get(25))).trim());
				
				if(!CommonFunction.checkNull(schemedeatail1.get(26)).equalsIgnoreCase(""))
				{
					Number reconNumd =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(26))).trim());
					loanVo.setMinFlatRate(myFormatter.format(reconNumd));
				}
				else
				{
					loanVo.setMinFlatRate("0.0000000");
				}
				if(!CommonFunction.checkNull(schemedeatail1.get(27)).equalsIgnoreCase(""))
				{
					Number reconNumd =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(27))).trim());
					loanVo.setMaxFlatRate(myFormatter.format(reconNumd));
				}
				else
				{
					loanVo.setMaxFlatRate("0.0000000");
				}
			
		
				if(!CommonFunction.checkNull(schemedeatail1.get(28)).equalsIgnoreCase(""))
				{
					Number reconNumd =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(28))).trim());
					loanVo.setMinEffectiveRate(myFormatter.format(reconNumd));
				}
				else
				{
					loanVo.setMinEffectiveRate("0.0000000");
				}
				if(!CommonFunction.checkNull(schemedeatail1.get(29)).equalsIgnoreCase(""))
				{
					Number reconNumd =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(29))).trim());
					loanVo.setMaxEffectiveRate(myFormatter.format(reconNumd));
				}
				else
				{
					loanVo.setMaxEffectiveRate("0.0000000");
				}
				loanVo.setMaturityDate(CommonFunction.checkNull(schemedeatail1.get(30)).trim());
				loanVo.setSectorType(sectorType);
				list.add(loanVo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}


public ArrayList getDealVerificationMovementDetail(String txnid,String userId) {
	ArrayList list=new ArrayList();
		try{
			logger.info("In getDealVerificationMovementDetail......Dao Impl"+txnid);
		  StringBuilder query=new StringBuilder();
		  query.append(" select V.VERIFICATION_ID,V.VERIFICATION_TYPE,V.APPRAISER_TYPE,S.USER_NAME,CASE WHEN V.VERIFICATION_ACTION='P' THEN 'PENDING'    WHEN V.VERIFICATION_ACTION='I' THEN 'INITIATED'  WHEN V.VERIFICATION_ACTION='W' THEN 'WAIVED'END AS VERIFICATION_ACTION,CASE  WHEN V.REC_STATUS='P' THEN 'PENDING'  WHEN V.REC_STATUS='F' THEN 'FORWARDED' WHEN V.REC_STATUS='R' THEN 'CAPTURED' WHEN V.REC_STATUS='C' THEN 'COMPLETED' END AS REC_STATUS, V.VERIFICATION_SUBTYPE,S.USER_ID from cr_deal_verification_dtl V " );
		  query.append(" LEFT JOIN sec_user_m  S ON S.USER_ID IN (V.INTERNAL_APPRAISER,V.EXTERNAL_APPRAISER) " );  
		  query.append(" where  DEAL_ID='"+CommonFunction.checkNull(txnid).trim()+"'");	       
		
		logger.info("In getDealVerificationMovementDetail"+query.toString());
		
		DealMovementVo vo=null;
		ArrayList dealMovement = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getDealVerificationMovementDetail "+dealMovement.size());
		
		query=null;

		for(int i=0;i<dealMovement.size();i++){
			//logger.info("getDealVerificationMovementDetail "+CommonFunction.checkNull(dealMovement.get(i)).toString());
			ArrayList data=(ArrayList)dealMovement.get(i);
			if(data.size()>0){
				vo = new DealMovementVo();
				vo.setSeqNo((i+1)+"");
				vo.setVerificationType((CommonFunction.checkNull(data.get(1))).trim());
				vo.setAppraiserType(CommonFunction.checkNull(data.get(2)));	
				vo.setAssignedTo((CommonFunction.checkNull(data.get(3))).trim());
				vo.setVerificationAction((CommonFunction.checkNull(data.get(4))).trim());
				vo.setStatus((CommonFunction.checkNull(data.get(5))).trim());
				vo.setVerificationSubType((CommonFunction.checkNull(data.get(6))).trim());
				vo.setUserId((CommonFunction.checkNull(data.get(7))).trim());
				list.add(vo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
	return list;
}

//method added by neeraj tripathi

public String getEditableFlag() 
{
	logger.info("In getEditableFlag()");
	String ediFlag="";
	try
	{
		StringBuilder query=new StringBuilder();
		query.append("select parameter_value from parameter_mst where parameter_key='EDITABLE_FLAG'" );
		logger.info("In getEditableFlag() query  :  "+query.toString());
		ediFlag = ConnectionDAO.singleReturn(query.toString());
		logger.info("In getEditableFlag() ediFlag  :  "+ediFlag);
	}
	catch(Exception e)
	{e.printStackTrace();}
	return ediFlag;
}


// methoid added by neeraj tripathi
public String getDefaultAccountType()
{
	StringBuffer query =	new StringBuffer();
	String result="";
	query.append("select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY='DEFAULT_CUSTOMER_ACCOUNT_ Type'");
	try
	{
		logger.info("In...getDefaultAccountType"+query.toString());
		result = ConnectionDAO.singleReturn(query.toString());
		query=null;		
	}
	catch(Exception e)
	{e.printStackTrace();}
	return result;
}

//Start By Prashant
public int getProductCategaryStatus(String dealId,String tabName) {
	
	int count=0;
	String strReturn=null;
	String query=null;
	try
	{
		query="select count(DEAL_LOAN_ID) from cr_deal_loan_dtl a join cr_viablity_fleet_productcategory_m b on (a.DEAL_PRODUCT_CATEGORY=b.product_category and b.operation ='"+CommonFunction.checkNull(tabName).trim()+"') where  DEAL_ID='"+CommonFunction.checkNull(dealId).trim()+"' ";
		logger.info("In check getProductCategaryStatus..............query...........DAOImpl "+query.toString());
		strReturn=ConnectionDAO.singleReturn(query);
		if(!CommonFunction.checkNull(strReturn).equalsIgnoreCase(""))
		{
		  count=Integer.parseInt(strReturn);
		}
		logger.info("value=count===  "+count);
	
	}catch(Exception e){
		e.printStackTrace();
	}
	finally{
		strReturn=null;
		query=null;
	}
	return count;
}




public String saveFleetInCP(Object ob) {
	
	String dateTime=null;
	FleetDetailsVo fleetVo = (FleetDetailsVo)ob;

	String res="";
	int fleetStatusCount=0;
	
	ArrayList qryList = new ArrayList();
	PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

	
	try
	{
	  if(!CommonFunction.checkNull(fleetVo.getDealFleetId()).equalsIgnoreCase(""))
	  {
		  StringBuilder query=new StringBuilder();
		  query.append("SELECT count(DEAL_FLEET_ID) FROM cr_deal_fleet_dtl WHERE DEAL_FLEET_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(fleetVo.getDealFleetId()).trim())+"'");
		  logger.info("saveFleetInCP query: "+query.toString());
		  String val=ConnectionDAO.singleReturn(query.toString());
		  if(!CommonFunction.checkNull(val).equalsIgnoreCase(""))
		  {
			  fleetStatusCount=Integer.parseInt(val); 
		  }
		  query=null;
	  }

	if(!CommonFunction.checkNull(fleetStatusCount).equalsIgnoreCase("0"))
	{
		logger.info("In update saveFleetInCP");
		boolean status = false;

		StringBuilder queryUpdate=new StringBuilder();
		 queryUpdate.append("update cr_deal_fleet_dtl set VEHICLE_OWNER=?,RELATIONSHIP=?,VEHICLE_NO=?,VEHICLE_MODEL=?, MFG_YEAR=?,DOC_COLLECTED=?," );
		 queryUpdate.append( " REC_STATUS=?,MAKER_ID=?,MAKER_DATE=" );
		 //queryUpdate.append("DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND)" );
		 queryUpdate.append(dbo);
		 queryUpdate.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9),FINANCIAL_INST=?,FINANCIAL_INST_NAME=?,LOAN_ID=?,LOAN_NO=?,SEASONING=?,HPN_STATUS=?,CURRENT_POS=? ");
		 queryUpdate.append(" where DEAL_FLEET_ID=?");
		//PrepStmtObject prepStmt = new PrepStmtObject();
		if((CommonFunction.checkNull(fleetVo.getVehicleOwner())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getVehicleOwner()).trim());
		
		
		if((CommonFunction.checkNull(fleetVo.getRelationship())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getRelationship()).trim());
		
		if((CommonFunction.checkNull(fleetVo.getVehicleNo())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getVehicleNo()).trim());
		
		if((CommonFunction.checkNull(fleetVo.getVehicleModel())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getVehicleModel()).trim());
		
		if((CommonFunction.checkNull(fleetVo.getMfgYear())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getMfgYear()).trim());
		
		if((CommonFunction.checkNull(fleetVo.getDocCollected())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getDocCollected()).trim());
		
	
			insertPrepStmtObject.addString("P");
		
				
		if(CommonFunction.checkNull((fleetVo.getMakerId())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getMakerId()).trim());
		
		
		if((CommonFunction.checkNull(fleetVo.getMakerDate())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getMakerDate()).trim());
		
		//Nishant space starts
		if((CommonFunction.checkNull(fleetVo.getFinancialInst())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getFinancialInst()).trim());  //FINANCIAL_INST
		
		if((CommonFunction.checkNull(fleetVo.getFinancialInstName())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getFinancialInstName()).trim());  //FINANCIAL_INST_NAME
		
		if((CommonFunction.checkNull(fleetVo.getLbxLoanNoHid())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getLbxLoanNoHid()).trim());  //LOAN_ID
		
		if((CommonFunction.checkNull(fleetVo.getLoanNo())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getLoanNo()).trim());  //LOAN_NO
		
		if((CommonFunction.checkNull(fleetVo.getSeasoning())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getSeasoning()).trim());  //SEASONING
	
		if((CommonFunction.checkNull(fleetVo.getHpnStatus())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getHpnStatus()).trim());  //HPN_STATUS
	
		if((CommonFunction.checkNull(fleetVo.getCurrentPos())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getCurrentPos()).trim());;  //CURRENT_POS
		//Nishant space ends
		
		if((CommonFunction.checkNull(fleetVo.getDealFleetId())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getDealFleetId()).trim());

		insertPrepStmtObject.setSql(queryUpdate.toString());
		logger.info("IN saveFleetInCP() update query1 ### "+insertPrepStmtObject.printQuery());
		qryList.add(insertPrepStmtObject);
		logger.info("In saveFleetInCP ........ update query: "+queryUpdate.toString());
		
		queryUpdate=null;
		
		try
		{
			status =ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			logger.info("In saveFleetInCP.........update status: "+status);
		}
		catch(Exception e){
			e.printStackTrace();
		}
		

		    logger.info("In saveFleetInCP......................"+status);
		    if(status)
			{
				
		    	res="S";
		
				
			}
			else
			{
				res="E";
			}

	}
	else
	{
	 

	    
		logger.info("In insert saveFleetInCP");
		StringBuffer bufInsSql =	new StringBuffer();
		bufInsSql.append("insert into cr_deal_fleet_dtl(DEAL_ID,VEHICLE_OWNER,RELATIONSHIP,VEHICLE_NO,VEHICLE_MODEL,MFG_YEAR,DOC_COLLECTED,REC_STATUS,MAKER_ID,MAKER_DATE,FINANCIAL_INST,FINANCIAL_INST_NAME,LOAN_ID,LOAN_NO,SEASONING,HPN_STATUS,CURRENT_POS)");
		bufInsSql.append(" values ( ");
		bufInsSql.append(" ?," );  // DEAL_ID
		bufInsSql.append(" ?," );  // VEHICLE_OWNER
		bufInsSql.append(" ?," );  //RELATIONSHIP
		bufInsSql.append(" ?," ); // VEHICLE_NO
		bufInsSql.append(" ?," ); //VEHICLE_MODEL
		//bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')," );  //MFG_YEAR
		bufInsSql.append(" ?," );  //MFG_YEAR
		bufInsSql.append(" ?," );  //DOC_COLLECTED
		bufInsSql.append(" ?," );  // REC_STATUS
		bufInsSql.append(" ?," );  // MAKER_ID
		//bufInsSql.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND) )" ); // MAKER_DATE
		bufInsSql.append(dbo);
		bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9), ");
		bufInsSql.append(" ?," );  //FINANCIAL_INST
		bufInsSql.append(" ?," );  //FINANCIAL_INST_NAME
		bufInsSql.append(" ?," );  //LOAN_ID
		bufInsSql.append(" ?," );  //LOAN_NO
		bufInsSql.append(" ?," );  //SEASONING
		bufInsSql.append(" ?," );  //HPN_STATUS
		bufInsSql.append(" ?)" );  //CURRENT_POS
		
		if((CommonFunction.checkNull(fleetVo.getDealId())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getDealId()).trim());
		if((CommonFunction.checkNull(fleetVo.getVehicleOwner())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getVehicleOwner()).trim());
		
		
		if((CommonFunction.checkNull(fleetVo.getRelationship())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getRelationship()).trim());
		
		if((CommonFunction.checkNull(fleetVo.getVehicleNo())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getVehicleNo()).trim());
		
		if((CommonFunction.checkNull(fleetVo.getVehicleModel())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getVehicleModel()).trim());
		
		if((CommonFunction.checkNull(fleetVo.getMfgYear())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getMfgYear()).trim());
		
		if((CommonFunction.checkNull(fleetVo.getDocCollected())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getDocCollected()).trim());
		
	
			insertPrepStmtObject.addString("P");
		
				
		if(CommonFunction.checkNull((fleetVo.getMakerId())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getMakerId()).trim());
		
		
		if((CommonFunction.checkNull(fleetVo.getMakerDate())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getMakerDate()).trim());

		//Nishant space starts
		if((CommonFunction.checkNull(fleetVo.getFinancialInst())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getFinancialInst()).trim());  //FINANCIAL_INST
		
		if((CommonFunction.checkNull(fleetVo.getFinancialInstName())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getFinancialInstName()).trim());  //FINANCIAL_INST_NAME
		
		if((CommonFunction.checkNull(fleetVo.getLbxLoanNoHid())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getLbxLoanNoHid()).trim());  //LOAN_ID
		
		if((CommonFunction.checkNull(fleetVo.getLoanNo())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getLoanNo()).trim()); //LOAN_NO
		
		if((CommonFunction.checkNull(fleetVo.getSeasoning())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getSeasoning()).trim());  //SEASONING
	
		if((CommonFunction.checkNull(fleetVo.getHpnStatus())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getHpnStatus()).trim());  //HPN_STATUS
	
		if((CommonFunction.checkNull(fleetVo.getCurrentPos())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((fleetVo.getCurrentPos()).trim());;  //CURRENT_POS
		//Nishant space ends
		
		insertPrepStmtObject.setSql(bufInsSql.toString());
		logger.info("IN saveFleetInCP() insert query1 ### "+insertPrepStmtObject.printQuery());
		
		
		bufInsSql=null;
		
		qryList.add(insertPrepStmtObject);
		boolean status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
	    logger.info("In saveFleetInCP STATUS......................"+status);
		if(status)
		{
			
	    	res="S";
	
			
		}
		else
		{
			res="E";
		}
	}


	}catch(Exception e){
		e.printStackTrace();
	}
	
	return res;
	
}



	public ArrayList getFleetList(String dealId) {
		
		 ArrayList list=new ArrayList();
			try{
				StringBuilder query=new StringBuilder();
			query.append("select DEAL_FLEET_ID,VEHICLE_OWNER,RELATIONSHIP,VEHICLE_NO," +
					      "VEHICLE_MODEL,MFG_YEAR,DOC_COLLECTED from cr_deal_fleet_dtl where DEAL_ID='"+dealId.trim()+"'");
			
			logger.info("query: "+query.toString());
			ArrayList fleetDetail = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getFleetList "+fleetDetail.size());
			
			query=null;
			
			for(int i=0;i<fleetDetail.size();i++){
				logger.info("getFleetList...Outer FOR loop "+CommonFunction.checkNull(fleetDetail.get(i)).toString());
				ArrayList data=(ArrayList)fleetDetail.get(i);
				if(data.size()>0)	{
				FleetDetailsVo fleetVo=new FleetDetailsVo();
				fleetVo.setDealFleetId((CommonFunction.checkNull(data.get(0))).trim());
				fleetVo.setVehicleOwner((CommonFunction.checkNull(data.get(1))).trim());
				fleetVo.setRelationship((CommonFunction.checkNull(data.get(2))).trim());
				fleetVo.setVehicleNo((CommonFunction.checkNull(data.get(3))).trim());
				fleetVo.setVehicleModel((CommonFunction.checkNull(data.get(4))).trim());
				fleetVo.setMfgYear((CommonFunction.checkNull(data.get(5))).trim());
				fleetVo.setDocCollected((CommonFunction.checkNull(data.get(6))).trim());
				list.add(fleetVo);
			}
			}
			}catch(Exception e){
				e.printStackTrace();
			}
			return list;
	}


	
	public ArrayList getAllFleetList(String dealFleetId) {
		
		 ArrayList list=new ArrayList();
			try{
				StringBuilder query=new StringBuilder();
			query.append("select DEAL_FLEET_ID,VEHICLE_OWNER,RELATIONSHIP,VEHICLE_NO," +
					      "VEHICLE_MODEL,MFG_YEAR,DOC_COLLECTED,FINANCIAL_INST,FINANCIAL_INST_NAME,LOAN_ID,LOAN_NO,SEASONING,HPN_STATUS,CURRENT_POS from cr_deal_fleet_dtl where DEAL_FLEET_ID='"+dealFleetId.trim()+"'");
			
			logger.info("query: "+query.toString());
			ArrayList fleetDetail = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getFleetList "+fleetDetail.size());
			
			query=null;
			
			for(int i=0;i<fleetDetail.size();i++){
				logger.info("getFleetList...Outer FOR loop "+CommonFunction.checkNull(fleetDetail.get(i)).toString());
				ArrayList data=(ArrayList)fleetDetail.get(i);
				if(data.size()>0)	{
				FleetDetailsVo fleetVo=new FleetDetailsVo();
				fleetVo.setDealFleetId((CommonFunction.checkNull(data.get(0))).trim());
				fleetVo.setVehicleOwner((CommonFunction.checkNull(data.get(1))).trim());
				fleetVo.setRelationship((CommonFunction.checkNull(data.get(2))).trim());
				fleetVo.setVehicleNo((CommonFunction.checkNull(data.get(3))).trim());
				fleetVo.setVehicleModel((CommonFunction.checkNull(data.get(4))).trim());
				fleetVo.setMfgYear((CommonFunction.checkNull(data.get(5))).trim());
				fleetVo.setDocCollected((CommonFunction.checkNull(data.get(6))).trim());
				fleetVo.setFinancialInst((CommonFunction.checkNull(data.get(7))).trim());//FINANCIAL_INST
				fleetVo.setFinancialInstName((CommonFunction.checkNull(data.get(8))).trim());//FINANCIAL_INST_NAME
				fleetVo.setLbxLoanNoHid((CommonFunction.checkNull(data.get(9))).trim());//LOAN_ID
				fleetVo.setLoanNo((CommonFunction.checkNull(data.get(10))).trim());//LOAN_NO
				fleetVo.setSeasoning((CommonFunction.checkNull(data.get(11))).trim());//SEASONING
				fleetVo.setHpnStatus((CommonFunction.checkNull(data.get(12))).trim());//HPN_STATUS
				fleetVo.setCurrentPos((CommonFunction.checkNull(data.get(13))).trim());//CURRENT_POS
				list.add(fleetVo);
			}
			}
			}catch(Exception e){
				e.printStackTrace();
			}
			return list;
	}



	public boolean deleteFleetDtl(String[] dealFleetId) {
		 ArrayList qrylist = new ArrayList();
	        boolean delStatus = false;
		try{
			for(int i=0;i<dealFleetId.length;i++)
			{
				StringBuilder query=new StringBuilder();
				StringBuilder query2=new StringBuilder();
				query.append("delete from cr_deal_fleet_dtl where DEAL_FLEET_ID='"+dealFleetId[i]+"'");
				logger.info("query "+query.toString());
				qrylist.add(query);
				query=null;
				query2=null;
			
		
			}
		
			 delStatus = ConnectionDAO.sqlInsUpdDelete(qrylist);
			 
			logger.info("Deletion Status :"+delStatus);
			}catch(Exception e){
				e.printStackTrace();
			}
			 
			return delStatus;
	}

	//End By Prashant
	//KANIKA CODE
	public boolean updateDealAreaCodeFromLead( LeaddetailDealVo vo)
	  {
		
		PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
		boolean status=false;
			StringBuilder queryUpdate=new StringBuilder();
			 queryUpdate.append("update cr_deal_dtl set AREA_CODE=? where DEAL_ID=?");
			//PrepStmtObject prepStmt = new PrepStmtObject();
			if((CommonFunction.checkNull(vo.getLbxareaCodeVal())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getLbxareaCodeVal()).trim());
			
			
			if((CommonFunction.checkNull(vo.getDealId())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getDealId()).trim());

			insertPrepStmtObject.setSql(queryUpdate.toString());
			logger.info("IN updateDealAreaCodeFromLead() update query1 ### "+insertPrepStmtObject.printQuery());
			qryList.add(insertPrepStmtObject);
			logger.info("In updateDealAreaCodeFromLead ........ update query: "+queryUpdate.toString());
			
			queryUpdate=null;
			
			try
			{
				status =ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
				logger.info("In updateDealAreaCodeFromLead.........update status: "+status);
			}
			catch(Exception e){
				e.printStackTrace();
			}
			

		
		return status;

	}
//Prashant
	public ArrayList getLtvFromMakeMod(String assetNature, String txtProductCat,String makeModelId,String branchId,String year) {
		String ltv="";

		
			 ArrayList list=new ArrayList();
				try{
					StringBuilder query=new StringBuilder();
					//query.append("SELECT LTV,STATE_ID from cr_make_model_master where MAKE_MODEL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(makeModelId))+"' and PRODUCT_CATEGORY='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txtProductCat))+"' and MAKE_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(assetNature))+"' limit 1");
					//Nishant space starts
					query.append("SELECT ");
					if(dbType.equalsIgnoreCase("MSSQL"))
					{
						query.append(" TOP 1 ");
					}
					query.append(" a.LTV,c.STATE_ID,a.MANUFACTURER_ID,b.DEALER_DESC from cr_make_model_master a left join cr_dsa_dealer_m b on b.DEALER_ID=a.MANUFACTURER_ID " );
					query.append("left join cr_make_model_master_state_mapping c on c.MAKE_MODEL_ID=a.MAKE_MODEL_ID " );
					query.append("where a.MAKE_MODEL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(makeModelId))+"' and a.PRODUCT_CATEGORY='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txtProductCat))+"' and a.MAKE_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(assetNature))+"' and c.STATE_ID=(select state_id from com_branch_m where BRANCH_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(branchId))+"') ");
					if(!dbType.equalsIgnoreCase("MSSQL") && dbo.equalsIgnoreCase(""))
					{
						query.append(" limit 1");
					}
					
					
					//Nishant space end
					logger.info("ltvQuery: "+query.toString());
				ArrayList fleetDetail = ConnectionDAO.sqlSelect(query.toString());
				logger.info("getFleetList "+fleetDetail.size());
				
				query=null;
				
				for(int i=0;i<fleetDetail.size();i++){
					logger.info("getFleetList...Outer FOR loop "+CommonFunction.checkNull(fleetDetail.get(i)).toString());
					ArrayList data=(ArrayList)fleetDetail.get(i);
					if(data.size()>0)	{
						CollateralVo collateralVo=new CollateralVo();
						collateralVo.setLtv((CommonFunction.checkNull(data.get(0))).trim());
						collateralVo.setTxtStateCode((CommonFunction.checkNull(data.get(1))).trim());
						collateralVo.setLbxmachineManufact((CommonFunction.checkNull(data.get(2))).trim());
						collateralVo.setAssetManufactDesc((CommonFunction.checkNull(data.get(3))).trim());
					list.add(collateralVo);
				}
				}
				}catch(Exception e){
					e.printStackTrace();
				}
				return list;
	}
// Start By Prashant
	public ArrayList getGroupExposureData(String dealId,String customerId,String groupId,String groupType) {
		
		 ArrayList list=new ArrayList();
		 String grId="0";
			try
			{
				StringBuilder query=new StringBuilder();
				query.append("select CUSTOMER_ID,CUSTOMER_NAME,CUSTOMER_GROUP_TYPE,CUSTOMER_GROUP_DESC,CUSTOMER_GROUP_ID,CUSTOMER_GROUP_EXPOSURE_LIMIT "+
							 " from cr_deal_customer_m c "+
							 " JOIN cr_deal_customer_role r on r.DEAL_CUSTOMER_ID=c.CUSTOMER_ID and r.DEAL_CUSTOMER_TYPE='C' "+
							 " and r.DEAL_ID='"+CommonFunction.checkNull(dealId).trim()+"' and r.DEAL_CUSTOMER_ID='"+CommonFunction.checkNull(customerId).trim()+"'  ");
				logger.info("In getGroupExposureData() Query is ::: "+query.toString());
				ArrayList getGroupExposureDataDetail = ConnectionDAO.sqlSelect(query.toString());
				logger.info("getGroupExposureDataList "+getGroupExposureDataDetail.size());
				for(int i=0;i<getGroupExposureDataDetail.size();i++)
				{
					ArrayList data=(ArrayList)getGroupExposureDataDetail.get(i);
					if(data.size()>0)	
					{
						GcdGroupMasterVo groupVo=new GcdGroupMasterVo();
						groupVo.setCustomerId((CommonFunction.checkNull(data.get(0))).trim());
						groupVo.setCustomerName((CommonFunction.checkNull(data.get(1))).trim());
						if(CommonFunction.checkNull(groupType).trim().equalsIgnoreCase(""))
							groupType=(CommonFunction.checkNull(data.get(2))).trim();
						groupVo.setGroupType((CommonFunction.checkNull(groupType)).trim());
						groupVo.setGroupNameText((CommonFunction.checkNull(data.get(3))).trim());
						
						if(CommonFunction.checkNull(groupId).trim().equalsIgnoreCase(""))
						{
							groupVo.sethGroupId((CommonFunction.checkNull(data.get(4))).trim());
							grId=(CommonFunction.checkNull(data.get(4))).trim();
						}
						else
						{
							groupVo.sethGroupId(CommonFunction.checkNull(groupId).trim());
							grId=groupId;
						}
						String groupDesc="";
						String groupLimit="0";
						String qry="select GROUP_DESC,GROUP_EXPOSURE_LIMIT from gcd_group_m where GROUP_ID='"+CommonFunction.checkNull(grId).trim()+"'";
						logger.info("In getGroupExposureData() Group Detail : "+query.toString());
						ArrayList exposureList = ConnectionDAO.sqlSelect(qry);
						if(exposureList.size()>0)	
						{
							ArrayList exposeData=(ArrayList)exposureList.get(0);
							if(exposeData.size()>0)	
							{
								groupDesc=CommonFunction.checkNull(exposeData.get(0)).trim();
								groupLimit=CommonFunction.checkNull(exposeData.get(1)).trim();								
							}
						}						
						
						groupVo.setGroupDescription((CommonFunction.checkNull(groupDesc)).trim());
						if(CommonFunction.checkNull(groupLimit).trim().equalsIgnoreCase(""))
							groupLimit="0";						
						String customerGroup=CommonFunction.checkNull(data.get(5)).trim();
						if(CommonFunction.checkNull(customerGroup).trim().equalsIgnoreCase(""))
							customerGroup="0";	
						if(CommonFunction.checkNull(groupId).trim().equalsIgnoreCase(""))
						{
							if(CommonFunction.checkNull(customerGroup).trim().equalsIgnoreCase("0"))
								customerGroup=groupLimit;
						}
						else
						{
							customerGroup=groupLimit;
						}
						if(CommonFunction.checkNull(customerGroup).trim().equalsIgnoreCase("0"))
							customerGroup=groupLimit;
						
						if(!(CommonFunction.checkNull(customerGroup).equalsIgnoreCase("")))
						{
							Number reconNummF =myFormatter.parse((CommonFunction.checkNull(customerGroup)).trim());
							groupVo.setGroupExposureLimit(myFormatter.format(reconNummF));
						}
						else
						{
							groupVo.setGroupExposureLimit("0.00");
						}
				list.add(groupVo);
				groupVo=null;
				query=null;
			}
				data=null;
				
			}
			getGroupExposureDataDetail=null;
			
			
			}catch(Exception e){
				e.printStackTrace();
			}
			return list;
	}
	
	public String saveGroupExposureLimit(GcdGroupMasterVo groupVo) {
		
		
		PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
		ArrayList qryList =new ArrayList();
		String status="X";
			StringBuilder queryUpdate=new StringBuilder();
			 queryUpdate.append("update cr_deal_customer_m set CUSTOMER_GROUP_DESC=?,CUSTOMER_GROUP_TYPE=?, CUSTOMER_GROUP_EXPOSURE_LIMIT=?,CUSTOMER_GROUP_ID=?  where CUSTOMER_ID=(select DEAL_CUSTOMER_ID from cr_deal_customer_role where DEAL_CUSTOMER_TYPE='C' and DEAL_CUSTOMER_ID=? and  deal_id=? ) ");
			
			if((CommonFunction.checkNull(groupVo.getGroupNameText())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((groupVo.getGroupNameText()).trim());
			
			if((CommonFunction.checkNull(groupVo.getGroupType())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((groupVo.getGroupType()).trim());
			
			if((CommonFunction.checkNull(groupVo.getGroupExposureLimit())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				try {
					insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull((groupVo.getGroupExposureLimit()).trim()))).toString());
				} catch (ParseException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
			
			if((CommonFunction.checkNull(groupVo.gethGroupId())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((groupVo.gethGroupId()).trim());
			
			if((CommonFunction.checkNull(groupVo.getCustomerId())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((groupVo.getCustomerId()).trim());

			
			if((CommonFunction.checkNull(groupVo.getDealId())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((groupVo.getDealId()).trim());

			insertPrepStmtObject.setSql(queryUpdate.toString());
			logger.info("IN saveGroupExposureLimit() update query1 ### "+insertPrepStmtObject.printQuery());
			qryList.add(insertPrepStmtObject);
			logger.info("In saveGroupExposureLimit ........ update query: "+queryUpdate.toString());
	        // Prashant start 
			PrepStmtObject updatePrepStmtObject = new PrepStmtObject();
			StringBuilder queryUpdateSanctionDate=new StringBuilder();
			queryUpdateSanctionDate.append("update cr_deal_loan_dtl set DEAL_SANCTION_VALID_TILL=?,DEAL_SANCTION_DATE=?  where DEAL_ID=?");
			
			updatePrepStmtObject.addNull();
			updatePrepStmtObject.addNull();
			if((CommonFunction.checkNull(groupVo.getDealId())).trim().equalsIgnoreCase(""))
				updatePrepStmtObject.addNull();
			else
				updatePrepStmtObject.addString((groupVo.getDealId()).trim());

			updatePrepStmtObject.setSql(queryUpdateSanctionDate.toString());
			logger.info("IN saveGroupExposureLimit() update query1 ### "+updatePrepStmtObject.printQuery());
			qryList.add(updatePrepStmtObject);
			
			// Prashant end 
			
			queryUpdate=null;
			
			try
			{
				boolean st=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
				if(st)
				{
					status="S";
				}
				logger.info("In saveGroupExposureLimit.........update status: "+status);
			}
			catch(Exception e){
				e.printStackTrace();
			}
			

		
		return status;
	}

	public ArrayList getGroupExpLimitGrid(String dealId,String userId,String opUserId,String businessDate)
	{		
		logger.info("In getGroupExpLimitGrid");
		ArrayList list=new ArrayList();
		CommonDealVo vo =null;
		String statusProc=null;
		boolean status=false;
		ArrayList<Object> in =new ArrayList<Object>();
		ArrayList<Object> out =new ArrayList<Object>();
		ArrayList outMessages = new ArrayList();
		String s1="";
		String s2="";
		StringBuilder query=new StringBuilder();
		try
		{				
			in.add(CommonFunction.checkNull(dealId).trim());
			in.add(CommonFunction.checkNull(userId).trim());
			in.add(CommonFunction.checkNull(opUserId).trim());
			in.add(CommonFunction.changeFormat(CommonFunction.checkNull(businessDate).trim()));
			out.add(s1);
			out.add(s2);					
			logger.info("callProcUnderWriterSerachData UNDERWRITER_SEARCH_DATA ("+in.toString()+","+out.toString()+")");
			outMessages=(ArrayList) ConnectionDAO.callSP("UNDERWRITER_SEARCH_DATA",in,out);
			s1=CommonFunction.checkNull(outMessages.get(0));
			s2=CommonFunction.checkNull(outMessages.get(1));
		    logger.info("s1  : "+s1);
		    logger.info("s2  : "+s2);	
			query.append(" select c.CUSTOMER_ID,c.CUSTOMER_NAME,CUSTOMER_GROUP_TYPE,CUSTOMER_GROUP_DESC,CUSTOMER_GROUP_ID,");
			query.append(" g.GROUP_DESC,CUSTOMER_GROUP_EXPOSURE_LIMIT,G.GROUP_EXPOSURE_LIMIT,r.DEAL_CUSTOMER_ROLE_TYPE");
			query.append(" from cr_deal_customer_m c ");
			query.append(" join cr_deal_customer_role r on r.DEAL_CUSTOMER_ID=c.CUSTOMER_ID ");
			query.append(" left join gcd_group_m g on g.GROUP_ID=c.CUSTOMER_GROUP_ID ");
			query.append(" where r.DEAL_ID='"+dealId.trim()+"' ");
			query.append(" and r.DEAL_CUSTOMER_TYPE='C' ");
			logger.info("In getGroupExpLimitGrid() Query is    :  "+query.toString());
			ArrayList getGroupExposureDataDetail = ConnectionDAO.sqlSelect(query.toString());
			for(int i=0;i<getGroupExposureDataDetail.size();i++)
			{
				ArrayList data=(ArrayList)getGroupExposureDataDetail.get(i);
				if(data.size()>0)	
				{
					GcdGroupMasterVo groupVo=new GcdGroupMasterVo();
					groupVo.setCustomerId((CommonFunction.checkNull(data.get(0))).trim());
					groupVo.setCustomerName((CommonFunction.checkNull(data.get(1))).trim());
					groupVo.setGroupType((CommonFunction.checkNull(data.get(2))).trim());
					if(CommonFunction.checkNull(groupVo.getGroupType()).equalsIgnoreCase("E") )
					{
					  groupVo.setGroupNameText((CommonFunction.checkNull(data.get(5))).trim());
					  groupVo.setGroupType("Existing");
					}
					else
					{
					  groupVo.setGroupNameText((CommonFunction.checkNull(data.get(3))).trim());
					  groupVo.setGroupType("New");
					}
					groupVo.sethGroupId((CommonFunction.checkNull(data.get(4))).trim());
					if(CommonFunction.checkNull(groupVo.getGroupType()).equalsIgnoreCase("E") && (CommonFunction.checkNull(data.get(6)).equalsIgnoreCase("")))
					{
						if(!(CommonFunction.checkNull(data.get(7)).equalsIgnoreCase("")))
						{
							Number reconNummF =myFormatter.parse((CommonFunction.checkNull(data.get(7))).trim());
							groupVo.setGroupExposureLimit(myFormatter.format(reconNummF));
						}
						else
						{
							groupVo.setGroupExposureLimit("0.00");
						}		
					}
					else
					{
						Number reconNummF =0;
						if(CommonFunction.checkNull(data.get(6)).equals(""))
						{
							 reconNummF =0;	
						}	
						else
						{
							 reconNummF =myFormatter.parse((CommonFunction.checkNull(data.get(6))).trim());
						}
						groupVo.setGroupExposureLimit(myFormatter.format(reconNummF));					
					}				
					if(CommonFunction.checkNull(groupVo.getGroupType()).equalsIgnoreCase("N"))
					{
						if(!(CommonFunction.checkNull(data.get(6)).equalsIgnoreCase("")))
						{
							Number reconNummF =myFormatter.parse((CommonFunction.checkNull(data.get(6))).trim());
							groupVo.setGroupExposureLimit(myFormatter.format(reconNummF));
							
						}
						else
						{
							groupVo.setGroupExposureLimit("0.00");
						}					
					}				
					groupVo.setApplicantCat((CommonFunction.checkNull(data.get(8))).trim());	
					list.add(groupVo);
				}//if
			}//for
		}
		catch(Exception e)
		{e.printStackTrace();}
		finally
		{
			vo =null;
			statusProc=null;
			in.clear();
			in=null;
			out.clear();
			out=null;
			outMessages.clear();
			outMessages=null;
			query=null;
		}
		return list;
	}

	@Override
	public ArrayList fetchDueDayNextDate(String repayEffectiveDate) {
		
		ArrayList<Object> list=new ArrayList<Object>();
		try{
			String currDay="0";
			if(!CommonFunction.checkNull(repayEffectiveDate).equalsIgnoreCase(""))
			{
				currDay=repayEffectiveDate.substring(0, 2);
			}
			
			logger.info("repayEffectiveDate: "+repayEffectiveDate+ " currDay: "+CommonFunction.removePadding(currDay));
			StringBuilder query=new StringBuilder();
//		 query.append("select DUE_DAY,");
//		 query.append(dbo);
//		 query.append("DATE_FORMAT(DATE_ADD(DATE_ADD(LAST_DAY(STR_TO_DATE('"+repayEffectiveDate+"', '"+dateFormat+"')), interval 1 day),INTERVAL DUE_DAY-1 day),'"+dateFormat+"') as 'NEXT_DUE_DATE' ");
//		 query.append(" FROM com_next_due_date_m WHERE REC_STATUS='A' AND '"+CommonFunction.removePadding(currDay)+"' BETWEEN FROM_DATE AND TO_DATE");
		
		 query.append("SELECT  DUE_DAY, dbo.DATE_FORMAT(DATEADD(day,DUE_DAY-1,DATEADD(day,1,EOMONTH(convert(date, '"+repayEffectiveDate+"', 103)))),'"+dateFormat+"')AS NEXT_DUE_DATE ");
		 query.append(" FROM com_next_due_date_m WHERE REC_STATUS='A' AND '"+CommonFunction.removePadding(currDay)+"' BETWEEN FROM_DATE AND TO_DATE ");
		 logger.info("fetchDueDayNextDate: "+query.toString());
		LoanDetailVo vo = null;
		ArrayList source = ConnectionDAO.sqlSelect(query.toString());
		logger.info("fetchDueDayNextDate: "+source.size());
		
		query=null;
		
		for(int i=0;i<source.size();i++){
			logger.info("fetchDueDayNextDate: "+source.get(i).toString());
			ArrayList subsource=(ArrayList)source.get(i);
			if(subsource.size()>0)
			{
				logger.info("fetchDueDayNextDate: "+subsource.size());
				vo = new LoanDetailVo();
				vo.setCycleDate(CommonFunction.checkNull(subsource.get(0)).trim());
				vo.setNextDueDate((CommonFunction.checkNull(subsource.get(1))).trim());
				list.add(vo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}
	
	
	
	public ArrayList getEMIAmount(String dealId) {
		ArrayList data=new ArrayList();
		Viability vo=new Viability();
		String amount="";
		StringBuilder query=new StringBuilder();
		try{
			query.append("select DISTINCT INSTL_AMOUNT from cr_deal_repaysch_dtl where DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId))+"'");
			logger.info("query::::::emiAmount::::::::::::"+query.toString());
			amount = ConnectionDAO.singleReturn(query.toString());
			logger.info(":::::::::amount::::::::::::"+amount);	
			vo=new Viability();
			if(CommonFunction.checkNull(amount).equalsIgnoreCase("")){
				vo.setEpmonth("0.0000");
			} else{
				Number emi=myFormatter.parse(amount);		
			    vo.setEpmonth(myFormatter.format(emi));				
			}		
			data.add(vo);
			}catch(Exception e){
				e.printStackTrace();
			}
			finally{
				query=null;	
				amount=null;
			}
			return data;
	}
	
	
	public boolean checkEMIAmountInViability(String dealId) {
		String checkDealId="";
		String checkEMIAmnt="";
		String viabilityStatus="";
		boolean status=false;
		int count1=0;
		int count2=0;
		StringBuilder query1=new StringBuilder();
		StringBuilder query2=new StringBuilder();
		try{
			query1.append(" select count(*) from cr_viability_dtl where DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' ");
			checkDealId=ConnectionDAO.singleReturn(query1.toString());
			count1=Integer.parseInt(checkDealId);
			logger.info("query1:::::::::::::::::::::::::"+query1+":::::::count="+count1);
			if(count1>0){	
			query2.append(" select count(*) from cr_viability_dtl v join cr_deal_repaysch_dtl d where d.DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' AND d.INSTL_AMOUNT=v.EMI_PER_MONTH ");
			checkEMIAmnt= ConnectionDAO.singleReturn(query2.toString());
			count2=Integer.parseInt(checkEMIAmnt);
			logger.info("query2:::::::::::::::::::::::::"+query2+":::::::count="+count2);
			if(count2==0)
			{
				status=true;			
			}
	}
			}catch(Exception e){
				e.printStackTrace();
			}
			finally{
				query1=null;
				query2=null;	
				checkEMIAmnt=null;
			}
			logger.info("status::::::::::::::::::::"+status);
			return status;
	}


	
	@Override
	public ArrayList fetchDueDay(String repayEffectiveDate, String cycleDate) {
		ArrayList<Object> list=new ArrayList<Object>();
		try{
			
//			int currDay=0;
//			if(!CommonFunction.checkNull(cycleDate).equalsIgnoreCase(""))
//			{
//				currDay=Integer.parseInt(cycleDate);
//				cycleDate=""+(currDay-1);
//			}
			logger.info("repayEffectiveDate: "+repayEffectiveDate+ " cycleDate: "+CommonFunction.removePadding(cycleDate));
			StringBuilder query=new StringBuilder();
//		 query.append("select DUE_DAY,");
//		 query.append(dbo);
//		 query.append("DATE_FORMAT(DATE_ADD(DATE_ADD(LAST_DAY(STR_TO_DATE('"+repayEffectiveDate+"', '"+dateFormat+"')), interval 1 day),INTERVAL '"+CommonFunction.removePadding(cycleDate)+"'-1 day),'"+dateFormat+"') as 'NEXT_DUE_DATE' FROM com_next_due_date_m WHERE REC_STATUS='A' AND '"+CommonFunction.removePadding(cycleDate)+"' BETWEEN FROM_DATE AND TO_DATE");
		 query.append("SELECT  DUE_DAY, dbo.DATE_FORMAT(DATEADD(day,'"+CommonFunction.removePadding(cycleDate)+"'-1,DATEADD(day,1,EOMONTH(convert(date, '"+repayEffectiveDate+"', 103)))),'"+dateFormat+"')AS NEXT_DUE_DATE ");
		 query.append(" FROM com_next_due_date_m WHERE REC_STATUS='A' AND '"+CommonFunction.removePadding(cycleDate)+"' BETWEEN FROM_DATE AND TO_DATE ");
		 logger.info("fetchDueDayNextDate: "+query.toString());
		LoanDetailVo vo = null;
		ArrayList source = ConnectionDAO.sqlSelect(query.toString());
		logger.info("fetchDueDayNextDate: "+source.size());
		
		query=null;
		
		for(int i=0;i<source.size();i++){

			logger.info("fetchDueDayNextDate: "+source.get(i).toString());
			ArrayList subsource=(ArrayList)source.get(i);
			if(subsource.size()>0)
			{
				logger.info("fetchDueDayNextDate: "+subsource.size());
				vo = new LoanDetailVo();
				vo.setCycleDate(CommonFunction.checkNull(subsource.get(0)).trim());
				vo.setNextDueDate((CommonFunction.checkNull(subsource.get(1))).trim());
				list.add(vo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}
	
	
	
	public ArrayList<CommonDealVo> queryResponseSearchDetail(CommonDealVo vo) {
		ArrayList list=new ArrayList();
		int count=0;
		int startRecordIndex=0;
		int endRecordIndex = no;
		
		logger.info("here userid++++++++++++++++++++++++++++++++++++++++++++++++++++++++ "+vo.getReportingToUserId());
		 			String userNameQ="select USER_NAME from sec_user_m where REC_STATUS='A' and USER_ID='"+vo.getReportingToUserId()+"'";
		 			String userName=ConnectionDAO.singleReturn(userNameQ);
		 			logger.info("userNameQ: "+userNameQ+" userName: "+userName);
		ArrayList header=new ArrayList();
		
		 String branch="";
		   if(vo.getAllBranches().equalsIgnoreCase("on"))
		   {
			  // String branchMappedToUserQuery="SELECT GROUP_CONCAT(BRANCH_ID) FROM sec_user_branch_dtl WHERE USER_ID='"+CommonFunction.checkNull(vo.getReportingToUserId()).trim()+"' AND REC_STATUS='A'";
			   String branchMappedToUserQuery="SELECT STUFF((SELECT ',' + CAST(BRANCH_ID AS varchar(10)) FROM sec_user_branch_dtl WHERE USER_ID='"+CommonFunction.checkNull(vo.getReportingToUserId()).trim()+"' AND REC_STATUS='A' FOR XML PATH ('')), 1, 1, '')";
			   branch=ConnectionDAO.singleReturn(branchMappedToUserQuery);
			   logger.info("branchMappedToUserQuery: "+branchMappedToUserQuery+"      branches maped to user:   "+branch);
		   }
		   else
		   {
			   branch=vo.getBranchId();
		   }
		   
		   if(CommonFunction.checkNull(branch).equalsIgnoreCase(""))
		   {
			   branch=vo.getBranchId(); 
		   }
		
		
		try
		{
			logger.info("Inside queryResponseSearchDetail.....");
			
			CommonDealVo fetchVo= (CommonDealVo) vo;
			boolean appendSQL=false;
			StringBuffer bufInsSql=new StringBuffer();
			StringBuffer bufInsSqlTempCount = new StringBuffer();

			bufInsSql.append("select distinct d.DEAL_ID,DEAL_NO,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC ");
			bufInsSql.append("from cr_deal_dtl d");
			bufInsSqlTempCount.append("SELECT COUNT(distinct d.DEAL_ID) FROM cr_deal_dtl d ");
			
			bufInsSql.append(" inner join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
			bufInsSqlTempCount.append(" inner join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
			
			bufInsSql.append(" inner join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");			
			bufInsSqlTempCount.append(" inner join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
			
			bufInsSql.append(" inner join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");			
			bufInsSqlTempCount.append(" inner join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
			
			bufInsSql.append(" inner join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");			
			bufInsSqlTempCount.append(" inner join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
			
			bufInsSql.append(" inner join deal_query_dtl q on d.DEAL_ID=q.DEAL_ID AND q.RESOLUTION_STATUS='P' and q.USER_ID='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"'  ");
			bufInsSqlTempCount.append(" inner join deal_query_dtl q on d.DEAL_ID=q.DEAL_ID AND q.RESOLUTION_STATUS='P' and q.USER_ID='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"'  ");
			
			
			
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase(""))) && ((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on"))))
			{
				bufInsSql.append("WHERE D.REC_STATUS NOT IN ('A','X') AND  d.DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+") and d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
				bufInsSqlTempCount.append("WHERE D.REC_STATUS NOT IN ('A','X') AND d.DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+") and d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
			}
			
			if(((vo.getLbxDealNo().equalsIgnoreCase("")) ||(vo.getCustomername().equalsIgnoreCase(""))||(vo.getLbxProductID().equalsIgnoreCase(""))||(vo.getLbxscheme().equalsIgnoreCase("")))|| (!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on")))){
				appendSQL=true;
			}
			
			if(appendSQL){
				logger.info("In Where Clause");
				//bufInsSql.append(" WHERE d.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and d.Rec_status='F' ");
				//bufInsSqlTempCount.append(" WHERE d.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and d.Rec_status='F' ");
				
				bufInsSql.append(" WHERE D.REC_STATUS NOT IN ('A','X') AND  d.DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+")");
				bufInsSqlTempCount.append(" WHERE D.REC_STATUS NOT IN ('A','X') AND  d.DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+")");
			
					
			}

			 if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")))) {
			        bufInsSql.append("AND d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
			        bufInsSqlTempCount.append("AND d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
			   	 appendSQL=true;
			   	  
			     }
				
				if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")))) {
			   	  bufInsSql.append("AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
			   	  bufInsSqlTempCount.append("AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
			   	  appendSQL=true;
			     }
				if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")))) {
				   	  bufInsSql.append("AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
				   	bufInsSqlTempCount.append("AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
				   	  appendSQL=true;
				     }
				if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")))) {
				   	  bufInsSql.append("AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
				   	bufInsSqlTempCount.append("AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
				   	  appendSQL=true;
				     }
				if(((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on")))) {
				   	  bufInsSql.append("AND d.DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+") ");
				   	  bufInsSqlTempCount.append("AND d.DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+") ");
				   	  appendSQL=true;
				     }
			LoggerMsg.info("query : "+bufInsSql.toString());
			logger.info("bufInsSqlTempCount **************************** : "+bufInsSqlTempCount.toString());
			count =Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
			
//			if((StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()==null && StringEscapeUtils.escapeSql(vo.getCustomername()).trim()==null) || (StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim().equalsIgnoreCase("") && StringEscapeUtils.escapeSql(vo.getCustomername()).trim().equalsIgnoreCase("")) || (StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()==null  && StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim().equalsIgnoreCase("")) || ( StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()==null && StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim().equalsIgnoreCase("")) || vo.getCurrentPageLink()>1)
//			{
			
			logger.info("current PAge Link no .................... "+vo.getCurrentPageLink());
			if(vo.getCurrentPageLink()>1)
			{
				startRecordIndex = (vo.getCurrentPageLink()-1)*no;
				endRecordIndex = no;
				logger.info("startRecordIndex .................... "+startRecordIndex);
				logger.info("endRecordIndex .................... "+endRecordIndex);
			}
				
			bufInsSql.append(" ORDER BY d.DEAL_ID OFFSET ");
			bufInsSql.append(startRecordIndex);
			bufInsSql.append(" ROWS FETCH next ");
			bufInsSql.append(endRecordIndex);
			bufInsSql.append(" ROWS ONLY ");
			logger.info("Search queryResponseSearchDetail query for SQL SERVER : " + bufInsSql.toString());

			//bufInsSql.append(CommonFunction.betweenStartEnd(startRecordIndex, endRecordIndex));

			
//			}
			logger.info("query : "+bufInsSql.toString());
			
			
		    header = ConnectionDAO.sqlSelect(bufInsSql.toString());
		    
		    
						
			for(int i=0;i<header.size();i++){
				
				logger.info("header: "+header.size());
				ArrayList header1=(ArrayList)header.get(i);
				if(header1!=null && header1.size()>0)
				{
					logger.info("header list size ....................."+header.size());
					fetchVo = new CommonDealVo();
				
					fetchVo.setLbxDealNo((CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim());
					
					//dealCapturing.do?method=leadEntryCapturing&dealId="+val+"&status=UWA
							
					fetchVo.setDealNo("<a href=\"#\" onclick=\"searchDealAtQueryResponse('"+CommonFunction.checkNull(header1.get(0)).toString()+ "');\">"+ CommonFunction.checkNull(header1.get(1)).toString() + "</a>");
					fetchVo.setCustomername((CommonFunction.checkNull(header1.get(2))).trim());
					fetchVo.setProduct((CommonFunction.checkNull(header1.get(3))).trim());
					fetchVo.setScheme((CommonFunction.checkNull(header1.get(4))).trim());
					fetchVo.setReportingToUserId(userName);
					fetchVo.setTotalRecordSize(count);
					list.add(fetchVo);
				}
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return list;
	}

public boolean saveQueryResponseData(Object ob){
		
		QueryProcessingVo vo = (QueryProcessingVo)ob;
		
		logger.info("In saveQueryResponseData....... mode ");
	     String resolutionDateTime="";
		if(CommonFunction.checkNull(vo.getResolutionTime()).equalsIgnoreCase(""))
		{
			resolutionDateTime=vo.getResolutionDate().trim();
		}
		else
		{
			resolutionDateTime=vo.getResolutionDate().trim()+" "+vo.getResolutionTime().trim().substring(0, 5);
		}
        
		logger.info("resolutionDateTime : "+resolutionDateTime);

		
		qryList=new ArrayList();
		PrepStmtObject insertPrepStmtObject=null;
		
		String[] dealQueryResponseId=vo.getDealQueryResponseId();
		logger.info("dealQueryResponseId: "+dealQueryResponseId);
		for(int k=0;k<dealQueryResponseId.length;k++)
		{
		
		 StringBuilder query=new StringBuilder();
		 query.append("update deal_query_dtl set resolution_status=?,resolution_remarks=?,resolution_datetime=");
		 //query.append("DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND)");
		query.append(dbo);
		query.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ");
		 query.append(",MAKER_DATE=");
		 //query.append("DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND)" );
		query.append(dbo);
		query.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ");
		
		 query.append(",user_id=? where DEAL_QUERY_ID=? ");
         insertPrepStmtObject = new PrepStmtObject();
        
         insertPrepStmtObject.addString("R");
        
      
        if((CommonFunction.checkNull(vo.getResolutionRemarks())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getResolutionRemarks()).trim());
      
        if(CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getMakerDate()).trim());
        
//		if(CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
//			insertPrepStmtObject.addNull();
//		else
//			insertPrepStmtObject.addString((vo.getUserId()).trim());
		
		if(CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getMakerDate()).trim());
		
		if(CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getUserId()).trim());
       
        if((CommonFunction.checkNull(dealQueryResponseId[k]).trim().equalsIgnoreCase("")))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString(dealQueryResponseId[k].trim());
        
            insertPrepStmtObject.setSql(query.toString());
            
            logger.info("IN updateUnderwritingQueryData() update query1 ### "+insertPrepStmtObject.printQuery());
    		qryList.add(insertPrepStmtObject);
		}
		        
		boolean status=false;
		try {
			status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
		} catch (Exception e) {
			e.printStackTrace();
		}
	
	    //logger.info("In updateUnderwritingQueryData......................status= "+status);
	    return status;

	}
public ArrayList getQueryResponseData(String dealId,String userId,String queryStatus){
	ArrayList list=new ArrayList();
	try{
		logger.info("In getQueryResponseData..........................DAOImpl"+queryStatus);//+dealId);
		StringBuilder query=new StringBuilder();
		 query.append("select deal_id,");
		 query.append(dbo);
		 query.append("DATE_FORMAT(query_date,'"+dateFormatWithTime+"'),query_remarks,case when resolution_status='P' then 'Pending' else 'Resolved' end as resolution_status,");
		 query.append(dbo);
		 query.append("DATE_FORMAT(resolution_datetime,'"+dateFormatWithTime+"'),resolution_remarks,u.USER_NAME,resolution_status,DEAL_QUERY_ID,m.USER_NAME, ");
		 query.append(" CASE q.QUERY_TYPE WHEN 'CRT'  THEN 'CRITERIA RELATED' WHEN 'CLA'  THEN 'CLARIFICATION RELATED' WHEN 'BNK'  THEN 'BANK RELATED' WHEN 'DOC'  THEN 'DOCUMENTS RELATED' WHEN 'MJD'  THEN 'MAJOR DEBTOR' WHEN 'MAC'  THEN 'MAJOR CREDITOR' ELSE '' END AS QUERYTYPE ");
		 query.append(" from deal_query_dtl q left join sec_user_m u on u.user_id=q.user_id left join sec_user_m m on m.user_id=q.maker_id " );
		 query.append(" where deal_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' ");
		 
		 if(CommonFunction.checkNull(queryStatus).equalsIgnoreCase("Y"))
		 {
			 query.append(" and resolution_status='P' and q.user_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(userId)).trim()+"'");
		 }
		 
		logger.info("In getQueryResponseData...............query...........DAOImpl"+query.toString());
		QueryProcessingVo vo= null;
		ArrayList product = ConnectionDAO.sqlSelect(query.toString());
		//logger.info("getUnderwritingQueryData "+product.size());
		
		query=null;
		
		for(int i=0;i<product.size();i++){
			//logger.info("getUnderwritingQueryData...FOR loop "+CommonFunction.checkNull(product.get(i)).toString());
			ArrayList data=(ArrayList)product.get(i);
			if(data.size()>0)	{
				vo = new QueryProcessingVo();
				vo.setDealId((CommonFunction.checkNull(data.get(0))).trim());
				vo.setQueryDate((CommonFunction.checkNull(data.get(1))).trim());
				vo.setQueryRemarks((CommonFunction.checkNull(data.get(2))).trim());
				vo.setResolution((CommonFunction.checkNull(data.get(3))).trim());
				vo.setResolutionDate((CommonFunction.checkNull(data.get(4))).trim());
				vo.setResolutionRemarks((CommonFunction.checkNull(data.get(5))).trim());
				vo.setUserId((CommonFunction.checkNull(data.get(6))).trim());
				vo.setResolutionStatus((CommonFunction.checkNull(data.get(7))).trim());
				vo.setDealQueryId((CommonFunction.checkNull(data.get(8))).trim());
				vo.setQueryRaised((CommonFunction.checkNull(data.get(9))).trim());
				vo.setQueryTypeDesc((CommonFunction.checkNull(data.get(10))).trim());
				list.add(vo);
			}
		}
	}catch(Exception e){
		e.printStackTrace();
	}
	return list;

}

public ArrayList getNoOfDisbAtUnderWriter(String dealId) {
	
	ArrayList<Object> list=new ArrayList<Object>();
	try{
		StringBuilder query=new StringBuilder();
    query.append("select distinct ");
    query.append(dbo);
    query.append("DATE_FORMAT(LOAN_AGREEMENT_DATE,'"+dateFormat+"'),");
    query.append(dbo);
    query.append("DATE_FORMAT(LOAN_REPAY_EFF_DATE,'"+dateFormat+"'),LOAN_NUMBER_DISBURSAL,DISBURSAL_NO,DISBURSAL_STAGE,");
    query.append(" PROPOSED_DISBURSAL_AMOUNT,DISBURSAL_DESCRIPTION,");
    query.append(dbo);
    query.append("DATE_FORMAT(PROPOSED_DISBURSAL_DATE,'"+dateFormat+"'),LOAN_LOAN_AMOUNT");
    query.append(" from cr_deal_loan_dtl L");
    query.append(" left JOIN cr_loan_disbursalsch_dtl D on D.LOAN_ID=L.LOAN_ID");
    query.append(" where L.DEAL_ID="+dealId);
		
	logger.info("getNoOfDisb Queryl: "+query.toString());
	
	NoOfDisbursalVo nVo = null;
	ArrayList disbdeatail = ConnectionDAO.sqlSelect(query.toString());
	logger.info("getNoOfDisb OUTER ARRAYLIST SIZE: "+disbdeatail.size());
	for(int i=0;i<disbdeatail.size();i++){

		logger.info("getDocumentsDetail"+disbdeatail.get(i).toString());
		ArrayList disbdeatail1=(ArrayList)disbdeatail.get(i);
		logger.info("getNoOfDisb INNNER ARRAYLIST SIZE: "+disbdeatail1.size());
		if(disbdeatail1.size()>0)
		{
			nVo = new NoOfDisbursalVo();
			nVo.setLoanAgrementDate((CommonFunction.checkNull(disbdeatail1.get(0))).trim());
			nVo.setRepayEffectiveDate((CommonFunction.checkNull(disbdeatail1.get(1))).trim());
			nVo.setDisbNoInLoan((CommonFunction.checkNull(disbdeatail1.get(2))).trim());
			nVo.setDisbNo((CommonFunction.checkNull(disbdeatail1.get(3))).trim());
			nVo.setSatge((CommonFunction.checkNull(disbdeatail1.get(4))).trim());
			
			if(!CommonFunction.checkNull(disbdeatail1.get(5)).equalsIgnoreCase(""))	
 			{
				Number Amount = myFormatter.parse((CommonFunction.checkNull(disbdeatail1.get(5))).trim());
				logger.info("LoanAmount: "+Amount);			
				nVo.setDisAmount(myFormatter.format(Amount));	
 			}
			else
			{
				nVo.setDisAmount("");	
			}
			
					    
			nVo.setDescDis((CommonFunction.checkNull(disbdeatail1.get(6))).trim());
			nVo.setDateDis((CommonFunction.checkNull(disbdeatail1.get(7))).trim());
			if(!CommonFunction.checkNull(disbdeatail1.get(8)).equalsIgnoreCase(""))	
 			{
 				Number LoanAmount =myFormatter.parse((CommonFunction.checkNull(disbdeatail1.get(8))).trim());
 				nVo.setLoanAmount(myFormatter.format(LoanAmount));
 			}
			list.add(nVo);
		}
	}
	query=null;
	}catch(Exception e){
		e.printStackTrace();
	}
	return list;
}

// asesh space start
public ArrayList getSecurityType()
{
	ArrayList<Object> list=new ArrayList<Object>();
	try{
	logger.info("Enter getSecurityType()");
	String query="select value,description from generic_master where GENERIC_KEY='SECURITY_TYPE' and rec_status ='A'";
	logger.info("Query :  "+query);
	ArrayList securityList = ConnectionDAO.sqlSelect(query);
	logger.info("SecurityList Size : "+securityList.size());
	for(int i=0;i<securityList.size();i++){
		logger.info("getNatureOfBusinessList "+securityList.get(i).toString());
		ArrayList subList=(ArrayList)securityList.get(i);
		if(subList.size()>0)
		{
			logger.info("getNatureOfBusinessList " +subList.size());
			CollateralVo vo=new CollateralVo();
			vo.setSecurityCode((CommonFunction.checkNull(subList.get(0)).toString()));
			vo.setSecurityDesc((CommonFunction.checkNull(subList.get(1)).toString()));
			list.add(vo);
		}
	}
	}catch(Exception e){
		e.printStackTrace();
	}
	return list;
}
	
@Override
public String saveSpecialCondition(SpecialConditionVo vo) {
	
	qryList=new ArrayList();
	PrepStmtObject insertPrepStmtObject=new PrepStmtObject();
	String res="E";
	logger.info("In insert saveSpecialCondition");
	StringBuffer bufInsSql =	new StringBuffer();
	bufInsSql.append("insert into cr_deal_special_condition_m(DEAL_ID,DEAL_LOAN_ID,DEAL_SPECIAL_CONDITION,DEAL_SPECIAL_CATEGORY,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");
	bufInsSql.append(" values ( ");
	bufInsSql.append(" ?," );  // DEAL_ID
	bufInsSql.append(" ?," );  // DEAL_LOAN_ID
	bufInsSql.append(" ?," );  //DEAL_SPECIAL_CONDITION
	bufInsSql.append(" ?," );  //DEAL_SPECIAL_CATEGORY
	bufInsSql.append(" ?," );  // REC_STATUS
	bufInsSql.append(" ?," );  // MAKER_ID
	//bufInsSql.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND), " ); // MAKER_DATE
	bufInsSql.append(dbo);
	bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ,");// MAKER_DATE
	bufInsSql.append(" ?," );  // AUTHOR_ID
	//bufInsSql.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND) )" ); // AUTHOR_DATE
	bufInsSql.append(dbo);
	bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9)) "); // AUTHOR_DATE

	if((CommonFunction.checkNull(vo.getDealId())).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getDealId()).trim());
	if((CommonFunction.checkNull(vo.getDealLoanId())).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getDealLoanId()).trim());
	
	if((CommonFunction.checkNull(vo.getSpecialCondition())).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getSpecialCondition()).trim());
	
	if((CommonFunction.checkNull(vo.getSpecialCategory())).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getSpecialCategory()).trim());
	
	insertPrepStmtObject.addString("A");
	
			
	if(CommonFunction.checkNull((vo.getMakerId())).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getMakerId()).trim());
	
	
	if((CommonFunction.checkNull(vo.getMakerDate())).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getMakerDate()).trim());
	
	if(CommonFunction.checkNull((vo.getMakerId())).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getMakerId()).trim());
	
	
	if((CommonFunction.checkNull(vo.getMakerDate())).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getMakerDate()).trim());

	insertPrepStmtObject.setSql(bufInsSql.toString());
	logger.info("IN saveSpecialCondition() insert query1 ### "+insertPrepStmtObject.printQuery());
	
	
	bufInsSql=null;
	
	qryList.add(insertPrepStmtObject);
	boolean status=false;
	try {
		status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
	} catch (Exception e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
    logger.info("In saveSpecialCondition STATUS......................"+status);
	if(status)
	{
    	res="S";
     }
	
	return res;
}
public boolean deleteOtherChargesPlanInDeal(String id,String markedRow,String stage)
{
	logger.info("In deleteOtherChargesPlanInDeal()");
	PrepStmtObject insertPrepStmtObject = null;
	StringBuilder qry=new StringBuilder();
	ArrayList list =new ArrayList();
	boolean status =false;
	try
	{	
		insertPrepStmtObject = new PrepStmtObject();	
		if(CommonFunction.checkNull(stage).trim().equalsIgnoreCase("LIM"))
			qry.append("DELETE FROM cr_loan_charge_plan_dtl WHERE LOAN_ID='"+CommonFunction.checkNull(id).trim()+"' and CHARGE_PLAN_ID in("+CommonFunction.checkNull(markedRow).trim()+")");
		else
			qry.append("DELETE FROM cr_deal_charge_plan_dtl WHERE DEAL_ID='"+CommonFunction.checkNull(id).trim()+"' and CHARGE_PLAN_ID in("+CommonFunction.checkNull(markedRow).trim()+")");
		logger.info("In deleteOtherChargesPlanInDeal() Delete Query  :  "+qry.toString());
		insertPrepStmtObject.setSql(qry.toString());
		list.add(insertPrepStmtObject);
		status = ConnectionDAO.sqlInsUpdDeletePrepStmt(list);
	}
	catch (Exception e) 
	{e.printStackTrace();}
	finally
	{
		insertPrepStmtObject = null;
		qry=null;
	}
	return status;
}
public boolean saveOtherChargesPlanInDeal(OtherChargesPlanVo ipvo)
{
	String FromInstallment[] = ipvo.getFromInstall();
	String ToInstallment[] = ipvo.getToInstall();
	String type[] = ipvo.getType();
	String InstallmentType= ipvo.getInstallmentType();
	String TotalInstallment=ipvo.getTotalInstallment();
	String toInstallment = ipvo.getToInstallment();	
	String amount[] = ipvo.getAmount();
	String chargeCode[] = ipvo.getChargehiddenFld();
	String loanId = ipvo.getLoanId();
	ArrayList qryList=new ArrayList();
	PrepStmtObject insertPrepStmtObject = null;
	StringBuffer bufInsSql =	new StringBuffer();
	StringBuilder checkQ=new StringBuilder();
	StringBuilder qry=new StringBuilder();
	boolean status=false;
    try
    {	
		if(CommonFunction.checkNull(ipvo.getStage()).trim().equalsIgnoreCase("LIM"))
		{
			try {
				
				    checkQ.append("select count(*) from cr_loan_charge_plan_dtl where LOAN_ID="+(CommonFunction.checkNull(ipvo.getLoanId()).trim())+"");
				    logger.info("In.....saveOtherChargesPlanInDeal"+checkQ.toString());
				    String count=ConnectionDAO.singleReturn(checkQ.toString());
				   
				   checkQ=null;
				   
				   if(Integer.parseInt(count)>0)
				   { 
					  insertPrepStmtObject = new PrepStmtObject();
					  qry.append("DELETE FROM cr_loan_charge_plan_dtl WHERE LOAN_ID='"+(CommonFunction.checkNull(ipvo.getLoanId()).trim())+ "'");
					  logger.info("In.....saveOtherChargesPlanInDeal..qry"+qry.toString());
				     insertPrepStmtObject.setSql(qry.toString());
					 qryList.add(insertPrepStmtObject);
					// ConnectionDAO.sqlInsUpdDelete(qryList);
					  
					 qry=null;
					}
				   if(!CommonFunction.checkNull(FromInstallment).trim().equalsIgnoreCase(""))
				   {
				 for(int k=0;k<FromInstallment.length;k++)  
				{
					bufInsSql =	new StringBuffer();
			     insertPrepStmtObject = new PrepStmtObject();
				  
				
				  insertPrepStmtObject = new PrepStmtObject();
					bufInsSql.append("insert into cr_loan_charge_plan_dtl (LOAN_ID,FROM_INSTL_NO,TO_INSTL_NO,CHARGE_TYPE,AMOUNT,CHARGE_CODE,REC_STATUS,MAKER_ID,MAKER_DATE) values(?,?,?,?,?,?,?,?,");
					//bufInsSql.append("DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND))");
					bufInsSql.append(dbo);
					bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9)) ");			
					if(CommonFunction.checkNull(ipvo.getLoanId()).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(ipvo.getLoanId().trim());   // loan Id
					
					if(CommonFunction.checkNull(FromInstallment[k]).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(FromInstallment[k].trim()); //From Installment
					
			    	if(CommonFunction.checkNull(ToInstallment[k]).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
					insertPrepStmtObject.addString(ToInstallment[k].trim());// To Installment 
			    	
	//		    	if(CommonFunction.checkNull(type[k]).trim().equalsIgnoreCase(""))
	//					insertPrepStmtObject.addNull();
	//				else
	//				insertPrepStmtObject.addString(type[k].trim());// charge type
			    	
			    	insertPrepStmtObject.addString("F");// charge type
			    	 
			    	 if((CommonFunction.checkNull(amount[k])).trim().equalsIgnoreCase(""))
			        		insertPrepStmtObject.addString("0.00");
					else
					 insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(amount[k]).trim())).toString());// PRINCIPAL_AMOUNT   	
			    	
			    	if((CommonFunction.checkNull(chargeCode[k])).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(chargeCode[k].trim()); //Charge Id 
			    	 
			    	insertPrepStmtObject.addString("P");// REC_STATUS   	   	
									
			    	//insertPrepStmtObject.addString(""+(k+1));// To Installment 
			    			    	
			    	if (CommonFunction.checkNull(ipvo.getMakerId()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((CommonFunction.checkNull(ipvo.getMakerId()).trim()));
					
					if (CommonFunction.checkNull(ipvo.getMakerDate()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((CommonFunction.checkNull(ipvo.getMakerDate()).trim()));
			    	//============================================================
			    	
				  
				 	insertPrepStmtObject.setSql(bufInsSql.toString());
					 logger.info("IN saveOtherChargesPlanInDeal() LOAN insert query1 ### DAO IMPL "+insertPrepStmtObject.printQuery());
					qryList.add(insertPrepStmtObject);
					bufInsSql=null;
				  
				}
				   }		
					status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
				} catch (Exception e) {
					e.printStackTrace();
				}
		}
		else
		{
			try {
				 
				    checkQ.append("select count(*) from cr_deal_charge_plan_dtl where DEAL_ID="+(CommonFunction.checkNull(ipvo.getDealId()).trim())+"");
				    logger.info("In.else....saveOtherChargesPlanInDeal..checkQ"+checkQ.toString());
				    String count=ConnectionDAO.singleReturn(checkQ.toString());
				   
				   checkQ=null;
				   
				   if(!count.equalsIgnoreCase("0"))
				   { 
					  insertPrepStmtObject = new PrepStmtObject();
					  qry.append("DELETE FROM cr_deal_charge_plan_dtl WHERE DEAL_ID='"+(CommonFunction.checkNull(ipvo.getDealId()).trim())+ "'");
					  logger.info("In.else....saveOtherChargesPlanInDeal..qry"+qry.toString());
				     insertPrepStmtObject.setSql(qry.toString());
					 qryList.add(insertPrepStmtObject);
					// ConnectionDAO.sqlInsUpdDelete(qryList);
					  
					 qry=null;
					}
				if(!CommonFunction.checkNull(FromInstallment).trim().equalsIgnoreCase("")){
				for(int k=0;k<FromInstallment.length;k++)  
				{
					bufInsSql =	new StringBuffer();
			     
				
				  insertPrepStmtObject = new PrepStmtObject();
					bufInsSql.append("insert into cr_deal_charge_plan_dtl (DEAL_ID,DEAL_LOAN_ID,FROM_INSTL_NO,TO_INSTL_NO,CHARGE_TYPE,AMOUNT,CHARGE_CODE,REC_STATUS,MAKER_ID,MAKER_DATE) values(?,?,?,?,?,?,?,?,?,");
					//bufInsSql.append("DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND))");
					bufInsSql.append(dbo);
					bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9)) ");		
					if(CommonFunction.checkNull(ipvo.getDealId()).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(ipvo.getDealId().trim()); //deal Id
					
					if(CommonFunction.checkNull(ipvo.getLoanId()).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(ipvo.getLoanId().trim());   // loan Id
					
					if(CommonFunction.checkNull(FromInstallment[k]).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(FromInstallment[k].trim()); //From Installment
					
			    	if(CommonFunction.checkNull(ToInstallment[k]).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
					insertPrepStmtObject.addString(ToInstallment[k].trim());// To Installment 
			    	
	//		    	if(CommonFunction.checkNull(type[k]).trim().equalsIgnoreCase(""))
	//					insertPrepStmtObject.addNull();
	//				else
	//				insertPrepStmtObject.addString(type[k].trim());// charge type
			    	
			    	insertPrepStmtObject.addString("F");// charge type
			    	 
			    	 if((CommonFunction.checkNull(amount[k])).trim().equalsIgnoreCase(""))
			        		insertPrepStmtObject.addString("0.00");
					else
					 insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(amount[k]).trim())).toString());// PRINCIPAL_AMOUNT   	
			    	
			    	if((CommonFunction.checkNull(chargeCode[k])).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(chargeCode[k].trim()); //Charge Id 
			    	 
			    	insertPrepStmtObject.addString("P");// REC_STATUS   	   	
									
			    	//insertPrepStmtObject.addString(""+(k+1));// To Installment 
			    			    	
			    	if (CommonFunction.checkNull(ipvo.getMakerId()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((CommonFunction.checkNull(ipvo.getMakerId()).trim()));
					
					if (CommonFunction.checkNull(ipvo.getMakerDate()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((CommonFunction.checkNull(ipvo.getMakerDate()).trim()));
			    	//============================================================
			    	
				  
				 	insertPrepStmtObject.setSql(bufInsSql.toString());
					 logger.info("IN saveOtherChargesPlanInDeal() DEAL insert query1 ### "+insertPrepStmtObject.printQuery());
					qryList.add(insertPrepStmtObject);
					bufInsSql=null;
				  
				}
				}			
					status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
					
				} catch (Exception e) {
					e.printStackTrace();
				}
		}
		     logger.info("In saveOtherChargesPlanInDeal......................"+status);
    }
    catch(Exception e)
	{
		e.printStackTrace();
	}
	finally
	{
		FromInstallment=null;
		ToInstallment=null;
		type=null;
		InstallmentType=null;
		TotalInstallment=null;
		toInstallment =null;	
		amount=null;
		chargeCode=null;
		loanId =null;
		qryList=null;
		insertPrepStmtObject = null;
		bufInsSql =	null;
		checkQ=null;
		qry=null;	
		ipvo=null;
	}
	return status;

}
public ArrayList getOtherPeriodicalChargeDetailInDeal(String id,String stage)
{
	 ArrayList<OtherChargesPlanVo> list=new ArrayList<OtherChargesPlanVo>();
	 ArrayList mainList=new ArrayList ();
	 ArrayList subList =new ArrayList();
	 StringBuilder query=new StringBuilder();
	 OtherChargesPlanVo ipVo= null;
	 try
	 {
			if(stage.equalsIgnoreCase("D"))
			{
				query.append("select D.FROM_INSTL_NO,D.TO_INSTL_NO,D.CHARGE_TYPE,D.AMOUNT ,C.CHARGE_CODE,C.CHARGE_DESC,"+
			    			 " L.DEAL_INSTALLMENT_TYPE,L.DEAL_NO_OF_INSTALLMENT,L.DEAL_RATE_TYPE,L.DEAL_LOAN_AMOUNT,D.CHARGE_PLAN_ID "+  
			    			 " from cr_deal_loan_dtl L"+ 
			    			 " join cr_deal_charge_plan_dtl D on D.DEAL_ID=L.DEAL_ID "+
			    			 " join com_charge_code_m C  on(C.CHARGE_CODE=D.CHARGE_CODE)"+            			
			    			 " where L.DEAL_ID="+id+"");
			}
			else if(stage.equalsIgnoreCase("L"))
			{			
         	 	query.append("select D.FROM_INSTL_NO,D.TO_INSTL_NO,D.CHARGE_TYPE,D.AMOUNT,C.CHARGE_CODE,C.CHARGE_DESC,L.LOAN_INSTALLMENT_TYPE,"+
			    			" L.LOAN_NO_OF_INSTALLMENT,L.LOAN_RATE_TYPE,L.LOAN_LOAN_AMOUNT,D.CHARGE_PLAN_ID  "+
			    			" from cr_loan_dtl L "+
			    			" JOIN cr_loan_charge_plan_dtl D on D.LOAN_ID=L.LOAN_ID "+
			    			" join com_charge_code_m C on(C.CHARGE_CODE=D.CHARGE_CODE) "+         			
			    			" where L.LOAN_ID="+id+"");
			}
			logger.info("getOtherPeriodicalChargeDetailInDeal Queryl: "+query);
			mainList=ConnectionDAO.sqlSelect(query.toString());
			query=null;
			for(int i=0;i<mainList.size();i++)
			{
				subList= (ArrayList)mainList.get(i);
				if(subList.size()>0)
				{
					ipVo = new OtherChargesPlanVo();  
				    ipVo.setFromInstallment((CommonFunction.checkNull(subList.get(0))).trim());
				    ipVo.setToInstallment((CommonFunction.checkNull(subList.get(1))).trim());
				    ipVo.setChargeType("FLAT");
				    if(!CommonFunction.checkNull(subList.get(3)).equalsIgnoreCase(""))
    	    		{
	    	    		Number reconNum=0.0000;
						try {
							reconNum = myFormatter.parse((CommonFunction.checkNull(subList.get(3))).trim());
						} catch (ParseException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						ipVo.setChargeAmount((myFormatter.format(reconNum)));
    	    		}
    	    		else
    	    		{
    	    			ipVo.setChargeAmount("0.00");	
    	    		}
				    ipVo.setChargeCode((CommonFunction.checkNull(subList.get(4))).trim());
				    ipVo.setChargeDesc((CommonFunction.checkNull(subList.get(5))).trim());
				    ipVo.setInstallmentType((CommonFunction.checkNull(subList.get(6))).trim());
				    ipVo.setTotalInstallment((CommonFunction.checkNull(subList.get(7))).trim());
  					ipVo.setRateType((CommonFunction.checkNull(subList.get(8))).trim());
					if(!CommonFunction.checkNull(subList.get(9)).equalsIgnoreCase(""))
					{
						Number instam = myFormatter.parse((CommonFunction.checkNull(subList.get(9))).trim());
						ipVo.setLoanAmount((myFormatter.format(instam)));
					}
					else
					{
						ipVo.setLoanAmount("0.00");
					}
					ipVo.setChargePlanId((CommonFunction.checkNull(subList.get(10))).trim());
					list.add(ipVo);
			     }
		  }
		}catch(Exception e){
			e.printStackTrace();
		}
		finally
		{
			mainList.clear();
			mainList=null;
			subList.clear();
			subList=null;
			query=null;
			ipVo= null;
		}
		return list;
}
	

// asesh space end


@Override
public ArrayList getSpecialConditionList(String dealId) {
	ArrayList<Object> list=new ArrayList<Object>();
	try{
		StringBuilder query=new StringBuilder();
		SpecialConditionVo vo=null;
	 query.append(" SELECT DEAL_SPECIAL_CONDITION_ID,DEAL_SPECIAL_CONDITION,DEAL_SPECIAL_CATEGORY from cr_deal_special_condition_m d where deal_id= '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"'");
				
	logger.info("getSpecialConditionList Queryl: "+query.toString());

	ArrayList detail = ConnectionDAO.sqlSelect(query.toString());
	logger.info("getSpecialConditionList OUTER ARRAYLIST SIZE: "+detail.size());
	
	
	
	for(int i=0;i<detail.size();i++){

		logger.info("getSpecialConditionList"+detail.get(i).toString());
		ArrayList subDetail=(ArrayList)detail.get(i);
		if(subDetail.size()>0)
		{
			logger.info("getSpecialConditionList INNNER ARRAYLIST SIZE: "+subDetail.size());
			vo = new SpecialConditionVo();
			vo.setSpecialDealId((CommonFunction.checkNull(subDetail.get(0))).trim());
			vo.setSpecialCondition((CommonFunction.checkNull(subDetail.get(1))).trim());
			vo.setSpecialCategory((CommonFunction.checkNull(subDetail.get(2))).trim());
			list.add(vo);
		}
		query=null;
	}

	}catch(Exception e){
		e.printStackTrace();
	}
	return list;

}
@Override
public ArrayList fecthConditionList(String specialConditionId) {
	
	ArrayList<Object> list=new ArrayList<Object>();
	try{
		StringBuilder query=new StringBuilder();
		SpecialConditionVo vo=null;
	 query.append(" SELECT DEAL_SPECIAL_CONDITION_ID,DEAL_SPECIAL_CONDITION,DEAL_SPECIAL_CATEGORY from cr_deal_special_condition_m d where DEAL_SPECIAL_CONDITION_ID= '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(specialConditionId)).trim()+"'");
				
	logger.info("getSpecialConditionList Queryl: "+query.toString());

	ArrayList detail = ConnectionDAO.sqlSelect(query.toString());
	logger.info("getSpecialConditionList OUTER ARRAYLIST SIZE: "+detail.size());
	
	
	
	for(int i=0;i<detail.size();i++){

		logger.info("getSpecialConditionList"+detail.get(i).toString());
		ArrayList subDetail=(ArrayList)detail.get(i);
		if(subDetail.size()>0)
		{
			logger.info("getSpecialConditionList INNNER ARRAYLIST SIZE: "+subDetail.size());
			vo = new SpecialConditionVo();
			vo.setSpecialDealId((CommonFunction.checkNull(subDetail.get(0))).trim());
			vo.setSpecialCondition((CommonFunction.checkNull(subDetail.get(1))).trim());
			vo.setSpecialCategory((CommonFunction.checkNull(subDetail.get(2))).trim());
			list.add(vo);
		}
		query=null;
	}

	}catch(Exception e){
		e.printStackTrace();
	}
	return list;
}
@Override
public String updateSpecialCondition(SpecialConditionVo vo) {
	
	qryList=new ArrayList();
	PrepStmtObject insertPrepStmtObject=new PrepStmtObject();
	String res="E";
	logger.info("In updateSpecialCondition");
	StringBuffer bufInsSql =	new StringBuffer();
	bufInsSql.append("update cr_deal_special_condition_m SET DEAL_SPECIAL_CONDITION=?,DEAL_SPECIAL_CATEGORY=? WHERE DEAL_SPECIAL_CONDITION_ID=?");
	
	if((CommonFunction.checkNull(vo.getSpecialCondition())).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getSpecialCondition()).trim());
	
	if((CommonFunction.checkNull(vo.getSpecialCategory())).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getSpecialCategory()).trim());
	
	if((CommonFunction.checkNull(vo.getSpecialDealId())).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getSpecialDealId()).trim());
	
		
	insertPrepStmtObject.setSql(bufInsSql.toString());
	logger.info("IN updateSpecialCondition() update query1 ### "+insertPrepStmtObject.printQuery());
	
	
	bufInsSql=null;
	
	qryList.add(insertPrepStmtObject);
	boolean status=false;
	try {
		status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
	} catch (Exception e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
    logger.info("In updateSpecialCondition STATUS......................"+status);
	if(status)
	{
    	res="S";
     }
	
	return res;
}
@Override
public boolean deleteSpecialCondition(String[] specialId) {
	
	logger.info("deleteSpecialCondition...................................");
	boolean status = false;
	try
	{
	qryList = new ArrayList();
	bufInsUpdSql = new StringBuffer();



	for(int k=0;k<specialId.length;k++)
	{
		 StringBuilder query=new StringBuilder();
		 query.append("Delete from cr_deal_special_condition_m where DEAL_SPECIAL_CONDITION_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(specialId[k])).trim()+"'");
		 logger.info("In.....deleteSpecialCondition..query"+query.toString());
		qryList.add(query);
		query=null;
	}
	
    logger.info("delete query: "+qryList.get(0));
    
	status=ConnectionDAO.sqlInsUpdDelete(qryList);
	logger.info("Status of Deletion is ="+status);
    }
	catch(Exception e)
	{
	e.printStackTrace();
}


return status;
}
@Override
public boolean saveDealDisb(DealDisbursalVo vo) {
	
	logger.info("In saveDealDisb mod"+vo.getNoOfDisbursal().length);
	String noDisb[] = vo.getNoOfDisbursal();
	String disbDate[] = vo.getDateOfDisbursal();
	String disbDesc[] = vo.getDescOfDisbursal();
	String amount[]=vo.getAmountOfDisbursal();
	String paymentTypeArr[]=vo.getPaymentTypeArr();
	String favouringArr[]=vo.getFavouringArr();
	String instrumentModeArr[]= vo.getInstrumentModeArr();
	String lbxbankAccountIDArr[] = vo.getLbxbankAccountIDArr();
	logger.info("In .saveDealDisb mod"+vo.getNoOfDisbursal().length);
	

	
	ArrayList qryList=new ArrayList();
	ArrayList qryList1=new ArrayList();
	boolean status=false;
	try {
		StringBuilder	bufInsSql=null;
		
		 
		 StringBuilder checkQ=null;
		 StringBuilder count =	new StringBuilder();
		 logger.info("Doc Id in saveDealDisb: "+noDisb.length);
		int disLength= noDisb.length;
	for(int k=0;k<disLength; k++)
	{
		checkQ=new StringBuilder();
		PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
		 
//		 StringBuffer bufInsSql =	new StringBuffer();
		 logger.info("Doc Id in saveDealDisb: "+noDisb[k]);
		
		    checkQ.append("select count(*) from cr_deal_disbursalsch_dtl where DEAL_ID="+vo.getDealId()+" and DISBURSAL_NO="+CommonFunction.checkNull(noDisb[k]));
		    
		    logger.info("In.....saveDealDisb..checkQ"+checkQ.toString());
		    
		    count.append(ConnectionDAO.singleReturn(checkQ.toString()));
		   
		   if(!count.toString().equalsIgnoreCase("0"))
			  { 
			   StringBuilder qry=new StringBuilder();
			 qry.append("DELETE FROM cr_deal_disbursalsch_dtl WHERE DEAL_ID='"+(CommonFunction.checkNull(vo.getDealId()).trim())+ "'");
			 qryList1.add(qry);
			 logger.info("In.....saveDealDisb..qry"+qry.toString());
			 ConnectionDAO.sqlInsUpdDelete(qryList1);
			 qry=null;
			  }
		 // if(count.equalsIgnoreCase("0"))
		 // {
		    //logger.info("Doc Id in saveDocumentPOD: "+dId[k]);
		    bufInsSql =	new StringBuilder();
			bufInsSql.append("insert into cr_deal_disbursalsch_dtl(DEAL_ID,DISBURSAL_NO,DISBURSAL_STAGE,DISBURSAL_DESCRIPTION,PROPOSED_DISBURSAL_DATE,PROPOSED_DISBURSAL_AMOUNT,DISBURSAL_FLAG,REC_STATUS,AUTHOR_REMARKS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,PAYMENT_TYPE,FAVOURING,INSTRUMENT_MODE,BANK_ID) values(?,?,?,?,");
			bufInsSql.append(dbo);
			bufInsSql.append("STR_TO_DATE(?,'"+dateFormat+"'),?,?,?,?,?,");
			bufInsSql.append(dbo);
			bufInsSql.append("STR_TO_DATE(?,'"+dateFormat+"'),?,");
			bufInsSql.append(dbo);
			bufInsSql.append("STR_TO_DATE(?,'"+dateFormat+"'),?,?,?,?)");
			
			if(CommonFunction.checkNull(vo.getDealId()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(vo.getDealId().trim());   // loan Id
			
			if(CommonFunction.checkNull(noDisb[k]).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(noDisb[k].trim()); //disb no
			
	
			     insertPrepStmtObject.addString("MM");// Disbursal stage
				
				
			if(CommonFunction.checkNull(disbDesc[k]).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(disbDesc[k].trim());// Description
			
			if(CommonFunction.checkNull(disbDate[k]).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(disbDate[k].trim());          // disb date			
			
				
			if((CommonFunction.checkNull(amount[k])).equalsIgnoreCase(""))
				insertPrepStmtObject.addString("0.00");
				else
					insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(amount[k]).trim())).toString());
				
			
			    insertPrepStmtObject.addNull();//Flag
			    
			    insertPrepStmtObject.addString("A");    //REC_STATUS
			    
			    insertPrepStmtObject.addNull();//AUTHOR_REMARKS
			   
			    if(CommonFunction.checkNull(vo.getMakerId()).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(vo.getMakerId());// maker_id
				
				if(CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(vo.getMakerDate().trim());          // maker date			
				
	
				 if(CommonFunction.checkNull(vo.getMakerId()).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(vo.getMakerId());// AUTHOR_id
					
					if(CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(vo.getMakerDate().trim());          // AUTHOR date			
				
					//Nishant space starts
					if(CommonFunction.checkNull(paymentTypeArr[k]).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(paymentTypeArr[k].trim());          //	PAYMENT_TYPE
					
					if(CommonFunction.checkNull(favouringArr[k]).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(favouringArr[k].trim());          //	FAVOURING
					
					if(CommonFunction.checkNull(instrumentModeArr[k]).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(instrumentModeArr[k].trim());          //	INSTRUMENT_MODE
					
					if(CommonFunction.checkNull(lbxbankAccountIDArr[k]).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(lbxbankAccountIDArr[k].trim());          //	BANK_ID	
				//Nishant space ends
	
	insertPrepStmtObject.setSql(bufInsSql.toString());
	logger.info("IN saveNoOfDisb()del insert query1 ### "+insertPrepStmtObject.printQuery());
	qryList.add(insertPrepStmtObject);
	checkQ=null;
	bufInsSql=null;
}


	status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
	
	checkQ=null;
	bufInsSql=null;
	count=null;
	
} catch (Exception e) {
	e.printStackTrace();
}
logger.info("In saveNoOfDisb......................"+status);
return status;
}
@Override
public ArrayList getDealDisbScheduleList(String dealId) {
	ArrayList<Object> list=new ArrayList<Object>();
	
	try{
		StringBuilder query=new StringBuilder();
    query.append("select DISBURSAL_NO,PROPOSED_DISBURSAL_AMOUNT,DISBURSAL_DESCRIPTION,");
    query.append(dbo);
    query.append("DATE_FORMAT(PROPOSED_DISBURSAL_DATE,'"+dateFormat+"'),PAYMENT_TYPE,FAVOURING,INSTRUMENT_MODE,a.BANK_ID,b.BANK_NAME");
    query.append(" from cr_deal_disbursalsch_dtl a left join com_bank_m b on a.BANK_ID=b.BANK_ID  where DEAL_ID="+dealId);
		
	logger.info("getDealDisbScheduleList Queryl: "+query.toString());
	
	DealDisbursalVo nVo = null;
	ArrayList disbdeatail = ConnectionDAO.sqlSelect(query.toString());
	logger.info("getDealDisbScheduleList OUTER ARRAYLIST SIZE: "+disbdeatail.size());
	for(int i=0;i<disbdeatail.size();i++){

		logger.info("getDealDisbScheduleList"+disbdeatail.get(i).toString());
		ArrayList disbdeatail1=(ArrayList)disbdeatail.get(i);
		logger.info("getDealDisbScheduleList INNNER ARRAYLIST SIZE: "+disbdeatail1.size());
		if(disbdeatail1.size()>0)
		{
			nVo = new DealDisbursalVo();
		
			nVo.setNoOfDisb((CommonFunction.checkNull(disbdeatail1.get(0))).trim());
			if(!CommonFunction.checkNull(disbdeatail1.get(1)).equalsIgnoreCase(""))	
 			{
 				Number amountOfDisb =myFormatter.parse((CommonFunction.checkNull(disbdeatail1.get(1))).trim());
 				nVo.setAmountOfDisb(myFormatter.format(amountOfDisb));
 			}
				    
			nVo.setDescOfDisb((CommonFunction.checkNull(disbdeatail1.get(2))).trim());
			nVo.setDateOfDisb((CommonFunction.checkNull(disbdeatail1.get(3))).trim());
			//Nishant space starts
			nVo.setPaymentType((CommonFunction.checkNull(disbdeatail1.get(4))).trim());//PAYMENT_TYPE
			nVo.setFavouring((CommonFunction.checkNull(disbdeatail1.get(5))).trim());//FAVOURING
			nVo.setInstrumentMode((CommonFunction.checkNull(disbdeatail1.get(6))).trim());//INSTRUMENT_MODE
			if(CommonFunction.checkNull(disbdeatail1.get(6)).trim().equalsIgnoreCase("Q")){ 	    		
			  nVo.setLbxInstrumentMode("B");
			} 		  
			else if(CommonFunction.checkNull(disbdeatail1.get(6)).trim().equalsIgnoreCase("D")){ 	    		
			  nVo.setLbxInstrumentMode("B");
			} 
			else if(CommonFunction.checkNull(disbdeatail1.get(6)).trim().equalsIgnoreCase("N")){ 	    		
			  nVo.setLbxInstrumentMode("B");
			} 
			else if(CommonFunction.checkNull(disbdeatail1.get(6)).trim().equalsIgnoreCase("R")){ 	    		
			  nVo.setLbxInstrumentMode("B");
			} 
			else if(CommonFunction.checkNull(disbdeatail1.get(6)).trim().equalsIgnoreCase("S")){ 	    		
			  nVo.setLbxInstrumentMode("S");
			} 
			else{
			  nVo.setLbxInstrumentMode((CommonFunction.checkNull(disbdeatail1.get(6))).trim());	
			}
			nVo.setLbxbankAccountID((CommonFunction.checkNull(disbdeatail1.get(7))).trim());//BANK_ID
			nVo.setBankAccount((CommonFunction.checkNull(disbdeatail1.get(8))).trim());//BANK_NAME
			//Nishant space ends
			list.add(nVo);
		}
	}
	query=null;
	}catch(Exception e){
		e.printStackTrace();
	}
	return list;
}
@Override
public String updateSpecialConditionRemarks(SpecialConditionVo vo) {
	
	qryList=new ArrayList();
	qryList1=new ArrayList();;
	String [] specialDealId=vo.getChk();
	String  remarks=vo.getSpecRemark();
	String  specCondStatus=vo.getSpecConditionStatus();
	
	String remarksList[]=null;
	String specStatusList[]=null;
	
	remarksList=remarks.split("\\|");
	
	
	specStatusList=specCondStatus.split("\\|");
	String res="E";
	PrepStmtObject insertPrepStmtObject=null;
	StringBuilder bufInsSql=null;
	if(specialDealId.length>0)
	{
		StringBuilder qry=new StringBuilder();
		qry.append("DELETE FROM cr_loan_special_condition_dtl WHERE LOAN_ID='"+vo.getLoanId()+"' AND (LOAN_DISBURSAL_ID='"+(CommonFunction.checkNull(vo.getLoanDisbursalId()).trim())+ "' OR LOAN_DISBURSAL_ID IS NULL)");
		logger.info("delete query: "+qry.toString());
		qryList1.add(qry.toString());
		try {
			ConnectionDAO.sqlInsUpdDelete(qryList1);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		qry=null;
		for(int k=0;k<specialDealId.length;k++)
		{
			insertPrepStmtObject=new PrepStmtObject();
			
			bufInsSql =	new StringBuilder();
			bufInsSql.append("insert into cr_loan_special_condition_dtl(LOAN_ID,LOAN_DISBURSAL_ID,DEAL_SPECIAL_CONDITION_ID,SPECIAL_REMARKS,REC_STATUS,MAKER_ID,MAKER_DATE,SPECIAL_STATUS) values(?,?,?,?,?,?,");
			bufInsSql.append(dbo);
			bufInsSql.append("STR_TO_DATE(?,'"+dateFormat+"'),");
			bufInsSql.append("?)");
			
			if(CommonFunction.checkNull(vo.getLoanId()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(vo.getLoanId().trim());   // LOAN_ID
			
			if(CommonFunction.checkNull(vo.getLoanDisbursalId()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(vo.getLoanDisbursalId().trim()); //LOAN_DISBURSAL_ID
			
			if(CommonFunction.checkNull(specialDealId[k]).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(specialDealId[k].trim());// DEAL_SPECIAL_CONDITION_ID
			
			
				if(CommonFunction.checkNull(remarksList[k]).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(remarksList[k].trim());// SPECIAL_REMARKS
			
			
			   insertPrepStmtObject.addString("P");// REC_STATUS
				
			   if(CommonFunction.checkNull(vo.getMakerId()).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(vo.getMakerId().trim()); //LOAN_DISBURSAL_ID
			   if(CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
				   insertPrepStmtObject.addString(vo.getMakerDate().trim()); //maker_date
			   
				if(CommonFunction.checkNull(specStatusList[k]).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(specStatusList[k].trim());// SPECIAL_STATUS				
			
	
	
	insertPrepStmtObject.setSql(bufInsSql.toString());
	logger.info("IN saveNoOfDisb()del insert query1 ### "+insertPrepStmtObject.printQuery());
	qryList.add(insertPrepStmtObject);
		}
	}
	boolean status=false;
	try {
		status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
	} catch (Exception e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
    logger.info("In updateSpecialCondition STATUS......................"+status);
	if(status)
	{
    	res="S";
     }
	
	return res;

}
//sachin
public ArrayList getShowSpecialConditionList(String loanId) {
	
	ArrayList<Object> list=new ArrayList<Object>();
	try{
		StringBuilder qry = new StringBuilder();
		StringBuilder query=new StringBuilder();
		SpecialConditionVo vo=null;
		qry.append("select 1 from cr_loan_special_condition_dtl where loan_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim()+"'");
		boolean chk = ConnectionDAO.checkStatus(qry.toString());
		if (chk)
		{
			query.append(" SELECT D.DEAL_SPECIAL_CONDITION_ID,D.DEAL_SPECIAL_CONDITION,D.DEAL_SPECIAL_CATEGORY,L.SPECIAL_REMARKS,L.SPECIAL_STATUS from cr_deal_special_condition_m d ");
			query.append(" inner JOIN cr_loan_special_condition_dtl L ON L.DEAL_SPECIAL_CONDITION_ID=D.DEAL_SPECIAL_CONDITION_ID ");
			query.append(" where loan_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim()+"'");
		}
		else
		{
			query.append(" SELECT D.DEAL_SPECIAL_CONDITION_ID,D.DEAL_SPECIAL_CONDITION,D.DEAL_SPECIAL_CATEGORY,L.SPECIAL_REMARKS,L.SPECIAL_STATUS from cr_deal_special_condition_m d ");
			query.append(" LEFT JOIN cr_loan_special_condition_dtl L ON L.DEAL_SPECIAL_CONDITION_ID=D.DEAL_SPECIAL_CONDITION_ID ");
			query.append(" where deal_id=(select loan_deal_id from cr_loan_dtl where loan_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim()+"')");
		}
	 
	logger.info("getSpecialConditionList Queryl: "+query.toString());

	ArrayList detail = ConnectionDAO.sqlSelect(query.toString());
	logger.info("getSpecialConditionList OUTER ARRAYLIST SIZE: "+detail.size());
	
	
	
	for(int i=0;i<detail.size();i++){

		logger.info("getSpecialConditionList"+detail.get(i).toString());
		ArrayList subDetail=(ArrayList)detail.get(i);
		if(subDetail.size()>0)
		{
			logger.info("getSpecialConditionList INNNER ARRAYLIST SIZE: "+subDetail.size());
			vo = new SpecialConditionVo();
			vo.setSpecialDealId((CommonFunction.checkNull(subDetail.get(0))).trim());
			vo.setSpecialCondition((CommonFunction.checkNull(subDetail.get(1))).trim());
			vo.setSpecialCategory((CommonFunction.checkNull(subDetail.get(2))).trim());
			vo.setSpecialRemarks((CommonFunction.checkNull(subDetail.get(3))).trim());
			vo.setSpecConditionStatusCode((CommonFunction.checkNull(subDetail.get(4))).trim());
			list.add(vo);
		}
		query=null;
	}

	}catch(Exception e){
		e.printStackTrace();
	}
	return list;
}
//start by sachin
@Override
public ArrayList getUnderWriterDealDetail(String txnid,String userId) {
	ArrayList list=new ArrayList();
	CommonDealVo fetchVo= new CommonDealVo();
	try
	{
				
		ArrayList header=null;
		int count=0;
		int startRecordIndex=0;
		int endRecordIndex = no;
		
		boolean appendSQL=false;
		StringBuffer bufInsSql=new StringBuffer();
		
		bufInsSql.append(" SELECT USER_NAME,LEVEL,BRANCH_DESC,APPROVAL_BY,APPROVAL_DECISION,APPROVAL_REMARKS FROM UNDER_WRITER_USERS_TEMP_QUEUE WHERE USER_ID='"+CommonFunction.checkNull(userId)+"'");
		 logger.info("query : "+bufInsSql.toString());
	     header = ConnectionDAO.sqlSelect(bufInsSql.toString());
	     bufInsSql=null;
	    
	     
	   int size=header.size();
					
		for(int i=0;i<size;i++){

			ArrayList header1=(ArrayList)header.get(i);
			if(header1!=null && header1.size()>0)
			{
				
				fetchVo = new CommonDealVo();
				fetchVo.setUserName((CommonFunction.checkNull(header1.get(0))).trim());
				fetchVo.setLevel((CommonFunction.checkNull(header1.get(1))).trim());
				fetchVo.setBranchDesc((CommonFunction.checkNull(header1.get(2))).trim());
				fetchVo.setApprovalBy((CommonFunction.checkNull(header1.get(3))).trim());
				fetchVo.setApprovalDecision((CommonFunction.checkNull(header1.get(4))).trim());
				fetchVo.setApprovalRemark((CommonFunction.checkNull(header1.get(5))).trim());
			    fetchVo.setTotalRecordSize(count);
				list.add(fetchVo);
			}
		}
		fetchVo=null;
		
		
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
	return list;
}


public ArrayList getDeviationDealDetail(String txnid) {
	ArrayList list=new ArrayList();
	CommonDealVo fetchVo= new CommonDealVo();
	try
	{
				
		ArrayList header=null;
		int count=0;		
		boolean appendSQL=false;
		StringBuffer bufInsSql=new StringBuffer();
		
		
		    bufInsSql.append(" select distinct t.USER_NAME,ua.LEVEL,B.BRANCH_DESC from cr_deal_dtl d ");
			bufInsSql.append(" INNER join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
			bufInsSql.append(" INNER join com_branch_m b on d.DEAL_BRANCH=b.BRANCH_ID     ");
			bufInsSql.append(" INNER join cr_policy_decision md  on d.DEAL_ID=md.DEAL_ID  and  md.REC_STATUS in('I','P')   ");
			bufInsSql.append(" INNER JOIN cr_user_approval_m ua ON ua.USER_ROLE='P' AND md.APPROVAL_LEVEL=ua.LEVEL AND ua.REC_STATUS='A'   ");						
		    bufInsSql.append(" INNER JOIN SEC_USER_M t on t.USER_ID=UA.USER_ID  ");
		    bufInsSql.append(" INNER JOIN sec_user_branch_dtl a ON a.USER_ID= UA.USER_ID AND a.BRANCH_ID=d.DEAL_BRANCH  ");
			bufInsSql.append(" WHERE  D.DEAL_ID='"+CommonFunction.checkNull(txnid).trim()+"'");
			
		 logger.info("query : "+bufInsSql.toString());
	     header = ConnectionDAO.sqlSelect(bufInsSql.toString());
	     
	     bufInsSql=null;
	 					
		  for(int i=0;i<header.size();i++){
		
			ArrayList header1=(ArrayList)header.get(i);
			if(header1!=null && header1.size()>0)
			{
				
				fetchVo = new CommonDealVo();		
				fetchVo.setUserName((CommonFunction.checkNull(header1.get(0))).trim());
				fetchVo.setLevel((CommonFunction.checkNull(header1.get(1))).trim());
				fetchVo.setBranchDesc((CommonFunction.checkNull(header1.get(2))).trim());				
				fetchVo.setTotalRecordSize(count);
				list.add(fetchVo);
			}
		}		
		 logger.info("getTotalRecordSize : "+fetchVo.getTotalRecordSize());
		
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}

	 logger.info("Detail List when searchList is : "+list);

	return list;

//end by sachin
}

@Override
public String checkAssetVerifInit(String[] id, String dealId) {
	
	logger.info("checkAssetVerifInit for checkAssetVerifInit....assetid.."+id+" dealId "+dealId);
	String status = "";
	try
	{
 	


	for(int k=0;k<id.length;k++)
	{
		
		String checkVerifInitQuery="SELECT A.ASSET_COLLATERAL_DESC FROM cr_asset_collateral_m A " +
										" INNER JOIN cr_deal_verification_dtl  V ON V.DEAL_ID='"+dealId+"' AND V.ENTITY_TYPE=A.ASSET_COLLATERAL_CLASS AND V.ENTITY_SUB_TYPE=A.ASSET_TYPE AND A.ASSET_ID=V.ENTITY_ID" +
										" WHERE A.ASSET_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()+"' ";
		logger.info("checkVerifInitQuery: "+checkVerifInitQuery);
		status=ConnectionDAO.singleReturn(checkVerifInitQuery);
		logger.info("A.ASSET_COLLATERAL_DESC "+status);
		if(!CommonFunction.checkNull(status).equalsIgnoreCase(""))
		{
			return status;
		}
		
	
	}
	
    }
	catch(Exception e)
	{
	e.printStackTrace();
}
return status;
}
@Override
public boolean deleteVerificationInitAsset(String commonId, String[] id,String type) {
	
	logger.info("deleteVerificationInitAsset for deleteVerificationInitAsset....roleId.."+id+" dealId "+commonId);
	boolean status = false;
	ArrayList qryList=null;
	StringBuffer bufInsUpdSql=null;
	
	try
	{
 	qryList = new ArrayList();
	bufInsUpdSql = new StringBuffer();

	for(int k=0;k<id.length;k++)
	{
		if(CommonFunction.checkNull(type).equalsIgnoreCase("D"))
		{
			String updateFVIMovementQuery="update cr_deal_movement_dtl m set DEAL_FORWARDED = NULL ,DEAL_FORWARD_USER='' where m.DEAL_STAGE_ID='FVI' AND M.REC_STATUS='A' and m.DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()+"'";
			logger.info("updateFVIMovementQuery q1 "+updateFVIMovementQuery);
			qryList.add(updateFVIMovementQuery);
		
			String verifIdQuery="select VERIFICATION_ID from cr_deal_verification_dtl V " +
							    " INNER JOIN cr_asset_collateral_m A ON A.ASSET_COLLATERAL_CLASS=V.ENTITY_TYPE AND A.ASSET_TYPE=V.ENTITY_SUB_TYPE AND A.ASSET_ID=V.ENTITY_ID" +
					            " WHERE  V.ENTITY_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()+"' AND V.DEAL_ID= '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()+"'";
			logger.info("verifIdQuery  "+verifIdQuery);
			String verifId=ConnectionDAO.singleReturn(verifIdQuery);
			logger.info("verifId  "+verifId);
			
			String deleteVerifCapturing="delete from cr_field_verification_dtl  where VERIFICATION_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(verifId)).trim()+"' ";
			logger.info("delete deleteVerifCapturing q2 "+deleteVerifCapturing);
			qryList.add(deleteVerifCapturing);
			
			String deleteVerification="delete from cr_deal_verification_dtl where VERIFICATION_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(verifId)).trim()+"' ";
			logger.info("delete deleteVerification q3 "+deleteVerification);
			qryList.add(deleteVerification);
		}
		else
		{
			String verifIdQuery="select VERIFICATION_ID from cr_deal_verification_dtl V " +
		    " INNER JOIN cr_asset_collateral_m A ON A.ASSET_COLLATERAL_CLASS=V.ENTITY_TYPE AND A.ASSET_TYPE=V.ENTITY_SUB_TYPE AND A.ASSET_ID=V.ENTITY_ID" +
            " WHERE  V.ENTITY_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()+"' AND V.LOAN_ID= '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()+"'";
			logger.info("verifIdQuery  "+verifIdQuery);
			String verifId=ConnectionDAO.singleReturn(verifIdQuery);
			logger.info("verifId  "+verifId);
			
			String deleteVerifCapturing="delete from cr_field_verification_dtl  where VERIFICATION_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(verifId)).trim()+"' ";
			logger.info("delete deleteVerifCapturing q2 "+deleteVerifCapturing);
			qryList.add(deleteVerifCapturing);
			
			String deleteVerification="delete from cr_deal_verification_dtl where VERIFICATION_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(verifId)).trim()+"' ";
			logger.info("delete deleteVerification q3 "+deleteVerification);
			qryList.add(deleteVerification);
			
		}
		
	
	}
	            
	status=ConnectionDAO.sqlInsUpdDelete(qryList);
	logger.info("Status of Deletion is ="+status);
    }
	catch(Exception e)
	{
	e.printStackTrace();
}
return status;
}
@Override
public String checkBuyerVerifInit(String[] id, String dealId, String bptype) {
	
	
	logger.info("checkBuyerVerifInit for checkBuyerVerifInit....buyerid.."+id+" dealId "+dealId);
	String status = "";
	try
	{
 	
	for(int k=0;k<id.length;k++)
	{
		
		String checkVerifInitQuery="SELECT A.DEAL_BUYER_SUPPLIER_NAME FROM cr_deal_buyer_supplier_dtl A " +
										" INNER JOIN cr_deal_verification_dtl  V ON V.DEAL_ID=A.DEAL_ID AND V.ENTITY_TYPE='BUYER' AND A.DEAL_BUYER_SUPPLIER_ID=V.ENTITY_ID" +
										" WHERE A.DEAL_BUYER_SUPPLIER_TYPE='"+bptype+"' AND A.DEAL_BUYER_SUPPLIER_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()+"' AND A.DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' ";
		logger.info("checkVerifInitQuery: "+checkVerifInitQuery);
		status=ConnectionDAO.singleReturn(checkVerifInitQuery);
		logger.info("A.DEAL_BUYER_SUPPLIER_NAME "+status);
		if(!CommonFunction.checkNull(status).equalsIgnoreCase(""))
		{
			return status;
		}
		
	
	}
	
    }
	catch(Exception e)
	{
	e.printStackTrace();
}
return status;
}
@Override
public boolean deleteVerificationInitBuyer(String dealId, String[] id,String bptype) {
	
	
	logger.info("deleteVerificationInitBuyer for deleteVerificationInitBuyer....roleId.."+id+" dealId "+dealId);
	boolean status = false;
	ArrayList qryList=null;
	StringBuffer bufInsUpdSql=null;
	
	try
	{
 	qryList = new ArrayList();
	bufInsUpdSql = new StringBuffer();


	for(int k=0;k<id.length;k++)
	{
		
		String updateFVIMovementQuery="update cr_deal_movement_dtl m set DEAL_FORWARDED = NULL,DEAL_FORWARD_USER='' where m.DEAL_STAGE_ID='FVI' AND M.REC_STATUS='A' and m.DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"'";
		logger.info("updateFVIMovementQuery q1 "+updateFVIMovementQuery);
		qryList.add(updateFVIMovementQuery);
		
		String verifIdQuery="select VERIFICATION_ID from cr_deal_verification_dtl V " +
						    " INNER JOIN cr_deal_buyer_supplier_dtl A ON V.ENTITY_TYPE='BUYER' AND A.DEAL_BUYER_SUPPLIER_ID=V.ENTITY_ID AND A.DEAL_ID=V.DEAL_ID AND A.DEAL_BUYER_SUPPLIER_TYPE='B'" +
				            " WHERE  V.ENTITY_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()+"' AND V.DEAL_ID= '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"'";
		logger.info("verifIdQuery  "+verifIdQuery);
		String verifId=ConnectionDAO.singleReturn(verifIdQuery);
		logger.info("verifId  "+verifId);
		
		String deleteVerifCapturing="delete from cr_field_verification_dtl  where VERIFICATION_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(verifId)).trim()+"' ";
		logger.info("delete deleteVerifCapturing q2 "+deleteVerifCapturing);
		qryList.add(deleteVerifCapturing);
		
		String deleteVerification="delete from cr_deal_verification_dtl where VERIFICATION_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(verifId)).trim()+"' ";
		logger.info("delete deleteVerification q3 "+deleteVerification);
		qryList.add(deleteVerification);


	}
	            
	status=ConnectionDAO.sqlInsUpdDelete(qryList);
	logger.info("Status of Deletion is ="+status);
    }
	catch(Exception e)
	{
	e.printStackTrace();
}
return status;

}
@Override
public String checkSupplierVerifInit(String[] id, String dealId, String bptype) {
	logger.info("checkSupplierVerifInit for checkSupplierVerifInit....buyerid.."+id+" dealId "+dealId);
	String status = "";
	try
	{
 	
	for(int k=0;k<id.length;k++)
	{
		
		String checkVerifInitQuery="SELECT A.DEAL_BUYER_SUPPLIER_NAME FROM cr_deal_buyer_supplier_dtl A " +
										" INNER JOIN cr_deal_verification_dtl  V ON V.DEAL_ID=A.DEAL_ID AND V.ENTITY_TYPE='SUPPLIER' AND A.DEAL_BUYER_SUPPLIER_ID=V.ENTITY_ID" +
										" WHERE A.DEAL_BUYER_SUPPLIER_TYPE='S' AND A.DEAL_BUYER_SUPPLIER_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()+"' AND A.DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' ";
		logger.info("checkVerifInitQuery: "+checkVerifInitQuery);
		status=ConnectionDAO.singleReturn(checkVerifInitQuery);
		logger.info("A.DEAL_BUYER_SUPPLIER_NAME "+status);
		if(!CommonFunction.checkNull(status).equalsIgnoreCase(""))
		{
			return status;
		}
		
	
	}
	
    }
	catch(Exception e)
	{
	e.printStackTrace();
}
return status;
}
@Override
public boolean deleteVerificationInitSupplier(String dealId, String[] id,
		String bptype) {
	logger.info("deleteVerificationInitSupplier for deleteVerificationInitSupplier....roleId.."+id+" dealId "+dealId);
	boolean status = false;
	ArrayList qryList=null;
	StringBuffer bufInsUpdSql=null;
	
	try
	{
 	qryList = new ArrayList();
	bufInsUpdSql = new StringBuffer();


	for(int k=0;k<id.length;k++)
	{
		
		String updateFVIMovementQuery="update cr_deal_movement_dtl m set DEAL_FORWARDED = NULL,DEAL_FORWARD_USER='' where m.DEAL_STAGE_ID='FVI' AND M.REC_STATUS='A' and m.DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"'";
		logger.info("updateFVIMovementQuery q1 "+updateFVIMovementQuery);
		qryList.add(updateFVIMovementQuery);
		
		String verifIdQuery="select VERIFICATION_ID from cr_deal_verification_dtl V " +
						    " INNER JOIN cr_deal_buyer_supplier_dtl A ON V.ENTITY_TYPE='SUPPLIER' AND A.DEAL_BUYER_SUPPLIER_ID=V.ENTITY_ID AND A.DEAL_ID=V.DEAL_ID AND A.DEAL_BUYER_SUPPLIER_TYPE='S'" +
				            " WHERE  V.ENTITY_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()+"' AND V.DEAL_ID= '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"'";
		logger.info("verifIdQuery  "+verifIdQuery);
		String verifId=ConnectionDAO.singleReturn(verifIdQuery);
		logger.info("verifId  "+verifId);
		
		String deleteVerifCapturing="delete from cr_field_verification_dtl  where VERIFICATION_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(verifId)).trim()+"' ";
		logger.info("delete deleteVerifCapturing q2 "+deleteVerifCapturing);
		qryList.add(deleteVerifCapturing);
		
		String deleteVerification="delete from cr_deal_verification_dtl where VERIFICATION_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(verifId)).trim()+"' ";
		logger.info("delete deleteVerification q3 "+deleteVerification);
		qryList.add(deleteVerification);


	}
	            
	status=ConnectionDAO.sqlInsUpdDelete(qryList);
	logger.info("Status of Deletion is ="+status);
    }
	catch(Exception e)
	{
	e.printStackTrace();
}
return status;

}
@Override
public boolean deleteMarketVerif(String dealId) {
	
	boolean status=false;
	String countBuyerSupplierQuery="select count(1) from cr_deal_buyer_supplier_dtl where deal_id='"+dealId+"'";
	logger.info("count countBuyerSupplierQuery q1 "+countBuyerSupplierQuery);
	String countBuyerSupplier=ConnectionDAO.singleReturn(countBuyerSupplierQuery);
	logger.info("count countBuyerSupplier  "+countBuyerSupplier);
	ArrayList qryList=new ArrayList();
	try
	{
	if(CommonFunction.checkNull(countBuyerSupplier).equalsIgnoreCase("0"))
	{
		
		String verifIdQuery="select VERIFICATION_ID from cr_deal_verification_dtl V " +
	                        " WHERE  V.ENTITY_TYPE='MARKET' AND V.DEAL_ID= '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"'";
		logger.info("verifIdQuery  "+verifIdQuery);
		String verifId=ConnectionDAO.singleReturn(verifIdQuery);
		logger.info("verifId  "+verifId);
		
		String deleteVerifCapturing="delete from cr_field_verification_dtl  where DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(verifId)).trim()+"' ";
		logger.info("delete deleteVerifCapturing q2 "+deleteVerifCapturing);
		qryList.add(deleteVerifCapturing);
		
		String deleteVerification="delete from cr_deal_verification_dtl where DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(verifId)).trim()+"' ";
		logger.info("delete deleteVerification q3 "+deleteVerification);
		qryList.add(deleteVerification);
	}
	status=ConnectionDAO.sqlInsUpdDelete(qryList);
	logger.info("Status of Deletion is ="+status);
	}
	catch(Exception e)
	{
	e.printStackTrace();
}
	// TODO Auto-generated method stub
	return status;
}
public boolean checkUploadFeasibilityCM(String dealId)
{
	boolean status=false;
	try
	{
		logger.info("In checkUploadFeasibilityCM()..........................DAOImpl");
		StringBuilder noOfDocument=new StringBuilder();
		int limitOfUploadDocument=0;
		noOfDocument.append("select PARAMETER_VALUE from PARAMETER_MST  where PARAMETER_KEY='NUMBER_OF_DOCUMENT_UPLOAD'");
		String uploadDocument=(String)ConnectionDAO.singleReturn(noOfDocument.toString());
		if(!CommonFunction.checkNull(uploadDocument).equalsIgnoreCase(""))
		{
			limitOfUploadDocument=Integer.parseInt(uploadDocument);
		}
		else
		{
			limitOfUploadDocument=0;
		}
		noOfDocument=null;
		String strReturn=null;
		int count=0;
		StringBuilder query=new StringBuilder();
		 query.append("select count(txn_id) from cr_uploaded_documents where txn_id='"+dealId+"' and txn_type='LIM'");
		logger.info("In check Upload Feasibility...............query...........DAOImpl "+query);
		Connection conn= ConnectionDAO.getConnection();
		Statement stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(query.toString());
		if (rs.next()) {
            strReturn = rs.getString(1);
        }
		count=Integer.parseInt(strReturn);
		conn.close();
		if(count<limitOfUploadDocument)
		{
			status=true;
		}
		else if(count>=limitOfUploadDocument)
		{
			status=false;
		}
		logger.info("Resultset value====  "+count);
		
		query=null;
		
	}catch(Exception e){
		e.printStackTrace();
	}
	return status;
}
@Override
public ArrayList<ApplicantTypeVO> getCustRoleAtCMList() {
	
	ArrayList<ApplicantTypeVO> list=new ArrayList<ApplicantTypeVO>();
	ArrayList applicantList = null;
	ArrayList subList = null;
	try{
		StringBuffer query =	new StringBuffer();
	 query.append("SELECT VALUE,DESCRIPTION FROM generic_master  "
        		+"where GENERIC_KEY='CUST_ROLE' and REC_STATUS='A' AND VALUE<>'PRAPPL' order by DESCRIPTION  ");
		logger.info("In getApplicantList......query: "+query.toString());
	 applicantList = ConnectionDAO.sqlSelect(query.toString());
	query=null;
	for(int i=0;i<applicantList.size();i++){
		subList=(ArrayList)applicantList.get(i);
		logger.info("In getApplicantList......sublist size: "+subList.size());
		if(subList.size()>0){
			ApplicantTypeVO av=new ApplicantTypeVO();
		    av.setApplicant_code((CommonFunction.checkNull(subList.get(0))).trim());
			av.setApplicant_desc((CommonFunction.checkNull(subList.get(1))).trim());
			list.add(av);
		}

	}
	}catch(Exception e){
		e.printStackTrace();
	}
	return list;
}
@Override
public ArrayList<Object> searchCustomerLinkAtCM(LinkCustomerVo vo) {
	
	logger.info("In searchCustomerLinkAtCM");

	 ArrayList<Object> list=new ArrayList<Object>();
	ArrayList<Object> deatilList=new ArrayList<Object>();
	 LinkCustomerVo appl=null;
	 
	 StringBuilder tableName=new StringBuilder();
	 String loanNo="";
	 tableName.append("gcd_customer_m");

 try
 {
	   
		boolean appendSQL=false;
		StringBuffer bufInsSql=new StringBuffer();
		bufInsSql.append("select CUSTOMER_ID,CUSTOMER_NAME,CUSTOMER_CONSTITUTION,CUSTOMER_BUSINESS_SEGMENT,case when CUSTOMER_TYPE='I' then 'INDIVIDUAL' else 'CORPORATE' end ,LOAN_REFERENCE_NO,loan_no from gcd_customer_m left outer join cr_loan_dtl on(cr_loan_dtl.LOAN_CUSTOMER_ID=gcd_customer_m.CUSTOMER_ID) where CUSTOMER_STATUS='A'  ");
		
		if(!vo.getLbxcustomerId().trim().equalsIgnoreCase(""))
		   bufInsSql.append(" and CUSTOMER_ID='"+StringEscapeUtils.escapeSql(vo.getLbxcustomerId()).trim()+"'");
		if(!vo.getCustomerName().trim().equalsIgnoreCase(""))
			bufInsSql.append(" and CUSTOMER_NAME like '%"+StringEscapeUtils.escapeSql(vo.getCustomerName()).trim()+"%'");
		if(!vo.getPanNo().trim().equalsIgnoreCase(""))
		   	bufInsSql.append(" and CUSTMER_PAN='"+StringEscapeUtils.escapeSql(vo.getPanNo()).trim()+"'");
		if(!vo.getRegistrationNo().trim().equalsIgnoreCase(""))
		   	bufInsSql.append(" and CUSTOMER_REGISTRATION_NO='"+StringEscapeUtils.escapeSql(vo.getRegistrationNo()).trim()+"'");
	
		if(!vo.getLoanNO().trim().equalsIgnoreCase(""))
			bufInsSql.append(" and cr_loan_dtl.loan_id ='"+StringEscapeUtils.escapeSql(vo.getLoanID()).trim()+"'");
		if(!vo.getAppFormNo().trim().equalsIgnoreCase(""))
			bufInsSql.append(" and LOAN_REFERENCE_NO ='"+StringEscapeUtils.escapeSql(vo.getAppFormNo()).trim()+"'");
	

	
	 logger.info("searchApplicant() of CreditProcessingDAOImpl Query : "+bufInsSql.toString());
	  deatilList= ConnectionDAO.sqlSelect(bufInsSql.toString()); 
    bufInsSql=null;
    if(deatilList.size()>0){
    for(int i=0;i<deatilList.size();i++){
			logger.info("getApprovalData...FOR loop "+CommonFunction.checkNull(deatilList.get(i)).toString());
			ArrayList data=(ArrayList)deatilList.get(i);
			if(data.size()>0)	{
				appl = new LinkCustomerVo();
				
				appl.setCustomerId((CommonFunction.checkNull(data.get(0))).trim());
				
		
				appl.setCustomerName((CommonFunction.checkNull(data.get(1))).trim());
				
				appl.setConstitution((CommonFunction.checkNull(data.get(2))).trim());
				appl.setBusinessSegment((CommonFunction.checkNull(data.get(3))).trim());
				appl.setCustType((CommonFunction.checkNull(data.get(4))).trim());
				appl.setAppFormNo((CommonFunction.checkNull(data.get(5))).trim());
				appl.setLoanNO((CommonFunction.checkNull(data.get(6))).trim());				
				list.add(appl);
			}
    }
	}
	bufInsSql=null;
 }
 
    catch(Exception e){
		e.printStackTrace();
	}
    finally{
   	 tableName=null;
    }
	
	
	return list;
}
@Override
public boolean saveGuaranteeAmountAtCM(CreditProcessingCustomerEntryVo vo,String source) {
	
	
	CreditProcessingCustomerEntryVo creditVo = (CreditProcessingCustomerEntryVo)vo;
    
	boolean status=false;
	ArrayList qryList = new ArrayList();
	PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
	StringBuilder queryUpdate=new StringBuilder();
	String table="cr_loan_customer_role";
	if(CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
		table="cr_loan_customer_role_edit";
	queryUpdate.append("update "+table+" set GUARANTEE_AMOUNT=? where LOAN_CUSTOMER_ROLE_ID=?");
	PrepStmtObject prepStmt = new PrepStmtObject();
	
	 
	if((CommonFunction.checkNull(creditVo.getGuaranteeAmount())).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		try {
			insertPrepStmtObject.addString(myFormatter.parse((creditVo.getGuaranteeAmount()).trim()).toString());
		} catch (ParseException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
	if((CommonFunction.checkNull(creditVo.getId())).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((creditVo.getId()).trim());

	insertPrepStmtObject.setSql(queryUpdate.toString());
	logger.info("IN saveGuaranteeAmount() update query1 ### "+insertPrepStmtObject.printQuery());
	qryList.add(insertPrepStmtObject);
		
	try
	{
		status =ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
		logger.info("In saveGuaranteeAmount.........update status: "+status);
	}
	catch(Exception e){
		e.printStackTrace();
	}
	finally
	{
		queryUpdate=null;
	}
	logger.info("status in dao : "+status);
	return status;
}

//Quality check by Amit Starts 
public ArrayList<CommonDealVo> fetchQualityCheckDetail(CommonDealVo vo) {
		ArrayList<CommonDealVo> list=new ArrayList<CommonDealVo>();
		try
		{
			logger.info("vo.getStage(): "+vo.getStage());
			
			logger.info("Date Format: "+dateFormat);
			ArrayList header=null;
			int count=0;
			int startRecordIndex=0;
			int endRecordIndex = no;
			CommonDealVo fetchVo= (CommonDealVo) vo;
			boolean appendSQL=false;
			StringBuffer bufInsSql=new StringBuffer();
			StringBuffer bufInsSqlTempCount = new StringBuffer();
			StringBuilder dealId=new StringBuilder();
			StringBuilder appNo=new StringBuilder();
			StringBuilder appDate=new StringBuilder();
			StringBuilder custName=new StringBuilder();
			StringBuilder productId=new StringBuilder();
			
			 dealId.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim()));
			 appNo.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim()));
			 appDate.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim()));
			 custName.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim()));
			 productId.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim()));
					
		
		if(vo.getStage()!=null && vo.getStage().equalsIgnoreCase("F"))
		{
			bufInsSql.append("select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,n.DEAL_SANCTION_VALID_TILL ");
			bufInsSql.append("from cr_deal_dtl d");
			bufInsSqlTempCount.append(" select distinct count(1) FROM (select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,n.DEAL_SANCTION_VALID_TILL from cr_deal_dtl d ");
			
			bufInsSql.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
			bufInsSqlTempCount.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
			
			bufInsSql.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
			bufInsSqlTempCount.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
			
			bufInsSql.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
			bufInsSqlTempCount.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
			
			bufInsSql.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
			bufInsSqlTempCount.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
			
			bufInsSql.append("INNER JOIN cr_deal_movement_dtl M ON M.DEAL_ID=D.DEAL_ID AND M.DEAL_STAGE_ID='QC' AND M.DEAL_RECEIVED IS NOT NULL AND M.DEAL_FORWARDED IS NULL AND M.REC_STATUS='A'");
			bufInsSqlTempCount.append("INNER JOIN cr_deal_movement_dtl M ON M.DEAL_ID=D.DEAL_ID AND M.DEAL_STAGE_ID='QC' AND M.DEAL_RECEIVED IS NOT NULL AND M.DEAL_FORWARDED IS NULL AND M.REC_STATUS='A'");
						
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase(""))))
			{
		   	  bufInsSql.append("WHERE d.MAKER_ID<>'"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' AND   d.DEAL_BRANCH in (select branch_id from sec_user_branch_dtl b where b.BRANCH_ID=d.DEAL_BRANCH and b.REC_STATUS='A') and d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"' and d.deal_id not in (select qc.txn_id from cr_quality_check_dtl qc where qc.TXN_TYPE='DC' and DECISION='A') AND D.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' ");
		   	  bufInsSqlTempCount.append("WHERE d.MAKER_ID<>'"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' AND   d.DEAL_BRANCH in (select branch_id from sec_user_branch_dtl b where b.BRANCH_ID=d.DEAL_BRANCH and b.REC_STATUS='A') and d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"' and d.deal_id not in (select qc.txn_id from cr_quality_check_dtl qc where qc.TXN_TYPE='DC' and DECISION='A') AND D.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' ");
			}
			
			if((vo.getLbxDealNo().equalsIgnoreCase(""))||((vo.getApplicationno().equalsIgnoreCase("")))||((vo.getCustomername().equalsIgnoreCase("")))||((vo.getLbxProductID().equalsIgnoreCase("")))||((vo.getLbxscheme().equalsIgnoreCase("")))||((vo.getStage().equalsIgnoreCase("")))){
				appendSQL=true;
			}
			
			if(appendSQL){
				logger.info("In Where Clause");
				bufInsSql.append(" WHERE d.MAKER_ID<>'"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' AND   d.DEAL_BRANCH in (select branch_id from sec_user_branch_dtl b where b.BRANCH_ID=d.DEAL_BRANCH and b.REC_STATUS='A') and d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"' and d.deal_id not in (select qc.txn_id from cr_quality_check_dtl qc where qc.TXN_TYPE='DC' and DECISION='A') AND D.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' ");
				bufInsSqlTempCount.append(" WHERE d.MAKER_ID<>'"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' AND d.DEAL_BRANCH in (select branch_id from sec_user_branch_dtl b where b.BRANCH_ID=d.DEAL_BRANCH and b.REC_STATUS='A') and d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"' and d.deal_id not in (select qc.txn_id from cr_quality_check_dtl qc where qc.TXN_TYPE='DC' and DECISION='A') AND D.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' ");
			}
			 if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")))) {
		        bufInsSql.append("AND d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
		        bufInsSqlTempCount.append("AND d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
		   	 appendSQL=true;
		   	  
		     }
			 
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")))) {
		   	  bufInsSql.append("AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
		   	  bufInsSqlTempCount.append("AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
		   	  appendSQL=true;
		     }
			
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")))) {
		   	  bufInsSql.append("AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
		   	  bufInsSqlTempCount.append("AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
		   	  appendSQL=true;
		     }
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")))) {
			   	  bufInsSql.append("AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
			   	  bufInsSqlTempCount.append("AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
			   	  appendSQL=true;
			     }
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")))) {
			   	  bufInsSql.append("AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
			   	  bufInsSqlTempCount.append("AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
			   	  appendSQL=true;
			     }
			
			if((!(vo.getLbxDealNo().equalsIgnoreCase("")))||(!(vo.getApplicationno().equalsIgnoreCase("")))||(!(vo.getApplicationdate().equalsIgnoreCase("")))||(!(vo.getCustomername().equalsIgnoreCase("")))||(!(vo.getLbxProductID().equalsIgnoreCase("")))||(!(vo.getLbxscheme().equalsIgnoreCase("")))||(!(vo.getStage().equalsIgnoreCase("")))){
				bufInsSqlTempCount.append(") as b");
				appendSQL=true;
			}
			
			
			 count =Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
			 logger.info("bufInsSqlTempCount : "+bufInsSqlTempCount.toString());

			
			 logger.info("current PAge Link no .................... "+fetchVo.getCurrentPageLink());
			if(fetchVo.getCurrentPageLink()>1)
			{
				startRecordIndex = (fetchVo.getCurrentPageLink()-1)*no;
				endRecordIndex = no;
				 logger.info("startRecordIndex .................... "+startRecordIndex);
				 logger.info("endRecordIndex .................... "+endRecordIndex);
			}
			
			bufInsSql.append(" ORDER BY d.DEAL_ID OFFSET ");
			bufInsSql.append(startRecordIndex);
			bufInsSql.append(" ROWS FETCH next ");
			bufInsSql.append(endRecordIndex);
			bufInsSql.append(" ROWS ONLY ");
			logger.info("Search fetchQualityCheckDetail query for SQL SERVER : " + bufInsSql.toString());


			 logger.info("query : "+bufInsSql.toString());
		     header = ConnectionDAO.sqlSelect(bufInsSql.toString());
						
			for(int i=0;i<header.size();i++){
	
				ArrayList header1=(ArrayList)header.get(i);
				if(header1!=null && header1.size()>0)
				{
					
					fetchVo = new CommonDealVo();
	                if(CommonFunction.checkNull(vo.getQualityCheckStatus()).equalsIgnoreCase("N")){
	                	
	                	fetchVo.setChk("<input type=\"checkbox\" id=\"chk"+i+"\" name=\"chk\" value=\""+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+"\" />");
						fetchVo.setLbxDealNo("<a href=dealCapturing.do?method=leadEntryCapturing&dealId="+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+"&status=UWA>"+(CommonFunction.checkNull(header1.get(1)))+"</a>");
						fetchVo.setDealNo((CommonFunction.checkNull(header1.get(1))).trim());
						fetchVo.setApplicationno((CommonFunction.checkNull(header1.get(2))).trim());
						fetchVo.setCustomername((CommonFunction.checkNull(header1.get(3))).trim());
						fetchVo.setProduct((CommonFunction.checkNull(header1.get(4))).trim());
						fetchVo.setScheme((CommonFunction.checkNull(header1.get(5))).trim());
	     				fetchVo.setRemarks("<input type=\"text\" id=\"remarks"+i+"\" name=\"remarks\" value=\"\" class=\"text3\" maxlength=\"500\" ");
						fetchVo.setDecision("<select id=\"decision"+i+"\" name=\"decision\"><option value=\"A\">Approved</option><option value=\"X\">Send Back</option></select>");
						fetchVo.setSanctionValidTill("<input type='text' readonly='true' id='sanctionValidTill"+i+"' name='sanctionValidTill' value='"+CommonFunction.changeFormatJSP((CommonFunction.checkNull(header1.get(6))).trim())+"' class='text3' maxlength='500' ");
						fetchVo.setTotalRecordSize(count);
						list.add(fetchVo);
						
	                }
	                else
	                {
	                	fetchVo.setChk("<input type=\"checkbox\" id=\"chk"+i+"\" name=\"chk\" value=\""+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+"\" />");
	                	fetchVo.setLbxDealNo("<a href=dealCapturing.do?method=leadEntryCapturing&dealId="+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+">"+(CommonFunction.checkNull(header1.get(1)))+"</a>");
	                	fetchVo.setDealNo((CommonFunction.checkNull(header1.get(1))).trim());
						fetchVo.setApplicationno((CommonFunction.checkNull(header1.get(2))).trim());
						fetchVo.setCustomername((CommonFunction.checkNull(header1.get(3))).trim());
						fetchVo.setProduct((CommonFunction.checkNull(header1.get(4))).trim());
						fetchVo.setScheme((CommonFunction.checkNull(header1.get(5))).trim());
	     				fetchVo.setRemarks("<input type=\"text\" id=\"remarks"+i+"\" name=\"remarks\" value=\"\" class=\"text3\" maxlength=\"500\" ");
						fetchVo.setDecision("<select id=\"decision"+i+"\" name=\"decision\"><option value=\"A\">Approved</option><option value=\"X\">Send Back</option></select>");
						fetchVo.setSanctionValidTill("<input type='text' readonly='true' id='sanctionValidTill"+i+"' name='sanctionValidTill' value='"+CommonFunction.changeFormatJSP((CommonFunction.checkNull(header1.get(6))).trim())+"' class='text3' maxlength='500' ");
						fetchVo.setTotalRecordSize(count);
						list.add(fetchVo);
	                }
					
				}
			}
		}
		else if(vo.getStage()!=null && vo.getStage().equalsIgnoreCase("A"))
		{

			bufInsSql.append("select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,n.DEAL_SANCTION_VALID_TILL ");
			bufInsSql.append("from cr_deal_dtl d");
			bufInsSqlTempCount.append(" select distinct count(1) FROM (select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,n.DEAL_SANCTION_VALID_TILL from cr_deal_dtl d ");
			
			bufInsSql.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
			bufInsSqlTempCount.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
			
			bufInsSql.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
			bufInsSqlTempCount.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
			
			bufInsSql.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
			bufInsSqlTempCount.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
			
			bufInsSql.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
			bufInsSqlTempCount.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
			
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase(""))))
			{
		   	  bufInsSql.append("WHERE d.MAKER_ID<>'"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' AND   d.DEAL_BRANCH in (select branch_id from sec_user_branch_dtl b where b.BRANCH_ID=d.DEAL_BRANCH and b.REC_STATUS='A') and d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"' and d.deal_id not in (select qc.txn_id from cr_quality_check_dtl qc where qc.TXN_TYPE='LIM' and DECISION='A') AND D.DEAL_ID NOT IN (SELECT LOAN_DEAL_ID FROM CR_LOAN_DTL WHERE REC_STATUS IN ('P','F','A','C')) AND D.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"'");
		   	  bufInsSqlTempCount.append("WHERE d.MAKER_ID<>'"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' AND   d.DEAL_BRANCH in (select branch_id from sec_user_branch_dtl b where b.BRANCH_ID=d.DEAL_BRANCH and b.REC_STATUS='A') and d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"' and d.deal_id not in (select qc.txn_id from cr_quality_check_dtl qc where qc.TXN_TYPE='LIM' and DECISION='A') AND D.DEAL_ID NOT IN (SELECT LOAN_DEAL_ID FROM CR_LOAN_DTL WHERE REC_STATUS IN ('P','F','A','C')) AND D.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"'");
			}
			
			if((vo.getLbxDealNo().equalsIgnoreCase(""))||((vo.getApplicationno().equalsIgnoreCase("")))||((vo.getCustomername().equalsIgnoreCase("")))||((vo.getLbxProductID().equalsIgnoreCase("")))||((vo.getLbxscheme().equalsIgnoreCase("")))||((vo.getStage().equalsIgnoreCase("")))){
				appendSQL=true;
			}
			
			if(appendSQL){
				logger.info("In Where Clause");
				bufInsSql.append(" WHERE d.MAKER_ID<>'"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' AND   d.DEAL_BRANCH in (select branch_id from sec_user_branch_dtl b where b.BRANCH_ID=d.DEAL_BRANCH and b.REC_STATUS='A') and d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"' and d.deal_id not in (select qc.txn_id from cr_quality_check_dtl qc where qc.TXN_TYPE='LIM'  and DECISION='A') AND D.DEAL_ID NOT IN (SELECT LOAN_DEAL_ID FROM CR_LOAN_DTL WHERE REC_STATUS IN ('P','F','A','C')) AND D.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' ");
				bufInsSqlTempCount.append(" WHERE d.MAKER_ID<>'"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' AND d.DEAL_BRANCH in (select branch_id from sec_user_branch_dtl b where b.BRANCH_ID=d.DEAL_BRANCH and b.REC_STATUS='A') and d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"' and d.deal_id not in (select qc.txn_id from cr_quality_check_dtl qc where qc.TXN_TYPE='LIM' and DECISION='A') AND D.DEAL_ID NOT IN (SELECT LOAN_DEAL_ID FROM CR_LOAN_DTL WHERE REC_STATUS IN ('P','F','A','C')) AND D.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"'");
			}
			 if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")))) {
		        bufInsSql.append("AND d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
		        bufInsSqlTempCount.append("AND d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
		   	 appendSQL=true;
		   	  
		     }
			 
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")))) {
		   	  bufInsSql.append("AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
		   	  bufInsSqlTempCount.append("AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
		   	  appendSQL=true;
		     }
			
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")))) {
		   	  bufInsSql.append("AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
		   	  bufInsSqlTempCount.append("AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
		   	  appendSQL=true;
		     }
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")))) {
			   	  bufInsSql.append("AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
			   	  bufInsSqlTempCount.append("AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
			   	  appendSQL=true;
			     }
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")))) {
			   	  bufInsSql.append("AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
			   	  bufInsSqlTempCount.append("AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
			   	  appendSQL=true;
			     }
			
			if((!(vo.getLbxDealNo().equalsIgnoreCase("")))||(!(vo.getApplicationno().equalsIgnoreCase("")))||(!(vo.getApplicationdate().equalsIgnoreCase("")))||(!(vo.getCustomername().equalsIgnoreCase("")))||(!(vo.getLbxProductID().equalsIgnoreCase("")))||(!(vo.getLbxscheme().equalsIgnoreCase("")))||(!(vo.getStage().equalsIgnoreCase("")))){
				bufInsSqlTempCount.append(") as b");
				appendSQL=true;
			}
			
			
			 count =Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
			 logger.info("bufInsSqlTempCount : "+bufInsSqlTempCount.toString());
//			if((dealId.toString().trim()==null && appNo.toString().trim()==null && appDate.toString().trim()==null && custName.toString().trim()==null && productId.toString().trim()==null) || (dealId.toString().trim().equalsIgnoreCase("") && appNo.toString().trim().equalsIgnoreCase("") && appDate.toString().trim().equalsIgnoreCase("") && custName.toString().trim().equalsIgnoreCase("") && productId.toString().trim().equalsIgnoreCase("")) || fetchVo.getCurrentPageLink()>1)
//			{
			
			 logger.info("current PAge Link no .................... "+fetchVo.getCurrentPageLink());
			if(fetchVo.getCurrentPageLink()>1)
			{
				startRecordIndex = (fetchVo.getCurrentPageLink()-1)*no;
				endRecordIndex = no;
				 logger.info("startRecordIndex .................... "+startRecordIndex);
				 logger.info("endRecordIndex .................... "+endRecordIndex);
			}
			
			bufInsSql.append(" ORDER BY d.DEAL_ID OFFSET ");
			bufInsSql.append(startRecordIndex);
			bufInsSql.append(" ROWS FETCH next ");
			bufInsSql.append(endRecordIndex);
			bufInsSql.append(" ROWS ONLY ");
			logger.info("Search searchGenericMasterDao query for SQL SERVER : " + bufInsSql.toString());

			//bufInsSql.append(CommonFunction.betweenStartEnd(startRecordIndex, endRecordIndex));


			//query = query +" limit "+startRecordIndex+","+endRecordIndex;
//			}
			 logger.info("query : "+bufInsSql.toString());
		     header = ConnectionDAO.sqlSelect(bufInsSql.toString());
						
			for(int i=0;i<header.size();i++){
	
				ArrayList header1=(ArrayList)header.get(i);
				if(header1!=null && header1.size()>0)
				{
					
					fetchVo = new CommonDealVo();
					if(CommonFunction.checkNull(vo.getQualityCheckStatus()).equalsIgnoreCase("N")){
						
					fetchVo.setChk("<input type=\"checkbox\" id=\"chk"+i+"\" name=\"chk\" value=\""+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+"\" />");
					fetchVo.setLbxDealNo("<a href=dealCapturing.do?method=leadEntryCapturing&dealId="+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+"&status=UWA>"+(CommonFunction.checkNull(header1.get(1)))+"</a>");
					fetchVo.setDealNo((CommonFunction.checkNull(header1.get(1))).trim());
					fetchVo.setApplicationno((CommonFunction.checkNull(header1.get(2))).trim());
					fetchVo.setCustomername((CommonFunction.checkNull(header1.get(3))).trim());
					fetchVo.setProduct((CommonFunction.checkNull(header1.get(4))).trim());
					fetchVo.setScheme((CommonFunction.checkNull(header1.get(5))).trim());
					fetchVo.setRemarks("<input type=\"text\" id=\"remarks"+i+"\" name=\"remarks\" value=\"\" class=\"text3\" maxlength=\"500\" ");
					fetchVo.setDecision("<select id=\"decision"+i+"\" name=\"decision\"><option value=\"A\">Approved</option><option value=\"X\">Send Back</option></select>");
					fetchVo.setSanctionValidTill("<input type='text' readonly='true' id='sanctionValidTill"+i+"' name='sanctionValidTill' value='"+CommonFunction.changeFormatJSP((CommonFunction.checkNull(header1.get(6))).trim())+"' class='text3' maxlength='500' ");
					fetchVo.setTotalRecordSize(count);
					list.add(fetchVo);
					}
					else
					{
						fetchVo.setChk("<input type=\"checkbox\" id=\"chk"+i+"\" name=\"chk\" value=\""+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+"\" />");
	                	fetchVo.setLbxDealNo("<a href=dealCapturing.do?method=leadEntryCapturing&dealId="+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+">"+(CommonFunction.checkNull(header1.get(1)))+"</a>");
	                	fetchVo.setDealNo((CommonFunction.checkNull(header1.get(1))).trim());
						fetchVo.setApplicationno((CommonFunction.checkNull(header1.get(2))).trim());
						fetchVo.setCustomername((CommonFunction.checkNull(header1.get(3))).trim());
						fetchVo.setProduct((CommonFunction.checkNull(header1.get(4))).trim());
						fetchVo.setScheme((CommonFunction.checkNull(header1.get(5))).trim());
						fetchVo.setRemarks("<input type=\"text\" id=\"remarks"+i+"\" name=\"remarks\" value=\"\" class=\"text3\" maxlength=\"500\" ");
						fetchVo.setSanctionValidTill("<input type='text' readonly='true' id='sanctionValidTill"+i+"' name='sanctionValidTill' value='"+CommonFunction.changeFormatJSP((CommonFunction.checkNull(header1.get(6))).trim())+"' class='text3' maxlength='500' ");
						fetchVo.setDecision("<select id=\"decision"+i+"\" name=\"decision\"><option value=\"A\">Approved</option><option value=\"X\">Send Back</option></select>");
						fetchVo.setTotalRecordSize(count);
	                	
					}
					
				}
			}
		}
			
			 logger.info("getTotalRecordSize : "+fetchVo.getTotalRecordSize());
			 dealId=null;
			 appNo=null;
			 appDate=null;
			 custName=null;
			 productId=null;
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		logger.info("Detail List when searchList is : "+list);
		return list;
	}

public boolean saveQualityCheckDetails(String[] remarksArr, String[] dealIdArr, String[] decisionArr, String txnType, CommonDealVo vo)
{
	logger.info("Inside saveQualityCheckDealDetails method of CPDAOImpl");
	boolean flag = false;
	StringBuilder bufInsSql = null;
	PrepStmtObject insertPrepStmtObject = null;
	StringBuilder bufUpdSql = null;
	PrepStmtObject updPrepStmtObject = null;
	StringBuilder query1 = null;
	StringBuilder query2 = null;
	StringBuilder query3 = null;
	StringBuilder query4 = null;
	StringBuilder query5 = null;
	StringBuilder query6 = null;
	StringBuilder query7 = null;
	StringBuilder query8 = null;
	StringBuilder query9 = null;
	StringBuilder queryApp = null;
	PrepStmtObject updPrepStmtObject1 = null;
	PrepStmtObject updPrepStmtObject2 = null;
	PrepStmtObject updPrepStmtObject3 = null;
	PrepStmtObject updPrepStmtObject4 = null;
	PrepStmtObject updPrepStmtObject5 = null;
	PrepStmtObject updPrepStmtObject6 = null;
	PrepStmtObject updPrepStmtObject7 = null;
	PrepStmtObject updPrepStmtObject8 = null;
	PrepStmtObject updPrepStmtObject9 = null;
	PrepStmtObject updPrepStmtObjectApp = null;
	qryList = new ArrayList();
	try
	{
		for(int i=0;i<dealIdArr.length;i++) 
		{
			bufInsSql=new StringBuilder();
			insertPrepStmtObject = new PrepStmtObject();
			bufInsSql.append("insert into cr_quality_check_dtl(txn_id,txn_type,remarks,decision,maker_id,maker_date) ");
			bufInsSql.append("values(");
			bufInsSql.append("?,");
			bufInsSql.append("?,");
			bufInsSql.append("?,");
			bufInsSql.append("?,");
			bufInsSql.append("?,");
			//bufInsSql.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND) )" ); // MAKER_DATE
		    bufInsSql.append(dbo);
			bufInsSql.append(" STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9)) ");
			
			
			if (CommonFunction.checkNull(dealIdArr[i]).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(dealIdArr[i]).trim()));
			
			if (CommonFunction.checkNull(txnType).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(txnType).trim()));
			
			if (CommonFunction.checkNull(remarksArr[i]).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(remarksArr[i]).trim()));
			
			if (CommonFunction.checkNull(decisionArr[i]).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(decisionArr[i]).trim()));
			
			if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(vo.getUserId()).trim()));
			
			if (CommonFunction.checkNull(vo.getBusinessdate()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(vo.getBusinessdate()).trim()));
			
			insertPrepStmtObject.setSql(bufInsSql.toString());
			logger.info("IN saveQualityCheckDetails() insert query: "+insertPrepStmtObject.printQuery());
			qryList.add(insertPrepStmtObject);
			
//			Update Part
			bufUpdSql = new StringBuilder();
			updPrepStmtObject = new PrepStmtObject();
			
			if(txnType.equalsIgnoreCase("DC"))
			{
				bufUpdSql.append("update cr_deal_dtl set quality_check_dc_flag=?,quality_check_dc_date=");
				bufUpdSql.append(dbo);
				bufUpdSql.append("STR_TO_DATE(?, '"+dateFormat+"'),QUALITY_CHECK_DC_MAKER_ID=? where deal_id=?");
				
				if (CommonFunction.checkNull(decisionArr[i]).trim().equalsIgnoreCase(""))
					updPrepStmtObject.addNull();
				else
					updPrepStmtObject.addString((CommonFunction.checkNull(decisionArr[i]).trim()));
				
				if (CommonFunction.checkNull(vo.getBusinessdate()).trim().equalsIgnoreCase(""))
					updPrepStmtObject.addNull();
				else
					updPrepStmtObject.addString((CommonFunction.checkNull(vo.getBusinessdate()).trim()));
				
				if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
					updPrepStmtObject.addNull();
				else
					updPrepStmtObject.addString((CommonFunction.checkNull(vo.getUserId()).trim()));			
				
				
				if (CommonFunction.checkNull(dealIdArr[i]).trim().equalsIgnoreCase(""))
					updPrepStmtObject.addNull();
				else
					updPrepStmtObject.addString((CommonFunction.checkNull(dealIdArr[i]).trim()));
			}
			if(txnType.equalsIgnoreCase("LIM"))
			{
				bufUpdSql.append("update cr_deal_dtl set quality_check_cm_flag=?,quality_check_cm_date=");
				bufUpdSql.append(dbo);
				bufUpdSql.append("STR_TO_DATE(?, '"+dateFormat+"') where deal_id=?");
				
				if (CommonFunction.checkNull(decisionArr[i]).trim().equalsIgnoreCase(""))
					updPrepStmtObject.addNull();
				else
					updPrepStmtObject.addString((CommonFunction.checkNull(decisionArr[i]).trim()));
				
				if (CommonFunction.checkNull(vo.getBusinessdate()).trim().equalsIgnoreCase(""))
					updPrepStmtObject.addNull();
				else
					updPrepStmtObject.addString((CommonFunction.checkNull(vo.getBusinessdate()).trim()));
				
				if (CommonFunction.checkNull(dealIdArr[i]).trim().equalsIgnoreCase(""))
					updPrepStmtObject.addNull();
				else
					updPrepStmtObject.addString((CommonFunction.checkNull(dealIdArr[i]).trim()));
				
			}
			
			
			updPrepStmtObject.setSql(bufUpdSql.toString());
			logger.info("IN saveQualityCheckDetails() update query: "+updPrepStmtObject.printQuery());
			qryList.add(updPrepStmtObject);
			if(CommonFunction.checkNull(decisionArr[i]).equalsIgnoreCase("A") && txnType.equalsIgnoreCase("DC"))
			{
				String checkStageM=CommonFunction.stageMovement(vo.getCompanyId(),"DC","F",dealIdArr[i],"QC", vo.getBusinessdate(),CommonFunction.checkNull(vo.getUserId()));
				logger.info("checkStageM["+i+"]: "+checkStageM);
				
			}
			else if(CommonFunction.checkNull(decisionArr[i]).equalsIgnoreCase("X") && txnType.equalsIgnoreCase("DC"))
			{
				query1=new StringBuilder();
				query2=new StringBuilder();
				query3=new StringBuilder();
				query4=new StringBuilder();
				query5=new StringBuilder();
				query6=new StringBuilder();
								
				updPrepStmtObject1 = new PrepStmtObject();
				updPrepStmtObject2 = new PrepStmtObject();
				updPrepStmtObject3 = new PrepStmtObject();
				updPrepStmtObject4 = new PrepStmtObject();
				updPrepStmtObject5 = new PrepStmtObject();
				updPrepStmtObject6 = new PrepStmtObject();
								
				query1.append("update cr_deal_dtl set QUALITY_CHECK_DC_CONFIRM=NULL,DEAL_FORWARDED_DATE = NULL,REC_STATUS='P' where DEAL_ID="+CommonFunction.checkNull(dealIdArr[i]).trim());
				query2.append("update cr_deal_customer_role set STATUS='P' where DEAL_ID="+CommonFunction.checkNull(dealIdArr[i]).trim());
				query3.append("update cr_deal_loan_dtl set REC_STATUS='P' where DEAL_ID="+CommonFunction.checkNull(dealIdArr[i]).trim());
				query4.append("update cr_deal_collateral_m set REC_STATUS='P' where DEAL_ID="+CommonFunction.checkNull(dealIdArr[i]).trim());
				query5.append("update cr_deal_txncharges_dtl set REC_STATUS='P' where DEAL_ID="+CommonFunction.checkNull(dealIdArr[i]).trim());
				query6.append("update cr_document_dtl set REC_STATUS='A' where TXNID="+CommonFunction.checkNull(dealIdArr[i]).trim());
											
				updPrepStmtObject1.setSql(query1.toString());
				updPrepStmtObject2.setSql(query2.toString());
				updPrepStmtObject3.setSql(query3.toString());
				updPrepStmtObject4.setSql(query4.toString());
				updPrepStmtObject5.setSql(query5.toString());
				updPrepStmtObject6.setSql(query6.toString());
								
				
		        qryList.add(updPrepStmtObject1);
		        qryList.add(updPrepStmtObject2);
		        qryList.add(updPrepStmtObject3);
		        qryList.add(updPrepStmtObject4);
		        qryList.add(updPrepStmtObject5);
		        qryList.add(updPrepStmtObject6);
		        String checkStageM=CommonFunction.stageMovement(vo.getCompanyId(),"DC","X",dealIdArr[i],"QC", vo.getBusinessdate(),CommonFunction.checkNull(vo.getUserId()));
				logger.info("checkStageM["+i+"]: "+checkStageM);
			}
			else if(CommonFunction.checkNull(decisionArr[i]).equalsIgnoreCase("X") && txnType.equalsIgnoreCase("LIM"))
			{
				query1=new StringBuilder();
				query3=new StringBuilder();
				query7=new StringBuilder();
				queryApp=new StringBuilder();
				updPrepStmtObject1 = new PrepStmtObject();
				updPrepStmtObject3 = new PrepStmtObject();
				updPrepStmtObject7 = new PrepStmtObject();
				updPrepStmtObjectApp = new PrepStmtObject();
				query1.append("update cr_deal_dtl set REC_STATUS='F', DEAL_CURRENT_APPROVAL_LEVEL='1' where DEAL_ID="+CommonFunction.checkNull(dealIdArr[i]).trim());
				query3.append("update cr_deal_loan_dtl set REC_STATUS='F' where DEAL_ID="+CommonFunction.checkNull(dealIdArr[i]).trim());
				query7.append("update cr_deal_movement_dtl set DEAL_FORWARDED = NULL where deal_stage_id='UNC' and DEAL_ID="+CommonFunction.checkNull(dealIdArr[i]).trim());
				queryApp.append("update CR_DEAL_APPROVAL_DTL set APPROVAL_DECISION='P' where DEAL_ID="+CommonFunction.checkNull(dealIdArr[i]).trim());
				updPrepStmtObject1.setSql(query1.toString());
				updPrepStmtObject3.setSql(query3.toString());
				updPrepStmtObject7.setSql(query7.toString());
				updPrepStmtObjectApp.setSql(queryApp.toString());
				
		        qryList.add(updPrepStmtObject1);
		        qryList.add(updPrepStmtObject3);
		        qryList.add(updPrepStmtObject7);
				qryList.add(updPrepStmtObjectApp);
				
			}
		}
		flag=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
		qryList.clear();
		qryList=null;
	    logger.info("In saveQualityCheckDetails...............flag: "+flag);
	}catch(Exception e){
		e.printStackTrace();
	}
	finally
	{
		bufInsSql = null;
		insertPrepStmtObject = null;
		bufUpdSql = null;
		updPrepStmtObject = null;
		qryList = null;
		query1 = null;
		query2 = null;
		query3 = null;
		query4 = null;
		query5 = null;
		query6 = null;
		query7 = null;
		updPrepStmtObject1 = null;
		updPrepStmtObject2 = null;
		updPrepStmtObject3 = null;
		updPrepStmtObject4 = null;
		updPrepStmtObject5 = null;
		updPrepStmtObject6 = null;
		updPrepStmtObject7 = null;
		updPrepStmtObject8 = null;
	}
	return flag;
}
//Quality Check By Amit Ends
//Check By prashant Start
public String checkCustomerType(CommonPageSecVo vo) {
	
	String[] dealIdArr = vo.getDealId();
	logger.info("checkCustomerType deal Id: "+dealIdArr[0]);
	String queryCustomerType="select count(1) from cr_deal_dtl where DEAL_CUSTOMER_TYPE='C' and DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealIdArr[0]))+"'";
	logger.info("queryCustomerType: "+queryCustomerType);
	String customerTypeCount = ConnectionDAO.singleReturn(queryCustomerType);
	logger.info("customerTypeCount: "+customerTypeCount);
	return customerTypeCount;
}
//Check By prashant Ends
//Code BY arun For geting Scoring Detail starts here
@Override
public ArrayList<CommonDealVo> getScoringDtlList(CommonDealVo vo) {
	ArrayList<CommonDealVo> list=new ArrayList<CommonDealVo>();
	StringBuilder query=new StringBuilder();
	ArrayList<Object> in =new ArrayList<Object>();
	ArrayList<Object> out =new ArrayList<Object>();
	ArrayList outMessages = new ArrayList();
	String s1="";
	String s2="";
	try{
		String checkQry="Select rec_status from cr_deal_dtl where deal_id='"+vo.getDealNo()+"'";
        logger.info("In.....getScoringDtlList."+checkQry);
		String recStatus= ConnectionDAO.singleReturn(checkQry);
        if(!CommonFunction.checkNull(recStatus).equalsIgnoreCase("A")){
        	in.add(vo.getDealNo());
			out.add(s1);
			out.add(s2);
			logger.info("scorecard_creation in getScoringDtlList");
			logger.info("scorecard_creation ("+in.toString()+","+out.toString()+")");
			outMessages=(ArrayList) ConnectionDAO.callSP("scorecard_creation",in,out);
			s1=CommonFunction.checkNull(outMessages.get(0));
			s2=CommonFunction.checkNull(outMessages.get(1));
		    logger.info("s1  : "+s1);
		    logger.info("s2  : "+s2);	
		    if(s1.equalsIgnoreCase("S"))
			{

				logger.info("Procedure Error Message----"+s2);
			}
			else
			{

				logger.info("Procedure Error Message----"+s2);
			}		

        }
	query.append("Select b.SCORING_PARAM_NAME,APPLICANT_VALUE,SCORING_WEIGHTAGE,SCORE,WEIGHTAGE from cr_scoring_param  b  join  cr_applicant_scorecard_dtl a on ");
	query.append(" a.SCORING_PARAM_CODE=b.SCORING_PARAM_CODE where DEAL_ID='"+CommonFunction.checkNull(vo.getDealNo())+"'");
	logger.info("query : "+query.toString());
	ArrayList paramDetail = ConnectionDAO.sqlSelect(query.toString());
	for(int i=0;i<paramDetail.size();i++){

		ArrayList subParamDetail=(ArrayList)paramDetail.get(i);
		if(subParamDetail.size()>0)
		{
			CommonDealVo nvo = new CommonDealVo();
			nvo.setScoringParamName(StringEscapeUtils.escapeSql(CommonFunction.checkNull(subParamDetail.get(0))).trim());
			nvo.setApplicationValue(StringEscapeUtils.escapeSql(CommonFunction.checkNull(subParamDetail.get(1))).trim());
			nvo.setScoringWeightage(StringEscapeUtils.escapeSql(CommonFunction.checkNull(subParamDetail.get(2))).trim());
			nvo.setScore(StringEscapeUtils.escapeSql(CommonFunction.checkNull(subParamDetail.get(3))).trim());
			nvo.setWeightage(StringEscapeUtils.escapeSql(CommonFunction.checkNull(subParamDetail.get(4))).trim());
			nvo.setTotalRecordSize(paramDetail.size());
			list.add(nvo);
		}
	}
	}catch(Exception e){
		e.printStackTrace();
	}
	logger.info("paramDetail size is .................................."+list.size());
	return list;
}
//Code BY arun For geting Scoring Detail ends here


//Start Emi Calculator By Anil

public String insertDealForEmiLoan(String userId,String bgDate)  {
	logger.info("In insertDealForEmiLoan--------------------------------------");
	ArrayList qryList = new ArrayList();
	PrepStmtObject insertPrepStmtObject = null;
	boolean status=false;
	String dealId=null;
	StringBuffer bufInsSql =new StringBuffer();
	try {
	bufInsSql.append("insert into cr_deal_dtl_emi_calc (DEAL_BRANCH,REC_STATUS,MAKER_ID,MAKER_DATE)");
	bufInsSql.append(" values ( ");
	bufInsSql.append(" '0'," );//DEAL_ID
	bufInsSql.append(" 'X'," );//DEAL_PRODUCT_CATEGORY
	bufInsSql.append(" '"+userId+"'," );//MAKER_ID
	bufInsSql.append(dbo);
    bufInsSql.append("STR_TO_DATE('"+bgDate+"','"+dateFormatWithTime+"') + ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) )" );//MAKER_DATE
	
	insertPrepStmtObject=new PrepStmtObject();
	insertPrepStmtObject.setSql(bufInsSql.toString());

    logger.info("IN insertDealForEmiLoan() insert query1 ::::::::::::::::::::::"+insertPrepStmtObject.printQuery());
    logger.info("Insert query1 ::::::::::::::::::::::"+bufInsSql.toString());
    
    qryList.add(insertPrepStmtObject);
	status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
	
    logger.info("status............................"+status);

    if(status)
	 {  
		StringBuilder query=new StringBuilder();
		query.append("SELECT max(deal_id) FROM cr_deal_dtl_emi_calc  WITH (ROWLOCK)  WHERE MAKER_ID='"+userId+"' ");
		logger.info("query:::::::::::::::::::::::::::::::"+query.toString());
		dealId = ConnectionDAO.singleReturn(query.toString());
		logger.info("dealId::::::::::::::::::::::::::::::::::::"+dealId);
		
	 }
	}
	 catch (Exception e) {
		e.printStackTrace();
	}
		return dealId;

}

public boolean saveLoanForEmiCalc(Object ob)
{		
	LoanDetailVo loanVo = (LoanDetailVo)ob;
	boolean status=false;
	ArrayList qryList = new ArrayList();
	PrepStmtObject insertPrepStmtObject = null;
	String dealId=null;
	logger.info("In saveCustomer....saveLoanForEmiCalcu..."+loanVo.getDealLoanId()+"loanVo.getType() "+loanVo.getType());
	try{
				StringBuffer bufInsSql =new StringBuffer();
				bufInsSql.append("insert into cr_deal_loan_dtl_emi_calc (DEAL_ID,DEAL_PRODUCT_CATEGORY,DEAL_PRODUCT, " +
						"DEAL_SCHEME,DEAL_PRODUCT_TYPE,DEAL_DISBURSAL_DATE,DEAL_ASSET_COST,DEAL_MARGIN_RATE, " +
						"DEAL_MARGIN_AMOUNT,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_REPAYMENT_FREQ, " +
						"DEAL_RATE_TYPE,DEAL_RATE_METHOD,DEAL_BASE_RATE_TYPE,DEAL_BASE_RATE, " +
						"DEAL_MARKUP,DEAL_FINAL_RATE,DEAL_REPAYMENT_TYPE,DEAL_INSTALLMENT_TYPE, DEAL_INSTALLMENT_MODE, DEAL_NO_OF_INSTALLMENT,  " +
						"DEAL_REPAYMENT_MODE,DEAL_LOAN_PURPOSE,REC_STATUS,MAKER_ID,MAKER_DATE,DEAL_SECTOR_TYPE,DEAL_ADVANCE_INSTL,DEAL_REPAY_EFF_DATE,DEAL_MATURITY_DATE,DEAL_DUE_DAY,NEXT_DUE_DATE,DEAL_FLAT_RATE,DEAL_EFF_RATE,DEAL_INT_CALC_FROM,LOAN_TYPE,TENURE_IN_DAY)");
				bufInsSql.append(" values ( ");
				bufInsSql.append(" ?," );//DEAL_ID
				bufInsSql.append(" ?," );//DEAL_PRODUCT_CATEGORY
				bufInsSql.append(" ?," );//DEAL_PRODUCT
				bufInsSql.append(" ?," );//DEAL_SCHEME
				bufInsSql.append(" ?," );//DEAL_PRODUCT_TYPE
				bufInsSql.append(dbo);//DEAL_DISBURSAL_DATE 
				bufInsSql.append("STR_TO_DATE(?,'"+dateFormat+"')," );
				bufInsSql.append(" ?," );//DEAL_ASSET_COST
				bufInsSql.append(" ?," );//DEAL_MARGIN_RATE
				bufInsSql.append(" ?," );//DEAL_MARGIN_AMOUNT
				bufInsSql.append(" ?," );//DEAL_LOAN_AMOUNT
				bufInsSql.append(" ?," );//DEAL_TENURE
				bufInsSql.append(" ?," );//DEAL_REPAYMENT_FREQ
				bufInsSql.append(" ?," );//DEAL_RATE_TYPE
				bufInsSql.append(" 'F'," );//DEAL_RATE_METHOD
				bufInsSql.append(" ?," );//DEAL_BASE_RATE_TYPE
				bufInsSql.append(" ?," );//DEAL_BASE_RATE
				bufInsSql.append(" ?," );//DEAL_MARKUP
				bufInsSql.append(" ?," );//DEAL_FINAL_RATE
				bufInsSql.append(" ?," );//DEAL_REPAYMENT_TYPE
				bufInsSql.append(" ?," );//DEAL_INSTALLMENT_TYPE
				bufInsSql.append(" ?," );//DEAL_INSTALLMENT_MODE
				bufInsSql.append(" ?," );//DEAL_NO_OF_INSTALLMENT
				bufInsSql.append(" ?," );//DEAL_REPAYMENT_MODE
				bufInsSql.append(" ?," );//DEAL_LOAN_PURPOSE
				bufInsSql.append(" ?," );//REC_STATUS
				bufInsSql.append(" ?," );//MAKER_ID
				bufInsSql.append(dbo);
				bufInsSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9), ");//MAKER_DATE
				bufInsSql.append(" ?," );//DEAL_SECTOR_TYPE
				bufInsSql.append(" ?," );//DEAL_ADVANCE_INSTL
				bufInsSql.append(dbo); //DEAL_REPAY_EFF_DATE
				bufInsSql.append("STR_TO_DATE(?,'"+dateFormat+"')," );
				bufInsSql.append(dbo);//DEAL_MATURITY_DATE
				bufInsSql.append("STR_TO_DATE(?,'"+dateFormat+"'),");
				bufInsSql.append(" ?, " );//DEAL_CYCLE_DATE
				bufInsSql.append(dbo);//DEAL_MATURITY_DATE
				bufInsSql.append("STR_TO_DATE(?,'"+dateFormat+"'),");
				bufInsSql.append(" ?," );//DEAL_FLAT_RATE
				bufInsSql.append(" ?," );//DEAL_EFF_RATE
				bufInsSql.append(" ?," );//DEAL_INT_CALC_FROM
				bufInsSql.append(" ?," );//LOAN_TYPE
				bufInsSql.append(" ? )" );//tenure_in_day
				
				insertPrepStmtObject = new PrepStmtObject();
	
				if((CommonFunction.checkNull(loanVo.getDealId())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getDealId()).trim());
				
				if((CommonFunction.checkNull(loanVo.getProductType())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getProductType()).trim());
				if((CommonFunction.checkNull(loanVo.getLbxProductID())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getLbxProductID()).trim());
				if((CommonFunction.checkNull(loanVo.getLbxscheme())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getLbxscheme()).trim());
				
				if((CommonFunction.checkNull(loanVo.getProductTypeFlag())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getProductTypeFlag()).trim());
				
				if((CommonFunction.checkNull(loanVo.getDisbursalDate())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getDisbursalDate()).trim());
				
				if((loanVo.getAssetCost()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(myFormatter.parse((loanVo.getAssetCost()).trim()).toString());
				
				if((loanVo.getMarginPerc()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(myFormatter.parse((loanVo.getMarginPerc()).trim()).toString());
				if((CommonFunction.checkNull(loanVo.getMarginAmount()).trim()).equalsIgnoreCase(""))
				    insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(myFormatter.parse((loanVo.getMarginAmount()).trim()).toString());
				if((CommonFunction.checkNull(loanVo.getRequestedLoanAmount())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(myFormatter.parse((loanVo.getRequestedLoanAmount()).trim()).toString());
				if((CommonFunction.checkNull(loanVo.getRequestedLoanTenure())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getRequestedLoanTenure()).trim());
				if((CommonFunction.checkNull(loanVo.getFrequency())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getFrequency()).trim());

				if((CommonFunction.checkNull(loanVo.getRateType())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getRateType()).trim());

				if((CommonFunction.checkNull(loanVo.getBaseRateType())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getBaseRateType()).trim());

				if((CommonFunction.checkNull(loanVo.getBaseRate())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((loanVo.getBaseRate()).trim());

				if((CommonFunction.checkNull(loanVo.getMarkUp())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(myFormatter.parse((loanVo.getMarkUp()).trim()).toString());

				if((CommonFunction.checkNull(loanVo.getEffectiveRate())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(myFormatter.parse((loanVo.getEffectiveRate()).trim()).toString());

				if((CommonFunction.checkNull(loanVo.getRepaymentType())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
				else
						insertPrepStmtObject.addString((loanVo.getRepaymentType()).trim());
				if((CommonFunction.checkNull(loanVo.getInstallmentType())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
				else
						insertPrepStmtObject.addString((loanVo.getInstallmentType()).trim());
				if((CommonFunction.checkNull(loanVo.getInstMode())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
			else
					insertPrepStmtObject.addString((loanVo.getInstMode()).trim());
				
						
			if((CommonFunction.checkNull(loanVo.getNoOfInstall())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
			else
					insertPrepStmtObject.addString((loanVo.getNoOfInstall()).trim());

				if((CommonFunction.checkNull(loanVo.getPaymentMode())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
				else
						insertPrepStmtObject.addString((loanVo.getPaymentMode()).trim());
				if((CommonFunction.checkNull(loanVo.getLoanPurpose())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
			     else
					insertPrepStmtObject.addString((loanVo.getLoanPurpose()).trim());

					insertPrepStmtObject.addString("X");//Status
					if((CommonFunction.checkNull(loanVo.getUserId())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
				     else
						insertPrepStmtObject.addString((loanVo.getUserId()).trim());
					
					if((CommonFunction.checkNull(loanVo.getBgDate())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
				     else
						insertPrepStmtObject.addString((loanVo.getBgDate()).trim());
					
					
					if (CommonFunction.checkNull((loanVo.getSectorType())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((loanVo.getSectorType()).trim());
				
					if (CommonFunction.checkNull((loanVo.getInstallments())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addString("0");
					else
						insertPrepStmtObject.addString((loanVo.getInstallments()).trim());
					
					if (CommonFunction.checkNull((loanVo.getRepayEffectiveDate())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((loanVo.getRepayEffectiveDate()).trim());
					
					if (CommonFunction.checkNull((loanVo.getMaturityDate())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((loanVo.getMaturityDate()).trim());
					
					if (CommonFunction.checkNull((loanVo.getCycleDate())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((loanVo.getCycleDate()).trim());
					
					if (CommonFunction.checkNull((loanVo.getNextDueDate())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((loanVo.getNextDueDate()).trim());
					
					if((CommonFunction.checkNull(loanVo.getRateType())).trim().equalsIgnoreCase("F"))
					{
						if((CommonFunction.checkNull(loanVo.getEffectiveRate())).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString(myFormatter.parse((loanVo.getEffectiveRate()).trim()).toString());
					}
					else
					{
						insertPrepStmtObject.addNull();
					}
					if((CommonFunction.checkNull(loanVo.getRateType())).trim().equalsIgnoreCase("E"))
					{
						if((CommonFunction.checkNull(loanVo.getEffectiveRate())).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString(myFormatter.parse((loanVo.getEffectiveRate()).trim()).toString());
					}
					else
					{
						insertPrepStmtObject.addNull();
					}
					
					if (CommonFunction.checkNull((loanVo.getInterestCalc())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((loanVo.getInterestCalc()).trim());
					
					if (CommonFunction.checkNull((loanVo.getLoanType())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((loanVo.getLoanType()).trim());
					
					if (CommonFunction.checkNull((loanVo.getTenureInDay())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((loanVo.getTenureInDay()).trim());
					
					
					insertPrepStmtObject.setSql(bufInsSql.toString());
					logger.info("IN SaveLoan() insert query1 ### "+insertPrepStmtObject.printQuery());
					logger.info("Insert query1 ------------------------------>"+bufInsSql.toString());
					qryList.add(insertPrepStmtObject);
					status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
				    logger.info("In saveCustomer......................"+status);
				    
				    bufInsSql=null;
			}			
		
	catch(Exception e){
		e.printStackTrace();
	}
	
	return status;
}


public String getDealNumber(Object ob) {
		LoanDetailVo creditVo = (LoanDetailVo)ob;
		String maxId=null;
		ArrayList qryList = new ArrayList();
		PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

		long vCode=0;

		try
		{		    
			logger.info("In insert ::::");
			StringBuffer bufInsSql =	new StringBuffer();
			bufInsSql.append("insert into cr_deal_dtl(DEAL_BRANCH,REC_STATUS)");
			bufInsSql.append(" values ( ");
			bufInsSql.append(" '0'," );
			bufInsSql.append(" 'X' )" );
		
			insertPrepStmtObject.setSql(bufInsSql.toString());
			logger.info("IN getDealNumber() insert query1 ### "+insertPrepStmtObject.printQuery());
			logger.info("Insert Query------------>"+bufInsSql.toString());
			
			
			bufInsSql=null;
			
			qryList.add(insertPrepStmtObject);
			boolean status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
		    logger.info("In getDealNumber......................"+status);
		    
		    if(status)
			  {
				  StringBuilder query=new StringBuilder();
				  query.append("select max(DEAL_ID) from cr_deal_dtl  WITH (ROWLOCK) ");
				  maxId=ConnectionDAO.singleReturn(query.toString());
				  logger.info("In maxId......................"+maxId);
				  query=null;
			  }
		  


		}catch(Exception e){
			e.printStackTrace();
		}
		finally
		{			 
			qryList=null;	
			insertPrepStmtObject=null;
		}
		return maxId;

	}

public boolean saveChargesForEmiCal(Object ob){
ChargeVo vo = (ChargeVo)ob;
logger.info("In saveCharges....saveCharges...Update mod:  "+vo.getChargeIdDtl());
qryList=new ArrayList();
PrepStmtObject insertPrepStmtObject = null;
	String dId[] = vo.getChargeIdDtl();
	String finalAmount[] = vo.getFinalAmount();
	String chargeAmount[]=vo.getChargeAmount();
	
	String taxAmount1[] = vo.getDealChargeTaxAmountInConfig1();
	String taxAmount2[]=vo.getDealChargeTaxAmountInConfig2();
	String tdsAmount[] = vo.getDealChargeTdsAmountInConfig();
	String netAmount[]=vo.getDealChargeNetAmountInConfig();
	boolean status=false;
	
	 if(dId.length>0)
 {
	for(int k=0;k<vo.getChargeIdDtl().length; k++)
	{
		logger.info("Charge Id in saveCharges: "+dId[k]);
		StringBuilder query=new StringBuilder();
		 query.append("update cr_deal_txncharges_dtl_emi_calc set DEAL_CHARGE_FINAL_AMOUNT=?,DEAL_CHARGE_CALCULATED_AMOUNT=?,DEAL_CHARGE_TAX_AMOUNT1=?,DEAL_CHARGE_TAX_AMOUNT2=?,DEAL_CHARGE_TDS_AMOUNT=?,DEAL_CHARGE_NET_AMOUNT=?, REC_STATUS=?,MAKER_ID=?,MAKER_DATE=");
		 query.append(dbo);
		 query.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ");
		 query.append(" where DEAL_CHARGE_DTL_ID=?");
		insertPrepStmtObject = new PrepStmtObject();
		
		if((CommonFunction.checkNull(finalAmount[k])).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			try {
				insertPrepStmtObject.addString(myFormatter.parse((finalAmount[k]).trim()).toString());
			} catch (ParseException e) {
				e.printStackTrace();
			}

		if((CommonFunction.checkNull(chargeAmount[k])).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			try {
				insertPrepStmtObject.addString(myFormatter.parse((chargeAmount[k]).trim()).toString());
			} catch (ParseException e) {
				e.printStackTrace();
			}

	if((CommonFunction.checkNull(taxAmount1[k])).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		try {
			insertPrepStmtObject.addString(myFormatter.parse((taxAmount1[k]).trim()).toString());
		} catch (ParseException e) {
			e.printStackTrace();
		}
	
	if((CommonFunction.checkNull(taxAmount2[k])).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		try {
			insertPrepStmtObject.addString(myFormatter.parse((taxAmount2[k]).trim()).toString());
		} catch (ParseException e) {
			e.printStackTrace();
		}
		
		if((CommonFunction.checkNull(tdsAmount[k])).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			try {
				insertPrepStmtObject.addString(myFormatter.parse((tdsAmount[k]).trim()).toString());
			} catch (ParseException e) {
				e.printStackTrace();
			}
		
		if((CommonFunction.checkNull(netAmount[k])).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			try {
				insertPrepStmtObject.addString(myFormatter.parse((netAmount[k]).trim()).toString());
			} catch (ParseException e) {
				e.printStackTrace();
			}
		
		insertPrepStmtObject.addString("P");
		
		if((CommonFunction.checkNull(vo.getUserId())).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getUserId()));
		
		if((CommonFunction.checkNull(vo.getBussinessDate())).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getBussinessDate()));
		
		if((CommonFunction.checkNull(dId[k])).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((dId[k]).trim());
		
		insertPrepStmtObject.setSql(query.toString());
		qryList.add(insertPrepStmtObject);
	    query=null;
	}
	
	try {
		status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
		  logger.info("In saveCharges......................"+status);
	} catch (Exception e) {
		e.printStackTrace();
	}
	
 }
  
return status;
}


public String getDealIdForEmiCalc(String userId) {
	StringBuilder query=new StringBuilder();
	query.append("SELECT max(deal_id) FROM cr_deal_dtl_emi_calc  WITH (ROWLOCK)  WHERE MAKER_ID='"+userId+"'");
	logger.info("query::::"+query.toString());
	String dealId = ConnectionDAO.singleReturn(query.toString());
	logger.info("dealId::::"+dealId);
	return dealId;
	}


public ArrayList getAllLoanDetailsForEmiCalc(String dealLoanId) {

	logger.info("dealLoanId: "+dealLoanId);
	ArrayList<Object> list=new ArrayList<Object>();
	try{
		StringBuilder query=new StringBuilder();
	    query.append("SELECT DEAL_PRODUCT,DEAL_SCHEME,");
	    query.append(dbo);
		query.append("DATE_FORMAT(DEAL_DISBURSAL_DATE,'"+dateFormat+"'),DEAL_ASSET_COST," );
		query.append("DEAL_MARGIN_RATE,DEAL_MARGIN_AMOUNT,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_REPAYMENT_FREQ,DEAL_RATE_TYPE,");
		query.append("DEAL_RATE_METHOD,DEAL_BASE_RATE_TYPE,DEAL_BASE_RATE,DEAL_MARKUP,DEAL_FINAL_RATE,DEAL_REPAYMENT_TYPE,DEAL_INSTALLMENT_TYPE,");
		query.append("DEAL_INSTALLMENT_MODE,DEAL_REPAYMENT_MODE,DEAL_LOAN_PURPOSE,DEAL_LOAN_ID,p.PRODUCT_DESC,s.SCHEME_DESC,s.MIN_AMT_FIN,s.MAX_AMT_FIN,s.MIN_MARGIN_RATE,s.MAX_MARGIN_RATE,s.MIN_TENURE,s.MAX_TENURE,p.ASSET_FLAG,d.DEAL_NO_OF_INSTALLMENT,p.ASSET_FLAG,DEAL_SECTOR_TYPE,DEAL_ADVANCE_INSTL,");
		query.append(dbo);
		query.append("DATE_FORMAT(DEAL_REPAY_EFF_DATE,'"+dateFormat+"') ,");
		query.append(dbo);
		query.append("DATE_FORMAT(DEAL_MATURITY_DATE,'"+dateFormat+"')," );
		query.append("DEAL_DUE_DAY,");
		query.append(dbo);
		query.append("DATE_FORMAT(NEXT_DUE_DATE,'"+dateFormat+"'),g.value,S.RATE_METHOD,DEAL_INT_CALC_FROM,D.NET_LTV,d.TENURE_IN_DAY,p.DAYS_BASIS from cr_deal_loan_dtl_emi_calc d " );
		query.append(" left join cr_product_m p on d.DEAL_PRODUCT=p.PRODUCT_ID left join cr_scheme_m s on d.DEAL_SCHEME=s.SCHEME_ID left join generic_master g on g.VALUE=d.LOAN_TYPE where d.DEAL_LOAN_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId)).trim());
	logger.info("getAllLoanDetails: "+query);
	LoanDetailVo loanVo = null;
	ArrayList loandeatail = ConnectionDAO.sqlSelect(query.toString());
	query=null;
	
	if(loandeatail.size()>0){
	for(int i=0;i<loandeatail.size();i++){

		logger.info("getAllLoanDetails"+loandeatail.get(i).toString());
		ArrayList loandeatail1=(ArrayList)loandeatail.get(i);
		if(loandeatail1.size()>0)
		{
			logger.info("getAllLoanDetails"+loandeatail1.size());
			loanVo = new LoanDetailVo();
			loanVo.setLbxProductID((CommonFunction.checkNull(loandeatail1.get(0))).trim());
			loanVo.setLbxscheme((CommonFunction.checkNull(loandeatail1.get(1))).trim());
			loanVo.setDisbursalDate((CommonFunction.checkNull(loandeatail1.get(2))).trim());
			if(!CommonFunction.checkNull(loandeatail1.get(3)).equalsIgnoreCase(""))
			{
				Number reconNum =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(3))).trim());
				loanVo.setAssetCost(myFormatter.format(reconNum));
			}
			if(!CommonFunction.checkNull(loandeatail1.get(4)).equalsIgnoreCase(""))
			{
				Number reconNumP =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(4))).trim());
				loanVo.setMarginPerc(myFormatter.format(reconNumP));
				loanVo.setLtvPerc(myFormatter.format(100-reconNumP.doubleValue()));
			}
			else
			{
				loanVo.setLtvPerc("100.00");
			}
			if(!CommonFunction.checkNull(loandeatail1.get(5)).equalsIgnoreCase(""))
			{
				Number reconNumA =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(5))).trim());
				loanVo.setMarginAmount(myFormatter.format(reconNumA));
			}
			if(!CommonFunction.checkNull(loandeatail1.get(6)).equalsIgnoreCase(""))
			{
				Number reconNumL =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(6))).trim());
				loanVo.setRequestedLoanAmount(myFormatter.format(reconNumL));
			}
			loanVo.setRequestedLoanTenure((CommonFunction.checkNull(loandeatail1.get(7))).trim());
			loanVo.setFrequency((CommonFunction.checkNull(loandeatail1.get(8))).trim());
			loanVo.setRateType((CommonFunction.checkNull(loandeatail1.get(9))).trim());
			loanVo.setType((CommonFunction.checkNull(loandeatail1.get(10))).trim());
			 logger.info("base rate type............... "+(CommonFunction.checkNull(loandeatail1.get(11))).trim());
			loanVo.setBaseRateType((CommonFunction.checkNull(loandeatail1.get(11))).trim());
			if(!CommonFunction.checkNull(loandeatail1.get(12)).equalsIgnoreCase(""))
			{
				Number reconNumb =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(12))).trim());
				loanVo.setBaseRate(myFormatter.format(reconNumb));
			}
			if(!CommonFunction.checkNull(loandeatail1.get(13)).equalsIgnoreCase(""))
			{
				Number reconNumU =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(13))).trim());
				loanVo.setMarkUp(myFormatter.format(reconNumU));
			}
			if(!CommonFunction.checkNull(loandeatail1.get(14)).equalsIgnoreCase(""))
			{
				Number reconNumE =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(14))).trim());
				loanVo.setEffectiveRate(myFormatter.format(reconNumE));
			}
			loanVo.setRepaymentType((CommonFunction.checkNull(loandeatail1.get(15))).trim());
			if(CommonFunction.checkNull(loandeatail1.get(15)).trim().equalsIgnoreCase("I"))
			{
				loanVo.setShowRepaymentType("INSTALLMENT");
			}
			else if(CommonFunction.checkNull(loandeatail1.get(15)).trim().equalsIgnoreCase("N"))
			{
				loanVo.setShowRepaymentType("NON-INSTALLMENT");
			}
			loanVo.setInstallmentType((CommonFunction.checkNull(loandeatail1.get(16))).trim());
			loanVo.setInstMode((CommonFunction.checkNull(loandeatail1.get(17))).trim());
			loanVo.setPaymentMode((CommonFunction.checkNull(loandeatail1.get(18))).trim());
			loanVo.setLoanPurpose((CommonFunction.checkNull(loandeatail1.get(19))).trim());
			loanVo.setDealLoanId((CommonFunction.checkNull(loandeatail1.get(20))).trim());
			loanVo.setProduct((CommonFunction.checkNull(loandeatail1.get(21))).trim());
			loanVo.setScheme((CommonFunction.checkNull(loandeatail1.get(22))).trim());
			if(!CommonFunction.checkNull(loandeatail1.get(23)).equalsIgnoreCase(""))
			{
				Number reconNumf =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(23))).trim());
				loanVo.setMinFinanceAmount(myFormatter.format(reconNumf));
			}
			if(!CommonFunction.checkNull(loandeatail1.get(24)).equalsIgnoreCase(""))
			{
				Number reconNummf =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(24))).trim());
				loanVo.setMaxFinanceAmount(myFormatter.format(reconNummf));
			}
			if(!CommonFunction.checkNull(loandeatail1.get(25)).equalsIgnoreCase(""))
			{
				Number reconNummr =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(25))).trim());
				loanVo.setMinMRate(myFormatter.format(reconNummr));
			}
			if(!CommonFunction.checkNull(loandeatail1.get(26)).equalsIgnoreCase(""))
			{
				Number reconNummm =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(26))).trim());
				loanVo.setMaxMRate(myFormatter.format(reconNummm));
			}
            loanVo.setMinTenure((CommonFunction.checkNull(loandeatail1.get(27))).trim());
            loanVo.setMaxTenure((CommonFunction.checkNull(loandeatail1.get(28))).trim());
            loanVo.setAssetFlag((CommonFunction.checkNull(loandeatail1.get(29))).trim());
            loanVo.setNoOfInstall((CommonFunction.checkNull(loandeatail1.get(30))).trim());
            loanVo.setProductTypeFlag((CommonFunction.checkNull(loandeatail1.get(31))).trim());
            loanVo.setSectorType((CommonFunction.checkNull(loandeatail1.get(32))).trim());
            loanVo.setInstallments((CommonFunction.checkNull(loandeatail1.get(33))).trim());
            loanVo.setRepayEffectiveDate((CommonFunction.checkNull(loandeatail1.get(34))).trim());
            loanVo.setMaturityDate((CommonFunction.checkNull(loandeatail1.get(35))).trim());
            loanVo.setCycleDate((CommonFunction.checkNull(loandeatail1.get(36))).trim());
            loanVo.setNextDueDate((CommonFunction.checkNull(loandeatail1.get(37))).trim());
            loanVo.setLoanType((CommonFunction.checkNull(loandeatail1.get(38))).trim());
            loanVo.setRateMethodType((CommonFunction.checkNull(loandeatail1.get(39))).trim());
            logger.info("getAllLoanDetails: Interest Calc From---"+CommonFunction.checkNull(loandeatail1.get(40)));
            loanVo.setInterestCalc((CommonFunction.checkNull(loandeatail1.get(40))).trim());
            loanVo.setNetLtv((CommonFunction.checkNull(loandeatail1.get(41))).trim());
            loanVo.setTenureInDay((CommonFunction.checkNull(loandeatail1.get(42))).trim());
            loanVo.setDaysBasis((CommonFunction.checkNull(loandeatail1.get(43))).trim());
            
            list.add(loanVo);
		}
	}}
	}catch(Exception e){
		e.printStackTrace();
	}
	return list;

}



public ArrayList getLoanDetailListForEmiCalc(String dealId) {

	ArrayList list=new ArrayList();
	try{
		StringBuilder query=new StringBuilder();
	 query.append("SELECT DEAL_LOAN_ID,DEAL_PRODUCT,DEAL_SCHEME,p.PRODUCT_DESC,s.SCHEME_DESC,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_RATE_TYPE,DEAL_RATE_METHOD,DEAL_LOAN_PURPOSE from cr_deal_loan_dtl_emi_calc d left join cr_product_m p on d.DEAL_PRODUCT=p.PRODUCT_ID left join cr_scheme_m s on d.DEAL_SCHEME=s.SCHEME_ID where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
	logger.info("getLoanDetailList"+query);
	LoanDetailVo loanVo = null;
	ArrayList loandeatail = ConnectionDAO.sqlSelect(query.toString());
	logger.info("getProductTypeList"+loandeatail.size());
	
	query=null;
	
	for(int i=0;i<loandeatail.size();i++){

		logger.info("getProductTypeList"+loandeatail.get(i).toString());
		ArrayList loandeatail1=(ArrayList)loandeatail.get(i);
		if(loandeatail1.size()>0)
		{
			loanVo = new LoanDetailVo();
			loanVo.setDealLoanId((CommonFunction.checkNull(loandeatail1.get(0))).trim());
			loanVo.setLbxProductID((CommonFunction.checkNull(loandeatail1.get(1))).trim());
			loanVo.setLbxscheme((CommonFunction.checkNull(loandeatail1.get(2))).trim());
			loanVo.setProduct((CommonFunction.checkNull(loandeatail1.get(3))).trim());
			loanVo.setScheme((CommonFunction.checkNull(loandeatail1.get(4))).trim());
			
			if(!CommonFunction.checkNull(loandeatail1.get(5)).equalsIgnoreCase(""))	
			{
				Number reconNum =myFormatter.parse((CommonFunction.checkNull(loandeatail1.get(5))).trim());
				loanVo.setRequestedLoanAmount(myFormatter.format(reconNum));
			}

			
			loanVo.setRequestedLoanTenure((CommonFunction.checkNull(loandeatail1.get(6))).trim());


			if((CommonFunction.checkNull(loandeatail1.get(7)).trim()).equals("F"))
			{
				loanVo.setRateType("Flat Rate");
			}
			else if((CommonFunction.checkNull(loandeatail1.get(7)).trim()).equals("E"))
			{
				loanVo.setRateType("Effective Rate");
			}


			if((CommonFunction.checkNull(loandeatail1.get(8)).trim()).equals("F"))
			{
				loanVo.setType("Fixed");
			}
			else if((CommonFunction.checkNull(loandeatail1.get(8)).trim()).equals("L"))
			{
				loanVo.setType("Floating");
			}
			else
			{
				loanVo.setType("");
			}


			loanVo.setLoanPurpose((CommonFunction.checkNull(loandeatail1.get(9))).trim());
			list.add(loanVo);
		}
	}
	}catch(Exception e){
		e.printStackTrace();
	}


	return list;

}


public boolean updateLoanForEmiCalc(Object ob) {
	LoanDetailVo loanVo = (LoanDetailVo)ob;
	boolean status=false;
	ArrayList qryList = new ArrayList();
	PrepStmtObject insertPrepStmtObject = null;
	logger.info("In updateLoanForEmiCalcu:::::::::::::::::::::::::::::::");
	try{
	
			StringBuilder instalQuery=new StringBuilder();
			instalQuery.append("select DEAL_ID from cr_deal_loan_dtl_emi_calc where  DEAL_ID='"+CommonFunction.checkNull(loanVo.getDealId())+"'");
			logger.info("updateLoanForEmiCalcu:::::::::::::::::::::"+ instalQuery);
			String instalStatus = ConnectionDAO.singleReturn(instalQuery.toString());
			logger.info("instalStatus::::::" + instalStatus);
			
			instalQuery=null;
			
			if(CommonFunction.checkNull(instalStatus.toString()).equalsIgnoreCase(""))
			{
				 StringBuilder deleteInst=new StringBuilder();
				 deleteInst.append("DELETE from cr_deal_installment_plan_emi_calc where DEAL_ID="+loanVo.getDealLoanId().trim()+" ");
				logger.info("Deletion is Q :::::::::::::;"+deleteInst);
				ArrayList deleteArl = new ArrayList();
				deleteArl.add(deleteInst);
				status=ConnectionDAO.sqlInsUpdDelete(deleteArl);
				logger.info("Status of Deletion is :::::::::::::::::::::="+status);
				
				instalStatus=null;
			}
			logger.info("In updateLoanForEmiCalcu::::::::::::::Update Mode");
			StringBuilder query=new StringBuilder();
			query.append("update cr_deal_loan_dtl_emi_calc set DEAL_PRODUCT=?,DEAL_SCHEME=?,");
			query.append("DEAL_DISBURSAL_DATE=");
			query.append(dbo);
			query.append("STR_TO_DATE(?,'"+dateFormat+"'),");
			query.append("DEAL_ASSET_COST=?,DEAL_MARGIN_RATE=?,DEAL_MARGIN_AMOUNT=?,DEAL_LOAN_AMOUNT=?,DEAL_TENURE=?,DEAL_REPAYMENT_FREQ=?,");
			query.append("DEAL_RATE_TYPE=?,DEAL_RATE_METHOD=?,DEAL_FINAL_RATE=?,DEAL_REPAYMENT_TYPE=?,DEAL_INSTALLMENT_TYPE=?,DEAL_INSTALLMENT_MODE=?,");
			query.append("DEAL_REPAYMENT_MODE=?,DEAL_NO_OF_INSTALLMENT=?,DEAL_LOAN_PURPOSE=?,DEAL_ADVANCE_INSTL=?,");
			query.append(" DEAL_REPAY_EFF_DATE=");
			query.append(dbo);
			query.append("STR_TO_DATE(?,'"+dateFormat+"'),DEAL_MATURITY_DATE=");
			query.append(dbo);
			query.append("STR_TO_DATE(?,'"+dateFormat+"'),");
			query.append("DEAL_DUE_DAY=?,");
			query.append("NEXT_DUE_DATE=");
			query.append(dbo);
			query.append("STR_TO_DATE(?,'"+dateFormat+"'), ");
			query.append("MAKER_ID=?,MAKER_DATE=");
			query.append(dbo);
			query.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9), ");
			query.append("DEAL_INT_CALC_FROM=?,TENURE_IN_DAY=?  where DEAL_ID=?");
			insertPrepStmtObject = new PrepStmtObject();
			
			if ((CommonFunction.checkNull(loanVo.getLbxProductID())).trim().equalsIgnoreCase("")) // DEAL_PRODUCT
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getLbxProductID()).trim());
			
			if ((CommonFunction.checkNull(loanVo.getLbxscheme())).trim().equalsIgnoreCase("")) // DEAL_SCHEME
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getLbxscheme()).trim());
			
			if ((CommonFunction.checkNull(loanVo.getDisbursalDate())).trim().equalsIgnoreCase("")) // DEAL_DISBURSAL_DATE
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getDisbursalDate()).trim());
			
			if ((CommonFunction.checkNull(loanVo.getAssetCost())).trim().equalsIgnoreCase("")) // DEAL_ASSET_COST
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(myFormatter.parse((loanVo.getAssetCost()).trim()).toString());

			if ((CommonFunction.checkNull(loanVo.getMarginPerc())).trim().equalsIgnoreCase("")) // DEAL_MARGIN_RATE
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(myFormatter.parse((loanVo.getMarginPerc()).trim()).toString());
			
			if ((CommonFunction.checkNull(loanVo.getMarginAmount())).trim().equalsIgnoreCase("")) // DEAL_MARGIN_AMOUNT
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(myFormatter.parse((loanVo.getMarginAmount()).trim()).toString()); 
			
			if ((CommonFunction.checkNull(loanVo.getRequestedLoanAmount())).trim().equalsIgnoreCase("")) // DEAL_LOAN_AMOUNT
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(myFormatter.parse((loanVo.getRequestedLoanAmount()).trim()).toString()); 
			
			if ((CommonFunction.checkNull(loanVo.getRequestedLoanTenure())).trim().equalsIgnoreCase("")) // DEAL_TENURE
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getRequestedLoanTenure()).trim()); 
			
			if ((CommonFunction.checkNull(loanVo.getFrequency())).trim().equalsIgnoreCase("")) // DEAL_REPAYMENT_FREQ
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getFrequency()).trim());
			
			if ((CommonFunction.checkNull(loanVo.getRateType())).trim().equalsIgnoreCase("")) // DEAL_RATE_TYPE
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getRateType()).trim());
			
			    insertPrepStmtObject.addString("F");//DEAL_RATE_METHOD
		    
			if ((CommonFunction.checkNull(loanVo.getEffectiveRate())).trim().equalsIgnoreCase("")) //DEAL_FINAL_RATE
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getEffectiveRate()).trim()); 
		
			if ((CommonFunction.checkNull(loanVo.getRepaymentType())).trim().equalsIgnoreCase("")) // DEAL_REPAYMENT_TYPE
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getRepaymentType()).trim());
			
			if ((CommonFunction.checkNull(loanVo.getInstallmentType())).trim().equalsIgnoreCase("")) // DEAL_INSTALLMENT_TYPE
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getInstallmentType()).trim());
			
			if ((CommonFunction.checkNull(loanVo.getInstMode())).trim().equalsIgnoreCase("")) // DEAL_INSTALLMENT_MODE
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getInstMode()).trim());
			
			if (CommonFunction.checkNull((loanVo.getPaymentMode())).trim().equalsIgnoreCase("")) // DEAL_REPAYMENT_MODE
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getPaymentMode()).trim());
			
			if (CommonFunction.checkNull((loanVo.getNoOfInstall())).trim().equalsIgnoreCase("")) // DEAL_NO_OF_INSTALLMENT
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getNoOfInstall()).trim());
			
			if ((CommonFunction.checkNull(loanVo.getLoanPurpose())).trim().equalsIgnoreCase("")) // DEAL_LOAN_PURPOSE
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getLoanPurpose()).trim());
						
			if (CommonFunction.checkNull((loanVo.getInstallments())).trim().equalsIgnoreCase("")) // DEAL_ADVANCE_INSTL
				insertPrepStmtObject.addString("0");
			else
				insertPrepStmtObject.addString((loanVo.getInstallments()).trim());
			
			if (CommonFunction.checkNull((loanVo.getRepayEffectiveDate())).trim().equalsIgnoreCase("")) // DEAL_REPAY_EFF_DATE
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getRepayEffectiveDate()).trim());
			
			if (CommonFunction.checkNull((loanVo.getMaturityDate())).trim().equalsIgnoreCase("")) // DEAL_MATURITY_DAT
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getMaturityDate()).trim());
			
			if (CommonFunction.checkNull((loanVo.getCycleDate())).trim().equalsIgnoreCase("")) // DEAL_DUE_DAY
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getCycleDate()).trim());
			
			if (CommonFunction.checkNull((loanVo.getNextDueDate())).trim().equalsIgnoreCase("")) // NEXT_DUE_DATE
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getNextDueDate()).trim());
			
			if (CommonFunction.checkNull((loanVo.getUserId())).trim().equalsIgnoreCase("")) // MAKER_ID
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getUserId()).trim());
			
			if (CommonFunction.checkNull((loanVo.getBgDate())).trim().equalsIgnoreCase("")) // MAKER_DATE
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getBgDate()).trim());

			if (CommonFunction.checkNull((loanVo.getInterestCalc())).trim().equalsIgnoreCase("")) // DEAL_INT_CALC_FROM
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getInterestCalc()).trim());
			

			if (CommonFunction.checkNull((loanVo.getTenureInDay())).trim().equalsIgnoreCase("")) // DEAL_INT_CALC_FROM
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((loanVo.getTenureInDay()).trim());
			
			
			if (CommonFunction.checkNull(loanVo.getDealId()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(CommonFunction.checkNull(loanVo.getDealId()));
			
			insertPrepStmtObject.setSql(query.toString());
			logger.info("IN updateLoanForEmiCalcu() update query1 :::::::::::::::::::::: "+insertPrepStmtObject.printQuery());
			qryList.add(insertPrepStmtObject);
			status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			logger.info("In updateLoanForEmiCalcu......................"+status);
			logger.info("In updateLoanForEmiCalcu......................"+status);
			
			query=null;
				
	}catch(Exception e){
		e.printStackTrace();
	}
	return status;
}



public String callProcForEmiCalc(String dealCap, String dealId) {

	ArrayList list =new ArrayList();
	String message="";
	try 
	{
		int dId = Integer.parseInt(dealId);		
		StringBuilder custId=new StringBuilder();
		custId.append("0");
		StringBuilder productQuery=new StringBuilder();
		productQuery.append("select DEAL_PRODUCT,DEAL_SCHEME,DEAL_LOAN_AMOUNT,DEAL_MARGIN_AMOUNT,DEAL_LOAN_ID from cr_deal_loan_dtl_emi_calc where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		logger.info("In callProcForEmiCalcu for deal productQuery::::::::::::::::::"+productQuery);
		ArrayList productList=ConnectionDAO.sqlSelect(productQuery.toString());
		
		productQuery=null;
		StringBuilder checkQuery=new StringBuilder();
		checkQuery.append("select DEAL_CHARGE_DTL_ID from cr_deal_txncharges_dtl_emi_calc where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		logger.info("checkQuery: "+checkQuery);
		boolean status = ConnectionDAO.checkStatus(checkQuery.toString());
		
		checkQuery=null;
		if(!status)
		{
			
		  for(int i=0;i<productList.size();i++)
		  {
			  ArrayList subproductList=(ArrayList)productList.get(i);
			  if(subproductList.size()>0)
			  {
				   StringBuffer chargeStr=new StringBuffer();				  
                   if(!CommonFunction.checkNull(subproductList.get(2)).equalsIgnoreCase(""))
                	   chargeStr.append("2;"+subproductList.get(2)+"|");
                   if(!CommonFunction.checkNull(subproductList.get(3)).equalsIgnoreCase(""))
                	   chargeStr.append("3;"+CommonFunction.checkNull(subproductList.get(3))+"|");                   
                    String bpStr="CS;"+custId+"|";
					String dealLoanId=CommonFunction.checkNull(subproductList.get(4));
					int loanDId=0;
					if(!dealLoanId.equalsIgnoreCase(""))
						loanDId=Integer.parseInt(dealLoanId);					
					logger.info(" STAGE INFO: "+dealCap+"DealLoanId from crdealLoandtl: "+loanDId+ " Total Charges: "+chargeStr+ " bpStr:  "+bpStr+ " Product: "+subproductList.get(0)+ " Scheme: "+subproductList.get(1));
					ArrayList<Object> in =new ArrayList<Object>();
					ArrayList<Object> out =new ArrayList<Object>();
					ArrayList outMessages = new ArrayList();					
					StringBuilder s1=new StringBuilder();
					StringBuilder s2=new StringBuilder();
					try 
					{
						in.add(dealCap);
						in.add(loanDId);
						in.add(CommonFunction.checkNull(subproductList.get(0)).toString());
						in.add(CommonFunction.checkNull(subproductList.get(1)).toString());
						in.add(chargeStr.toString());
						in.add(bpStr);
						out.add(s1);
						out.add(s2);					
						outMessages=(ArrayList) ConnectionDAO.callSP("Get_charges_emi_calc",in,out);
						if(outMessages!=null && outMessages.size()>0)
						{
							s1.append(CommonFunction.checkNull(outMessages.get(0)));
														
							if(s1!=null && s1.toString().equalsIgnoreCase("S"))
							{
								
								message=s1.toString();
								logger.info("Procedure s1----"+s1);
							}
							else if(s1!=null && s1.toString().equalsIgnoreCase("E"))
							{
								s2.append(CommonFunction.checkNull(outMessages.get(1)));
								logger.info("Procedure Error Message----"+s2);
								message=s2.toString();
							}	
							logger.info("s1:::::::::::::::::::::::::::"+s1);
							logger.info("s2:::::::::::::::::::::::::::"+s2);
							
							s1=null;
							s2=null;
						}
					}
					catch (Exception e) 
					{e.printStackTrace();}
					finally
					{	
						
						in=null;
						out=null;
						outMessages=null;
					}
			  	}
			 }	
		  
		}
	} 
	catch (Exception e) 
	{e.printStackTrace();}	
return message;

}


public ArrayList getchargesDtlForEmiCalc(String dealCap, String dealId) {
	ArrayList list =new ArrayList();	
	try
	{			
		ChargeVo vo =null;
		StringBuilder query=new StringBuilder();
		query.append("select DEAL_CHARGE_DTL_ID,DEAL_CHARGE_TYPE,DEAL_CHARGE_CODE,CHARGE_DESC,");
		query.append("DEAL_CHARGE_CALCULATED_AMOUNT,DEAL_CHARGE_FINAL_AMOUNT,p.DEAL_LOAN_AMOUNT,(");
		query.append("ISNULL(P.DEAL_ASSET_COST,0)-");
		query.append("ISNULL(P.DEAL_LOAN_AMOUNT,0)) AS 'MARGIN AMOUNT',");
		query.append("DEAL_CHARGE_CALCULATED_ON,");
		//query.append("if(DEAL_CHARGE_METHOD='P','PERCENTAGE','FLAT'),if(DEAL_CHARGE_TAX_INCLUSIVE='N','NO','YES'),");
		query.append("case when DEAL_CHARGE_METHOD='P' then 'PERCENTAGE' else 'FLAT' end as DEAL_CHARGE_METHOD,");
	    query.append("case when DEAL_CHARGE_TAX_INCLUSIVE='N' then 'NO' else 'YES' end as DEAL_CHARGE_TAX_INCLUSIVE,");
		query.append("DEAL_CHARGE_TAX_RATE1,DEAL_CHARGE_TAX_RATE2,");
		//IF(DEAL_CHARGE_BP_TYPE='CS','CUSTOMER','CS'),if(DEAL_MIN_CHARGE_METHOD='P','PERCENTAGE','FLAT'),DEAL_CHARGE_MIN_CHARGE_AMOUNT,");
		query.append("case when DEAL_CHARGE_BP_TYPE='CS' then 'CUSTOMER' else 'CS' end as DEAL_CHARGE_BP_TYPE,");
		query.append("case when DEAL_MIN_CHARGE_METHOD='P' then 'PERCENTAGE' else 'FLAT' end as DEAL_MIN_CHARGE_METHOD,");
		query.append("DEAL_CHARGE_TAX_APPLICABLE,DEAL_CHARGE_TDS_APPLICABLE,DEAL_CHARGE_TAX_AMOUNT1,DEAL_CHARGE_TAX_AMOUNT2,DEAL_CHARGE_MIN_CHARGE_AMOUNT,DEAL_CHARGE_TDS_RATE,DEAL_CHARGE_TDS_AMOUNT,DEAL_CHARGE_NET_AMOUNT,DEAL_CHARGE_APPLICATION_STAGE,'NEW CUSTOMER' ");
		query.append("from cr_deal_txncharges_dtl_emi_calc t left join com_charge_code_m c on t.DEAL_CHARGE_CODE=c.CHARGE_CODE ");
		query.append("left join cr_deal_loan_dtl_emi_calc p on p.DEAL_ID=t.DEAL_ID ");
		query.append("where  t.DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+" ");
		logger.info("getchargesDtlForEmiCalcu in deal  query::::::::::::::::"+query);
		ArrayList charges = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getchargesDtlForEmiCalcu in deal  size::::::::::::::"+charges.size());
		
		query=null;
		
		for(int i=0;i<charges.size();i++){
		ArrayList subcharges=(ArrayList)charges.get(i);
		if(subcharges.size()>0)	
		{
			vo = new ChargeVo();
			vo.setChargeId((CommonFunction.checkNull(subcharges.get(0))).trim());
			
			if((CommonFunction.checkNull(subcharges.get(1)).trim()).equals("R"))
			{
				vo.setChargeType("Receivable");
			}
			else if((CommonFunction.checkNull(subcharges.get(1)).trim()).equals("P"))
			{
				vo.setChargeType("Payable");
			}
			vo.setChargeCode((CommonFunction.checkNull(subcharges.get(2))).trim());
			vo.setChargeDesc((CommonFunction.checkNull(subcharges.get(3))).trim());
			
			if(!CommonFunction.checkNull(subcharges.get(4)).equalsIgnoreCase(""))
    		{
   	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(4))).trim());
   	    		vo.setChargeCal(myFormatter.format(reconNum));
    		}
			
			if(!CommonFunction.checkNull(subcharges.get(5)).equalsIgnoreCase(""))
    		{
   	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(5))).trim());
   	    		vo.setChargeFinal(myFormatter.format(reconNum));
    		}
		
			vo.setLoanAmount((CommonFunction.checkNull(subcharges.get(6))).trim());
			
			vo.setMarginAmount((CommonFunction.checkNull(subcharges.get(7))).trim());
			vo.setChargeCalculatedOn((CommonFunction.checkNull(subcharges.get(8))).trim());
			
			vo.setChargeMethod((CommonFunction.checkNull(subcharges.get(9))).trim());
			vo.setTaxsInclusive((CommonFunction.checkNull(subcharges.get(10))).trim());
			
			if(!CommonFunction.checkNull(subcharges.get(11)).equalsIgnoreCase(""))
    		{
   	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(11))).trim());
   	    		vo.setTaxtRat1(myFormatter.format(reconNum));
    		}
			if(!CommonFunction.checkNull(subcharges.get(12)).equalsIgnoreCase(""))
    		{
   	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(12))).trim());
   	    		logger.info("setTaxtRat2: "+reconNum);
   	    		vo.setTaxtRat2(myFormatter.format(reconNum));
    		}
			
			vo.setChargeBPType((CommonFunction.checkNull(subcharges.get(13))).trim());
			vo.setMinChargeMethod((CommonFunction.checkNull(subcharges.get(14))).trim());
			
			//vo.setMinChargeAmount((CommonFunction.checkNull(subcharges.get(14))).trim());
			vo.setDealChargeTaxApp((CommonFunction.checkNull(subcharges.get(15))).trim());
			vo.setDealChargeTdsApp((CommonFunction.checkNull(subcharges.get(16))).trim());
			if(!CommonFunction.checkNull(subcharges.get(17)).equalsIgnoreCase(""))
    		{
   	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(17))).trim());
   	    		vo.setDealChargeTaxAmount1(myFormatter.format(reconNum));
    		}
			if(!CommonFunction.checkNull(subcharges.get(18)).equalsIgnoreCase(""))
    		{
   	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(18))).trim());
   	    		logger.info("setTaxtRat2: "+reconNum);
   	    		vo.setDealChargeTaxAmount2(myFormatter.format(reconNum));
    		}
			if(!CommonFunction.checkNull(subcharges.get(19)).equalsIgnoreCase(""))
			{
	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(19))).trim());
	    		vo.setDealChargeMinChargeAmount(myFormatter.format(reconNum));
    	    }
			if(!CommonFunction.checkNull(subcharges.get(20)).equalsIgnoreCase(""))
    	    {
	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(20))).trim());
	    		logger.info("setTaxtRat2: "+reconNum);
	    		vo.setDealChargeTdsRate(myFormatter.format(reconNum));
    	    }
			if(!CommonFunction.checkNull(subcharges.get(21)).equalsIgnoreCase(""))
    	    {
	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(21))).trim());
	    		vo.setDealChargeTdsAmount(myFormatter.format(reconNum));
    	    }
			if(!CommonFunction.checkNull(subcharges.get(22)).equalsIgnoreCase(""))
    	    {
	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(22))).trim());
	    		logger.info("setTaxtRat2: "+reconNum);
	    		vo.setDealChargeNetAmount(myFormatter.format(reconNum));
    	    }
			vo.setApplStage(CommonFunction.checkNull(subcharges.get(23)));
			vo.setChargeBPId(CommonFunction.checkNull(subcharges.get(24)));	
			list.add(vo);
		 }
		}
	}
	catch (Exception e) 
	{e.printStackTrace();}
	return list;
}


public String callRefreshChargesDetailProForEmiCalc(String dealCap, String dealId) {

	String message="";
	boolean status=false;
	int dId = Integer.parseInt(dealId);
	StringBuilder custId=new StringBuilder();
	ArrayList productList=null;
	try
	{
			
			StringBuilder productQuery=new StringBuilder();
			 productQuery.append("select DEAL_PRODUCT,DEAL_SCHEME,DEAL_LOAN_AMOUNT,DEAL_MARGIN_AMOUNT,DEAL_LOAN_ID from cr_deal_loan_dtl_emi_calc where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
			logger.info("callRefreshChargesDetailPro in deal productQuery: "+productQuery);
			productList=ConnectionDAO.sqlSelect(productQuery.toString());
			logger.info("callRefreshChargesDetailPro in deal productQuery: "+productList);
			productQuery=null;
			
			for(int i=0;i<productList.size();i++)
			{
				ArrayList subproductList=(ArrayList)productList.get(i);
				if(subproductList.size()>0)
				{
					StringBuffer chargeStr=new StringBuffer();
					if(!CommonFunction.checkNull(subproductList.get(2)).equalsIgnoreCase(""))
						chargeStr.append("2;"+subproductList.get(2)+"|");
					if(!CommonFunction.checkNull(subproductList.get(3)).equalsIgnoreCase(""))
						chargeStr.append("3;"+CommonFunction.checkNull(subproductList.get(3))+"|");
					String bpStr="CS;"+custId+"|";
					String dealLoanId=CommonFunction.checkNull(subproductList.get(4));
					int loanDId=0;
					if(!dealLoanId.equalsIgnoreCase(""))
						loanDId=Integer.parseInt(dealLoanId);
					ArrayList<Object> in =new ArrayList<Object>();
					ArrayList<Object> out =new ArrayList<Object>();
					ArrayList outMessages = new ArrayList();
					StringBuilder s1=new StringBuilder();
					StringBuilder s2=new StringBuilder();
					try 
					{		
						in.add(dealCap);
						in.add(loanDId);
						in.add(CommonFunction.checkNull(subproductList.get(0)).toString());
						in.add(CommonFunction.checkNull(subproductList.get(1)).toString());
						in.add(chargeStr.toString());
						in.add(bpStr);
						out.add(s1);
						out.add(s2);
						logger.info(" STAGE INFO: "+dealCap+"DealLoanId from crdealLoandtl: "+loanDId+ " Total Charges: "+chargeStr+ " customer Id:  "+bpStr+ " Product: "+subproductList.get(0)+ " Scheme: "+subproductList.get(1));
						logger.info("callRefreshChargesDetailPro in Get_charges_emi_calc");
						outMessages=(ArrayList) ConnectionDAO.callSP("Get_charges_emi_calc",in,out);
						if(outMessages!=null && outMessages.size()>0)
						{
							s1.append(CommonFunction.checkNull(outMessages.get(0)));							
							if(s1!=null && s1.toString().equalsIgnoreCase("S"))
							{
								message=s1.toString();
								logger.info("Get_charges_emi_calc Procedure s1----"+s1);
							}
							else if(s1!=null && s1.toString().equalsIgnoreCase("E"))
							{
								s2.append(CommonFunction.checkNull(outMessages.get(1)));
								logger.info("Get_charges_emi_calc Procedure Error Message----"+s2);
								message=s2.toString();
							}					
						}		
					} 
					catch (Exception e) 
					{e.printStackTrace();}
					finally
					{
						s1=null;
						s2=null;
						in=null;
						out=null;
						outMessages=null;	
						chargeStr=null;
						bpStr=null;
						dealLoanId=null;
					}
				}
			}
		}
		catch (Exception e) 
		{e.printStackTrace();}
		finally
		{
			custId=null;
			productList=null;			
		}
		return message;

}


public ArrayList refreshchargesDetailForEmiCalc(String dealCap, String dealId) {

	
	ArrayList list =new ArrayList();
	ChargeVo vo =null;
	StringBuilder query=new StringBuilder();
	ArrayList charges=null;
	ArrayList subcharges=null;
	try
	{
		query.append("select DEAL_CHARGE_DTL_ID,DEAL_CHARGE_TYPE,DEAL_CHARGE_CODE,CHARGE_DESC,");
		query.append("DEAL_CHARGE_CALCULATED_AMOUNT,DEAL_CHARGE_FINAL_AMOUNT,p.DEAL_LOAN_AMOUNT,(");
		query.append("ISNULL(P.DEAL_ASSET_COST,0)-");
		query.append("ISNULL(P.DEAL_LOAN_AMOUNT,0)) AS 'MARGIN AMOUNT',");
		query.append("DEAL_CHARGE_CALCULATED_ON,");
		query.append("case when DEAL_CHARGE_METHOD='P' then 'PERCENTAGE' else 'FLAT' end as DEAL_CHARGE_METHOD,");
	    query.append("case when DEAL_CHARGE_TAX_INCLUSIVE='N' then 'NO' else 'YES' end as DEAL_CHARGE_TAX_INCLUSIVE,");
		query.append("DEAL_CHARGE_TAX_RATE1,DEAL_CHARGE_TAX_RATE2,");
		query.append("case when DEAL_CHARGE_BP_TYPE='CS' then 'CUSTOMER' else 'CS' end as DEAL_CHARGE_BP_TYPE,");
		query.append("case when DEAL_MIN_CHARGE_METHOD='P' then 'PERCENTAGE' else 'FLAT' end as DEAL_MIN_CHARGE_METHOD,");
		query.append("DEAL_CHARGE_TAX_APPLICABLE,DEAL_CHARGE_TDS_APPLICABLE,DEAL_CHARGE_TAX_AMOUNT1,DEAL_CHARGE_TAX_AMOUNT2,DEAL_CHARGE_MIN_CHARGE_AMOUNT,DEAL_CHARGE_TDS_RATE,DEAL_CHARGE_TDS_AMOUNT,DEAL_CHARGE_NET_AMOUNT,DEAL_CHARGE_APPLICATION_STAGE,'NEW CUSTOMER' ");
		query.append("from cr_deal_txncharges_dtl_emi_calc t left join com_charge_code_m c on t.DEAL_CHARGE_CODE=c.CHARGE_CODE ");
		query.append("left join cr_deal_loan_dtl_emi_calc p on p.DEAL_ID=t.DEAL_ID ");
		query.append("where  t.DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+" ");
		
		logger.info("refreshchargesDetail for getting charges in deal query:::::::::::"+query);
		charges = ConnectionDAO.sqlSelect(query.toString());

		for(int i=0;i<charges.size();i++)
		{
			subcharges=(ArrayList)charges.get(i);
			if(subcharges.size()>0)	
			{
				vo = new ChargeVo();
				vo.setChargeId((CommonFunction.checkNull(subcharges.get(0))).trim());
				if((CommonFunction.checkNull(subcharges.get(1)).trim()).equals("R"))
				vo.setChargeType("Receivable");
				else if((CommonFunction.checkNull(subcharges.get(1)).trim()).equals("P"))
				vo.setChargeType("Payable");
				vo.setChargeCode((CommonFunction.checkNull(subcharges.get(2))).trim());
				vo.setChargeDesc((CommonFunction.checkNull(subcharges.get(3))).trim());
				if(!CommonFunction.checkNull(subcharges.get(4)).equalsIgnoreCase(""))
	    	    {
		    	 		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(4))).trim());
		    	   		vo.setChargeCal(myFormatter.format(reconNum));
	    	    }
				if(!CommonFunction.checkNull(subcharges.get(5)).equalsIgnoreCase(""))
	    	    {
		    	   		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(5))).trim());
		    	   		vo.setChargeFinal(myFormatter.format(reconNum));
	    	    }					
				vo.setLoanAmount((CommonFunction.checkNull(subcharges.get(6))).trim());
				vo.setMarginAmount((CommonFunction.checkNull(subcharges.get(7))).trim());
				vo.setChargeCalculatedOn((CommonFunction.checkNull(subcharges.get(8))).trim());
				vo.setChargeMethod((CommonFunction.checkNull(subcharges.get(9))).trim());
				vo.setTaxsInclusive((CommonFunction.checkNull(subcharges.get(10))).trim());
				if(!CommonFunction.checkNull(subcharges.get(11)).equalsIgnoreCase(""))
	    	    {
		    	 		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(11))).trim());
		    	   		vo.setTaxtRat1(myFormatter.format(reconNum));
	    	    }
				if(!CommonFunction.checkNull(subcharges.get(12)).equalsIgnoreCase(""))
	    	    {
		    	   		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(12))).trim());
		    	   		logger.info("setTaxtRat2: "+reconNum);
		    	   		vo.setTaxtRat2(myFormatter.format(reconNum));
	    	    }
				vo.setChargeBPType((CommonFunction.checkNull(subcharges.get(13))).trim());
				vo.setMinChargeMethod((CommonFunction.checkNull(subcharges.get(14))).trim());
				//vo.setMinChargeCalculatedOn((CommonFunction.checkNull(subcharges.get(15))).trim());
				vo.setDealChargeTaxApp((CommonFunction.checkNull(subcharges.get(15))).trim());
				vo.setDealChargeTdsApp((CommonFunction.checkNull(subcharges.get(16))).trim());
				if(!CommonFunction.checkNull(subcharges.get(17)).equalsIgnoreCase(""))
	    	    {
		    	  		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(17))).trim());
		    	   		vo.setDealChargeTaxAmount1(myFormatter.format(reconNum));
	    	    }
				if(!CommonFunction.checkNull(subcharges.get(18)).equalsIgnoreCase(""))
	    	    {
		    	   		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(18))).trim());
		    	   		vo.setDealChargeTaxAmount2(myFormatter.format(reconNum));
	    	    }				
				if(!CommonFunction.checkNull(subcharges.get(19)).equalsIgnoreCase(""))
	    	    {
		    	 		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(19))).trim());
		    	   		vo.setDealChargeMinChargeAmount(myFormatter.format(reconNum));
	    	    }
				if(!CommonFunction.checkNull(subcharges.get(20)).equalsIgnoreCase(""))
	    	    {
		    	   		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(20))).trim());
		    	   		vo.setDealChargeTdsRate(myFormatter.format(reconNum));
	    	    }
				if(!CommonFunction.checkNull(subcharges.get(21)).equalsIgnoreCase(""))
	    	    {
		    	   		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(21))).trim());
		    	   		vo.setDealChargeTdsAmount(myFormatter.format(reconNum));
	    	    }
			
				if(!CommonFunction.checkNull(subcharges.get(22)).equalsIgnoreCase(""))
	    	    {
		    	   		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subcharges.get(22))).trim());
		    	   		vo.setDealChargeNetAmount(myFormatter.format(reconNum));
	    	    }	
				
				vo.setApplStage(CommonFunction.checkNull(subcharges.get(23)));		
				vo.setChargeBPId(CommonFunction.checkNull(subcharges.get(24)));		
				list.add(vo);
		  }
		}
	}
	catch (Exception e) 
	{e.printStackTrace();}
	finally
	{
		vo =null;
		query=null;
		charges=null;
		subcharges=null;
	}
	return list;

}


public boolean updatesecuritydepositForEmiCal(ChargeVo vo, String dealId) {
	StringBuffer bufInsSql =	new StringBuffer();
	qryList=new ArrayList();
	boolean status=false;
	String amt="";
	StringBuilder query=new StringBuilder();
	 query.append("select DEAL_CHARGE_CALCULATED_AMOUNT from  cr_deal_txncharges_dtl_emi_calc where DEAL_ID='"+dealId+"' and DEAL_CHARGE_CODE=103 limit 1");
	amt = CommonFunction.checkNull(ConnectionDAO.singleReturn(query.toString()));
	logger.info("In updatesecuritydepositForEmiCal() SD Amount to be--------------"+amt);
	
	query=null;
	
	if(amt=="")
		amt="0.00";
	
	if(Double.parseDouble(CommonFunction.checkNull(amt).trim())==0.00){
	bufInsSql.append("update cr_deal_sd_emi_calc_m set SD_INTEREST_TYPE=?,SD_INTEREST_RATE=?,SD_INTEREST=? where DEAL_ID='"+dealId+"'");
	PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
	
	
		insertPrepStmtObject.addString("N");
	
		try {
			insertPrepStmtObject.addString(myFormatter.parse("0.00").toString());
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		try {
			insertPrepStmtObject.addString(myFormatter.parse("0.00").toString());
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		finally
		{
			
			query=null;
			
		}
	logger.info("ibufInsUpdSql.toString()" + bufInsSql.toString());
	insertPrepStmtObject.setSql(bufInsSql.toString());
	logger.info("IN updatesecuritydeposit query1------------------->"+ insertPrepStmtObject.printQuery());

	qryList.add(insertPrepStmtObject);
	try {
		status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
	} catch (RemoteException e) {
		e.printStackTrace();
	} catch (SQLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	}
	return status;
	
}


public ArrayList getTenureAmountInDealForEmiCalc(String dealId) {
	ArrayList list=new ArrayList();
	try
	{
	  ArrayList searchlist=new ArrayList();
	  logger.info("In getTenureAmountInDealForEmiCalc....................");
	  StringBuffer bufInsSql =	new StringBuffer();

	  bufInsSql.append("select TOP 1 DEAL_TENURE,DEAL_CHARGE_FINAL_AMOUNT from  cr_deal_loan_dtl_emi_calc L,cr_deal_txncharges_dtl_emi_calc C where L.DEAL_ID="+dealId+" and L.DEAL_ID=C.DEAL_ID and c.DEAL_CHARGE_CODE=103 ");
		  
		  logger.info("In getTenureAmountInDealForEmiCalc......... query..........."+bufInsSql.toString());
	      searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());
	      
	      bufInsSql=null;
	
	  for(int i=0;i<searchlist.size();i++){
	  logger.info("getTenureAmountInDealForEmiCalc  List:::::::"+searchlist.get(i));
	  ArrayList data=(ArrayList)searchlist.get(i);
	  if(data.size()>0)
	  {
		 TenureAmountVo receiptvo = new TenureAmountVo();
		 receiptvo.setTenure((CommonFunction.checkNull(data.get(0)).trim()));
		 receiptvo.setSecurityAmount((CommonFunction.checkNull(data.get(1)).trim()));
		 list.add(receiptvo);	
	   }
	  }

	}catch(Exception e){
		e.printStackTrace();
			}
	return  list;	

}



public ArrayList<Object> getSecurityDetailAllInDealForEmiCalc(String dealId) {
	SecurityDepositVO appl = new SecurityDepositVO();
	ArrayList<Object> list = new ArrayList<Object>();
	 

	try {
		StringBuilder query=new StringBuilder();
		 query.append("select DEAL_LOAN_ID,DEAL_ID,SD_AMOUNT,SD_INTEREST_TYPE,SD_INTEREST_RATE,SD_COMPOUNDING_FREQ,SD_TENURE,SD_INTEREST,SD_ADJUSTMENT from cr_deal_sd_emi_calc_m S where DEAL_ID=" + dealId);

		ArrayList appdetails = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getSecurityDetailAllInDealForEmiCalc::::::::::::" + appdetails.size());
		
		query=null;
		for (int i = 0; i < appdetails.size(); i++) {

			ArrayList adetails1 = (ArrayList) appdetails.get(i);
			for (int k = 0; k < adetails1.size(); k++) {

				appl = new SecurityDepositVO();
				appl.setTxnType((CommonFunction.checkNull(adetails1.get(0)).trim()));
				appl.setTxnId((CommonFunction.checkNull(adetails1.get(1)).trim()));
				
				if(!CommonFunction.checkNull(adetails1.get(2)).trim().equalsIgnoreCase(""))
	    		{
					Number reconNum =myFormatter.parse((CommonFunction.checkNull(adetails1.get(2))).trim());  
    	    		 appl.setSecurityAmount(myFormatter.format(reconNum));
	    		}
				
				if((CommonFunction.checkNull(adetails1.get(3)).trim()).equalsIgnoreCase("N"))
				{
					appl.setInterestType("NO");
				}
				else 	if((CommonFunction.checkNull(adetails1.get(3)).trim()).equalsIgnoreCase("S"))
				{
					appl.setInterestType("SIMPLE");
				}
				else 	if((CommonFunction.checkNull(adetails1.get(3)).trim()).equalsIgnoreCase("C"))
				{
					appl.setInterestType("COMPOUND");
				}
				
				if(!CommonFunction.checkNull(adetails1.get(4)).trim().equalsIgnoreCase(""))
	    		{
    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(adetails1.get(4))).trim());  
    	    		appl.setInterestRate(myFormatter.format(reconNum));
	    		}
				appl.setCompoundFrequency((CommonFunction.checkNull(adetails1.get(5)).trim()));
				appl.setTenure((CommonFunction.checkNull(adetails1.get(6)).trim()));
				if(!CommonFunction.checkNull(adetails1.get(7)).trim().equalsIgnoreCase(""))
	    		{
    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(adetails1.get(7))).trim());  
    	    		appl.setRelatedInterest(myFormatter.format(reconNum));
	    		}
				appl.setSdAdjust((CommonFunction.checkNull(adetails1.get(8)).trim()));

			}

			list.add(appl);
		}
	} catch (Exception e) {
		e.printStackTrace();
	}
	logger.info("Value of List is in dao is==" + list);
	return list;
}


public boolean saveSecurityDepositInDealForEmiCalc(SecurityDepositVO vo) {
	SecurityDepositVO cv = (SecurityDepositVO) vo;
	ArrayList qryList = new ArrayList();
	StringBuffer bufInsSql = new StringBuffer();
	PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
	boolean status = false;
	try {
		StringBuilder loanDealQuery=new StringBuilder();
		loanDealQuery.append("select ");
		if(dbType.equalsIgnoreCase("MSSQL"))
			{
			  loanDealQuery.append(" TOP 1 ");
			}
		 loanDealQuery.append("DEAL_LOAN_ID from cr_deal_loan_dtl_emi_calc where DEAL_ID="+vo.getDealId()+"  ");
		logger.info("query:::::::::::::"+loanDealQuery);
		String loanDealId=ConnectionDAO.singleReturn(loanDealQuery.toString());
		
		logger.info("loanDealId:::::::::::"+loanDealId);
		loanDealQuery=null;
		
		StringBuilder q1=new StringBuilder();
		q1.append("select count(*) from cr_deal_sd_emi_calc_m where DEAL_ID="+vo.getDealId());
		logger.info("query:::::::::::::::::::::::::::"+q1);
		String status1=ConnectionDAO.singleReturn(q1.toString());
		
		q1=null;
		
	if(status1.equalsIgnoreCase("0"))
	{
		bufInsSql.append("Insert into cr_deal_sd_emi_calc_m(DEAL_LOAN_ID,DEAL_ID,SD_AMOUNT,SD_INTEREST_TYPE,SD_INTEREST_RATE,SD_COMPOUNDING_FREQ,SD_TENURE,SD_INTEREST,SD_ADJUSTMENT,REC_STATUS,MAKER_ID,MAKER_DATE)");

		bufInsSql.append(" values ( ");
		bufInsSql.append(" '"+loanDealId+"',");
		bufInsSql.append(" ?,");
		bufInsSql.append(" ?,");
		bufInsSql.append(" ?,");
		bufInsSql.append(" ?,");
		bufInsSql.append(" ?,");
		bufInsSql.append(" ?,");
		bufInsSql.append(" ?,");
		bufInsSql.append(" ?,");
		bufInsSql.append(" 'P',");
		bufInsSql.append(" ?,");
		//bufInsSql.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND) )");
		bufInsSql.append(dbo);
		bufInsSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) )");

		if (CommonFunction.checkNull(cv.getDealId()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getDealId()).trim()));

		
		if (CommonFunction.checkNull(cv.getSecurityAmount()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(cv.getSecurityAmount()).trim())).toString());
		
		
		if (CommonFunction.checkNull(cv.getInterestType()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getInterestType()).trim()));
		
		if (CommonFunction.checkNull(cv.getInterestRate()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(cv.getInterestRate()).trim())).toString());
				
		logger.info("Compound Fre: " +cv.getCompoundFrequency());
		if (CommonFunction.checkNull(cv.getCompoundFrequency()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getCompoundFrequency()).trim()));
		if (CommonFunction.checkNull(cv.getTenure()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getTenure()).trim()));

		
		
		if (CommonFunction.checkNull(cv.getRelatedInterest()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(cv.getRelatedInterest()).trim())).toString());

		
		if (CommonFunction.checkNull(cv.getSdAdjust()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getSdAdjust()).trim()));

		
		if (CommonFunction.checkNull(cv.getUserId()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getUserId()).trim()));

		if (CommonFunction.checkNull(cv.getBussinessDate()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getBussinessDate()).trim()));

		logger.info("ibufInsUpdSql.toString()" + bufInsSql.toString());
		insertPrepStmtObject.setSql(bufInsSql.toString());

		logger.info("IN security deposit insert query1 ::::::::::::::::::::::::::"+ insertPrepStmtObject.printQuery());

		qryList.add(insertPrepStmtObject);
		status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
		logger.info("In security deposit......................" + status);
	 }
	
	else
	{
		bufInsSql.append("update cr_deal_sd_emi_calc_m set SD_INTEREST_TYPE=?,SD_INTEREST_RATE=?,SD_COMPOUNDING_FREQ=?,SD_INTEREST=?,SD_AMOUNT=?, SD_ADJUSTMENT=?,SD_TENURE=?,MAKER_ID=?,MAKER_DATE=");
		//bufInsSql.append(DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND) where DEAL_ID=?");
		bufInsSql.append(dbo);
		bufInsSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ");
		bufInsSql.append(" where DEAL_ID=?");
		
		if (CommonFunction.checkNull(cv.getInterestType()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getInterestType()).trim()));
		if (CommonFunction.checkNull(cv.getInterestRate()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(cv.getInterestRate()).trim())).toString());
		if (CommonFunction.checkNull(cv.getCompoundFrequency()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getCompoundFrequency()).trim()));
		
		if (CommonFunction.checkNull(cv.getRelatedInterest()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(cv.getRelatedInterest()).trim())).toString());
		
		if (CommonFunction.checkNull(cv.getSecurityAmount()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(cv.getSecurityAmount()).trim())).toString());
		
		if (CommonFunction.checkNull(cv.getSdAdjust()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getSdAdjust()).trim()));
		
		
		if (CommonFunction.checkNull(cv.getTenure()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getTenure()).trim()));
		//==========================================================
		if (CommonFunction.checkNull(cv.getUserId()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getUserId()).trim()));
	

		if (CommonFunction.checkNull(cv.getBussinessDate()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getBussinessDate()).trim()));			
		//==========================================================
	

		if (CommonFunction.checkNull(cv.getDealId()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((CommonFunction.checkNull(cv.getDealId()).trim()));


		logger.info("ibufInsUpdSql.toString()::::::::::::::::::" + bufInsSql.toString());
		insertPrepStmtObject.setSql(bufInsSql.toString());

		logger.info("IN security Deposit update query1 ::::::::::"+ insertPrepStmtObject.printQuery());

		qryList.add(insertPrepStmtObject);
		status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
		logger.info("In security Deposit......................" + status);
		
		bufInsSql=null;
	}
	} catch (Exception e) {
		e.printStackTrace();
	}
	return status;
}


public ArrayList getLoanDetailSchemeForEmiCal(String scheme,String bdate) {
	ArrayList<Object> list=new ArrayList<Object>();
	try{
		
	  StringBuilder query=new StringBuilder();
	  query.append("SELECT TOP 1 DEFAULT_MARGIN_RATE,RATE_TYPE,RATE_METHOD,S.BASE_RATE_TYPE,B.BASE_RATE,DEF_FLAT_RATE,DEF_EFF_RATE,");
	  query.append("DEF_TENURE,REPAYMENT_FREQ,INSTALLMENT_TYPE,REPAYMENT_MODE,INSTALLMENT_MODE ,P.REPAYMENT_TYPE,P.REVOLVING_FLAG,");
	  query.append("MIN_MARGIN_RATE,MAX_MARGIN_RATE,MIN_TENURE,MAX_TENURE,MIN_AMT_FIN,MAX_AMT_FIN,P.ASSET_FLAG from cr_scheme_m S");
	  query.append("LEFT JOIN cr_base_rate_m B ON S.BASE_RATE_TYPE=B.BASE_RATE_TYPE AND B.rec_status='A' and b.EFFECTIVE_FROM <=");
	  query.append(dbo);
	  query.append("STR_TO_DATE('"+bdate+"','"+dateFormat+"') ");
	  query.append(" LEFT JOIN cr_product_m P ON S.PRODUCT_ID=P.PRODUCT_ID");
	  query.append(" where SCHEME_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(scheme)).trim()+" AND S.REC_STATUS='A'  order by b.EFFECTIVE_FROM desc " );

	logger.info("getLoanDetailScheme:::::::::::::::"+query);
	SchemeVo schemeVo = null;
	ArrayList schemedeatail = ConnectionDAO.sqlSelect(query.toString());
	logger.info("getLeadEntryList"+schemedeatail.size());
	
	query=null;
	
	for(int i=0;i<schemedeatail.size();i++){

		logger.info("getLeadEntryList"+schemedeatail.get(i).toString());
		ArrayList schemedeatail1=(ArrayList)schemedeatail.get(i);
		if(schemedeatail1.size()>0)
		{
			logger.info("getLeadEntryList"+schemedeatail1.size());
			schemeVo = new SchemeVo();
			if(!CommonFunction.checkNull(schemedeatail1.get(0)).equalsIgnoreCase(""))
			{
			Number reconNum =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(0))).trim());
			schemeVo.setDefMarginRate(myFormatter.format(reconNum));
			}
			schemeVo.setRateTYPE((CommonFunction.checkNull(schemedeatail1.get(1))).trim());
			schemeVo.setRateMethod((CommonFunction.checkNull(schemedeatail1.get(2))).trim());
			schemeVo.setBaseRateType((CommonFunction.checkNull(schemedeatail1.get(3))).trim());
			if(!CommonFunction.checkNull(schemedeatail1.get(4)).equalsIgnoreCase(""))
			{
				Number reconNumb =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(4))).trim());
				schemeVo.setBaseRate(myFormatter.format(reconNumb));
			}
			if(!CommonFunction.checkNull(schemedeatail1.get(5)).equalsIgnoreCase(""))
			{
				Number reconNumd =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(5))).trim());
				schemeVo.setDefFlatRate(myFormatter.format(reconNumd));
			}
			else
			{
				schemeVo.setDefFlatRate("0.0000000");
			}
			if(!CommonFunction.checkNull(schemedeatail1.get(6)).equalsIgnoreCase(""))
			{
				Number reconNume =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(6))).trim());
				schemeVo.setDefEffRate(myFormatter.format(reconNume));
			}
			else
			{
				schemeVo.setDefEffRate("0.0000000");
			}
			schemeVo.setDefTenure((CommonFunction.checkNull(schemedeatail1.get(7))).trim());
			schemeVo.setRepaymentFREQ((CommonFunction.checkNull(schemedeatail1.get(8))).trim());
			schemeVo.setInstallmentTYPE((CommonFunction.checkNull(schemedeatail1.get(9))).trim());
			schemeVo.setRepaymentMODE((CommonFunction.checkNull(schemedeatail1.get(10))).trim());
			schemeVo.setInstallmentMODE((CommonFunction.checkNull(schemedeatail1.get(11))).trim());
			schemeVo.setRepaymentType((CommonFunction.checkNull(schemedeatail1.get(12))).trim());
			schemeVo.setRevolvingFlag((CommonFunction.checkNull(schemedeatail1.get(13))).trim());
			if(!CommonFunction.checkNull(schemedeatail1.get(14)).equalsIgnoreCase(""))
			{	
				Number reconNumm =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(14))).trim());
				schemeVo.setMinMarginRate(myFormatter.format(reconNumm));
			}
			if(!CommonFunction.checkNull(schemedeatail1.get(15)).equalsIgnoreCase(""))
			{	
				Number reconNumR =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(15))).trim());
				schemeVo.setMaxMarginRate(myFormatter.format(reconNumR));
			}
			schemeVo.setMinTenure((CommonFunction.checkNull(schemedeatail1.get(16))).trim());
			schemeVo.setMaxTenure((CommonFunction.checkNull(schemedeatail1.get(17))).trim());
		
			if(!CommonFunction.checkNull(schemedeatail1.get(18)).equalsIgnoreCase(""))
			{
				Number reconNumf =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(18))).trim());
				schemeVo.setMinFinance(myFormatter.format(reconNumf));
			}
			if(!CommonFunction.checkNull(schemedeatail1.get(19)).equalsIgnoreCase(""))
			{
				Number reconNummF =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(19))).trim());
				schemeVo.setMaxFinance(myFormatter.format(reconNummF));
			}
			schemeVo.setAssetFlag((CommonFunction.checkNull(schemedeatail1.get(20))).trim());
			list.add(schemeVo);
		}
	}
	}catch(Exception e){
		e.printStackTrace();
	}
	return list;
}



public ArrayList getInstallTypeForEmiCalc(String dealId) {
	 ArrayList<InstallmentPlanForCMVO> list=new ArrayList<InstallmentPlanForCMVO>();
     ArrayList mainList=new ArrayList ();
		ArrayList subList =new ArrayList();
 		
 		try{
 			StringBuilder query=new StringBuilder();
          	 	query.append(" select distinct FROM_INSTL_NO,TO_INSTL_NO,RECOVERY_PERCENT,DEAL_INSTALLMENT_TYPE,DEAL_NO_OF_INSTALLMENT,PRINCIPAL_AMOUNT,INSTALLMENT_AMOUNT,DEAL_RATE_TYPE,DEAL_LOAN_AMOUNT,RECOVERY_TYPE "+
 				"  from cr_deal_loan_dtl_emi_calc L left JOIN cr_deal_installment_plan_emi_calc D on D.DEAL_ID=L.DEAL_ID "+               			
 				" where L.DEAL_ID="+dealId);
 			
 		 logger.info("getInstallType Queryl: "+query);
 		
 		mainList=ConnectionDAO.sqlSelect(query.toString());
 		
 		query=null;
 		
		for(int i=0;i<mainList.size();i++)
		{
			subList= (ArrayList)mainList.get(i);
			if(subList.size()>0){
				InstallmentPlanForCMVO ipVo= new InstallmentPlanForCMVO();
 				ipVo = new InstallmentPlanForCMVO();  
 				if(CommonFunction.checkNull(subList.get(3)).equalsIgnoreCase("E")||CommonFunction.checkNull(subList.get(3)).equalsIgnoreCase("P"))
 				{
 					ipVo.setFromInstallment("1");
 					ipVo.setToInstallment((CommonFunction.checkNull(subList.get(4))).trim());
 					if(!CommonFunction.checkNull(subList.get(2)).equalsIgnoreCase("")){
    				     Number RecoveryPercen = myFormatter.parse((CommonFunction.checkNull(subList.get(2))).trim());
	 			   
    				     logger.info("RecoveryPercen: "+RecoveryPercen);			
	 			         ipVo.setRecoveryPercen(myFormatter.format(RecoveryPercen));
    				      }else{
    				     ipVo.setRecoveryPercen("0");
    				          }
 				    ipVo.setInstallmentType((CommonFunction.checkNull(subList.get(3))).trim());
  			  	    ipVo.setTotalInstallment((CommonFunction.checkNull(subList.get(4))).trim());
  			       // ipVo.setRecoveryType("P");
 				}
 				else{
 				    ipVo.setFromInstallment((CommonFunction.checkNull(subList.get(0))).trim());
 				    ipVo.setToInstallment((CommonFunction.checkNull(subList.get(1))).trim());
 				    if(!CommonFunction.checkNull(subList.get(2)).equalsIgnoreCase("")){
 				     Number RecoveryPercen = myFormatter.parse((CommonFunction.checkNull(subList.get(2))).trim());
 			   
 				     logger.info("RecoveryPercen: "+RecoveryPercen);			
 			         ipVo.setRecoveryPercen(myFormatter.format(RecoveryPercen));
 				      }else{
 				     ipVo.setRecoveryPercen("0");
 				          }
 				    ipVo.setInstallmentType((CommonFunction.checkNull(subList.get(3))).trim());
 				    ipVo.setTotalInstallment((CommonFunction.checkNull(subList.get(4))).trim());
 				   
   				
   				
 				    }
 				
 				ipVo.setRateType((CommonFunction.checkNull(subList.get(7))).trim());
 				if(!CommonFunction.checkNull(subList.get(5)).equalsIgnoreCase("")){
 				     Number princam = myFormatter.parse((CommonFunction.checkNull(subList.get(5))).trim());
	 			   
 				     logger.info("princ amount: "+princam);			
	 			         ipVo.setPrinAm(myFormatter.format(princam));
 				      }else{
 				     ipVo.setPrinAm("0.00");
 				          }
  				if(!CommonFunction.checkNull(subList.get(6)).equalsIgnoreCase("")){
 				     Number instam = myFormatter.parse((CommonFunction.checkNull(subList.get(6))).trim());
	 			   
 				     logger.info("inst amount: "+instam);			
	 			         ipVo.setInstalAm(myFormatter.format(instam));
 				      }else{
 				     ipVo.setInstalAm("0.00");
 				          }
 				if(!CommonFunction.checkNull(subList.get(8)).equalsIgnoreCase("")){
 				     Number instam = myFormatter.parse((CommonFunction.checkNull(subList.get(8))).trim());
	 			   
 				     logger.info("setLoanAmount: "+instam);			
	 			         ipVo.setLoanAmount(myFormatter.format(instam));
 				      }else{
 				     ipVo.setLoanAmount("0.00");
 				          }
 				ipVo.setRecoveryType((CommonFunction.checkNull(subList.get(9))).trim());
 				   list.add(ipVo);
 			     }
 		  }
 		}catch(Exception e){
 			e.printStackTrace();
 		}
 		return list;
}



public boolean updatesecuritydepositForEmiCalc(ChargeVo vo, String dealId) {
	StringBuffer bufInsSql =	new StringBuffer();
	qryList=new ArrayList();
	boolean status=false;
	String amt="";
	StringBuilder query=new StringBuilder();
	query.append("SELECT TOP 1 DEAL_CHARGE_CALCULATED_AMOUNT from  cr_deal_txncharges_dtl_emi_calc where DEAL_ID='"+dealId+"' and DEAL_CHARGE_CODE=103 ");
	amt = CommonFunction.checkNull(ConnectionDAO.singleReturn(query.toString()));
	logger.info("In updatesecuritydepositForEmiCalc() SD Amount to be................"+amt);
	
	query=null;
	
	if(amt=="")
		amt="0.00";
	
	if(Double.parseDouble(CommonFunction.checkNull(amt).trim())==0.00){
	bufInsSql.append("update cr_deal_sd_emi_calc_m set SD_INTEREST_TYPE=?,SD_INTEREST_RATE=?,SD_INTEREST=? where DEAL_ID='"+dealId+"'");
	PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
	
		insertPrepStmtObject.addString("N");
	
		try {
			insertPrepStmtObject.addString(myFormatter.parse("0.00").toString());
		} catch (ParseException e) {
			e.printStackTrace();
		}

		try {
			insertPrepStmtObject.addString(myFormatter.parse("0.00").toString());
		} catch (ParseException e) {
			e.printStackTrace();
		}
		finally
		{
			
			query=null;
			
		}
	logger.info("ibufInsUpdSql.toString()::::::::::::::::" + bufInsSql.toString());
	insertPrepStmtObject.setSql(bufInsSql.toString());
	qryList.add(insertPrepStmtObject);
	try {
		status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
		logger.info("qryList:::::::::::::::::::::::::::"+qryList.toString());
		logger.info("status:::::::::::::::::::::::::::"+status);
	} catch (RemoteException e) {
		e.printStackTrace();
	} catch (SQLException e) {
		e.printStackTrace();
	}
	}
	return status;
	
}


public boolean saveInstallPlanForEmiCalc(InstallmentPlanForCMVO ipvo) {
	logger.info("In saveInstallPlan");
	String FromInstallment[] = ipvo.getFromInstall();
	logger.info("In FromInstallment.................."+ipvo.getFromInstall());
	logger.info("In FromInstallment....."+FromInstallment.length);
	String ToInstallment[] = ipvo.getToInstall();
	logger.info("In ToInstallment.................."+ToInstallment.length);
	String RecoveryPercen[] = ipvo.getRecoveryPer();
	logger.info("In RecoveryPercen.................."+RecoveryPercen.length);
	String InstallmentType= ipvo.getInstallmentType();
	logger.info("In saveInstallPlan.................."+ipvo.getInstallmentType());
	String TotalInstallment=ipvo.getTotalInstallment();
	logger.info("In saveInstallPlan.................."+ipvo.getTotalInstallment());
	String toInstallment = ipvo.getToInstallment();	
	logger.info("In toInstallment.................."+toInstallment);
	String prinAmount[] = ipvo.getPrincipalAmount();
		logger.info("In prinAmount.................."+prinAmount.length);
		String instalAmount[] = ipvo.getInstallmentAmount();
		logger.info("In instalAmount.................."+instalAmount.length);
		String loanId = ipvo.getLoanId();
		logger.info("loanId........."+loanId);
		
	ArrayList qryList=new ArrayList();
	boolean status=false;
	try {
		 PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
		 StringBuffer bufInsSql =	new StringBuffer();
		 StringBuilder checkQ=new StringBuilder();
		    checkQ.append("select count(*) from cr_deal_installment_plan_emi_calc where DEAL_ID="+(CommonFunction.checkNull(ipvo.getDealId()).trim())+"");
		   String count=ConnectionDAO.singleReturn(checkQ.toString());
		   
		   checkQ=null;
		   
		   if(!count.equalsIgnoreCase("0"))
			  { 
			  insertPrepStmtObject = new PrepStmtObject();
			  StringBuilder qry=new StringBuilder();
			  qry.append("DELETE FROM cr_deal_installment_plan_emi_calc WHERE DEAL_ID='"+(CommonFunction.checkNull(ipvo.getDealId()).trim())+ "'");

		     insertPrepStmtObject.setSql(qry.toString());
			 qryList.add(insertPrepStmtObject);
			// ConnectionDAO.sqlInsUpdDelete(qryList);
			  
			 qry=null;
			  }
	
		 for(int k=0;k<FromInstallment.length;k++)  
		{
			bufInsSql =	new StringBuffer();
	     insertPrepStmtObject = new PrepStmtObject();
		  
		
		  insertPrepStmtObject = new PrepStmtObject();
			bufInsSql.append("insert into cr_deal_installment_plan_emi_calc (DEAL_ID,DEAL_LOAN_ID,FROM_INSTL_NO,TO_INSTL_NO,RECOVERY_PERCENT,PRINCIPAL_AMOUNT,INSTALLMENT_AMOUNT,REC_STATUS,SEQ_NO,RECOVERY_TYPE,MAKER_ID,MAKER_DATE) values(?,?,?,?,?,?,?,?,?,?,?,");
			//bufInsSql.append("DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND))");" +
			bufInsSql.append(dbo);
			bufInsSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ) ");
			
			
			if(CommonFunction.checkNull(ipvo.getDealId()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(ipvo.getDealId().trim()); //deal Id
			
			if(CommonFunction.checkNull(ipvo.getLoanId()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(ipvo.getLoanId().trim());   // loan Id
			
			if(CommonFunction.checkNull(FromInstallment[k]).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString(FromInstallment[k].trim()); //From Installment
			
	    	if(CommonFunction.checkNull(ToInstallment[k]).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
			insertPrepStmtObject.addString(ToInstallment[k].trim());// To Installment 
	    	
	    	 if((CommonFunction.checkNull(RecoveryPercen[k])).trim().equalsIgnoreCase(""))
	        		insertPrepStmtObject.addString("0.00");
			else
			 insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(RecoveryPercen[k]).trim())).toString());
	    	 
	    	 if((CommonFunction.checkNull(prinAmount[k])).trim().equalsIgnoreCase(""))
	        		insertPrepStmtObject.addString("0.00");
			else
			 insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(prinAmount[k]).trim())).toString());// PRINCIPAL_AMOUNT   	
	    	if((CommonFunction.checkNull(instalAmount[k])).trim().equalsIgnoreCase(""))
        		insertPrepStmtObject.addString("0.00");
		     else
		    insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(instalAmount[k]).trim())).toString());// INSTALLMENT_AMOUNT	
	    	insertPrepStmtObject.addString("P");// REC_STATUS   	   	
							
	    	insertPrepStmtObject.addString(""+(k+1));// To Installment 
	    	
	    	if(CommonFunction.checkNull(ipvo.getRecoveryType()).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
			insertPrepStmtObject.addString(ipvo.getRecoveryType().trim());// RECOVERY_TYPE
	    	//============================================================
	    	if (CommonFunction.checkNull(ipvo.getMakerId()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(ipvo.getMakerId()).trim()));

			
			if (CommonFunction.checkNull(ipvo.getMakerDate()).equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(ipvo.getMakerDate()).trim()));
	    	//============================================================
	    	
		  
		 	insertPrepStmtObject.setSql(bufInsSql.toString());
			 logger.info("IN saveInstallPlan() insert query1 ### "+insertPrepStmtObject.printQuery());
			qryList.add(insertPrepStmtObject);
			bufInsSql=null;
		  
		}
		
		
			status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
		} catch (Exception e) {
			e.printStackTrace();
		}
	     logger.info("In saveInstallPlan......................"+status);
	return status;
}



public String generateRepyScheduleForEmiCalc(String dealId,String makerId) {
	boolean status=false;
	CallableStatement cst=null;
	Connection con=ConnectionDAO.getConnection();
	logger.info("Deal id--------------------------------------->"+dealId);
	String procval="Noresult";
	try {
		StringBuilder productQuery=new StringBuilder();
		 productQuery.append("select DEAL_LOAN_ID from cr_deal_loan_dtl_emi_calc where DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim());
		logger.info("productQuery: "+productQuery);
		ArrayList productList=ConnectionDAO.sqlSelect(productQuery.toString());
		
		productQuery=null;
		 for(int i=0;i<productList.size();i++)
		  {
			  ArrayList subproductList=(ArrayList)productList.get(i);
			  if(subproductList.size()>0)
			  {
				logger.info("Generate_Repayment_schedule Parameters:----stage:- LCL "+"loanDeal Id-->"+CommonFunction.checkNull(subproductList.get(0))+" makerId: "+makerId);
				con.setAutoCommit(false);
				cst=con.prepareCall("{call Generate_Repayment_schedule(?,?,?,?,?)}");
				cst.setString(1, "LCL");
				cst.setString(2, CommonFunction.checkNull(subproductList.get(0)));
				cst.setString(3, makerId);
				cst.registerOutParameter(4, Types.CHAR);
				cst.registerOutParameter(5, Types.CHAR);
				cst.execute();
				String s1= cst.getString(4);
				String s2 = cst.getString(5);
				
				if(s1!=null && s1.equalsIgnoreCase("S"))
				{
					status=true;
					con.commit();
					procval=s1;
				}
				else
				{
					procval=s2;
					con.rollback();
				}
				logger.info("status:::::::"+status);
				logger.info("s2::::::::::"+s2);
			  }
		  }
	} catch (Exception e) {
		try {
			con.rollback();
		} catch (SQLException e1) {
			logger.info("Roll back in generateRepySchedule: "+e1);
			e1.printStackTrace();
		}
		e.printStackTrace();
	}
	finally
	{
		try {
			con.commit();
			con.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	return procval;
}



public ArrayList getFromLoanDtlForEmiCalc(String dealId) {
	ArrayList list = new ArrayList();
	logger.info("In getFromLoanDtlForEmiCalc-------------------------------> ");
	ArrayList mainlist = new ArrayList();
	ArrayList subList = new ArrayList();
	try {
		StringBuilder query =new StringBuilder();
		query.append("select DEAL_RATE_METHOD,DEAL_FLAT_RATE,DEAL_EFF_RATE,DEAL_IRR1,DEAL_IRR2, UPFRONT_ROUNDING_AMOUNT from cr_deal_loan_dtl_emi_calc where DEAL_ID="+dealId);
		logger.info("Query in getFromLoanDtlInDeal------------------------------->" + query);
		StringBuilder bussIrrQ =new StringBuilder();
		bussIrrQ.append("select DEAL_BUSINESS_IRR from cr_deal_loan_dtl_emi_calc where DEAL_ID="+dealId+" ");
		logger.info("Query in getFromLoanDtlInDeal--DEAL_BUSINESS_IRR---" + bussIrrQ);
		String bussIrr=ConnectionDAO.singleReturn(bussIrrQ.toString());
		logger.info("Query in getFromLoanDtlInDeal--bussIrr---" + bussIrr);
		mainlist = ConnectionDAO.sqlSelect(query.toString());
		
		query=null;
		bussIrrQ=null;

		for (int i = 0; i < mainlist.size(); i++) {
			subList = (ArrayList) mainlist.get(i);
			RepayScheduleVo repvo = new RepayScheduleVo();
			if (subList.size()> 0) {
				repvo.setLoanRateMethod((CommonFunction.checkNull(subList.get(0)).trim()));
				if(!CommonFunction.checkNull(subList.get(1)).trim().equalsIgnoreCase(""))
	    		{
    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subList.get(1))).trim());  
    	    		repvo.setFinalRate(myFormatter.format(reconNum));
	    		}
				if(!CommonFunction.checkNull(subList.get(2)).trim().equalsIgnoreCase(""))
	    		{
    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subList.get(2))).trim());  
    	    		repvo.setEffectiveRate(myFormatter.format(reconNum));
	    		}
				if(!CommonFunction.checkNull(subList.get(3)).trim().equalsIgnoreCase(""))
	    		{
    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subList.get(3))).trim());  
    	    		repvo.setMktIRR1(myFormatter.format(reconNum));
	    		}
				if(!CommonFunction.checkNull(subList.get(4)).trim().equalsIgnoreCase(""))
	    		{
    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subList.get(4))).trim());  
    	    		repvo.setMktIRR2(myFormatter.format(reconNum));
	    		}
				// add by saorabh
				if(!CommonFunction.checkNull(subList.get(5)).trim().equalsIgnoreCase(""))
	    		{
    	    		Number UPFRONT_ROUNDING_AMOUNT =myFormatter.parse((CommonFunction.checkNull(subList.get(5))).trim());  
    	    		repvo.setUpfrontRoundingAmount(myFormatter.format(UPFRONT_ROUNDING_AMOUNT));
	    		}
					else
					repvo.setUpfrontRoundingAmount("0.00");
				// end by saorabh
				if((CommonFunction.checkNull(subList.get(0)).trim()).equalsIgnoreCase("E"))
                {
					repvo.setFinalRate("");
                }
				repvo.setBussIrr(bussIrr);
			
			}
			list.add(repvo);
		}
	} catch (Exception e) {
		e.printStackTrace();
	}

	return list;
}



public ArrayList getRepaySchedForEmiCalc(String dealId) {
	ArrayList list = new ArrayList();
	logger.info("In getRepaySchedForEmiCalc---------------------> ");
	ArrayList mainlist = new ArrayList();
	ArrayList subList = new ArrayList();
	try {

		StringBuilder query =new StringBuilder();
		 query.append("select INSTL_NO,");
		 //query.append("DATE_FORMAT(INSTL_DATE,'"+dateFormat+"'),INSTL_AMOUNT,PRIN_COMP,INT_COMP,EXCESS_INT," +
		 query.append(dbo);
		 query.append("DATE_FORMAT(INSTL_DATE,'"+dateFormat+"'),INSTL_AMOUNT,PRIN_COMP,INT_COMP,EXCESS_INT," );
		 query.append("case when ADV_FLAG='Y' then 'YES' else 'NO' end,PRIN_OS,OTHER_CHARGES from cr_deal_repaysch_dtl_emi_calc where DEAL_ID="+dealId);
		logger.info("Query in getRepaySched------------------------------>" + query);
		mainlist = ConnectionDAO.sqlSelect(query.toString());
		
		query=null;

		for (int i = 0; i < mainlist.size(); i++) {
			subList = (ArrayList) mainlist.get(i);
			RepayScheduleVo repvo = new RepayScheduleVo();
			if (subList.size() > 0) {
				repvo.setInstNo((CommonFunction.checkNull(subList.get(0)).trim()));
				repvo.setDueDate((CommonFunction.checkNull(subList.get(1)).trim()));
				
				if(!CommonFunction.checkNull(subList.get(2)).trim().equalsIgnoreCase(""))
	    		{
    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subList.get(2))).trim());  
    	    		repvo.setInstAmount(myFormatter.format(reconNum));
	    		}
				if(!CommonFunction.checkNull(subList.get(3)).trim().equalsIgnoreCase(""))
	    		{
    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subList.get(3))).trim());  
    	    		repvo.setPrinciple(myFormatter.format(reconNum));
	    		}
				if(!CommonFunction.checkNull(subList.get(4)).trim().equalsIgnoreCase(""))
	    		{
    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subList.get(4))).trim());  
    	    		repvo.setInstCom(myFormatter.format(reconNum));
	    		}
				if(!CommonFunction.checkNull(subList.get(5)).trim().equalsIgnoreCase(""))
	    		{
    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subList.get(5))).trim());  
    	    		repvo.setExcess(myFormatter.format(reconNum));
	    		}
				repvo.setAdvFlag((CommonFunction.checkNull(subList.get(6)).trim()));
				if(!CommonFunction.checkNull(subList.get(7)).trim().equalsIgnoreCase(""))
	    		{
    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subList.get(7))).trim());  
    	    		repvo.setPrinOS(myFormatter.format(reconNum));
	    		}
				if(!CommonFunction.checkNull(subList.get(8)).trim().equalsIgnoreCase(""))
	    		{
    	    		Number reconNum =myFormatter.parse((CommonFunction.checkNull(subList.get(8))).trim());  
    	    		repvo.setOtherCharges(myFormatter.format(reconNum));
	    		}
				else
				{
					repvo.setOtherCharges("0.00");
				}
				
				
			
			}
			list.add(repvo);
		}
	} catch (Exception e) {
		e.printStackTrace();
	}

	return list;
}


public ArrayList getOtherPeriodicalChargeDetailForEmiCalc(String dealId,String stage) {
	 ArrayList<OtherChargesPlanVo> list=new ArrayList<OtherChargesPlanVo>();
	 ArrayList mainList=new ArrayList ();
	 ArrayList subList =new ArrayList();
	 logger.info("In getOtherPeriodicalChargeDetailForEmiCalc---------------------------------->");
			try{
				StringBuilder query=new StringBuilder();
				    query.append("select distinct D.FROM_INSTL_NO,D.TO_INSTL_NO,D.CHARGE_TYPE,D.AMOUNT ,C.CHARGE_CODE,C.CHARGE_DESC,L.DEAL_INSTALLMENT_TYPE,L.DEAL_NO_OF_INSTALLMENT,L.DEAL_RATE_TYPE,L.DEAL_LOAN_AMOUNT   "+
					"  from cr_deal_loan_dtl_emi_calc L left JOIN cr_deal_charge_plan_dtl_emi_calc D on D.DEAL_ID=L.DEAL_ID ,com_charge_code_m C "+               			
					" where L.DEAL_ID="+dealId+" AND C.CHARGE_CODE=D.CHARGE_CODE");
				
			logger.info("getOtherPeriodicalChargeDetailInDeal Queryl----------------------->"+query);
			mainList=ConnectionDAO.sqlSelect(query.toString());
			
			query=null;
			
			for(int i=0;i<mainList.size();i++)
			{
				subList= (ArrayList)mainList.get(i);
				if(subList.size()>0){
					OtherChargesPlanVo ipVo= null;
					ipVo = new OtherChargesPlanVo();  
					    ipVo.setFromInstallment((CommonFunction.checkNull(subList.get(0))).trim());
					    ipVo.setToInstallment((CommonFunction.checkNull(subList.get(1))).trim());
					    ipVo.setChargeType("FLAT");
					    if(!CommonFunction.checkNull(subList.get(3)).equalsIgnoreCase(""))
	    	    		{
		    	    		Number reconNum=0.0000;
							try {
								reconNum = myFormatter.parse((CommonFunction.checkNull(subList.get(3))).trim());
							} catch (ParseException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							ipVo.setChargeAmount((myFormatter.format(reconNum)));
	    	    		}
	    	    		else
	    	    		{
	    	    			ipVo.setChargeAmount("0.00");	
	    	    		}
					    
					    ipVo.setChargeCode((CommonFunction.checkNull(subList.get(4))).trim());
					    ipVo.setChargeDesc((CommonFunction.checkNull(subList.get(5))).trim());
					    
					    ipVo.setInstallmentType((CommonFunction.checkNull(subList.get(6))).trim());
					    ipVo.setTotalInstallment((CommonFunction.checkNull(subList.get(7))).trim());
	  				
					    //}
					
					ipVo.setRateType((CommonFunction.checkNull(subList.get(8))).trim());
					
					if(!CommonFunction.checkNull(subList.get(9)).equalsIgnoreCase(""))
					{
					     Number instam = myFormatter.parse((CommonFunction.checkNull(subList.get(9))).trim());
	 			   
					     logger.info("setLoanAmount: "+instam);			
	 			         ipVo.setLoanAmount((myFormatter.format(instam)));
					}
					else
					{
					     ipVo.setLoanAmount("0.00");
					}
					
					   list.add(ipVo);
				     }
			  }
			}catch(Exception e){
				e.printStackTrace();
			}
			return list;
}



public boolean saveOtherChargesPlanForEmiCalc(OtherChargesPlanVo ipvo) {
    logger.info("In saveOtherChargesPlanForEmiCalc");
	String FromInstallment[] = ipvo.getFromInstall();
	String ToInstallment[] = ipvo.getToInstall();
	String type[] = ipvo.getType();
	String InstallmentType= ipvo.getInstallmentType();
	String TotalInstallment=ipvo.getTotalInstallment();
	String toInstallment = ipvo.getToInstallment();	
	String amount[] = ipvo.getAmount();
	String chargeCode[] = ipvo.getChargehiddenFld();
	ArrayList qryList=new ArrayList();
	boolean status=false;
		try {
			 PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
			 StringBuffer bufInsSql =	new StringBuffer();
			 StringBuilder checkQ=new StringBuilder();
			    checkQ.append("select count(*) from cr_deal_charge_plan_dtl_emi_calc where DEAL_ID="+(CommonFunction.checkNull(ipvo.getDealId()).trim())+"");
			   String count=ConnectionDAO.singleReturn(checkQ.toString());
			   
			   checkQ=null;
			   
			   if(!count.equalsIgnoreCase("0"))
			   { 
				  insertPrepStmtObject = new PrepStmtObject();
				  StringBuilder qry=new StringBuilder();
				  qry.append("DELETE FROM cr_deal_charge_plan_dtl_emi_calc WHERE DEAL_ID='"+(CommonFunction.checkNull(ipvo.getDealId()).trim())+ "'");

			     insertPrepStmtObject.setSql(qry.toString());
				 qryList.add(insertPrepStmtObject);
				 qry=null;
				}
		
			for(int k=0;k<FromInstallment.length;k++)  
			{
			 bufInsSql =	new StringBuffer();
		     insertPrepStmtObject = new PrepStmtObject();
			  
			
			  insertPrepStmtObject = new PrepStmtObject();
				bufInsSql.append("insert into cr_deal_charge_plan_dtl_emi_calc (DEAL_ID,DEAL_LOAN_ID,FROM_INSTL_NO,TO_INSTL_NO,CHARGE_TYPE,AMOUNT,CHARGE_CODE,REC_STATUS,MAKER_ID,MAKER_DATE) values(?,?,?,?,?,?,?,?,?,");
				//bufInsSql.append("DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND))");
				bufInsSql.append(dbo);
				bufInsSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ) ");		
								
				if(CommonFunction.checkNull(ipvo.getDealId()).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(ipvo.getDealId().trim()); //DEAL_ID
				
				if(CommonFunction.checkNull(ipvo.getLoanId()).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(ipvo.getLoanId().trim());   // DEAL_LOAN_ID
				
				if(CommonFunction.checkNull(FromInstallment[k]).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(FromInstallment[k].trim()); //From Installment
				
		    	if(CommonFunction.checkNull(ToInstallment[k]).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
				insertPrepStmtObject.addString(ToInstallment[k].trim());// To Installment 
		    	
		    	insertPrepStmtObject.addString("F");// charge type
		    	 
		    	 if((CommonFunction.checkNull(amount[k])).trim().equalsIgnoreCase(""))
		        		insertPrepStmtObject.addString("0.00");
				else
				 insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(amount[k]).trim())).toString());// PRINCIPAL_AMOUNT   	
		    	
		    	if((CommonFunction.checkNull(chargeCode[k])).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(chargeCode[k].trim()); //Charge Id 
		    	 
		    	insertPrepStmtObject.addString("P");// REC_STATUS   	   	
								
		    	if (CommonFunction.checkNull(ipvo.getMakerId()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((CommonFunction.checkNull(ipvo.getMakerId()).trim()));
				
				if (CommonFunction.checkNull(ipvo.getMakerDate()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((CommonFunction.checkNull(ipvo.getMakerDate()).trim()));
		    	//============================================================
		    	
			  
			 	insertPrepStmtObject.setSql(bufInsSql.toString());
				 logger.info("IN saveOtherChargesPlanForEmiCalc() DEAL insert query1 ### "+insertPrepStmtObject.printQuery());
				qryList.add(insertPrepStmtObject);
				bufInsSql=null;
			  
			}
						
				status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			} catch (Exception e) {
				e.printStackTrace();
			}
	     logger.info("In saveOtherChargesPlanForEmiCalc......................"+status);
	return status;

}


public ArrayList fetchDueDayNextDateForEmiCalc(String repayEffectiveDate) {
	ArrayList<Object> list=new ArrayList<Object>();
	try{
		String currDay="0";
		if(!CommonFunction.checkNull(repayEffectiveDate).equalsIgnoreCase(""))
		{
			currDay=repayEffectiveDate.substring(0, 2);
		}
		
		logger.info("repayEffectiveDate: "+repayEffectiveDate+ " currDay: "+CommonFunction.removePadding(currDay));

		StringBuilder query=new StringBuilder();
	 query.append("select DISTINCT DUE_DAY,");
	 query.append(dbo);
	 query.append("DATE_FORMAT(CONVERT(SMALLDATETIME,CONCAT(FORMAT(convert(SMALLDATETIME,"+dbo+"STR_TO_DATE('"+repayEffectiveDate+"', '%d-%m-%Y'), 121),'yyyy'),FORMAT(convert(SMALLDATETIME, "+dbo+"STR_TO_DATE('"+repayEffectiveDate+"', '%d-%m-%Y'), 121),'MM'),CASE WHEN DUE_DAY <= 9 THEN '0'+CAST(DUE_DAY as varchar) ELSE CAST(DUE_DAY as varchar) END), 112),'%d-%m-%Y') as 'NEXT_DUE_DATE' FROM com_next_due_date_m WHERE REC_STATUS='A' AND '"+CommonFunction.removePadding(currDay)+"' BETWEEN FROM_DATE AND TO_DATE ");
	// query.append("DATE_FORMAT(DATE_ADD(DATE_ADD(LAST_DAY(STR_TO_DATE('"+repayEffectiveDate+"', '"+dateFormat+"')), interval 1 day),INTERVAL DUE_DAY-1 day),'"+dateFormat+"') as 'NEXT_DUE_DATE' FROM com_next_due_date_m WHERE REC_STATUS='A' AND '"+CommonFunction.removePadding(currDay)+"' BETWEEN FROM_DATE AND TO_DATE");
	logger.info("fetchDueDayNextDateForEmiCalc------------: "+query.toString());
	LoanDetailVo vo = null;
	ArrayList source = ConnectionDAO.sqlSelect(query.toString());
	logger.info("fetchDueDayNextDateForEmiCalc-----------: "+source.size());
	
	query=null;
	
	for(int i=0;i<source.size();i++){
		logger.info("fetchDueDayNextDateForEmiCalc----------------: "+source.get(i).toString());
		ArrayList subsource=(ArrayList)source.get(i);
		if(subsource.size()>0)
		{
			vo = new LoanDetailVo();
			vo.setCycleDate(CommonFunction.checkNull(subsource.get(0)).trim());
			vo.setNextDueDate((CommonFunction.checkNull(subsource.get(1))).trim());
			list.add(vo);
		}
	}
	}catch(Exception e){
		e.printStackTrace();
	}
	return list;
}


public ArrayList fetchDueDayForEmiCalc(String repayEffectiveDate,String cycleDate) {
	ArrayList<Object> list=new ArrayList<Object>();
	try{
		
	logger.info("repayEffectiveDate: "+repayEffectiveDate+ " cycleDate: "+CommonFunction.removePadding(cycleDate));
	StringBuilder query=new StringBuilder();
	query.append("select DUE_DAY,");
	query.append(dbo);
	query.append("DATE_FORMAT(DATE_ADD(DATE_ADD(LAST_DAY(STR_TO_DATE('"+repayEffectiveDate+"', '"+dateFormat+"')), interval 1 day),INTERVAL '"+CommonFunction.removePadding(cycleDate)+"'-1 day),'"+dateFormat+"') as 'NEXT_DUE_DATE' FROM com_next_due_date_m WHERE REC_STATUS='A' AND '"+CommonFunction.removePadding(cycleDate)+"' BETWEEN FROM_DATE AND TO_DATE");
	logger.info("fetchDueDayForEmiCalc----------"+query.toString());
	LoanDetailVo vo = null;
	ArrayList source = ConnectionDAO.sqlSelect(query.toString());
	logger.info("fetchDueDayForEmiCalc-----------------"+source.size());
	
	query=null;
	
	for(int i=0;i<source.size();i++){

		logger.info("fetchDueDayForEmiCalc----------------"+source.get(i).toString());
		ArrayList subsource=(ArrayList)source.get(i);
		if(subsource.size()>0)
		{
			logger.info("fetchDueDayNextDate: "+subsource.size());
			vo = new LoanDetailVo();
			vo.setCycleDate(CommonFunction.checkNull(subsource.get(0)).trim());
			vo.setNextDueDate((CommonFunction.checkNull(subsource.get(1))).trim());
			list.add(vo);
		}
	}
	}catch(Exception e){
		e.printStackTrace();
	}
	return list;
}

//End Emi Calculator By Anil
//start by KK
	
	public ArrayList<Object> getTermSheet(String dealId) {
		
		ArrayList list=new ArrayList();
		try{
			StringBuilder query=new StringBuilder();
			query.append("select (select  dbo.DATE_FORMAT(max(APPROVAL_DATE),'%d-%m-%Y %H:%i')  from cr_deal_approval_dtl where  DEAL_ID='"+CommonFunction.checkNull(dealId).trim()+"' group by DEAL_ID)APPROVAL_DATE," +
					" b.BRANCH_DESC,n.deal_loan_amount,n.DEAL_SECTOR_TYPE,(select sum(ASSET_COLLATERAL_VALUE) from  cr_deal_collateral_m  dc JOIN cr_asset_collateral_m ac on ac.ASSET_ID=dc.ASSETID where dc.DEAL_ID='"+CommonFunction.checkNull(dealId).trim()+"' group by dc.DEAL_ID )ASSET_COLLATERAL_VALUE," +
					" td.ROI,td.MANAGEMENT_FEE,td.TENURE,td.SD_AMOUNT,td.GUARANTEES_P,td.GUARANTEES_C,td.ROC_CHARGES,td.HYPOTHECATION,td.INSURANCE,td.OTHER_CONDITION," +
					" td.ROC_APPLICABLE,td.LOAN_GROSS_AMOUNT,td.PSL_OPTION,td.ADDITIONAL_COMMITEE,cim.INDUSTRY_DESC " +
					" ,sub.SUB_INDUSTRY_DESC,sc.SCHEME_DESC,(select DESCRIPTION from generic_master where GENERIC_KEY='DEAL_CATEGORY' and value=d.DEAL_CATEGORY)DEAL_CATEGORY,CREDIT_COMMITTEE"+
					" from cr_deal_dtl d " +
					" LEFT JOIN cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID " +
					" LEFT JOIN com_branch_m b on d.DEAL_BRANCH=b.BRANCH_ID " +
					" LEFT JOIN cr_termsheet_dtl td on td.TXN_ID=d.DEAL_ID " +
					" left join cr_deal_customer_m cdcm on cdcm.CUSTOMER_ID=d.DEAL_CUSTOMER_ID " +
					" left join com_industry_m cim on cim.INDUSTRY_ID= cdcm.CUSTOMER_INDUSTRY " +
					" left join com_sub_industry_m sub on sub_industry_id= cdcm.CUSTOMER_SUB_INDUSTRY " +
					" left join cr_scheme_m sc on(sc.SCHEME_ID=n.DEAL_SCHEME)" +
					" where d.DEAL_ID='"+CommonFunction.checkNull(dealId).trim()+"'");
			logger.info("getTermSheetDataQuery: "+query.toString());
		ArrayList getTermSheetDataDetail = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getTermSheetDataList "+getTermSheetDataDetail.size());
		
		query=null;
		
		for(int i=0;i<getTermSheetDataDetail.size();i++){
			logger.info("getTermSheet...Outer FOR loop "+CommonFunction.checkNull(getTermSheetDataDetail.get(i)).toString());
			ArrayList data=(ArrayList)getTermSheetDataDetail.get(i);
			if(data.size()>0)	{
				TermSheetVo termsVo=new TermSheetVo();
				
				termsVo.setDateOfCC((CommonFunction.checkNull(data.get(0))).trim());
				termsVo.setNameOfBranch((CommonFunction.checkNull(data.get(1))).trim());
				termsVo.setDefaultLoanAmount((CommonFunction.checkNull(data.get(2))).trim());
				if(CommonFunction.checkNull(data.get(16)).equalsIgnoreCase("") )
					termsVo.setGrossAmountLoan((CommonFunction.checkNull(data.get(2))).trim());
				else
					termsVo.setGrossAmountLoan((CommonFunction.checkNull(data.get(16))).trim());
				if(CommonFunction.checkNull(data.get(17)).equalsIgnoreCase("") )
				{
					logger.info("PSL not exists in cr_termsheet_dtl : " + data.get(3));
					if(((CommonFunction.checkNull(data.get(3))).trim()).equalsIgnoreCase("PSL"))
						termsVo.setPslOption("Y");
					else
						termsVo.setPslOption("N");
				}
				else
				{
					logger.info("PSL exists in cr_termsheet_dtl : " + data.get(17));
					termsVo.setPslOption((CommonFunction.checkNull(data.get(17))).trim());
				}
				termsVo.setGrossAmountProduct((CommonFunction.checkNull(data.get(4))).trim());
				termsVo.setRoi((CommonFunction.checkNull(data.get(5))).trim());
				termsVo.setManagementFee((CommonFunction.checkNull(data.get(6))).trim());
				termsVo.setTenure((CommonFunction.checkNull(data.get(7))).trim());
				termsVo.setSdAmount((CommonFunction.checkNull(data.get(8))).trim());
				termsVo.setGuaranteesPrsnl((CommonFunction.checkNull(data.get(9))).trim());
				termsVo.setGuaranteesCorp((CommonFunction.checkNull(data.get(10))).trim());
				termsVo.setRocCharges((CommonFunction.checkNull(data.get(11))).trim());
				termsVo.setHypothecation((CommonFunction.checkNull(data.get(12))).trim());
				termsVo.setInsurance((CommonFunction.checkNull(data.get(13))).trim());
				termsVo.setOtherCondition((CommonFunction.checkNull(data.get(14))).trim());
				termsVo.setRocApplicable((CommonFunction.checkNull(data.get(15))).trim());
				termsVo.setAdditionalCommitee((CommonFunction.checkNull(data.get(18))).trim());
				termsVo.setTypeOfIndustry((CommonFunction.checkNull(data.get(19))).trim());
				termsVo.setSubIndustry((CommonFunction.checkNull(data.get(20))).trim());
				termsVo.setDealScheme((CommonFunction.checkNull(data.get(21))).trim());
				termsVo.setDealCategory((CommonFunction.checkNull(data.get(22))).trim());
				termsVo.setCreditcommittee((CommonFunction.checkNull(data.get(23))).trim());
				list.add(termsVo);
		}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}

	public ArrayList<Object> getMachineDetails(String dealId)
		{
			TermSheetVo vo=null;
		   ArrayList<Object> list=new ArrayList<Object>();
		  try
		 {
		  logger.info("Value of Assets Id in dao is...................."+dealId);
		  StringBuilder query=new StringBuilder();
		   query.append("SELECT ASSET_TYPE,ASSET_COLLATERAL_DESC,ASSET_SUPPLIER_DESC,ASSET_COLLATERAL_VALUE ");
		   query.append("from cr_asset_collateral_m c left join cr_deal_collateral_m d on c.ASSET_ID=d.ASSETID ");
		   query.append("where d.DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' AND ASSET_COLLATERAL_CLASS='MACHINE' ");
		
		  logger.info("query"+query);
		  ArrayList bdetails = ConnectionDAO.sqlSelect(query.toString());
		  logger.info("MachineDetails"+bdetails.size());
		  
		  query=null;
		  for(int i=0;i< bdetails.size();i++)
		  {
		  	logger.info("MachineDetails"+bdetails.get(i).toString());
		  	ArrayList bdetails1=(ArrayList)bdetails.get(i);
		  	if(bdetails1.size()>0)
			{
		  		vo =  new TermSheetVo();
		  		vo.setAssetsType((CommonFunction.checkNull(bdetails1.get(0))).trim());
		  		vo.setAssetsDetails((CommonFunction.checkNull(bdetails1.get(1))).trim());
		  		vo.setAssetsSupplier((CommonFunction.checkNull(bdetails1.get(2))).trim());
		  		vo.setAssetsAmount((CommonFunction.checkNull(bdetails1.get(3))).trim());
		  		
			}
		
			list.add(vo);
			
			}
			logger.info("list"+list.size());
			}catch(Exception e){
				e.printStackTrace();
			}
		
			return list;
		
		}
		
		public ArrayList<Object> getApprovalCommitteeList(String dealId) 
		{
			logger.info("in getApprovalCommitteeList() CreditProcessingDAOImpl. ");
			TermSheetVo vo=null;
			ArrayList<Object> list=new ArrayList<Object>();
			ArrayList bdetails=new ArrayList();
			StringBuilder query=new StringBuilder();
			try
			{				
				query.append("select b.USER_NAME,a.APPROVAL_LEVEL,a.DEAL_APPROVAL_ID from cr_deal_approval_dtl a join SEC_USER_M b on(a.approval_by=b.USER_ID) ");
				query.append(" WHERE a.DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' order by a.DEAL_APPROVAL_ID");
				logger.info("getApprovalCommitteeList  list of approval committee  query   :   "+query);
				bdetails = ConnectionDAO.sqlSelect(query.toString());
				query=null;
				for(int i=0;i< bdetails.size();i++)
				{
					ArrayList bdetails1=(ArrayList)bdetails.get(i);
					if(bdetails1.size()>0)
					{
						vo =  new TermSheetVo();
						vo.setUserName((CommonFunction.checkNull(bdetails1.get(0))).trim());
						vo.setLevel((CommonFunction.checkNull(bdetails1.get(1))).trim());			  		
					}
					list.add(vo);
				}
				logger.info("list"+list.size());
			}
			catch(Exception e)
			{e.printStackTrace();}	
			finally
			{
				dealId=null;
				vo=null;
				bdetails.clear();
				bdetails=null;
				query=null;
			}
			return list;			
		}
		
		public String saveTermSheetDetails(TermSheetVo termsVo) {			
			
			PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
			ArrayList qryList =new ArrayList();
			String status="X";
			StringBuilder updateDeal=new StringBuilder();
			String sanAmt=CommonFunction.checkNull(termsVo.getGrossAmountLoan()).trim();
			if(CommonFunction.checkNull(sanAmt).trim().equalsIgnoreCase(""))
				sanAmt="0.00";
			String deal="";
			deal = ConnectionDAO.singleReturn("select TXN_ID from CR_TERMSHEET_DTL WHERE TXN_ID='"+(CommonFunction.checkNull(termsVo.getDealId())).trim()+"'");
			if(!CommonFunction.checkNull(termsVo.getAction()).trim().equalsIgnoreCase("I"))
			{
				updateDeal.append("UPDATE CR_DEAL_LOAN_DTL SET DEAL_SANCTION_AMOUNT="+CommonFunction.checkNull(sanAmt).trim()+",REDY_TO_AUTHOR='N' WHERE DEAL_ID='"+(CommonFunction.checkNull(termsVo.getDealId())).trim()+"'");
				PrepStmtObject prtStmt = new PrepStmtObject();
				prtStmt.setSql(updateDeal.toString());
				logger.info("IN saveTermSheetDetails() update deal table query :  "+prtStmt.printQuery());
				qryList.add(prtStmt);
				if(deal!=null && !deal.equalsIgnoreCase(""))
				{
					logger.info("In update saveTermSheetDetails");
					StringBuilder queryUpdate=new StringBuilder();
					 queryUpdate.append("UPDATE CR_TERMSHEET_DTL SET ROI=?,MANAGEMENT_FEE=?, TENURE=?, SD_AMOUNT=?, GUARANTEES_P=?, GUARANTEES_C=?,");
					 queryUpdate.append(" ROC_CHARGES=?, HYPOTHECATION=?, INSURANCE=?, OTHER_CONDITION=?, MAKER_ID=?, MAKER_DATE=");
					 queryUpdate.append(dbo);
					 queryUpdate.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ");
					 queryUpdate.append(",ROC_APPLICABLE=?,LOAN_GROSS_AMOUNT=?,PSL_OPTION=?,ADDITIONAL_COMMITEE=?,CREDIT_COMMITTEE=? WHERE TXN_ID=? ");
					// queryUpdate.append("DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND) ");
	
					 
					if((CommonFunction.checkNull(termsVo.getRoi())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getRoi()).trim());
					
					if((CommonFunction.checkNull(termsVo.getManagementFee())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						try {
							insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull((termsVo.getManagementFee()).trim()))).toString());
						} catch (ParseException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						
					if((CommonFunction.checkNull(termsVo.getTenure())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getTenure()).trim());
					
					if((CommonFunction.checkNull(termsVo.getSdAmount())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						try {
							insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull((termsVo.getSdAmount()).trim()))).toString());
						} catch (ParseException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}					
					
					if((CommonFunction.checkNull(termsVo.getGuaranteesPrsnl())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getGuaranteesPrsnl()).trim());
					
					if((CommonFunction.checkNull(termsVo.getGuaranteesCorp())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getGuaranteesCorp()).trim());
	
					
					if((CommonFunction.checkNull(termsVo.getRocCharges())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getRocCharges()).trim());
					
					if((CommonFunction.checkNull(termsVo.getHypothecation())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getHypothecation()).trim());
					
					if((CommonFunction.checkNull(termsVo.getInsurance())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getInsurance()).trim());
	
					if((CommonFunction.checkNull(termsVo.getOtherCondition())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getOtherCondition()).trim());
					
					if((CommonFunction.checkNull(termsVo.getMakerId())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getMakerId()).trim());
					
					if((CommonFunction.checkNull(termsVo.getMakerDate())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getMakerDate()).trim());
					
					if((CommonFunction.checkNull(termsVo.getRocApplicable())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getRocApplicable()).trim());
					
					if((CommonFunction.checkNull(termsVo.getGrossAmountLoan())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getGrossAmountLoan()).trim());
					
					if((CommonFunction.checkNull(termsVo.getPslOption())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getPslOption()).trim());
					
					if((CommonFunction.checkNull(termsVo.getAdditionalCommitee())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getAdditionalCommitee()).trim());
					
					if((CommonFunction.checkNull(termsVo.getCreditcommittee())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getCreditcommittee()).trim());
					
					if((CommonFunction.checkNull(termsVo.getDealId())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getDealId()).trim());
	
					insertPrepStmtObject.setSql(queryUpdate.toString());
					logger.info("IN saveTermSheetDetails() update query1 ### "+insertPrepStmtObject.printQuery());
					qryList.add(insertPrepStmtObject);
					logger.info("In saveTermSheetDetails ........ update query: "+queryUpdate);
					
					queryUpdate=null;
					
					try
					{
						boolean st=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
						if(st)
						{
							status="S";
						}
						logger.info("In saveTermSheetDetails.........update status: "+status);
					}
					catch(Exception e){
						e.printStackTrace();
					}
				}
				else
				{
					logger.info("In insert saveTermSheetDetails");
					StringBuilder queryUpdate=new StringBuilder();
					 queryUpdate.append("INSERT INTO CR_TERMSHEET_DTL(TXN_ID, ROI, MANAGEMENT_FEE, TENURE, SD_AMOUNT, GUARANTEES_P, GUARANTEES_C,");
					 queryUpdate.append(" ROC_CHARGES, HYPOTHECATION, INSURANCE, OTHER_CONDITION, MAKER_ID, MAKER_DATE,ROC_APPLICABLE,LOAN_GROSS_AMOUNT,PSL_OPTION,ADDITIONAL_COMMITEE,CREDIT_COMMITTEE )");
					 queryUpdate.append(" values ( ");
					 queryUpdate.append(" ?," ); //TXN_ID
					 queryUpdate.append(" ?," ); //ROI
					 queryUpdate.append(" ?," ); //MANAGEMENT_FEE
					 queryUpdate.append(" ?," ); //TENURE
					 queryUpdate.append(" ?," ); //SD_AMOUNT
					 queryUpdate.append(" ?," ); //GUARANTEES_P
					 queryUpdate.append(" ?," ); //GUARANTEES_C
					 queryUpdate.append(" ?," ); //ROC_CHARGES
					 queryUpdate.append(" ?," ); //HYPOTHECATION
					 queryUpdate.append(" ?," ); //INSURANCE
					 queryUpdate.append(" ?," ); //OTHER_CONDITION
					 queryUpdate.append(" ?," ); //MAKER_ID
					 //queryUpdate.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND) )" ); // MAKER_DATE
					 queryUpdate.append(dbo);
					 queryUpdate.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9), ");
					 queryUpdate.append(" ?," ); //ROC_APPLICABLE
					 queryUpdate.append(" ?," ); //LOAN_GROSS_AMOUNT
					 queryUpdate.append(" ?," ); //PSL_OPTION
					 queryUpdate.append(" ?," );  //ADDITIONAL_COMMITEE
					 queryUpdate.append(" ?" );  //CREDIT_COMMITTEE
					 queryUpdate.append(" )" );
					 
					if((CommonFunction.checkNull(termsVo.getDealId())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getDealId()).trim());
					 
					if((CommonFunction.checkNull(termsVo.getRoi())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getRoi()).trim());
					
					if((CommonFunction.checkNull(termsVo.getManagementFee())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						try {
							insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull((termsVo.getManagementFee()).trim()))).toString());
						} catch (ParseException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						
					if((CommonFunction.checkNull(termsVo.getTenure())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getTenure()).trim());
					
					if((CommonFunction.checkNull(termsVo.getSdAmount())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						try {
							insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull((termsVo.getSdAmount()).trim()))).toString());
						} catch (ParseException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}					
					
					if((CommonFunction.checkNull(termsVo.getGuaranteesPrsnl())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getGuaranteesPrsnl()).trim());
					
					if((CommonFunction.checkNull(termsVo.getGuaranteesCorp())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getGuaranteesCorp()).trim());
	
					
					if((CommonFunction.checkNull(termsVo.getRocCharges())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getRocCharges()).trim());
					
					if((CommonFunction.checkNull(termsVo.getHypothecation())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getHypothecation()).trim());
					
					if((CommonFunction.checkNull(termsVo.getInsurance())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getInsurance()).trim());
	
					if((CommonFunction.checkNull(termsVo.getOtherCondition())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getOtherCondition()).trim());
					
					if((CommonFunction.checkNull(termsVo.getMakerId())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getMakerId()).trim());
					
					if((CommonFunction.checkNull(termsVo.getMakerDate())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getMakerDate()).trim());
					
					if((CommonFunction.checkNull(termsVo.getRocApplicable())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getRocApplicable()).trim());
					
					if((CommonFunction.checkNull(termsVo.getGrossAmountLoan())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getGrossAmountLoan()).trim());
					
					if((CommonFunction.checkNull(termsVo.getPslOption())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getPslOption()).trim());
					
					if((CommonFunction.checkNull(termsVo.getAdditionalCommitee())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getAdditionalCommitee()).trim());
					
					if((CommonFunction.checkNull(termsVo.getCreditcommittee())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getCreditcommittee()).trim());
	
	
					insertPrepStmtObject.setSql(queryUpdate.toString());
					logger.info("IN saveTermSheetDetails() insert query1 ###"+insertPrepStmtObject.printQuery());
					qryList.add(insertPrepStmtObject);
					logger.info("In saveTermSheetDetails ........ insert query: "+queryUpdate);
					
					queryUpdate=null;
					
					try
					{
						boolean st=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
						if(st)
						{
							status="S";
						}
						logger.info("In saveTermSheetDetails.........insert status:"+status);
					}
					catch(Exception e){
						e.printStackTrace();
					}
				}
			}
			else
			{

				if(deal!=null && !deal.equalsIgnoreCase(""))
				{
					logger.info("In update saveTermSheetDetails");
					StringBuilder queryUpdate=new StringBuilder();
					queryUpdate.append("UPDATE CR_TERMSHEET_DTL SET LOAN_GROSS_AMOUNT=? WHERE TXN_ID=? ");
									
					if((CommonFunction.checkNull(termsVo.getGrossAmountLoan())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getGrossAmountLoan()).trim());
					
					if((CommonFunction.checkNull(termsVo.getDealId())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getDealId()).trim());
					
					insertPrepStmtObject.setSql(queryUpdate.toString());
					logger.info("IN saveTermSheetDetails() update query2 ### "+insertPrepStmtObject.printQuery());
					qryList.add(insertPrepStmtObject);
				}
				else
				{
					StringBuilder queryUpdate=new StringBuilder();
					queryUpdate.append("INSERT INTO CR_TERMSHEET_DTL(TXN_ID,LOAN_GROSS_AMOUNT");
					queryUpdate.append(" values ( ");
					queryUpdate.append(" ?," ); //TXN_ID
					queryUpdate.append("?)" ); //LOAN_GROSS_AMOUNT
					if((CommonFunction.checkNull(termsVo.getDealId())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getDealId()).trim());
					
					if((CommonFunction.checkNull(termsVo.getGrossAmountLoan())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((termsVo.getGrossAmountLoan()).trim());
					
					insertPrepStmtObject.setSql(queryUpdate.toString());
					logger.info("IN saveTermSheetDetails() update query2 ### "+insertPrepStmtObject.printQuery());
					qryList.add(insertPrepStmtObject);
				}
				try
				{
					boolean st=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
					logger.info("In saveTermSheetDetails.........insert status:"+status);
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
			}
			
			return status;
		}
		public String getDealIdInCm(String loanId)
		{
			logger.info("In getDealId...");
			StringBuilder query=new StringBuilder();
			query.append("select b.DEAL_ID from cr_loan_dtl a LEFT JOIN cr_deal_dtl b on b.DEAL_ID=a.LOAN_DEAL_ID where loan_id='"+loanId+"'");
			return  (String)ConnectionDAO.singleReturn(query.toString());
					
		}
		
		public String checkApprovalLevel(String userId)
		{
			String approvalLevel="";
			String approvalFlag="";
			try
			{
				logger.info("In checkApprovalLevel..........................DAOImpl");
				StringBuilder query1 =	new StringBuilder();
				StringBuilder query =	new StringBuilder();
				 	query1.append("SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE parameter_key='TERMSHEET_FLAG'");
					logger.info("In checkApprovalLevel Flag from parameter_mst ...............query...........DAOImpl "+query1);
					approvalFlag = ConnectionDAO.singleReturn(query1.toString()); 
					logger.info("Resultset value approvalFlag====  "+approvalFlag);
				if(CommonFunction.checkNull(approvalFlag).trim().equalsIgnoreCase("Y"))
				{
					 query.append("SELECT COUNT(1) FROM CR_USER_APPROVAL_M WHERE USER_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(userId)).trim()+"'AND LEVEL='1' AND USER_ROLE='U' ");
					logger.info("In checkApprovalLevel...............query...........DAOImpl "+query);
					approvalLevel = ConnectionDAO.singleReturn(query.toString()); 
					logger.info("Resultset value approvalLevel====  "+approvalLevel);
				}
				query=null;
				query1=null;
			}catch(Exception e){
			e.printStackTrace();
			}
			return approvalLevel;
		}


//End by KK
		public ArrayList getPropertyType()
		{
			ArrayList<Object> list=new ArrayList<Object>();
			try{
			logger.info("Enter getPropertyType() Amit");
			String query="select value,description from generic_master where GENERIC_KEY='PROPERTY_TYPE' and rec_status ='A'";
			logger.info("Query :  "+query);
			ArrayList propertyList = ConnectionDAO.sqlSelect(query);
			logger.info("propertyList Size : "+propertyList.size());
			for(int i=0;i<propertyList.size();i++){
				logger.info("getPropertyTypeList "+propertyList.get(i).toString());
				ArrayList subList=(ArrayList)propertyList.get(i);
				if(subList.size()>0)
				{
					logger.info("getNatureOfBusinessList " +subList.size());
					CollateralVo vo=new CollateralVo();
					vo.setPropertyTypeCode((CommonFunction.checkNull(subList.get(0)).toString()));
					vo.setPropertyTypeDesc((CommonFunction.checkNull(subList.get(1)).toString()));
					list.add(vo);
				}
			}
			}catch(Exception e){
				e.printStackTrace();
			}
			return list;
		}
		@Override
		public ArrayList<Object> getPropertyStatus() {
			ArrayList list=new ArrayList();
			try{
				StringBuffer query=new StringBuffer();
			 query.append("SELECT VALUE,DESCRIPTION FROM generic_master  "
		        +"where GENERIC_KEY='PROPERTY_STATUS' and REC_STATUS='A'");
			logger.info("In creditProcessingDaoI getCollateralsAll"+query);
			
			ArrayList collateralsAll = ConnectionDAO.sqlSelect(query.toString());
			query=null;
			for(int i=0;i<collateralsAll.size();i++){
				ArrayList sublist = (ArrayList) collateralsAll.get(i);
				if(sublist.size()>0){
					CodeDescVo av=new CodeDescVo();
				    av.setId((CommonFunction.checkNull(sublist.get(0))).trim());
					av.setName((CommonFunction.checkNull(sublist.get(1))).trim());
					list.add(av);
				}
			}
			}catch(Exception e){
				e.printStackTrace();
			}
			return list;
			
			
		}
		@Override
		public ArrayList<Object> getPropertytTitle() {
			// TODO Auto-generated method stub
			ArrayList list=new ArrayList();
			try{
				StringBuffer query=new StringBuffer();
			 query.append("SELECT VALUE,DESCRIPTION FROM generic_master  "
		        +"where GENERIC_KEY='PROPERTY_TITLE' and REC_STATUS='A'");
			logger.info("In creditProcessingDaoI getCollateralsAll"+query);
			
			ArrayList collateralsAll = ConnectionDAO.sqlSelect(query.toString());
			query=null;
			for(int i=0;i<collateralsAll.size();i++){
				ArrayList sublist = (ArrayList) collateralsAll.get(i);
				if(sublist.size()>0){
					CodeDescVo av=new CodeDescVo();
				    av.setId((CommonFunction.checkNull(sublist.get(0))).trim());
					av.setName((CommonFunction.checkNull(sublist.get(1))).trim());
					list.add(av);
				}
			}
			}catch(Exception e){
				e.printStackTrace();
			}
			return list;
		}
		@Override
		public ArrayList<Object> getPropertyOwnerForDeal(String propOwner,String dealId) {
			ArrayList list=new ArrayList();
			try{
				StringBuffer query=new StringBuffer();
				query.append("select  c.CUSTOMER_NAME,concat(c.CUSTOMER_NAME,'/',case B.DEAL_CUSTOMER_ROLE_TYPE when 'PRAPPL' then 'APPLICANT' WHEN 'COAPPL' THEN 'COAPPLICANT' WHEN 'GUARANTOR' THEN  'GUARANTOR ' END) customer " +
						" from cr_deal_customer_m c " +
						" join cr_deal_customer_role b on c.customer_id=b.deal_customer_id " +
						" join cr_deal_dtl a on a.deal_id=b.deal_id " +
						" where b.deal_id="+dealId+" and c.customer_name in("+propOwner+")");
				logger.info("In creditProcessingDaoI getPropertyOwnerForDeal  :  "+query);
			
			ArrayList collateralsAll = ConnectionDAO.sqlSelect(query.toString());
			query=null;
			for(int i=0;i<collateralsAll.size();i++){
				ArrayList sublist = (ArrayList) collateralsAll.get(i);
				if(sublist.size()>0){
					CollateralVo av=new CollateralVo();
				    av.setPropertyOwnerId((CommonFunction.checkNull(sublist.get(0))).trim());
				    av.setPropertyOwnerDesc((CommonFunction.checkNull(sublist.get(1))).trim());
					list.add(av);
				}
			}
			}catch(Exception e){
				e.printStackTrace();
			}
			return list;
			
		}
		@Override
		public ArrayList<Object> getPropertyOwnerForLoan(String propOwner,String loanId) {
			ArrayList list=new ArrayList();
			try{
				StringBuffer query=new StringBuffer();
				query.append("select distinct c.CUSTOMER_NAME,concat(c.CUSTOMER_NAME,'/',case b.loan_customer_role_type when 'PRAPPL' then 'APPLICANT' WHEN 'COAPPL' THEN 'COAPPLICANT' WHEN 'GUARANTOR'  THEN  'GUARANTOR ' END)customer" +
						" from gcd_customer_m c " +
						" join cr_loan_customer_role b on c.customer_id=b.gcd_id " +
						" join cr_loan_dtl a on a.loan_id=b.loan_id " +
						" where b.loan_id="+loanId+" and c.CUSTOMER_NAME in("+propOwner+") ");
				logger.info("In getPropertyOwnerForLoan"+query);
			
			ArrayList collateralsAll = ConnectionDAO.sqlSelect(query.toString());
			query=null;
			for(int i=0;i<collateralsAll.size();i++){
				ArrayList sublist = (ArrayList) collateralsAll.get(i);
				if(sublist.size()>0){
					CollateralVo av=new CollateralVo();
				    av.setPropertyOwnerId((CommonFunction.checkNull(sublist.get(0))).trim());
				    av.setPropertyOwnerDesc((CommonFunction.checkNull(sublist.get(1))).trim());
					list.add(av);
				}
			}
			}catch(Exception e){
				e.printStackTrace();
			}
			return list;
			
		}
		@Override
		public String getPropertyOwnerGcdId(String propOwner) {
			String propertyOwnerList="";
				try
				{
					logger.info("In getPropertyOwnerGcdId..........................DAOImpl");
					StringBuilder query1 =	new StringBuilder();
					  
					query1.append("SELECT STUFF((SELECT ',' + convert(varchar(20),gcd_customer_id) FROM cr_deal_customer_m WHERE customer_id in("+propOwner+") FOR XML PATH ('')), 1, 1,'')");
					logger.info("In checkApprovalLevel Flag from parameter_mst ...............query...........DAOImpl "+query1);
					propertyOwnerList = ConnectionDAO.singleReturn(query1.toString()); 
					logger.info("Resultset value approvalFlag====  "+propertyOwnerList);
					query1=null;
				}catch(Exception e){
				e.printStackTrace();
				}
				return propertyOwnerList;
			}


		@Override
		public ArrayList<Object> showInsuranceRelWithNominee() {
			// TODO Auto-generated method stub
			ArrayList list=new ArrayList();
			try{
				StringBuffer query=new StringBuffer();
			 query.append("SELECT VALUE,DESCRIPTION FROM generic_master  "
		        +"where GENERIC_KEY='RELATION_TYPE' and REC_STATUS='A'");
			logger.info("In creditProcessingDaoI getPropertytTitle"+query);
			
			ArrayList collateralsAll = ConnectionDAO.sqlSelect(query.toString());
			query=null;
			for(int i=0;i<collateralsAll.size();i++){
				ArrayList sublist = (ArrayList) collateralsAll.get(i);
				if(sublist.size()>0){
					CodeDescVo av=new CodeDescVo();
				    av.setId((CommonFunction.checkNull(sublist.get(0))).trim());
					av.setName((CommonFunction.checkNull(sublist.get(1))).trim());
					list.add(av);
				}
			}
			}catch(Exception e){
				e.printStackTrace();
			}
			return list;
		}

		
// Changes made by Sanjog for Document Upload for FVC
		
		
		public boolean checkUploadFeasibilityFVC(String dealId,String stage)
		{
			boolean status=false;
			try
			{
				String strReturn=null;
				int count=0;
				logger.info("In check Upload Feasibility..........................DAOImpl");
				StringBuilder query=new StringBuilder();
				 query.append("select count(txn_id) from cr_uploaded_documents where txn_id='"+dealId+"' and txn_type='FVC'");
				logger.info("In check Upload Feasibility...............query...........DAOImpl "+query);
				Connection conn= ConnectionDAO.getConnection();
				Statement stmt = conn.createStatement();
				ResultSet rs = stmt.executeQuery(query.toString());
				if (rs.next()) {
		            strReturn = rs.getString(1);
		        }
				count=Integer.parseInt(strReturn);
				conn.close();
				if(count<5)
				{
					status=true;
				}
				else if(count>=5)
				{
					status=false;
				}
				logger.info("Resultset value====  "+count);
				
				query=null;
				
			}catch(Exception e){
				e.printStackTrace();
			}
			return status;
		}
		
	
		public boolean uploadDocumentDataForFVC(Object ob,String stage)
		{
			UnderwritingDocUploadVo uwDocVo = (UnderwritingDocUploadVo)ob;
			boolean status=false;
			logger.info("Inside DAO Impl: File= "+uwDocVo.getDocFile());
			logger.info("uploadDocumentDataForFVC= "+uwDocVo.getFieldVerificationUniqueId());
			//boolean uploadStatus=UploadDocument.docUpload(uwDocVo.getDocFile(),uwDocVo.getDealId());
			//if(uploadStatus)
			//{
				logger.info("Document Uploaded Successfully");
				ArrayList qryList = new ArrayList();
				PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
				try{
					logger.info("In insert part of uploadDocumentDataForFVC....");
					StringBuffer bufInsSql =	new StringBuffer();
					bufInsSql.append("insert into cr_uploaded_documents(txn_type,txn_id,document_desc,file_name,document_path,uploaded_by,uploaded_date)");
					bufInsSql.append(" values ( ");
					bufInsSql.append(" ?," ); //TXN_TYPE
					bufInsSql.append(" ?," ); //TXN_ID
					bufInsSql.append(" ?," ); //Document Description
					bufInsSql.append(" ?," ); //File Name
					bufInsSql.append(" ?," ); //Document Path
					bufInsSql.append(" ?," ); //Uploaded By
					bufInsSql.append(dbo); 
					bufInsSql.append("sysdate())" );
					
						insertPrepStmtObject.addString(stage);
						
					if((CommonFunction.checkNull(uwDocVo.getFieldVerificationUniqueId())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((uwDocVo.getFieldVerificationUniqueId()).trim());
					if((CommonFunction.checkNull(uwDocVo.getDocDescription())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((uwDocVo.getDocDescription()).trim());
					if(CommonFunction.checkNull(uwDocVo.getFileName()).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(CommonFunction.checkNull(uwDocVo.getFileName()).trim());
					if((CommonFunction.checkNull(uwDocVo.getDocPath())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((uwDocVo.getDocPath()).trim());
					if((CommonFunction.checkNull(uwDocVo.getUserName())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((uwDocVo.getUserName()).trim());
					insertPrepStmtObject.setSql(bufInsSql.toString());
					logger.info("IN uploadUnderwritingData() insert query1 ### "+insertPrepStmtObject.printQuery());
					qryList.add(insertPrepStmtObject);
					status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
					logger.info("In uploadUnderwritingData.................query status..... "+status);
					bufInsSql=null;
				}catch(Exception e){
					e.printStackTrace();
				}
			return status;
		}

		public ArrayList getUploadDocForFVC(String dealId,String stage)

		{
			ArrayList list=new ArrayList();
			try{
				logger.info("In getUploadUnderwritingData..........................DAOImpl"+dealId);
				StringBuilder query=new StringBuilder();
				 query.append("select a.txn_id, a.file_name, a.document_desc, b.USER_NAME from cr_uploaded_documents a left join sec_user_m b on a.UPLOADED_BY=b.USER_ID where txn_id='"+dealId+"' and TXN_TYPE='"+stage+"'");
				logger.info("In getUploadUnderwritingData...............query...........DAOImpl"+query.toString());
				UnderwritingDocUploadVo uwDocVo = null;
				ArrayList product = ConnectionDAO.sqlSelect(query.toString());
				logger.info("getUploadUnderwritingData size of list Product "+product.size());
				query=null;
				for(int i=0;i<product.size();i++){
					logger.info("getUploadUnderwritingData... FOR loop "+CommonFunction.checkNull(product.get(i)).toString());
					ArrayList data=(ArrayList)product.get(i);
					if(data.size()>0)	{
						uwDocVo=new UnderwritingDocUploadVo();
						uwDocVo.setDealId((CommonFunction.checkNull(data.get(0))).trim());
						uwDocVo.setFileName(CommonFunction.checkNull(data.get(1)).trim());
						uwDocVo.setDocDescription((CommonFunction.checkNull(data.get(2))).trim());
						uwDocVo.setUserName((CommonFunction.checkNull(data.get(3))).trim());
						list.add(uwDocVo);
					}
				}
			}
			catch(Exception e){
				e.printStackTrace();
			}

			return list;
		}
	// Added By Anil

		public ArrayList getLoginUserLevel(String userId, String userName) {
			ArrayList list = new ArrayList();
			boolean status = false;
			String roleName = "";
			CreditProcessingLeadEntryVo cpLeadEntryVO = new CreditProcessingLeadEntryVo();
			try {
				logger.info("In getLoginUserLevel..................userId........"
						+ userId);
				StringBuilder query = new StringBuilder();
				query.append("select * from sec_user_level_dtl where USER_ID='"
						+ StringEscapeUtils.escapeSql(
								CommonFunction.checkNull(userId)).trim()
						+ "' AND LEVEL_ID='RM' ");
				logger
						.info("In getLoginUserLevel...............query....................."
								+ query);
				status = ConnectionDAO.checkStatus(query.toString());
				if (!status) {
					StringBuilder query1 = new StringBuilder();
					query1
							.append("select * from sec_user_level_dtl where USER_ID='"
									+ StringEscapeUtils.escapeSql(
											CommonFunction.checkNull(userId))
											.trim() + "' AND LEVEL_ID='RO' ");
					logger
							.info("In getLoginUserLevel...............query....................."
									+ query1);
					boolean status1 = ConnectionDAO.checkStatus(query1.toString());
					if (status1) {
						StringBuilder query2 = new StringBuilder();
						cpLeadEntryVO = new CreditProcessingLeadEntryVo();
						query2
								.append("SELECT DISTINCT V.USER_NAME,V.USER_ID FROM SEC_USER_M V WHERE V.USER_ID=(SELECT DISTINCT U.USER_REPORTING_TO FROM SEC_USER_M U ");
						query2
								.append(" inner join sec_user_level_dtl D on D.USER_ID=U.USER_REPORTING_TO AND U.REC_STATUS='A' AND U.USER_ID='"
										+ userId + "' AND D.LEVEL_ID='RM')");
						logger.info("query2..............." + query2.toString());
						ArrayList relationshipManager = ConnectionDAO
								.sqlSelect(query2.toString());
						for (int i = 0; i < relationshipManager.size(); i++) {
							ArrayList data = (ArrayList) relationshipManager.get(i);
							if (data.size() > 0) {
								cpLeadEntryVO
										.setRelationshipManager((CommonFunction
												.checkNull(data.get(0))).trim());
								cpLeadEntryVO.setLbxRelationship((CommonFunction
										.checkNull(data.get(1))).trim());
							}
						}
						cpLeadEntryVO.setLbxUserSearchId(CommonFunction
								.checkNull(userId));
						cpLeadEntryVO.setGeneratedUser(CommonFunction
								.checkNull(userName));
					}
				} else {
					cpLeadEntryVO.setLbxRelationship(CommonFunction
							.checkNull(userId));
					cpLeadEntryVO.setRelationshipManager(CommonFunction
							.checkNull(userName));
				}

				list.add(cpLeadEntryVO);
				query = null;
			} catch (Exception e) {
				e.printStackTrace();
			}
			return list;
		}

		public ArrayList getRelationshipManager(String relationManager,
				String relationOfficer) {
			ArrayList list = new ArrayList();
			String lbxRelationManager = null;
			String roleName = "";
			CreditProcessingLeadEntryVo cpLeadEntryVO = new CreditProcessingLeadEntryVo();
			try {
				logger
						.info("In getcheckRelationshipManage..................userId........"
								+ relationManager);
				StringBuilder query = new StringBuilder();
				query
						.append("select D.USER_ID FROM sec_user_level_dtl D where D.LEVEL_ID='RM' and D.USER_ID=(SELECT USER_ID FROM sec_user_m M WHERE M.USER_ID=(SELECT USER_REPORTING_TO FROM sec_user_m M WHERE M.USER_ID='"
								+ StringEscapeUtils.escapeSql(
										CommonFunction.checkNull(relationOfficer))
										.trim() + "'))");
				logger
						.info("In getcheckRelationshipManage...............query....................."
								+ query);
				lbxRelationManager = ConnectionDAO.singleReturn(query.toString());
				if (!(CommonFunction.checkNull(lbxRelationManager)
						.equalsIgnoreCase("") || CommonFunction.checkNull(
						lbxRelationManager).equalsIgnoreCase(null))) {
					cpLeadEntryVO.setLbxRelationship(CommonFunction
							.checkNull(lbxRelationManager));
					cpLeadEntryVO.setRelationshipManager(CommonFunction
							.checkNull(relationManager));
				}
				list.add(cpLeadEntryVO);
				query = null;
			} catch (Exception e) {
				e.printStackTrace();
			}
			return list;
		}	
// Added by Anil
	
	// Amit Query Starts
	public ArrayList<CommonDealVo> querySearchDetail(CommonDealVo vo) {
		ArrayList list=new ArrayList();
		int count=0;
		int startRecordIndex=0;
		int endRecordIndex = no;
		logger.info("here userid++++++++++++++++++++++++++++++++++++++++++++++++++++++++ "+vo.getReportingToUserId());
		 			String userNameQ="select USER_NAME from sec_user_m where REC_STATUS='A' and USER_ID='"+vo.getReportingToUserId()+"'";
		 			String userName=ConnectionDAO.singleReturn(userNameQ);
		 			logger.info("userNameQ: "+userNameQ+" userName: "+userName);
		ArrayList header=new ArrayList();
		 String branch="";
		   if(vo.getAllBranches().equalsIgnoreCase("on"))
		   {
			   String branchMappedToUserQuery="SELECT STUFF((SELECT ',' + CAST(BRANCH_ID AS varchar(10)) FROM sec_user_branch_dtl WHERE USER_ID='"+CommonFunction.checkNull(vo.getReportingToUserId()).trim()+"' AND REC_STATUS='A' FOR XML PATH ('')), 1, 1, '')";
			   branch=ConnectionDAO.singleReturn(branchMappedToUserQuery);
			   logger.info("branchMappedToUserQuery: "+branchMappedToUserQuery+"      branches maped to user:   "+branch);
		   }
		   else
		   {
			   branch=vo.getBranchId();
		   }
		   
		   if(CommonFunction.checkNull(branch).equalsIgnoreCase(""))
		   {
			   branch=vo.getBranchId(); 
		   }
		
		
		try
		{
			logger.info("Inside querySearchDetail.....");
			
			CommonDealVo fetchVo= (CommonDealVo) vo;
			boolean appendSQL=false;
			StringBuffer bufInsSql=new StringBuffer();
			StringBuffer bufInsSqlTempCount = new StringBuffer();
			bufInsSql.append("select distinct d.DEAL_ID,DEAL_NO,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC ");
			bufInsSql.append("from cr_deal_dtl d");
			bufInsSqlTempCount.append("SELECT COUNT(distinct d.DEAL_ID) FROM cr_deal_dtl d ");
			
			bufInsSql.append(" inner join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
			bufInsSqlTempCount.append(" inner join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
			
			bufInsSql.append(" inner join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");			
			bufInsSqlTempCount.append(" inner join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
			
			bufInsSql.append(" inner join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");			
			bufInsSqlTempCount.append(" inner join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
			
			bufInsSql.append(" inner join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");			
			bufInsSqlTempCount.append(" inner join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
			
		//	bufInsSql.append(" inner join deal_query_dtl q on d.DEAL_ID=q.DEAL_ID and q.MAKER_ID='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"'  ");
		//	bufInsSqlTempCount.append(" inner join deal_query_dtl q on d.DEAL_ID=q.DEAL_ID and q.MAKER_ID='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"'  ");
			
			
			
			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase(""))) && ((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on"))))
			{
				bufInsSql.append("WHERE D.REC_STATUS = 'F' AND  d.DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+") and d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
				bufInsSqlTempCount.append("WHERE D.REC_STATUS = 'F' AND d.DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+") and d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
			}
			
			if(((vo.getLbxDealNo().equalsIgnoreCase("")) ||(vo.getCustomername().equalsIgnoreCase(""))||(vo.getLbxProductID().equalsIgnoreCase(""))||(vo.getLbxscheme().equalsIgnoreCase("")))|| (!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on")))){
				appendSQL=true;
			}
			
			if(appendSQL){
				logger.info("In Where Clause");
				//bufInsSql.append(" WHERE d.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and d.Rec_status='F' ");
				//bufInsSqlTempCount.append(" WHERE d.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and d.Rec_status='F' ");
				
				bufInsSql.append(" WHERE D.REC_STATUS = 'F' AND  d.DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+")");
				bufInsSqlTempCount.append(" WHERE D.REC_STATUS = 'F' AND  d.DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+")");
			
					
			}
			 if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")))) {
			        bufInsSql.append("AND d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
			        bufInsSqlTempCount.append("AND d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
			   	 appendSQL=true;
			   	  
			     }
				
				if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")))) {
			   	  bufInsSql.append("AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
			   	  bufInsSqlTempCount.append("AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
			   	  appendSQL=true;
			     }
				if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")))) {
				   	  bufInsSql.append("AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
				   	bufInsSqlTempCount.append("AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
				   	  appendSQL=true;
				     }
				if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")))) {
				   	  bufInsSql.append("AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
				   	bufInsSqlTempCount.append("AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
				   	  appendSQL=true;
				     }
				if(((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on")))) {
				   	  bufInsSql.append("AND d.DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+") ");
				   	  bufInsSqlTempCount.append("AND d.DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+") ");
				   	  appendSQL=true;
				     }
			LoggerMsg.info("query : "+bufInsSql.toString());
			logger.info("bufInsSqlTempCount **************************** : "+bufInsSqlTempCount.toString());
			count =Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
			
//			if((StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()==null && StringEscapeUtils.escapeSql(vo.getCustomername()).trim()==null) || (StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim().equalsIgnoreCase("") && StringEscapeUtils.escapeSql(vo.getCustomername()).trim().equalsIgnoreCase("")) || (StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()==null  && StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim().equalsIgnoreCase("")) || ( StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()==null && StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim().equalsIgnoreCase("")) || vo.getCurrentPageLink()>1)
//			{
			
			logger.info("current PAge Link no .................... "+vo.getCurrentPageLink());
			if(vo.getCurrentPageLink()>1)
			{
				startRecordIndex = (vo.getCurrentPageLink()-1)*no;
				endRecordIndex = no;
				logger.info("startRecordIndex .................... "+startRecordIndex);
				logger.info("endRecordIndex .................... "+endRecordIndex);
			}
				
			bufInsSql.append(" ORDER BY d.DEAL_ID OFFSET ");
			bufInsSql.append(startRecordIndex);
			bufInsSql.append(" ROWS FETCH next ");
			bufInsSql.append(endRecordIndex);
			bufInsSql.append(" ROWS ONLY ");
			logger.info("Search queryResponseSearchDetail query for SQL SERVER : " + bufInsSql.toString());
			//bufInsSql.append(CommonFunction.betweenStartEnd(startRecordIndex, endRecordIndex));
			
//			}
			logger.info("query : "+bufInsSql.toString());
			
			
		    header = ConnectionDAO.sqlSelect(bufInsSql.toString());
		    
		    
						
			for(int i=0;i<header.size();i++){
				
				logger.info("header: "+header.size());
				ArrayList header1=(ArrayList)header.get(i);
				if(header1!=null && header1.size()>0)
				{
					logger.info("header list size ....................."+header.size());
					fetchVo = new CommonDealVo();
				
					fetchVo.setLbxDealNo((CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim());
					
					//dealCapturing.do?method=leadEntryCapturing&dealId="+val+"&status=UWA
							
					fetchVo.setDealNo("<a href=queryBehind.do?method=showQueryDataFirst&dealId="+CommonFunction.checkNull(header1.get(0)).toString()+ ">"+ CommonFunction.checkNull(header1.get(1)).toString() + "</a>");
					fetchVo.setCustomername((CommonFunction.checkNull(header1.get(2))).trim());
					fetchVo.setProduct((CommonFunction.checkNull(header1.get(3))).trim());
					fetchVo.setScheme((CommonFunction.checkNull(header1.get(4))).trim());
					fetchVo.setReportingToUserId(userName);
					fetchVo.setTotalRecordSize(count);
					list.add(fetchVo);
				}
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return list;
	}
	
	public ArrayList getQueryInitiationData(String dealId,String userId){
		ArrayList list=new ArrayList();
		try{
			logger.info("In getUnderwritingQueryData..........................DAOImpl");//+dealId);
			StringBuilder query=new StringBuilder();
			 query.append("select deal_id,dbo.DATE_FORMAT(query_date,'"+dateFormatWithTime+"'),query_remarks, case when resolution_status='P' then 'Pending' else 'Resolved' end as resolution_status,dbo.DATE_FORMAT(resolution_datetime,'"+dateFormatWithTime+"'),resolution_remarks,u.USER_NAME,resolution_status,DEAL_QUERY_ID," +
					 "(select USER_NAME from sec_user_m where USER_ID=q.MAKER_ID)MAKER_ID,QUERY_TYPE,case when QUERY_TYPE='CRT' then 'CRITERIA RELATED' when QUERY_TYPE='CLA' then 'CLARIFICATION RELATED'  when QUERY_TYPE='BNK' then 'BANK RELATED'  when QUERY_TYPE='DOC' then 'DOCUMENTS RELATED'  when QUERY_TYPE='MJD' then 'MAJOR DEBTOR'  when QUERY_TYPE='MAC' then 'MAJOR CREDITOR'   end as QUERY_TYPE_DESC  from deal_query_dtl q left join sec_user_m u on u.user_id=q.user_id " +
			 		" where deal_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' and q.maker_id='"+userId+"' ");
			logger.info("In getUnderWriterData...............query...........DAOImpl"+query);
			QueryProcessingVo vo= null;
			ArrayList product = ConnectionDAO.sqlSelect(query.toString());
			//logger.info("getUnderwritingQueryData "+product.size());
			
			query=null;
			
			for(int i=0;i<product.size();i++){
				//logger.info("getUnderwritingQueryData...FOR loop "+CommonFunction.checkNull(product.get(i)).toString());
				ArrayList data=(ArrayList)product.get(i);
				if(data.size()>0)	{
					vo = new QueryProcessingVo();
					vo.setDealId((CommonFunction.checkNull(data.get(0))).trim());
					vo.setQueryDate((CommonFunction.checkNull(data.get(1))).trim());
					vo.setQueryRemarks((CommonFunction.checkNull(data.get(2))).trim());
					vo.setResolution((CommonFunction.checkNull(data.get(3))).trim());
					vo.setResolutionDate((CommonFunction.checkNull(data.get(4))).trim());
					vo.setResolutionRemarks((CommonFunction.checkNull(data.get(5))).trim());
					vo.setUserId((CommonFunction.checkNull(data.get(6))).trim());
					vo.setResolutionStatus((CommonFunction.checkNull(data.get(7))).trim());
					vo.setDealQueryId((CommonFunction.checkNull(data.get(8))).trim());
					vo.setInitiatedBy((CommonFunction.checkNull(data.get(9))).trim());
					vo.setQueryType((CommonFunction.checkNull(data.get(10))).trim());
					vo.setQueryTypeDesc((CommonFunction.checkNull(data.get(11))).trim());
					list.add(vo);
				}
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}
//Amit Query Search Ends
		
		public boolean deleteDocumentUploadedForFVI(String documentName,String fieldVerificationUniqueId,String stage) {

			logger.info("In deleteDocumentUploadEntry .......DAOImpl.."+StringEscapeUtils.escapeSql(CommonFunction.checkNull(documentName).trim()));
		        boolean status=false;
			try{
				StringBuilder query=new StringBuilder();
				query.append("delete from cr_uploaded_documents where file_name='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(documentName).trim())+"' and txn_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(fieldVerificationUniqueId)).trim()+"' and txn_type='"+stage+"'");
				logger.info("In.....deleteDocumentUploadEntry"+query.toString());
				qryList  = new ArrayList();
				qryList.add(query);
				status=ConnectionDAO.sqlInsUpdDelete(qryList);
				logger.info("Deletion Status :"+status);
				query=null;
				}catch(Exception e){
					e.printStackTrace();
				}
				return status;
		}

		
		public String getFVIFileInfo(String fieldVerificationUniqueId,String fileName,String stage)
		{
			String filePath="";
			try
			{
			logger.info("In getFileInfo..........................DAOImpl");
			StringBuffer query =	new StringBuffer();
			 query.append("select document_path from cr_uploaded_documents where txn_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(fieldVerificationUniqueId)).trim()+"' and file_name='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(fileName)).trim()+"' AND TXN_TYPE='"+stage+"'");
			logger.info("In getFileInfo...............query...........DAOImpl "+query.toString());
			filePath = ConnectionDAO.singleReturn(query.toString()); 
			logger.info("Resultset value====  "+filePath);
			query=null;

		}catch(Exception e){
			e.printStackTrace();
		}
			return filePath;
		}
		//Code start by Sanjog for FVI
		public String getAppraiserTypeAtCM(String loanId,String verificationId)
		{

			String flag="";
			StringBuilder query = new StringBuilder();
			query.append("SELECT APPRAISER_TYPE FROM cr_deal_verification_dtl WHERE STAGE='LIM' AND LOAN_ID= '"+loanId+"' and VERIFICATION_ID="+verificationId+"");
			logger.info("APPRAISER_TYPE:::::::::::::::::"+query.toString());
			try
			{
				flag = ConnectionDAO.singleReturn(query.toString());
			} catch (Exception e) {
				e.printStackTrace();
			}
			return flag;

		}

		  public ArrayList<Object> fetchCollateralDetailsAllAtCM(String primaryId,String propValue)
          {
         	 logger.info("in fetchCollateralDetailsAllAtCM()");
        	 CollateralVo vo=null;
        	 //SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy");
	         ArrayList<Object> list=new ArrayList<Object>();
	            try
	           {
	            logger.info("Value of Assets Id in dao is...................."+primaryId);
	            logger.info("Value of Property in dao is...................."+propValue);
	            StringBuilder query=new StringBuilder();
	             query.append("Select TOP 1 ");
	             query.append(" c.ASSET_ID, c.ASSET_TYPE, c.ASSET_NEW_OLD, c.ASSET_COLLATERAL_DESC, c.ASSET_COLLATERAL_VALUE, " );
	             query.append(" c.COLLATERAL_SECURITY_MARGIN, c.FD_AMOUNT, c.FD_TENURE, c.FD_RATE,");
	             query.append(dbo);
	             query.append("DATE_FORMAT(c.FD_BOOK_DATE,'"+dateFormat+"'), ");
	             query.append(dbo);
	             query.append("DATE_FORMAT(c.FD_MATURITY_DATE,'"+dateFormat+"'), c.FD_AGENCY_NAME, " );
	             query.append(" c.FD_AGENCY_RATING, c.FD_APPLICANT, c.SBLC_AMOUNT,");
	             query.append(dbo);
	             query.append("DATE_FORMAT(c.SBLC_VALIDITY,'"+dateFormat+"'), ");
	             query.append(dbo);
	             query.append("DATE_FORMAT(c.SBLC_ISSUING_DATE,'"+dateFormat+"'), c.SBLC_PARENT_COMPANY, " );
	             query.append(" c.SECURITY_TYPE, c.SECURITY_CATEGORY, c.SECURITY_MARKET_VALUE, c.MACHINE_MAKE, c.MACHINE_MODEL, c.MACHINE_TYPE, " );
	             query.append(" c.MACHINE_OWNER, ");
	             query.append(dbo);
	             query.append("DATE_FORMAT(c.MACHINE_MANUFACTURING_YEAR,'"+dateFormat+"'), c.MACHINE_IDENTIFICATION_NO, c.ASSET_SUPPLIER, c.MACHINE_COLLATERAL_COST, " );
	             query.append(" c.MACHINE_MARGIN, c.PROPERTY_TYPE, c.PROPERTY_ADDRESS, c.PROPERTY_AREA, c.PROPERTY_CONSTRUCTION,c.PROPERTY_OWNER, " );
	             query.append(" c.VEHICLE_MAKE, c.VEHICLE_MODEL, c.VEHICLE_TYPE, c.VEHICLE_OWNER, c.VEHICLE_MANUFACTURING_YEAR, " );
	             query.append(" c.VEHICLE_REGISTRATION_NO,");
	             query.append(dbo);
	             query.append("DATE_FORMAT(c.VEHICLE_REGISTRATION_DATE,'"+dateFormat+"'), c.VEHICLE_CHASIS_NUMBER, c.VEHICLE_Insurer,");
	             query.append(dbo);
	             query.append("DATE_FORMAT(c.VEHICLE_INSURED_DATE,'"+dateFormat+"'), " );
	             query.append(" c.VEHICLE_COLLATERAL_COST, c.VEHICLE_MARGIN, c.STOCK_TYPE, c.STOCK_NATURE, c.STOCK_GODOWN_ADDRESS, " );
	             query.append(" c.STOCK_INVENTORY_CYCLE, c.DEBTOR_TYPE, c.DEBTOR_TOTAL_OUTSTANDING,c.ASSET_COLLATERAL_CLASS, c.BG_TYPE,");
	             query.append(dbo);
	             query.append("DATE_FORMAT(c.BG_ISSUE_DATE,'"+dateFormat+"'),");
	             query.append(dbo);
	             query.append("DATE_FORMAT(c.BG_VALIDITY_DATE,'"+dateFormat+"')," );
	             query.append(" BG_ISSUING_BANK ,ds.DEALER_DESC,c.ASSET_MANUFATURER,c.ASSET_MANUFATURER_DESC,c.ASSET_SUPPLIER_DESC,");
	             query.append(dbo);
	             query.append("DATE_FORMAT(c.INVOICE_DATE,'"+dateFormat+"')," );
	             query.append("c.MACHINE_VALUE,c.MACHINE_DISCOUNT,C.VEHICLE_VALUE,C.VEHICLE_DISCOUNT ,c.LOAN_AMOUNT,c.SECURITY,c.VEHICLE_ASSET_STATE,st.STATE_DESC,c.VEHICLE_ASSET_USES_TYPE,c.DEFAULT_LTV, " );
	             query.append("c.VILLAGE_NAME_LANDMARK,c.BUILT_UP_AREA,c.TXN_VALUE,c.TECH_VERIFICATION,c.DOCUMENT_VALUE,c.ADDITIONAL_CONSTRUCTION,c.ASSET_LEVEL," );
	             query.append("c.ADDRESS_LINE2,c.ADDRESS_LINE3,ccm.COUNTRY_DESC,csm.STATE_DESC,cdm.DISTRICT_DESC,c.TEHSIL,c.PINCODE,c.COUNTRY,c.STATE,c.DISTRICT,c.ASSET_STANDARD,c.LAWYER_NAME,c.VALUER_NAME,c.PROPERTY_DIRECTION,c.ENGINE_NUMBER,c.PROPERTY_STATUS,c.PROPERTY_TITLE,c.CARPET_AREA,c.TECHNICAL_VAL1,c.TECHNICAL_VAL2,c.BUILDUPAREASQMTR,c.ISSUEING_BANK_ID,(SELECT BANK_NAME FROM com_bank_m where BANK_ID=c.ISSUEING_BANK_ID)BANK_NAME,c.ISSUEING_BRANCH_ID,(SELECT BANK_BRANCH_NAME FROM com_bankbranch_m where BANK_BRANCH_ID=c.ISSUEING_BRANCH_ID)BRANCHNAME,c.SUPER_BUILDUP_AREA, " );
	             query.append(" c.PROPERTY_OWNER_GCD_ID,C.VALUATION_METHOD_ID,(SELECT  DESCRIPTION FROM GENERIC_MASTER WHERE GENERIC_KEY='VALUATION_METHOD' AND VALUE=C.VALUATION_METHOD_ID )AS VALUATION_DESC,C.VALUATION_AMOUNT,C.INSURANCE_POLICY_NO,C.INSURANCE_PREMIUM_AMOUNT,");
	             query.append(dbo);
	             query.append("DATE_FORMAT(C.INSURANCE_POLICY_START_DATE,'"+dateFormat+"'),");
	             query.append(dbo);
	             query.append("DATE_FORMAT(C.INSURANCE_MATURITY_DATE,'"+dateFormat+"'),C.INSURANCE_PREMIUM_FREQUENCY,C.INSURANCE_NOMINEE,C.INSURANCE_RELATION_WITH_NOMINEE,C.INSURANCE_TENURE, ");
	             query.append(" C.INSURANCE_AGENCY,(select AGENCY_NAME from com_agency_m where agency_type='INS' and REC_STATUS='A' AND agency_code=C.INSURANCE_AGENCY)INSURANCE_AGENCY_NAME,C.COVER_NOTE,C.SUM_ASSURED,c.MAKE_MODEL_ID,C.VALUER_NAME  ");
	             query.append(" from cr_asset_collateral_m c left join cr_loan_collateral_m d on c.ASSET_ID=d.ASSETID left join cr_dsa_dealer_m ds on c.ASSET_SUPPLIER=ds.DEALER_ID left join com_state_m st on c.VEHICLE_ASSET_STATE=st.STATE_ID " );
	             query.append(" left join com_country_m ccm on c.COUNTRY=ccm.COUNTRY_ID left join com_state_m csm on c.STATE=csm.STATE_ID left join com_district_m cdm on c.DISTRICT=cdm.DISTRICT_ID " );
	             query.append(" where c.ASSET_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(primaryId)).trim()+" and c.ASSET_COLLATERAL_CLASS='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(propValue)).trim()+"'");
	            
	             logger.info("in fetchCollateralDetailsAll()   Query  :  "+query.toString());
		        ArrayList bdetails = ConnectionDAO.sqlSelect(query.toString());
	    	    logger.info("CollateralDetailsFetchAll"+bdetails.size());
	    	    
	    	    query=null;
	    	    int size=bdetails.size();
	    	    for(int i=0;i< bdetails.size();i++)
	    	    {
	    	    	ArrayList bdetails1=(ArrayList)bdetails.get(i);
	    	    	if(bdetails1.size()>0)
	    			{
	    	    	   vo =  new CollateralVo();
	    		        vo.setAssetsId((CommonFunction.checkNull(bdetails1.get(0))).trim());
	    	    		vo.setColltype2((CommonFunction.checkNull(bdetails1.get(1))).trim());
	    	    		vo.setAssetNature((CommonFunction.checkNull(bdetails1.get(2))).trim());
	    	    		vo.setAssetsCollateralDesc((CommonFunction.checkNull(bdetails1.get(3))).trim());
	    	    		
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(4))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(4))).trim());
		    	    		vo.setAssetsCollateralValue(myFormatter.format(reconNum));
	    	    		}
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(5))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(5))).trim());
		    	    		vo.setCollateralSecurityMargin(myFormatter.format(reconNum));
	    	    		}	    	    		
	    	    		
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(6))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(6))).trim());
		    	    		vo.setFdAmount(myFormatter.format(reconNum));
	    	    		}	  
	    	    		
	    	    		vo.setFdTenure((CommonFunction.checkNull(bdetails1.get(7))).trim());
	    	    		
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(8))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(8))).trim());
		    	    		vo.setFdRate(myFormatter.format(reconNum));
	    	    		}	
	    	    		
	    	    		vo.setFdBookDate((CommonFunction.checkNull(bdetails1.get(9))).trim());
	    	    		vo.setFdMatureDate((CommonFunction.checkNull(bdetails1.get(10))).trim());
	    	    		vo.setFdAgencyName((CommonFunction.checkNull(bdetails1.get(11))).trim());
	    	    		vo.setFdAgencyRating((CommonFunction.checkNull(bdetails1.get(12))).trim());
	    	    		vo.setFdApplicants((CommonFunction.checkNull(bdetails1.get(13))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(14))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(14))).trim());
		    	    		vo.setSblcAmount(myFormatter.format(reconNum));
	    	    		}	
	    	    	
	    	    		vo.setSblcValidity((CommonFunction.checkNull(bdetails1.get(15))).trim());
	    	    		vo.setSblcIssuingDate((CommonFunction.checkNull(bdetails1.get(16))).trim());
	    	    		vo.setSblcParentCompany((CommonFunction.checkNull(bdetails1.get(17))).trim());
	    	    		vo.setSecurityType((CommonFunction.checkNull(bdetails1.get(18))).trim());
	    	    		vo.setSecurityCategory((CommonFunction.checkNull(bdetails1.get(19))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(20))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(20))).trim());
		    	    		vo.setSecurityMarketValue(myFormatter.format(reconNum));
	    	    		}	
	    	    		
	    	    		vo.setMachineMake((CommonFunction.checkNull(bdetails1.get(21))).trim());
	    	    		vo.setMachineModel((CommonFunction.checkNull(bdetails1.get(22))).trim());
	    	    		vo.setMachineType((CommonFunction.checkNull(bdetails1.get(23))).trim());
	    	    		vo.setMachineOwner((CommonFunction.checkNull(bdetails1.get(24))).trim());
	    	    		vo.setMachineYearOfManufact((CommonFunction.checkNull(bdetails1.get(25))).trim());
	    	    		vo.setMachineIdNo((CommonFunction.checkNull(bdetails1.get(26))).trim());
	    	    		vo.setLbxmachineSupplier((CommonFunction.checkNull(bdetails1.get(27))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(28))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(28))).trim());
		    	    		vo.setMachineCollateralCost(myFormatter.format(reconNum));
	    	    		}
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(29))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(29))).trim());
		    	    		vo.setMachineMargin(myFormatter.format(reconNum));
	    	    		}
	    	    	
	    	    		vo.setPropertyType((CommonFunction.checkNull(bdetails1.get(30))).trim());
	    	    		vo.setPropertyAddress((CommonFunction.checkNull(bdetails1.get(31))).trim());
	    	    		vo.setPropertyArea((CommonFunction.checkNull(bdetails1.get(32))).trim());
	    	    		vo.setPropertyConstruct((CommonFunction.checkNull(bdetails1.get(33))).trim());
	    	    		vo.setPropertyOwner((CommonFunction.checkNull(bdetails1.get(34))).trim());
	    	    		vo.setVehicleMake((CommonFunction.checkNull(bdetails1.get(35))).trim());
	    	    		vo.setVehicleModel((CommonFunction.checkNull(bdetails1.get(36))).trim());
	    	    		vo.setVehicleType((CommonFunction.checkNull(bdetails1.get(37))).trim());
	    	    		vo.setVehicleOwner((CommonFunction.checkNull(bdetails1.get(38))).trim());
	    	    		vo.setVehicleYearOfManufact((CommonFunction.checkNull(bdetails1.get(39))).trim());
	    	    		vo.setVehicleRegNo((CommonFunction.checkNull(bdetails1.get(40))).trim());
	    	    		vo.setVehicleRegDate((CommonFunction.checkNull(bdetails1.get(41))).trim());
	    	    		vo.setVehicleChesisNo((CommonFunction.checkNull(bdetails1.get(42))).trim());
	    	    		vo.setVehicleInsurer((CommonFunction.checkNull(bdetails1.get(43))).trim());
	    	    		vo.setVehicleInsureDate((CommonFunction.checkNull(bdetails1.get(44))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(45))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(45))).trim());
		    	    		vo.setVehicleCollateralCost(myFormatter.format(reconNum));
	    	    		}
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(46))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(46))).trim());
		    	    		vo.setVehicleMargin(myFormatter.format(reconNum));
	    	    		}
	    	    		
	    	    		vo.setStockType((CommonFunction.checkNull(bdetails1.get(47))).trim());
	    	    		vo.setStockNature((CommonFunction.checkNull(bdetails1.get(48))).trim());
	    	    		vo.setStockAddress((CommonFunction.checkNull(bdetails1.get(49))).trim());
	    	    		vo.setStockCycle((CommonFunction.checkNull(bdetails1.get(50))).trim());
	    	    		vo.setDebtorType((CommonFunction.checkNull(bdetails1.get(51))).trim());
	    	    		vo.setDebtorTotal((CommonFunction.checkNull(bdetails1.get(52))).trim());
	    	    		vo.setColltype1((CommonFunction.checkNull(bdetails1.get(53))).trim());
	    	    		vo.setBgType((CommonFunction.checkNull(bdetails1.get(54))).trim());
	    	    		vo.setBgInDate((CommonFunction.checkNull(bdetails1.get(55))).trim());
	    	    		vo.setBgValidity((CommonFunction.checkNull(bdetails1.get(56))).trim());
	    	    		
	    	    	
	    	    		vo.setBgIssuing((CommonFunction.checkNull(bdetails1.get(57))).trim());
	    	    		
//	    	    		supplierDesc
//	    	    		assetManufactDesc
	    	    		vo.setMachineSupplier(CommonFunction.checkNull(bdetails1.get(58)).toString());
	    	    		logger.info("setMachineSupplier:::::::"+bdetails1.get(58));
	    	    		vo.setLbxmachineManufact((CommonFunction.checkNull(bdetails1.get(59))).trim());
	    	    		logger.info("setLbxmachineManufact:::::::"+bdetails1.get(59));
	    	    		vo.setAssetManufactDesc((CommonFunction.checkNull(bdetails1.get(60))).trim());
	    	    		logger.info("setAssetManufactDesc:::::::::::"+bdetails1.get(60));
	    	    		vo.setSupplierDesc((CommonFunction.checkNull(bdetails1.get(61))).trim());
	    	    		logger.info("setSupplierDesc:::::::::::"+bdetails1.get(61));
	    	    		vo.setInvoiceDate((CommonFunction.checkNull(bdetails1.get(62))).trim());
	    	    		logger.info("setInvoiceDate::::::::::"+bdetails1.get(62));
	    	    		
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(63))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(63))).trim());
		    	    		vo.setAssetsCost(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			vo.setAssetsCost("0.00");
	    	    		}
	    	    		
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(64))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(64))).trim());
		    	    		vo.setAssetsDiscount(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			vo.setAssetsDiscount("0.00");
	    	    		}
	    	    		
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(65))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(65))).trim());
		    	    		vo.setVehicleCost(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			vo.setVehicleCost("0.00");
	    	    		}
	    	    		
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(66))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(66))).trim());
		    	    		vo.setVehicleDiscount(myFormatter.format(reconNum));
	    	    		}
	    	    		else
	    	    		{
	    	    			vo.setVehicleDiscount("0.00");
	    	    		}
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(67))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum1 =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(67))).trim());
		    	    		vo.setLoanAmount(myFormatter.format(reconNum1));
	    	    		}
	    	    		else
	    	    		{
	    	    			vo.setLoanAmount("0.00");
	    	    		}
	    	    		vo.setSecurityTypes((CommonFunction.checkNull(bdetails1.get(68))).trim());
//Prashant
	    	    		vo.setTxtStateCode((CommonFunction.checkNull(bdetails1.get(69))).trim());
	    	    		vo.setAssetState((CommonFunction.checkNull(bdetails1.get(70))).trim());
	    	    		
	    	    		vo.setUsageType((CommonFunction.checkNull(bdetails1.get(71))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(72))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum1 =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(72))).trim());
		    	    		vo.setCollateralSecurityMarginDF(myFormatter.format(reconNum1));
	    	    		}

	    	    		//Nishant space start
	    	    		vo.setVillageLandmark((CommonFunction.checkNull(bdetails1.get(73))).trim());
	    	    		vo.setBuildUpArea((CommonFunction.checkNull(bdetails1.get(74))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(75))).trim().equalsIgnoreCase(""))
	    	    		{
	    	    			Number num = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(75))).trim());
	    	    			vo.setTxnValue(myFormatter.format(num));
	    	    		}
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(76))).trim().equalsIgnoreCase(""))
	    	    		{
	    	    			Number num = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(76))).trim());
	    	    			vo.setTechValuation(myFormatter.format(num));
	    	    		}
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(77))).trim().equalsIgnoreCase(""))
	    	    		{
	    	    			Number num = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(77))).trim());
	    	    			vo.setDocValue(myFormatter.format(num));
	    	    		}
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(78))).trim().equalsIgnoreCase(""))
	    	    		{
	    	    			Number num = myFormatter.parse((CommonFunction.checkNull(bdetails1.get(78))).trim());
	    	    			vo.setAddConstruction(myFormatter.format(num));
	    	    		}
	    	    		vo.setAssetLevel((CommonFunction.checkNull(bdetails1.get(79))).trim());
	    	    		vo.setAddr2((CommonFunction.checkNull(bdetails1.get(80))).trim());
	    	    		vo.setAddr3((CommonFunction.checkNull(bdetails1.get(81))).trim());
	    	    		vo.setCountry((CommonFunction.checkNull(bdetails1.get(82))).trim());
	    	    		vo.setState((CommonFunction.checkNull(bdetails1.get(83))).trim());
	    	    		vo.setDist((CommonFunction.checkNull(bdetails1.get(84))).trim());
	    	    		vo.setTahsil((CommonFunction.checkNull(bdetails1.get(85))).trim());
	    	    		vo.setPincode((CommonFunction.checkNull(bdetails1.get(86))).trim());
	    	    		vo.setTxtCountryCode((CommonFunction.checkNull(bdetails1.get(87))).trim());
	    	    		vo.setTxtStateCode((CommonFunction.checkNull(bdetails1.get(88))).trim());
	    	    		vo.setTxtDistCode((CommonFunction.checkNull(bdetails1.get(89))).trim());
	    	    		vo.setAssetStandard((CommonFunction.checkNull(bdetails1.get(90))).trim());
	    	    		vo.setLawyerName((CommonFunction.checkNull(bdetails1.get(91))).trim());
	    	    		vo.setValuerName((CommonFunction.checkNull(bdetails1.get(92))).trim());
	    	    		vo.setPropertyDirection((CommonFunction.checkNull(bdetails1.get(93))).trim());
	    	    		vo.setEngineNumber((CommonFunction.checkNull(bdetails1.get(94))).trim());
	    	    		vo.setPropertyStatus((CommonFunction.checkNull(bdetails1.get(95))).trim());
	    	    		vo.setPropertyTitle((CommonFunction.checkNull(bdetails1.get(96))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(97))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(97))).trim());
		    	    		vo.setCarpetArea(myFormatter.format(reconNum));
	    	    		}
	//    	    		vo.setCarpetArea((CommonFunction.checkNull(bdetails1.get(97))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(98))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(98))).trim());
		    	    		vo.setTechnicalValuation1(myFormatter.format(reconNum));
	    	    		}
	    	//    		vo.setTechnicalValuation1((CommonFunction.checkNull(bdetails1.get(98))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(99))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(99))).trim());
		    	    		vo.setTechnicalValuation2(myFormatter.format(reconNum));
	    	    		}
	    	//    		vo.setTechnicalValuation2((CommonFunction.checkNull(bdetails1.get(99))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(100))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(100))).trim());
		    	    		vo.setBuildUpAreaSQMTR(myFormatter.format(reconNum));
	    	    		}
//	    	    		vo.setBuildUpAreaSQMTR((CommonFunction.checkNull(bdetails1.get(100))).trim());
	    	    		vo.setLbxBankID((CommonFunction.checkNull(bdetails1.get(101))).trim());
	    	    		vo.setBank((CommonFunction.checkNull(bdetails1.get(102))).trim());
	    	    		vo.setLbxBranchID((CommonFunction.checkNull(bdetails1.get(103))).trim());
	    	    		vo.setBranch((CommonFunction.checkNull(bdetails1.get(104))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(105))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(105))).trim());
		    	    		vo.setSuperBuildUpArea(myFormatter.format(reconNum));
	    	    		}
	    	    		
	    	    		vo.setPropertyOwnerGcdId((CommonFunction.checkNull(bdetails1.get(106))).trim());
	    	    		vo.setValuationMethodId((CommonFunction.checkNull(bdetails1.get(107))).trim());
	    	    		vo.setValuationMethod((CommonFunction.checkNull(bdetails1.get(108))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(109))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(109))).trim());
		    	    		vo.setValuationAmount(myFormatter.format(reconNum));
	    	    		}
	    	    		vo.setPolicyNo((CommonFunction.checkNull(bdetails1.get(110))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(111))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(111))).trim());
		    	    		vo.setPremiumAmount(myFormatter.format(reconNum));
	    	    		}
	    	    		vo.setPolicyStartDate((CommonFunction.checkNull(bdetails1.get(112))).trim());
	    	    		vo.setInsMatureDate((CommonFunction.checkNull(bdetails1.get(113))).trim());
	    	    		vo.setPremiumFrequency((CommonFunction.checkNull(bdetails1.get(114))).trim());
	    	    		vo.setNominee((CommonFunction.checkNull(bdetails1.get(115))).trim());
	    	    		vo.setRelWithNominee((CommonFunction.checkNull(bdetails1.get(116))).trim());
	    	    		
	    	    		vo.setTenureYear((CommonFunction.checkNull(bdetails1.get(117))).trim());
	    	    		vo.setLbxInsuranceAgency((CommonFunction.checkNull(bdetails1.get(118))).trim());
	    	    		vo.setInsuranceAgency((CommonFunction.checkNull(bdetails1.get(119))).trim());
	    	    		vo.setCoverNoteNo((CommonFunction.checkNull(bdetails1.get(120))).trim());
	    	    		if(!(CommonFunction.checkNull(bdetails1.get(121))).equalsIgnoreCase(""))
	    	    		{
	    	    			Number reconNum =myFormatter.parse((CommonFunction.checkNull(bdetails1.get(121))).trim());
		    	    		vo.setSumAssured(myFormatter.format(reconNum));
	    	    		}
	    	    		vo.setMake_model_id((CommonFunction.checkNull(bdetails1.get(122))).trim());
	    	    		vo.setValuerName((CommonFunction.checkNull(bdetails1.get(123))).trim());
	    	    		//Nishant space end
                 }
	    			list.add(vo);
	    		}
	    		}catch(Exception e){
	    			e.printStackTrace();
	    		}

	    		return list;

	    	}



	// Added by Asesh Kumar
    public ArrayList <DisbursalSearchVO> searchDealMovement(DisbursalSearchVO vo)
 	{
 		StringBuilder dealNo=new StringBuilder();
 	    StringBuilder customerName=new StringBuilder();
   

    	 ArrayList<DisbursalSearchVO> detailListGrid=new 	ArrayList<DisbursalSearchVO>();
 		  try{
 			  ArrayList searchlist=new ArrayList();
 	      logger.info("In searchCPGrid....................");
 	      boolean appendSQL=false;
 	      StringBuffer bufInsSql =	new StringBuffer();
 	    
 	      dealNo.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()));
 	      logger.info("In searchCPGrid......dealNo-  "+dealNo);
 	      customerName.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomerName()).trim()));
 	      
 	        bufInsSql.append(" select A.DEAL_ID,A.DEAL_NO,C.CUSTOMER_NAME,B.DEAL_PRODUCT,P.product_desc,B.DEAL_SCHEME, S.scheme_desc,A.REC_STATUS,br.BRANCH_DESC,su.USER_NAME as maker,author.author_name,max(cda.APPROVAL_DATE)  " +
 	        		"  from cr_deal_dtl A  left outer join cr_deal_loan_dtl B on(A.DEAL_ID = B.DEAL_ID) left outer join cr_deal_customer_m C "+
 	        		" on(A.DEAL_CUSTOMER_ID =C.CUSTOMER_ID) left outer join cr_product_m P on(P.product_id = B.DEAL_PRODUCT) left outer join cr_scheme_m S"+
 	        		" on(S.scheme_id = B.DEAL_SCHEME) left outer join com_branch_m br on(br.BRANCH_ID=a.DEAL_BRANCH)left outer join sec_user_m su on (su.USER_ID=a.MAKER_ID)left outer join (select da.deal_id,u.user_name as author_name from cr_deal_approval_dtl da join sec_user_m u on (u.USER_ID=da.approval_by)) author on(author.deal_id=a.deal_id) " +
 	        		" left outer join cr_deal_approval_dtl cda on (cda.DEAL_ID=a.DEAL_ID) WHERE A.DEAL_ID="+dealNo+" ");
 	       bufInsSql.append(" group by A.DEAL_ID,A.DEAL_NO,C.CUSTOMER_NAME,B.DEAL_PRODUCT,P.product_desc,B.DEAL_SCHEME, S.scheme_desc,A.REC_STATUS,br.BRANCH_DESC,su.USER_NAME,author.author_name,cda.APPROVAL_DATE "); 
 	    	 logger.info("query ::::::::::::::::::::::::::::::: "+bufInsSql);
			searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());
			
			 logger.info("IN searchCPGrid() search query1 ### "+ bufInsSql.toString());
			 logger.info("searchCPGrid " + searchlist.size());
				
 	      logger.info("searchCPGrid SIZE---"+searchlist.size());
 	      logger.info("searchCPGrid    ........"+bufInsSql.toString());
 	      
 	      bufInsSql=null;
 	      for(int i=0;i<searchlist.size();i++){
 	      logger.info("searchCPGrid search List "+searchlist.get(i).toString());
 	      ArrayList data=(ArrayList)searchlist.get(i);
 	      if(data.size()>0){
 	    	DisbursalSearchVO disVO = new DisbursalSearchVO();
 	    	 disVO.setDealNo("<a href=dealMovementDispatchAction.do?method=trackDealStages&dealId="+StringEscapeUtils.escapeHtml(CommonFunction.checkNull(data.get(0)))+">"+StringEscapeUtils.escapeHtml(CommonFunction.checkNull(data.get(1)))+"</a>");
 	    	  disVO.setLbxDealNo((CommonFunction.checkNull(data.get(0)).trim()));
	    	  disVO.setCustomerName((CommonFunction.checkNull(data.get(2)).trim()));
 	    	  disVO.setLbxProductID((CommonFunction.checkNull(data.get(3)).trim()));
 	    	  disVO.setProduct((CommonFunction.checkNull(data.get(4)).trim()));
 	    	  logger.info("setProduct:-------------"+data.get(4));
 	    	  disVO.setLbxscheme((CommonFunction.checkNull(data.get(5)).trim()));
 	    	  disVO.setScheme((CommonFunction.checkNull(data.get(6)).trim()));
 	    	  disVO.setRecStatus((CommonFunction.checkNull(data.get(7)).trim()));
 	    	  if(CommonFunction.checkNull(data.get(7)).trim().equalsIgnoreCase("A")){ 	    		
 	    	       disVO.setCurrentStatus("Authorized");
 	    	      	  } 	    
 	    	  else if(CommonFunction.checkNull(data.get(7)).trim().equalsIgnoreCase("X")){
 	    		 disVO.setCurrentStatus("Rejected");
 	    	  } 	    	
 	    	  else if(CommonFunction.checkNull(data.get(7)).trim().equalsIgnoreCase("P")){
	    		 disVO.setCurrentStatus("Pending");
	    	  }
 	    	  else if(CommonFunction.checkNull(data.get(7)).trim().equalsIgnoreCase("F")){
	    		 disVO.setCurrentStatus("Pending");
	    	  }
 	    	 disVO.setDealBranch((CommonFunction.checkNull(data.get(8)).trim()));
 	    	disVO.setMaker((CommonFunction.checkNull(data.get(9)).trim()));
 	    	disVO.setAuthor((CommonFunction.checkNull(data.get(10)).trim()));
 	    	detailListGrid.add(disVO);
 	       }

 		      }

 		}catch(Exception e){
 			e.printStackTrace();
 				}
 		finally
 		{
 			dealNo=null;
 			customerName=null;
 		}
 		return  detailListGrid;	
 	}   // Added by Anil
	@Override
	public ArrayList<Object> getInstallmentTypeList() {
		ArrayList list=new ArrayList();
		try{
			StringBuffer query=new StringBuffer();
		 query.append("SELECT VALUE,DESCRIPTION FROM generic_master  "
	        +"where GENERIC_KEY='INSTALLMENT_TYPE' and REC_STATUS='A'");
		logger.info("In creditProcessingDaoI getInstallmentTypeList"+query);
		
		ArrayList collateralsAll = ConnectionDAO.sqlSelect(query.toString());
		query=null;
		for(int i=0;i<collateralsAll.size();i++){
			ArrayList sublist = (ArrayList) collateralsAll.get(i);
			if(sublist.size()>0){
				CodeDescVo av=new CodeDescVo();
			    av.setId((CommonFunction.checkNull(sublist.get(0))).trim());
				av.setName((CommonFunction.checkNull(sublist.get(1))).trim());
				list.add(av);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;

	}

public ArrayList<Object> getOtherRelationList() {
		
		ArrayList<Object> mainList=new ArrayList<Object>();
		
		try{
		String query=("select VALUE,DESCRIPTION FROM generic_master  WHERE GENERIC_KEY='BUYER_OTHER_TYPE'  AND REC_STATUS='A'");
		logger.info("In getOtherRelationList query for the BUYER_SUPPLIER_OTHER_TYPE *****"+query);
		ArrayList list=ConnectionDAO.sqlSelect(query);
		query=null;
		int size=list.size();
		logger.info("size of tyhe list********"+size);
	
		for(int i=0;i<size;i++){
			ArrayList data=(ArrayList)list.get(i);
			if(data.size()>0){
				CustomerSaveVo relatVO=new CustomerSaveVo();
				relatVO.setRelationCode(CommonFunction.checkNull(data.get(0)));
				relatVO.setRelationshipS(CommonFunction.checkNull(data.get(1)));
				mainList.add(relatVO);
				relatVO=null;
			}
			data.clear();
			data=null;
		}
		list.clear();
		list=null;
		}
		catch(Exception e){
			e.printStackTrace();
		}
		
		return mainList;
	}

public boolean saveOtherRelation(BuyerSupplierOtherVo vo) {
	
	
	boolean status=false;
	logger.info("In saveOtherRelation: ");
	ArrayList qryList = new ArrayList();
	PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
	
	
	try
	{
		
				StringBuffer bufInsSql =	new StringBuffer();
				bufInsSql.append("insert into cr_deal_other_relation_dtl(DEAL_ID,OTHER_NAME, OTHER_RELATION, OTHER_MOBILE_NO, LAND_LINE_NO, KNOWING_SINCE, OTHER_ADDRESS,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");
				bufInsSql.append(" values ( ");
				bufInsSql.append(" ?," );//DEAL_ID
				bufInsSql.append(" ?," );//OTHER_NAME
				bufInsSql.append(" ?," );//OTHER_RELATION
				bufInsSql.append(" ?," );//OTHER_MOBILE_NO
				bufInsSql.append(" ?," );//LAND_LINE_NO
				bufInsSql.append(" ?," );//KNOWING_SINCE
				bufInsSql.append(" ?," ); //OTHER_ADDRESS
				bufInsSql.append(" ?," ); //REC_STATUS
				bufInsSql.append(" ?," ); //MAKER_ID
				bufInsSql.append(dbo);
				bufInsSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9), ");//MAKER_DATE
				bufInsSql.append(" ?," ); //AUTHOR_ID
				bufInsSql.append(dbo);
				bufInsSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ");//AUTHOR_DATE
				bufInsSql.append(" )" );
					
				if(CommonFunction.checkNull(vo.getDealId()).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((vo.getDealId()).trim());
				
				
				if(CommonFunction.checkNull(vo.getOtherName()).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((vo.getOtherName()).trim());
				
				
				if(CommonFunction.checkNull(vo.getRelationships()).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((vo.getRelationships()).trim());
				
				
				if(CommonFunction.checkNull(vo.getPrimaryOtherMbNo()).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((vo.getPrimaryOtherMbNo()).trim());
				
				if(CommonFunction.checkNull(vo.getAlternateOtherPhNo()).trim().equalsIgnoreCase(""))
				    insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((vo.getAlternateOtherPhNo()).trim());
				
				if(CommonFunction.checkNull(vo.getKnowingSince()).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((vo.getKnowingSince()).trim());
				
				
				if(CommonFunction.checkNull(vo.getAddRef()).trim().equalsIgnoreCase(""))
				    insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((vo.getAddRef()).trim());
				
				insertPrepStmtObject.addString("A");
				
				//---------------------------------------------------------
				if ((CommonFunction.checkNull(vo.getMakerId())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((vo.getMakerId()).trim());
				if ((CommonFunction.checkNull(vo.getMakerDate()).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getMakerDate()).trim());
				
				if ((CommonFunction.checkNull(vo.getMakerId())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString((vo.getMakerId()).trim());
				if ((CommonFunction.checkNull(vo.getMakerDate()).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getMakerDate()).trim());
				
				//---------------------------------------------------------
				
				insertPrepStmtObject.setSql(bufInsSql.toString());
				logger.info("IN saveOtherRelation() of  insert query1 ### "+insertPrepStmtObject.printQuery());
				qryList.add(insertPrepStmtObject);
		        status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			    logger.info("In saveOtherRelation......................"+status);
		}
	catch(Exception e)
	{
		logger.info("Execption: "+e);
	}

	
	return status;
   }

@Override
public ArrayList getOtherDetail(String otherUniqueId) {
	
	
	 logger.info("In getOtherDetail(String otherUniqueId) .."+otherUniqueId);
	  ArrayList list=new ArrayList();


		try{
		StringBuilder query=new StringBuilder();
		query.append("select R.OTHER_ID,R.DEAL_ID,R.OTHER_NAME, R.OTHER_RELATION, R.OTHER_MOBILE_NO, R.LAND_LINE_NO, R.KNOWING_SINCE, R.OTHER_ADDRESS FROM cr_deal_other_relation_dtl R " );
		//query.append("INNER JOIN generic_master G ON GENERIC_KEY='BUYER_OTHER_TYPE' AND G.VALUE=R.OTHER_RELATION ");
		query.append("WHERE  OTHER_ID='"+otherUniqueId+"' ");
		logger.info("getIndReferenceDetail query................. "+query.toString());
		ArrayList otherDetail = ConnectionDAO.sqlSelect(query.toString());
		query=null;
		int size=otherDetail.size();
		logger.info("In getOtherDetail(String otherUniqueId) list size... "+size);
		for(int i=0;i<size;i++){
			
			ArrayList data=(ArrayList)otherDetail.get(i);
			if(data.size()>0)
			{
				BuyerSupplierOtherVo otherVo=new BuyerSupplierOtherVo();       
				otherVo.setOtherUniqueId((CommonFunction.checkNull(data.get(0))));
				otherVo.setDealId(CommonFunction.checkNull(data.get(1)));
				otherVo.setOtherName((CommonFunction.checkNull(data.get(2))));
				otherVo.setRelationships((CommonFunction.checkNull(data.get(3))));
				otherVo.setPrimaryOtherMbNo((CommonFunction.checkNull(data.get(4))));		
				otherVo.setAlternateOtherPhNo((CommonFunction.checkNull(data.get(5))));
				otherVo.setKnowingSince((CommonFunction.checkNull(data.get(6))));
				otherVo.setAddRef((CommonFunction.checkNull(data.get(7))));
				list.add(otherVo);
				otherVo=null;
			}
			data.clear();
			data=null;
		
		}
		otherDetail.clear();
		otherDetail=null;
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;

   }
@Override
public ArrayList getOtherGridList(String dealId) {
	
	 logger.info("In getOtherGridList(String dealId) .."+dealId);
	  ArrayList list=new ArrayList();


		try{
		StringBuilder query=new StringBuilder();
		query.append("select R.OTHER_ID,R.DEAL_ID,R.OTHER_NAME, G.DESCRIPTION, R.OTHER_MOBILE_NO, R.LAND_LINE_NO, R.KNOWING_SINCE, R.OTHER_ADDRESS FROM cr_deal_other_relation_dtl R " );
		query.append("INNER JOIN generic_master G ON GENERIC_KEY='BUYER_OTHER_TYPE' AND G.VALUE=R.OTHER_RELATION ");
		query.append("WHERE  DEAL_ID='"+dealId+"' ");
		logger.info("getIndReferenceDetail query................. "+query.toString());
		ArrayList otherDetail = ConnectionDAO.sqlSelect(query.toString());
		query=null;
		int size=otherDetail.size();
		logger.info("In getOtherDetail(String otherUniqueId) list size... "+size);
		for(int i=0;i<size;i++){
			
			ArrayList data=(ArrayList)otherDetail.get(i);
			if(data.size()>0)
			{
				BuyerSupplierOtherVo otherVo=new BuyerSupplierOtherVo();       
				otherVo.setOtherUniqueId((CommonFunction.checkNull(data.get(0))));
				otherVo.setDealId(CommonFunction.checkNull(data.get(1)));
				otherVo.setOtherName((CommonFunction.checkNull(data.get(2))));
				otherVo.setRelationships((CommonFunction.checkNull(data.get(3))));
				otherVo.setPrimaryOtherMbNo((CommonFunction.checkNull(data.get(4))));		
				otherVo.setAlternateOtherPhNo((CommonFunction.checkNull(data.get(5))));
				otherVo.setKnowingSince((CommonFunction.checkNull(data.get(6))));
				otherVo.setAddRef((CommonFunction.checkNull(data.get(7))));
				list.add(otherVo);
				otherVo=null;
			}
			data.clear();
			data=null;
		
		}
		otherDetail.clear();
		otherDetail=null;
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
   }
public boolean updateOtherRelation(BuyerSupplierOtherVo vo) {
	
	
	logger.info("In updateOtherRelation");
	boolean status=false;
	ArrayList qryList = new ArrayList();
	PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
	
    try{
    	StringBuilder queryUpdate=new StringBuilder();
   	   queryUpdate.append("update cr_deal_other_relation_dtl set OTHER_NAME=?, OTHER_RELATION=?, OTHER_MOBILE_NO=?, LAND_LINE_NO=?, KNOWING_SINCE=?, OTHER_ADDRESS=?,REC_STATUS=?,MAKER_ID=?,MAKER_DATE = " );
   	   queryUpdate.append(dbo);
	   queryUpdate.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ");
	   queryUpdate.append(" where  DEAL_ID=? and OTHER_ID=?");
	 
   	if(CommonFunction.checkNull(vo.getOtherName()).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getOtherName()).trim());
	
	
	if(CommonFunction.checkNull(vo.getRelationships()).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getRelationships()).trim());
	
	
	if(CommonFunction.checkNull(vo.getPrimaryOtherMbNo()).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getPrimaryOtherMbNo()).trim());
	
	if(CommonFunction.checkNull(vo.getAlternateOtherPhNo()).trim().equalsIgnoreCase(""))
	    insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getAlternateOtherPhNo()).trim());
	
	if(CommonFunction.checkNull(vo.getKnowingSince()).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getKnowingSince()).trim());
	
	
	if(CommonFunction.checkNull(vo.getAddRef()).trim().equalsIgnoreCase(""))
	    insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getAddRef()).trim());
	
	insertPrepStmtObject.addString("P");

	if ((CommonFunction.checkNull(vo.getMakerId())).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getMakerId()).trim());
	if ((CommonFunction.checkNull(vo.getMakerDate()).trim()).equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getMakerDate()).trim());
	
	if ((CommonFunction.checkNull(vo.getDealId())).trim().equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString((vo.getDealId()).trim());
	
	if ((CommonFunction.checkNull(vo.getOtherUniqueId()).trim()).equalsIgnoreCase(""))
		insertPrepStmtObject.addNull();
	else
		insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getOtherUniqueId()).trim());
		
	insertPrepStmtObject.setSql(queryUpdate.toString());
	logger.info("IN updateOtherRelation() update query1 ### "+insertPrepStmtObject.printQuery());
	qryList.add(insertPrepStmtObject);
	status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
    logger.info("In updateOtherRelation......................"+status);
    }
    catch(Exception e)
    {
    	logger.info("In updateOtherRelation exception "+e);
    }
	 
	return status;

   }

public boolean deleteOtherDetail(String[] otherUniqueId) {
	
	logger.info("In deleteOtherDetail(String[] otherUniqueId)");
    boolean status=false;
	try
	{			
		ArrayList qryList = new ArrayList();
		for(int k=0;k<otherUniqueId.length;k++)
		{				 
			String query2="delete from cr_deal_other_relation_dtl where OTHER_ID=?";
			PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
			if(CommonFunction.checkNull(otherUniqueId[k]).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((CommonFunction.checkNull(otherUniqueId[k])).trim());
			
			insertPrepStmtObject.setSql(query2.toString());
			query2=null;
			logger.info("deleteroleList() OF CorpotateDAOImpl query   :   " +insertPrepStmtObject.printQuery());
			qryList.add(insertPrepStmtObject);
			insertPrepStmtObject=null;
			
		}
		status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
		qryList.clear();
		qryList=null;
		logger.info("Status of Updation is   ::  "+status);
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
		return status;

}
@Override
public boolean updateConfirmDeal(String dealId) {
	
	
	logger.info("In updateConfirmDeal.......Update mode "+dealId);
	qryList=new ArrayList();
	StringBuilder query1=new StringBuilder();

	 query1.append("update cr_deal_dtl set QUALITY_CHECK_DC_CONFIRM='Y' WHERE DEAL_ID='"+dealId+"' ");
	
     qryList.add(query1);
 


	 boolean status=false;

	try {
		status = ConnectionDAO.sqlInsUpdDelete(qryList);
		logger.info("In updateConfirmDeal......................status= "+status);
	} catch (SQLException e) {
		e.printStackTrace();
	}
	finally
	{
		query1=null;
		
	}
	return status;

}
//method added by neeraj
public ArrayList<Object> getCreditcommitteeList() 
{
	logger.info("In getCreditcommitteeList() of CreditProcessingDAOImpl ");
	ArrayList creditcommitteeList = new ArrayList();
	TermSheetVo vo = null;
	ArrayList formatlist=new ArrayList();
	ArrayList data=null;
	String query=null;
	try 
	{
		query="SELECT VALUE,DESCRIPTION FROM generic_master WHERE GENERIC_KEY='CREDIT_COMMITTEE' AND REC_STATUS='A'";
		logger.info("In getCreditcommitteeList() of CreditProcessingDAOImpl   query      :   "+query);		
		formatlist = ConnectionDAO.sqlSelect(query.toString());
		for (int i = 0; i < formatlist.size(); i++) 
		{
			data = (ArrayList) formatlist.get(i);
			vo=new TermSheetVo();
			vo.setValue(CommonFunction.checkNull(data.get(0)).trim());
			vo.setDescription(CommonFunction.checkNull(data.get(1)).trim());
			creditcommitteeList.add(vo);
			data.clear();
			data=null;
		}
	} catch (Exception e) {
		e.printStackTrace();
	}
	return creditcommitteeList;	
}
//start by sachin
@Override
public String getDealId(String loanId) {
	String deaId="";

	try{
		StringBuilder query=new StringBuilder();
		query.append("select LOAN_DEAL_ID from cr_loan_dtl where LOAN_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId))+"'");
		logger.info("getBaseRate"+query);
		deaId = ConnectionDAO.singleReturn(query.toString());
		logger.info("getBaseRate"+deaId);
		
		query=null;
		
		}catch(Exception e){
			e.printStackTrace();
		}
		return deaId;
}
//end by sachin

public String checkAssetVerifInitAtCM(String[] id, String loanId) {
	
	logger.info("checkAssetVerifInitAtCM for checkAssetVerifInit....assetid.."+id+" loanId "+loanId);
	String status = "";
	try
	{
 	
	for(int k=0;k<id.length;k++)
	{
		
		String checkVerifInitQuery="SELECT A.ASSET_COLLATERAL_DESC FROM cr_asset_collateral_m A " +
										" INNER JOIN cr_deal_verification_dtl  V ON V.LOAN_ID='"+loanId+"' AND V.ENTITY_TYPE=A.ASSET_COLLATERAL_CLASS AND V.ENTITY_SUB_TYPE=A.ASSET_TYPE AND A.ASSET_ID=V.ENTITY_ID" +
										" WHERE A.ASSET_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()+"' ";
		logger.info("checkVerifInitQuery: "+checkVerifInitQuery);
		status=ConnectionDAO.singleReturn(checkVerifInitQuery);
		logger.info("A.ASSET_COLLATERAL_DESC "+status);
		if(!CommonFunction.checkNull(status).equalsIgnoreCase(""))
		{
			return status;
		}
		
	
	}
	
    }
	catch(Exception e)
	{
	    e.printStackTrace();
         }
	return status;
    }
@Override
public ArrayList<Object> getMortageList() {
	ArrayList list=new ArrayList();
	try{
		StringBuffer query=new StringBuffer();
	 query.append("SELECT VALUE,DESCRIPTION FROM generic_master  "
        +"where GENERIC_KEY='MORTAGE_TYPE' and REC_STATUS='A'");
	logger.info("In creditProcessingDaoI getMortageList"+query.toString());
	
	ArrayList mortage = ConnectionDAO.sqlSelect(query.toString());
	query=null;
	for(int i=0;i<mortage.size();i++){
		ArrayList sublist = (ArrayList) mortage.get(i);
		if(sublist.size()>0){
			CodeDescVo av=new CodeDescVo();
		    av.setId((CommonFunction.checkNull(sublist.get

(0))).trim());
			av.setName((CommonFunction.checkNull

(sublist.get(1))).trim());
			list.add(av);
		}
	}
	}catch(Exception e){
		e.printStackTrace();
	}
	return list;
}
//start by Manish Shukla
public String getDealIdforTerm(String loanId) {
	String dealId="";
	try{
		StringBuilder query=new StringBuilder();
		query.append("select LOAN_DEAL_ID from cr_loan_dtl where LOAN_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId))+"'");
		logger.info("getBaseRate"+query);
		dealId = ConnectionDAO.singleReturn(query.toString());
		logger.info("getBaseRate"+dealId);
		
		query=null;
		
		}catch(Exception e){
			e.printStackTrace();
		}
		return dealId;
}
//end by Manish Shukla

	public String callProcUnderWriterSerachData(Object ob) {
		
		CommonDealVo vo = (CommonDealVo)ob;
		
		logger.info("In callProcUnderWriterSerachData......DealId:  "+vo.getLbxDealNo()+"UserId:  "+vo.getReportingToUserId());
		String statusProc="";
		boolean status=false;
				
		try 
		{
			ArrayList<Object> in =new ArrayList<Object>();
			ArrayList<Object> out =new ArrayList<Object>();
			ArrayList outMessages = new ArrayList();
			String s1="";
			String s2="";
			if(CommonFunction.checkNull(vo.getLbxDealNo()).equalsIgnoreCase(""))
			{
				in.add("0");
			}
			else
			{
				in.add(vo.getLbxDealNo());
			}
			in.add(vo.getUserId());
			in.add(vo.getReportingToUserId());
			String date=CommonFunction.changeFormat(vo.getBusinessdate());
			in.add(date);
			out.add(s1);
			out.add(s2);
			
			logger.info("callProcUnderWriterSerachData UNDERWRITER_SEARCH_DATA ("+in.toString()+","+out.toString()+")");
			outMessages=(ArrayList) ConnectionDAO.callSP("UNDERWRITER_SEARCH_DATA",in,out);
			s1=CommonFunction.checkNull(outMessages.get(0));
			s2=CommonFunction.checkNull(outMessages.get(1));
		    logger.info("s1  : "+s1);
		    logger.info("s2  : "+s2);	
		    if(s1.equalsIgnoreCase("S"))
			{
				statusProc=s1;
				status=true;
				logger.info("Procedure Error Message----"+s2);
			}
			else
			{
				statusProc=s2;
				logger.info("Procedure Error Message----"+s2);
			}		
	
		} catch (Exception e)
		{e.printStackTrace();}
		return statusProc;
	   }
	
	public String callProcUnderWriterUsersQueue(String dealId,String userId,String bDate,String branchId) {
		
		
		logger.info("In callProcUnderWriterUsersQueue......DealId:  "+dealId+"UserId:  "+userId);
		String statusProc=null;
		boolean status=false;
				
		try 
		{
			ArrayList<Object> in =new ArrayList<Object>();
			ArrayList<Object> out =new ArrayList<Object>();
			ArrayList outMessages = new ArrayList();
			String s1=null;
			String s2=null;
			if(CommonFunction.checkNull(dealId).equalsIgnoreCase(""))
			{
				in.add("0");
			}
			else
			{
				in.add(dealId);
			}
			
			in.add(userId);
			String date=CommonFunction.changeFormat(bDate);
			in.add(date);
			out.add(s1);
			out.add(s2);
			
			logger.info("callProcUnderWriterUsersQueue UNDERWRITER_USERS_QUEUE ("+in.toString()+","+out.toString()+")");
			outMessages=(ArrayList) ConnectionDAO.callSP("UNDERWRITER_USERS_QUEUE",in,out);
			s1=CommonFunction.checkNull(outMessages.get(0));
			s2=CommonFunction.checkNull(outMessages.get(1));
		    in.clear();
		    in=null;
		    out.clear();
		    out=null;
		    outMessages.clear();
		    outMessages=null;
		    if(s1.equalsIgnoreCase("S"))
			{
				statusProc=s1;
				status=true;
				logger.info("Procedure Error Message----"+s2);
			}
			else
			{
				statusProc=s2;
				logger.info("Procedure Error Message----"+s2);
			}	
		    s1=null;
		    s2=null;
	
		} catch (Exception e)
		{e.printStackTrace();}
		return statusProc;
	  }
	@Override
	public int getLimitOfDocumentUpload()
	{
		logger.info("In getLimitOfDocumentUpload()..........................DAOImpl");
		StringBuilder noOfDocument=new StringBuilder();
		int limitOfUploadDocument=0;
		noOfDocument.append("select PARAMETER_VALUE from PARAMETER_MST  where PARAMETER_KEY='NUMBER_OF_DOCUMENT_UPLOAD'");
		logger.info("query::::::::  "+noOfDocument.toString());
		String uploadDocument=(String)ConnectionDAO.singleReturn(noOfDocument.toString());
		if(!CommonFunction.checkNull(uploadDocument).equalsIgnoreCase(""))
		{
			limitOfUploadDocument=Integer.parseInt(uploadDocument);
		}
		else
		{
			limitOfUploadDocument=0;
		}
		noOfDocument=null;
		return limitOfUploadDocument;
		
	}
	
	//richa changes here 
	public ArrayList<UnderwriterApprovalVo> getApprovalRecommend(String dealId,UnderwriterApprovalVo vo) {
		ArrayList list=new ArrayList();
	
		try{
			logger.info("In getApprovalRecommend..........................DAOImpl"+dealId);
			
			StringBuilder query=new StringBuilder();
			 query.append("SELECT DISTINCT A.DEAL_CURRENT_APPROVAL_LEVEL,B.DEAL_PRODUCT,B.DEAL_SCHEME,B.DEAL_LOAN_AMOUNT FROM CR_DEAL_DTL A JOIN CR_DEAL_LOAN_DTL B ON A.DEAL_ID=B.DEAL_ID  where A.deal_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"'");
			logger.info("In getApprovalRecommend...............query...........DAOImpl"+query);
			UnderwriterApprovalVo noteVO=null;
			ArrayList product = ConnectionDAO.sqlSelect(query.toString()); 
			
			query=null;
			int size=product.size();
				for(int i=0;i<size;i++){
				ArrayList data=(ArrayList)product.get(i);
				if(data.size()>0)	{
					noteVO = new UnderwriterApprovalVo();
					noteVO.setApprovalLevel((CommonFunction.checkNull(data.get(0))).trim());
					
					noteVO.setLbxProductID((CommonFunction.checkNull(data.get(1))).trim());
					noteVO.setLbxscheme((CommonFunction.checkNull(data.get(2))).trim());
					noteVO.setLoanAmount((CommonFunction.checkNull(data.get(3))).trim());
					list.add(noteVO);
				}
				noteVO=null;
				data=null;
			}
				
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			dealId=null;
			vo=null;
		}
		return list;
	}
	
	
	public String  getApprovalLevel(UnderwriterApprovalVo docVo) {
		String approvalLevel=null;
		ArrayList<UnderwriterApprovalVo> list1=new 	ArrayList<UnderwriterApprovalVo>();
		try{
			
			logger.info("In getApprovalLevel..........................DAOImpl"+docVo.getDealId());
			String product=docVo.getLbxProductID();
			String scheme=docVo.getLbxscheme();
			String amount=docVo.getLoanAmount();
			
			String query="";
			 query="SELECT TOP 1 FINAL_APPROVAL_LEVEL FROM CR_APPROVAL_LEVEL_M WHERE PRODUCT_ID='"+product+"' AND SCHEME_ID='"+scheme+"' AND AMOUNT_FROM<='"+amount+"'AND '"+amount+"'<=AMOUNT_TO  AND REC_STATUS='A'";
			logger.info("In getApprovalLevel...............query...........DAOImpl"+query);
			approvalLevel = ConnectionDAO.singleReturn(query); 
		
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			docVo=null;
		}
		
		return approvalLevel ;
	}

	public ArrayList<Object> getFinancialInstList() {

		ArrayList<Object> list=new ArrayList<Object>();
		try{
			StringBuilder query=new StringBuilder();
		 query.append("SELECT VALUE,DESCRIPTION FROM generic_master  where GENERIC_KEY='FLEET_FI' and REC_STATUS='A'");
		logger.info("getFinancialInstList : "+query);
		CodeDescVo vo = null;
		ArrayList source = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getFinancialInstList : "+source.size());
		
		query=null;
		
		for(int i=0;i<source.size();i++){

		//	logger.info("getsourceTypeList"+source.get(i).toString());
			ArrayList subsource=(ArrayList)source.get(i);
			if(subsource.size()>0)
			{
				vo = new CodeDescVo();
				vo.setId((CommonFunction.checkNull(subsource.get(0))).trim());
				vo.setName((CommonFunction.checkNull(subsource.get(1))).trim());
				list.add(vo);
			}
			vo=null;
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}

	public ArrayList fetchFinancialInstName(String financialInst) {
		ArrayList<Object> list=new ArrayList<Object>();
		try{
			
			logger.info("financialInst: "+financialInst);
			StringBuilder query=new StringBuilder();
		 query.append("SELECT COMPANY_DESC FROM COM_COMPANY_M WHERE COMPANY_SHORT_CODE='"+CommonFunction.checkNull(financialInst)+"'");
		logger.info("fetchFinancialInstName: "+query.toString());
		FleetDetailsVo vo = null;
		ArrayList source = ConnectionDAO.sqlSelect(query.toString());
		logger.info("fetchFinancialInstName: "+source.size());
		
		query=null;
		
		for(int i=0;i<source.size();i++){

			ArrayList subsource=(ArrayList)source.get(i);
			if(subsource.size()>0)
			{
				vo = new FleetDetailsVo();
				vo.setFinancialInstName(CommonFunction.checkNull(subsource.get(0)).trim());
				list.add(vo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}

	
	

	@Override
	public ArrayList<Object> getExposure(String dealId,String userId) 
	{
		logger.info("In getExposure  dealId  :  "+dealId);			
		ArrayList list= new ArrayList();	
		StringBuilder query=new StringBuilder();
		ArrayList product = null;
		ArrayList data = null;
		try
		{			
			query.append("SELECT EXPOSURE_AMOUNT,AMOUNT_FROM,AMOUNT_TO,INCLUDE_EXPOSURE,EXPOSURE_WITH_SD FROM under_writer_search_temp_data WHERE DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' and USER_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(userId)).trim()+"' ");
			logger.info("In getExposure...............query  :   "+query);
			UnderwriterApprovalVo noteVO=null;
			product = ConnectionDAO.sqlSelect(query.toString()); 
			int size=product.size();
			for(int i=0;i<size;i++)
			{
				data=(ArrayList)product.get(i);
				if(data.size()>0)	
				{
					noteVO = new UnderwriterApprovalVo();
					noteVO.setExpAmt((CommonFunction.checkNull(data.get(0))).trim());						
					noteVO.setAmountFrom((CommonFunction.checkNull(data.get(1))).trim());
					noteVO.setAmountTo((CommonFunction.checkNull(data.get(2))).trim());
					noteVO.setIncludeExposure((CommonFunction.checkNull(data.get(3))).trim());
					noteVO.setExposureWithSd((CommonFunction.checkNull(data.get(4))).trim());
					list.add(noteVO);
				}
				noteVO=null;
				data=null;
			}					
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			dealId=null;
			query=null;
			product=null;
			data=null;			
		}
		return list;
	}
	public ArrayList getresultForDeal(String dealId) {
		 
		ArrayList searchlist = new ArrayList();
		
		ArrayList<LoanDetailVo> resultList = new ArrayList<LoanDetailVo>();

		try {
			logger.info("In getresultForDeal().....................................Dao Impl....."+dealId);

			StringBuilder bufInsSql = new StringBuilder();
			LoanDetailVo vo = null;
			
			bufInsSql.append(" select  VALUE,DESCRIPTION  from generic_master a join cr_deal_loan_dtl b  on( (CHARINDEX(concat('|',a.VALUE,'|'),concat('|',LOAN_CLASSIFICATION,'|'))>0)) where generic_key='LOAN_CLASSIFICATION' and DEAL_id ='"+ dealId+ "' " );
			searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());
			logger.info("IN getresultForDeal() search query1 ### "+ bufInsSql.toString());
			int size=searchlist.size();
			for (int i = 0; i <size ; i++) {
				ArrayList data = (ArrayList) searchlist.get(i);
				if (data.size() > 0) {
					vo = new LoanDetailVo();
					vo.setLoanClassificationId(CommonFunction.checkNull(data.get(0)));
					vo.setLoanClassificationLabel(CommonFunction.checkNull(data.get(1)));
					resultList.add(vo);
					vo=null;
				}
				data=null;
			}
			bufInsSql=null;
		} catch (Exception e) {
			e.printStackTrace();
		}
		finally
		{
			
			searchlist.clear();
			searchlist=null;
		}
		return resultList;
	}
	public ArrayList fetchFleetDataList(String lbxLoanNoHid,String bDate) {
		ArrayList<Object> list=new ArrayList<Object>();
		try{
			
		logger.info("lbxLoanNoHid: "+lbxLoanNoHid);
		StringBuilder query=new StringBuilder();
		query.append("select period_diff(date_format(STR_TO_DATE('"+bDate+"','%d-%m-%Y %H:%i') , '%Y%m' ) , date_format( cld.LOAN_APPROVAL_DATE, '%Y%m' ) )as SEASONING,cld.LOAN_BALANCE_PRINCIPAL,");
		query.append("cacm.VEHICLE_OWNER,c.RELATIONSHIP,cacm.VEHICLE_REGISTRATION_NO,cacm.VEHICLE_MODEL,cacm.VEHICLE_MANUFACTURING_YEAR ");
		query.append(" from cr_loan_dtl cld ");
		query.append(" left join cr_loan_collateral_m a on a.LOAN_ID=cld.LOAN_ID left join cr_asset_collateral_m cacm on cacm.ASSET_ID=a.ASSETID ");
		query.append(" left join cr_deal_customer_role b on cld.LOAN_DEAL_ID=b.DEAL_ID left join cr_deal_customer_m c on c.CUSTOMER_ID=b.DEAL_CUSTOMER_ID ");
		query.append(" where cld.LOAN_ID = '"+lbxLoanNoHid+"' ");
		logger.info("fetchFinancialInstName: "+query.toString());
		FleetDetailsVo vo = null;
		ArrayList source = ConnectionDAO.sqlSelect(query.toString());
		logger.info("fetchFleetDataList : "+source.size());
		
		query=null;
		
		for(int i=0;i<source.size();i++){

			ArrayList subsource=(ArrayList)source.get(i);
			if(subsource.size()>0)
			{
				vo = new FleetDetailsVo();
				vo.setSeasoning(CommonFunction.checkNull(subsource.get(0)).trim());
				vo.setCurrentPos(CommonFunction.checkNull(subsource.get(1)).trim());
				vo.setVehicleOwner(CommonFunction.checkNull(subsource.get(2)).trim());
				vo.setRelationship(CommonFunction.checkNull(subsource.get(3)).trim());
				vo.setVehicleNo(CommonFunction.checkNull(subsource.get(4)).trim());
				vo.setVehicleModel(CommonFunction.checkNull(subsource.get(5)).trim());
				vo.setMfgYear(CommonFunction.checkNull(subsource.get(6)).trim());
				list.add(vo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}
	
	
	public ArrayList getFleetDetailsList(String loanId) {
		ArrayList<Object> list=new ArrayList<Object>();
		
		try{
			StringBuilder query=new StringBuilder();
	    query.append("select DEAL_FLEET_ID,VEHICLE_OWNER,RELATIONSHIP,VEHICLE_NO,VEHICLE_MODEL,MFG_YEAR,DOC_COLLECTED "+
				     " from cr_deal_fleet_dtl left join cr_loan_dtl a on a.LOAN_DEAL_ID=cr_deal_fleet_dtl.DEAL_ID  where a.LOAN_ID="+CommonFunction.checkNull(loanId));
			
		logger.info("getFleetDetailsList Queryl: "+query.toString());
		
		FleetDetailsVo fleetVo = null;
		ArrayList fleetdeatail = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getDealDisbScheduleList OUTER ARRAYLIST SIZE: "+fleetdeatail.size());
		for(int i=0;i<fleetdeatail.size();i++){

			ArrayList data=(ArrayList)fleetdeatail.get(i);
			if(data.size()>0)
			{
				fleetVo = new FleetDetailsVo();
			
				fleetVo.setDealFleetId((CommonFunction.checkNull(data.get(0))).trim());
				fleetVo.setVehicleOwner((CommonFunction.checkNull(data.get(1))).trim());
				fleetVo.setRelationship((CommonFunction.checkNull(data.get(2))).trim());
				fleetVo.setVehicleNo((CommonFunction.checkNull(data.get(3))).trim());
				fleetVo.setVehicleModel((CommonFunction.checkNull(data.get(4))).trim());
				fleetVo.setMfgYear((CommonFunction.checkNull(data.get(5))).trim());
				fleetVo.setDocCollected((CommonFunction.checkNull(data.get(6))).trim());
				
				list.add(fleetVo);
			}
		}
		fleetVo=null;
		query=null;
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}
	
	
	public String checkChesisNoVehicle(CollateralVo sh,String source) {
		String list=null;
	
	
			logger.info("In checkChesisNoVehicle..........................DAOImpl"+sh.getAssetsId());
			String table="cr_asset_collateral_m";
	    	if(CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
	    		table="cr_asset_collateral_m_edit";
			StringBuilder query=new StringBuilder();
			try
			{
			if(!CommonFunction.checkNull(sh.getAssetsId()).equalsIgnoreCase(""))
			{
			 query.append("SELECT COUNT(1) FROM "+table+"  where asset_id!='"+sh.getAssetsId()+"' and VEHICLE_CHASIS_NUMBER='"+CommonFunction.checkNull(sh.getVehicleChesisNo()).trim()+"'");
			}
			else
			{
				 query.append("SELECT COUNT(1) FROM "+table+" where  VEHICLE_CHASIS_NUMBER='"+CommonFunction.checkNull(sh.getVehicleChesisNo()).trim()+"'");
			}
			
			logger.info("In getApprovalRecommend...............query...........DAOImpl"+query);
			CollateralVo noteVO=null;
			 list = ConnectionDAO.singleReturn(query.toString()); 
			}
			catch(Exception e){
				e.printStackTrace();
			}
			finally{
				query=null;
			}
			
		return list;
	}
	
	public String checkEnginNoVehicle(CollateralVo sh,String source) {
		String list=null;
		
		
		logger.info("In checkEnginNoVehicle..........................DAOImpl"+sh.getAssetsId());
		String table="cr_asset_collateral_m";
    	if(CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
    		table="cr_asset_collateral_m_edit";
		StringBuilder query=new StringBuilder();
		try
		{
		if(!CommonFunction.checkNull(sh.getAssetsId()).equalsIgnoreCase(""))
		{
		 query.append("SELECT COUNT(1) FROM "+table+"  where asset_id!='"+sh.getAssetsId()+"' and ENGINE_NUMBER='"+CommonFunction.checkNull(sh.getEngineNumber()).trim()+"'");
		}
		else
		{
			 query.append("SELECT COUNT(1) FROM "+table+" where  ENGINE_NUMBER='"+CommonFunction.checkNull(sh.getEngineNumber()).trim()+"'");
		}
		
		logger.info("In getApprovalRecommend...............query...........DAOImpl"+query);
		CollateralVo noteVO=null;
		 list = ConnectionDAO.singleReturn(query.toString()); 
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			query=null;
		}
		
	return list;
}
	
	public String checkRegNoVehicle(CollateralVo sh,String source) {
		String list=null;
		
		
		logger.info("In checkRegNoVehicle..........................DAOImpl"+sh.getAssetsId());
		String table="cr_asset_collateral_m";
    	if(CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
    		table="cr_asset_collateral_m_edit";
		StringBuilder query=new StringBuilder();
		try
		{
		if(!CommonFunction.checkNull(sh.getAssetsId()).equalsIgnoreCase(""))
		{
		 query.append("SELECT COUNT(1) FROM "+table+"  where asset_id!='"+sh.getAssetsId()+"' and VEHICLE_REGISTRATION_NO='"+CommonFunction.checkNull(sh.getVehicleRegNo()).trim()+"'");
		}
		else
		{
			 query.append("SELECT COUNT(1) FROM "+table+" where  VEHICLE_REGISTRATION_NO='"+CommonFunction.checkNull(sh.getVehicleRegNo()).trim()+"'");
		}
		
		logger.info("In getApprovalRecommend...............query...........DAOImpl"+query);
		CollateralVo noteVO=null;
		 list = ConnectionDAO.singleReturn(query.toString()); 
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			query=null;
		}
		
	return list;
}
	
	public String getDownLoadFileInfoOmniFin(String txnId, String txnType,	String fileName)
	{
		logger.info("In getDownLoadFileInfoOmniFin..........................DAOImpl");
		String filePath="";
		try
		{
		
		StringBuffer query =	new StringBuffer();
		query.append("select document_path from cr_uploaded_documents where txn_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnId)).trim()+"' and file_name='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(fileName)).trim()+"' AND TXN_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()+"'");
		logger.info("In getFileInfo...............query...........DAOImpl "+query.toString());
		filePath = ConnectionDAO.singleReturn(query.toString()); 
		query=null;

	}catch(Exception e){
		e.printStackTrace();
	}
	finally{
		txnId=null;
		fileName=null;
		txnType=null;
		
	}
		return filePath;
	}

	
	
	public ArrayList<FieldVerificationVo> getEntityValue(String dealId, String verificationID) 
	{
		logger.info("In getExposure  dealId  :  "+dealId);			
		ArrayList list= new ArrayList();	
		String entityQuery="";
		ArrayList product = null;
		ArrayList data = null;
		try
		{			
			 entityQuery="  SELECT concat(VERIFICATION_TYPE,' ')VERIFICATION_TYPE,concat(VERIFICATION_SUBTYPE,' ')VERIFICATION_SUBTYPE, " +
			" case ENTITY_TYPE when 'PRAPPL' then 'APPLICANT ' when 'COAPPL' then 'COAPPLICANT ' else concat(ENTITY_TYPE,' ') end as ENTITY_TYPE, " +
			" concat(ENTITY_SUB_TYPE,' ')ENTITY_SUB_TYPE   " +
			" FROM cr_deal_verification_dtl V " + 
			" WHERE DEAL_ID='"+dealId+"' and VERIFICATION_ID='"+verificationID+"'";
			
			logger.info("In getExposure...............query  :   "+entityQuery);
			FieldVerificationVo noteVO=null;
			product = ConnectionDAO.sqlSelect(entityQuery.toString()); 
			int size=product.size();
			for(int i=0;i<size;i++)
			{
				data=(ArrayList)product.get(i);
				if(data.size()>0)	
				{
					noteVO = new FieldVerificationVo();
					noteVO.setEntityType((CommonFunction.checkNull(data.get(2))).trim());
					noteVO.setEntitySubType((CommonFunction.checkNull(data.get(3))).trim());
					noteVO.setVerificationType((CommonFunction.checkNull(data.get(0))).trim());
					noteVO.setVerificationSubType((CommonFunction.checkNull(data.get(1))).trim());												
					list.add(noteVO);
				}
				noteVO=null;
				data=null;
			}					
		}
		catch(Exception e){
			e.printStackTrace();
		}
		finally{
			dealId=null;
			entityQuery=null;
			product=null;
			data=null;			
		}
		return list;
	}	
	
	public ArrayList<Object> getPaymentModes() {
    	logger.info("in getPaymentModes()  ");  		
		ArrayList<Object> list=new ArrayList<Object>();
	  	try
	  	{	  		
	  		String query="select value,description from generic_master where generic_key='repayment_mode' and rec_status='A'";
	  		logger.info("in getPaymentModes() of CreditProcessingDAOImpl Query :  "+query);
	  		LoanDetailVo loanVo = null; 
	  		ArrayList source = ConnectionDAO.sqlSelect(query);
	  		int size=source.size();
	  		for(int i=0;i<size;i++)
	  		{
	  			ArrayList subEduDetail=(ArrayList)source.get(i);
	  			if(subEduDetail.size()>0)
	  			{
	  				loanVo = new LoanDetailVo();
	  				loanVo.setPaymentModeId((CommonFunction.checkNull(subEduDetail.get(0)).toString()));
	  				loanVo.setPaymentMode((CommonFunction.checkNull(subEduDetail.get(1)).toString()));
	  				
	  				list.add(loanVo);	  				
	  			}
	  		}
	  		}catch(Exception e){
	  			e.printStackTrace();
	  		}
	  		return list;
	}

	
	@Override
	public boolean saveSectorTypeDetails(Object ob, String dealId) {
		LoanDetailVo vo = (LoanDetailVo) ob;
		boolean status = false;
		
		logger.info("In saveSectorTypeDetails.........inside ejb server file...........Dao Impl");
		ArrayList qryList = new ArrayList();
		String stat = "X";
		int exist_loan_id=0;
		PrepStmtObject insertPrepStmtObject=null;
		StringBuilder bufInsSql = null;

		String query = "select CASE_TYPE_CODE from LEG_CASE_TYPE_DEF_M where CASE_TYPE_CODE='"
				+ StringEscapeUtils.escapeSql(vo.getCaseTypeCode().trim()) + "'";
		logger.info("In insertCaseTypeMaster.......inside ejb server file..........Dao Impl"
						+ query);
		boolean st = ConnectionDAOforEJB.checkStatus(query);
		
		try {
			
			exist_loan_id=Integer.parseInt(ConnectionDAO.singleReturn("select count(1) from cr_loan_sector_type_dtl where DEAL_ID='"+vo.getDealId()+"'"));
			logger.info("userNameQ1::::"+exist_loan_id);
			logger.info("vo.getRecStatus()::::"+vo.getRecStatus());
				if (vo.getRecStatus() != null && vo.getRecStatus().equals("on")) {
					stat = "A";
				} else {
					stat = "X";

				}

				logger.info("In insert Case Type master"+stat);
				if(exist_loan_id==0){
				bufInsSql = new StringBuilder();
				insertPrepStmtObject = new PrepStmtObject();
				bufInsSql.append("insert into cr_loan_sector_type_dtl(deal_id,agri_doc,agri_land,name_on_agri_doc,relation_with_hirer,REC_STATUS,MAKER_ID,MAKER_DATE)");
				bufInsSql.append(" values ( ");
				bufInsSql.append(" ?,"); //deal_id
				bufInsSql.append(" ?,"); //agri_doc
				bufInsSql.append(" ?,"); //agri_land
				bufInsSql.append(" ?,"); //name_on_agri_land
				bufInsSql.append(" ?,"); //relation_with_hirere
				bufInsSql.append(" ?,"); //rec_status
				bufInsSql.append(" ?,"); //makerId
				bufInsSql.append(dbo); //makerId
				bufInsSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9)) ");
				//bufInsSql.append(" DATE_ADD(STR_TO_DATE(?, '"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND)) ");
			
			
				if (CommonFunction.checkNull(dealId).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(dealId);
				
				if (CommonFunction.checkNull(vo.getAgriDocs()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(vo.getAgriDocs().toUpperCase().trim());
				
				if (CommonFunction.checkNull(vo.getAgriLand()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(vo.getAgriLand().toUpperCase().trim());
				
				if (CommonFunction.checkNull(vo.getNameAgriDoc()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(vo.getNameAgriDoc().toUpperCase().trim());
				
				if (CommonFunction.checkNull(vo.getRelationWithHirer()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(vo.getRelationWithHirer().toUpperCase().trim());
				

				if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(stat);
				

				if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(vo.getMakerId());
				
				
				if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(vo.getMakerDate());
				
				
				if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(
						""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(vo.getMakerId());
				
				if (CommonFunction.checkNull(vo.getMakerDate())
						.equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(vo.getMakerDate());
				
				

				insertPrepStmtObject.setSql(bufInsSql.toString());
				logger.info("IN insertCaseTypeMaster() insert query1 ### "+ insertPrepStmtObject.printQuery());
				qryList.add(insertPrepStmtObject);
				status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
				}
				else
				{
					
					insertPrepStmtObject = new PrepStmtObject();
					bufInsSql = new StringBuilder();
					
					bufInsSql.append("UPDATE cr_loan_sector_type_dtl SET agri_doc=?,agri_land=?,name_on_agri_doc=?,relation_with_hirer=?,REC_STATUS=?,MAKER_ID=?,MAKER_DATE="); 
					bufInsSql.append(dbo); //makerId
					bufInsSql.append("STR_TO_DATE(?,'"+dateFormatWithTime+"')+ ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ");
					bufInsSql.append(" where DEAL_ID=?" );
					
					
					
					if (CommonFunction.checkNull(vo.getAgriDocs()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(vo.getAgriDocs().toUpperCase().trim());
					
					if (CommonFunction.checkNull(vo.getAgriLand()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(vo.getAgriLand().toUpperCase().trim());
					
					if (CommonFunction.checkNull(vo.getNameAgriDoc()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(vo.getNameAgriDoc().toUpperCase().trim());
					
					if (CommonFunction.checkNull(vo.getRelationWithHirer()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(vo.getRelationWithHirer().toUpperCase().trim());
					

					if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(stat);
					

					if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(vo.getMakerId());
					
					
					if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(vo.getMakerDate());
					if (CommonFunction.checkNull(dealId).equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString(dealId);
					
					insertPrepStmtObject.setSql(bufInsSql.toString());
					
					logger.info("IN updateCaseMarkingMaker() insert query1 ### "+ insertPrepStmtObject.printQuery());
					
					qryList.add(insertPrepStmtObject);
								
					status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
				 
				}
				logger.info("In saveCountryData......................"+ status);
			

		} catch (Exception e) {
			e.printStackTrace();
		}
		finally{
			qryList.clear();
			qryList = null;
			
		         }
		return status;

	}
	@Override
	public ArrayList editSectorTypeDetails(Object ob) {

		ArrayList searchlist = new ArrayList();
		LoanDetailVo vo = (LoanDetailVo)ob;
		ArrayList<LoanDetailVo> sectorTypeList = new ArrayList<LoanDetailVo>();
		logger.info("ratioid in searchBenchMarkRatioEdit &***************************** = "+vo.getDealId());

		try {
			

			StringBuilder bufInsSql = new StringBuilder();
			bufInsSql.append(" select  DEAL_ID,AGRI_DOC,AGRI_LAND,NAME_ON_AGRI_DOC,RELATION_WITH_HIRER,REC_STATUS  from cr_loan_sector_type_dtl ");
			
			bufInsSql.append("  WHERE DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getDealId())+"'");
			logger.info("search Query...." + bufInsSql);

			searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());
			logger.info("IN editSectorTypeDetails() search query1 ### "+ bufInsSql.toString());
			logger.info("editSectorTypeDetails " + searchlist.size());
			for (int i = 0; i < searchlist.size(); i++) {
				logger.info("editSectorTypeDetails " + searchlist.get(i).toString());
				ArrayList data = (ArrayList) searchlist.get(i);
				if (data.size() > 0) {
					LoanDetailVo caseTypeDataVo = new LoanDetailVo();
					
					caseTypeDataVo.setDealId(CommonFunction.checkNull(data.get(0)).toString());
					caseTypeDataVo.setAgriDocs(CommonFunction.checkNull(data.get(1)).toString());	
					caseTypeDataVo.setAgriLand(CommonFunction.checkNull(data.get(2)).toString());
					caseTypeDataVo.setNameAgriDoc(CommonFunction.checkNull(data.get(3)).toString());
					caseTypeDataVo.setRelationWithHirer(CommonFunction.checkNull(data.get(4)).toString());
					caseTypeDataVo.setRecStatus(CommonFunction.checkNull(data.get(5)).toString());
					sectorTypeList.add(caseTypeDataVo);

				}

			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		finally{
			searchlist.clear();
			searchlist = null;
			
		         }
		return sectorTypeList;
}

	
	//Richa
	public ArrayList<Object> getAgriDocsList() {
		
		ArrayList list=new ArrayList();
		try{
			StringBuffer query=new StringBuffer();
		 query.append("SELECT VALUE,DESCRIPTION FROM generic_master  "
	        +"where GENERIC_KEY='AGRI_DOC' and REC_STATUS='A'");
		logger.info("In creditProcessingDaoI getMortageList"+query.toString());
		
		ArrayList agriDoc = ConnectionDAO.sqlSelect(query.toString());
		query=null;
		for(int i=0;i<agriDoc.size();i++){
			ArrayList sublist = (ArrayList) agriDoc.get(i);
			if(sublist.size()>0){
				CodeDescVo av=new CodeDescVo();
			    av.setId((CommonFunction.checkNull(sublist.get

	(0))).trim());
				av.setName((CommonFunction.checkNull

	(sublist.get(1))).trim());
				list.add(av);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}
	
	public String checkRefinaceReqInfo()
	{
		logger.info("In checkRefinaceReqInfo..........................DAOImpl");
		String val="";
		try
		{
	
		StringBuffer query =	new StringBuffer();
		query.append("select parameter_value from parameter_mst where PARAMETER_KEY='REFINANCE_VEHICLE_INFO_REQUIRED' ");
		logger.info("In checkRefinaceReqInfo...............query...........DAOImpl "+query.toString());
		val = ConnectionDAO.singleReturn(query.toString()); 
		query=null;

	}catch(Exception e){
		e.printStackTrace();
	}
	finally{
		
		
	}
		return val;
	}

	// add by saorabh
			public String getVatValueStateWise(String supplierId)
			{
				logger.info("in getVatValueStateWise");
				String  query = "select vat_percent from com_state_m s left join cr_dsa_dealer_m d on s.state_id=d.state where d.dealer_id ='"+supplierId+"' "; 
				logger.info("Select Query-----"+ query);
				String value = CommonFunction.checkNull(ConnectionDAO.singleReturn(query));
				logger.info("Vat value in percent-----"+ value);
				return value;
			}
			
			// end by saorabh
			
			// add by saorabh
			@Override
			public boolean vatDetail(CollateralVo vo) {
				logger.info("inb vatDetail----------------");
				String query = "SELECT cdcm.ASSETID,sum(cacm.vat_amount) vat_amount, cd.deal_asset_cost  FROM CR_DEAL_COLLATERAL_M cdcm left join CR_asset_COLLATERAL_M cacm  on cdcm.assetid=cacm.asset_id left join cr_deal_loan_dtl cd on cd.deal_id= cdcm.deal_id    WHERE cdcm.DEAL_ID = '"+vo.getDealId()+"'" ;
				logger.info("select query "+query);
				boolean status = false;
				try{
				ArrayList searchlist = ConnectionDAO.sqlSelect(query);
				String vatPercent="";
				String vatamount="";
				String dealAssetCost="";
				String assetID="";
				
				ArrayList qryList= new ArrayList();
				for (int i = 0; i < searchlist.size(); i++) {
					logger.info("vatDetail " + searchlist.get(i).toString());
					ArrayList data = (ArrayList) searchlist.get(i);
					if (data.size() > 0) {
						assetID = CommonFunction.checkNull(data.get(0));
						vatamount = CommonFunction.checkNull(data.get(1));
						dealAssetCost =CommonFunction.checkNull(data.get(2));
					}
					
					}
				double vamount = Double.parseDouble(vatamount);
				double assetCost = Double.parseDouble(dealAssetCost);
				double vPercent = (vamount*100)/assetCost;
				
				logger.info("assetID -----"+ assetID+"--vatamount--"+vatamount+"--dealAssetCost--"+dealAssetCost+"---vPercent ---"+vPercent);
				PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
				String updateQuery ="update cr_deal_loan_dtl set vat_percent = ? , vat_amount = ? where  deal_id=?"; 
				if(CommonFunction.checkNull(vPercent).equalsIgnoreCase(""))
					insertPrepStmtObject.addString("0.00");
					else
						insertPrepStmtObject.addString(vPercent+"");
				if(CommonFunction.checkNull(vamount).equalsIgnoreCase(""))
					insertPrepStmtObject.addString("0.00");
					else
						insertPrepStmtObject.addString(vamount+"");
				if(CommonFunction.checkNull(vo.getDealId()).equalsIgnoreCase(""))
					insertPrepStmtObject.addString("0.00");
					else
						insertPrepStmtObject.addString(vo.getDealId());
				
				
				logger.info("IN update query1 ### "+insertPrepStmtObject.printQuery());
				qryList.add(insertPrepStmtObject);
				logger.info("In saveViability ........ update query: "+updateQuery);			
				
				insertPrepStmtObject=null;
				status =ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
				logger.info("In saveViability.........update status: "+status);
				}catch (Exception e) {
					
				}
				
				
				return status;
			}
			public String getServiceTaxStateWise(String supplierId)
			{
				logger.info("in getServiceTaxStateWise");
				String  query = "select service_tax from com_state_m s left join cr_dsa_dealer_m d on s.state_id=d.state where d.dealer_id ='"+supplierId+"' "; 
				logger.info("Select Query-----"+ query);
				String value = CommonFunction.checkNull(ConnectionDAO.singleReturn(query));
				logger.info("Vat value in percent-----"+ value);
				return value;
			}
			public String getProductLoanType(String productId)
			{
				logger.info("in getProductLoanType");
				String  query = "select product_loan_type from cr_product_m s where product_id ='"+productId+"' "; 
				logger.info("Select Query-----"+ query);
				String value = CommonFunction.checkNull(ConnectionDAO.singleReturn(query));
				logger.info("product_loan_type value -----"+ value);
				return value;
			}
			// end by saorabh
			
			// Change started by Ashish for AssetCollateralInvoiceDetail

			public String saveAssetInvoiceDetails(Object ob) {
		
		
		int maxId=0;
		CollateralVo vo = (CollateralVo)ob;
		qryList = new ArrayList();
		qryList1 = new ArrayList();
		String assetId=vo.getAssetsId();
		String result="";
		String recordId=vo.getRecordId();
		boolean status = false;
		int count=0;
		StringBuffer bufInsUpdSql = new StringBuffer();
		PrepStmtObject  insertPrepStmtObject =  new PrepStmtObject();
		StringBuffer bufInsUpdSql1 = new StringBuffer();
		PrepStmtObject  insertPrepStmtObject1 =  new PrepStmtObject();
		StringBuffer bufInsSql =	new StringBuffer();
		StringBuilder query=null;
		try
		{
		if(!CommonFunction.checkNull(vo.getAssetsId()).equalsIgnoreCase(""))
		{
			query=new StringBuilder();
			query.append("select count(PRODUCT_TYPE) from CR_ASSET_INVOICE_DTL " );
			query.append(" where PRODUCT_TYPE='"+CommonFunction.checkNull(vo.getInvoiceProductType()).trim()+"' ");
			query.append(" AND  ASSET_ID='"+vo.getAssetsId()+"'");
			if(!CommonFunction.checkNull(recordId).equalsIgnoreCase(""))
			{
				query.append(" AND  record_Id<>'"+recordId+"'");	
			}
			String val=ConnectionDAO.singleReturn(query.toString());
			count=Integer.parseInt(val);
			if(count>0)
			{
				result="dupProd";
			}
			query=null;
		}
		

		
		if(!CommonFunction.checkNull(vo.getAssetsId()).equalsIgnoreCase("") && count<1)
		{
			query=new StringBuilder();
		query.append("select count(INVOICE_NO) from CR_ASSET_INVOICE_DTL " );
			query.append(" where INVOICE_NO='"+CommonFunction.checkNull(vo.getInvoiceNo()).trim()+"' ");
			query.append(" AND  ASSET_ID<>'"+vo.getAssetsId()+"'");
			String val=ConnectionDAO.singleReturn(query.toString());
			count=Integer.parseInt(val);
			if(count>0)
			{
				result="dupInvoice";
			}
			query=null;
		}
		
		if(!CommonFunction.checkNull(vo.getAssetsId()).equalsIgnoreCase("") && count<1)
		{
			StringBuilder query1=new StringBuilder();
			query1.append("select count(INVOICE_NO) from CR_ASSET_INVOICE_DTL " );
			query1.append(" where  ASSET_ID='"+vo.getAssetsId()+"'");
			String value=ConnectionDAO.singleReturn(query1.toString());
			int countResult=Integer.parseInt(value);
			
			if(countResult>0)
			{
			query=new StringBuilder();
			query.append("select count(INVOICE_NO) from CR_ASSET_INVOICE_DTL " );
			query.append(" where INVOICE_NO='"+CommonFunction.checkNull(vo.getInvoiceNo()).trim()+"' ");
			query.append(" AND  ASSET_ID='"+vo.getAssetsId()+"'");

			String val=ConnectionDAO.singleReturn(query.toString());
			count=Integer.parseInt(val);
			if(count==0)
			{
				result="notAllowInvoice";
			}
			query=null;
			}
		}
		String table="";
		if(CommonFunction.checkNull(vo.getSource()).trim().equalsIgnoreCase("ED"))
	 	   table="CR_ASSET_INVOICE_DTL_EDIT";
	    else
	 	   table="CR_ASSET_INVOICE_DTL";
		
		if(CommonFunction.checkNull(result).equalsIgnoreCase("")){

		if (recordId==null||recordId.trim().equalsIgnoreCase(""))
		{
		logger.info("In insert saveAssetInvoiceDetails");
		bufInsSql.append("insert into " +table+" (ASSET_ID,PRODUCT_TYPE,QUANTITY,PRICE,DISCOUNT_AMT,TAX_AMT,INVOICE_AMT,INVOICE_NO,INVOICE_DATE,INVOICE_LOCATION,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");
		bufInsSql.append("values(");
		bufInsSql.append(" ?," );  // ASSET_ID
		bufInsSql.append(" ?," );  // PRODUCT_TYPE
		bufInsSql.append(" ?," );  //QUANTITY
		bufInsSql.append(" ?," );  //PRICE
		bufInsSql.append(" ?," );  // DISCOUNT_AMT
		bufInsSql.append(" ?," );  // TAX_AMT
		bufInsSql.append(" ?," );  // INVOICE_AMT
		bufInsSql.append(" ?," );  // INVOICE_NO
		bufInsSql.append(" STR_TO_DATE(?,'"+dateFormat+"')," );  //INVOICE_DATE
		bufInsSql.append(" ?," );  //INVOICE_LOCATION
		bufInsSql.append(" ?," );  // MAKER_ID
		bufInsSql.append(" STR_TO_DATE(?,'"+dateFormat+"')," );  // MAKER_DATE
		bufInsSql.append(" ?," );  // AUTHOR_ID
		bufInsSql.append(" STR_TO_DATE(?,'"+dateFormat+"'))" );  // AUTHOR_DATE

		if((CommonFunction.checkNull(vo.getAssetsId())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getAssetsId()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceProductType())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceProductType()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceQuantity())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceQuantity()).trim());
		if((CommonFunction.checkNull(vo.getInvoicePrice())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoicePrice()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceDiscount())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceDiscount()).trim());
		if((CommonFunction.checkNull(vo.getTaxAmount())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getTaxAmount()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceAmount())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceAmount()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceNo())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceNo()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceDate())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceDate()).trim());
		if((CommonFunction.checkNull(vo.getInvoicelocation())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoicelocation()).trim());
		if((CommonFunction.checkNull(vo.getUserId())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getUserId()).trim());
		if((CommonFunction.checkNull(vo.getMakerDate())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getMakerDate()).trim());
		if((CommonFunction.checkNull(vo.getUserId())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getUserId()).trim());
		if((CommonFunction.checkNull(vo.getMakerDate())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getMakerDate()).trim());
		}
		else
		{
			logger.info("In Modify saveAssetInvoiceDetails");
			bufInsSql.append("update "+table+" set PRODUCT_TYPE=?,QUANTITY=?,PRICE=?,DISCOUNT_AMT=?,TAX_AMT=?,INVOICE_AMT=?,INVOICE_NO=?,INVOICE_DATE=STR_TO_DATE(?,'"+dateFormat+"'),INVOICE_LOCATION=?,MAKER_ID=?,MAKER_DATE=STR_TO_DATE(?,'"+dateFormat+"'),AUTHOR_ID=?,AUTHOR_DATE=STR_TO_DATE(?,'"+dateFormat+"') where ASSET_ID=? and RECORD_ID=?");

			if((CommonFunction.checkNull(vo.getInvoiceProductType())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getInvoiceProductType()).trim());
			if((CommonFunction.checkNull(vo.getInvoiceQuantity())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getInvoiceQuantity()).trim());
			if((CommonFunction.checkNull(vo.getInvoicePrice())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getInvoicePrice()).trim());
			if((CommonFunction.checkNull(vo.getInvoiceDiscount())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getInvoiceDiscount()).trim());
			if((CommonFunction.checkNull(vo.getTaxAmount())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getTaxAmount()).trim());
			if((CommonFunction.checkNull(vo.getInvoiceAmount())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getInvoiceAmount()).trim());
			if((CommonFunction.checkNull(vo.getInvoiceNo())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getInvoiceNo()).trim());
			if((CommonFunction.checkNull(vo.getInvoiceDate())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getInvoiceDate()).trim());
			if((CommonFunction.checkNull(vo.getInvoicelocation())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getInvoicelocation()).trim());
			if((CommonFunction.checkNull(vo.getUserId())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getUserId()).trim());
			if((CommonFunction.checkNull(vo.getMakerDate())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getMakerDate()).trim());
			if((CommonFunction.checkNull(vo.getUserId())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getUserId()).trim());
			if((CommonFunction.checkNull(vo.getMakerDate())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getMakerDate()).trim());
			if((CommonFunction.checkNull(vo.getAssetsId())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getAssetsId()).trim());
			if((CommonFunction.checkNull(vo.getRecordId())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getRecordId()).trim());
			}

		insertPrepStmtObject.setSql(bufInsSql.toString());
		logger.info("IN saveAssetInvoiceDetails() insert or update query ### "+insertPrepStmtObject.printQuery());
		qryList.add(insertPrepStmtObject);
		bufInsSql=null;
		insertPrepStmtObject=null;
		

			status =ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			logger.info("In saveAssetInvoiceDetails.........insert or update status: "+status);
			if(status)
			{
				result="Saved";
			}
			else{
				result="notSaved";
			}
		}
		}
		catch(Exception e){
			e.printStackTrace();
		}
		return result;
		}
		
	public String saveAssetDispatchDetails(Object ob) {
		
		
		int maxId=0;
		CollateralVo vo = (CollateralVo)ob;
		qryList = new ArrayList();
		qryList1 = new ArrayList();
		String assetId=vo.getAssetsId();
		String recordId=vo.getRecordId();
		boolean status = false;
		StringBuffer bufInsUpdSql = new StringBuffer();
		PrepStmtObject  insertPrepStmtObject =  new PrepStmtObject();
		StringBuffer bufInsUpdSql1 = new StringBuffer();
		PrepStmtObject  insertPrepStmtObject1 =  new PrepStmtObject();
		StringBuffer bufInsSql =	new StringBuffer();
		String table="";
		if(CommonFunction.checkNull(vo.getSource()).trim().equalsIgnoreCase("ED"))
	 	   table="CR_ASSET_INVOICE_DISPATCH_DTL_EDIT";
	    else
	 	   table="CR_ASSET_INVOICE_DISPATCH_DTL";
		
		if (recordId==null||recordId.trim().equalsIgnoreCase(""))
		{
			logger.info("In insert saveAssetDispatchDetails");
			bufInsSql.append("insert into "+table+" (ASSET_ID,DISPATCH_LOCATION,PRODUCT_TYPE,DISPATCH_QUANTITY,CONSIGNEE_SHIPPING_ADDRESS,LOGISTICS_PROVIDER,CONSIGNEE_NAME,CONSIGNMENT_NO,DELIEVERY_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,DELIEVERY_LOCATION,CONSIGNMENT_VALUE,DISPATCH_DATE,DELIEVERY_DATE)");
		bufInsSql.append("values(");
		bufInsSql.append(" ?," );  // ASSET_ID
		bufInsSql.append(" ?," );  // DISPATCH_LOCATION
		bufInsSql.append(" ?," );  //PRODUCT_TYPE
		bufInsSql.append(" ?," );  //DISPATCH_QUANTITY
		bufInsSql.append(" ?," );  // CONSIGNEE_SHIPPING_ADDRESS
		bufInsSql.append(" ?," );  // LOGISTICS_PROVIDER
		bufInsSql.append(" ?," );  // CONSIGNEE_NAME
		bufInsSql.append(" ?," );  //CONSIGNMENT_NO
		bufInsSql.append(" ?," );  //DELIEVERY_STATUS
		bufInsSql.append(" ?," );  // MAKER_ID
		bufInsSql.append(" STR_TO_DATE(?,'"+dateFormat+"')," );  // MAKER_DATE
		bufInsSql.append(" ?," );  // AUTHOR_ID
		bufInsSql.append(" STR_TO_DATE(?,'"+dateFormat+"')," );  // AUTHOR_DATE
		bufInsSql.append(" ?," );  //DELIEVERY_LOCATION
		bufInsSql.append(" ?," );  // CONSIGNMENT_VALUE
		bufInsSql.append(" STR_TO_DATE(?,'"+dateFormat+"')," );  // DISPATCH_DATE
		bufInsSql.append(" STR_TO_DATE(?,'"+dateFormat+"'))" );	 // DELIEVERY_DATE

		if((CommonFunction.checkNull(vo.getAssetsId())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getAssetsId()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceDispatchLocation())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceDispatchLocation()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceProductTypeDesc())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceProductTypeDesc()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceDispatchQuantity())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceDispatchQuantity()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceConsigneeShippingAddress())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceConsigneeShippingAddress()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceLogisticsProvider())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceLogisticsProvider()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceConsigneeName())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceConsigneeName()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceConsignmentNo())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceConsignmentNo()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceDeliveryStatus())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceDeliveryStatus()).trim());
		if((CommonFunction.checkNull(vo.getUserId())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getUserId()).trim());
		if((CommonFunction.checkNull(vo.getMakerDate())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getMakerDate()).trim());
		if((CommonFunction.checkNull(vo.getUserId())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getUserId()).trim());
		if((CommonFunction.checkNull(vo.getMakerDate())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getMakerDate()).trim());
		if((CommonFunction.checkNull(vo.getDelieveryLocation())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getDelieveryLocation()).trim());
		if((CommonFunction.checkNull(vo.getConsignmentValue())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getConsignmentValue()).trim());
		if((CommonFunction.checkNull(vo.getDispatchDate())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getDispatchDate()).trim());
		if((CommonFunction.checkNull(vo.getDelieveryDate())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getDelieveryDate()).trim());
		}
		else
		{
			logger.info("In update saveAssetDispatchDetails");
			bufInsSql.append("update "+table+" set DISPATCH_LOCATION=?,PRODUCT_TYPE=?,DISPATCH_QUANTITY=?,CONSIGNEE_SHIPPING_ADDRESS=?,LOGISTICS_PROVIDER=?,CONSIGNEE_NAME=?,CONSIGNMENT_NO=?,DELIEVERY_STATUS=?,MAKER_ID=?,MAKER_DATE=STR_TO_DATE(?,'"+dateFormat+"'),AUTHOR_ID=?,AUTHOR_DATE=STR_TO_DATE(?,'"+dateFormat+"'),DELIEVERY_LOCATION=?,CONSIGNMENT_VALUE=?,DISPATCH_DATE=STR_TO_DATE(?,'"+dateFormat+"'),DELIEVERY_DATE=STR_TO_DATE(?,'"+dateFormat+"') where ASSET_ID=? and RECORD_ID=?");

		if((CommonFunction.checkNull(vo.getInvoiceDispatchLocation())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceDispatchLocation()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceProductTypeDesc())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceProductTypeDesc()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceDispatchQuantity())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceDispatchQuantity()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceConsigneeShippingAddress())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceConsigneeShippingAddress()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceLogisticsProvider())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceLogisticsProvider()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceConsigneeName())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceConsigneeName()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceConsignmentNo())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceConsignmentNo()).trim());
		if((CommonFunction.checkNull(vo.getInvoiceDeliveryStatus())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getInvoiceDeliveryStatus()).trim());
		if((CommonFunction.checkNull(vo.getUserId())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getUserId()).trim());
		if((CommonFunction.checkNull(vo.getMakerDate())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getMakerDate()).trim());
		if((CommonFunction.checkNull(vo.getUserId())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getUserId()).trim());
		if((CommonFunction.checkNull(vo.getMakerDate())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getMakerDate()).trim());
		if((CommonFunction.checkNull(vo.getDelieveryLocation())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getDelieveryLocation()).trim());
		if((CommonFunction.checkNull(vo.getConsignmentValue())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getConsignmentValue()).trim());
		if((CommonFunction.checkNull(vo.getDispatchDate())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getDispatchDate()).trim());
		if((CommonFunction.checkNull(vo.getDelieveryDate())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getDelieveryDate()).trim());
		if((CommonFunction.checkNull(vo.getAssetsId())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getAssetsId()).trim());
		if((CommonFunction.checkNull(vo.getRecordId())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((vo.getRecordId()).trim());
		
		}

		insertPrepStmtObject.setSql(bufInsSql.toString());
		logger.info("IN saveAssetDispatchDetails() insert or update query ### "+insertPrepStmtObject.printQuery());
		qryList.add(insertPrepStmtObject);
		bufInsSql=null;
		insertPrepStmtObject=null;
		
		try
		{
			status =ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			logger.info("In saveAssetDispatchDetails.........insert or update status: "+status);
			if(status)
			{
				assetId=vo.getAssetsId().trim();
			}
		}
		catch(Exception e){
			e.printStackTrace();
		}
		return assetId;
		}
		public String getInvoiceAssetId()
		{
			logger.info("getInvoiceAssetId");
			
			StringBuilder query=new StringBuilder();
			query.append("Select distinct max(ASSET_ID) from cr_asset_collateral_m");
			String id="";
	 	   	id=ConnectionDAO.singleReturn(query.toString());
	 	   	logger.info("assetId : "+id);
	 	   	query=null;
	 	   	return id;
		}
		
		public ArrayList<CollateralVo> getAssetInvoiceDetailList(String assetId,String source) {
			ArrayList<CollateralVo> list=new ArrayList();
			String table="";
			if(source.trim().equalsIgnoreCase("ED"))
		 	   table="CR_ASSET_INVOICE_DTL_EDIT";
		    else
		 	   table="CR_ASSET_INVOICE_DTL";
			try{
				StringBuilder query=new StringBuilder();
				StringBuilder query2=new StringBuilder();
			 query.append("SELECT CAID.RECORD_ID,CAID.ASSET_ID,CAID.PRODUCT_TYPE,CAID.QUANTITY,ROUND(CAID.PRICE,2),ROUND(CAID.DISCOUNT_AMT,2),ROUND(CAID.INVOICE_AMT,2),CACM.ASSET_SUPPLIER,CACM.ASSET_SUPPLIER_DESC,CACM.ASSET_MANUFATURER,CACM.ASSET_MANUFATURER_DESC,CACM.INVOICE_SI_RD_NAME,CIPM.PRODUCT_DESC from  "+table+"  CAID left join cr_asset_collateral_m CACM on CAID.ASSET_ID=CACM.ASSET_ID left join CR_INVOICE_PRODUCT_M CIPM ON CAID.PRODUCT_TYPE=CIPM.RECORD_ID where CAID.ASSET_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(assetId)).trim());
			 query2.append("SELECT ROUND(sum(INVOICE_AMT),2) from  "+table+"   where ASSET_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(assetId)).trim());
			logger.info("getAssetInvoiceDetailList :"+query);
			CollateralVo invoiceVo = null;
			ArrayList invoiceDtl = ConnectionDAO.sqlSelect(query.toString());
			ArrayList invoiceTotalAmount = ConnectionDAO.sqlSelect(query2.toString());
			ArrayList invoiceDtl2=(ArrayList)invoiceTotalAmount.get(0);
			String totalAmount=(CommonFunction.checkNull(invoiceDtl2.get(0))).trim();
			logger.info("getInvoiceList"+invoiceDtl.size());
			query=null;
			String recordId="";
			for(int i=0;i<invoiceDtl.size();i++){

			//	logger.info("getProductTypeList"+loandeatail.get(i).toString());
				ArrayList invoiceDtl1=(ArrayList)invoiceDtl.get(i);
				if(invoiceDtl1.size()>0)
				{
					invoiceVo = new CollateralVo();
					invoiceVo.setRecordId(CommonFunction.checkNull(invoiceDtl1.get(0)).trim());
					invoiceVo.setAssetsId((CommonFunction.checkNull(invoiceDtl1.get(1))).trim());
					invoiceVo.setInvoiceProductType((CommonFunction.checkNull(invoiceDtl1.get(2))).trim());
					invoiceVo.setInvoiceQuantity((CommonFunction.checkNull(invoiceDtl1.get(3))).trim());
					invoiceVo.setInvoicePrice((CommonFunction.checkNull(invoiceDtl1.get(4))).trim());
					invoiceVo.setInvoiceDiscount((CommonFunction.checkNull(invoiceDtl1.get(5))).trim());
					invoiceVo.setInvoiceAmount((CommonFunction.checkNull(invoiceDtl1.get(6))).trim());
					invoiceVo.setLbxmachineSupplier((CommonFunction.checkNull(invoiceDtl1.get(7))).trim());
					invoiceVo.setMachineSupplier((CommonFunction.checkNull(invoiceDtl1.get(8))).trim());
					invoiceVo.setLbxmachineManufact((CommonFunction.checkNull(invoiceDtl1.get(9))).trim());
					invoiceVo.setAssetManufact((CommonFunction.checkNull(invoiceDtl1.get(10))).trim());
					invoiceVo.setSiRdName((CommonFunction.checkNull(invoiceDtl1.get(11))).trim());
					invoiceVo.setProductDesc((CommonFunction.checkNull(invoiceDtl1.get(12))).trim());
					invoiceVo.setInvoiceTotalAmount(totalAmount);
					list.add(invoiceVo);
				}
				invoiceVo=null;
				invoiceDtl1.clear();
				invoiceDtl1=null;
				recordId="";
			}
			}catch(Exception e){
				e.printStackTrace();
			}
			finally{
				assetId=null;
				
			}

			return list;
		}
		
		public ArrayList<CollateralVo> getAssetDispatchDetailList(String assetId,String source) {
			ArrayList<CollateralVo> list=new ArrayList();
			String table="";
			if(source.trim().equalsIgnoreCase("ED"))
		 	   table="CR_ASSET_INVOICE_DISPATCH_DTL_EDIT";
		    else
		 	   table="CR_ASSET_INVOICE_DISPATCH_DTL";
			try{
				StringBuilder query=new StringBuilder();
			 query.append("SELECT A.RECORD_ID,ASSET_ID,CONSIGNMENT_NO,CONSIGNEE_NAME,LOGISTICS_PROVIDER,PRODUCT_TYPE,CASE DELIEVERY_STATUS WHEN 'D' THEN 'Delivered' WHEN 'P' THEN 'Pending' ELSE '' END AS DELIEVERY_STATUS,B.PRODUCT_DESC from "+table+" A left join CR_INVOICE_PRODUCT_M B on A.PRODUCT_TYPE=B.RECORD_ID where ASSET_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(assetId)).trim());
			logger.info("getAssetDispatchDetailList :"+query);
			CollateralVo dispatchVo = null;
			ArrayList dispatchdetail = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getDispatchList"+dispatchdetail.size());
			query=null;
			for(int i=0;i<dispatchdetail.size();i++){

			//	logger.info("getProductTypeList"+loandeatail.get(i).toString());
				ArrayList dispatchdetail1=(ArrayList)dispatchdetail.get(i);
				if(dispatchdetail1.size()>0)
				{
					dispatchVo = new CollateralVo();
					dispatchVo.setRecordId((CommonFunction.checkNull(dispatchdetail1.get(0))).trim());
					dispatchVo.setAssetsId((CommonFunction.checkNull(dispatchdetail1.get(1))).trim());
					dispatchVo.setInvoiceConsignmentNo((CommonFunction.checkNull(dispatchdetail1.get(2))).trim());
					dispatchVo.setInvoiceConsigneeName((CommonFunction.checkNull(dispatchdetail1.get(3))).trim());
					dispatchVo.setInvoiceLogisticsProvider((CommonFunction.checkNull(dispatchdetail1.get(4))).trim());
					dispatchVo.setInvoiceProductType((CommonFunction.checkNull(dispatchdetail1.get(5))).trim());
					dispatchVo.setInvoiceDeliveryStatus((CommonFunction.checkNull(dispatchdetail1.get(6))).trim());
					dispatchVo.setInvoiceProductTypeDesc((CommonFunction.checkNull(dispatchdetail1.get(7))).trim());
					list.add(dispatchVo);
				}
				dispatchVo=null;
				dispatchdetail1.clear();
				dispatchdetail1=null;
			}
			}catch(Exception e){
				e.printStackTrace();
			}
			finally{
				assetId=null;
				
			}

			return list;
		}
		
		public ArrayList<CollateralVo> getInvoiceDetail(String recordId,String source) {
			ArrayList<CollateralVo> list=new ArrayList();
			String table="";
			if(source.trim().equalsIgnoreCase("ED"))
		 	   table="CR_ASSET_INVOICE_DTL_EDIT";
		    else
		 	   table="CR_ASSET_INVOICE_DTL";
			try{
				StringBuilder query=new StringBuilder();
			 query.append("SELECT CAID.RECORD_ID,CAID.ASSET_ID,CAID.PRODUCT_TYPE,CIPM.PRODUCT_DESC,CAID.QUANTITY,ROUND(CAID.PRICE,2),ROUND(CAID.DISCOUNT_AMT,2),ROUND(CAID.TAX_AMT,2),ROUND(CAID.INVOICE_AMT,2),CAID.INVOICE_NO,date_format(CAID.INVOICE_DATE,'%d-%m-%Y'),CAID.INVOICE_LOCATION,CACM.ASSET_TYPE,CACM.ASSET_COLLATERAL_CLASS,(SELECT PRODUCT_DESC FROM CR_INVOICE_PRODUCT_M WHERE RECORD_ID=CAID.PRODUCT_TYPE) from "+table+" CAID left join cr_asset_collateral_m CACM on CAID.ASSET_ID=CACM.ASSET_ID left join CR_INVOICE_PRODUCT_M CIPM ON CAID.PRODUCT_TYPE=CIPM.RECORD_ID where CAID.RECORD_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(recordId)).trim());
			logger.info("getAssetInvoiceDetail :"+query);
			CollateralVo invoiceVo = null;
			ArrayList invoiceDtl = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getInvoiceList"+invoiceDtl.size());
			query=null;
			for(int i=0;i<invoiceDtl.size();i++){

			//	logger.info("getProductTypeList"+loandeatail.get(i).toString());
				ArrayList invoiceDtl1=(ArrayList)invoiceDtl.get(i);
				if(invoiceDtl1.size()>0)
				{
					invoiceVo = new CollateralVo();
					invoiceVo.setRecordId(CommonFunction.checkNull(invoiceDtl1.get(0)).trim());
					invoiceVo.setAssetsId((CommonFunction.checkNull(invoiceDtl1.get(1))).trim());
					invoiceVo.setInvoiceProductType((CommonFunction.checkNull(invoiceDtl1.get(2))).trim());
					invoiceVo.setProductDesc((CommonFunction.checkNull(invoiceDtl1.get(3))).trim());
					invoiceVo.setInvoiceQuantity((CommonFunction.checkNull(invoiceDtl1.get(4))).trim());
					invoiceVo.setInvoicePrice((CommonFunction.checkNull(invoiceDtl1.get(5))).trim());
					invoiceVo.setInvoiceDiscount((CommonFunction.checkNull(invoiceDtl1.get(6))).trim());
					invoiceVo.setTaxAmount((CommonFunction.checkNull(invoiceDtl1.get(7))).trim());
					invoiceVo.setInvoiceAmount((CommonFunction.checkNull(invoiceDtl1.get(8))).trim());
					invoiceVo.setInvoiceNo((CommonFunction.checkNull(invoiceDtl1.get(9))).trim());
					invoiceVo.setInvoiceDate((CommonFunction.checkNull(invoiceDtl1.get(10))).trim());
					invoiceVo.setInvoicelocation((CommonFunction.checkNull(invoiceDtl1.get(11))).trim());
					invoiceVo.setColltype2((CommonFunction.checkNull(invoiceDtl1.get(12))).trim());
					invoiceVo.setColltype1((CommonFunction.checkNull(invoiceDtl1.get(13))).trim());
					invoiceVo.setProductDesc((CommonFunction.checkNull(invoiceDtl1.get(14))).trim());
					list.add(invoiceVo);
				}
				invoiceVo=null;
				invoiceDtl1.clear();
				invoiceDtl1=null;
			}
			}catch(Exception e){
				e.printStackTrace();
			}
			finally{
				recordId=null;
				
			}

			return list;
		}
		
		public ArrayList<CollateralVo> getDispatchDetail(String recordId,String source) {
			ArrayList<CollateralVo> list=new ArrayList();
			String table="";
			if(source.trim().equalsIgnoreCase("ED"))
		 	   table="CR_ASSET_INVOICE_DISPATCH_DTL_EDIT";
		    else
		 	   table="CR_ASSET_INVOICE_DISPATCH_DTL";
			try{
				StringBuilder query=new StringBuilder();
			 query.append("SELECT A.RECORD_ID,ASSET_ID,CONSIGNMENT_NO,CONSIGNEE_NAME,LOGISTICS_PROVIDER,PRODUCT_TYPE,ISNULL(DELIEVERY_STATUS,''),DISPATCH_LOCATION,DISPATCH_QUANTITY,CONSIGNEE_SHIPPING_ADDRESS,DELIEVERY_LOCATION,CONSIGNMENT_VALUE,date_format(DISPATCH_DATE,'%d-%m-%Y'),date_format(DELIEVERY_DATE,'%d-%m-%Y') from "+table+" A left join CR_INVOICE_PRODUCT_M B on A.PRODUCT_TYPE=B.RECORD_ID where A.RECORD_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(recordId)).trim());
			logger.info("getDispatchDetail :"+query);
			CollateralVo dispatchVo = null;
			ArrayList dispatchdetail = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getDispatchDetail"+dispatchdetail.size());
			query=null;
			
			for(int i=0;i<dispatchdetail.size();i++){

			//	logger.info("getProductTypeList"+loandeatail.get(i).toString());
				ArrayList dispatchdetail1=(ArrayList)dispatchdetail.get(i);
				if(dispatchdetail1.size()>0)
				{
					dispatchVo = new CollateralVo();
					dispatchVo.setRecordId(CommonFunction.checkNull(dispatchdetail1.get(0)).trim());
					dispatchVo.setAssetsId((CommonFunction.checkNull(dispatchdetail1.get(1))).trim());
					dispatchVo.setInvoiceConsignmentNo((CommonFunction.checkNull(dispatchdetail1.get(2))).trim());
					dispatchVo.setInvoiceConsigneeName((CommonFunction.checkNull(dispatchdetail1.get(3))).trim());
					dispatchVo.setInvoiceLogisticsProvider((CommonFunction.checkNull(dispatchdetail1.get(4))).trim());
					dispatchVo.setInvoiceProductTypeDesc((CommonFunction.checkNull(dispatchdetail1.get(5))).trim());
					dispatchVo.setInvoiceDeliveryStatus((CommonFunction.checkNull(dispatchdetail1.get(6))).trim());
					dispatchVo.setInvoiceDispatchLocation((CommonFunction.checkNull(dispatchdetail1.get(7))).trim());
					dispatchVo.setInvoiceDispatchQuantity((CommonFunction.checkNull(dispatchdetail1.get(8))).trim());
					dispatchVo.setInvoiceConsigneeShippingAddress((CommonFunction.checkNull(dispatchdetail1.get(9))).trim());
					dispatchVo.setDelieveryLocation((CommonFunction.checkNull(dispatchdetail1.get(10))).trim());
					dispatchVo.setConsignmentValue((CommonFunction.checkNull(dispatchdetail1.get(11))).trim());
					dispatchVo.setDispatchDate((CommonFunction.checkNull(dispatchdetail1.get(12))).trim());
					dispatchVo.setDelieveryDate((CommonFunction.checkNull(dispatchdetail1.get(13))).trim());
					list.add(dispatchVo);
				}
				dispatchVo=null;
				dispatchdetail1.clear();
				dispatchdetail1=null;
			}
			}catch(Exception e){
				e.printStackTrace();
			}
			finally{
				recordId=null;
				
			}

			return list;
		}
		public boolean deleteInvoiceDetail(String recordId,String source)
		{
			boolean status=false;
			logger.info("deleteInvoiceDetail");
			StringBuilder query=new StringBuilder();
			String table="";
			if(source.trim().equalsIgnoreCase("ED"))
		 	   table="CR_ASSET_INVOICE_DTL_EDIT";
		    else
		 	   table="CR_ASSET_INVOICE_DTL";
			query.append("delete from "+table+" where RECORD_ID='"+recordId+"'");
			ArrayList list=new ArrayList();
			list.add(query);
			try {
				status=ConnectionDAO.sqlInsUpdDelete(list);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				e=null;
			}
			finally
			{
				query=null;
				list.clear();
				list=null;
			}
			return status;
		}
		public boolean deleteDispatchDetail(String recordId,String source)
		{
			boolean status=false;
			logger.info("deleteDispatchDetail");
			StringBuilder query=new StringBuilder();
			String table="";
			if(source.trim().equalsIgnoreCase("ED"))
		 	   table="CR_ASSET_INVOICE_DISPATCH_DTL_EDIT";
		    else
		 	   table="CR_ASSET_INVOICE_DISPATCH_DTL";
			query.append("delete from "+table+" where RECORD_ID='"+recordId+"'");
			ArrayList list=new ArrayList();
			list.add(query);
			try {
				status=ConnectionDAO.sqlInsUpdDelete(list);
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				e=null;
			}
			finally
			{
				query=null;
				list.clear();
				list=null;
			}
			return status;
		}
		public ArrayList getInvoiceProductList(String assetId,String source) {
			ArrayList list=new ArrayList();
			String table="";
			if(source.trim().equalsIgnoreCase("ED"))
		 	   table="CR_ASSET_INVOICE_DTL_EDIT";
		    else
		 	   table="CR_ASSET_INVOICE_DTL";
			try{
				StringBuilder query=new StringBuilder();
			 query.append("select a.PRODUCT_TYPE,b.PRODUCT_DESC from "+table+" a join CR_INVOICE_PRODUCT_M b on a.PRODUCT_TYPE=b.record_id WHERE a.PRODUCT_TYPE is not null and a.ASSET_ID="+(CommonFunction.checkNull(assetId).trim()));
			logger.info("query for invoice product type"+query);
			 ArrayList productList = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getProductList "+productList.size());
			
			query=null;
			
			for(int i=0;i<productList.size();i++){
			//	logger.info("getProductList...Outer FOR loop "+CommonFunction.checkNull(productList.get(i)).toString());
				ArrayList data=(ArrayList)productList.get(i);
				if(data.size()>0)	{
					CollateralVo vo = new CollateralVo();
				vo.setInvoiceProductTypeCode((CommonFunction.checkNull(data.get(0))).trim());
				vo.setInvoiceProductTypeDesc((CommonFunction.checkNull(data.get(1))).trim());
				list.add(vo);
			}
				data.clear();
				data=null;
			}
			}catch(Exception e){
				e.printStackTrace();
			}
			
			return list;
		}
		@Override
		public ArrayList getSiRdName() {
			// TODO Auto-generated method stub
			ArrayList<Object> list=new ArrayList<Object>();
			try{
				StringBuilder query=new StringBuilder();
			 query.append("SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='INVOICE_SI_RD_NAME'");
			ArrayList addressList = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getAddressList "+addressList.size());
			
			query=null;
			
			for(int i=0;i<addressList.size();i++){
				ArrayList data=(ArrayList)addressList.get(i);
				if(data.size()>0)	{
				CollateralVo siRdName=new CollateralVo();
				siRdName.setSiRdName((CommonFunction.checkNull(data.get(0))).trim());

				list.add(siRdName);
			}
				data.clear();
				data=null;
			}
			}catch(Exception e){
				e.printStackTrace();
			}
			
			return list;
		}
	// Change ended by Ashish for AssetCollateralInvoiceDetail

				@Override
				public ArrayList getbusinessList() {
					ArrayList list=new ArrayList();
					try{
						StringBuilder query=new StringBuilder();
					 query.append("select DESCRIPTION,VALUE from generic_master WHERE GENERIC_KEY='BUSINESS_TYPE' ");
					logger.info("query : "+query);
					LoanDetailForCMVO vo=null;
					ArrayList businessList = ConnectionDAO.sqlSelect(query.toString());
					logger.info("query : "+query);
					
					query=null;
					
					for(int i=0;i<businessList.size();i++){

					//	logger.info("getProductTypeList"+baseRate.get(i).toString());
						ArrayList businessList1=(ArrayList)businessList.get(i);
						if(businessList1.size()>0)
						{
						    vo = new LoanDetailForCMVO();
						    
							vo.setBusinessdesc((CommonFunction.checkNull(businessList1.get(0))).trim());
							vo.setBusinessId((CommonFunction.checkNull(businessList1.get(1))).trim());
							 logger.info("id.................................. "+(CommonFunction.checkNull(businessList1.get(0))).trim());
							 logger.info("id.................................. "+(CommonFunction.checkNull(businessList1.get(1))).trim());
							list.add(vo);
						}
						businessList1.clear();
						businessList1=null;
					}
					}catch(Exception e){
						e.printStackTrace();
					}
					
					return list;
				}
	@Override
	public  String getSchemeForGoldList(String dealId){

		logger.info("getSchemeForGoldOrnament");
		StringBuilder query=new StringBuilder();
		query.append("select DEAL_SCHEME from cr_deal_loan_dtl where  deal_id='"+dealId+"'");
		logger.info("Query :  "+query);
		return  (String)ConnectionDAO.singleReturn(query.toString());
	}



public  String getSchemeForGoldForLoan(String loanId){

	logger.info("getSchemeForGoldOrnament");
	StringBuilder query=new StringBuilder();
	query.append("select LOAN_SCHEME from cr_loan_dtl where  loan_id='"+loanId+"'");
	logger.info("Query :  "+query);
	return  (String)ConnectionDAO.singleReturn(query.toString());
}

public  String checkDuplicateGoldOrnament(String dealId,String ornamentType,String ornamentStandard){

	logger.info("checkDuplicateGoldOrnament");
	StringBuilder query=new StringBuilder();
	query.append("select count(1) from cr_asset_collateral_m a left join cr_deal_collateral_m b on a.asset_id=b.assetid " +
			"where b.deal_id='"+dealId+"' and a.Ornament_type='"+ornamentType+"' and a.ornament_standard='"+ornamentStandard+"' and asset_collateral_class='GOLd'");
	logger.info("Query :  "+query);
	return  (String)ConnectionDAO.singleReturn(query.toString());
}

public  String checkDuplicateGoldOrnamentForLoan(String loanId,String ornamentType,String ornamentStandard){

	logger.info("checkDuplicateGoldOrnamentForLoan");
	StringBuilder query=new StringBuilder();
	query.append("select count(1) from cr_asset_collateral_m a left join cr_loan_collateral_m b on a.asset_id=b.assetid " +
			"where b.loan_id='"+loanId+"' and a.Ornament_type='"+ornamentType+"' and a.ornament_standard='"+ornamentStandard+"' and asset_collateral_class='GOLd'");
	logger.info("Query :  "+query);
	return  (String)ConnectionDAO.singleReturn(query.toString());
}

public  String checkDuplicateGoldOrnamentForUpdateLoan(String loanId,String ornamentType,String ornamentStandard,String assetId){

	logger.info("checkDuplicateGoldOrnamentForLoan");
	StringBuilder query=new StringBuilder();
	query.append("select count(1) from cr_asset_collateral_m a left join cr_loan_collateral_m b on a.asset_id=b.assetid " +
			"where b.loan_id='"+loanId+"' and a.Ornament_type='"+ornamentType+"' and a.ornament_standard='"+ornamentStandard+"' and asset_collateral_class='GOLd'");
	
	if (!assetId.equalsIgnoreCase("")) {
		query.append("and a.asset_id != '"+ assetId+ "' ");

		
	}
	
	logger.info("Query :  "+query);
	return  (String)ConnectionDAO.singleReturn(query.toString());
}

public  String checkDuplicateGoldOrnamentUpdateDeal(String dealId,String ornamentType,String ornamentStandard,String assetId){

	logger.info("checkDuplicateGoldOrnament");
	StringBuilder query=new StringBuilder();
	query.append("select count(1) from cr_asset_collateral_m a left join cr_deal_collateral_m b on a.asset_id=b.assetid " +
			"where b.deal_id='"+dealId+"' and a.Ornament_type='"+ornamentType+"' and a.ornament_standard='"+ornamentStandard+"' and asset_collateral_class='GOLd'");
	
	if (!assetId.equalsIgnoreCase("")) {
		query.append(" and a.asset_id != '"+ assetId+ "' ");

		
	}
	logger.info("Query :  "+query);
	return  (String)ConnectionDAO.singleReturn(query.toString());
}
@Override
public boolean saveUploadPath(String txnType, String customerId, String path, String fileName ) {
	boolean status=false;
//	logger.info("Inside DAO Impl: File= "+uwDocVo.getDocFile());
//	logger.info("Inside DAO Impl: deal id= "+uwDocVo.getDealId());
	//boolean uploadStatus=UploadDocument.docUpload(uwDocVo.getDocFile(),uwDocVo.getDealId());
	//if(uploadStatus)
	//{
		logger.info("IN saveUploadPath()");
		ArrayList qryList = new ArrayList();
		PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
		try{
			logger.info("In insert part of uploadUnderwritingData....");
			StringBuffer bufInsSql =	new StringBuffer();
			bufInsSql.append("UPDATE "+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()+" SET DOCUMENT_PATH=?, DOCUMENT_NAME=? WHERE CUSTOMER_ID=?");

				
			if((CommonFunction.checkNull(path)).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((path).trim());
			if((CommonFunction.checkNull(fileName)).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((fileName).trim());
			
			if((CommonFunction.checkNull(customerId)).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((customerId).trim());



			insertPrepStmtObject.setSql(bufInsSql.toString());
			
			
			
			logger.info("IN saveUploadPath() insert query1 ### "+insertPrepStmtObject.printQuery());
			qryList.add(insertPrepStmtObject);
			status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			logger.info("In uploadUnderwritingData.................query status..... "+status);
			bufInsSql=null;
		}catch(Exception e){
			e.printStackTrace();
	}
		finally{
			qryList.clear();
			qryList=null;
	}
	return status;
}
@Override
public ArrayList getUploadCustomerPicData(String customerId, String source) {
	ArrayList list=new ArrayList();
	ArrayList data=null;
	try{
		//logger.info("In getUploadUnderwritingData..........................DAOImpl"+dealId);
		StringBuilder query=new StringBuilder();
		query.append("SELECT CUSTOMER_ID,DOCUMENT_NAME,'CUSTOMER PHOTO',IIF('"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(source)).trim()+"'='cr_deal_customer_m','DEAL','LOAN')AS SOURCE FROM "+StringEscapeUtils.escapeSql(CommonFunction.checkNull(source)).trim()+" WHERE CUSTOMER_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(customerId)).trim()+" AND ISNULL(DOCUMENT_NAME,'')<>'' ;");
		//logger.info("In getUploadUnderwritingData...............query...........DAOImpl"+query);
		UnderwritingDocUploadVo uwDocVo = null;
		ArrayList product = ConnectionDAO.sqlSelect(query.toString());
		//logger.info("getUploadUnderwritingData size of list Product "+product.size());
		query=null;
		for(int i=0;i<product.size();i++){
			
			 data=(ArrayList)product.get(i);
			if(data.size()>0)	{
				uwDocVo=new UnderwritingDocUploadVo();
				uwDocVo.setCustomerId((CommonFunction.checkNull(data.get(0))).trim());
				uwDocVo.setFileName((CommonFunction.checkNull(data.get(1))).trim());
				uwDocVo.setDocDescription((CommonFunction.checkNull(data.get(2))).trim());
				uwDocVo.setUploadedState((CommonFunction.checkNull(data.get(3))).trim());
				list.add(uwDocVo);
				uwDocVo=null;
	}
		}
	}
	catch(Exception e){
		e.printStackTrace();
	}
	finally{
	
		data=null;
		
	}

	return list;
}


@Override
public boolean deleteDocumentForCustomer(String docName, String customerId,String source) {
	logger.info("IN saveUploadPath()");
	boolean status=false;
	ArrayList qryList = new ArrayList();
	PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
	try{
		logger.info("In insert part of uploadUnderwritingData....");
		StringBuffer bufInsSql =	new StringBuffer();
		bufInsSql.append("UPDATE "+StringEscapeUtils.escapeSql(CommonFunction.checkNull(source)).trim()+" SET DOCUMENT_PATH=?, DOCUMENT_NAME=? WHERE CUSTOMER_ID=?");

	
			insertPrepStmtObject.addNull();
			insertPrepStmtObject.addNull();	
		if((CommonFunction.checkNull(customerId)).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((customerId).trim());



		insertPrepStmtObject.setSql(bufInsSql.toString());
				
	
		
		logger.info("IN saveUploadPath() insert query1 ### "+insertPrepStmtObject.printQuery());
		qryList.add(insertPrepStmtObject);
		status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
		logger.info("In uploadUnderwritingData.................query status..... "+status);
		bufInsSql=null;
	}catch(Exception e){
		e.printStackTrace();
	}
	finally{
		qryList.clear();
		qryList=null;
	}
return status;
}

public String getDownLoadFilePathForCustomerDoc(String customerId, String source)
{
	logger.info("In getDownLoadFilePathForCustomerDoc..........................DAOImpl");
	String filePath="";
	try
	{
	
	StringBuffer query =	new StringBuffer();
	query.append("select DOCUMENT_PATH from "+StringEscapeUtils.escapeSql(CommonFunction.checkNull(source)).trim()+" where customer_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(customerId)).trim()+"'");
	logger.info("In getFileInfo...............query...........DAOImpl "+query.toString());
	filePath = ConnectionDAO.singleReturn(query.toString()); 
	query=null;

}catch(Exception e){
	e.printStackTrace();
}
finally{
	customerId=null;
	source=null;
	
}
	return filePath;
}
@Override
public ArrayList<Object> getDocTypeList() {
	ArrayList list=new ArrayList();
	try{
		StringBuffer query=new StringBuffer();
	 query.append("SELECT VALUE,DESCRIPTION FROM generic_master  "
        +"where GENERIC_KEY='DOC_TYPE' and REC_STATUS='A'");
	logger.info("In creditProcessingDaoI getDocTypeList"+query.toString());
	
	ArrayList agriDoc = ConnectionDAO.sqlSelect(query.toString());
	query=null;
	for(int i=0;i<agriDoc.size();i++){
		ArrayList sublist = (ArrayList) agriDoc.get(i);
		if(sublist.size()>0){
			CommonDealVo dcType=new CommonDealVo();
			dcType.setDocTypeId((CommonFunction.checkNull(sublist.get(0))).trim());
			dcType.setDocTypeDesc((CommonFunction.checkNull(sublist.get(1))).trim());
			list.add(dcType);
		}
	}
	}catch(Exception e){
		e.printStackTrace();
	}
	return list;
}
@Override
public String getloanAmountForGoldOrnament(String dealId) {
	// TODO Auto-generated method stub
	return null;
}
@Override
public String getloanAmountForGoldOrnamentLoan(String loanId) {
	// TODO Auto-generated method stub
	return null;
}
@Override
public ArrayList<CodeDescVo> getGenericMasterList(String genericKey) {
	// TODO Auto-generated method stub
	return null;
}
					public ArrayList<CommonDealVo> searchDealReassignment(CommonDealVo vo, String type)
	{
		logger.info("In searchDealReassignment() method of CreditProcessingDAOImpl");
		StringBuilder dealId=new StringBuilder();
		StringBuilder customerName=new StringBuilder();
		int count=0;
		int startRecordIndex=0;
		int endRecordIndex = no;
		ArrayList searchlist=new ArrayList();
		ArrayList<CommonDealVo> detailList=new ArrayList();
		try
		{
			logger.info("In searchDealReassignment().....................................Dao Impl");
			dealId.append(CommonFunction.checkNull(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()));
	        customerName.append(CommonFunction.checkNull(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()));
	        boolean appendSQL=false;
	        StringBuffer bufInsSql =	new StringBuffer();
	        StringBuffer bufInsSqlTempCount = new StringBuffer();
	        bufInsSql.append("select distinct top 10 deal.deal_no, b.customer_name, c.product_desc, d.scheme_desc,"+
					 " a.deal_id, (SELECT USER_NAME FROM SEC_USER_M WHERE USER_ID=a.MAKER_ID) MAKER_ID "+
					 " from cr_deal_movement_dtl_edit a"+
	        		 " join cr_deal_dtl deal on deal.deal_id = a.deal_id AND deal.REC_STATUS<>'A' " +
	        		 " join cr_deal_loan_dtl dl on dl.deal_id = a.deal_id" +
					 " join cr_deal_customer_m b on b.customer_id = deal.deal_customer_id" +
					 " join cr_product_m c on c.product_id = dl.deal_product " +
					 " join cr_scheme_m d on d.scheme_id = dl.deal_scheme"+
					 " where a.rec_status='"+type+"' AND deal.DEAL_BRANCH='"+vo.getBranchId()+"' ");
	        bufInsSqlTempCount.append("select count(distinct deal.deal_no)"+
	        		" from cr_deal_movement_dtl_edit a"+
	        		 " join cr_deal_dtl deal on deal.deal_id = a.deal_id AND deal.REC_STATUS<>'A' " +
	        		 " join cr_deal_loan_dtl dl on dl.deal_id = a.deal_id" +
					 " join cr_deal_customer_m b on b.customer_id = deal.deal_customer_id" +
					 " join cr_product_m c on c.product_id = dl.deal_product " +
					 " join cr_scheme_m d on d.scheme_id = dl.deal_scheme"+
					 " where a.rec_status='"+type+"' AND deal.DEAL_BRANCH='"+vo.getBranchId()+"' ");
			if(vo.getStage()!=null && !vo.getStage().equalsIgnoreCase("F"))
			{
				  bufInsSql.append(" AND a.MAKER_ID='"+vo.getUserId()+"' ");
				  bufInsSqlTempCount.append(" AND a.MAKER_ID='"+vo.getUserId()+"' ");
			}
			if(vo.getStage()!=null && vo.getStage().equalsIgnoreCase("F"))
			{
				  bufInsSql.append(" AND a.MAKER_ID!='"+vo.getUserId()+"' ");
				  bufInsSqlTempCount.append(" AND a.MAKER_ID!='"+vo.getUserId()+"' ");
			}
			if((!((dealId.toString()).equalsIgnoreCase("")))&&(!((customerName.toString()).equalsIgnoreCase(""))))
			{
				bufInsSql.append(" AND a.deal_Id ='"+dealId+"' AND b.customer_name like'%"+customerName+"%'");
			  	bufInsSqlTempCount.append(" AND a.deal_Id ='"+dealId+"' AND b.customer_name like'%"+customerName+"%'");
			}
			if((!((dealId.toString()).equalsIgnoreCase(""))) || (!((customerName.toString()).equalsIgnoreCase(""))))
			{
				appendSQL=true;
			}
			if(appendSQL){
				bufInsSql.append(" AND");
				bufInsSqlTempCount.append(" AND");
				if((!((dealId.toString()).equalsIgnoreCase("")))) {
	    	         bufInsSql.append(" a.deal_Id ='"+dealId+"' AND");
	    	         bufInsSqlTempCount.append(" a.deal_Id ='"+dealId+"' AND");
	    	    	 appendSQL=true;
	    	      }
				if((!((customerName.toString()).equalsIgnoreCase("")))) {
	    	    	  bufInsSql.append(" b.customer_name like'%"+customerName+"%' AND");
	    	    	  bufInsSqlTempCount.append(" b.customer_name like'%"+customerName+"%' AND");
	    	    	  appendSQL=true;
	    	      }
				if((!(vo.getLbxUserId().equalsIgnoreCase("")))&& vo.getStage().equalsIgnoreCase("F") ) {
					 bufInsSql.append("a.MAKER_ID ='"+vo.getUserId()+"' AND");
					 bufInsSqlTempCount.append("a.MAKER_ID ='"+vo.getUserId()+"' AND");
	  	    	  appendSQL=true;
	  	      }
				}
				logger.info("In appendSQL true---- "+appendSQL);
				if(appendSQL)
				{					
					String tmp = bufInsSql.toString();
					String tmp1 = bufInsSqlTempCount.toString();
		            logger.info("In searchDealReassignment() ## tmp ## "+tmp);
		            logger.info("In searchDealReassignment() ## tmp1 ## "+tmp1);
		            logger.info("In appendSQL true----  in check index Of tmp"+tmp.lastIndexOf("AND") +"------"+(tmp.length()-3));
		            logger.info("In appendSQL true----  in check index Of tmp1"+tmp1.lastIndexOf("AND") +"------"+(tmp1.length()-3));
		            if(tmp.lastIndexOf("AND") == (tmp.length()-3) && tmp1.lastIndexOf("AND") == (tmp1.length()-3))
		            {
		            	logger.info("In appendSQL true----  in check index Of");
		            	tmp = (tmp).substring(0,(tmp.length()-4)).trim();
		            	tmp1 = (tmp1).substring(0,(tmp1.length()-4)).trim();
		            	logger.info("search Query...tmp. "+tmp);
		            	searchlist = ConnectionDAO.sqlSelect(tmp);
		            	count =Integer.parseInt(ConnectionDAO.singleReturn(tmp1.toString()));
		            }
		            else
		            {
		            	  logger.info("search Query...tmp."+tmp);
		                  searchlist = ConnectionDAO.sqlSelect(tmp); 
		            }
				}
				else
				{
					count =Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
					if((dealId==null && customerName==null) || ((dealId.toString()).equalsIgnoreCase("") && customerName.toString().equalsIgnoreCase("")) 
							  || vo.getCurrentPageLink()>1)
					{
						logger.info("current PAge Link no .................... "+vo.getCurrentPageLink());
						  if(vo.getCurrentPageLink()>1)
						  {
							  startRecordIndex = (vo.getCurrentPageLink()-1)*no;
							  endRecordIndex = no;
							  logger.info("startRecordIndex .................... "+startRecordIndex);
							  logger.info("endRecordIndex .................... "+endRecordIndex);
						  }
					}
					logger.info("search Query...else-------."+bufInsSql);
					searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());
				}
		          logger.info("searchDealReassignment: "+searchlist.size());
		          for(int i=0;i<searchlist.size();i++){
		          logger.info("searchDealReassignment: "+searchlist.get(i).toString());
		          ArrayList data=(ArrayList)searchlist.get(i);
		          if(data.size()>0){
	        	  CommonDealVo vo1= new CommonDealVo();
	        	  if(type.equalsIgnoreCase("P"))
	        	  {
	        		  vo1.setDealNo("<a href=dealReassignmentMaker.do?method=searchDealForReassignmentMaker&dealId="
	  					+ (CommonFunction.checkNull(data.get(4)).trim())+ "&dealNo="+(CommonFunction.checkNull(data.get(0)).trim())+"&customerName="+(CommonFunction.checkNull(data.get(1)).trim())+ ">"
	  					+ (CommonFunction.checkNull(data.get(0)).trim()) + "</a>");
	        	  }
	        	  if(type.equalsIgnoreCase("F"))
	        	  {
	        		  vo1.setDealNo("<a href=dealReassignmentAuthor.do?method=showEditDealDataAuthor&dealId="
	  	  					+ (CommonFunction.checkNull(data.get(4)).trim())+ "&dealNo="+(CommonFunction.checkNull(data.get(0)).trim())+"&customerName="+(CommonFunction.checkNull(data.get(1)).trim())+ ">"
	  	  					+ (CommonFunction.checkNull(data.get(0)).trim()) + "</a>");
	        	  }
	        	  vo1.setCustomername((CommonFunction.checkNull(data.get(1)).trim()));
	        	  vo1.setProduct((CommonFunction.checkNull(data.get(2)).trim()));
	        	  vo1.setScheme((CommonFunction.checkNull(data.get(3)).trim()));
	        	  vo1.setLbxDealNo((CommonFunction.checkNull(data.get(4)).trim()));
	        	  vo1.setTotalRecordSize(count);
	        	  vo1.setUserId((CommonFunction.checkNull(data.get(5)).trim()));
	        	  detailList.add(vo1);
	        }
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		finally
		{
			dealId=null;
			customerName=null;
		}
		return detailList;
	}	
	public ArrayList getOldDealMovementDetail(String txnid) 
	{
		logger.info("In getOldDealMovementDetail......Dao Impl"+txnid);
		ArrayList list=new ArrayList();
		try
		{
			StringBuilder query=new StringBuilder();
			query.append(" select s.STAGE_DESC,case when isnull(b.DEAL_FORWARDED,'')<>'' and iSnull(b.DEAL_FORWARD_USER,'')<>'' THEN 'COMPLETED'"); 
			query.append(" when isnull(b.DEAL_FORWARDED,'')='' and iSnull(b.DEAL_FORWARD_USER,'')='' then 'INITIATED' when b.DEAL_ACTION is null then 'PENDING' end as 'Deal Action',"); 
			query.append(" dbo.DATE_FORMAT(b.DEAL_RECEIVED,'"+dateFormatWithTime+"'),dbo.DATE_FORMAT(b.DEAL_FORWARDED,'"+dateFormatWithTime+"'), b.DEAL_FORWARD_USER,b.DEAL_RECEIVED_USER,b.DEAL_MOVEMENT_ID STAGE_SEQ_NO,");
			query.append(" iSnull(iif(b.DEAL_STAGE_ID='DC', deal.maker_id,iif(b.DEAL_STAGE_ID='BSA', bsa.maker_id, iif(b.DEAL_STAGE_ID='FAC', fac.maker_id,");
			query.append(" iif(b.DEAL_STAGE_ID='FFC', ffc.maker_id, iif(b.DEAL_STAGE_ID='QC', qc.maker_id,iif(b.DEAL_STAGE_ID='FVI', 'Please Check through Deal Movement','')))))),'')pending_with ");
			query.append(" from cr_deal_movement_dtl b");
			query.append(" join cr_stage_m s on s.STAGE_ID=b.DEAL_STAGE_ID ");
			query.append(" left join(select deal_id,'DC' stage, maker_id from cr_deal_dtl where deal_id="+CommonFunction.checkNull(txnid).trim()+" and rec_status='P') deal on deal.deal_id = b.deal_id and deal.stage = b.DEAL_STAGE_ID");
			query.append(" left join(select deal_id,'BSA' stage, maker_id from CR_DEAL_BUYER_SUPPLIER_DTL where deal_id="+CommonFunction.checkNull(txnid).trim()+" and rec_status='P') bsa on bsa.deal_id = b.deal_id and bsa.stage = b.DEAL_STAGE_ID");
			query.append(" left join(select deal_id,'FAC' stage, maker_id from CR_FINANCIAL_DATA_DTL where deal_id="+CommonFunction.checkNull(txnid).trim()+" and rec_status='P') fac on fac.deal_id = b.deal_id and fac.stage = b.DEAL_STAGE_ID");
			query.append(" left join(select deal_id,'FFC' stage, maker_id from CR_BANK_ANALYSIS_DTL where deal_id="+CommonFunction.checkNull(txnid).trim()+" and rec_status='P') ffc on ffc.deal_id = b.deal_id and ffc.stage = b.DEAL_STAGE_ID");
			query.append(" left join(select txn_id,'QC' stage, maker_id from cr_quality_check_dtl where txn_id="+CommonFunction.checkNull(txnid).trim()+" and TXN_TYPE='DC' and DECISION='P') qc on qc.txn_id = b.deal_id and qc.stage = b.DEAL_STAGE_ID");
			query.append(" WHERE b.deal_id='"+CommonFunction.checkNull(txnid).trim()+"' and b.rec_status='A'");
			query.append(" ORDER BY b.DEAL_MOVEMENT_ID");        
			logger.info("In getOldDealMovementDetail   :  "+query);
			DealMovementVo vo=null;
			ArrayList dealMovement = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getOldDealMovementDetail "+dealMovement.size());
			query=null;		
			for(int i=0;i<dealMovement.size();i++)
			{
				ArrayList data=(ArrayList)dealMovement.get(i);
				if(data.size()>0)
				{
					vo = new DealMovementVo();
					vo.setSeqNo((i+1)+"");
					vo.setStage((CommonFunction.checkNull(data.get(0))).trim());
					vo.setAction(CommonFunction.checkNull(data.get(1)));
					vo.setDealReceived((CommonFunction.checkNull(data.get(2))).trim());
					vo.setDealForwarded((CommonFunction.checkNull(data.get(3))).trim());
					vo.setDealForwardedUser((CommonFunction.checkNull(data.get(4))).trim());
					vo.setPendingWith((CommonFunction.checkNull(data.get(7))).trim());
					list.add(vo);
		}
			}
			}catch(Exception e){
				e.printStackTrace();
			}
		return list;
	}
	public String insertDealMovementEdit(DealMovementVo vo)
	{
		logger.info("In insertDealMovementEdit() method of CreditProcessingDAOImpl");	
		String status = "";
	    ArrayList<Object> in =new ArrayList<Object>();
		ArrayList<Object> out =new ArrayList<Object>();
		ArrayList outMessages = new ArrayList();

		StringBuilder s1 =new StringBuilder();
		StringBuilder s2 =new StringBuilder();
		try
		{
			in.add(CommonFunction.checkNull(vo.getLbxDealNo()).trim()); //I_DEAL_ID
			String date=CommonFunction.changeFormat(CommonFunction.checkNull(vo.getMakerDate()).trim());
	        if(date.trim().equalsIgnoreCase(""))
		    	date="0000-00-00";
		    in.add(date); //I_CURR_DATE
			in.add(CommonFunction.checkNull(vo.getMakerId()).trim()); //I_USER_ID
			logger.info(CommonFunction.checkNull(vo.getLbxDealNo()).trim());
			logger.info(CommonFunction.checkNull(vo.getMakerId()).trim());
		    out.add(s1);
		    out.add(s2);
		    outMessages=(ArrayList) ConnectionDAO.callSP("DEAL_REASSIGNMENT_MAKER",in,out);
		    s1.append(CommonFunction.checkNull(outMessages.get(0)));
		    s2.append(CommonFunction.checkNull(outMessages.get(1)));

	        logger.info("s1: "+s1);
	        logger.info("s2: "+s2);
	        if(s1.toString().equalsIgnoreCase("S"))
	        {
	        	status=s1.toString();
	        }
	        else if(s1.toString().equalsIgnoreCase("E"))
	        {
	        	status = s2.toString();
	        }
		}
		catch (Exception e) {
		// TODO Auto-generated method stub
			e.printStackTrace();
		}
		finally
		{
			s1=null;
			s2=null;
		}
		return status;
	}
	public ArrayList getNewDealMovementDetail(String txnid,String type) 
	{
		logger.info("In getNewDealMovementDetail......Dao Impl"+txnid);
		ArrayList list=new ArrayList();
		try
		{
			StringBuilder query=new StringBuilder();
			query.append(" select s.STAGE_DESC,case when isnull(b.DEAL_FORWARDED,'')<>'' and iSnull(b.DEAL_FORWARD_USER,'')<>'' THEN 'COMPLETED'"); 
			query.append(" when isnull(b.DEAL_FORWARDED,'')='' and iSnull(b.DEAL_FORWARD_USER,'')='' then 'INITIATED' when b.DEAL_ACTION is null then 'PENDING' end as 'Deal Action',"); 
			query.append(" dbo.DATE_FORMAT(b.DEAL_RECEIVED,'"+dateFormatWithTime+"'),dbo.DATE_FORMAT(b.DEAL_FORWARDED,'"+dateFormatWithTime+"'), b.DEAL_FORWARD_USER,b.DEAL_RECEIVED_USER,b.DEAL_MOVEMENT_ID STAGE_SEQ_NO");
			query.append(" from cr_deal_movement_dtl_edit b");
			query.append(" join cr_stage_m s on s.STAGE_ID=b.DEAL_STAGE_ID ");
			query.append(" WHERE b.deal_id='"+CommonFunction.checkNull(txnid).trim()+"' and b.rec_status='"+type+"'");
			query.append(" ORDER BY b.DEAL_MOVEMENT_ID");        
			logger.info("In getNewDealMovementDetail   :  "+query);
			DealMovementVo vo=null;
			ArrayList dealMovement = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getNewDealMovementDetail "+dealMovement.size());
			query=null;
			for(int i=0;i<dealMovement.size();i++)
			{
				ArrayList data=(ArrayList)dealMovement.get(i);
				if(data.size()>0)
				{
					vo = new DealMovementVo();
					vo.setStage((CommonFunction.checkNull(data.get(0))).trim());
					vo.setAction(CommonFunction.checkNull(data.get(1)));
					vo.setDealReceived((CommonFunction.checkNull(data.get(2))).trim());
					vo.setDealForwarded((CommonFunction.checkNull(data.get(3))).trim());
					vo.setDealForwardedUser((CommonFunction.checkNull(data.get(4))).trim());
					vo.setDealMovementId((CommonFunction.checkNull(data.get(6))).trim());
					list.add(vo);
				}
			}
			}catch(Exception e){
				e.printStackTrace();
			}
		return list;
	}
	
	public ArrayList<DealMovementVo> selectEditDealReassignmentData(String dealId, String checkId)
	{
		logger.info("In selectEditDealReassignmentData......Dao Impl");
		ArrayList list=new ArrayList();
		try
		{
			StringBuilder query=new StringBuilder();
			query.append(" select b.DEAL_STAGE_ID,b.status,b.deal_movement_id, b.deal_id"); 
			query.append(" from cr_deal_movement_dtl_edit b");
			query.append(" WHERE b.deal_id='"+CommonFunction.checkNull(dealId).trim()+"'");
			query.append(" and b.rec_status='P'");
			query.append(" and b.deal_MOVEMENT_ID='"+CommonFunction.checkNull(checkId).trim()+"'");        
			logger.info("In selectEditDealReassignmentData   :  "+query);
			DealMovementVo vo=null;
			ArrayList dealMovement = ConnectionDAO.sqlSelect(query.toString());
			logger.info("selectEditDealReassignmentData "+dealMovement.size());
			query=null;
			for(int i=0;i<dealMovement.size();i++)
			{
				ArrayList data=(ArrayList)dealMovement.get(i);
				if(data.size()>0)
				{
					vo = new DealMovementVo();
					vo.setStage((CommonFunction.checkNull(data.get(0))).trim());
					vo.setRecStatus(CommonFunction.checkNull(data.get(1)));
					vo.setDealMovementId(CommonFunction.checkNull(data.get(2)));
					vo.setLbxDealNo(CommonFunction.checkNull(data.get(3)));
					list.add(vo);
				}
			}
			}catch(Exception e){
				e.printStackTrace();
			}
		return list;
	
}

	public boolean saveDealReassignmentEdit(DealMovementVo vo)
	{
		boolean status = false; 
		StringBuilder queryUpdate=new StringBuilder();
		ArrayList qryList = new ArrayList();
		 queryUpdate.append("update cr_deal_movement_dtl_edit set REC_STATUS=?,STAGE_ACTION=?,REPLACE_USER_ID=?,ACTION_STAGE_ID=?,MAKER_ID=?,MAKER_DATE=");
		 queryUpdate.append(dbo);
		 queryUpdate.append("STR_TO_DATE(?,'"+dateFormatWithTime+"') + ' '+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9) ");
		 queryUpdate.append(" where DEAL_ID=?  AND DEAL_STAGE_ID=?  AND REC_STATUS='P'");
		PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
		insertPrepStmtObject.addString("P");
		if((CommonFunction.checkNull(vo.getStageAction())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString(vo.getStageAction().toString());
		if((CommonFunction.checkNull(vo.getLbxUserId())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString(vo.getLbxUserId().toString());
		if((CommonFunction.checkNull(vo.getInitiateStage())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString(vo.getInitiateStage().toString());
		if((CommonFunction.checkNull(vo.getMakerId())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString(vo.getMakerId().toString());
		if((CommonFunction.checkNull(vo.getMakerDate())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString(vo.getMakerDate().toString());
		if((CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString(vo.getLbxDealNo().toString());
		if((CommonFunction.checkNull(vo.getInitiateStage())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else if((CommonFunction.checkNull(vo.getInitiateStage())).trim().equalsIgnoreCase("MDV"))
			insertPrepStmtObject.addString("POC");
		else if((CommonFunction.checkNull(vo.getInitiateStage())).trim().equalsIgnoreCase("POC"))
			insertPrepStmtObject.addString("POC");
		else
			insertPrepStmtObject.addString(vo.getInitiateStage().toString());
		insertPrepStmtObject.setSql(queryUpdate.toString());
		logger.info("IN saveDealReassignmentEdit() update query1 ### "+insertPrepStmtObject.printQuery());
		qryList.add(insertPrepStmtObject);
		logger.info("In saveDealReassignmentEdit ........ update query: "+queryUpdate);
		try
		{
			status =ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			logger.info("In saveDealReassignmentEdit.........update status: "+status);
		}
		catch(Exception e){
			e.printStackTrace();
		}	
		return status;
	}
	public ArrayList getAllInitiateWorkFlowStage(String dealId) {
		ArrayList<CodeDescVo> list=new ArrayList<CodeDescVo>();
		try{
			StringBuilder query=new StringBuilder();
		    	 query.append("select DISTINCT W.deal_stage_id,S.STAGE_DESC from cr_deal_movement_dtl w ");
		    	 query.append("join cr_stage_m S on  W.deal_stage_id=S.STAGE_ID AND W.deal_stage_id NOT IN('UNC','DD','CBL','QC') and isnull(w.DEAL_FORWARDED,'')='' ");
				 query.append(" and  isnull(DEAL_FORWARD_USER,'')='' and  w.deal_id='"+CommonFunction.checkNull(dealId).trim()+"' and w.rec_status='A' ");
		     logger.info("query in getAllInitiateWorkFlowStage:--"+query.toString());
		ArrayList getworkFlowStage = ConnectionDAO.sqlSelect(query.toString());
		query=null;
		for(int i=0;i<getworkFlowStage.size();i++){
			ArrayList data=(ArrayList)getworkFlowStage.get(i);
			if(data.size()>0)	{
			CodeDescVo branchVo = new CodeDescVo();
			branchVo.setId((CommonFunction.checkNull(data.get(0))).trim());
			branchVo.setName((CommonFunction.checkNull(data.get(1))).trim());
			list.add(branchVo);
			if((CommonFunction.checkNull(data.get(0))).trim().equalsIgnoreCase("POC"))
			{
				branchVo = new CodeDescVo();
				branchVo.setId("MDV");
				branchVo.setName("MANUAL DEVIATION");
				list.add(branchVo);	
			}
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}	
	public ArrayList getStageDetails(String dealId) {
		ArrayList<DealMovementVo> list=new ArrayList<DealMovementVo>();
		try{
			StringBuilder query=new StringBuilder();
		    	 query.append("select deal_stage_id,Stage_action,csm.stage_desc,case Stage_action when 'UR' then 'User ReAssignment' when 'SC' then 'Stage Correction' else '' end as Stage_action,w.replace_user_id,sec.user_name from cr_deal_movement_dtl_edit w join cr_stage_m csm on csm.stage_id=w.deal_stage_id ");
		    	 query.append(" left join sec_user_m sec on w.replace_user_id=sec.user_id ");
		    	 query.append(" where  deal_id='"+CommonFunction.checkNull(dealId).trim()+"' and w.rec_status='F' ");
		     logger.info("query in getStageDetails:--"+query.toString());
		ArrayList getworkFlowStage = ConnectionDAO.sqlSelect(query.toString());
		query=null;
		for(int i=0;i<getworkFlowStage.size();i++){
			ArrayList data=(ArrayList)getworkFlowStage.get(i);
			if(data.size()>0)	{
				DealMovementVo branchVo = new DealMovementVo();
			branchVo.setInitiateStage((CommonFunction.checkNull(data.get(0))).trim());
			branchVo.setStageAction((CommonFunction.checkNull(data.get(1))).trim());
			logger.info("StageAction Value--->>>"+branchVo.getStageAction());
			branchVo.setInitiateStageDesc((CommonFunction.checkNull(data.get(2))).trim());
			branchVo.setStageActionDesc((CommonFunction.checkNull(data.get(3))).trim());
			branchVo.setLbxUserId((CommonFunction.checkNull(data.get(4))).trim());
			branchVo.setUserName((CommonFunction.checkNull(data.get(5))).trim());
			list.add(branchVo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}	
	public String saveReassignDealAuthor(DealMovementVo vo,String dealId)
	{
		    String status="";
			ArrayList<Object> in =new ArrayList<Object>();
			ArrayList<Object> out =new ArrayList<Object>();
			ArrayList outMessages = new ArrayList();
			StringBuilder s1=new StringBuilder();
			StringBuilder s2=new StringBuilder();
			String decision=CommonFunction.checkNull(vo.getDecision());
			String authorRemarks=CommonFunction.checkNull(vo.getAuthorRemarks());
			logger.info("decision ------->>>"+decision);
			logger.info("authorRemarks---->>on daoImp method"+authorRemarks);
			try 
			{			
				logger.info("In collectDocuments proc( saveReassignDealAuthor )");
				logger.info("In saveReassignDealAuthor  dealId: "+dealId);
				in.add(dealId);
				String date=CommonFunction.changeFormat(CommonFunction.checkNull(vo.getAuthorDate()).trim());
		        if(date.trim().equalsIgnoreCase(""))
			    	date="0000-00-00";
			    in.add(date); //I_CURR_DATE
				in.add(CommonFunction.checkNull(vo.getAuthorId()).trim()); //I_USER_ID
				in.add(decision);
				in.add(authorRemarks);
				out.add(s1);
				out.add(s2);
				outMessages=(ArrayList) ConnectionDAO.callSP("REASSIGNMENT_AUTHOR",in,out);
				if(outMessages!=null && outMessages.size()>0)
				{
					s1.append(CommonFunction.checkNull(outMessages.get(0)));
					if(s1!=null && s1.toString().equalsIgnoreCase("S"))
					{
						status=s1.toString();
						logger.info("Procedure s1----"+s1);
					}
					else if(s1!=null && s1.toString().equalsIgnoreCase("E"))
					{
						s2.append(CommonFunction.checkNull(outMessages.get(1)));
						logger.info("Procedure Error Message----"+s2);
						status=s2.toString();
					}
				}
			} 
			catch (Exception e) 
			{e.printStackTrace();}
			finally
			{
				s1=null;
				s2=null;
				in=null;
				out=null;
				outMessages=null;
				dealId=null;
			}
		return status ;
	}
	public String validateSaveReassignDeal(String dealId)
	{
		    String status="";
			ArrayList<Object> in =new ArrayList<Object>();
			ArrayList<Object> out =new ArrayList<Object>();
			ArrayList outMessages = new ArrayList();
			StringBuilder s1=new StringBuilder();
			StringBuilder s2=new StringBuilder();
			try 
			{			
				logger.info("In validateSaveReassignDeal");
				logger.info("In validateSaveReassignDeal  dealId: "+dealId);
				in.add(dealId);
				out.add(s1);
				out.add(s2);
				outMessages=(ArrayList) ConnectionDAO.callSP("VALIDATION_REASSIGNMENT_MAKER",in,out);
				if(outMessages!=null && outMessages.size()>0)
				{
					s1.append(CommonFunction.checkNull(outMessages.get(0)));
					if(s1!=null && s1.toString().equalsIgnoreCase("S"))
					{
						status=s1.toString();
						logger.info("Procedure s1----"+s1);
					}
					else if(s1!=null && s1.toString().equalsIgnoreCase("E"))
					{
						s2.append(CommonFunction.checkNull(outMessages.get(1)));
						logger.info("Procedure Error Message----"+s2);
						status=s2.toString();
					}
				}
			} 
			catch (Exception e) 
			{e.printStackTrace();}
			finally
			{
				s1=null;
				s2=null;
				in=null;
				out=null;
				outMessages=null;
				dealId=null;
			}
		return status ;
	}
@Override
public boolean getDesionfromMaker(String dealId) 
	{
		boolean status=false;
		logger.info("Deal No In creditProcessingDaoImpl getDesion :-"+dealId);
		StringBuffer query=new StringBuffer();
		query.append("Update CR_DEAL_REPROCESSING_DTL set REC_STATUS='F' where DEAL_ID ='"+dealId+"'  ");
		ArrayList list=new ArrayList();
		list.add(query);
		try
					{
						status=ConnectionDAO.sqlInsUpdDelete(list);
						logger.info("In creditProcessingDaoImpl getRejectedDealNo"+query.toString());
					}
				catch(Exception e)
					{
						e.printStackTrace();
					}
				finally
					{
						query=null;
						list.clear();
						list=null;
					}
	return status;
}
@Override
public ArrayList getRejectedDealNo(String dealId, String makerId,String businessDate)
{
logger.info("Deal No In creditProcessingDaoImpl getRejectedDealNo :-"+dealId);
ArrayList list=new ArrayList();
int count = 0;
int count1 = 0;
try{
		StringBuffer query=new StringBuffer();
		StringBuffer bufInsSqlTempCount = new StringBuffer();
		StringBuffer bufInsSqlTempCount1 = new StringBuffer();
		bufInsSqlTempCount1.append("SELECT count('DEAL_ID') FROM CR_DEAL_REPROCESSING_DTL  "
		 		+ "WHERE  DEAL_ID ='"+dealId+"'");
		count1 =Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount1.toString()));
		logger.info("Count1 ================="+count1);
		logger.info("In bufInsSqlTempCount1 ===="+bufInsSqlTempCount1.toString());
		query.append("SELECT DISTINCT D.DEAL_NO, C.CUSTOMER_NAME, D.MAKER_ID, D.Deal_ID FROM CR_DEAL_DTL D "
	 		+ "LEFT JOIN CR_DEAL_CUSTOMER_M C ON D.DEAL_CUSTOMER_ID = C.CUSTOMER_ID "
	 		+ "LEFT JOIN CR_DEAL_REPROCESSING_DTL A ON D.DEAL_ID = A.DEAL_ID "
	 		+ "WHERE D.REC_STATUS = 'X' AND D.DEAL_ID ='"+dealId+"' ");
		if(count1 > 0)
		{
			query.append(" AND A.REC_STATUS NOT IN ('X','F')");
		}
		logger.info("In query ========="+query.toString());
		bufInsSqlTempCount.append("SELECT count('D.DEAL_NO') FROM CR_DEAL_DTL D "
		 		+ "LEFT JOIN CR_DEAL_CUSTOMER_M C ON D.DEAL_CUSTOMER_ID = C.CUSTOMER_ID "
		 		+ "LEFT JOIN CR_DEAL_REPROCESSING_DTL A ON D.DEAL_ID = A.DEAL_ID "
		 		+ "WHERE D.REC_STATUS = 'X' AND D.DEAL_ID ='"+dealId+"' ");
		if(count1 > 0)
		{
			bufInsSqlTempCount.append(" AND A.REC_STATUS NOT IN ('X','F')");
		}
		logger.info("bufInsSqlTempCount **************************** : "+bufInsSqlTempCount.toString());
		count =Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
		logger.info("Count*******************"+count);
		ArrayList rejectedDealList = ConnectionDAO.sqlSelect(query.toString());
		query=null;
		ReprocessingDealVo dcType=new ReprocessingDealVo();
		for(int i=0;i<rejectedDealList.size();i++)
			{
				ArrayList sublist = (ArrayList) rejectedDealList.get(i);
				if(sublist.size()>0)
					{
						dcType.setDealId((CommonFunction.checkNull(sublist.get(3))).trim());
						dcType.setDealNo1((CommonFunction.checkNull(sublist.get(0))).trim());
						dcType.setDealNo("<a href=# onclick="+"showPopUp("+StringEscapeUtils.escapeHtml(CommonFunction.checkNull(CommonFunction.checkNull(sublist.get(3)))).trim()+")"+" >"+StringEscapeUtils.escapeHtml(CommonFunction.checkNull(sublist.get(0))) +"</a>");
						dcType.setCustomername((CommonFunction.checkNull(sublist.get(1))).trim());
						dcType.setUserName((CommonFunction.checkNull(sublist.get(2))).trim());
						dcType.setTotalRecordSize(count);
						list.add(dcType);
					}
			}
		logger.info("Deal ID ========"+dcType.getDealId());
		logger.info("Deal NO ========"+dcType.getDealNo1());
		if(count1==0)
		{
			boolean status=false;
			ArrayList qryList = new ArrayList();
			StringBuffer bufInsUpdSql = new StringBuffer();
			PrepStmtObject  insertPrepStmtObject =  new PrepStmtObject();
			logger.info("Deal ID1 ========"+dcType.getDealId());
			logger.info("Deal NO1 ========"+dcType.getDealNo1());
				bufInsUpdSql.append("insert into CR_DEAL_REPROCESSING_DTL(DEAL_ID,deal_no,MAKER_ID,rec_status)");
			bufInsUpdSql.append(" values( ");
			bufInsUpdSql.append(" ?," );//DEAL_ID
			bufInsUpdSql.append(" ?," );//deal_no
				bufInsUpdSql.append(" ?," );//Maker_id
			bufInsUpdSql.append(" ?)" );//Rec_Status
			if(CommonFunction.checkNull((dcType.getDealId()).trim()).equalsIgnoreCase(""))
		    insertPrepStmtObject.addNull();
		    else
		    insertPrepStmtObject.addString((dcType.getDealId().trim()));
			if(CommonFunction.checkNull((dcType.getDealNo1()).trim()).equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
			else
			insertPrepStmtObject.addString((dcType.getDealNo1().trim()));
				if(CommonFunction.checkNull((makerId).trim()).equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
					else
					insertPrepStmtObject.addString((makerId.trim()));
			insertPrepStmtObject.addString("P");
			insertPrepStmtObject.setSql(bufInsUpdSql.toString());
			qryList.add(insertPrepStmtObject);
			status=ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
			logger.info("bufInsUpdSql **************************** : "+bufInsUpdSql.toString());
		} 
	}
	catch(Exception e)
		{
			e.printStackTrace();
		}
return list;
}
@Override
public ArrayList getRejectedDealNoAuthor(String dealId) 
{
logger.info("Deal No In creditProcessingDaoImpl getRejectedDealNoAuthor :-"+dealId);
ArrayList list=new ArrayList();
int count = 0;
try{
		StringBuffer query=new StringBuffer();
		StringBuffer bufInsSqlTempCount = new StringBuffer();
		query.append("SELECT DISTINCT D.DEAL_NO, C.CUSTOMER_NAME, D.MAKER_ID, D.Deal_ID FROM CR_DEAL_DTL D "
	 		+ "LEFT JOIN CR_DEAL_CUSTOMER_M C ON D.DEAL_CUSTOMER_ID = C.CUSTOMER_ID "
	 		+ "LEFT JOIN CR_DEAL_REPROCESSING_DTL A ON D.DEAL_ID = A.DEAL_ID "
	 		+ "WHERE D.REC_STATUS = 'X' AND A.REC_STATUS = 'F' AND D.DEAL_ID ='"+dealId+"' ");
		bufInsSqlTempCount.append("SELECT count('D.DEAL_NO') FROM CR_DEAL_DTL D "
		 		+ "LEFT JOIN CR_DEAL_CUSTOMER_M C ON D.DEAL_CUSTOMER_ID = C.CUSTOMER_ID "
		 		+ "LEFT JOIN CR_DEAL_REPROCESSING_DTL A ON D.DEAL_ID = A.DEAL_ID "
		 		+ "WHERE D.REC_STATUS = 'X' AND A.REC_STATUS = 'F' AND D.DEAL_ID ='"+dealId+"' ");
		logger.info("bufInsSqlTempCount **************************** : "+bufInsSqlTempCount.toString());
		count =Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
		logger.info("In creditProcessingDaoImpl getRejectedDealNo"+query.toString());
		logger.info("Count*******************"+count);
		ArrayList rejectedDealList = ConnectionDAO.sqlSelect(query.toString());
		query=null;
		for(int i=0;i<rejectedDealList.size();i++)
			{
				ArrayList sublist = (ArrayList) rejectedDealList.get(i);
				if(sublist.size()>0)
					{
						ReprocessingDealVo dcType=new ReprocessingDealVo();
						dcType.setDealId((CommonFunction.checkNull(sublist.get(0))).trim());
						dcType.setDealNo("<a href=# onclick="+"showPopUp("+StringEscapeUtils.escapeHtml(CommonFunction.checkNull(CommonFunction.checkNull(sublist.get(3)))).trim()+")"+" >"+StringEscapeUtils.escapeHtml(CommonFunction.checkNull(sublist.get(0))) +"</a>");
						dcType.setCustomername((CommonFunction.checkNull(sublist.get(1))).trim());
						dcType.setUserName((CommonFunction.checkNull(sublist.get(2))).trim());
						dcType.setTotalRecordSize(count);
						list.add(dcType);
					}
			}
	}
	catch(Exception e)
		{
			e.printStackTrace();
		}
return list;
}
@Override
public String getDesionfromAuthor(ReprocessingDealVo vo,String dealId, String decision) 
{
	boolean status=false;
	logger.info("in getDesionfromAuthor ");
	logger.info("Deal No In creditProcessingDaoImpl getDesion :-"+dealId);
	logger.info("Decision  In creditProcessingDaoImpl getDesion :-"+decision);
	logger.info("In collectDocuments proc( saveReassignDealAuthor )");
	logger.info("In saveReassignDealAuthor  dealId: "+dealId);
	//ReprocessingDealVo vo=new ReprocessingDealVo();
	String statusProc="";
	String s1="";
	String s2="";
	ArrayList<Object> in =new ArrayList<Object>();
	ArrayList<Object> out =new ArrayList<Object>();
	ArrayList outMessages = new ArrayList();
	in.add(dealId);
	in.add(CommonFunction.checkNull(vo.getUserId()).trim()); //I_USER_ID
	String date=CommonFunction.changeFormat(CommonFunction.checkNull(vo.getCurrentDate()).trim());
	logger.info("date in daoImp metho"+date);
    if(date.trim().equalsIgnoreCase(""))
    	date="0000-00-00";
    in.add(date); //I_CURR_DATE
	
	in.add(decision);
	//in.add(authorRemarks);

	out.add(s1);
	out.add(s2);
	try {
		outMessages=(ArrayList) ConnectionDAO.callSP("DEAL_REPROCESS",in,out);
		s1=CommonFunction.checkNull(outMessages.get(0));
		s2=CommonFunction.checkNull(outMessages.get(1));
	    logger.info("s1  : "+s1);
	    logger.info("s2  : "+s2);	
	    if(s1.equalsIgnoreCase("S"))
		{
			statusProc=s1;
			status=true;
			logger.info("Procedure Error Message----"+s2);
		}
		else
		{
			statusProc=s2;
			logger.info("Procedure Error Message----"+s2);
		}	
	
	
	}catch (Exception e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	finally

	{
		s1=null;
		s2=null;
		in=null;
		out=null;
		outMessages=null;
		
		dealId=null;
		
	
	}

	
	
	if(CommonFunction.checkNull(decision).equalsIgnoreCase("A"))
		{
			StringBuffer query=new StringBuffer();
			query.append("Update CR_DEAL_DTL set REC_STATUS='P' where DEAL_ID ='"+dealId+"'  ");
			ArrayList list=new ArrayList();
			list.add(query);
			try
				{
					status=ConnectionDAO.sqlInsUpdDelete(list);
					logger.info("In creditProcessingDaoImpl getRejectedDealNo"+query.toString());
				}
			catch(Exception e)
				{
					e.printStackTrace();
				}
			finally
				{
					query=null;
					list.clear();
					list=null;
				}
		}
	else if(CommonFunction.checkNull(decision).equalsIgnoreCase("P"))
		{
			StringBuffer query=new StringBuffer();
			query.append("Update CR_DEAL_REPROCESSING_DTL set REC_STATUS='P' where DEAL_ID ='"+dealId+"'  ");
			ArrayList list=new ArrayList();
			list.add(query);
			try
				{
					status=ConnectionDAO.sqlInsUpdDelete(list);
					logger.info("In creditProcessingDaoImpl getRejectedDealNo"+query.toString());
				}
			catch(Exception e)
				{
					e.printStackTrace();
				}
			finally
				{
					query=null;
					list.clear();
					list=null;
				}
		}
	else if(CommonFunction.checkNull(decision).equalsIgnoreCase("X"))
		{
			StringBuffer query=new StringBuffer();
			query.append("Update CR_DEAL_REPROCESSING_DTL set REC_STATUS='X' where DEAL_ID ='"+dealId+"'  ");
			ArrayList list=new ArrayList();
			list.add(query);
			try
				{
					status=ConnectionDAO.sqlInsUpdDelete(list);
					logger.info("In creditProcessingDaoImpl getRejectedDealNo"+query.toString());
				}
			catch(Exception e)
				{
					e.printStackTrace();
				}
			finally
				{
					query=null;
					list.clear();
					list=null;
				}
		}
	
	return statusProc;
}
public ArrayList getworkFlowStages(String dealIdfromCM,String funId) {
		ArrayList<CodeDescVo> list=new ArrayList<CodeDescVo>();
		try{
			int Id = 0;
			String qualityCheckStatus="N";
			funId=CommonFunction.checkNull(funId).trim();
			if(CommonFunction.checkNull(funId).trim().equalsIgnoreCase(""))
				funId="0";
			Id = Integer.parseInt(funId);
			if(Id!=4000103)
			{
				 String qualityCheckStatusQuery="SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='EDITABLE_QUALITY_CHECK_DEAL'";
				 logger.info("In searchDealForQualityCheck()  :  "+ qualityCheckStatusQuery);
				 qualityCheckStatus=ConnectionDAO.singleReturn(qualityCheckStatusQuery);
			}	
			StringBuilder query=new StringBuilder();
			 if(CommonFunction.checkNull(qualityCheckStatus).equalsIgnoreCase("")||CommonFunction.checkNull(qualityCheckStatus).equalsIgnoreCase("N"))
		     {
		    	 query.append("SELECT DISTINCT W.STAGE_ID,S.STAGE_DESC FROM cr_stage_workflow_m W join cr_stage_m S on W.STAGE_ID=S.STAGE_ID left join cr_deal_movement_dtl cdmd on W.stage_ID=cdmd.deal_stage_id  WHERE isnull(cdmd.DEAL_FORWARDED,'')<>'' and isnull(cdmd.DEAL_FORWARD_USER,'')<>'' and cdmd.rec_status<>'X' AND W.PRODUCT_ID=(select DEAL_PRODUCT_CATEGORY from cr_deal_loan_dtl where DEAL_ID='"+dealIdfromCM+"')  AND S.REC_STATUS='A' AND W.STAGE_ID NOT IN('DD','UNC') and cdmd.DEAL_ID='"+dealIdfromCM+"' ");
		     }
		     else
		     {
		    	 query.append("SELECT DISTINCT W.STAGE_ID,S.STAGE_DESC FROM cr_stage_workflow_m W join cr_stage_m S on W.STAGE_ID=S.STAGE_ID left join cr_deal_movement_dtl cdmd on W.stage_ID=cdmd.deal_stage_id  WHERE isnull(cdmd.DEAL_FORWARDED,'')<>'' and isnull(cdmd.DEAL_FORWARD_USER,'')<>'' AND W.PRODUCT_ID=(select DEAL_PRODUCT_CATEGORY from cr_deal_loan_dtl where DEAL_ID='"+dealIdfromCM+"')  AND S.REC_STATUS='A' AND W.STAGE_ID NOT IN('DD','UNC','DC')");
		     }
		     logger.info("query in getworkFlowStage:--"+query.toString());
		ArrayList getworkFlowStage = ConnectionDAO.sqlSelect(query.toString());
		query=null;
		for(int i=0;i<getworkFlowStage.size();i++){
			ArrayList data=(ArrayList)getworkFlowStage.get(i);
			if(data.size()>0)	{
			CodeDescVo branchVo = new CodeDescVo();
			branchVo.setId((CommonFunction.checkNull(data.get(0))).trim());
			branchVo.setName((CommonFunction.checkNull(data.get(1))).trim());
			list.add(branchVo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}
	public String saveDealSendBackDetails(Object ob)
	{
		DealMovementVo vo = (DealMovementVo)ob;
		logger.info("In save & update Deal Send back Status......DealId:  "+vo.getLbxDealNo()+"CURRENT_STAGE:  "+vo.getStage()+"SEND_BACK_STAGE:  "+vo.getSendBackStage()+"Reprocessing flag:  "+vo.getRpStageFlag()+"Remarks:  "+vo.getRemarks()+"UserId:  "+vo.getUserId()+" Send Back Date: "+vo.getSendBackDate());
		CallableStatement cst=null;
		String statusProc="";
		String[] sendBackStageList=CommonFunction.checkNull(vo.getSendBackStage()).toString().trim().split("\\|");
		boolean status=false;
		try 
		{
			for(int i=0;i<sendBackStageList.length;i++)
			{
				vo.setSendBackStage(sendBackStageList[i]);
				logger.info("sendBackStageList::::::"+sendBackStageList[i]);	
			ArrayList<Object> in =new ArrayList<Object>();
			ArrayList<Object> out =new ArrayList<Object>();
			ArrayList outMessages = new ArrayList();
			String s1="";
			String s2="";
			in.add(vo.getLbxDealNo());
			in.add(CommonFunction.checkNull(vo.getStage()));
			in.add(vo.getSendBackStage());
			in.add(vo.getRpStageFlag());
			in.add(vo.getRemarks());
			in.add(vo.getUserId());
			String date=CommonFunction.changeFormat(vo.getSendBackDate());
			in.add(date);
			out.add(s1);
			out.add(s2);
			logger.info("DEAL_SEND_BACK ("+in.toString()+","+out.toString()+")");
			outMessages=(ArrayList) ConnectionDAO.callSP("DEAL_SEND_BACK",in,out);
			s1=CommonFunction.checkNull(outMessages.get(0));
			s2=CommonFunction.checkNull(outMessages.get(1));
		    logger.info("s1  : "+s1);
		    logger.info("s2  : "+s2);	
		    if(s1.equalsIgnoreCase("S"))
			{
				statusProc=s1;
				status=true;
				logger.info("Procedure Error Message----"+s2);
			}
			else
			{
				statusProc=s2;
				logger.info("Procedure Error Message----"+s2);
			}		
		     in.clear();
		     in=null;
		     out.clear();
		     out=null;
			}
		} catch (Exception e)
		{e.printStackTrace();}
		finally{
			vo=null;
			ob=null;
		}
		return statusProc;
	}
	@Override

	
	 public int getAssetCost(CpInsuranceVo vo, String dealId)
	  {
	    int dealAssetCost = 0;
	    try {
	      String assetCost = new StringBuilder().append(" select round(deal_asset_cost) from cr_deal_loan_dtl where deal_id='").append(dealId).append("' ").toString();

	      String dealAssetCostValue = ConnectionDAO.singleReturn(assetCost);
	      logger.info(new StringBuilder().append("dealAssetCostValue:::").append(dealAssetCostValue).toString());
	      if (dealAssetCostValue != "")
	      {
	        dealAssetCost = Integer.parseInt(dealAssetCostValue);
	      }
	      else
	      {
	        dealAssetCost = 0;
	      }
	    }
	    catch (Exception e) {
	      e.printStackTrace();
	    }
	    return dealAssetCost;
	  }
	
	@Override
	  public boolean updateDealLoan(CpInsuranceVo vo, String dealId)
	  {
	    boolean status = false;
	    String insurance_premium = "";
	    int sum_assure_deal_loan1 = 0;
	    int assetCostAmount = 0;
	    int premium = 0;
	    int total = 0;
	    int marginAmt = 0;
	    double marginPerct = 0.0D;

	    String premiumFinanced = CommonFunction.checkNull(vo.getPremiumFinanced());
	    String qry1 = new StringBuilder().append("select deal_loan_id from cr_deal_loan_dtl where deal_id='").append(dealId).append("'").toString();
	    String dealLoanId = ConnectionDAO.singleReturn(qry1);
	    if (dealLoanId != "")
	    {
	      String qry2 = new StringBuilder().append("select round(sum(insurance_premium)) from cr_insurance_dtl  where amount_to_be_financed='Y' and  deal_loan_id='").append(dealLoanId).append("' ").toString();
	      insurance_premium = ConnectionDAO.singleReturn(qry2);

	      if (insurance_premium == "")
	      {
	        insurance_premium = "0";
	        premium = Integer.parseInt(insurance_premium);
	      }
	      else
	      {
	        premium = Integer.parseInt(insurance_premium);
	      }

	    }
	    else
	    {
	      insurance_premium = "0";
	      premium = Integer.parseInt(insurance_premium);
	    }

	    String sum_loan_deal_amount_new = new StringBuilder().append(" select round(ifnull(DEAL_LOAN_AMOUNT_NEW,DEAL_LOAN_AMOUNT)) from cr_deal_loan_dtl where deal_id='").append(dealId).append("' ").toString();
	    String sum_assure_deal_loan_new = ConnectionDAO.singleReturn(sum_loan_deal_amount_new);
	    logger.info(new StringBuilder().append("sum_assure_deal_loan:::").append(sum_loan_deal_amount_new).toString());
	    if (sum_loan_deal_amount_new != "")
	    {
	      sum_assure_deal_loan1 = Integer.parseInt(sum_assure_deal_loan_new);
	    }
	    else
	    {
	      sum_assure_deal_loan1 = 0;
	    }

	    total = sum_assure_deal_loan1 + premium;

	    String assetCost = new StringBuilder().append(" select round(ifnull(deal_asset_cost,0)) from cr_deal_loan_dtl where  deal_id='").append(dealId).append("' ").toString();
	    String assetCostValue = ConnectionDAO.singleReturn(assetCost);
	    logger.info(new StringBuilder().append("assetCostValue:::").append(assetCostValue).toString());
	    if (assetCost != "")
	    {
	      assetCostAmount = Integer.parseInt(assetCostValue);
	    }
	    else
	    {
	      assetCostAmount = 0;
	    }

	    marginAmt = assetCostAmount - total;
	    logger.info(new StringBuilder().append("marginAmt::").append(marginAmt).toString());

	    if (assetCostAmount > 0)
	      marginPerct = marginAmt * 100.0D / assetCostAmount;
	    else {
	      marginPerct = 0.0D;
	    }
	    logger.info(new StringBuilder().append("marginPerct::").append(marginPerct).toString());

	    ArrayList qryList = new ArrayList();
	    PrepStmtObject insertPrepStmtObject = null;
	    insertPrepStmtObject = new PrepStmtObject();
	    StringBuilder bufInsSql = null;
	    bufInsSql = new StringBuilder();
	    try
	    {
	      bufInsSql.append("UPDATE cr_deal_loan_dtl SET insurance_premium=?, DEAL_LOAN_AMOUNT_NEW=? , deal_loan_amount=?,deal_margin_amount=?,deal_margin_rate=? where DEAL_ID=? and deal_loan_id=? ");

	      if (CommonFunction.checkNull(Integer.valueOf(premium)).equalsIgnoreCase(""))
	        insertPrepStmtObject.addNull();
	      else {
	        insertPrepStmtObject.addInt(premium);
	      }

	      if (CommonFunction.checkNull(Integer.valueOf(sum_assure_deal_loan1)).equalsIgnoreCase(""))
	        insertPrepStmtObject.addNull();
	      else {
	        insertPrepStmtObject.addInt(sum_assure_deal_loan1);
	      }
	      if (CommonFunction.checkNull(Integer.valueOf(total)).equalsIgnoreCase(""))
	        insertPrepStmtObject.addNull();
	      else {
	        insertPrepStmtObject.addInt(total);
	      }
	      if (CommonFunction.checkNull(Integer.valueOf(marginAmt)).equalsIgnoreCase(""))
	        insertPrepStmtObject.addNull();
	      else {
	        insertPrepStmtObject.addInt(marginAmt);
	      }

	      if (CommonFunction.checkNull(Double.valueOf(marginPerct)).equalsIgnoreCase(""))
	        insertPrepStmtObject.addNull();
	      else {
	        insertPrepStmtObject.addFloat(marginPerct);
	      }
	      if (CommonFunction.checkNull(dealId).equalsIgnoreCase(""))
	        insertPrepStmtObject.addNull();
	      else {
	        insertPrepStmtObject.addString(dealId.toUpperCase().trim());
	      }

	      if (CommonFunction.checkNull(dealLoanId).equalsIgnoreCase(""))
	        insertPrepStmtObject.addNull();
	      else {
	        insertPrepStmtObject.addString(dealLoanId.toUpperCase().trim());
	      }

	      insertPrepStmtObject.setSql(bufInsSql.toString());

	      logger.info(new StringBuilder().append("IN insertCpInsurance() update cr_deal_loan_dtl query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

	      qryList.add(insertPrepStmtObject);

	      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);

	      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);

	      logger.info(new StringBuilder().append("In insertCpInsurance......................").append(status).toString());
	    }
	    catch (Exception e)
	    {
	      e.printStackTrace();
	    }
	    finally {
	      qryList.clear();
	      qryList = null;
	    }

	    return status;
	  }
	@Override
	public String getinsuId(CpInsuranceVo vo,String dealId);
	{

	    String insuranceId = "";
	    String cust = vo.getCustId();
	    String custList = "";
	    custList = cust.replace("|", ",");
	    char[] chars = custList.toCharArray();
	    String s1 = "";
	    for (int i = 0; i < chars.length - 1; i++)
	    {
	      s1 = new StringBuilder().append(s1).append(chars[i]).toString();
	    }
	    logger.info(new StringBuilder().append("s1::::::").append(s1).toString());
	    String newCust = s1.replace(",", "|");
	    logger.info(new StringBuilder().append("newCust::::::").append(newCust).toString());
	    String insuranceProvider = vo.getInsuranceProvider();
	    String insuranceProduct = vo.getInsuranceProduct();
	    if (insuranceProduct.contains("|"))
	    {
	      insuranceProduct = insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
	      vo.setInsuranceProduct(insuranceProduct);
	    }
	    logger.info(new StringBuilder().append("aman insuranceProvider::::").append(insuranceProvider).toString());
	    logger.info(new StringBuilder().append("aman insuranceProduct::::").append(insuranceProduct).toString());
	    try {
	      String insurance_id = new StringBuilder().append(" select insurance_id from cr_insurance_dtl where deal_id='").append(dealId).append("' and charge_id= '").append(insuranceProvider).append("'  and product_id='").append(insuranceProduct).append("' and customer_id ='").append(newCust).append("'  ").toString();
	      insuranceId = ConnectionDAO.singleReturn(insurance_id);
	      logger.info(new StringBuilder().append("insuranceId:::").append(insuranceId).toString());
	    }
	    catch (Exception e)
	    {
	      e.printStackTrace();
	    }
	    return insuranceId;
	  
	}
	
	
	@Override
	  public int getsumAssureDealLoan1(CpInsuranceVo vo, String dealId) {
		    int sum_assure_deal_loan1 = 0;
		    try {
		      String sum_loan_deal_amount = new StringBuilder().append(" select round(deal_loan_amount) from cr_deal_loan_dtl where deal_id='").append(dealId).append("' ").toString();
		      String sum_assure_deal_loan = ConnectionDAO.singleReturn(sum_loan_deal_amount);
		      logger.info(new StringBuilder().append("sum_assure_deal_loan:::").append(sum_assure_deal_loan).toString());
		      if (sum_assure_deal_loan != "")
		      {
		        sum_assure_deal_loan1 = Integer.parseInt(sum_assure_deal_loan);
		      }
		      else
		      {
		        sum_assure_deal_loan1 = 0;
		      }
		    }
		    catch (Exception e)
		    {
		      e.printStackTrace();
		    }
		    return sum_assure_deal_loan1;
		  }
	
	@Override
	  public int getDealSumInsuranceAmount(CpInsuranceVo vo, String dealId) {
		    int sum_assure1 = 0;
		    String insuranceProvider = vo.getInsuranceProvider();
		    String insuranceProduct = vo.getInsuranceProduct();
		    if (insuranceProduct.contains("|"))
		    {
		      insuranceProduct = insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
		      vo.setInsuranceProduct(insuranceProduct);
		    }
		    logger.info(new StringBuilder().append("aman insuranceProvider::::").append(insuranceProvider).toString());
		    logger.info(new StringBuilder().append("aman insuranceProduct::::").append(insuranceProduct).toString());
		    try
		    {
		      String deal_sum_insurance_amount = new StringBuilder().append(" select sum(sum_assured) from cr_insurance_dtl where deal_id='").append(dealId).append("' and charge_id= '").append(insuranceProvider).append("' ").toString();
		      String sum_assure = ConnectionDAO.singleReturn(deal_sum_insurance_amount);
		      logger.info(new StringBuilder().append("sum_assure:::").append(sum_assure).toString());
		      if (sum_assure != "")
		      {
		        sum_assure1 = Integer.parseInt(sum_assure);
		      }
		      else
		      {
		        sum_assure1 = 0;
		      }
		    }
		    catch (Exception e) {
		      e.printStackTrace();
		    }
		    return sum_assure1;
		  }

	@Override
	 public ArrayList getReloadInsurance(Object ob, String dealId) {
		    ArrayList list = new ArrayList();
		    CpInsuranceVo vo = (CpInsuranceVo)ob;
		    String chargeId = vo.getChargeId();
		    String insuranceProvider = vo.getInsuranceProvider();
		    String sumAssured = vo.getSumAssured();
		    String tenure = vo.getTenure();
		    String age = vo.getAge();
		    String insurancePremium = vo.getInsurancePremium();
		    String chargesOnInsurance = vo.getChargesOnInsurance();
		    String otherChargeId = vo.getOtherChargeId();
		    String insuranceProductId = vo.getInsuranceProductId();
		    String insuranceId = vo.getInsuranceId();
		    String serviceCalled = "";
		    String serviceProduct = "";
		    String qry3 = new StringBuilder().append("select product_id from cr_insurance_dtl  where insurance_id = '").append(insuranceId).append("'").toString();
		    String product = ConnectionDAO.singleReturn(qry3);
		    try
		    {
		      StringBuilder query = new StringBuilder();
		      query.append(new StringBuilder().append("select a.charge_id,round(a.sum_assured),a.loan_tenure,round(a.insurance_premium),a.charges_on_premium,c.CHARGE_DESC,policy_type,AMOUNT_TO_BE_FINANCED,a.customer_id,a.product_id,a.nominee_name,date_format(a.nominee_dob,'%d-%m-%Y'),a.gender,a.nominee_relation,policy_tenure,a.SUM_ASSURED_PERCENTAGE,property_type,GM.description,CIPM.METHOD_TYPE,  A.NOMINEE_NAME1,A.GENDER1,date_format(a.nominee_dob1,'%d-%m-%Y'),A.NOMINEE_RELATION1,A.NOMINEE_NAME2,A.GENDER2,date_format(a.nominee_dob2,'%d-%m-%Y'),A.NOMINEE_RELATION2,A.NOMINEE_NAME3,A.GENDER3,date_format(a.nominee_dob3,'%d-%m-%Y'),A.NOMINEE_RELATION3,A.NOMINEE_NAME4,A.GENDER4,date_format(a.nominee_dob4,'%d-%m-%Y'),A.NOMINEE_RELATION4,A.NOMINEE_PERCENTAGE,A.NOMINEE_PERCENTAGE1,A.NOMINEE_PERCENTAGE2,A.NOMINEE_PERCENTAGE3,A.NOMINEE_PERCENTAGE4,A.ADDR,A.ADDR1,A.ADDR2,A.ADDR3,A.ADDR4,  a.NOMINEE_PREFIX,a.NOMINEE_MNAME,a.NOMINEE_LNAME,a.MARITAL_STATUS,a.NOMINEE_AREA,a.NOMINEE_CITY,csm.STATE_DESC,a.NOMINEE_PIN,a.NOMINEE_PREFIX1,a.NOMINEE_MNAME1, a.NOMINEE_LNAME1,a.MARITAL_STATUS1,a.NOMINEE_AREA1,a.NOMINEE_CITY1,csm1.STATE_DESC,a.NOMINEE_PIN1,a.NOMINEE_PREFIX2,a.NOMINEE_MNAME2,a.NOMINEE_LNAME2,a.MARITAL_STATUS2, a.NOMINEE_AREA2,a.NOMINEE_CITY2,csm2.STATE_DESC,a.NOMINEE_PIN2,a.NOMINEE_PREFIX3,a.NOMINEE_MNAME3,a.NOMINEE_LNAME3,a.MARITAL_STATUS3,a.NOMINEE_AREA3,a.NOMINEE_CITY3,csm3.STATE_DESC,a.NOMINEE_PIN3, a.NOMINEE_PREFIX4,a.NOMINEE_MNAME4,a.NOMINEE_LNAME4,a.MARITAL_STATUS4,a.NOMINEE_AREA4,a.NOMINEE_CITY4,csm4.STATE_DESC,a.NOMINEE_PIN4,a.NOMINEE_ADDRESS_TYPE,a.NOMINEE_STREET,a.NOMINEE_ADDRESS_TYPE1,a.NOMINEE_STREET1,a.NOMINEE_ADDRESS_TYPE2,a.NOMINEE_STREET2, a.NOMINEE_ADDRESS_TYPE3,a.NOMINEE_STREET3,a.NOMINEE_ADDRESS_TYPE4,a.NOMINEE_STREET4, a.NOMINEE_STATE,a.NOMINEE_STATE1,a.NOMINEE_STATE2,a.NOMINEE_STATE3,a.NOMINEE_STATE4 from cr_insurance_dtl a  left join com_state_m csm on csm.STATE_ID=a.NOMINEE_STATE  left join com_state_m csm1 on csm1.STATE_ID=a.NOMINEE_STATE1  left join com_state_m csm2 on csm2.STATE_ID=a.NOMINEE_STATE2  left join com_state_m csm3 on csm3.STATE_ID=a.NOMINEE_STATE3  left join com_state_m csm4 on csm4.STATE_ID=a.NOMINEE_STATE4  join com_charge_code_m b on b.CHARGE_CODE=a.CHARGE_ID  left join com_charge_code_m c on c.CHARGE_CODE=a.OTHER_CHARGE_ID  left join generic_master GM on GM.parent_value=a.charge_id and GM.value='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(product)).trim()).append("'").append(" LEFT JOIN COM_INSURANCE_PRODUCT_METHOD_M CIPM on GM.VALUE=CIPM.PRODUCT_ID and CIPM.REC_STATUS='A' ").append(" where deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' and insurance_id ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(insuranceId)).trim()).append("' ").toString());

		      ArrayList view = ConnectionDAO.sqlSelect(query.toString());
		      logger.info(new StringBuilder().append("querysssssssss:::::").append(query).toString());
		      query = null;
		      int size = view.size();
		      for (int i = 0; i < size; i++)
		      {
		        ArrayList header1 = (ArrayList)view.get(i);
		        if ((header1 != null) && (header1.size() > 0))
		        {
		          vo = new CpInsuranceVo();
		          vo.setInsuranceProvider(CommonFunction.checkNull(header1.get(0)).trim());
		          vo.setSumAssured(CommonFunction.checkNull(header1.get(1)).trim());
		          vo.setTenure(CommonFunction.checkNull(header1.get(2)).trim());
		          vo.setInsurancePremium(CommonFunction.checkNull(header1.get(3)).trim());
		          vo.setChargesOnInsurance(CommonFunction.checkNull(header1.get(4)).trim());
		          vo.setOtherChargeId(CommonFunction.checkNull(header1.get(5)).trim());
		          vo.setPolicyType(CommonFunction.checkNull(header1.get(6)).trim());
		          vo.setPremiumFinanced(CommonFunction.checkNull(header1.get(7)).trim());
		          vo.setCustId(CommonFunction.checkNull(header1.get(8)).trim());
		          serviceProduct = CommonFunction.checkNull(header1.get(9)).trim();
		          serviceCalled = CommonFunction.checkNull(header1.get(18)).trim();
		          vo.setInsuranceProductId(new StringBuilder().append(serviceProduct).append("|").append(serviceCalled).toString());
		          vo.setNomineeName(CommonFunction.checkNull(header1.get(10)).trim());
		          vo.setDateOfbirth(CommonFunction.checkNull(header1.get(11)).trim());
		          vo.setGender(CommonFunction.checkNull(header1.get(12)).trim());
		          vo.setRelationshp(CommonFunction.checkNull(header1.get(13)).trim());
		          vo.setPolicyTenure(CommonFunction.checkNull(header1.get(14)).trim());
		          vo.setSumAssuPer(CommonFunction.checkNull(header1.get(15)).trim());
		          vo.setPropertyType(CommonFunction.checkNull(header1.get(16)).trim());
		          vo.setInsuranceProduct(CommonFunction.checkNull(header1.get(17)).trim());
		          vo.setNomineeName1(CommonFunction.checkNull(header1.get(19)).trim());
		          vo.setGender1(CommonFunction.checkNull(header1.get(20)).trim());
		          vo.setDateOfbirth1(CommonFunction.checkNull(header1.get(21)).trim());
		          vo.setRelationshp1(CommonFunction.checkNull(header1.get(22)).trim());
		          vo.setNomineeName2(CommonFunction.checkNull(header1.get(23)).trim());
		          vo.setGender2(CommonFunction.checkNull(header1.get(24)).trim());
		          vo.setDateOfbirth2(CommonFunction.checkNull(header1.get(25)).trim());
		          vo.setRelationshp2(CommonFunction.checkNull(header1.get(26)).trim());
		          vo.setNomineeName3(CommonFunction.checkNull(header1.get(27)).trim());
		          vo.setGender3(CommonFunction.checkNull(header1.get(28)).trim());
		          vo.setDateOfbirth3(CommonFunction.checkNull(header1.get(29)).trim());
		          vo.setRelationshp3(CommonFunction.checkNull(header1.get(30)).trim());
		          vo.setNomineeName4(CommonFunction.checkNull(header1.get(31)).trim());
		          vo.setGender4(CommonFunction.checkNull(header1.get(32)).trim());
		          vo.setDateOfbirth4(CommonFunction.checkNull(header1.get(33)).trim());
		          vo.setRelationshp4(CommonFunction.checkNull(header1.get(34)).trim());
		          vo.setPercentage(CommonFunction.checkNull(header1.get(35)).trim());
		          vo.setPercentage1(CommonFunction.checkNull(header1.get(36)).trim());
		          vo.setPercentage2(CommonFunction.checkNull(header1.get(37)).trim());
		          vo.setPercentage3(CommonFunction.checkNull(header1.get(38)).trim());
		          vo.setPercentage4(CommonFunction.checkNull(header1.get(39)).trim());
		          vo.setAddr(CommonFunction.checkNull(header1.get(40)).trim());
		          vo.setAddr1(CommonFunction.checkNull(header1.get(41)).trim());
		          vo.setAddr2(CommonFunction.checkNull(header1.get(42)).trim());
		          vo.setAddr3(CommonFunction.checkNull(header1.get(43)).trim());
		          vo.setAddr4(CommonFunction.checkNull(header1.get(44)).trim());

		          vo.setsPrefix(CommonFunction.checkNull(header1.get(45)).trim());
		          vo.setNomineeMName(CommonFunction.checkNull(header1.get(46)).trim());
		          vo.setNomineeLName(CommonFunction.checkNull(header1.get(47)).trim());
		          vo.setSmaritalStatus(CommonFunction.checkNull(header1.get(48)).trim());
		          vo.setSnomineeArea(CommonFunction.checkNull(header1.get(49)).trim());
		          vo.setSnomineeCity(CommonFunction.checkNull(header1.get(50)).trim());
		          vo.setSnomineeState(CommonFunction.checkNull(header1.get(51)).trim());
		          vo.setSnomineePin(CommonFunction.checkNull(header1.get(52)).trim());

		          vo.setsPrefix1(CommonFunction.checkNull(header1.get(53)).trim());
		          vo.setNomineeMName1(CommonFunction.checkNull(header1.get(54)).trim());
		          vo.setNomineeLName1(CommonFunction.checkNull(header1.get(55)).trim());
		          vo.setSmaritalstatus1(CommonFunction.checkNull(header1.get(56)).trim());
		          vo.setsNomineeArea1(CommonFunction.checkNull(header1.get(57)).trim());
		          vo.setsNomineeCity1(CommonFunction.checkNull(header1.get(58)).trim());
		          vo.setsNomineeState1(CommonFunction.checkNull(header1.get(59)).trim());
		          vo.setsNomineePin1(CommonFunction.checkNull(header1.get(60)).trim());

		          vo.setsPrefix2(CommonFunction.checkNull(header1.get(61)).trim());
		          vo.setNomineeMName2(CommonFunction.checkNull(header1.get(62)).trim());
		          vo.setNomineeLName2(CommonFunction.checkNull(header1.get(63)).trim());
		          vo.setSmaritalStatus2(CommonFunction.checkNull(header1.get(64)).trim());
		          vo.setsNomineeArea2(CommonFunction.checkNull(header1.get(65)).trim());
		          vo.setsNomineeCity2(CommonFunction.checkNull(header1.get(66)).trim());
		          vo.setsNomineeState2(CommonFunction.checkNull(header1.get(67)).trim());
		          vo.setsNomineePin2(CommonFunction.checkNull(header1.get(68)).trim());

		          vo.setsPrefix3(CommonFunction.checkNull(header1.get(69)).trim());
		          vo.setNomineeMName3(CommonFunction.checkNull(header1.get(70)).trim());
		          vo.setNomineeLName3(CommonFunction.checkNull(header1.get(71)).trim());
		          vo.setSmaritalStatus3(CommonFunction.checkNull(header1.get(72)).trim());
		          vo.setsNomineeArea3(CommonFunction.checkNull(header1.get(73)).trim());
		          vo.setsNomineeCity3(CommonFunction.checkNull(header1.get(74)).trim());
		          vo.setsNomineeState3(CommonFunction.checkNull(header1.get(75)).trim());
		          vo.setsNomineePin3(CommonFunction.checkNull(header1.get(76)).trim());

		          vo.setsPrefix4(CommonFunction.checkNull(header1.get(77)).trim());
		          vo.setNomineeMName4(CommonFunction.checkNull(header1.get(78)).trim());
		          vo.setNomineeLName4(CommonFunction.checkNull(header1.get(79)).trim());
		          vo.setSmaritalStatus4(CommonFunction.checkNull(header1.get(80)).trim());
		          vo.setsNomineeArea4(CommonFunction.checkNull(header1.get(81)).trim());
		          vo.setsNomineeCity4(CommonFunction.checkNull(header1.get(82)).trim());
		          vo.setsNomineeState4(CommonFunction.checkNull(header1.get(83)).trim());
		          vo.setsNomineePin4(CommonFunction.checkNull(header1.get(84)).trim());
		          vo.setSaddressType(CommonFunction.checkNull(header1.get(85)).trim());
		          vo.setSinsuranceStreet(CommonFunction.checkNull(header1.get(86)).trim());

		          vo.setSaddressType1(CommonFunction.checkNull(header1.get(87)).trim());
		          vo.setSinsuranceStreet1(CommonFunction.checkNull(header1.get(88)).trim());
		          vo.setSaddressType2(CommonFunction.checkNull(header1.get(89)).trim());
		          vo.setSinsuranceStreet2(CommonFunction.checkNull(header1.get(90)).trim());
		          vo.setSaddressType3(CommonFunction.checkNull(header1.get(91)).trim());
		          vo.setSinsuranceStreet3(CommonFunction.checkNull(header1.get(92)).trim());
		          vo.setSaddressType4(CommonFunction.checkNull(header1.get(93)).trim());
		          vo.setSinsuranceStreet4(CommonFunction.checkNull(header1.get(94)).trim());

		          vo.setTxtStateCode(CommonFunction.checkNull(header1.get(95)).trim());
		          vo.setTxtStateCode1(CommonFunction.checkNull(header1.get(96)).trim());
		          vo.setTxtStateCode2(CommonFunction.checkNull(header1.get(97)).trim());
		          vo.setTxtStateCode3(CommonFunction.checkNull(header1.get(98)).trim());
		          vo.setTxtStateCode4(CommonFunction.checkNull(header1.get(99)).trim());

		          list.add(vo);
		        }

		        header1.clear();
		        header1 = null;
		      }
		      view.clear();
		      view = null;
		    }
		    catch (Exception e)
		    {
		      e.printStackTrace();
		    }

		    return list;
		  }
	@Override
	public	ArrayList getPropertyType(CpInsuranceVo vo,String dealId);
	{
		return mainList;
	}
	@Override
	public	ArrayList getRelation(CpInsuranceVo vo,String dealId);
	{
		return mainList;
	}
	@Override
	public ArrayList getSaveInsuranceData(CpInsuranceVo vo,String insuranceProvider,String sumAssured, String tenure, String age,String insuranceProduct,String policyType,String premiumFinanced,String dealId);
	{
		return mainList;
	}
	@Override
	public ArrayList getCustomerDetailList(Object ob,String dealId);
	{
		return mainList;
	}
	@Override
	public ArrayList<Object> getInsuranceProducts(String insuranceProvider);
	{
		return mainList;
	}
public String getAssetCost(String dealId) {
String dealAssetAmount="";
	try{
		 String dealasstAmt=" select round(DEAL_ASSET_COST) from cr_deal_loan_dtl where deal_id='"+dealId+"'  ";
		 String dealasstAmtValue = ConnectionDAO.singleReturn(dealasstAmt);
			logger.info("dealasstAmtValue:::"+dealasstAmtValue);
			if(dealasstAmtValue!="")
			{
				dealAssetAmount = dealasstAmtValue;}
			else 
			{
				dealAssetAmount ="0";}
		}catch(Exception e){
			e.printStackTrace();
}
		return dealAssetAmount;
}

//amandeep work ends
public String getAssetCollateralPropertyPincodeFlag() 
{
	logger.info("In getAssetCollateralPropertyPincodeFlag()");
	String ediFlag="";
	try
	{
		StringBuilder query=new StringBuilder();
		query.append("select parameter_value from parameter_mst where parameter_key='ASSET_COLLATERAL_PROPERTY_PINCODE'" );
		logger.info("In getAssetCollateralPropertyPincodeFlag() query  :  "+query.toString());
		ediFlag = ConnectionDAO.singleReturn(query.toString());
		logger.info("In getAssetCollateralPropertyPincodeFlag() ediFlag  :  "+ediFlag);
	}
	catch(Exception e)
	{e.printStackTrace();}
	return ediFlag;
}

@Override
public ArrayList getCountryStateDistrictTahsilValue(String pincode) {
		ArrayList<Object> list=new ArrayList<Object>();
		try{
			
		StringBuilder query=new StringBuilder();
		query.append(" SELECT A.PINCODE,E.ID,E.DESCRIPTION,E.DISTRICT_ID,B.DISTRICT_DESC,C.STATE_ID,C.STATE_DESC,D.COUNTRY_ID,D.COUNTRY_DESC FROM  com_pincode_m A  ");
		query.append(" left JOIN com_tehsil_m E ON A.TEHSIL_ID=E.ID ");
		query.append(" left JOIN COM_DISTRICT_M B ON E.DISTRICT_ID=B.DISTRICT_ID AND E.STATUS='A' AND B.REC_STATUS='A' ");
		query.append(" left JOIN com_state_m C ON B.STATE_ID=C.STATE_ID AND C.REC_STATUS='A' ");
		query.append(" left JOIN com_country_m D ON D.COUNTRY_ID=C.COUNTRY_ID AND D.REC_STATUS='A' ");
		query.append(" WHERE A.id= '"+pincode+"'");
		logger.info("getCountryStateDistrictTahsilValue: "+query.toString());
		CollateralVo vo = null;
		ArrayList source = ConnectionDAO.sqlSelect(query.toString());
		logger.info("getCountryStateDistrictTahsilValue : "+source.size());
		
		query=null;
		
		for(int i=0;i<source.size();i++){

			ArrayList subsource=(ArrayList)source.get(i);
			if(subsource.size()>0)
			{
				vo = new CollateralVo();
				vo.setPincode(CommonFunction.checkNull(subsource.get(0)).trim());
				vo.setTxnTahsilHID(CommonFunction.checkNull(subsource.get(1)).trim());
				vo.setTahsil(CommonFunction.checkNull(subsource.get(2)).trim());
				vo.setTxtDistCode(CommonFunction.checkNull(subsource.get(3)).trim());
				vo.setDist(CommonFunction.checkNull(subsource.get(4)).trim());
				vo.setTxtStateCode(CommonFunction.checkNull(subsource.get(5)).trim());
				vo.setState(CommonFunction.checkNull(subsource.get(6)).trim());
				vo.setTxtCountryCode(CommonFunction.checkNull(subsource.get(7)).trim());
				vo.setCountry(CommonFunction.checkNull(subsource.get(8)).trim());
				list.add(vo);
			}
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return list;
	}
	public ArrayList getdefaultcountry() {
			ArrayList list = new ArrayList();
			try {
				logger.info("In getdefaultcountry()........");
				StringBuilder query=new StringBuilder();
				
				 query.append("SELECT PARAMETER_VALUE,PARAMETER_DESC FROM parameter_mst WHERE PARAMETER_KEY='DEFAULT_COUNTRY'");
				logger.info("In getdefaultcountry...............query...........DAOImpl"+ query.toString());
				CollateralVo vo=new CollateralVo();
				ArrayList country = ConnectionDAO.sqlSelect(query.toString());
				
				query=null;
				int size=country.size();
				
				for (int i = 0; i < size; i++) {
					ArrayList data = (ArrayList) country.get(i);
					if (data.size() > 0) {
						vo.setCountry((CommonFunction.checkNull(data.get(1))).trim());
						vo.setTxtCountryCode((CommonFunction.checkNull(data.get(0))).trim());
						//vo.setDefaultcountryid((CommonFunction.checkNull(data.get(0))).trim());
						//vo.setDefaultcountryname((CommonFunction.checkNull(data.get(1))).trim());
						list.add(vo);
					}
					data=null;
					vo=null;
				}
				country=null;
			} catch (Exception e) {
				e.printStackTrace();
			}

			return list;
}
	@Override
	public ArrayList vehicleApprovalGridDetails(String dealId) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public String checkLTV(String dealId, String vehicleType,
			String manufacturer, String vehicleModel) {
		// TODO Auto-generated method stub
		return null;
	}





	@Override
	public ArrayList<Object> getInsuranceProviders() {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public ArrayList getInsuranceData(String id) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public boolean insertCpInsurance(CpInsuranceVo vo, String dealId) {
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public Map calculateCpInsurance(Object ob, String insuranceProvider,
			String sumAssured, String tenure, String age,
			String insuranceProduct, String policyType, String premiumFinanced) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public ArrayList<Object> getOtherChargeId() {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public ArrayList getViewInsurance(Object ob, String dealId) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public ArrayList getAllInsuranceData(Object ob, String dealId) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public boolean deleteCpInsurance(CpInsuranceVo vo, String dealId) {
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public ArrayList<Object> getpolicyTypes() {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public ArrayList<Object> getInsuranceProducts(String insuranceProvider) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public ArrayList getCustomerDetailList(Object ob, String dealId) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public ArrayList getSaveInsuranceData(CpInsuranceVo vo,
			String insuranceProvider, String sumAssured, String tenure,
			String age, String insuranceProduct, String policyType,
			String premiumFinanced, String dealId) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public ArrayList getRelation(CpInsuranceVo vo, String dealId) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public ArrayList getPropertyType(CpInsuranceVo vo, String dealId) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public ArrayList getReloadInsurance(Object ob, String dealId) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public int getDealSumInsuranceAmount(CpInsuranceVo vo, String dealId) {
		// TODO Auto-generated method stub
		return 0;
	}
	@Override
	public int getsumAssureDealLoan1(CpInsuranceVo vo, String dealId) {
		// TODO Auto-generated method stub
		return 0;
	}
	@Override
	public String getinsuId(CpInsuranceVo vo, String dealId) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public boolean updateDealLoan(CpInsuranceVo vo, String dealId) {
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public int getAssetCost(CpInsuranceVo vo, String dealId) {
		// TODO Auto-generated method stub
		return 0;
	}
	@Override
	public int insuranceUpdateId(CpInsuranceVo vo, String dealId) {
		// TODO Auto-generated method stub
		return 0;
	}
	@Override
	public ArrayList getFacilityDetailsList(String dealId, String functionId) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public String saveFacilityDetails(FacilityDetailsVo vo) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public String updateFacilityDetails(FacilityDetailsVo vo) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public boolean deleteFacilityDetails(String[] dealLoanId) {
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public ArrayList getShowFacilityDetailsList(String loanId) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public String updateFacilityDetailsRemarks(FacilityDetailsVo vo) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public ArrayList getDealProductDetails(String dealId) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public ArrayList fetchFacilityDetailsList(String facilityDetailsId,
			String functionId) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public ArrayList getSFacilityDetailsList(String dealId, String functionId) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public ArrayList sFetchFacilityDetailsData(String dealLoanId,
			String functionId) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public String validateFacilityAmountWithSanctionAmount(FacilityDetailsVo vo) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public ArrayList getFacilityDetailScheme(String scheme, String bDate) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public String validateFacilityAmountSanctionAmount(FacilityDetailsVo vo) {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	public boolean transferFacilityData(String dealId) {
		// TODO Auto-generated method stub
		return false;
	}
	@Override
	public ArrayList getgenericList() {
		// TODO Auto-generated method stub
		return null;
	}


}



*/