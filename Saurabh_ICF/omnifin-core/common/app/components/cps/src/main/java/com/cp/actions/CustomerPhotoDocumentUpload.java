/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.connect.UploadDocument;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.UnderwritingDocUploadVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/**
 * MyEclipse Struts Creation date: 05-05-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class CustomerPhotoDocumentUpload extends DispatchAction {
	private static final Logger logger = Logger.getLogger(CustomerPhotoDocumentUpload.class.getName());
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward customerPicUpload(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception 
			{
				logger.info("Inside CustomerPhotoDocumentUpload(customerPicUpload)");
				HttpSession session = request.getSession();
				boolean flag=false;
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				String userName="";
				if(userobj!=null)
					userName=userobj.getUserId();
				else
					return mapping.findForward("sessionOut");
				Object sessionId = session.getAttribute("sessionID");
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				if(!"".equalsIgnoreCase(strFlag))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				boolean uploadStatus = false;
				UnderwritingDocUploadVo uwDocVo = new UnderwritingDocUploadVo();
				DynaValidatorForm UnderwriterUploadDynaValidatorForm = (DynaValidatorForm) form;
				org.apache.commons.beanutils.BeanUtils.copyProperties(uwDocVo,
				UnderwriterUploadDynaValidatorForm);
				String loanId="";
				if(session.getAttribute("loanId") != null) {
					loanId = session.getAttribute("loanId").toString();
				} else if (session.getAttribute("maxIdInCM") != null) {
					loanId = session.getAttribute("maxIdInCM").toString();
				}
				
				
			String dealId = "";

			if (session.getAttribute("dealId") != null) {

				dealId = session.getAttribute("dealId").toString();
			} else if (session.getAttribute("maxId") != null) {
				dealId = session.getAttribute("maxId").toString();
			}
				
				int functionId=0;
				String source="";
				if(session.getAttribute("functionId")!=null)
				{
					functionId= Integer.parseInt(session.getAttribute("functionId").toString());
				}
				if((functionId==4000106 || functionId==4000111 || functionId==4001231)&&(!CommonFunction.checkNull(loanId).equalsIgnoreCase("")) )
				{
					source="gcd_customer_m";
					uwDocVo.setDealId(loanId);
				}
				else if((functionId==4000123 || functionId==4000122) && (!CommonFunction.checkNull(loanId).equalsIgnoreCase("")))
				{
					source="gcd_customer_m_edit";
					uwDocVo.setDealId(loanId);
				}
				else if((!CommonFunction.checkNull(dealId).equalsIgnoreCase("") && functionId==4001231) || (!CommonFunction.checkNull(dealId).equalsIgnoreCase("")))
				{
					source="cr_deal_customer_m";
					uwDocVo.setDealId(dealId);
				}		
				
		String customerId = request.getParameter("customerId");
		request.setAttribute("custId",customerId);


		uwDocVo.setUserName("" + userName);
		uploadStatus = UploadDocument.docUpload(request, uwDocVo.getDocFile(), uwDocVo.getDealId());
		uwDocVo.setFileName(request.getAttribute("fileName").toString());
		uwDocVo.setDocPath(request.getAttribute("filePath").toString());
		
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 	//changed by asesh
	
		boolean status = false;
		ArrayList uploadedDocList=new ArrayList();

			if (uploadStatus) 
			{
				status=service.saveUploadPath(source,customerId,uwDocVo.getDocPath(),uwDocVo.getFileName());
				uploadedDocList = service.getUploadCustomerPicData(customerId,source);
				if(uploadedDocList.size()>0){
				 request.setAttribute("uploadedDocList", uploadedDocList);
				 
					request.setAttribute("message", "UploadSuccessful");
				}
			}

		service=null;
		uwDocVo=null;
		userName=null;
		strFlag=null;

		return mapping.findForward("success");
	}

	public ActionForward deleteUploadCustomerPicData(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		logger.info("In deleteUploadCustomerPicData ");
		boolean deleteStatus = false;

		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("in deleteUploadCustomerPicData method of CustomerPhotoDocumentUpload action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!"".equalsIgnoreCase(strFlag))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		UnderwritingDocUploadVo uwDocVo = new UnderwritingDocUploadVo();
		String loanId="";
		if(session.getAttribute("loanId") != null) {
			loanId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxIdInCM") != null) {
			loanId = session.getAttribute("maxIdInCM").toString();
		}
		
		
	String dealId = "";

	if (session.getAttribute("dealId") != null) {

		dealId = session.getAttribute("dealId").toString();
	} else if (session.getAttribute("maxId") != null) {
		dealId = session.getAttribute("maxId").toString();
	}
		
		int functionId=0;
		String source="";
		if(session.getAttribute("functionId")!=null)
		{
			functionId= Integer.parseInt(session.getAttribute("functionId").toString());
		}
		if((functionId==4000106 || functionId==4000111 || functionId==4001231)&&(!CommonFunction.checkNull(loanId).equalsIgnoreCase("")) )
		{
			source="gcd_customer_m";
			uwDocVo.setDealId(loanId);
		}
		else if((functionId==4000123 || functionId==4000122) && (!CommonFunction.checkNull(loanId).equalsIgnoreCase("")))
		{
			source="gcd_customer_m_edit";
			uwDocVo.setDealId(loanId);
		}
		else if((!CommonFunction.checkNull(dealId).equalsIgnoreCase("") && functionId==4001231) || (!CommonFunction.checkNull(dealId).equalsIgnoreCase("")))
		{
			source="cr_deal_customer_m";
			uwDocVo.setDealId(dealId);
		}

		String doc_name = request.getParameter("docName");
		String customerId = request.getParameter("customerId");

		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 	//changed by asesh
		//CreditProcessingDAO service = new CreditProcessingDAOImpl();
        deleteStatus=UploadDocument.customerDocDelete(doc_name,customerId,source);	
		
		if (deleteStatus) {
			deleteStatus = service.deleteDocumentForCustomer(doc_name,customerId,source);
		}
		if (deleteStatus) 
		request.setAttribute("message", "deletedoc");
		else
			request.setAttribute("message", "deleteNotdoc");	

//end by sachin
		
		dealId=null;
		uwDocVo=null;
		service=null;
		strFlag=null;

		form.reset(mapping, request);
		return mapping.findForward("delete");
	}


	
	public ActionForward downloadUploadedFileForCustomer(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		String downloadPath = null;
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here downloadUploadedFileOmniFin method of CustomerPhotoDocumentUpload  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!"".equalsIgnoreCase(strFlag))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
	
		UnderwritingDocUploadVo uwDocVo = new UnderwritingDocUploadVo();
		String loanId="";
		if(session.getAttribute("loanId") != null) {
			loanId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxIdInCM") != null) {
			loanId = session.getAttribute("maxIdInCM").toString();
		}
		
		
	String dealId = "";

	if (session.getAttribute("dealId") != null) {

		dealId = session.getAttribute("dealId").toString();
	} else if (session.getAttribute("maxId") != null) {
		dealId = session.getAttribute("maxId").toString();
	}
		
		int functionId=0;
		String source="";
		if(session.getAttribute("functionId")!=null)
		{
			functionId= Integer.parseInt(session.getAttribute("functionId").toString());
		}
		if((functionId==4000106 || functionId==4000111 || functionId==4001231)&&(!CommonFunction.checkNull(loanId).equalsIgnoreCase("")) )
		{
			source="gcd_customer_m";
			uwDocVo.setDealId(loanId);
		}
		else if((functionId==4000123 || functionId==4000122) && (!CommonFunction.checkNull(loanId).equalsIgnoreCase("")))
		{
			source="gcd_customer_m_edit";
			uwDocVo.setDealId(loanId);
		}
		else if((!CommonFunction.checkNull(dealId).equalsIgnoreCase("") && functionId==4001231) || (!CommonFunction.checkNull(dealId).equalsIgnoreCase("")))
		{
			source="cr_deal_customer_m";
			uwDocVo.setDealId(dealId);
		}
		
		
		String customerId = CommonFunction.checkNull(request.getParameter("customerId"));

		String fileName = CommonFunction.checkNull(request.getParameter("docName"));
		//sachin
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 	//changed by asesh
		//CreditProcessingDAO service = new CreditProcessingDAOImpl();
		
		downloadPath = service.getDownLoadFilePathForCustomerDoc(customerId,source);
				
		//end by sachin
		logger.info("File Name downloadPath: "+downloadPath);
		if (!CommonFunction.checkNull(downloadPath).equalsIgnoreCase("")) {
			downloadPath = downloadPath + "\\" + fileName;
			logger.info("Download Path of File is: " + downloadPath);
			String fileType = fileName.substring(fileName.lastIndexOf(".") + 1,
					fileName.length());
			fileType=fileType.toLowerCase();
			logger.info("File Type: " + fileType);
			logger.info("File Name: " + fileName);
			

			if (fileType.trim().equalsIgnoreCase("xls")) {
				logger.info("File Type in xls: " + fileType);
				response.setContentType("application/vnd.ms-excel");
			} else if (fileType.trim().equalsIgnoreCase("xlsx")) {
				logger.info("File Type in xlsx: " + fileType);
				response.setContentType("application/vnd.ms-excel");
			} else if (fileType.trim().equalsIgnoreCase("pdf")) {
				logger.info("File Type in pdf: " + fileType);
				response.setContentType("application/pdf");
			}
			else if (fileType.trim().equalsIgnoreCase("doc")) {
				logger.info("File Type in doc: " + fileType);
				response.setContentType("application/msword");
			} else if (fileType.trim().equalsIgnoreCase("docx")) {
				logger.info("File Type in docx: " + fileType);
				response.setContentType("application/msword");
			} else if (fileType.trim().equalsIgnoreCase("jpg")) {
				logger.info("File Type in jpg: " + fileType);
				response.setContentType("image/jpeg");
			}
		    else if (fileType.trim().equalsIgnoreCase("jpeg")) {
			logger.info("File Type in jpeg: " + fileType);
			response.setContentType("image/jpeg");
		  }
			else if (fileType.trim().equalsIgnoreCase("zip")||fileType.trim().equalsIgnoreCase("rar")) {
				logger.info("File Type in zip/rar: " + fileType);
				response.setContentType("application/x-zip-compressed");
			} 
			
			else if (fileType.trim().equalsIgnoreCase("rtf")) {
				logger.info("File Type in rtf: " + fileType);
				response.setContentType("application/rtf");
			} 
			else if (fileType.trim().equalsIgnoreCase("csv")) {
				logger.info("File Type in csv: " + fileType);
				response.setContentType("text/comma-separated-values");
			} 
			else if (fileType.trim().equalsIgnoreCase("pptx")) {
				logger.info("File Type in pptx: " + fileType);
				response.setContentType("application/mspowerpoint");
			} 
			else if (fileType.trim().equalsIgnoreCase("ppt")) {
				logger.info("File Type in ppt: " + fileType);
				response.setContentType("application/mspowerpoint");
			} 
			else if (fileType.trim().equalsIgnoreCase("tif")) {
				logger.info("File Type in tif: " + fileType);
				response.setContentType("image/tif");
			} 
			else {
				logger.info("File Type in default: " + fileType);
				response.setContentType("application/octet-stream");
			}
			response.setHeader("Content-Disposition", "attachment;fileName="
					+ fileName);

			// executing download function
			UploadDocument.downloadFile(request, response, downloadPath);
	
		}
		fileName=null;
		strFlag=null;

		return null;
	}

	public ActionForward displayPhotoUploadScreenWebScreen(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		logger.info("In deleteUploadCustomerPicData ");
		boolean deleteStatus = false;

		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("in displayPhotoUploadScreenWebScreen method of CustomerPhotoDocumentUpload action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!"".equalsIgnoreCase(strFlag))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String customerId=request.getParameter("customerId");
		request.setAttribute("customerId",customerId);

		return mapping.findForward("showWebCamScreen");
	}
	

	public ActionForward customerWebPicUpload(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception 
			{
				logger.info("Inside CustomerPhotoDocumentUpload(customerPicUpload)");
				HttpSession session = request.getSession();
				boolean flag=false;
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				String userName="";
				if(userobj!=null)
					userName=userobj.getUserId();
				else
					return mapping.findForward("sessionOut");
				Object sessionId = session.getAttribute("sessionID");
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				if(!"".equalsIgnoreCase(strFlag))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				boolean uploadStatus = false;
				UnderwritingDocUploadVo uwDocVo = new UnderwritingDocUploadVo();
				DynaValidatorForm UnderwriterUploadDynaValidatorForm = (DynaValidatorForm) form;
				org.apache.commons.beanutils.BeanUtils.copyProperties(uwDocVo,
				UnderwriterUploadDynaValidatorForm);
				
				String loanId="";
				if(session.getAttribute("loanId") != null) {
					loanId = session.getAttribute("loanId").toString();
				} else if (session.getAttribute("maxIdInCM") != null) {
					loanId = session.getAttribute("maxIdInCM").toString();
				}
				
				
			String dealId = "";

			if (session.getAttribute("dealId") != null) {

				dealId = session.getAttribute("dealId").toString();
			} else if (session.getAttribute("maxId") != null) {
				dealId = session.getAttribute("maxId").toString();
			}
				
				int functionId=0;
				String source="";
				if(session.getAttribute("functionId")!=null)
				{
					functionId= Integer.parseInt(session.getAttribute("functionId").toString());
				}
				if((functionId==4000106 || functionId==4000111 || functionId==4001231)&&(!CommonFunction.checkNull(loanId).equalsIgnoreCase("")) )
				{
					source="gcd_customer_m";
					uwDocVo.setDealId(loanId);
				}
				else if((functionId==4000123 || functionId==4000122) && (!CommonFunction.checkNull(loanId).equalsIgnoreCase("")))
				{
					source="gcd_customer_m_edit";
					uwDocVo.setDealId(loanId);
				}
				else if((!CommonFunction.checkNull(dealId).equalsIgnoreCase("") && functionId==4001231) || (!CommonFunction.checkNull(dealId).equalsIgnoreCase("")))
				{
					source="cr_deal_customer_m";
					uwDocVo.setDealId(dealId);
				}
			
		String customerId = request.getParameter("customerId");

		request.setAttribute("custId",customerId);


		uwDocVo.setUserName("" + userName);

		logger.info("uwDocVo.getWebString()::::::"+uwDocVo.getWebString());
		uploadStatus = UploadDocument.webDocUpload(request, uwDocVo.getWebString(), uwDocVo.getDealId());
		uwDocVo.setFileName(request.getAttribute("fileName").toString());
		uwDocVo.setDocPath(request.getAttribute("filePath").toString());
		
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 	//changed by asesh
	
		boolean status = false;
		ArrayList uploadedDocList=new ArrayList();

			if (uploadStatus) 
			{
				status=service.saveUploadPath(source,customerId,uwDocVo.getDocPath(),uwDocVo.getFileName());
				uploadedDocList = service.getUploadCustomerPicData(customerId,source);
				if(uploadedDocList.size()>0){
				 request.setAttribute("uploadedDocList", uploadedDocList);
				 
					request.setAttribute("message", "UploadSuccessful");
				}
			}

		service=null;
		uwDocVo=null;
		userName=null;
		strFlag=null;

		return mapping.findForward("webSuccess");
	}	
	
	
}