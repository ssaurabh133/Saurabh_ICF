/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.ApplicantTypeVO;
import com.gcd.dao.CorporateDAO;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/**
 * MyEclipse Struts Creation date: 04-08-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class CustEntryAction extends Action {
	private static final Logger logger = Logger.getLogger(CustEntryAction.class.getName());
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		logger.info("In CustEntryAction(execute) id ");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in execute method of CustEntryAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String dealId = "";
		// session.removeAttribute("roleList");

		session.removeAttribute("pageStatus");
		session.removeAttribute("updateInMaker");
		session.removeAttribute("statusCase");

		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		String status = CommonFunction.checkNull(request.getParameter("status"));
		String show = CommonFunction.checkNull(request.getParameter("show"));
		logger.info("In CustEntryAction(execute)dealid " + dealId);
		logger.info("In CustEntryAction(execute)status " + status);
		logger.info("In CustEntryAction(execute)show " + show);
		if(status.equalsIgnoreCase("CE")&& show.equalsIgnoreCase("Y"))
		{
			session.setAttribute("showCE", "Y");
			session.setAttribute("custEntryU", "CE");
			session.setAttribute("viewDeal", "UWA");
		}
		else
		{
			session.removeAttribute("custEntryU");
			session.removeAttribute("showCE");
		}

		if (dealId != null && !dealId.equalsIgnoreCase("")) {
			
			String paramQ="select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY='APPLICANT_CATEGORY_INDIVIDUAL'";
			logger.info("paramQ: "+paramQ);
			String optionIndv=ConnectionDAO.singleReturn(paramQ);
			logger.info("optionIndv: "+optionIndv);
			request.setAttribute("optionIndv", optionIndv);
			CreditProcessingDAO detail=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	        logger.info("Implementation class: "+detail.getClass()); 			// changed by asesh
			//CreditProcessingDAO detail = new CreditProcessingDAOImpl();
			CorporateDAO dao=(CorporateDAO)DaoImplInstanceFactory.getDaoImplInstance(CorporateDAO.IDENTITY);
			logger.info("Implementation class: "+dao.getClass());
			session.removeAttribute("update");
			session.removeAttribute("approve");
			ArrayList  riskCategoryList= dao.getriskCategoryList();
			session.setAttribute("riskCategoryList", riskCategoryList);
			if(status.equalsIgnoreCase("CE")&& show.equalsIgnoreCase("Y"))
			{
				ArrayList<ApplicantTypeVO> applist = detail.getApplicantList();
				ArrayList<Object> roleList = dao.getRoleListCorp(dealId);
				session.setAttribute("applist", applist);
				request.setAttribute("roleList", roleList);
			}
			else
			{
				ArrayList<ApplicantTypeVO> applist = detail.getApplicantList();
				ArrayList<Object> roleList = dao.getRoleList(dealId);
				session.setAttribute("applist", applist);
				request.setAttribute("roleList", roleList);
			}
			ArrayList dealHeader = detail.getDealHeader(dealId);
			session.setAttribute("dealHeader", dealHeader);

			return mapping.findForward("success");
		}
		else {
			request.setAttribute("back", "B");
			return mapping.findForward("backToFirst");
		}

	}
}