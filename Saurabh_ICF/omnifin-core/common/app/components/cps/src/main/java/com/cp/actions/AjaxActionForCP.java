/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.ACHCapturingDAO;
import com.cp.vo.CollateralVo;
import com.cp.vo.CreditProcessingLeadDetailDataVo;
import com.cp.dao.CreditProcessingDAO;
import com.cp.dao.LimitEnhancementDAO;
import com.cp.vo.CollateralVo;
import com.cp.vo.LimitEnhancementVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.cp.leadDao.PreDealDao;
/** 
 * MyEclipse Struts
 * Creation date: 11-18-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class AjaxActionForCP extends DispatchAction {
	/*
	 * Generated Methods
	 */
	private static final Logger logger = Logger.getLogger(AjaxActionForCP.class.getName());
	DecimalFormat myFormatter = new DecimalFormat("###,##0.00######");
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward retriveLeadInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	throws Exception {

		logger.info("In AjaxActionforCM Class---------retriveLeadInfo");
		
		HttpSession session =  request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in retriveLeadInfo method of AjaxActionForCP action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 		//changed by asesh
		//CreditProcessingDAO dao = new CreditProcessingDAOImpl();
		String lbxLeadNo = CommonFunction.checkNull(request.getParameter("lbxLeadNo"));
		logger.info("Lead No................    "+lbxLeadNo);
		ArrayList leadList = dao.retriveLeadInfoValues(lbxLeadNo);
		logger.info("leadList ................    "+leadList);
		if(leadList.size()>0){
		request.setAttribute("leadList",leadList);
		}
		return mapping.findForward("leadInfo");
	}
	
	public ActionForward retriveLimitEnhancementValues(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	throws Exception {

		logger.info("In AjaxActionforCP Class---------retriveLimitEnhancementValues");
		
		HttpSession session =  request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in retriveLimitEnhancementValues method of AjaxActionforCP  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String lbxLoanNo=CommonFunction.checkNull(request.getParameter("lbxLoanNo"));
		String lbxDealNo=CommonFunction.checkNull(request.getParameter("lbxDealNo"));//Added by Nishant
		logger.info(" In retriveLimitEnhancementValues ---"+lbxLoanNo);

		LimitEnhancementDAO dao=(LimitEnhancementDAO)DaoImplInstanceFactory.getDaoImplInstance(LimitEnhancementDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 	// changed by asesh
		//LimitEnhancementDAO dao = new LimitEnhancementDAOImpl();
		ArrayList<LimitEnhancementVo> limitList= dao.getValueForLimitEnhancement(lbxLoanNo,lbxDealNo);

		request.setAttribute("limitList", limitList);

		logger.info("retriveLimitEnhancementValues    Size:---"+limitList.size());
		return mapping.findForward("limitListValues");
	}
	//Manish for Loan limit Enhancement
	public ActionForward retriveLimitEnhancementLoanValues(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	throws Exception {

		logger.info("In AjaxActionforCP Class---------retriveLimitEnhancementLoanValues");
		
		HttpSession session =  request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in retriveLimitEnhancementLoanValues method of AjaxActionforCP  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String lbxLoanNo=CommonFunction.checkNull(request.getParameter("lbxLoanNo"));
		String lbxDealNo=CommonFunction.checkNull(request.getParameter("lbxDealNo"));
		logger.info(" In retriveLimitEnhancementValues ---"+lbxLoanNo);

		LimitEnhancementDAO dao=(LimitEnhancementDAO)DaoImplInstanceFactory.getDaoImplInstance(LimitEnhancementDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 	
		
		ArrayList<LimitEnhancementVo> limitList= dao.getValueForLimitLoanEnhancement(lbxLoanNo,lbxDealNo);
		LimitEnhancementVo vo=limitList.get(0);
		String oldLoanAmount=vo.getOldLoanAmount();
		String totalDisbursedAmount=vo.getTotalDisbursedAmount();
		String loanInsType=vo.getLoanInsType();
		String checkLoanStatus=vo.getCheckLoanStatus();
	    String oldSenDate = vo.getOldSenDate();
	    String oldSenValidTill = vo.getOldSenValidTill();
		request.setAttribute("limitLoanList","");
		request.setAttribute("limitLoanList","");
		request.setAttribute("oldLoanAmount",oldLoanAmount);
		request.setAttribute("totalDisbursedAmount",totalDisbursedAmount);
		request.setAttribute("loanInsType",loanInsType);
		String checkDisbursalLoan=dao.getCheckDisbursalLoan(lbxLoanNo);
		String checkTerminationLoan=dao.getCheckTerminationLoan(lbxLoanNo);
		request.setAttribute("checkDisbursalLoan",checkDisbursalLoan);
		request.setAttribute("checkTerminationLoan",checkTerminationLoan);
		request.setAttribute("oldSenDate", oldSenDate);
	    request.setAttribute("oldSenValidTill", oldSenValidTill);
		logger.info("retriveLimitEnhancementValues    Size:---"+limitList.size());
		dao=null;
		vo=null;
		lbxLoanNo=null;
		lbxDealNo=null;
		limitList.clear();
		limitList=null;
		//form.reset(mapping, request);
		return mapping.findForward("limitListValues");
	}
	//end of Manish for Loan limit Enhancement
	
	// Added By Prashant
	public ActionForward fetchExposureLimitByCustomer(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		logger.info(" In the AjaxActionForCP----------");
		
		logger.info("In openGroupExposerLimit.....");
		HttpSession session = request.getSession();
		boolean flag=false;
		String userId="";
		String branch="";
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			branch=userobj.getBranchId();
		}else{
			logger.info("here in fetchExposureLimitByCustomer method of AjaxActionForCP action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String dealId = (String) session.getAttribute("dealId");
		logger.info("In AjaxActionForCP(fetchExposureLimitByCustomer) dealId "+ dealId);
		String customerId=CommonFunction.checkNull(request.getParameter("customerId")).trim();
		logger.info(" In fetchExposureLimitByCustomer customerId---"+customerId);
		String hGroupId=CommonFunction.checkNull(request.getParameter("hGroupId")).trim();
		logger.info(" In fetchExposureLimitByCustomer hGroupId---"+hGroupId);
		String groupType=CommonFunction.checkNull(request.getParameter("groupType")).trim();
		logger.info(" In fetchExposureLimitByCustomer groupType---"+groupType);

		CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 		//changed by asesh
	    ArrayList groupExposureList=dao.getGroupExposureData(dealId,customerId,hGroupId,groupType);
	    String productExposureQuery=" SELECT SUM(LOAN_BALANCE_PRINCIPAL) "+
	    							" FROM CR_LOAN_DTL a"+
	    							" JOIN CR_DEAL_LOAN_DTL B ON(A.LOAN_DEAL_ID=B.DEAL_ID AND A.LOAN_PRODUCT=B.DEAL_PRODUCT AND A.REC_STATUS='A')"+
	    							" WHERE B.DEAL_ID='"+CommonFunction.checkNull(dealId).trim()+"'";
	    logger.info("productExposureQuery: "+productExposureQuery);
	    String productExposure =ConnectionDAO.singleReturn(productExposureQuery);
	    logger.info("productExposure: "+productExposure);
	    if(CommonFunction.checkNull(productExposure).equalsIgnoreCase(""))
	    {
	    	request.setAttribute("productExposure", "0.00");
	    }
	    else
	    {
	    	Number reconNummF =myFormatter.parse(productExposure);
			request.setAttribute("productExposure", myFormatter.format(reconNummF));
	    }
	    
	    String schemeExposureQuery=" SELECT SUM(LOAN_BALANCE_PRINCIPAL) "+
		" FROM CR_LOAN_DTL a"+
		" JOIN CR_DEAL_LOAN_DTL B ON(A.LOAN_DEAL_ID=B.DEAL_ID AND A.LOAN_SCHEME=B.DEAL_SCHEME AND A.REC_STATUS='A')"+
		" WHERE B.DEAL_ID='"+CommonFunction.checkNull(dealId).trim()+"'";
	    
	    logger.info("schemeExposureQuery: "+schemeExposureQuery);
	    String schemeExposure =ConnectionDAO.singleReturn(schemeExposureQuery);
	    logger.info("schemeExposure: "+schemeExposure);
	    if(CommonFunction.checkNull(schemeExposure).equalsIgnoreCase(""))
	    {
	    	request.setAttribute("schemeExposure", "0.00");
	    }
	    else
	    {
	    	Number reconNummF =myFormatter.parse(schemeExposure);
			request.setAttribute("schemeExposure", myFormatter.format(reconNummF));
	    	
	    }
	    
	    String totalCustomerExposureQuery="SELECT SUM(LOAN_BALANCE_PRINCIPAL) FROM CR_LOAN_DTL A WHERE REC_STATUS='A' AND LOAN_CUSTOMER_ID=(select GCD_CUSTOMER_ID from  cr_deal_customer_m where CUSTOMER_ID=(select DEAL_CUSTOMER_ID from cr_deal_dtl where DEAL_ID='"+dealId.trim()+"' ))";
	    logger.info("totalCustomerExposureQuery: "+totalCustomerExposureQuery);
	    String totalCustomerExposure =ConnectionDAO.singleReturn(totalCustomerExposureQuery);
	    logger.info("totalCustomerExposure: "+totalCustomerExposure);
	    if(CommonFunction.checkNull(totalCustomerExposure).equalsIgnoreCase(""))
	    {
	    	 request.setAttribute("totalCustomerExposure", "0.00");
	    }
	    else
	    {
	    	Number reconNummF =myFormatter.parse(totalCustomerExposure);
			request.setAttribute("totalCustomerExposure", myFormatter.format(reconNummF));
	    	
	    }
	   
	    String shemeCustomerExposureQuery="SELECT SUM(LOAN_BALANCE_PRINCIPAL) FROM CR_LOAN_DTL A WHERE REC_STATUS='A' AND LOAN_SCHEME =(select DEAL_SCHEME from cr_deal_loan_dtl where DEAL_ID='"+dealId.trim()+"') AND LOAN_CUSTOMER_ID=(SELECT GCD_CUSTOMER_ID FROM cr_deal_dtl where DEAL_ID='"+dealId.trim()+"' )";
	    logger.info("shemeCustomerExposureQuery: "+shemeCustomerExposureQuery);
	    String shemeCustomerExposure =ConnectionDAO.singleReturn(shemeCustomerExposureQuery);
	    logger.info("shemeCustomerExposure: "+shemeCustomerExposure);
	    if(CommonFunction.checkNull(shemeCustomerExposure).equalsIgnoreCase(""))
	    {
	    	 request.setAttribute("shemeCustomerExposure", "0.00");
	    }
	    else
	    {
	    	Number reconNummF =myFormatter.parse(shemeCustomerExposure);
			request.setAttribute("shemeCustomerExposure", myFormatter.format(reconNummF));
	    	
	    }
	   
	    String groupExposureQuery="SELECT SUM(LOAN_BALANCE_PRINCIPAL) FROM CR_LOAN_DTL A WHERE REC_STATUS='A' AND LOAN_CUSTOMER_ID IN (SELECT CUSTOMER_ID FROM GCD_CUSTOMER_M B WHERE GROUP_ID=(select CUSTOMER_GROUP_ID from  cr_deal_customer_m where CUSTOMER_ID=(select DEAL_CUSTOMER_ID from cr_deal_dtl where deal_id='"+dealId.trim()+"' )) AND REC_STATUS='A')";
	    logger.info("groupExposureQuery: "+groupExposureQuery);
	    String groupExposure =ConnectionDAO.singleReturn(groupExposureQuery);
	    logger.info("groupExposure: "+groupExposure);
	    if(CommonFunction.checkNull(groupExposure).equalsIgnoreCase(""))
	    {
	    	 request.setAttribute("groupExposure", "0.00");
	    }
	    else
	    {
	    	Number reconNummF =myFormatter.parse(groupExposure);
			request.setAttribute("groupExposure", myFormatter.format(reconNummF));
	    	
	    }
	   
	    String industryExposureQuery="SELECT SUM(LOAN_BALANCE_PRINCIPAL) FROM CR_LOAN_DTL WHERE LOAN_INDUSTRY_ID =(select DEAL_INDUSTRY_ID from cr_deal_dtl where DEAL_ID='"+dealId.trim()+"') AND REC_STATUS='A'";
	    logger.info("industryExposureQuery: "+industryExposureQuery);
	    String industryExposure =ConnectionDAO.singleReturn(industryExposureQuery);
	    logger.info("industryExposure: "+industryExposure);
	    if(CommonFunction.checkNull(industryExposure).equalsIgnoreCase(""))
	    {
	    	request.setAttribute("industryExposure", "0.00");
	    }
	    else
	    {
	    	Number reconNummF =myFormatter.parse(industryExposure);
			request.setAttribute("industryExposure", myFormatter.format(reconNummF));
	    	
	    }
	    
	    String subIndustryExposureQuery="SELECT SUM(LOAN_BALANCE_PRINCIPAL) FROM CR_LOAN_DTL WHERE LOAN_SUB_INDUSTRY_ID =(select DEAL_SUB_INDUSTRY_ID from cr_deal_dtl where DEAL_ID='"+dealId.trim()+"') AND REC_STATUS='A'";
	    logger.info("subIndustryExposureQuery: "+subIndustryExposureQuery);
	    String subIndustryExposure =ConnectionDAO.singleReturn(subIndustryExposureQuery);
	    logger.info("subIndustryExposure: "+subIndustryExposure);
	    if(CommonFunction.checkNull(subIndustryExposure).equalsIgnoreCase(""))
	    {
	    	 request.setAttribute("subIndustryExposure", "0.00");
	    }
	    else
	    {
	    	Number reconNummF =myFormatter.parse(subIndustryExposure);
			request.setAttribute("subIndustryExposure", myFormatter.format(reconNummF));
	    	
	    }
	    request.setAttribute("groupExposureList", groupExposureList);
	    Number balPrincipal=0.0;
		Number overDuePrincipal=0.0;
		Number sdAdviceAmt=0.0;
		Number dealSDCharge=0.0;
		Number loanAmt=0.0;
		
		BigDecimal balancePrincipalAmt = new BigDecimal("0.00");
		BigDecimal overDuePrincipalAmt = new BigDecimal("0.00");
		BigDecimal sdAdviceAmount = new BigDecimal("0.00");
		BigDecimal dealSDChargeAmt = new BigDecimal("0.00");
		BigDecimal loanAmount = new BigDecimal("0.00");
		BigDecimal eposureAmount = new BigDecimal("0.00");
		
	    if(!CommonFunction.checkNull(hGroupId).trim().equalsIgnoreCase(""))
	    {
	    	StringBuilder loanBalQry=new StringBuilder();
			loanBalQry.append("SELECT SUM(IFNULL(CLD.LOAN_BALANCE_PRINCIPAL,0)) ");	    	
			loanBalQry.append(" FROM CR_LOAN_DTL CLD ");
			loanBalQry.append(" JOIN GCD_CUSTOMER_M GCM ON CLD.LOAN_CUSTOMER_ID=GCM.CUSTOMER_ID  ");
			loanBalQry.append(" AND GCM.GROUP_ID='"+CommonFunction.checkNull(hGroupId).trim()+"' ");
			loanBalQry.append(" WHERE CLD.REC_STATUS='A' ");
	    	String lonbal=ConnectionDAO.singleReturn(loanBalQry.toString());
	    	if(CommonFunction.checkNull(lonbal).trim().equalsIgnoreCase(""))
	    		lonbal="0.00";	    	
	    	if(CommonFunction.checkNull(lonbal).trim().equalsIgnoreCase(""))
			{
				request.setAttribute("LOAN_BALANCE_PRINCIPAL","0.00");
			}
			else
			{
				balPrincipal =myFormatter.parse(CommonFunction.checkNull(lonbal).trim());
				request.setAttribute("LOAN_BALANCE_PRINCIPAL", myFormatter.format(balPrincipal));
			}
	    	StringBuilder loanOverDuQry=new StringBuilder();
	    	loanOverDuQry.append(" SELECT SUM(IFNULL(CLD.LOAN_OVERDUE_PRINCIPAL,0)) ");	
	    	loanOverDuQry.append(" FROM CR_LOAN_DTL CLD ");
	    	loanOverDuQry.append(" JOIN GCD_CUSTOMER_M GCM ON CLD.LOAN_CUSTOMER_ID=GCM.CUSTOMER_ID ");
	    	loanOverDuQry.append(" AND GCM.GROUP_ID='"+CommonFunction.checkNull(hGroupId).trim()+"'  ");
	    	loanOverDuQry.append(" WHERE CLD.REC_STATUS='A' ");
	    	String lonDu=ConnectionDAO.singleReturn(loanOverDuQry.toString());
	    	
	    	if(CommonFunction.checkNull(lonDu).trim().equalsIgnoreCase(""))
	    		lonDu="0.00";
	    	if(CommonFunction.checkNull(lonDu).trim().equalsIgnoreCase(""))
			{
				request.setAttribute("LOAN_OVERDUE_PRINCIPAL","0.00");
			}
			else
			{
				overDuePrincipal =myFormatter.parse(CommonFunction.checkNull(lonDu).trim());
				request.setAttribute("LOAN_OVERDUE_PRINCIPAL", myFormatter.format(overDuePrincipal));
			}
	    	StringBuilder existRSDQr=new StringBuilder();
	    	existRSDQr.append(" SELECT SUM(IFNULL(COLL_R.ADVICE_AMOUNT,0)) ");	
	    	existRSDQr.append(" FROM CR_LOAN_DTL CLD ");	
	    	existRSDQr.append(" JOIN GCD_CUSTOMER_M GCM ON CLD.LOAN_CUSTOMER_ID=GCM.CUSTOMER_ID ");	
	    	existRSDQr.append(" AND GCM.GROUP_ID='"+CommonFunction.checkNull(hGroupId).trim()+"' ");	
	    	existRSDQr.append(" JOIN CR_TXNADVICE_DTL COLL_R ON(COLL_R.LOAN_ID=CLD.LOAN_ID AND COLL_R.CHARGE_CODE_ID=103 AND COLL_R.REC_STATUS='A' AND COLL_R.ADVICE_TYPE='R') ");	
	    	existRSDQr.append(" WHERE CLD.REC_STATUS='A' ");	
	    	
	    	String existRSD=ConnectionDAO.singleReturn(existRSDQr.toString());
	    	if(CommonFunction.checkNull(existRSD).trim().equalsIgnoreCase(""))
	    		existRSD="0.00";
	    	
	    	StringBuilder existPSDQr =new StringBuilder();
	    	existPSDQr.append(" SELECT SUM(IFNULL(COLL_R.ADVICE_AMOUNT,0)) ");	
	    	existPSDQr.append(" FROM CR_LOAN_DTL CLD ");	
	    	existPSDQr.append(" JOIN GCD_CUSTOMER_M GCM ON CLD.LOAN_CUSTOMER_ID=GCM.CUSTOMER_ID ");	
	    	existPSDQr.append(" AND GCM.GROUP_ID='"+CommonFunction.checkNull(hGroupId).trim()+"' ");	
	    	existPSDQr.append(" JOIN CR_TXNADVICE_DTL COLL_R ON(COLL_R.LOAN_ID=CLD.LOAN_ID AND COLL_R.CHARGE_CODE_ID=103 AND COLL_R.REC_STATUS='A' AND COLL_R.ADVICE_TYPE='P') ");	
	    	existPSDQr.append(" WHERE CLD.REC_STATUS='A' ");	
	    	
	    	
	    	String existPSD=ConnectionDAO.singleReturn(existPSDQr.toString());
	    	if(CommonFunction.checkNull(existPSD).trim().equalsIgnoreCase(""))
	    		existPSD="0.00";
	    	
	    	BigDecimal reSD = new BigDecimal(existRSD);
			BigDecimal peSD = new BigDecimal(existPSD);				
			balancePrincipalAmt = new BigDecimal(lonbal);
			overDuePrincipalAmt = new BigDecimal(lonDu);
			sdAdviceAmount=reSD.subtract(peSD);	
			sdAdviceAmt=myFormatter.parse(sdAdviceAmount.toString());
			request.setAttribute("SD_ADVICE_AMOUNT", myFormatter.format(sdAdviceAmt));	
	    }	    
	    String exQry=" select LOAN_BALANCE_PRINCIPAL,LOAN_OVERDUE_PRINCIPAL,SD_ADVICE_AMOUNT,DEAL_SD_CHARGES,EXPOSURE_AMOUNT,TERM_LOAN_AMOUNT,INCLUDE_EXPOSURE,EXPOSURE_WITH_SD " +
	    " from UNDER_WRITER_SEARCH_TEMP_DATA where deal_id='"+CommonFunction.checkNull(dealId).trim()+"' AND USER_ID='"+CommonFunction.checkNull(userId).trim()+"'";
	    logger.info("Exposure Query is    :  "+exQry);
		ArrayList getGroupExposureDataDetail = ConnectionDAO.sqlSelect(exQry);
		for(int i=0;i<getGroupExposureDataDetail.size();i++)
		{
			ArrayList data=(ArrayList)getGroupExposureDataDetail.get(i);
			if(CommonFunction.checkNull(hGroupId).trim().equalsIgnoreCase(""))
		    {
				if(CommonFunction.checkNull(data.get(0)).trim().equalsIgnoreCase(""))
				{
					request.setAttribute("LOAN_BALANCE_PRINCIPAL","0.00");
				}
				else
				{
					balPrincipal =myFormatter.parse(CommonFunction.checkNull(data.get(0)).trim());
					request.setAttribute("LOAN_BALANCE_PRINCIPAL", myFormatter.format(balPrincipal));
				}			
				if(CommonFunction.checkNull(data.get(1)).trim().equalsIgnoreCase(""))
				{
					request.setAttribute("LOAN_OVERDUE_PRINCIPAL","0.00");
				}
				else
				{
					overDuePrincipal =myFormatter.parse(CommonFunction.checkNull(data.get(1)).trim());
					request.setAttribute("LOAN_OVERDUE_PRINCIPAL", myFormatter.format(overDuePrincipal));
				}
				if(CommonFunction.checkNull(data.get(2)).trim().equalsIgnoreCase(""))
				{
					request.setAttribute("SD_ADVICE_AMOUNT","0.00");
				}
				else
				{
					sdAdviceAmt=myFormatter.parse(CommonFunction.checkNull(data.get(2)).trim());
					request.setAttribute("SD_ADVICE_AMOUNT", myFormatter.format(sdAdviceAmt));			    	
				}
				balancePrincipalAmt = new BigDecimal(balPrincipal.toString());
				overDuePrincipalAmt = new BigDecimal(overDuePrincipal.toString());
				sdAdviceAmount = new BigDecimal(sdAdviceAmt.toString());
		    }
			if(CommonFunction.checkNull(data.get(3)).trim().equalsIgnoreCase(""))
			{
				request.setAttribute("DEAL_SD_CHARGES","0.00");
			}
			else
			{
				dealSDCharge=myFormatter.parse(CommonFunction.checkNull(data.get(3)).trim());
				request.setAttribute("DEAL_SD_CHARGES", myFormatter.format(dealSDCharge));			    	
			}			
			if(CommonFunction.checkNull(data.get(5)).trim().equalsIgnoreCase(""))
			{
				request.setAttribute("TERM_LOAN_AMOUNT","0.00");
			}
			else
			{
				loanAmt=myFormatter.parse(CommonFunction.checkNull(data.get(5)).trim());
				request.setAttribute("TERM_LOAN_AMOUNT", myFormatter.format(loanAmt));			    	
			}
			
			// Exposure Logic start
			String IncludeExposure=CommonFunction.checkNull(data.get(6)).trim();
			String exposureWithSD=CommonFunction.checkNull(data.get(7)).trim();
			String exposureAmt=CommonFunction.checkNull(data.get(5)).trim();//Default Loan Amount
			if(CommonFunction.checkNull(exposureAmt).trim().equalsIgnoreCase(""))
				exposureAmt="0.00";
			
			dealSDChargeAmt = new BigDecimal(dealSDCharge.toString());
			loanAmount = new BigDecimal(loanAmt.toString());
			eposureAmount = new BigDecimal("0.00");
						
			eposureAmount=loanAmount;
			if(CommonFunction.checkNull(IncludeExposure).trim().equalsIgnoreCase("Y"))
			{
				if(CommonFunction.checkNull(exposureWithSD).trim().equalsIgnoreCase("Y"))
				{
					eposureAmount=balancePrincipalAmt.add(overDuePrincipalAmt).subtract(sdAdviceAmount).subtract(dealSDChargeAmt).add(loanAmount);
				}
				else
				{
					eposureAmount=balancePrincipalAmt.add(loanAmount);
				}
			}
			request.setAttribute("EXPOSURE_AMOUNT", myFormatter.format(eposureAmount));
			
		}			
		return mapping.findForward("groupExposureDetail");
   
}
	//Anil
	
		public ActionForward getEMIAmountPerMonth(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)throws Exception {	
		logger.info(" In the AjaxActionForCP----------");
		
		logger.info("In getEMIAmountPerMonth.....");
		HttpSession session = request.getSession();
		boolean flag=false;
		String userId="";
		String branch="";
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			branch=userobj.getBranchId();
		}else{
			logger.info("here in getEMIAmountPerMonth method of AjaxActionForCP action the session is out-------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String dealId = CommonFunction.checkNull(session.getAttribute("dealId"));
		CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 		//changed by asesh
	    ArrayList list=dao.getEMIAmount(dealId);
	    logger.info("listsize()::::::::::::::"+list.size());	   
	   
	    if(list.size()>0)
		{
	    	request.setAttribute("list", list);
		}
	    
		return mapping.findForward("getEMIAmountDetail");
}
   
		public ActionForward getDueDayNextDueDateDetail(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
		throws Exception {
		logger.info("In AjaxActionforCP Class---------getDueDayNextDueDateDetail");
		
		HttpSession session =  request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in getDueDayNextDueDateDetail method of AjaxActionforCP  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String repayEffectiveDate=CommonFunction.checkNull(request.getParameter("repayEffectiveDate"));
		
		logger.info(" In getDueDayNextDueDateDetail ---"+repayEffectiveDate);
		CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 		//changed by asesh
		ArrayList dueDayList=dao.fetchDueDayNextDate(repayEffectiveDate);
		request.setAttribute("dueDayList", dueDayList);
		logger.info("getDueDayNextDueDateDetail    Size:---"+dueDayList);
		return mapping.findForward("dueDayListSuccess");
	}
	
	public ActionForward getDueDayDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	throws Exception {

		logger.info("In AjaxActionforCP Class---------getDueDayDetail");
		
		HttpSession session =  request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in getDueDayDetail method of AjaxActionforCP  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String repayEffectiveDate=CommonFunction.checkNull(request.getParameter("repayEffectiveDate"));
		String cycleDate=CommonFunction.checkNull(request.getParameter("cycleDate"));
		logger.info(" In getDueDayDetail ---"+repayEffectiveDate+"cycleDate: "+cycleDate);
		CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 		//changed by asesh
		ArrayList dueDayList=dao.fetchDueDay(repayEffectiveDate,cycleDate);
		request.setAttribute("dueDayList", dueDayList);
		logger.info("getDueDayDetail    Size:---"+dueDayList);
		return mapping.findForward("dueDayListSuccess");
	}

// Start By Anil
		public ActionForward getDueDayNextDueDateDetailForEmiCalc(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) throws Exception 
		{
		logger.info("In AjaxActionforCP Class---------getDueDayNextDueDateDetailForEmiCalc");
		HttpSession session =  request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in getDueDayNextDueDateDetailForEmiCalc method of AjaxActionforCP  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String repayEffectiveDate=CommonFunction.checkNull(request.getParameter("repayEffectiveDate"));
		
		logger.info(" In getDueDayNextDueDateDetailForEmiCalc ---"+repayEffectiveDate);
		//CreditProcessingDAO dao = new CreditProcessingDAOImpl();
		CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 		//changed by anil
		ArrayList dueDayList=dao.fetchDueDayNextDateForEmiCalc(repayEffectiveDate);
		request.setAttribute("dueDayList", dueDayList);
		logger.info("getDueDayNextDueDateDetailForEmiCalc    Size:---"+dueDayList);
		return mapping.findForward("dueDayListSuccessForEmiCalc");
	}
		
		public ActionForward getDueDayDetailForEmiCalc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
		throws Exception {
		logger.info("In AjaxActionforCP Class---------getDueDayDetailForEmiCalc");
		HttpSession session =  request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in getDueDayDetailForEmiCalc method of AjaxActionforCP  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String repayEffectiveDate=CommonFunction.checkNull(request.getParameter("repayEffectiveDate"));
		String cycleDate=CommonFunction.checkNull(request.getParameter("cycleDate"));
		logger.info(" In getDueDayDetailForEmiCalc ---"+repayEffectiveDate+"cycleDate: "+cycleDate);
		//CreditProcessingDAO dao = new CreditProcessingDAOImpl();
        CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 		//changed by anil
		ArrayList dueDayList=dao.fetchDueDayForEmiCalc(repayEffectiveDate,cycleDate);
		request.setAttribute("dueDayList", dueDayList);
		logger.info("getDueDayDetailForEmiCalc    Size:---"+dueDayList);
		return mapping.findForward("dueDayListSuccessForEmiCalc");
		}
		
		public ActionForward checkRelationshipManage(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		logger.info("In AjaxActionforCP Class---------checkRelationshipManage");
		HttpSession session = request.getSession();
		boolean flag = false;
		UserObject userobj = (UserObject) session.getAttribute("userobject");
		if (userobj == null) {
			logger
					.info("here in checkRelationshipManage method of AjaxActionforCP  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		// for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag = "";
		if (sessionId != null) {
			strFlag = UserSessionCheck.checkSameUserSession(userobj, sessionId
					.toString(), "", request);
		}

		logger.info("strFlag .............. " + strFlag);
		if (!strFlag.equalsIgnoreCase("")) {
			if (strFlag.equalsIgnoreCase("sameUserSession")) {
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			} else if (strFlag.equalsIgnoreCase("BODCheck")) {
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String relationManager = CommonFunction.checkNull(request
				.getParameter("relationManager"));
		String relationOfficer = CommonFunction.checkNull(request
				.getParameter("lbxUserSearchId"));

		logger.info(" In relationManager -------------" + relationManager);
		logger.info(" In relationOfficer -------------" + relationOfficer);
		// CreditProcessingDAO dao = new CreditProcessingDAOImpl();
		CreditProcessingDAO dao = (CreditProcessingDAO) DaoImplInstanceFactory
				.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
		logger.info("Implementation class: " + dao.getClass()); // changed by
		// anil
		ArrayList relanMangerList = dao.getRelationshipManager(relationManager,
				relationOfficer);
		request.setAttribute("list", relanMangerList);
		logger.info("checkRelationshipManage    Size:---" + relanMangerList);
		return mapping.findForward("relationshipManagerList");
	}
	// End By Anil
		public ActionForward getFinancialInstName(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
		throws Exception {

			logger.info("In AjaxActionforCP Class---------getFinancialInstName");
			
			HttpSession session =  request.getSession();
			boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			if(userobj==null){
				logger.info("here in getFinancialInstName method of AjaxActionforCP  action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			String financialInst=CommonFunction.checkNull(request.getParameter("financialInst"));
			logger.info(" In financialInst ---"+financialInst);
			CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	        logger.info("Implementation class: "+dao.getClass()); 		//changed by asesh
			ArrayList finInstitutionList=dao.fetchFinancialInstName(financialInst);
			request.setAttribute("finInstitutionList", finInstitutionList);
			logger.info("getFinancialInstName    Size:---"+finInstitutionList.size());
			return mapping.findForward("financialInstName");
		}

		public ActionForward getFleetDataList(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
		throws Exception {

			logger.info("In AjaxActionforCP Class---------getFleetDataList");
			
			HttpSession session =  request.getSession();
			boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			String bDate=null;
			if(userobj==null){
				logger.info("here in getFleetDataList method of AjaxActionforCP  action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			else
			{
				bDate=userobj.getBusinessdate();
			}
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			String lbxLoanNoHid=CommonFunction.checkNull(request.getParameter("lbxLoanNoHid"));
			logger.info(" In lbxLoanNoHid ---"+lbxLoanNoHid);
			CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	        logger.info("Implementation class: "+dao.getClass()); 		//changed by asesh
			ArrayList fleetDataList=dao.fetchFleetDataList(lbxLoanNoHid,bDate);
			request.setAttribute("fleetDataList", fleetDataList);
			logger.info("fleetDataList    Size:---"+fleetDataList.size());
			return mapping.findForward("fleetDataList");
		}
		public ActionForward getCountryStateDistrictTahsilValue(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
		throws Exception {

			logger.info("In AjaxActionforCP Class---------getCountryStateDistrictTahsilValue");
			
			HttpSession session =  request.getSession();
			boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			String bDate=null;
			if(userobj==null){
				logger.info("here in getCountryStateDistrictTahsilValue method of AjaxActionforCP  action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			else
			{
				bDate=userobj.getBusinessdate();
			}
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			String lbxPincode=CommonFunction.checkNull(request.getParameter("lbxPincode"));
			logger.info(" In lbxPincode ---"+lbxPincode);
			CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	        logger.info("Implementation class: "+dao.getClass()); 		//changed by asesh
			ArrayList countryStateDistrictTahsilValue=dao.getCountryStateDistrictTahsilValue(lbxPincode);
			ArrayList defaultcountry=dao.getdefaultcountry();
			if (countryStateDistrictTahsilValue.size()==0)
			{
				countryStateDistrictTahsilValue.add(new CollateralVo());
			}
			request.setAttribute("countryStateDistrictTahsilValue", countryStateDistrictTahsilValue);
			request.setAttribute("defaultcountry",defaultcountry);
			logger.info("countryStateDistrictTahsilValue    Size:---"+countryStateDistrictTahsilValue.size());
			return mapping.findForward("countryStateDistrictTahsilValues");
		}

//Rohit Changes for ach Starts....
		public ActionForward fetchACHCustomerDetail(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
		throws Exception{
		logger.info("In AjaxActionforCP Class---------fetchACHCustomerDetail");
		HttpSession session =  request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in fetchACHCustomerDetail method of AjaxActionforCP  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String functionId="";
		if(session.getAttribute("functionId")!=null)
		{
			functionId=session.getAttribute("functionId").toString();
		}
		logger.info("functionId: "+functionId);
		
		String dealId=CommonFunction.checkNull(request.getParameter("hidDealId"));
		logger.info(" In fetchACHCustomerDetail ---"+dealId);
		ACHCapturingDAO achCapturingDAO=(ACHCapturingDAO)DaoImplInstanceFactory.getDaoImplInstance(ACHCapturingDAO.IDENTITY);
		ArrayList customerDetailList=achCapturingDAO.fetchACHCustomerDetails(dealId,functionId);
		request.setAttribute("achCustomerList", customerDetailList);
		logger.info("fetchACHCustomerDetail    Size:---"+customerDetailList);
		return mapping.findForward("achCustomerList");
		}
//Rohit end..
		//pooja code for Pincode 
		public ActionForward getCoAppCountryStateDistrictTahsilValue(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
		throws Exception {

			logger.info("In AjaxActionforCP Class---------getCountryStateDistrictTahsilValue");
			
			HttpSession session =  request.getSession();
			boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			String bDate=null;
			if(userobj==null){
				logger.info("here in getCountryStateDistrictTahsilValue method of AjaxActionforCP  action the session is out----------------");
				return mapping.findForward("sessionOut");
}
			else
			{
				bDate=userobj.getBusinessdate();
			}
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			String coApplbxPincode=CommonFunction.checkNull(request.getParameter("coApplbxPincode"));
			logger.info(" In coApplbxPincode ---"+coApplbxPincode);
			CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	        logger.info("Implementation class: "+dao.getClass()); 		//changed by asesh
			ArrayList coAppcountryStateDistrictTahsilValue=dao.getCoAppCountryStateDistrictTahsilValue(coApplbxPincode);
			ArrayList defaultcountry=dao.getdefaultcountry();
			if (coAppcountryStateDistrictTahsilValue.size()==0)
			{
				coAppcountryStateDistrictTahsilValue.add(new CreditProcessingLeadDetailDataVo());
			}
			request.setAttribute("coAppcountryStateDistrictTahsilValue", coAppcountryStateDistrictTahsilValue);
			request.setAttribute("defaultcountry",defaultcountry);
			logger.info("coAppcountryStateDistrictTahsilValue    Size:---"+coAppcountryStateDistrictTahsilValue.size());
			return mapping.findForward("coAppcountryStateDistrictTahsilValue");
		}
		//pooja code for Pincode 
		public ActionForward getGaurCountryStateDistrictTahsilValue(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
		throws Exception {

			logger.info("In AjaxActionforCP Class---------getGaurCountryStateDistrictTahsilValue");
			
			HttpSession session =  request.getSession();
			boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			String bDate=null;
			if(userobj==null){
				logger.info("here in getGaurCountryStateDistrictTahsilValue method of AjaxActionforCP  action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			else
			{
				bDate=userobj.getBusinessdate();
			}
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			String gaurlbxPincode=CommonFunction.checkNull(request.getParameter("gaurlbxPincode"));
			logger.info(" In gaurlbxPincode ---"+gaurlbxPincode);
			CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	        logger.info("Implementation class: "+dao.getClass()); 		//changed by asesh
			ArrayList gaurcountryStateDistrictTahsilValue=dao.getGaurCountryStateDistrictTahsilValue(gaurlbxPincode);
			ArrayList defaultcountry=dao.getdefaultcountry();
			if (gaurcountryStateDistrictTahsilValue.size()==0)
			{
				gaurcountryStateDistrictTahsilValue.add(new CreditProcessingLeadDetailDataVo());
			}
			request.setAttribute("gaurcountryStateDistrictTahsilValue", gaurcountryStateDistrictTahsilValue);
			request.setAttribute("defaultcountry",defaultcountry);
			logger.info("gaurcountryStateDistrictTahsilValue    Size:---"+gaurcountryStateDistrictTahsilValue.size());
			return mapping.findForward("gaurcountryStateDistrictTahsilValue");
		}
		
		public ActionForward getApplicantAddress(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
		throws Exception {

			logger.info("In AjaxActionforCP Class---------getApplicantAddress");
			
			HttpSession session =  request.getSession();
			boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			String bDate=null;
			if(userobj==null){
				logger.info("here in getApplicantAddress method of AjaxActionforCP  action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			else
			{
				bDate=userobj.getBusinessdate();
			}
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			String leadId=CommonFunction.checkNull(request.getParameter("leadId"));
			logger.info(" In leadId ---"+leadId);
			PreDealDao dao=(PreDealDao)DaoImplInstanceFactory.getDaoImplInstance(PreDealDao.IDENTITY);
	        logger.info("Implementation class: "+dao.getClass()); 		//changed by asesh
			ArrayList applicantAddress=dao.getCopyApplicantAddress(leadId);
			
			request.setAttribute("applicantAddress", applicantAddress);
			
			
			return mapping.findForward("copyApplicantAddress");
		}
}
