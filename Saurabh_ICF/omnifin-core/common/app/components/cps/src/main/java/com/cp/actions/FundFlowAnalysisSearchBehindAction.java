package com.cp.actions;

/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
import java.util.ArrayList;
import java.util.logging.Logger;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.validator.DynaValidatorForm;

import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.fundFlowDao.FundFlowAnalysisDAO;
import com.cp.vo.CommonDealVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;


/** 
 * MyEclipse Struts
 * Creation date: 09-12-2011
 *   
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class FundFlowAnalysisSearchBehindAction extends Action {
	private static final Logger logger = Logger.getLogger(FundFlowAnalysisSearchBehindAction.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		logger.info("In FundFlowAnalysisSearchBehindAction.........");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String strFlag="";
		String userId="";
		String branchId="";
		if (userobj!=null)
		{
			userId=userobj.getUserId();
			branchId=userobj.getBranchId();
		}else{
			logger.info("here in execute method of FundFlowAnalysisSearchBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
	
		
	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		CommonDealVo vo = new CommonDealVo();
		DynaValidatorForm CommonDealDynaValidatorForm= (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, CommonDealDynaValidatorForm);
		int currentPageLink = 0;
		logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
		
		logger.info("current page link ................+++++ "+request.getParameter("d-49520-p"));
		
		vo.setCurrentPageLink(currentPageLink);
		vo.setBranchId(branchId);
		

		if(CommonFunction.checkNull(vo.getReportingToUserId()).equalsIgnoreCase(""))
					{ 
						vo.setReportingToUserId(userId);
					   //logger.info("When user id is not selected by the user:::::"+userId);
					}

		//vo.setUserId(userobj.getUserName());
		if(session.getAttribute("fundFlowAuthor")!=null && session.getAttribute("fundFlowAuthor").toString().equalsIgnoreCase("A"))
		{
			vo.setRecStatus("F");
			vo.setFundFlowDealStatus("F");
		}
		else
		{
			vo.setRecStatus("P");
			vo.setFundFlowDealStatus("P");
		}
		FundFlowAnalysisDAO dao=(FundFlowAnalysisDAO)DaoImplInstanceFactory.getDaoImplInstance(FundFlowAnalysisDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass());
		ArrayList<CommonDealVo> fundFlowBehindDetails = dao.fundFlowSearchGetDetailBehind(vo,request);
		if(fundFlowBehindDetails.size()>0)
		{
			int count=0;
			logger.info("FundFlowAnalysisSearchBehindAction....list: "+fundFlowBehindDetails.size());
			for(int i=0;i<fundFlowBehindDetails.size();i++){
				logger.info("header: "+fundFlowBehindDetails.size());
				CommonDealVo vo1=fundFlowBehindDetails.get(i);
				count=vo1.getTotalRecordSize();
					logger.info("vaue of my new count:ssssss:::::"+vo1.getTotalRecordSize());
			
			}
			if(count>0)
		    request.setAttribute("list", fundFlowBehindDetails);
			request.setAttribute("listNew","");
			
		    
		}
		else
			
		{
			
			request.setAttribute("sms","N");
		}
	   logger.info("In FundFlowAnalysisSearchBehindAction....list"+fundFlowBehindDetails.size());
	    
		if(CommonFunction.checkNull(request.getAttribute("flag")).toString().equalsIgnoreCase("yes")){
			request.setAttribute("sms","No");
		}
		return mapping.findForward("fundFlowSearch");
	}
}