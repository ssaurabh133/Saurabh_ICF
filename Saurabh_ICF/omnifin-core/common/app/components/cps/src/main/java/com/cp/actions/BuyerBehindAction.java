/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/**
 * MyEclipse Struts Creation date: 04-04-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class BuyerBehindAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(BuyerBehindAction.class.getName());
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward buyerBehindDetail(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		HttpSession session = request.getSession();

		logger.info("In BuyerBehindAction (buyerBehindDetail) to open buyer.jsp page ");

		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in buyerBehindDetail method of BuyerBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String dealId = "";
		CreditProcessingDAO detail=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+detail.getClass()); 			// changed by asesh
		//CreditProcessingDAO detail = new CreditProcessingDAOImpl();
		ArrayList<Object> detailcountryList = detail.getAddressList();
		session.setAttribute("detailcountryList", detailcountryList);

		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}

		logger.debug("In BuyerBehindAction(buyerBehindDetail) DealId "
				+ dealId);

		CreditProcessingDAO creditDAO=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+creditDAO.getClass()); 			// changed by asesh
		//CreditProcessingDAO creditDAO = new CreditProcessingDAOImpl();

		if (dealId != null && !dealId.equalsIgnoreCase("")) {

			ArrayList<Object> showdetails = creditDAO.getBuyerDetailsAll("B",
					"B", dealId);
			logger
					.info("In BuyerBehindAction(buyerBehindDetail) arrayList(showdetails)  "
							+ showdetails);
			session.setAttribute("showdetails", showdetails);
			return mapping.findForward("success");
		} else {
			logger.info("In BuyerBehindAction(buyerBehindDetail) Back");
			request.setAttribute("back", "B");
			return mapping.findForward("backToFirst");
		}
	}

	public ActionForward modifyBuyerDetails(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		logger.info("In BuyerBehindAction (modifyBuyerDetails) Show Details for Modifying ");

		HttpSession session = request.getSession();

		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in modifyBuyerDetails method of BuyerBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String dealId = "";

		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		logger.debug("In BuyerBehindAction(modifyBuyerDetails) DealId "
				+ dealId);
		CreditProcessingDAO details=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+details.getClass()); 			// changed by asesh
		//CreditProcessingDAO details = new CreditProcessingDAOImpl();
		String addrId = CommonFunction.checkNull(request
				.getParameter("primaryId"));
		logger.info("In modify address id of buyer................... "
				+ addrId);
		ArrayList<Object> buyerList = details
				.modifyBuyerDetailsAll("B", addrId);
		ArrayList<Object> showdetails = details.getBuyerDetailsAll("B", "B",
				dealId);
		session.setAttribute("showdetails", showdetails);
		request.setAttribute("buyerList", buyerList);

		logger
				.info("In BuyerBehindAction (modifyBuyerDetails) arrayList(buyerList) "
						+ buyerList + "arrayList(showdetails) " + showdetails);

		return mapping.findForward("success");

	}

	public ActionForward deleteBuyerDetails(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		logger.info("In BuyerBehindAction(deleteBuyerDetails)for deleting buyer Details");

		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in deleteBuyerDetails method of BuyerBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String dealId = "";
		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		logger.debug("In BuyerBehindAction(deleteBuyerDetails) DealId "
				+ dealId);
		boolean status = false;
		boolean status1 = false;
		boolean status2 = false;
		CreditProcessingDAO detail=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+detail.getClass()); 			// changed by asesh
		//CreditProcessingDAO detail = new CreditProcessingDAOImpl();
		String bpType = "";
		
		
		if(request.getParameter("bpType")!=null && !CommonFunction.checkNull(request.getParameter("bpType")).equalsIgnoreCase(""))
		 {
			bpType = request.getParameter("bpType"); 
			 session.setAttribute("bpType", bpType);
		 }
		 else
		 {
			 bpType = session.getAttribute("bpType").toString(); 
			 session.removeAttribute("bpType");
		 }
		
		 String id[] = null;
		 if(request.getParameterValues("chk")!=null && !CommonFunction.checkNull(request.getParameterValues("chk")).equalsIgnoreCase(""))
		 {
			 id = request.getParameterValues("chk"); 
			 session.setAttribute("id", id);
		 }
		 else
		 {
			 id = (String[]) session.getAttribute("id"); 
			 session.removeAttribute("id");
		 }
		
		String buyerName="";
		String confirmStatus=request.getParameter("confirmStatus");
		logger.info("confirmStatus: "+confirmStatus);
		 if(CommonFunction.checkNull(confirmStatus).equalsIgnoreCase("N"))
		 {
			 buyerName= detail.checkBuyerVerifInit(id,dealId,bpType); 
		 }
		 logger.info("buyerName: "+buyerName);
		 if(CommonFunction.checkNull(buyerName).equalsIgnoreCase(""))
		 {
			 status1=detail.deleteVerificationInitBuyer(dealId,id,bpType); 
			 status=detail.deleteBuyerDetails(id, bpType);
			 status2=detail.deleteMarketVerif(dealId);
		 }
		 else
		 {
			 request.setAttribute("buyerName", buyerName);
		 }
		
		if (status) {
			session.removeAttribute("businessRelationship");
			session.removeAttribute("businessPartnerName");
			session.removeAttribute("averageMonthlySales_Purchase");
			session.removeAttribute("paymentTerms");
			session.removeAttribute("productType");
			session.removeAttribute("vintageOfRelationshipInMonths");
			session.removeAttribute("dist");
			session.removeAttribute("showdetails");
			request.setAttribute("msg", "S");

		}
		else
		{
			request.setAttribute("msg", "N");
		}
		CreditProcessingDAO creditDAO=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+creditDAO.getClass()); 			// changed by asesh
		//CreditProcessingDAO creditDAO = new CreditProcessingDAOImpl();

		ArrayList<Object> showdetails = creditDAO.getBuyerDetailsAll("B", "B",dealId);
		session.setAttribute("showdetails", showdetails);
		logger.info("In BuyerBehindAction(buyerBehindDetail) arrayList(showdetails)  "
						+ showdetails);
		return mapping.getInputForward();
	}

}