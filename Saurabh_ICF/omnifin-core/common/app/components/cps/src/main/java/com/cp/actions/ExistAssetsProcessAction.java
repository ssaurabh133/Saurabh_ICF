/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.cm.dao.CreditManagementDAO;
import com.cm.dao.LoanInitiationDAO;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.ExistingAssetVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/**
 * MyEclipse Struts Creation date: 06-11-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class ExistAssetsProcessAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(ExistAssetsProcessAction.class.getName());
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward searchAsset(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		logger.info("ExistAssetsProcessAction in searchAsset ");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();				
		}else{
			logger.info("here in searchAsset method of ExistAssetsProcessAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 			// changed by asesh
		//CreditProcessingDAO service = new CreditProcessingDAOImpl();
		DynaValidatorForm ExistingAssetCollateralDynaValidatorForm = (DynaValidatorForm) form;
		

		
		ExistingAssetVo sh = new ExistingAssetVo();
		// sh.setUserId(""+userId);
		// sh.setMakerDate(CommonFunction.dateFormatConvert(userobj.getLastLoginTime()));
		org.apache.commons.beanutils.BeanUtils.copyProperties(sh,ExistingAssetCollateralDynaValidatorForm);
		logger.info("In ExistAssetsProcessACtion AssetDesc from form    :   "+ExistingAssetCollateralDynaValidatorForm.getString("assetDesc"));
		Object pcustId=session.getAttribute("custID");
		if(pcustId!=null)
		{
			sh.setApplicantCustId(pcustId.toString());
		}
		logger.info("In ExistAssetsProcessACtion sh.getAssetDesc()   :   "+sh.getAssetDesc());
		ArrayList existasset = service.getAssets(sh);
		logger
				.info("ExistAssetsProcessAction in searchAsset size of existasset"
						+ existasset.size());
		if (existasset.size() == 0) {
			request.setAttribute("searchResult", "E");
		}
		request.setAttribute("existasset", existasset);
		request.setAttribute("openType", sh.getOpenType());
		return mapping.getInputForward();
	}

	public ActionForward saveAsset(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		logger.info("Inside ExistAssetsProcessAction......saveAsset");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
				
		}else{
			logger.info("here in saveAsset method of ExistAssetsProcessAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		
		ExistingAssetVo vo = new ExistingAssetVo();
		DynaValidatorForm ExistingAssetCollateralDynaValidatorForm = (DynaValidatorForm) form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,
				ExistingAssetCollateralDynaValidatorForm);
		//change by sachin
		CreditManagementDAO dao=(CreditManagementDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditManagementDAO.IDENTITY);
	     logger.info("Implementation class: "+dao.getClass());

		//end by sachin
		
//		CreditManagementDAO dao = new CreditManagementDAOImpl();
		LoanInitiationDAO dao1=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+dao1.getClass());
		
		//logger.info("openType value from ExistingAssetCollateralDynaValidatorForm: " + ExistingAssetCollateralDynaValidatorForm.getString(""));
		logger.info("openType value from VO: " + vo.getOpenType());
		String commonId = "";
		String openType = CommonFunction.checkNull(vo.getOpenType());
		String retStr = "";

		if (session.getAttribute("loanId") != null) {
			commonId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxIdInCM") != null) {
			commonId = session.getAttribute("maxIdInCM").toString();
		}

		if (session.getAttribute("dealId") != null) {
			commonId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			commonId = session.getAttribute("maxId").toString();
		}
		logger.info("In ExistAssetsProcessAction saveAsset id " + commonId);

		String[] assetId = request.getParameterValues("chk");

		logger.info("In ExistAssetsProcessAction saveAsset assetId "+ assetId[0]+"commonId: "+commonId+"openType: "+openType);

		boolean status = dao1.insertAsset(assetId, commonId, userId, bDate,
				openType);
		String sms = "";
		if (status) {

			sms = "S";

		} else {
			sms = "E";
		}
		request.setAttribute("sms", sms);
		if (openType.equalsIgnoreCase("D")) {
			retStr = "assetAddedForDeal";
		} else if (openType.equalsIgnoreCase("L")) {
			retStr = "assetAddedForLoan";
		}
		return mapping.findForward(retStr);
	}
}