/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.io.InputStream;
import java.sql.Connection;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.ResourceBundle;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.export.JExcelApiExporter;
import net.sf.jasperreports.engine.export.JRXlsExporterParameter;

import org.apache.commons.lang.StringEscapeUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.upload.FormFile;
import org.apache.struts.validator.DynaValidatorForm;

import com.cm.actions.UploadDocuments;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.financialDao.FinancialDAO;
import com.cp.vo.FinancialAnalysisParamVo;
import com.cp.vo.FinancialAnalysisVo;

import java.text.DateFormat;
import java.text.SimpleDateFormat;

import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 11-18-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class FinancialOthersProcessAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(FinancialOthersProcessAction.class.getName());
	DecimalFormat myFormatter = new DecimalFormat("###,###.####");
	ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");
	public ActionForward saveFinancialOthersDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
			 logger.info("In FinancialOthersProcessAction.............................. ");
		  	boolean flag =false;
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
		    String userId="";
			String bgDate="";
			String idss="";
			String resultstr="E";
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bgDate=userobj.getBusinessdate();
			}else{
				logger.info("here in saveFinancialOthersDetails method of FinancialOthersProcessAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			FinancialDAO dao=(FinancialDAO)DaoImplInstanceFactory.getDaoImplInstance(FinancialDAO.IDENTITY);
			logger.info("Implementation class: "+dao.getClass());
			DynaValidatorForm FinancialAnalysisOTHDynaValidatorForm = (DynaValidatorForm) form;
			FinancialAnalysisVo vo=new FinancialAnalysisVo();
			FinancialAnalysisParamVo fvo=new FinancialAnalysisParamVo();
		
			org.apache.commons.beanutils.BeanUtils.copyProperties(vo, FinancialAnalysisOTHDynaValidatorForm);
			org.apache.commons.beanutils.BeanUtils.copyProperties(fvo, FinancialAnalysisOTHDynaValidatorForm);
			Date date;
			DateFormat formatter ; 
			formatter = new SimpleDateFormat("dd-MM-yyyy");
			ArrayList paramList = dao.getParamDetailDetails("O");
			date =(Date)formatter.parse(bgDate);
			SimpleDateFormat simpleDateformat=new SimpleDateFormat("yyyy");
			int year =Integer.parseInt(simpleDateformat.format(date));
			int previousYear = 0;
			int j = dao.getYearForFinancialAnalysis();				 
			String[] analysisYear=new String[6];
			 analysisYear[1]=year-(j-1)+0+"";
			 analysisYear[2]=year-(j-1)+1+"";
			 analysisYear[3]=year-(j-1)+2+"";
			 analysisYear[4]=year-(j-1)+3+"";
			 analysisYear[5]=year-(j-1)+4+"";
			for(int i=1; i<=j; i++){
				 previousYear = year - i;
				 String setYear = "year"+(j-i);
				 if(i != j){
					 request.setAttribute(setYear, previousYear);
				 }else{
					 request.setAttribute("year"+j, year);
				 }
			 }
			 for(int i=j+1; i<=5; i++){
					 year  = year + 1;
					 request.setAttribute("year"+i, year);
			}
			 vo.setAnalysisYear(analysisYear);
			 fvo.setAnalysisYear(analysisYear);
				 
		
			//code for upload functionality start here  
			String source=CommonFunction.checkNull(request.getParameter("source"));
			String status=null;
			String dealId=CommonFunction.checkNull(session.getAttribute("financialDealId")).trim();
			vo.setLbxDealNo(dealId);
			fvo.setLbxDealNo(dealId);
			if(CommonFunction.checkNull(source).trim().equalsIgnoreCase("U"))
			{
				status=uploadFile(request,response,(FormFile)FinancialAnalysisOTHDynaValidatorForm.get("docFile"),userId,bgDate,dealId,"O");
				logger.info("Uploaded and processing status  :  "+status);
				if(CommonFunction.checkNull(status).trim().equalsIgnoreCase(""))
				{
					ArrayList data=dao.getUploadedData(dealId,userId,"O");
					vo.setpCode((String[])data.get(0));
					vo.setYear1((String[])data.get(1));
					vo.setYear2((String[])data.get(2));
					vo.setYear3((String[])data.get(3));
					vo.setYear4((String[])data.get(4));
					vo.setYear5((String[])data.get(5));		
					
				}
				else
				{
					String uploadError="";
					if(CommonFunction.checkNull(status).trim().equalsIgnoreCase("MXE"))
						uploadError=resource.getString("lbl.maxCount");//MXE
					else if(CommonFunction.checkNull(status).trim().equalsIgnoreCase("MNE"))
						uploadError=resource.getString("lbl.smsk");//MXE
					else if(CommonFunction.checkNull(status).trim().equalsIgnoreCase("FNE"))
						uploadError=resource.getString("lbl.smks");//FNE
					else if(CommonFunction.checkNull(status).trim().equalsIgnoreCase("NUE"))
						uploadError=resource.getString("lbl.numericError");//NUE
					else if(CommonFunction.checkNull(status).trim().equalsIgnoreCase("CLE"))
						uploadError=resource.getString("lbl.formatInvalid");//CLE
					else if(CommonFunction.checkNull(status).trim().equalsIgnoreCase("PRE"))
						uploadError=resource.getString("lbl.errorHeader");//PRE
					else if(CommonFunction.checkNull(status).trim().equalsIgnoreCase("UPE"))
						uploadError=resource.getString("msg.notsuccess");//UPE
					else
					{
						if(CommonFunction.checkNull(status).trim().length()>4)
							uploadError=status.substring(4);
					}				
					request.setAttribute("uploadError",uploadError);
					if(paramList.size()>0)
					    request.setAttribute("paramList", paramList);
					return mapping.getInputForward();
				}
			}
			//code for upload functionality end here
			
	    	
		vo.setUserId(userId);
		vo.setBusinessDate(bgDate);
		
		String update = "";
		if(request.getParameter("update")!=null)
		  {
			  update = request.getParameter("update");
			  vo.setUpdate(request.getParameter("update"));
		  }
		/*Added By Sarvesh Start*/
		 String lbxCustomerId = CommonFunction.checkNull(request.getParameter("lbxCustomerId"));
		  vo.setCustomerName(lbxCustomerId);
		  vo.setCustomerId(lbxCustomerId);
		  String customerType = CommonFunction.checkNull(request.getParameter("entityCustomerType"));
		  if(customerType.equalsIgnoreCase("APPLICANT"))
			  customerType="PRAPPL";
		  else if(customerType.equalsIgnoreCase("CO APPLICANT"))
			  customerType="COAPPL";
		  
		  vo.setCustomerType(customerType);
		  
		  /*Added By Sarvesh ended*/
		  String chk = "";
			String str = "";
			String bcd = "Y";
			 String[] a = null;
			ArrayList paramList1 = dao.getParamDetailDetails("B");
			String pCode1[] = vo.getpCode();
			if(source.equals("U"))
			{
			a=new String[pCode1.length];
				for(int k=0;k<pCode1.length; k++)
				{
					/*bcd.charAt(k);
					a = bcd.split("\\|");*/
					a[k]="Y";
				}
				
			}
			else
			{
				str=CommonFunction.checkNull(request.getParameter("chkValue"));
				a = str.split("\\|");
			}
          /*for(int i=0;i<a.length;i++){
              chk+=a[i];
          }*/
     
         vo.setChk(a);
		  
		  
		  /*Added By Sarvesh ended*/
		  logger.info("lbxCustomerId------"+lbxCustomerId);
		  request.setAttribute("lbxCustomerId", CommonFunction.checkNull(request.getParameter("lbxCustomerId")));
			request.setAttribute("lbxCustomerRoleType", CommonFunction.checkNull(request.getParameter("lbxCustomerRoleType")));
			request.setAttribute("entityCustomerType", CommonFunction.checkNull(request.getParameter("entityCustomerType")));
			request.setAttribute("entityCustomerName", CommonFunction.checkNull(request.getParameter("entityCustomerName")));
		
		String ids=dao.saveBalanceSheet(vo);
		if(vo.getNegativeActive().equalsIgnoreCase("Y") ){
			idss=dao.saveBalanceSheetWithMinus(fvo);
		}
		if(ids!=null && !ids.equalsIgnoreCase(""))
		{
			resultstr="S";
			String pCode[] = vo.getpCode();
			String year1[] = vo.getYear1();
			String year2[] = vo.getYear2();
		    String year3[] = vo.getYear3();
		    String year4[] = vo.getYear4();
		    String year5[] = vo.getYear5();
		    String financialId[] = vo.getFinancialIds();
		    int len = vo.getFinancialIds().length;
		    ArrayList paramCodeValues = new ArrayList();
		    String[] idForParam=ids.split(",");
				
			for(int i=0,k=0;i<pCode.length;i++)
			{
				String id="";
				k=0;
				FinancialAnalysisVo vo1=new FinancialAnalysisVo();
				vo1=dao.getBalanceSheetParamCode(pCode[i], vo1);
				vo1.setParameCode(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(pCode[i])).trim());
				vo1.setFirstYear(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(year1[i])).trim());
				vo1.setSecondYear(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(year2[i])).trim());
				vo1.setThirdYear(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(year3[i])).trim());
				vo1.setFourthYear(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(year4[i])).trim());
				vo1.setFifthYear(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(year5[i])).trim());
				vo1.setChkValue(a[i]);
				if(vo.getFinancialIds()!=null && vo.getFinancialIds().length>0)
				{
					if(financialId[i].length()>0)
					{
						vo1.setFinancialId(financialId[i]);
						len--;
					}
					else
					{
						id=idForParam[k++];
						for(int s=1; s< 5 ;s++)
						{
							id=id+","+idForParam[k++];
						}
						vo1.setFinancialId(id);
					}
				}
				else
				{
					id=idForParam[k++];
					for(int s=1; s< 5 ;s++)
					{
						id=id+","+idForParam[k++];
					}
					vo1.setFinancialId(id);
				}
				paramCodeValues.add(vo1);
			}
			request.setAttribute("otherAllDetailsByDeal", paramCodeValues);
			if(paramList.size()>0)
			{
			    request.setAttribute("paramList", paramList);
			}
		}
	/*if(idss!=null && !idss.equalsIgnoreCase("")){
			
//			ArrayList bankAcAnalysisList = fundFlowAnalysisDAO.getBankAccountAnalysisDetails("",vo.getLbxDealNo());
//			request.setAttribute("bankAcAnalysisList", bankAcAnalysisList);
			resultstr="S";
			Date date;
			DateFormat formatter ; 
			formatter = new SimpleDateFormat("dd-MM-yyyy");
			ArrayList paramList = dao.getParamDetailDetails("P");
			//ArrayList paramMinusList = dao.getParamMinusDetails("P");
			
			String  businessDate =bgDate;
				date =(Date)formatter.parse(businessDate);
			
				 System.out.println("businessDate: " +businessDate);
				 SimpleDateFormat simpleDateformat=new SimpleDateFormat("yyyy");
				 int year =Integer.parseInt(simpleDateformat.format(date));


//Code by sanjog for set previous & forwarded Year
				 int previousYear = 0;
				 int j = dao.getYearForFinancialAnalysis();				 
				 for(int i=1; i<=j; i++){
					 previousYear = year - i;
					 String setYear = "year"+(j-i);
					 if(i != j){
						 request.setAttribute(setYear, previousYear);
					 }else{
						 request.setAttribute("year"+j, year);
					 }
					 logger.info("============================"+request.getAttribute("year"+i));
				 }
				 for(int i=j+1; i<=5; i++){
					 year  = year + 1;
					 request.setAttribute("year"+i, year);
					 logger.info("============================"+request.getAttribute("year"+i));
				 }
				 
//Code by sanjog for set previous & forwarded Year
			

			  String pCode[] = fvo.getpCode1();
			    String year1[] = fvo.getYear();
			    String year2[] = fvo.getYear6();
			    String year3[] = fvo.getYear7();
			    String year4[] = fvo.getYear8();
			    String year5[] = fvo.getYear9();
			    String financialId[] = fvo.getFinancialIds1();
			    int len = fvo.getFinancialIds1().length;
			    ArrayList minusParamCodeValues = new ArrayList();
			    String[] idForParam=idss.split(",");
			    logger.info("idsssssssss in action********************************* "+idss);
			    for(int i=0,k=0;i<pCode.length;i++)
			    {
					String id="";
					k=0;
					FinancialAnalysisParamVo fvo1=new FinancialAnalysisParamVo();
					fvo1=dao.getBalanceSheetNegativeParamCode(pCode[i],fvo1);
					
//					 ArrayList pval= ConnectionDAO.sqlSelect("SELECT PARAM_NAME,IFNULL(AUTO_CALCULATED,'N'),FINANCIAL_FORMULA FROM cr_financial_param WHERE PARAM_CODE='"+pCode[i]+"'");
//						for(int t=0;t<pval.size();t++){
//							ArrayList subPval=(ArrayList)pval.get(t);
//							if(subPval.size()>0)
//							{
//								fvo1.setNegativeparamName((CommonFunction.checkNull(subPval.get(0))).trim());
//								fvo1.setAutoCalculated((CommonFunction.checkNull(subPval.get(1))).trim());
//								fvo1.setFinancialFormula((CommonFunction.checkNull(subPval.get(2))).trim());
//				                
//							}
//						}
					 fvo1.setNegativeParamCode(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(pCode[i])).trim());
					 logger.info("year1[i]"+year1[i]);
					 fvo1.setFirstYear(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(year1[i])).trim());
					 logger.info("year2[i]"+year2[i]);
					 fvo1.setSecondYear(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(year2[i])).trim());
					 logger.info("year3[i]"+year3[i]);
					 fvo1.setThirdYear(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(year3[i])).trim());
					 logger.info("year4[i]"+year4[i]);
					 fvo1.setFourthYear(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(year4[i])).trim());
					 logger.info("year5[i]"+year5[i]);
					 fvo1.setFifthYear(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(year5[i])).trim());
					 if(fvo.getFinancialIds1()!=null && fvo.getFinancialIds1().length>0){
						 if(financialId[i].length()>0){
							if(len > 0 )
							{
								 logger.info("financialId[i]"+financialId[i]);
								 fvo1.setFinancialId(financialId[i]);
								len--;
							}
							else
							{
								logger.info("idForParam[k ]"+idForParam[k++]);
								id=idForParam[k++];
								for(int s=1; s< 5 ;s++)
								{
									id=id+","+idForParam[k++];
								}
								logger.info("id-----------"+id);
								fvo1.setFinancialId(id);
							}
						}
					 }
					 else
						{
								id=idForParam[k++];
								for(int s=1; s< 5 ;s++)
								{
									id=id+","+idForParam[k++];
								}
								fvo1.setFinancialId(id);
							
						}
						
						minusParamCodeValues.add(fvo1);
					
				}
				
				//session.setAttribute("profitLossParamCodeValues", paramCodeValues);
				session.setAttribute("otherAllMinusDetailsByDeal", minusParamCodeValues);
				//session.removeAttribute("profitLossAllDetailsByDeal");
					
		 if(paramList.size()>0)
		 {
		    request.setAttribute("paramList", paramList);
		 }
		 if(paramMinusList.size()>0)
		 {
		    request.setAttribute("paramMinusList", paramMinusList);
		    logger.info("paramMinusList size------------->"+paramMinusList.size());
		 }
		}*/
			
	request.setAttribute("sms", resultstr);
	request.setAttribute("reloadFlag","Y");
			 return mapping.getInputForward();
	}
	//method added by neeraj
	public ActionForward generateErrorLog(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response) throws Exception
	{
		logger.info("In generateErrorLog() of FinancialBalanceSheetAction");
	  	
	    HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
	    String userId="";
	    String p_company_name="";
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			p_company_name=userobj.getConpanyName()+" ";	
				
		}
		else
		{
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		Connection connectDatabase = ConnectionDAO.getConnection();		
		Map<Object,Object> hashMap = new HashMap<Object,Object>();
		try
		{
			ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");
			String dbType=resource.getString("lbl.dbType");
			String reportPath="/reports/";
			String reportName="financialAnalysisUploadError";
			
			if(dbType.equalsIgnoreCase("MSSQL"))
				reportPath=reportPath+"MSSQLREPORTS/";
			else
				reportPath=reportPath+"MYSQLREPORTS/";
			
			
			String p_company_logo=getServlet().getServletContext().getRealPath("/")+"reports/logo.bmp";
			String dealId=(String)session.getAttribute("financialDealId");
			String sourceType="O";
						
			hashMap.put("p_company_name",p_company_name );
			hashMap.put("p_company_logo",p_company_logo );
			hashMap.put("dealId",dealId );
			hashMap.put("sourceType",sourceType );
			hashMap.put("userId",userId );
			
			logger.info("In generateErrorLog() of FinancialBalanceSheetAction  p_company_name  :  "+p_company_name);
			logger.info("In generateErrorLog() of FinancialBalanceSheetAction  p_company_logo  :  "+p_company_logo);
			logger.info("In generateErrorLog() of FinancialBalanceSheetAction  dealId          :  "+dealId);
			logger.info("In generateErrorLog() of FinancialBalanceSheetAction  sourceType      :  "+sourceType);
			logger.info("In generateErrorLog() of FinancialBalanceSheetAction  userId          :  "+userId);
			logger.info("In generateErrorLog() of FinancialBalanceSheetAction  Report Name     :  "+reportPath+reportName+".jasper");
			
			InputStream reportStream = getServlet().getServletConfig().getServletContext().getResourceAsStream(reportPath+reportName+".jasper");
			JasperPrint jasperPrint = null;
			
			jasperPrint = JasperFillManager.fillReport(reportStream, hashMap,connectDatabase);
			methodForExcel(reportName,hashMap,connectDatabase,response, jasperPrint);
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			ConnectionDAO.closeConnection(connectDatabase, null);
			hashMap.clear();			
		}		
		return null;
	}
	public void methodForExcel(String reportName,Map<Object,Object> hashMap,Connection connectDatabase,HttpServletResponse response,JasperPrint jasperPrint)throws Exception
	{
		String excelReportFileName=reportName+".xls";		
		JExcelApiExporter exporterXLS = new JExcelApiExporter();
		exporterXLS.setParameter(JRXlsExporterParameter.JASPER_PRINT, jasperPrint);
		exporterXLS.setParameter(JRXlsExporterParameter.IS_DETECT_CELL_TYPE, Boolean.TRUE);
		exporterXLS.setParameter(JRXlsExporterParameter.IS_WHITE_PAGE_BACKGROUND, Boolean.FALSE);
		exporterXLS.setParameter(JRXlsExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS, Boolean.TRUE);
		exporterXLS.setParameter(JRXlsExporterParameter.OUTPUT_STREAM, response.getOutputStream());
		response.setHeader("Content-Disposition", "attachment;filename=" + excelReportFileName);
		response.setContentType("application/vnd.ms-excel");
		exporterXLS.exportReport();
	}
	//method added by neeraj
	String uploadFile(HttpServletRequest request,HttpServletResponse response,FormFile myFile,String makerName,String makerDate,String dealId,String source)
	{		
		logger.info("Inside uploadFile");
		String result="";
		boolean uploadStatus=false;	
		try
		{
			uploadStatus=UploadDocuments.docUpload(request,myFile);			
			if(uploadStatus)
				result=UploadDocuments.readExcelforFinancialUpload(request,response,myFile.toString(),makerName,makerDate,dealId,source);
			else
				result="UPE";
		}
		catch (Exception e) 
		{
			result="PRE";
			e.printStackTrace();}
		return result;
			
	}
}