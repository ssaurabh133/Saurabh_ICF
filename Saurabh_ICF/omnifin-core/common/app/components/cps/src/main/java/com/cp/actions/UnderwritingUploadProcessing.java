/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.connect.UploadDocument;
import com.cp.dao.CreditProcessingDAO;
import com.connect.ConnectionDAO;
import com.cp.daoImplMYSQL.DmsCapturingDAOImpl;
import java.util.Map;
import org.apache.commons.lang.StringUtils;
import com.cp.vo.UnderwritingDocUploadVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/**
 * MyEclipse Struts Creation date: 05-05-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class UnderwritingUploadProcessing extends DispatchAction {
	private static final Logger logger = Logger.getLogger(UnderwritingUploadProcessing.class.getName());
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward uploadUnderwritingDocData(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception 
			{
				logger.info("Inside UnderwritingUploadProcessing(uploadUnderwritingDocData)");
				HttpSession session = request.getSession();
				boolean flag=false;
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				String userName="";
				if(userobj!=null)
					userName=userobj.getUserId();
				else
					return mapping.findForward("sessionOut");
				Object sessionId = session.getAttribute("sessionID");
				ServletContext context = getServlet().getServletContext();
				String strFlag="";
				  String flagg = "";
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				if(!"".equalsIgnoreCase(strFlag))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				String flag1=null;
				String uploadBy=CommonFunction.checkNull(request.getParameter("uploadBy"));
				if(session.getAttribute("cmdocupload")!=null)
					flag1=session.getAttribute("cmdocupload").toString();
						
		
		String dealId = (String) session.getAttribute("dealId");		
		UnderwritingDocUploadVo uwDocVo = new UnderwritingDocUploadVo();
		DynaValidatorForm UnderwriterUploadDynaValidatorForm = (DynaValidatorForm) form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(uwDocVo,
		UnderwriterUploadDynaValidatorForm);
		uwDocVo.setUserName("" + userName);
		uwDocVo.setDealId(dealId);
		
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 	//changed by asesh
		boolean uploadStatus = false;
		boolean status = false;
		ArrayList uploadedDocList=new ArrayList();
		ArrayList uploadDocListForCp=new ArrayList();
		int limitNoOfDocument=service.getLimitOfDocumentUpload();
		String message="You can Upload "+limitNoOfDocument+" Documents only";
		if(CommonFunction.checkNull(flag1).equalsIgnoreCase(""))
		{
			if (service.checkUploadFeasibility(uwDocVo.getDealId())) 
			{
				if(CommonFunction.checkNull(uploadBy).equalsIgnoreCase("webCam"))
				{
					request.setAttribute("fileDes",uwDocVo.getDocDescription());
					uploadStatus = UploadDocument.webDocUpload(request, uwDocVo.getWebString(), uwDocVo.getDealId());
				}
				else
				{
				uploadStatus = UploadDocument.docUpload(request, uwDocVo.getDocFile(), uwDocVo.getDealId());
				}
				uwDocVo.setFileName(request.getAttribute("fileName").toString());
				uwDocVo.setDocPath(request.getAttribute("filePath").toString());
				request.setAttribute("limitOfDocument", "limitOfDocument");
			} 
			else 
			{
				uploadedDocList = service.getUploadUnderwritingData(dealId);
				request.setAttribute("uploadedDocList", uploadedDocList);
				request.setAttribute("message", "FiveDocOnly");
				request.setAttribute("limitOfDocument", message);
				
			}
		}
		else
		{
			if (service.checkUploadFeasibilityCM(uwDocVo.getDealId())) 
			{
				if(CommonFunction.checkNull(uploadBy).equalsIgnoreCase("webCam"))
				{
					request.setAttribute("fileDes",uwDocVo.getDocDescription());
					uploadStatus = UploadDocument.webDocUpload(request, uwDocVo.getWebString(), uwDocVo.getDealId());
				}
				else{
				uploadStatus = UploadDocument.docUpload(request, uwDocVo.getDocFile(), uwDocVo.getDealId());
				}
				uwDocVo.setFileName(request.getAttribute("fileName").toString());
				uwDocVo.setDocPath(request.getAttribute("filePath").toString());
				request.setAttribute("limitOfDocument", "limitOfDocument");
			} 
			else 
			{
				uploadedDocList = service.getUploadUnderwritingDataForCm(dealId);
				uploadDocListForCp = service.getUploadUnderwritingDataForCmCp(dealId);
				request.setAttribute("uploadedDocList", uploadedDocList);
				request.setAttribute("uploadDocListForCp", uploadDocListForCp);
				request.setAttribute("message", "FiveDocOnly");
				request.setAttribute("limitOfDocument", message);
			}
		}
		if (uploadStatus) 
		{
			if(CommonFunction.checkNull(flag1).equalsIgnoreCase(""))
			{
				status=service.uploadUnderwritingData(uwDocVo);
				uploadedDocList = service.getUploadUnderwritingData(dealId);
			}
			else
			{
				status=service.uploadUnderwritingDataForCm(uwDocVo);
				uploadedDocList = service.getUploadUnderwritingDataForCm(dealId);
				uploadDocListForCp = service.getUploadUnderwritingDataForCmCp(dealId);
			}
			if(status)
				request.setAttribute("message", "UploadSuccessful");
				request.setAttribute("limitOfDocument", "limitOfDocument");
			
			if(uploadedDocList.size()>0){
				request.setAttribute("uploadedDocList", uploadedDocList);
			}
			if(uploadDocListForCp.size() > 0)
			{
				request.setAttribute("uploadDocListForCp", uploadDocListForCp);
			}
		
		}
		else
		{
			if(CommonFunction.checkNull(flag1).equalsIgnoreCase(""))
			{
				 uploadedDocList = service.getUploadUnderwritingData(dealId);
				 request.setAttribute("uploadedDocList", uploadedDocList);
			}
			else
			{
					uploadedDocList = service.getUploadUnderwritingDataForCm(dealId);
					uploadDocListForCp = service.getUploadUnderwritingDataForCmCp(dealId);
					request.setAttribute("uploadedDocList", uploadedDocList);
					request.setAttribute("uploadDocListForCp", uploadDocListForCp);
			}
		}
		
		 String dmsProviderQuery = "SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='DMS_PROVIDER'";
		    String dmsProvider = ConnectionDAO.singleReturn(dmsProviderQuery);
		    if (StringUtils.isBlank(dmsProvider)) {
		      dmsProvider = "";
		    }
		    request.setAttribute("dmsProvider", dmsProvider);
		    Map dmsCredential = CommonFunction.getDmsCredential();
		    String functionId = CommonFunction.checkNull(session.getAttribute("functionId"));
		    request.setAttribute("dmsCredential", dmsCredential);
		    Map map = null;
		    if (CommonFunction.checkNull(flag1).equalsIgnoreCase(""))
		    {
		      map = service.getDMSDetails("DC", dealId, "APPL", "0", userName, "0");
		    }
		    else {
		      map = service.getDMSDetails("LIM", dealId, "APPL", "0", userName, "0");
		    }
		    request.setAttribute("dmsDetailsMap", map);
		
		
		
		
		
		service=null;
		uwDocVo=null;
		flag1=null;
		userName=null;
		strFlag=null;
		
		
		
		if ((StringUtils.equals("4000116", functionId)) || (StringUtils.equals("500000104", functionId)))
	    {
	      flagg = "InternalSuccess";
	      logger.info("inside 4000116--------------------------------------===" + functionId);
	    }
	    else {
	      logger.info("outside 400116--------------------------------------===" + functionId);
	      request.setAttribute("dmsCredential", dmsCredential);
	      request.setAttribute("dmsProvider", dmsProvider);

	      flagg = "success";
	    }

	    logger.info("flag valueeeeeeeeeeeeeeeeeee--------------------------------------===" + flagg);
	    return mapping.findForward(flagg);

	 
	}

	public ActionForward deleteUploadDocData(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		logger
				.info("In deleteUploadDocData in Underwriting Upload Processing Action");
		boolean deleteStatus = false;

		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("in deleteUploadDocData method of UnderwritingUploadProcessing action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!"".equalsIgnoreCase(strFlag))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//sachin
		String flag1=null;
		if(session.getAttribute("cmdocupload")!=null)
		{
		  flag1=session.getAttribute("cmdocupload").toString();
		}
		//sachin

		String dealId = (String) session.getAttribute("dealId");
		UnderwritingDocUploadVo uwDocVo = new UnderwritingDocUploadVo();
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 	//changed by asesh
		//CreditProcessingDAO service = new CreditProcessingDAOImpl();
		String doc_name[] = request.getParameterValues("chk");
		logger.info("Printing Doc Id : " + doc_name);
		for (int p = 0; p < doc_name.length; p++) {
			//logger.info("Document id:--" + doc_name[p]);
			if(CommonFunction.checkNull(flag1).equalsIgnoreCase("")){

			deleteStatus = service.deleteDocumentUploadEntry(doc_name[p],dealId);
			}
			else{
				deleteStatus = service.deleteDocumentUploadEntryForCm(doc_name[p],dealId);
			}
			if (deleteStatus) {
				request.setAttribute("message", "deletedoc");
				request.setAttribute("limitOfDocument", "limitOfDocument");
				deleteStatus = UploadDocument.docDelete(doc_name[p], dealId);
				
			}
		}
		//sachin
		ArrayList uploadedDocList=new ArrayList();
		ArrayList uploadDocListForCp=new ArrayList();
		if(CommonFunction.checkNull(flag1).equalsIgnoreCase("")){
		uploadedDocList = service.getUploadUnderwritingData(dealId);
		}
		else{
			uploadedDocList = service.getUploadUnderwritingDataForCm(dealId);
			uploadDocListForCp = service.getUploadUnderwritingDataForCmCp(dealId);
		}
		if(uploadedDocList.size()>0){
		request.setAttribute("uploadedDocList", uploadedDocList);
		}
		if(uploadDocListForCp.size() > 0)
		{
			request.setAttribute("uploadDocListForCp", uploadDocListForCp);
		}
//end by sachin
		
		dealId=null;
		uwDocVo=null;
		service=null;
		strFlag=null;
		flag1=null;
		form.reset(mapping, request);
		return mapping.findForward("delete");
	}

	public ActionForward downloadUnderwritingFile(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		String downloadPath = null;
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here downloadUnderwritingFile method of UnderwritingUploadProcessing  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!"".equalsIgnoreCase(strFlag))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//sachin
		String flag1=null;
		if(session.getAttribute("cmdocupload")!=null)
		{
		  flag1=session.getAttribute("cmdocupload").toString();
		}
		//sachin

		String dealId =null;
		String source=request.getParameter("source");
		if(source==null)
			dealId=(String) session.getAttribute("dealId");
		else
			dealId=(String) request.getParameter("dealId");
		String fileName = request.getParameter("fileName");
	    String lbxDocId = request.getParameter("lbxDocId");
		//sachin
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 	//changed by asesh
		//CreditProcessingDAO service = new CreditProcessingDAOImpl();
		if(CommonFunction.checkNull(flag1).equalsIgnoreCase("")){
		downloadPath = service.getFileInfo(dealId, fileName);
		 Map map = service.getFileInfo(lbxDocId);
	      downloadPath = (String)map.get("DOCUMENT_PATH");
	      fileName = (String)map.get("FILE_NAME");
		}
		else{
			downloadPath = service.getFileInfoForCm(dealId, fileName);
			if(CommonFunction.checkNull(downloadPath).equalsIgnoreCase(""))
			{
				downloadPath = service.getFileInfoForCmCp(dealId, fileName);
			}
		}
		
		//end by sachin
		logger.info("File Name downloadPath: "+downloadPath);
		if (!downloadPath.equals(null)) {
			downloadPath = downloadPath + "\\" + fileName;
			logger.info("Download Path of File is: " + downloadPath);
			String fileType = fileName.substring(fileName.lastIndexOf(".") + 1,
					fileName.length());
			fileType=fileType.toLowerCase();
			logger.info("File Type: " + fileType);
			logger.info("File Name: " + fileName);
			

			if (fileType.trim().equalsIgnoreCase("xls")) {
				logger.info("File Type in xls: " + fileType);
				response.setContentType("application/vnd.ms-excel");
			} else if (fileType.trim().equalsIgnoreCase("xlsx")) {
				logger.info("File Type in xlsx: " + fileType);
				response.setContentType("application/vnd.ms-excel");
			} else if (fileType.trim().equalsIgnoreCase("pdf")) {
				logger.info("File Type in pdf: " + fileType);
				response.setContentType("application/pdf");
			}
			else if (fileType.trim().equalsIgnoreCase("doc")) {
				logger.info("File Type in doc: " + fileType);
				response.setContentType("application/msword");
			} else if (fileType.trim().equalsIgnoreCase("docx")) {
				logger.info("File Type in docx: " + fileType);
				response.setContentType("application/msword");
			} else if (fileType.trim().equalsIgnoreCase("jpg")) {
				logger.info("File Type in jpg: " + fileType);
				response.setContentType("image/jpeg");
			}
		    else if (fileType.trim().equalsIgnoreCase("jpeg")) {
			logger.info("File Type in jpeg: " + fileType);
			response.setContentType("image/jpeg");
		  }
			else if (fileType.trim().equalsIgnoreCase("zip")||fileType.trim().equalsIgnoreCase("rar")) {
				logger.info("File Type in zip/rar: " + fileType);
				response.setContentType("application/x-zip-compressed");
			} 
			
			else if (fileType.trim().equalsIgnoreCase("rtf")) {
				logger.info("File Type in rtf: " + fileType);
				response.setContentType("application/rtf");
			} 
			else if (fileType.trim().equalsIgnoreCase("csv")) {
				logger.info("File Type in csv: " + fileType);
				response.setContentType("text/comma-separated-values");
			} 
			else if (fileType.trim().equalsIgnoreCase("pptx")) {
				logger.info("File Type in pptx: " + fileType);
				response.setContentType("application/mspowerpoint");
			} 
			else if (fileType.trim().equalsIgnoreCase("ppt")) {
				logger.info("File Type in ppt: " + fileType);
				response.setContentType("application/mspowerpoint");
			} 
			else if (fileType.trim().equalsIgnoreCase("tif")) {
				logger.info("File Type in tif: " + fileType);
				response.setContentType("image/tif");
			} 
			else {
				logger.info("File Type in default: " + fileType);
				response.setContentType("application/octet-stream");
			}
			response.setHeader("Content-Disposition", "attachment;fileName="
					+ fileName);

			// executing download function
			UploadDocument.downloadFile(request, response, downloadPath);

		}
		flag1=null;
		fileName=null;
		
		strFlag=null;
	
		return null;
	}
	
	public ActionForward downloadUploadedFileOmniFin(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		String downloadPath = null;
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here downloadUploadedFileOmniFin method of UnderwritingUploadProcessing  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!"".equalsIgnoreCase(strFlag))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
	

		String txnId=CommonFunction.checkNull(request.getParameter("txnId"));
		String txnType = CommonFunction.checkNull(request.getParameter("txnType"));
		String fileName = CommonFunction.checkNull(request.getParameter("fileName"));
		//sachin
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 	//changed by asesh
		//CreditProcessingDAO service = new CreditProcessingDAOImpl();
		
		downloadPath = service.getDownLoadFileInfoOmniFin(txnId,txnType,fileName);
				
		//end by sachin
		logger.info("File Name downloadPath: "+downloadPath);
		if (!CommonFunction.checkNull(downloadPath).equalsIgnoreCase("")) {
			downloadPath = downloadPath + "\\" + fileName;
			logger.info("Download Path of File is: " + downloadPath);
			String fileType = fileName.substring(fileName.lastIndexOf(".") + 1,
					fileName.length());
			fileType=fileType.toLowerCase();
			logger.info("File Type: " + fileType);
			logger.info("File Name: " + fileName);
			

			if (fileType.trim().equalsIgnoreCase("xls")) {
				logger.info("File Type in xls: " + fileType);
				response.setContentType("application/vnd.ms-excel");
			} else if (fileType.trim().equalsIgnoreCase("xlsx")) {
				logger.info("File Type in xlsx: " + fileType);
				response.setContentType("application/vnd.ms-excel");
			} else if (fileType.trim().equalsIgnoreCase("pdf")) {
				logger.info("File Type in pdf: " + fileType);
				response.setContentType("application/pdf");
			}
			else if (fileType.trim().equalsIgnoreCase("doc")) {
				logger.info("File Type in doc: " + fileType);
				response.setContentType("application/msword");
			} else if (fileType.trim().equalsIgnoreCase("docx")) {
				logger.info("File Type in docx: " + fileType);
				response.setContentType("application/msword");
			} else if (fileType.trim().equalsIgnoreCase("jpg")) {
				logger.info("File Type in jpg: " + fileType);
				response.setContentType("image/jpeg");
			}
		    else if (fileType.trim().equalsIgnoreCase("jpeg")) {
			logger.info("File Type in jpeg: " + fileType);
			response.setContentType("image/jpeg");
		  }
			else if (fileType.trim().equalsIgnoreCase("zip")||fileType.trim().equalsIgnoreCase("rar")) {
				logger.info("File Type in zip/rar: " + fileType);
				response.setContentType("application/x-zip-compressed");
			} 
			
			else if (fileType.trim().equalsIgnoreCase("rtf")) {
				logger.info("File Type in rtf: " + fileType);
				response.setContentType("application/rtf");
			} 
			else if (fileType.trim().equalsIgnoreCase("csv")) {
				logger.info("File Type in csv: " + fileType);
				response.setContentType("text/comma-separated-values");
			} 
			else if (fileType.trim().equalsIgnoreCase("pptx")) {
				logger.info("File Type in pptx: " + fileType);
				response.setContentType("application/mspowerpoint");
			} 
			else if (fileType.trim().equalsIgnoreCase("ppt")) {
				logger.info("File Type in ppt: " + fileType);
				response.setContentType("application/mspowerpoint");
			} 
			else if (fileType.trim().equalsIgnoreCase("tif")) {
				logger.info("File Type in tif: " + fileType);
				response.setContentType("image/tif");
			} 
			else {
				logger.info("File Type in default: " + fileType);
				response.setContentType("application/octet-stream");
			}
			response.setHeader("Content-Disposition", "attachment;fileName="
					+ fileName);

			// executing download function
			UploadDocument.downloadFile(request, response, downloadPath);
	
		}
		fileName=null;
		strFlag=null;
		txnType=null;
		txnId=null;
		return null;
	}
	 public ActionForward documentUpload(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception
	  {
	    String dealId = "";
	    String loanId = "";
	    String dealId1 = "";
	    logger.info("Inside UnderwritingUploadBehind(execute)");
	    HttpSession session = request.getSession();
	    UserObject userobj = (UserObject)session.getAttribute("userobject");
	    if (userobj == null) {
	      logger.info("here in execute method of UnderwritingUploadBehind action the session is out----------------");
	      return mapping.findForward("sessionOut");
	    }
	    Object sessionId = session.getAttribute("sessionID");

	    ServletContext context = getServlet().getServletContext();
	    String strFlag = "";
	    if (sessionId != null)
	    {
	      strFlag = UserSessionCheck.checkSameUserSession(userobj, sessionId.toString(), "", request);
	    }

	    logger.info("strFlag .............. " + strFlag);
	    if (!"".equalsIgnoreCase(strFlag))
	    {
	      if (strFlag.equalsIgnoreCase("sameUserSession"))
	      {
	        context.removeAttribute("msg");
	        context.removeAttribute("msg1");
	      }
	      else if (strFlag.equalsIgnoreCase("BODCheck"))
	      {
	        context.setAttribute("msg", "B");
	      }
	      return mapping.findForward("logout");
	    }

	    String userName = userobj.getUserId();
	    String flag1 = null;
	    String txnType = "DC";
	    String entityType = "APPL";
	    if (session.getAttribute("cmdocupload") != null)
	    {
	      flag1 = session.getAttribute("cmdocupload").toString();
	    }
	    if (request.getParameter("cmdocupload") != null)
	    {
	      flag1 = request.getParameter("cmdocupload").toString();
	      session.setAttribute("cmdocupload", flag1);
	    }

	    String instrumentId = null;
	    if (session.getAttribute("instrumentId") != null)
	    {
	      instrumentId = session.getAttribute("instrumentId").toString();
	    }
	    if (request.getParameter("instrumentId") != null)
	    {
	      instrumentId = request.getParameter("instrumentId").toString();
	      session.setAttribute("instrumentId", instrumentId);
	    }

	    if (!CommonFunction.checkNull(flag1).equalsIgnoreCase("")) {
	      txnType = "LIM";
	      entityType = "APPL";
	      if (session.getAttribute("loanId") != null)
	      {
	        dealId = session.getAttribute("loanId").toString();
	      } else if (session.getAttribute("maxId") != null) {
	        dealId = session.getAttribute("maxId").toString();
	      }

	    }
	    else
	    {
	      txnType = "DC";
	      entityType = "APPL";

	      if (session.getAttribute("dealId") != null)
	      {
	        dealId = (String)session.getAttribute("dealId");
	      } else if (session.getAttribute("maxId") != null) {
	        dealId = (String)session.getAttribute("maxId");
	      }
	      if (request.getParameter("dealId") != null)
	      {
	        dealId = request.getParameter("dealId");

	        session.setAttribute("dealId", dealId);
	      }
	    }
	    if (session.getAttribute("loan_id") != null) {
	      dealId = (String)session.getAttribute("loan_id");
	    }
	    logger.info("Inside UnderwritingUploadBehind(execute) dealId " + dealId);

	    DmsCapturingDAOImpl service = new DmsCapturingDAOImpl();
	    logger.info("Implementation class: " + service.getClass());

	    String functionId = (String)session.getAttribute("functionId");
	    if (CommonFunction.checkNull(functionId).trim().equalsIgnoreCase(""))
	      functionId = "0";
	    int id = Integer.parseInt(functionId);
	    logger.info("In  DocUploadBehindSearchAction: " + id);
	    String LoanId = request.getParameter("dealId");

	    logger.info("ASDWWWWWWW" + LoanId);
	    String loanDisbursalId = "";
	    if (4000116 == id) {
	      loanDisbursalId = CommonFunction.checkNull(session.getAttribute("loanDisbursalId"));
	      if (StringUtils.isBlank(loanDisbursalId)) {
	        loanDisbursalId = "";
	      }
	      loanDisbursalId = loanDisbursalId.trim();
	    }
	    if (StringUtils.isNotBlank(loanDisbursalId)) {
	      request.setAttribute("loanDisbursalId", loanDisbursalId);
	    }

	    ArrayList dealHeader = new ArrayList();
	    ArrayList uploadedDocList = new ArrayList();
	    ArrayList uploadDocListForCp = new ArrayList();
	    if (CommonFunction.checkNull(flag1).equalsIgnoreCase("")) {
	      dealHeader = service.getDealHeader(dealId);
	      uploadedDocList = service.getUploadUnderwritingData(dealId);
	    }
	    else if (CommonFunction.checkNull(flag1).equalsIgnoreCase("paymentMaker")) {
	      dealHeader = service.getDealHeaderForCm(dealId);

	      logger.info("Inside UnderwritingUploadBehind(execute) dealId test ");

	      session.setAttribute("paymentMaker", "paymentMaker");
	    }
	    else
	    {
	      dealHeader = service.getDealHeaderForCm(dealId);

	      uploadedDocList = service.getUploadUnderwritingDataForCm(dealId);

	      if (!CommonFunction.checkNull(flag1).equalsIgnoreCase("Disbursal")) {
	        uploadDocListForCp = service.getUploadUnderwritingDataForCmCp(dealId);
	      }

	      if (CommonFunction.checkNull(flag1).equalsIgnoreCase("Disbursal")) {
	        entityType = "DRF";
	      }
	    }

	    session.setAttribute("dealHeader", dealHeader);

	    request.setAttribute("uploadedDocList", uploadedDocList);
	    logger.info("Size : " + uploadDocListForCp.size());
	    if (uploadDocListForCp.size() > 0)
	    {
	      request.setAttribute("uploadDocListForCp", uploadDocListForCp);
	    }

	    String dmsProviderQuery = "SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='DMS_PROVIDER'";
	    String dmsProvider = ConnectionDAO.singleReturn(dmsProviderQuery);
	    request.setAttribute("dmsProvider", dmsProvider);

	    Map map = service.getDMSDetails(txnType, dealId, entityType, "0", userName, "0");
	    request.setAttribute("dmsDetailsMap", map);

	    Map dmsCredential = CommonFunction.getDmsCredential();
	    request.setAttribute("dmsCredential", dmsCredential);

	    service = null;
	    flag1 = null;
	    strFlag = null;

	    logger.info(" cehck sedction 0-------------------------------------------------");
	    return mapping.findForward("uploadDocument");
	  }
}