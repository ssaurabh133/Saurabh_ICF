/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.LimitEnhancementDAO;
import com.cp.vo.LimitEnhancementVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/**
 * MyEclipse Struts Creation date: 03-03-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class LimitEnhancementAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(LimitEnhancementAction.class.getName());
	

	
	public ActionForward limitMakerForAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception
			{
				logger.info(" in limitMakerForAuthor()");
				HttpSession session = request.getSession();
				boolean flag=false;
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				if(userobj==null){
					return mapping.findForward("sessionOut");
				}
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				
				return mapping.findForward("limitMakerAuthor");	
			}
	
	public ActionForward limitAuthorForAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception
			{
				logger.info(" in limitAuthorForAuthor()");
				HttpSession session = request.getSession();
				boolean flag=false;
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				
				if(userobj==null){
					return mapping.findForward("sessionOut");
				}
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				
				return mapping.findForward("limitAuthor");	
			}
	
	
	public ActionForward openLimitMaker(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception
			{
				logger.info(" in LimitEnhancementAction(openLimitMaker)");
				HttpSession session = request.getSession();
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				
				String facilityLimitButton = CommonFunction.checkNull(ConnectionDAO.singleReturn("SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY = 'FACILITY_DETAIL_FUNCTIONALITY' "));
				
				logger.info("facilityLimitButton amandeep::"+facilityLimitButton);
				request.setAttribute("facilityLimitButton",facilityLimitButton);
				return mapping.findForward("new");	
			}
	
	public ActionForward saveLimitMaker(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception
			{
				logger.info(" in LimitEnhancementAction(saveLimitMaker)");
				HttpSession session = request.getSession();
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				
				LimitEnhancementVo vo = new LimitEnhancementVo();
				if(userobj!=null)
				{
					vo.setMakerId(userobj.getUserId());
					vo.setMakerDate(userobj.getBusinessdate());
				}
				
				DynaValidatorForm LimihanDynaValidatorForm = (DynaValidatorForm)form;
				org.apache.commons.beanutils.BeanUtils.copyProperties(vo, LimihanDynaValidatorForm);

				LimitEnhancementDAO leDAO=(LimitEnhancementDAO)DaoImplInstanceFactory.getDaoImplInstance(LimitEnhancementDAO.IDENTITY);
				logger.info("Implementation class: "+leDAO.getClass()); 	// changed by asesh
				//LimitEnhancementDAOImpl leDAO = new LimitEnhancementDAOImpl();
			
				boolean status = leDAO.insertLimitEnhancement(vo);
				logger.info("Inside saveLimitMaker Action.....displaying status...."+status);
				if(status){
					
					request.setAttribute("sms","S");
					request.setAttribute("dealID",vo.getLbxDealNo());
					request.setAttribute("loanID",vo.getLbxLoanNo());
				}
				else{
					
					request.setAttribute("sms","E");
				}
				String facilityLimitButton = CommonFunction.checkNull(ConnectionDAO.singleReturn("SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY = 'FACILITY_DETAIL_FUNCTIONALITY' "));
				logger.info("facilityLimitButton amandeep::"+facilityLimitButton);
				session.setAttribute("facilityLimitButton",facilityLimitButton);
				logger.info("status"+status);
				return mapping.findForward("saveLimit");
			}
	
	
	// method for Open Limit Enhancement Value in modify mode
	
		public ActionForward openModifyLimit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception
			{
				logger.info(" in LimitEnhancementAction(openModifyLimit)");
				HttpSession session = request.getSession();
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				
				LimitEnhancementVo vo = new LimitEnhancementVo();
							
				String dealID="";
				String loanID="";
				dealID=CommonFunction.checkNull(request.getParameter("deaId"));
				loanID=CommonFunction.checkNull(request.getParameter("loanId"));

				LimitEnhancementDAO leDAO=(LimitEnhancementDAO)DaoImplInstanceFactory.getDaoImplInstance(LimitEnhancementDAO.IDENTITY);
				logger.info("Implementation class: "+leDAO.getClass()); 	// changed by asesh
								
				ArrayList list = leDAO.limitEnhancmentValues(dealID,loanID,"P");
				request.setAttribute("list", list);
				ArrayList disList = leDAO.getValueForLimitLoanEnhancement(loanID,dealID);
				request.setAttribute("disList", disList);
				String facilityLimitButton = CommonFunction.checkNull(ConnectionDAO.singleReturn("SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY = 'FACILITY_DETAIL_FUNCTIONALITY' "));
				logger.info("facilityLimitButton amandeep::"+facilityLimitButton);
				request.setAttribute("facilityLimitButton",facilityLimitButton);
				return mapping.findForward("openLimit");
			}
		
		public ActionForward openModifyLimitForAuthor(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)	throws Exception
				{
					logger.info(" in LimitEnhancementAction(openModifyLimitForAuthor)");
					HttpSession session = request.getSession();
					UserObject userobj=(UserObject)session.getAttribute("userobject");
					Object sessionId = session.getAttribute("sessionID");
					//for check User session start
					ServletContext context = getServlet().getServletContext();
					String strFlag="";
					String loanType = "";
					if(sessionId!=null)
					{
						strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
					}
					
					logger.info("strFlag .............. "+strFlag);
					if(!strFlag.equalsIgnoreCase(""))
					{
						if(strFlag.equalsIgnoreCase("sameUserSession"))
						{
							context.removeAttribute("msg");
							context.removeAttribute("msg1");
						}
						else if(strFlag.equalsIgnoreCase("BODCheck"))
						{
							context.setAttribute("msg", "B");
						}
						return mapping.findForward("logout");
					}
					
					LimitEnhancementVo vo = new LimitEnhancementVo();
								
					String dealID="";
					String loanID="";
					dealID=CommonFunction.checkNull(request.getParameter("deaId"));
					loanID=CommonFunction.checkNull(request.getParameter("loanId"));
					loanType = CommonFunction.checkNull(request.getParameter("loanType"));
					LimitEnhancementDAO leDAO=(LimitEnhancementDAO)DaoImplInstanceFactory.getDaoImplInstance(LimitEnhancementDAO.IDENTITY);
					logger.info("Implementation class: "+leDAO.getClass()); 	// changed by asesh
									
					ArrayList list = leDAO.limitEnhancmentValues(dealID,loanID,"F");
					String facilityLimitButton = CommonFunction.checkNull(ConnectionDAO.singleReturn("SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY = 'FACILITY_DETAIL_FUNCTIONALITY' "));
					logger.info("facilityLimitButton amandeep::"+facilityLimitButton);
					session.setAttribute("facilityLimitButton",facilityLimitButton);
					
					
					session.setAttribute("limitAuthorList", list);
					session.setAttribute("sessionLoanType", loanType);
					ArrayList disList = leDAO.getValueForLimitLoanEnhancement(loanID,dealID);
					session.setAttribute("sessionDisList", disList);
					return mapping.findForward("openLimitForAuthor");
				}
		
		public ActionForward modfySaveLimit(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)	throws Exception
				{
					logger.info(" in LimitEnhancementAction(modfySaveLimit)");
					HttpSession session = request.getSession();
					UserObject userobj=(UserObject)session.getAttribute("userobject");
					Object sessionId = session.getAttribute("sessionID");
					//for check User session start
					ServletContext context = getServlet().getServletContext();
					String strFlag="";	
					if(sessionId!=null)
					{
						strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
					}
					
					logger.info("strFlag .............. "+strFlag);
					if(!strFlag.equalsIgnoreCase(""))
					{
						if(strFlag.equalsIgnoreCase("sameUserSession"))
						{
							context.removeAttribute("msg");
							context.removeAttribute("msg1");
						}
						else if(strFlag.equalsIgnoreCase("BODCheck"))
						{
							context.setAttribute("msg", "B");
						}
						return mapping.findForward("logout");
					}
					
					LimitEnhancementVo vo = new LimitEnhancementVo();
					if(userobj!=null)
					{
						vo.setMakerId(userobj.getUserId());
						vo.setMakerDate(userobj.getBusinessdate());
					}
					
					String dealID="";
					String loanID="";
					
					DynaValidatorForm LimihanDynaValidatorForm = (DynaValidatorForm)form;
					org.apache.commons.beanutils.BeanUtils.copyProperties(vo, LimihanDynaValidatorForm);

					dealID=CommonFunction.checkNull(vo.getLbxDealNo());
					loanID=CommonFunction.checkNull(vo.getLbxLoanNo());
					logger.info("dealID:----"+dealID+"loanID:======="+loanID);
					
					LimitEnhancementDAO leDAO=(LimitEnhancementDAO)DaoImplInstanceFactory.getDaoImplInstance(LimitEnhancementDAO.IDENTITY);
					logger.info("Implementation class: "+leDAO.getClass()); 	// changed by asesh
					String sms="";
					String facilityLimitButton = CommonFunction.checkNull(ConnectionDAO.singleReturn("SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY = 'FACILITY_DETAIL_FUNCTIONALITY' "));
					logger.info("facilityLimitButton amandeep::"+facilityLimitButton);
					request.setAttribute("facilityLimitButton",facilityLimitButton);
					boolean facilityStatus=checkFacilityDetails(vo); 
					String facilityQuery="select Count(1) from CR_DEAL_FACILITY_DTL where ifnull(REFRESH_FLAG_FACILITY,'YYY')<>'NNN' and deal_id='"+dealID+"' ";
					 int cnt2=Integer.parseInt(CommonFunction.checkNull(ConnectionDAO.singleReturn(facilityQuery)));
					if(cnt2==0 || facilityLimitButton.equalsIgnoreCase("N")){
					 if(facilityStatus ){					
					boolean status = leDAO.modifyLimitEnhancement(vo);
					logger.info("Inside modfySaveLimit Action.....displaying status...."+status);
					if(status){
						
						request.setAttribute("sms","M");
						ArrayList list = leDAO.limitEnhancmentValues(dealID,loanID,"F");
						request.setAttribute("list", list);

					}
					else{
						
						request.setAttribute("sms","E");
						ArrayList list = leDAO.limitEnhancmentValues(dealID,loanID,"F");
						request.setAttribute("list", "list");
					}
					  logger.info("status"+status);
					}else{
						request.setAttribute("sms","F");
						request.setAttribute("dealID",vo.getLbxDealNo());
						request.setAttribute("loanID",vo.getLbxLoanNo());
						
					}
				}else{
					request.setAttribute("sms","Z");
					request.setAttribute("dealID",vo.getLbxDealNo());
					request.setAttribute("loanID",vo.getLbxLoanNo());
				}
					return mapping.findForward("modfyLimit");
				}
		
		public ActionForward saveLimitAuthor(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)	throws Exception
				{
					logger.info(" in LimitEnhancementAction(saveLimitAuthor)");
					HttpSession session = request.getSession();
					UserObject userobj=(UserObject)session.getAttribute("userobject");
					Object sessionId = session.getAttribute("sessionID");
					//for check User session start
					ServletContext context = getServlet().getServletContext();
					String strFlag="";
					String loanType = "";
					if(sessionId!=null)
					{
						strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
					}
					
					logger.info("strFlag .............. "+strFlag);
					if(!strFlag.equalsIgnoreCase(""))
					{
						if(strFlag.equalsIgnoreCase("sameUserSession"))
						{
							context.removeAttribute("msg");
							context.removeAttribute("msg1");
						}
						else if(strFlag.equalsIgnoreCase("BODCheck"))
						{
							context.setAttribute("msg", "B");
						}
						return mapping.findForward("logout");
					}
					
					LimitEnhancementVo vo = new LimitEnhancementVo();
					if(userobj!=null)
					{
						vo.setMakerId(userobj.getUserId());
						vo.setMakerDate(userobj.getBusinessdate());
					}
					
					String DealID="";
					String LoanID="";
					String newLoanAmount="";
					DealID=CommonFunction.checkNull(request.getParameter("dealID"));
					LoanID=CommonFunction.checkNull(request.getParameter("loanID"));
					loanType=CommonFunction.checkNull(session.getAttribute("sessionLoanType"));
					logger.info("Loan Type>>>>>>>>>>>>"+loanType);
					newLoanAmount=CommonFunction.checkNull(request.getParameter("newLoanAmount"));
					logger.info("additional LoanAmount>>>>>>>>>>>>"+newLoanAmount);
					DynaValidatorForm LimihanDynaValidatorForm = (DynaValidatorForm)form;
					org.apache.commons.beanutils.BeanUtils.copyProperties(vo, LimihanDynaValidatorForm);
			
					LimitEnhancementDAO leDAO=(LimitEnhancementDAO)DaoImplInstanceFactory.getDaoImplInstance(LimitEnhancementDAO.IDENTITY);
					logger.info("Implementation class: "+leDAO.getClass()); 	// changed by asesh
					String sms="";
					vo.setNewLoanAmount(newLoanAmount);	
					boolean status = leDAO.modifyLimitForAuthor(vo,DealID,LoanID,loanType);
					logger.info("Inside saveLimitAuthor Action.....displaying status...."+status);
					if(status){
						if(CommonFunction.checkNull(vo.getDecison()).equalsIgnoreCase("A"))
							request.setAttribute("sms","A");
						if(CommonFunction.checkNull(vo.getDecison()).equalsIgnoreCase("P"))
							request.setAttribute("sms","P");
						if(CommonFunction.checkNull(vo.getDecison()).equalsIgnoreCase("X"))
							request.setAttribute("sms","X");
					}
					else{
						
						request.setAttribute("sms","E");
					}
				    logger.info("status"+status);
					return mapping.findForward("modfylimitAuthor");
				}
		
		public ActionForward modfyNewLimit(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)	throws Exception
				{
					logger.info(" in LimitEnhancementAction(modfyNewLimit)");
					HttpSession session = request.getSession();
					UserObject userobj=(UserObject)session.getAttribute("userobject");
					Object sessionId = session.getAttribute("sessionID");
					//for check User session start
					ServletContext context = getServlet().getServletContext();
					String strFlag="";	
					if(sessionId!=null)
					{
						strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
					}
					
					logger.info("strFlag .............. "+strFlag);
					if(!strFlag.equalsIgnoreCase(""))
					{
						if(strFlag.equalsIgnoreCase("sameUserSession"))
						{
							context.removeAttribute("msg");
							context.removeAttribute("msg1");
						}
						else if(strFlag.equalsIgnoreCase("BODCheck"))
						{
							context.setAttribute("msg", "B");
						}
						return mapping.findForward("logout");
					}
					
					LimitEnhancementVo vo = new LimitEnhancementVo();
					if(userobj!=null)
					{
						vo.setMakerId(userobj.getUserId());
						vo.setMakerDate(userobj.getBusinessdate());
					}
					
					DynaValidatorForm LimihanDynaValidatorForm = (DynaValidatorForm)form;
					org.apache.commons.beanutils.BeanUtils.copyProperties(vo, LimihanDynaValidatorForm);
					LimitEnhancementDAO leDAO=(LimitEnhancementDAO)DaoImplInstanceFactory.getDaoImplInstance(LimitEnhancementDAO.IDENTITY);
					logger.info("Implementation class: "+leDAO.getClass()); 	// changed by asesh
				
					boolean status = leDAO.modifySaveLimit(vo);
					logger.info("Inside saveLimitMaker Action.....displaying status...."+status);
					if(status){
						
						request.setAttribute("sms","S");
						request.setAttribute("dealID",vo.getLbxDealNo());
						request.setAttribute("loanID",vo.getLbxLoanNo());
					}
					else{
						
						request.setAttribute("sms","E");
					}
				    logger.info("status"+status);
					return mapping.findForward("saveLimit");
				}
		public boolean checkFacilityDetails(LimitEnhancementVo vo) {
			boolean status= false;
			String query1="";
			String res1="";
			try{
				String facilityLimitButton = CommonFunction.checkNull(ConnectionDAO.singleReturn("SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY = 'FACILITY_DETAIL_FUNCTIONALITY' "));
				String query="select sum(DEAL_SANCTION_AMOUNT) from cr_deal_facility_dtl where deal_id='"+vo.getLbxDealNo()+"' ";
				String res=ConnectionDAO.singleReturn(query);
				logger.info("Amount of Facility deails/Deal Loan_Details::"+res);
				if(CommonFunction.checkNull(vo.getLoanAmountType()).equalsIgnoreCase("I")){
				 query1="select OLD_DEAL_SANCTION_AMOUNT+ADDITIONAL_SANCTION_AMOUNT from cr_deal_enhancement where deal_id='"+vo.getLbxDealNo()+"' ";
				 res1=ConnectionDAO.singleReturn(query1);
				}else{
					 query1="select OLD_DEAL_SANCTION_AMOUNT-ADDITIONAL_SANCTION_AMOUNT from cr_deal_enhancement where deal_id='"+vo.getLbxDealNo()+"' ";
					 res1=ConnectionDAO.singleReturn(query1);
				}
				logger.info("Amount of Enhancement ::"+res1);
				if(facilityLimitButton.equalsIgnoreCase("Y")){
				if(CommonFunction.checkNull(res).equalsIgnoreCase(res1)){
					status=true;
					
				}
				else{
					status=false;
				}
			}else{
				status=true;
			}
			}catch(Exception e){
				e.printStackTrace();
			}
			return status;
		}
}