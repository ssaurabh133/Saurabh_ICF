/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cibil.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.cibil.dao.CibilVerificationDAO;
import com.cibil.vo.CibilVerificationVO;
import com.connect.DaoImplInstanceFactory;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 10-03-2012
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class ViewCibilDispatchAction extends DispatchAction 
{
	private static final Logger logger = Logger.getLogger(CibilVerificationInitiationDispatchAction.class.getName());
	static boolean fs = false;
	public ActionForward cibilVerificationInition(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)throws Exception 
	{
		logger.info("In cibilVerificationInition() OF CibilVerificationInitiationDispatchAction");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");		
		if(userobj==null)
		{
			logger.info("here in openSpecialCondition method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}	
		return mapping.findForward("success");
	}
	public ActionForward viewCibil(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)throws Exception 
	{
	
		logger.info("In cibilVerificationSearch() OF CibilVerificationInitiationDispatchAction");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");		
		if(userobj==null)
		{
			logger.info("here in openSpecialCondition method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}	
		CibilVerificationVO vo=new CibilVerificationVO();
		DynaValidatorForm formbeen= (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, formbeen);
		
		CibilVerificationDAO dao=(CibilVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(CibilVerificationDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 
        ArrayList gridList=dao.getCblViewCustomerGridList(vo);
        request.setAttribute("gridList",gridList);
        return mapping.findForward("success");
	}
	
	
	
	
	/*public ActionForward cibilReportGenerate(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)throws Exception 
	{
		logger.info("In cibilReportGenerate() OF CibilVerificationInitiationDispatchAction");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");	
		String businessDate="";
		if(userobj==null)
		{
			logger.info("here in openSpecialCondition method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		else
			businessDate=userobj.getBusinessdate();
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String cibilID=request.getParameter("cibilID");
		//String customerId=request.getParameter("customerId");
		CibilVerificationDAO dao=(CibilVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(CibilVerificationDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 
        String reportstatus=dao.GenerateView(cibilID);
        
        CibilVerificationVO vo=new CibilVerificationVO();
		DynaValidatorForm formbeen= (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, formbeen);
		
		vo.setLbxCibilId(cibilID);
		
		//block for report
		
		try
		{
			ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");
			
			String dateFormat=resource.getString("lbl.dateInDao");
			String dbType=resource.getString("lbl.dbType");
			
			String reportName="cibilErrorReport";
			String reporttype="H";
			
			String p_company_logo=getServlet().getServletContext().getRealPath("/")+"reports/logo.bmp";
	

			String reportPath="/reports/";
			
			
			if(dbType.equalsIgnoreCase("MSSQL"))
				reportPath=reportPath+"MSSQLREPORTS/Cibil_Reports/";
			else
				reportPath=reportPath+"MYSQLREPORTS/Cibil_Reports/";
				
			
			
			Connection connectDatabase = ConnectionDAO.getConnection();
			
			logger.info("connectDatabase : ==>> "+connectDatabase);
			
			Map<Object,Object> hashMap = new HashMap<Object,Object>();
			
			int company_id=0;
			String userID="";
			String p_company_name="";
			String userName="";
			String p_business_date="";
			
			if(userobj !=null)
			{
				p_company_name=userobj.getConpanyName()+" ";			
				userName = userobj.getUserName()+" ";
				p_business_date=userobj.getBusinessdate();
				company_id=userobj.getCompanyId();
				userID=userobj.getUserId();
			}
			else
			{
				logger.info(" in execute method of ReportActionForCP  action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			
			logger.info("reportPath : ==>> "+reportPath);
			logger.info("reportName : ==>> "+reportName);
			logger.info("reportName : ==>> "+reportPath+reportName+".jasper");
			
			

			hashMap.put("p_company_logo",p_company_logo);
			hashMap.put("p_company_name",p_company_name+" "); 
			hashMap.put("p_report_format",reporttype);
			hashMap.put("cibilId",vo.getLbxCibilId());
		
	
			
			
			InputStream reportStream = getServlet().getServletConfig().getServletContext().getResourceAsStream(reportPath+reportName+".jasper");
			
			logger.info("reportStream : ==>> "+reportStream);
			
			JasperPrint jasperPrint = null;
			
			try
			{
				jasperPrint = JasperFillManager.fillReport(reportStream, hashMap,connectDatabase);
				
				logger.info("jasperPrint : ==>> "+jasperPrint);
				

				if(reporttype.equals("H"))				
					methodForHTML(reportName,hashMap,connectDatabase,response, jasperPrint,request);
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
			finally
			{
				ConnectionDAO.closeConnection(connectDatabase, null);
				hashMap.clear();
				
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		
		//generateCibilReport(mapping,form,request,response);
		
		
		//return mapping.findForward("openReport");	
		return null;
	}
	
	public  void methodForHTML(String reportName,Map<Object,Object> hashMap,Connection connectDatabase,HttpServletResponse response,JasperPrint jasperPrint,HttpServletRequest request)throws Exception
	{
		String htmlReportFileName=reportName+".html";
		JRHtmlExporter exporter = new JRHtmlExporter();			
		response.setContentType("text/html");
        request.getSession().setAttribute(ImageServlet.DEFAULT_JASPER_PRINT_SESSION_ATTRIBUTE,jasperPrint);			
		float f1=1.4f;
		Map imagesMap = new HashMap();
        request.getSession().setAttribute("IMAGES_MAP", imagesMap);
        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
        exporter.setParameter(JRHtmlExporterParameter.IS_USING_IMAGES_TO_ALIGN ,Boolean.FALSE);
        exporter.setParameter(JRHtmlExporterParameter.IGNORE_PAGE_MARGINS ,Boolean.TRUE); 
        exporter.setParameter(JRHtmlExporterParameter.IS_WHITE_PAGE_BACKGROUND,Boolean.FALSE);
        exporter.setParameter(JRHtmlExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS,Boolean.TRUE);
        exporter.setParameter(JRHtmlExporterParameter.IS_OUTPUT_IMAGES_TO_DIR, Boolean.TRUE);
        exporter.setParameter(JRHtmlExporterParameter.BETWEEN_PAGES_HTML,"");
        exporter.setParameter(JRExporterParameter.OUTPUT_WRITER, response.getWriter());
        exporter.setParameter(JRHtmlExporterParameter.IMAGES_MAP, imagesMap);
        exporter.setParameter(JRHtmlExporterParameter.ZOOM_RATIO ,f1);
        ServletContext context = this.getServlet().getServletContext();
        File reportFile = new File(context.getRealPath("/reports/"));
        String image = reportFile.getPath();
        exporter.setParameter(JRHtmlExporterParameter.IMAGES_DIR_NAME,image);
        exporter.setParameter(JRHtmlExporterParameter.IMAGES_URI,image + "/");
        exporter.exportReport();     
	}*/
				

	
}