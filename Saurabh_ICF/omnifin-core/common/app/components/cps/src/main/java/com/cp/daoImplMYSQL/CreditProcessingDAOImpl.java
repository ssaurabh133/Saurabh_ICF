package com.cp.daoImplMYSQL;

import com.VO.CustomerSaveVo;
import com.business.utils.async.LMSMessagingClient;
import com.cm.vo.DisbursalSearchVO;
import com.cm.vo.InstallmentPlanForCMVO;
import com.cm.vo.LoanDetailForCMVO;
import com.cm.vo.NoOfDisbursalVo;
import com.cm.vo.SecurityDepositVO;
import com.cm.vo.TenureAmountVo;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.ConnectionDAOforEJB;
import com.connect.PrepStmtObject;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.ApplicantTypeVO;
import com.cp.vo.BuyerSupplierOtherVo;
import com.cp.vo.BuyerVo;
import com.cp.vo.ChargeVo;
import com.cp.vo.CodeDescVo;
import com.cp.vo.CollateralVo;
import com.cp.vo.CommonDealVo;
import com.cp.vo.CommonPageSecVo;
import com.cp.vo.CommonPageVo;
import com.cp.vo.ConsumerVo;
import com.cp.vo.CpInsuranceVo;
import com.cp.vo.CreditProcessingCustomerEntryVo;
import com.cp.vo.CreditProcessingLeadDetailDataVo;
import com.cp.vo.CreditProcessingLeadEntryVo;
import com.cp.vo.CreditProcessingNotepadVo;
import com.cp.vo.DealDisbursalVo;
import com.cp.vo.DealMovementVo;
import com.cp.vo.DedupeReferalDTO;
import com.cp.vo.DocumentsVo;
import com.cp.vo.ExistingAssetVo;
import com.cp.vo.FieldVerificationVo;
import com.cp.vo.FleetDetailsVo;
import com.cp.vo.HeaderInfoVo;
import com.cp.vo.LeadCaptureVo;
import com.cp.vo.LeaddetailDealVo;
import com.cp.vo.LinkCustomerVo;
import com.cp.vo.LoanDetailVo;
import com.cp.vo.LoanedProductVo;
import com.cp.vo.OtherChargesPlanVo;
import com.cp.vo.QueryProcessingVo;
import com.cp.vo.RelationalManagerVo;
import com.cp.vo.RepayScheduleVo;
import com.cp.vo.ReprocessingDealVo;
import com.cp.vo.SchemeVo;
import com.cp.vo.ScoringVO;
import com.cp.vo.SpecialConditionVo;
import com.cp.vo.TermSheetVo;
import com.cp.vo.UnderwriterApprovalVo;
import com.cp.vo.UnderwritingDocUploadVo;
import com.cp.vo.Viability;
import com.gcd.daoImplMYSQL.CorpotateDAOImpl;
import com.logger.LoggerMsg;
import com.masters.vo.ApprovalLevelDefVo;
import com.masters.vo.GcdGroupMasterVo;
import com.tabDependencyCheck.RefreshFlagValueInsert;
import com.tabDependencyCheck.RefreshFlagVo;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.security.cert.X509Certificate;

import javax.net.ssl.SSLSession;
import javax.net.ssl.X509TrustManager;


/*import java.security.cert.X509Certificate;
import javax.net.ssl.SSLSession;
import javax.net.ssl.X509TrustManager;*/
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintStream;
import java.math.BigDecimal;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.rmi.RemoteException;
import java.security.MessageDigest;
import java.security.SecureRandom;
import java.security.cert.X509Certificate;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.UUID;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import javax.servlet.http.HttpServletRequest;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.collections.map.HashedMap;
import org.apache.commons.lang.StringEscapeUtils;


import java.sql.PreparedStatement;
import java.util.HashMap;

import org.apache.commons.lang.StringUtils;

import com.cp.vo.CreditProcessingLeadDetailDataVo;
import com.cp.vo.FacilityDetailsVo;

import java.security.MessageDigest;
import java.sql.PreparedStatement;
import java.util.HashMap;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import com.cp.vo.CreditProcessingLeadDetailDataVo;

public class CreditProcessingDAOImpl
  implements CreditProcessingDAO
{
  private static final Logger logger = Logger.getLogger(CreditProcessingDAOImpl.class.getName());
  ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");
  String dateFormatWithTime = this.resource.getString("lbl.dateWithTimeInDao");
  String dateFormat = this.resource.getString("lbl.dateInDao");
  int no = Integer.parseInt(this.resource.getString("msg.pageSizeForMaster"));

  StringBuffer bufInsUpdSql = null;
  ArrayList qryList = null;
  ArrayList qryList1 = null;
  CallableStatement cs = null;
  PrepStmtObject delPrepStmtObject = null;
  DecimalFormat myFormatter = new DecimalFormat("###,##0.00######");

  ArrayList qryListB = null;
  ArrayList qryListS = null;

  public String getProductType(String DealID)
  {
		String productCat="";
		try{
		logger.info("getProductType");
		StringBuilder query=new StringBuilder();
		query.append("select DEAL_PRODUCT_CATEGORY from cr_deal_loan_dtl where DEAL_ID='"+DealID+"'");
		productCat=ConnectionDAO.singleReturn(query.toString());
		if(CommonFunction.checkNull(productCat).equalsIgnoreCase("")){
			query=new StringBuilder();
			String leadquery="select lead_id from cr_deal_dtl where deal_id='"+DealID+"'";
			String leadId=ConnectionDAO.singleReturn(leadquery);
			query.append("SELECT PRODUCT_CATEGORY FROM CR_PRODUCT_M WHERE PRODUCT_ID=(SELECT PRODUCT FROM CR_LEAD_DTL  WHERE LEAD_ID='"+leadId+"')");
			productCat=ConnectionDAO.singleReturn(query.toString());
		}
		}catch(Exception e){
			e.printStackTrace();
		}
		return  productCat;
		/*logger.info("getProductType");
		StringBuilder query=new StringBuilder();
		query.append("select DEAL_PRODUCT_CATEGORY from cr_deal_loan_dtl where DEAL_ID='"+DealID+"'");
		return  (String)ConnectionDAO.singleReturn(query.toString());*/
				
	}

  public boolean deleteViabilityDtl(String dealid)
  {
    boolean status = false;
    logger.info("deleteViabilityDtl");
    StringBuilder query = new StringBuilder();
    query.append(new StringBuilder().append("delete from cr_viability_dtl where DEAL_ID='").append(dealid).append("'").toString());
    ArrayList list = new ArrayList();
    list.add(query);
    try {
      status = ConnectionDAO.sqlInsUpdDelete(list);
    }
    catch (SQLException e) {
      e.printStackTrace();
      e = null;
    }
    finally
    {
      query = null;
      list.clear();
      list = null;
    }
    return status;
  }

  public int getViabilityCount(String dealid)
  {
    StringBuilder query = new StringBuilder();
    query.append(new StringBuilder().append("select count(0) from cr_viability_dtl where DEAL_ID='").append(dealid).append("'").toString());
    String val = ConnectionDAO.singleReturn(query.toString());
    int count = Integer.parseInt(val);
    return count;
  }

  public ArrayList getViability(String DealId)
  {
    Viability voa = null;
    ArrayList branchList = new ArrayList();
    ArrayList data = new ArrayList();
    StringBuilder returnquery = new StringBuilder();
    returnquery.append(new StringBuilder().append("select NO_OF_DAY_ON_ROAD,NO_OF_KM_RUN_PER_DAY,NO_OF_KM_RUN_PER_MONTH,RATE_PER_KM,EARNING_PER_DAY, EARNING_PER_MONTH, EXPENSE_MONTHLY,DRIVER_SALARY,FUEL_COST,TYRE_COST,PERMIT_TAX,INSRANCE,MAINTENANCE,OTHERS, TOTAL_EXPENSES,NET_EARNING,EMI_PER_MONTH,NET_SAVING,REC_STATUS,MAKER_ID, MAKER_DATE from cr_viability_dtl where DEAL_ID='").append(DealId).append("'").toString());
    try
    {
      branchList = ConnectionDAO.sqlSelect(returnquery.toString());
      for (int i = 0; i < branchList.size(); i++)
      {
        ArrayList bdetails1 = (ArrayList)branchList.get(i);
        if (bdetails1.size() > 0)
        {
          voa = new Viability();

          voa.setVonroad(CommonFunction.checkNull(bdetails1.get(0)));

          if (!CommonFunction.checkNull(bdetails1.get(1)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(1)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setVrunday(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setVrunday("0.0000");
          }

          if (!CommonFunction.checkNull(bdetails1.get(2)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(2)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setVrunmonth(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setVrunmonth("0.0000");
          }

          if (!CommonFunction.checkNull(bdetails1.get(3)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(3)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setRpkm(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setRpkm("0.0000");
          }

          if (!CommonFunction.checkNull(bdetails1.get(4)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(4)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setEpday(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setEpday("0.0000");
          }

          if (!CommonFunction.checkNull(bdetails1.get(5)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(5)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setEpermonth(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setEpermonth("0.0000");
          }

          if (!CommonFunction.checkNull(bdetails1.get(6)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(6)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setExmonthly(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setExmonthly("0.0000");
          }

          if (!CommonFunction.checkNull(bdetails1.get(7)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(7)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setDrsalary(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setDrsalary("0.0000");
          }

          if (!CommonFunction.checkNull(bdetails1.get(8)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(8)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setFcost(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setFcost("0.0000");
          }
          if (!CommonFunction.checkNull(bdetails1.get(9)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(9)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setTcost(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setTcost("0.0000");
          }

          if (!CommonFunction.checkNull(bdetails1.get(10)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(10)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setPermittax(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setPermittax("0.0000");
          }
          if (!CommonFunction.checkNull(bdetails1.get(11)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(11)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setInsurance(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setInsurance("0.0000");
          }
          if (!CommonFunction.checkNull(bdetails1.get(12)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(12)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setMaintenance(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setMaintenance("0.0000");
          }
          if (!CommonFunction.checkNull(bdetails1.get(13)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(13)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setOthers(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setOthers("0.0000");
          }
          if (!CommonFunction.checkNull(bdetails1.get(14)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(14)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setToexpenses(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setToexpenses("0.0000");
          }

          if (!CommonFunction.checkNull(bdetails1.get(15)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(15)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setNearning(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setNearning("0.0000");
          }
          if (!CommonFunction.checkNull(bdetails1.get(16)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(16)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setEpmonth(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setEpmonth("0.0000");
          }
          if (!CommonFunction.checkNull(bdetails1.get(17)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(17)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }

            voa.setNsaving(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setNsaving("0.0000");
          }

          data.add(voa);
        }

        bdetails1 = null;
      }

    }
    catch (SQLException e)
    {
      e.printStackTrace();
    }
    finally
    {
      voa = null;
      branchList = null;
      returnquery = null;
    }

    return data;
  }

  public ArrayList<Viability> saveViability(Viability vo)
  {
    ArrayList qryList = new ArrayList();
    ArrayList data = new ArrayList();
    StringBuilder query = new StringBuilder();
    Viability voa = null;
    query.append(new StringBuilder().append("select count(0) from cr_viability_dtl where DEAL_ID='").append(vo.getDealid()).append("'").toString());
    String val = ConnectionDAO.singleReturn(query.toString());
    int count = Integer.parseInt(val);
    if (count > 0)
    {
      logger.info("In update saveViability");
      boolean status = false;
      StringBuilder queryUpdate = new StringBuilder();
      queryUpdate.append(new StringBuilder().append("update cr_viability_dtl set NO_OF_DAY_ON_ROAD=?,NO_OF_KM_RUN_PER_DAY=?,NO_OF_KM_RUN_PER_MONTH=?,RATE_PER_KM=?, EARNING_PER_DAY=?,EARNING_PER_MONTH=?,EXPENSE_MONTHLY=?,DRIVER_SALARY=?,FUEL_COST=?,TYRE_COST=?, PERMIT_TAX=?,INSRANCE=?,MAINTENANCE=?,OTHERS=?,TOTAL_EXPENSES=?,NET_EARNING=?,EMI_PER_MONTH=?, NET_SAVING=?,REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) where DEAL_ID='").append(vo.getDealid()).append("' ").toString());

      PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
      if (CommonFunction.checkNull(vo.getVonroad()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getVonroad()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getVrunday()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getVrunday()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getVrunmonth()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getVrunmonth()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getRpkm()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getRpkm()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getEpday()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getEpday()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getEpermonth()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getEpermonth()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getExmonthly()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getExmonthly()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getDrsalary()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getDrsalary()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getFcost()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getFcost()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getTcost()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getTcost()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getPermittax()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getPermittax()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }
      if (CommonFunction.checkNull(vo.getInsurance()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getInsurance()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }
      if (CommonFunction.checkNull(vo.getMaintenance()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getMaintenance()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }
      if (CommonFunction.checkNull(vo.getOthers()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getOthers()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }
      if (CommonFunction.checkNull(vo.getToexpenses()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getToexpenses()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getNearning()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getNearning()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }
      if (CommonFunction.checkNull(vo.getEpmonth()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getEpmonth()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getNsaving()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getNsaving()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }
      insertPrepStmtObject.addString("A");

      if (CommonFunction.checkNull(vo.getMakerid()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerid().trim());
      }
      if (CommonFunction.checkNull(vo.getMakerdate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerdate().trim());
      }
      insertPrepStmtObject.setSql(queryUpdate.toString());
      logger.info(new StringBuilder().append("IN saveViability() update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("In saveViability ........ update query: ").append(queryUpdate).toString());
      queryUpdate = null;
      insertPrepStmtObject = null;
      try
      {
        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveViability.........update status: ").append(status).toString());
      }
      catch (Exception e) {
        e.printStackTrace();
      }

    }
    else
    {
      logger.info("In insert saveViability");
      boolean status = false;
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("insert into cr_viability_dtl(DEAL_ID,NO_OF_DAY_ON_ROAD,NO_OF_KM_RUN_PER_DAY,NO_OF_KM_RUN_PER_MONTH,RATE_PER_KM,EARNING_PER_DAY,EARNING_PER_MONTH,EXPENSE_MONTHLY,DRIVER_SALARY,FUEL_COST,TYRE_COST,PERMIT_TAX,INSRANCE,MAINTENANCE,OTHERS,TOTAL_EXPENSES,NET_EARNING,EMI_PER_MONTH,NET_SAVING,REC_STATUS,MAKER_ID,MAKER_DATE)");
      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

      PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
      if (CommonFunction.checkNull(vo.getDealid()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getDealid()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getVonroad()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getVonroad()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getVrunday()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getVrunday()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getVrunmonth()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getVrunmonth()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getRpkm()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getRpkm()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getEpday()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getEpday()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getEpermonth()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getEpermonth()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getExmonthly()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getExmonthly()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getDrsalary()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getDrsalary()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getFcost()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getFcost()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getTcost()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getTcost()).toString());
        }
        catch (ParseException e1)
        {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getPermittax()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getPermittax()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }
      if (CommonFunction.checkNull(vo.getInsurance()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getInsurance()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }
      if (CommonFunction.checkNull(vo.getMaintenance()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getMaintenance()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }
      if (CommonFunction.checkNull(vo.getOthers()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getOthers()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }
      if (CommonFunction.checkNull(vo.getToexpenses()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getToexpenses()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getNearning()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getNearning()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }
      if (CommonFunction.checkNull(vo.getEpmonth()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getEpmonth()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }

      if (CommonFunction.checkNull(vo.getNsaving()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getNsaving()).toString());
        }
        catch (ParseException e1) {
          e1.printStackTrace();
        }
      }
      insertPrepStmtObject.addString("A");

      if (CommonFunction.checkNull(vo.getMakerid()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerid().trim());
      }
      if (CommonFunction.checkNull(vo.getMakerdate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerdate().trim());
      }

      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN saveViability() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("In saveViability ........ insert query: ").append(bufInsSql).toString());
      try
      {
        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveViability.........insert status: ").append(status).toString());
      }
      catch (Exception e) {
        e.printStackTrace();
      }
    }

    StringBuilder returnquery = new StringBuilder();
    returnquery.append(new StringBuilder().append("select NO_OF_DAY_ON_ROAD,NO_OF_KM_RUN_PER_DAY,NO_OF_KM_RUN_PER_MONTH,RATE_PER_KM,EARNING_PER_DAY, EARNING_PER_MONTH, EXPENSE_MONTHLY,DRIVER_SALARY,FUEL_COST,TYRE_COST,PERMIT_TAX,INSRANCE,MAINTENANCE,OTHERS, TOTAL_EXPENSES,NET_EARNING,EMI_PER_MONTH,NET_SAVING,REC_STATUS,MAKER_ID, MAKER_DATE from cr_viability_dtl where DEAL_ID='").append(vo.getDealid()).append("'").toString());

    ArrayList branchList = new ArrayList();
    try {
      branchList = ConnectionDAO.sqlSelect(returnquery.toString());
      for (int i = 0; i < branchList.size(); i++)
      {
        ArrayList bdetails1 = (ArrayList)branchList.get(i);
        if (bdetails1.size() > 0)
        {
          voa = new Viability();

          voa.setVonroad(CommonFunction.checkNull(bdetails1.get(0)));

          if (!CommonFunction.checkNull(bdetails1.get(1)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(1)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setVrunday(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setVrunday("0.0000");
          }

          if (!CommonFunction.checkNull(bdetails1.get(2)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(2)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setVrunmonth(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setVrunmonth("0.0000");
          }

          if (!CommonFunction.checkNull(bdetails1.get(3)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(3)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setRpkm(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setRpkm("0.0000");
          }

          if (!CommonFunction.checkNull(bdetails1.get(4)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(4)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setEpday(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setEpday("0.0000");
          }

          if (!CommonFunction.checkNull(bdetails1.get(5)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(5)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setEpermonth(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setEpermonth("0.0000");
          }

          if (!CommonFunction.checkNull(bdetails1.get(6)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(6)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setExmonthly(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setExmonthly("0.0000");
          }

          if (!CommonFunction.checkNull(bdetails1.get(7)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(7)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setDrsalary(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setDrsalary("0.0000");
          }

          if (!CommonFunction.checkNull(bdetails1.get(8)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(8)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setFcost(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setFcost("0.0000");
          }
          if (!CommonFunction.checkNull(bdetails1.get(9)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(9)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setTcost(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setTcost("0.0000");
          }

          if (!CommonFunction.checkNull(bdetails1.get(10)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(10)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setPermittax(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setPermittax("0.0000");
          }
          if (!CommonFunction.checkNull(bdetails1.get(11)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(11)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setInsurance(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setInsurance("0.0000");
          }
          if (!CommonFunction.checkNull(bdetails1.get(12)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(12)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setMaintenance(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setMaintenance("0.0000");
          }
          if (!CommonFunction.checkNull(bdetails1.get(13)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(13)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setOthers(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setOthers("0.0000");
          }
          if (!CommonFunction.checkNull(bdetails1.get(14)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(14)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setToexpenses(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setToexpenses("0.0000");
          }

          if (!CommonFunction.checkNull(bdetails1.get(15)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(15)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setNearning(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setNearning("0.0000");
          }
          if (!CommonFunction.checkNull(bdetails1.get(16)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(16)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            voa.setEpmonth(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setEpmonth("0.0000");
          }
          if (!CommonFunction.checkNull(bdetails1.get(17)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(17)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            finally {
              bdetails1.clear();
              bdetails1 = null;
            }
            voa.setNsaving(this.myFormatter.format(reconNum));
          }
          else
          {
            voa.setNsaving("0.0000");
          }

          data.add(voa);
        }

      }

    }
    catch (SQLException e)
    {
      e.printStackTrace();
    }
    finally
    {
      vo = null;
      qryList = null;
      query = null;
      returnquery = null;
      branchList.clear();
      branchList = null;
      voa = null;
    }

    return data;
  }

  public ArrayList<CodeDescVo> getBranchList()
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append("SELECT BRANCH_ID,BRANCH_DESC from com_branch_m");
      ArrayList branchList = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getBranchList ").append(branchList.size()).toString());

      query = null;

      for (int i = 0; i < branchList.size(); i++)
      {
        ArrayList data = (ArrayList)branchList.get(i);
        if (data.size() > 0) {
          CodeDescVo branchVo = new CodeDescVo();
          branchVo.setId(CommonFunction.checkNull(data.get(0)).trim());
          branchVo.setName(CommonFunction.checkNull(data.get(1)).trim());
          list.add(branchVo);
        }
        data.clear();
        data = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public ArrayList<RelationalManagerVo> getRelationalManagerList(String branch)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT id,name from cp_relationship_manager where branch_fk_id=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Integer.valueOf(Integer.parseInt(branch))).trim())).toString());

      ArrayList rmList = ConnectionDAO.sqlSelect(query.toString());

      query = null;

      logger.info(new StringBuilder().append("getRelationalManagerList ").append(rmList.size()).toString());
      for (int i = 0; i < rmList.size(); i++)
      {
        ArrayList data = (ArrayList)rmList.get(i);
        if (data.size() > 0) {
          RelationalManagerVo relationalManagerVo = new RelationalManagerVo();
          relationalManagerVo.setId(Integer.parseInt(CommonFunction.checkNull(data.get(0)).trim()));
          relationalManagerVo.setName(CommonFunction.checkNull(data.get(1)).trim());
          list.add(relationalManagerVo);
        }
        data.clear();
        data = null;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      branch = null;
    }
    return list;
  }

  public ArrayList<Object> getApplicantDetailAll()
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append("select DEAL_CUSTOMER_ROLE_ID,DEAL_CUSTOMER_ID,DEAL_CUSTOMER_NAME,DOC_DESC,DEAL_CUSTOMER_TYPE,DEAL_EXISTING_CUSTOMER from cr_deal_customer_role,generic_master where DEAL_CUSTOMER_ROLE_TYPE=VALUE and GENERIC_KEY='APP_TYPE'");

      ArrayList applicantDetail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getApplicantDetailAll ").append(applicantDetail.size()).toString());

      query = null;

      for (int i = 0; i < applicantDetail.size(); i++)
      {
        ArrayList data = (ArrayList)applicantDetail.get(i);
        if (data.size() > 0) {
          CreditProcessingCustomerEntryVo appl = new CreditProcessingCustomerEntryVo();
          appl.setCustomerId(CommonFunction.checkNull(data.get(0)).trim());
          appl.setCustomerName(CommonFunction.checkNull(data.get(1)).trim());
          appl.setApplicantType(CommonFunction.checkNull(data.get(2)).trim());
          appl.setApplicantCategory(CommonFunction.checkNull(data.get(3)).trim());
          appl.setExistingCustomer(CommonFunction.checkNull(data.get(4)).trim());
          list.add(appl);
        }

        data.clear();
        data = null;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public int saveCPLeadEntry(Object ob)
  {
    String dateTime = null;
    CreditProcessingLeadEntryVo creditVo = (CreditProcessingLeadEntryVo)ob;
    if (CommonFunction.checkNull(creditVo.getLeadTime()).equalsIgnoreCase(""))
    {
      dateTime = creditVo.getLeadDate().trim();
    }
    else
    {
      dateTime = new StringBuilder().append(creditVo.getLeadDate().trim()).append(" ").append(creditVo.getLeadTime().trim().substring(0, 5)).toString();
    }

    logger.info(new StringBuilder().append("dateTime : ").append(dateTime).toString());

    int maxId = 0;
    String dealNoStatus = null;
    int[] a = null;
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

    long vCode = 0L;
    if ((creditVo.getLbxvendorCode() != null) && (!creditVo.getLbxvendorCode().equalsIgnoreCase("")))
    {
      vCode = Long.parseLong(creditVo.getLbxvendorCode());
    }
    logger.info(new StringBuilder().append("In saveCPLeadEntry..vendor Code.....").append(vCode).toString());
    try
    {
      if ((creditVo.getDealNo() != null) && (!CommonFunction.checkNull(creditVo.getDealNo()).equalsIgnoreCase("")))
      {
        StringBuilder query = new StringBuilder();
        query.append(new StringBuilder().append("SELECT DEAL_ID FROM cr_deal_dtl WHERE DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(creditVo.getDealId()).trim())).append("'").toString());
        dealNoStatus = ConnectionDAO.singleReturn(query.toString());

        query = null;
      }

      StringBuilder query4 = new StringBuilder();
      StringBuffer query5 = new StringBuffer();
      String dealPM = "";
      query4.append(new StringBuilder().append("SELECT USER_REPORTING_TO FROM SEC_USER_M WHERE USER_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(creditVo.getLbxRelationship()).trim())).append("'").toString());
      dealPM = ConnectionDAO.singleReturn(query4.toString());

      if ((dealNoStatus != null) && (!dealNoStatus.equals("")))
      {
        logger.info("In update saveCPLeadEntry");
        boolean status = false;

        StringBuilder queryUpdate = new StringBuilder();
        queryUpdate.append(new StringBuilder().append("update cr_deal_dtl set DEAL_APPLICATION_FORM_NO=?, DEAL_DATE=STR_TO_DATE(?,'").append(this.dateFormatWithTime).append("'),DEAL_ENCODED_DATE=STR_TO_DATE(?,'").append(this.dateFormatWithTime).append("'),DEAL_BRANCH=?,").append(" DEAL_INDUSTRY_ID=?,DEAL_SUB_INDUSTRY_ID=?, DEAL_SOURCE_TYPE=?,DEAL_SOURCE_NAME=?,").append(" DEAL_VENDOR_CODE=?,DEAL_RM=?,DEAL_CATEGORY=?,DEALER_EXECUTIVE_NAME=?,DEALER_MANAGER_NAME=?,GENERATED_BY=? ").toString());

        if (CommonFunction.checkNull(creditVo.getMakerIdStatus()).equalsIgnoreCase("3000206"))
        {
          logger.info("Maker Id/Maker Date is updated ");
          queryUpdate.append(new StringBuilder().append(" , MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND)").toString());
        }

        queryUpdate.append(" , AREA_CODE=?,DEAL_RO=?,DEAL_PM=?,REFERRED_BY=?,FI_APPRAISER_NAME=?,FI_DECISION=?,FI_REMARKS=?,MAKER_REMARKS=?,CASE_VISITED_BY=? where DEAL_ID=?");

        if (CommonFunction.checkNull(creditVo.getApplicationFormNo()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getApplicationFormNo().trim());
        }
        if (CommonFunction.checkNull(dateTime).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(dateTime.trim());
        }
        if (CommonFunction.checkNull(creditVo.getBussinessDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getBussinessDate().trim());
        }
        if (CommonFunction.checkNull(creditVo.getLbxBranchId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getLbxBranchId().trim());
        }
        if (CommonFunction.checkNull(creditVo.getLbxIndustry()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getLbxIndustry().trim());
        }
        if (CommonFunction.checkNull(creditVo.getLbxSubIndustry()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getLbxSubIndustry().trim());
        }
        if (CommonFunction.checkNull(creditVo.getSource()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getSource().trim());
        }
        if (CommonFunction.checkNull(creditVo.getSourcedesc()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getSourcedesc().trim());
        }
        if (CommonFunction.checkNull(Long.valueOf(vCode)).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addInt(vCode);
        }
        if (CommonFunction.checkNull(creditVo.getLbxRelationship()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getLbxRelationship().trim());
        }

        if (CommonFunction.checkNull(creditVo.getDealCat()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getDealCat().trim());
        }

        if (CommonFunction.checkNull(creditVo.getDealerExecutive()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getDealerExecutive().trim());
        }
        if (CommonFunction.checkNull(creditVo.getDealerManager()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getDealerManager().trim());
        }

        if (CommonFunction.checkNull(creditVo.getLeadGeneratorBy()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getLeadGeneratorBy().trim());
        }
        if (CommonFunction.checkNull(creditVo.getMakerIdStatus()).equalsIgnoreCase("3000206"))
        {
          if (CommonFunction.checkNull(creditVo.getMakerId()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(creditVo.getMakerId().trim());
          }

          if (CommonFunction.checkNull(creditVo.getMakerDate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(creditVo.getMakerDate().trim());
        }
        if (CommonFunction.checkNull(creditVo.getLbxareaCodeVal()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getLbxareaCodeVal().trim());
        }
        if (CommonFunction.checkNull(creditVo.getLbxUserSearchId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(creditVo.getLbxUserSearchId().trim());
        if (CommonFunction.checkNull(dealPM).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(dealPM);
        }

        if (CommonFunction.checkNull(creditVo.getReferredBy()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getReferredBy().trim());
        }
        if (CommonFunction.checkNull(creditVo.getFiAppraiserName()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getFiAppraiserName().trim());
        }
        if (CommonFunction.checkNull(creditVo.getFidecisionDeal()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getFidecisionDeal());
        }
        if (CommonFunction.checkNull(creditVo.getFiRemarksDeal()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getFiRemarksDeal().trim());
        }
        if (CommonFunction.checkNull(creditVo.getMakerRemark()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getMakerRemark().trim());
        }
        if (CommonFunction.checkNull(creditVo.getCaseVisitedBy()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getCaseVisitedBy().trim());
        }
        if (CommonFunction.checkNull(creditVo.getDealId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getDealId().trim());
        }
        insertPrepStmtObject.setSql(queryUpdate.toString());
        logger.info(new StringBuilder().append("IN saveCPLeadEntry() update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        logger.info(new StringBuilder().append("In saveCPLeadEntry ........ update query: ").append(queryUpdate).toString());

        queryUpdate = null;
        try
        {
          status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
          logger.info(new StringBuilder().append("In saveCPLeadEntry.........update status: ").append(status).toString());
        }
        catch (Exception e) {
          e.printStackTrace();
        }

        logger.info(new StringBuilder().append("In saveCPLeadEntry......................").append(status).toString());
        if (status)
        {
          maxId = Integer.parseInt(creditVo.getDealId());
          logger.info(new StringBuilder().append("maxId : ").append(maxId).toString());
          logger.info("In startDealNumberGenerator>>  --->>");
          startDealNumberGenerator(new StringBuilder().append("").append(maxId).toString());
        }

      }
      else
      {
        StringBuilder query3 = new StringBuilder();
        query3.append("Select distinct max(DEAL_ID) from cr_deal_dtl for update");
        ConnectionDAO.singleReturn(query3.toString());

        query3 = null;
        logger.info("In insert saveCPLeadEntry");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("insert into cr_deal_dtl(LEAD_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,DEAL_DATE,DEAL_ENCODED_DATE,DEAL_BRANCH,DEAL_INDUSTRY_ID,DEAL_SUB_INDUSTRY_ID,DEAL_SOURCE_TYPE,DEAL_SOURCE_NAME,DEAL_VENDOR_CODE,DEAL_RM,DEAL_CATEGORY,AREA_CODE,REC_STATUS,GENERATED_BY,MAKER_ID,DEALER_EXECUTIVE_NAME,DEALER_MANAGER_NAME,REFRESH_FLAG,MAKER_DATE,DEAL_INITIATION_DATE,DEAL_RO,DEAL_PM,REFERRED_BY,FI_APPRAISER_NAME,FI_DECISION,FI_REMARKS,MAKER_REMARKS,CASE_VISITED_BY)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormatWithTime).append("'),").toString());
        bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormatWithTime).append("'),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" 'NNNNNNNNNNNNNNN',");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());

        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());

        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");

        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");

        bufInsSql.append(" ?,");

        bufInsSql.append(" ?)");

        if (CommonFunction.checkNull(creditVo.getLbxLeadNo()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(creditVo.getLbxLeadNo().trim());
        if (CommonFunction.checkNull(creditVo.getDealNo()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(creditVo.getDealNo().trim());
        if (CommonFunction.checkNull(creditVo.getApplicationFormNo()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getApplicationFormNo().trim());
        }
        insertPrepStmtObject.addString(dateTime.trim());

        if (CommonFunction.checkNull(creditVo.getBussinessDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getBussinessDate().trim());
        }
        if (CommonFunction.checkNull(creditVo.getLbxBranchId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(creditVo.getLbxBranchId().trim());
        if (CommonFunction.checkNull(creditVo.getLbxIndustry()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(creditVo.getLbxIndustry().trim());
        if (CommonFunction.checkNull(creditVo.getLbxSubIndustry()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(creditVo.getLbxSubIndustry().trim());
        if (CommonFunction.checkNull(creditVo.getSource()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(creditVo.getSource().trim());
        if (CommonFunction.checkNull(creditVo.getSourcedesc()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getSourcedesc().trim());
        }
        insertPrepStmtObject.addString(new StringBuilder().append("").append(vCode).toString().trim());

        if (CommonFunction.checkNull(creditVo.getLbxRelationship()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getLbxRelationship().trim());
        }
        if (CommonFunction.checkNull(creditVo.getDealCat()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getDealCat().trim());
        }

        if (CommonFunction.checkNull(creditVo.getLbxareaCodeVal()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getLbxareaCodeVal().trim());
        }

        insertPrepStmtObject.addString("P");

        if (CommonFunction.checkNull(creditVo.getLeadGeneratorBy()).trim().equals(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getLeadGeneratorBy().trim());
        }

        if (CommonFunction.checkNull(creditVo.getUserId()).trim().equals(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getUserId().trim());
        }
        if (CommonFunction.checkNull(creditVo.getDealerExecutive()).trim().equals(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getDealerExecutive().trim());
        }
        if (CommonFunction.checkNull(creditVo.getDealerManager()).trim().equals(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getDealerManager().trim());
        }

        if (CommonFunction.checkNull(creditVo.getBussinessDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getBussinessDate());
        }
        if (CommonFunction.checkNull(creditVo.getBussinessDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getBussinessDate());
        }

        if (CommonFunction.checkNull(creditVo.getLbxUserSearchId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(creditVo.getLbxUserSearchId());
        if (CommonFunction.checkNull(dealPM).trim().equals(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(dealPM);
        }

        if (CommonFunction.checkNull(creditVo.getReferredBy()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getReferredBy());
        }
        if (CommonFunction.checkNull(creditVo.getFiAppraiserName()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getFiAppraiserName().trim());
        }
        if (CommonFunction.checkNull(creditVo.getFidecisionDeal()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getFidecisionDeal());
        }
        if (CommonFunction.checkNull(creditVo.getFiRemarksDeal()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getFiRemarksDeal().trim());
        }
        if (CommonFunction.checkNull(creditVo.getMakerRemark()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(creditVo.getMakerRemark().trim());
        }
        if (CommonFunction.checkNull(creditVo.getCaseVisitedBy()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(creditVo.getCaseVisitedBy().trim());
        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN saveCPLeadEntry() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        bufInsSql = null;

        qryList.add(insertPrepStmtObject);
        boolean status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveCustomer......................").append(status).toString());
        if (status)
        {
          query3 = new StringBuilder();
          query3.append("Select distinct max(DEAL_ID) from cr_deal_dtl ");

          StringBuilder id = new StringBuilder();
          id.append(ConnectionDAO.singleReturn(query3.toString()));
          maxId = Integer.parseInt(id.toString());

          logger.info(new StringBuilder().append("maxId : ").append(maxId).toString());

          logger.info("In startDealNumberGenerator--  --->>");
          startDealNumberGenerator(new StringBuilder().append("").append(maxId).toString());
          StringBuilder checkStageM = new StringBuilder();
          checkStageM.append(CommonFunction.stageMovement(creditVo.getCompanyId(), "DC", "I", new StringBuilder().append("").append(maxId).toString(), "DC", creditVo.getBussinessDate(), creditVo.getUserId()));
          logger.info(new StringBuilder().append("checkStageM : ").append(checkStageM).toString());

          query3 = null;
          checkStageM = null;
          id = null;
        }

      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      dealNoStatus = null;
      creditVo = null;
    }

    return maxId;
  }

  public ArrayList getProductTypeList()
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append("SELECT PRODUCT_ID,PRODUCT_DESC from cr_product_m where REC_STATUS='A'");
      logger.info("getProductTypeList");
      CodeDescVo branchVo = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());

      query = null;
      logger.info(new StringBuilder().append("getProductTypeList").append(product.size()).toString());
      for (int i = 0; i < product.size(); i++)
      {
        ArrayList product1 = (ArrayList)product.get(i);
        if (product1.size() > 0)
        {
          branchVo = new CodeDescVo();
          branchVo.setId(CommonFunction.checkNull(product1.get(0)));
          branchVo.setName(CommonFunction.checkNull(product1.get(1)).trim());
          list.add(branchVo);
        }
        branchVo = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList<CodeDescVo> getProductList(String productType)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT PRODUCT_ID,PRODUCT_DESC from com_product_m where MODULE_ID=").append(CommonFunction.checkNull(productType).trim()).toString());
      ArrayList productList = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getProductList ").append(productList.size()).toString());

      query = null;

      for (int i = 0; i < productList.size(); i++)
      {
        ArrayList data = (ArrayList)productList.get(i);
        if (data.size() > 0) {
          CodeDescVo branchVo = new CodeDescVo();
          branchVo.setId(CommonFunction.checkNull(data.get(0)).trim());
          branchVo.setName(CommonFunction.checkNull(data.get(1)).trim());
          list.add(branchVo);
        }
        data.clear();
        data = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public ArrayList<CodeDescVo> getSchemeList(String product)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT SCHEME_ID,SCHEME_DESC from cr_scheme_m where PRODUCT_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(product)).trim()).append("' AND REC_STATUS='A' ").toString());
      ArrayList schemeList = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getSchemeList ").append(schemeList.size()).toString());

      query = null;

      for (int i = 0; i < schemeList.size(); i++)
      {
        ArrayList data = (ArrayList)schemeList.get(i);
        if (data.size() > 0) {
          CodeDescVo branchVo = new CodeDescVo();
          branchVo.setId(CommonFunction.checkNull(data.get(0)).trim());
          branchVo.setName(CommonFunction.checkNull(data.get(1)).trim());
          list.add(branchVo);
        }
        data.clear();
        data = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList<LoanedProductVo> getLoanListOfProduct(String dealID)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT M.MODULE_DESC,P.PRODUCT_DESC,S.SCHEME_DESC,P.LOAN_TYPE,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_PRODUCT_SEQ,D.STATUS  FROM cr_deal_loan_dtl D,com_module_m M,cr_product_m P,cr_scheme_m S WHERE DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealID)).trim()).append("' AND M.MODULE_ID=DEAL_PRODUCT_TYPE and DEAL_PRODUCT = P.PRODUCT_ID and DEAL_SCHEME=S.SCHEME_ID").toString());

      ArrayList loanListOfProduct = ConnectionDAO.sqlSelect(query.toString());

      query = null;

      logger.info(new StringBuilder().append("getLoanListOfProduct ").append(loanListOfProduct.size()).toString());
      for (int i = 0; i < loanListOfProduct.size(); i++)
      {
        ArrayList data = (ArrayList)loanListOfProduct.get(i);
        if (data.size() > 0) {
          LoanedProductVo loanProduct = new LoanedProductVo();
          loanProduct.setProductType(CommonFunction.checkNull(data.get(0)).trim());
          loanProduct.setProduct(CommonFunction.checkNull(data.get(1)).trim());
          loanProduct.setScheme(CommonFunction.checkNull(data.get(2)).trim());
          loanProduct.setLoanType(CommonFunction.checkNull(data.get(3)).trim());
          loanProduct.setRequestedLoanAmount(CommonFunction.checkNull(data.get(4)).trim());
          loanProduct.setRequestedLoanTenure(CommonFunction.checkNull(data.get(5)).trim());
          loanProduct.setLoanProductSeq(CommonFunction.checkNull(data.get(6)).trim());
          loanProduct.setStatus(CommonFunction.checkNull(data.get(7)).trim());
          list.add(loanProduct);
        }
        data.clear();
        data = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      dealID = null;
    }
    return list;
  }

  public ArrayList<Object> getAddressList() {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append("select g.VALUE,g.DESCRIPTION from generic_master g,generic_master_keys h where h.GENERIC_KEY='ADDRESS_TYPE' and g.GENERIC_KEY=h.GENERIC_KEY");
      ArrayList addressList = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getAddressList ").append(addressList.size()).toString());

      query = null;

      for (int i = 0; i < addressList.size(); i++) {
        ArrayList data = (ArrayList)addressList.get(i);
        if (data.size() > 0) {
          CodeDescVo buyerVo = new CodeDescVo();
          buyerVo.setId(CommonFunction.checkNull(data.get(0)).trim());
          buyerVo.setName(CommonFunction.checkNull(data.get(1)).trim());
          list.add(buyerVo);
        }
        data.clear();
        data = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public ArrayList<Object> getBusinessPartnerTypeList()
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append("select g.VALUE,g.DESCRIPTION from generic_master g,generic_master_keys h where h.GENERIC_KEY='BPTYPE' and g.GENERIC_KEY=h.GENERIC_KEY");
      ArrayList businessPartnerTypeList = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getBusinessPartnerTypeList ").append(businessPartnerTypeList.size()).toString());

      query = null;

      for (int i = 0; i < businessPartnerTypeList.size(); i++)
      {
        ArrayList data = (ArrayList)businessPartnerTypeList.get(i);
        if (data.size() > 0) {
          CodeDescVo buyerVo = new CodeDescVo();
          buyerVo.setId(CommonFunction.checkNull(data.get(0)).trim());
          buyerVo.setName(CommonFunction.checkNull(data.get(1)).trim());
          list.add(buyerVo);
        }
        data.clear();
        data = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public boolean saveBuyerDetails(Object ob)
  {
    BuyerVo vo = (BuyerVo)ob;

    logger.info(new StringBuilder().append("vo.getUserId(): ").append(vo.getUserId()).toString());
    logger.info(new StringBuilder().append("vo.getAddressLine2(): ").append(vo.getAddressLine2()).toString());
    boolean status = false;
    StringBuffer bufInsUpdSql = new StringBuffer();
    this.qryList = new ArrayList();
    this.qryListB = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    StringBuffer bufInsUpdSql1 = new StringBuffer();
    PrepStmtObject insertPrepStmtObject1 = new PrepStmtObject();
    try
    {
      bufInsUpdSql.append("insert into cr_deal_buyer_supplier_dtl(DEAL_ID,DEAL_BUYER_SUPPLIER_RELATION,DEAL_BUYER_SUPPLIER_TYPE,DEAL_BUYER_SUPPLIER_NAME, DEAL_BUYER_SUPPLIER_CONTACT,DEAL_BUYER_SUPPLIER_DESIGNATION,DEAL_BUYER_SUPPLIER_MOBILE,DEAL_BUYER_SUPPLIER_EMAIL,DEAL_BUYER_SUPPLIER_MONTLY_SALES,DEAL_BUYER_SUPPLIER_PAYMENT_TERM, DEAL_BUYER_SUPPLIER_PRODUCT_TYPE,DEAL_BUYER_SUPPLIER_VINTAGE,DEAL_BUYER_SUPPLIER_ADDRESS_TYPE,DEAL_BUYER_SUPPLIER_ADDRESS,DEAL_BUYER_SUPPLIER_COUNTRY,DEAL_BUYER_SUPPLIER_STATE,DEAL_BUYER_SUPPLIER_DISTRICT,DEAL_BUYER_SUPPLIER_PINCODE,REC_STATUS,MAKER_ID,MAKER_DATE,ADDRESS_LINE_2,ADDRESS_LINE_3,TAHSIL)");

      bufInsUpdSql.append(" values( ");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" 'P',");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND)").toString());
      bufInsUpdSql.append(" ,?");
      bufInsUpdSql.append(" ,?");
      bufInsUpdSql.append(" ,?)");

      if (CommonFunction.checkNull(vo.getDealId().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getDealId().trim());
      }

      insertPrepStmtObject.addString("B");

      insertPrepStmtObject.addString("B");

      if (CommonFunction.checkNull(vo.getBusinessPartnerName().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getBusinessPartnerName().trim());
      }

      if (CommonFunction.checkNull(vo.getContactPerson().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getContactPerson().trim());
      }

      if (CommonFunction.checkNull(vo.getDesignation().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getDesignation().trim());
      }

      if (CommonFunction.checkNull(vo.getMobile().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMobile().trim());
      }

      if (CommonFunction.checkNull(vo.getEmail().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getEmail().trim());
      }

      if (CommonFunction.checkNull(vo.getAveragePurchaseSales().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getAveragePurchaseSales().trim()).toString());
      }
      logger.info(new StringBuilder().append("vo.getAveragePurchaseSales(): ").append(vo.getAveragePurchaseSales()).toString());
      logger.info(new StringBuilder().append("myFormatter.parse((vo.getAveragePurchaseSales().trim())).toString(): ").append(this.myFormatter.parse(vo.getAveragePurchaseSales().trim()).toString()).toString());
      if (CommonFunction.checkNull(vo.getPaymentTerms().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPaymentTerms().trim());
      }

      if (CommonFunction.checkNull(vo.getProductType().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getProductType().trim());
      }

      if (CommonFunction.checkNull(vo.getVintageOfRelationship().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVintageOfRelationship().trim());
      }

      if (CommonFunction.checkNull(vo.getAddress()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAddress().trim());
      }

      if (CommonFunction.checkNull(vo.getAddressLine1()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAddressLine1().trim());
      }

      if (CommonFunction.checkNull(vo.getTxtCountryCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTxtCountryCode().trim());
      }
      if (CommonFunction.checkNull(vo.getTxtStateCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTxtStateCode().trim());
      }
      if (CommonFunction.checkNull(vo.getTxtDistCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTxtDistCode().trim());
      }

      if (CommonFunction.checkNull(vo.getPincode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPincode().trim());
      }

      if (CommonFunction.checkNull(vo.getUserId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getUserId());
      }
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getMakerDate());
      if (CommonFunction.checkNull(vo.getAddressLine2()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAddressLine2().trim());
      }
      if (CommonFunction.checkNull(vo.getAddressLine3()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAddressLine3().trim());
      }
      if (CommonFunction.checkNull(vo.getTxtTahsil()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTxtTahsil().trim());
      }
      insertPrepStmtObject.setSql(bufInsUpdSql.toString());

      logger.info(new StringBuilder().append("IN Deal Buyer() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      this.qryListB.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryListB);
      logger.info(new StringBuilder().append("In cr deal buyer supplier dtl tables......................").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      bufInsUpdSql = null;
      bufInsUpdSql1 = null;
      insertPrepStmtObject = null;
      vo = null;
    }

    return status;
  }

  public ArrayList<Object> getBuyerDetailsAll(String bptype, String bRelation, String id)
  {
    BuyerVo vo = null;
    logger.info(new StringBuilder().append("bptype").append(bptype).toString());
    logger.info(new StringBuilder().append("id").append(id).toString());
    logger.info(new StringBuilder().append("Business Relation").append(bRelation).toString());

    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT c.DEAL_BUYER_SUPPLIER_ID,if(c.DEAL_BUYER_SUPPLIER_RELATION='B','Buyer','') as DEAL_BUYER_SUPPLIER_RELATION,c.DEAL_BUYER_SUPPLIER_NAME,c.DEAL_BUYER_SUPPLIER_MONTLY_SALES,c.DEAL_BUYER_SUPPLIER_PAYMENT_TERM,c.DEAL_BUYER_SUPPLIER_PRODUCT_TYPE,c.DEAL_BUYER_SUPPLIER_VINTAGE from cr_deal_buyer_supplier_dtl c where DEAL_BUYER_SUPPLIER_RELATION='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(bRelation)).trim()).append("' and DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()).toString());
      logger.info(new StringBuilder().append("query").append(query).toString());

      ArrayList bdetails = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getBuyerDetailsAll: ").append(bdetails.size()).toString());

      query = null;

      for (int i = 0; i < bdetails.size(); i++)
      {
        ArrayList bdetails1 = (ArrayList)bdetails.get(i);
        if (bdetails1.size() > 0)
        {
          vo = new BuyerVo();
          vo.setPrimaryId(CommonFunction.checkNull(bdetails1.get(0)).trim());
          vo.setBusinessRelationship(CommonFunction.checkNull(bdetails1.get(1)).trim());
          vo.setBusinessPartnerName(CommonFunction.checkNull(bdetails1.get(2)).trim());

          if (!CommonFunction.checkNull(bdetails1.get(3)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(3)).trim());
            vo.setAveragePurchaseSales(this.myFormatter.format(reconNum));
          }

          vo.setPaymentTerms(CommonFunction.checkNull(bdetails1.get(4)).trim());
          vo.setProductType(CommonFunction.checkNull(bdetails1.get(5)).trim());
          vo.setVintageOfRelationship(CommonFunction.checkNull(bdetails1.get(6)).trim());
        }

        bdetails1.clear();
        bdetails1 = null;
        list.add(vo);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      vo = null;
    }
    logger.info(new StringBuilder().append("Value of List is in dao is=").append(list).toString());
    return list;
  }

  public ArrayList<Object> modifyBuyerDetailsAll(String bptype, String addrId)
  {
    logger.info(new StringBuilder().append("Value of Address ID in modify is =").append(addrId).toString());
    BuyerVo vo = new BuyerVo();
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("Select distinct c.DEAL_BUYER_SUPPLIER_ID,c.DEAL_BUYER_SUPPLIER_RELATION,c.DEAL_BUYER_SUPPLIER_NAME, DEAL_BUYER_SUPPLIER_CONTACT,c.DEAL_BUYER_SUPPLIER_DESIGNATION,c.DEAL_BUYER_SUPPLIER_MOBILE,c.DEAL_BUYER_SUPPLIER_EMAIL, c.DEAL_BUYER_SUPPLIER_MONTLY_SALES,c.DEAL_BUYER_SUPPLIER_PAYMENT_TERM,c.DEAL_BUYER_SUPPLIER_PRODUCT_TYPE, c.DEAL_BUYER_SUPPLIER_VINTAGE,c.DEAL_BUYER_SUPPLIER_ADDRESS,c.DEAL_BUYER_SUPPLIER_PINCODE, c.DEAL_BUYER_SUPPLIER_TYPE,c.DEAL_BUYER_SUPPLIER_ADDRESS_TYPE,c.DEAL_BUYER_SUPPLIER_COUNTRY,c.DEAL_BUYER_SUPPLIER_STATE,c.DEAL_BUYER_SUPPLIER_DISTRICT,c.ADDRESS_LINE_2,c.ADDRESS_LINE_3,c.TAHSIL from cr_deal_buyer_supplier_dtl c  where c.DEAL_BUYER_SUPPLIER_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(addrId)).trim()).append("'").toString());

      logger.info(new StringBuilder().append("modifyBuyerDetailsAll fetch data:").append(query).toString());
      ArrayList bdetails = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("modifyBuyerDetailsAll").append(bdetails.size()).toString());

      query = null;

      for (int i = 0; i < bdetails.size(); i++)
      {
        ArrayList bdetails1 = (ArrayList)bdetails.get(i);
        for (int k = 0; k < bdetails1.size(); k++)
        {
          vo.setPrimaryId(CommonFunction.checkNull(bdetails1.get(0)).trim());
          vo.setBusinessRelationship(CommonFunction.checkNull(bdetails1.get(1)).trim());

          vo.setBusinessPartnerName(CommonFunction.checkNull(bdetails1.get(2)).trim());
          vo.setContactPerson(CommonFunction.checkNull(bdetails1.get(3)).trim());
          vo.setDesignation(CommonFunction.checkNull(bdetails1.get(4)).trim());
          vo.setMobile(CommonFunction.checkNull(bdetails1.get(5)).trim());
          vo.setEmail(CommonFunction.checkNull(bdetails1.get(6)).trim());

          if (!CommonFunction.checkNull(bdetails1.get(7)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(7)).trim());
            vo.setAveragePurchaseSales(this.myFormatter.format(reconNum));
          }

          vo.setPaymentTerms(CommonFunction.checkNull(bdetails1.get(8)).trim());
          vo.setProductType(CommonFunction.checkNull(bdetails1.get(9)).trim());
          vo.setVintageOfRelationship(CommonFunction.checkNull(bdetails1.get(10)).trim());

          vo.setAddressLine1(CommonFunction.checkNull(bdetails1.get(11)).trim());
          vo.setPincode(CommonFunction.checkNull(bdetails1.get(12)).trim());
          logger.info(new StringBuilder().append("Address Type: ").append(bdetails1.get(14)).toString());
          vo.setBpType(CommonFunction.checkNull(bdetails1.get(13)).trim());

          vo.setAddress(CommonFunction.checkNull(bdetails1.get(14)).trim());

          vo.setTxtCountryCode(CommonFunction.checkNull(bdetails1.get(15)).trim());
          vo.setTxtStateCode(CommonFunction.checkNull(bdetails1.get(16)).trim());
          vo.setTxtDistCode(CommonFunction.checkNull(bdetails1.get(17)).trim());
          vo.setAddressLine2(CommonFunction.checkNull(bdetails1.get(18)).trim());
          vo.setAddressLine3(CommonFunction.checkNull(bdetails1.get(19)).trim());
          vo.setTxtTahsil(CommonFunction.checkNull(bdetails1.get(20)).trim());
        }

        list.add(vo);
        bdetails1.clear();
        bdetails1 = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      bptype = null;
      addrId = null;
      vo = null;
    }
    logger.info(new StringBuilder().append("Value of List is in dao is..................=").append(list).toString());
    return list;
  }

  public boolean updateBuyerDetailsAll(Object ob, String bptype, String id)
  {
    logger.info(new StringBuilder().append("Value of Address ID in Updation  is =").append(id).toString());
    BuyerVo vo = (BuyerVo)ob;
    boolean status = false;
    StringBuffer bufInsUpdSql = new StringBuffer();
    this.qryList = new ArrayList();
    try
    {
      bufInsUpdSql.append(" UPDATE cr_deal_buyer_supplier_dtl");
      bufInsUpdSql.append(new StringBuilder().append(" SET DEAL_BUYER_SUPPLIER_TYPE =?,DEAL_BUYER_SUPPLIER_RELATION =?,DEAL_BUYER_SUPPLIER_NAME =?,DEAL_BUYER_SUPPLIER_CONTACT =?,DEAL_BUYER_SUPPLIER_DESIGNATION =?,DEAL_BUYER_SUPPLIER_MOBILE =?,DEAL_BUYER_SUPPLIER_EMAIL =?,DEAL_BUYER_SUPPLIER_MONTLY_SALES =?,DEAL_BUYER_SUPPLIER_PAYMENT_TERM =?,DEAL_BUYER_SUPPLIER_PRODUCT_TYPE =?,DEAL_BUYER_SUPPLIER_VINTAGE =?,DEAL_BUYER_SUPPLIER_ADDRESS_TYPE=?,DEAL_BUYER_SUPPLIER_ADDRESS=?,DEAL_BUYER_SUPPLIER_COUNTRY=?,DEAL_BUYER_SUPPLIER_STATE=?,DEAL_BUYER_SUPPLIER_DISTRICT=?,DEAL_BUYER_SUPPLIER_PINCODE=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND)").toString());

      bufInsUpdSql.append(" ,ADDRESS_LINE_2=?,ADDRESS_LINE_3=?,TAHSIL=?");
      bufInsUpdSql.append(" WHERE DEAL_BUYER_SUPPLIER_ID=?");
      PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

      insertPrepStmtObject.addString("B");

      insertPrepStmtObject.addString("B");

      if (CommonFunction.checkNull(vo.getBusinessPartnerName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getBusinessPartnerName().trim());
      }
      if (CommonFunction.checkNull(vo.getContactPerson()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getContactPerson().trim());
      }
      if (CommonFunction.checkNull(vo.getDesignation()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getDesignation().trim());
      }
      if (CommonFunction.checkNull(vo.getMobile()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMobile().trim());
      }
      if (CommonFunction.checkNull(vo.getEmail()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getEmail().trim());
      }
      if (CommonFunction.checkNull(vo.getAveragePurchaseSales().trim()).toString().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getAveragePurchaseSales().trim()).toString());
      }
      logger.info(new StringBuilder().append("vo.getAveragePurchaseSales(): ").append(vo.getAveragePurchaseSales()).toString());
      logger.info(new StringBuilder().append("myFormatter.parse((vo.getAveragePurchaseSales().trim())).toString(): ").append(this.myFormatter.parse(vo.getAveragePurchaseSales().trim()).toString()).toString());

      if (CommonFunction.checkNull(vo.getPaymentTerms()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPaymentTerms().trim());
      }
      if (CommonFunction.checkNull(vo.getProductType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getProductType().trim());
      }
      if (CommonFunction.checkNull(vo.getVintageOfRelationship()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVintageOfRelationship().trim());
      }
      if (CommonFunction.checkNull(vo.getAddress()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAddress().trim());
      }
      if (CommonFunction.checkNull(vo.getAddressLine1()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAddressLine1().trim());
      }
      if (CommonFunction.checkNull(vo.getTxtCountryCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTxtCountryCode().trim());
      }
      if (CommonFunction.checkNull(vo.getTxtStateCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTxtStateCode().trim());
      }
      if (CommonFunction.checkNull(vo.getTxtDistCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTxtDistCode().trim());
      }
      if (CommonFunction.checkNull(vo.getPincode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPincode().trim());
      }
      if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getUserId().trim());
      }
      if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerDate().trim());
      }
      if (CommonFunction.checkNull(vo.getAddressLine2()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getAddressLine2().trim());
      if (CommonFunction.checkNull(vo.getAddressLine3()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getAddressLine3().trim());
      if (CommonFunction.checkNull(vo.getTxtTahsil()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTxtTahsil().trim());
      }
      if (CommonFunction.checkNull(id).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(id.trim());
      insertPrepStmtObject.setSql(bufInsUpdSql.toString());
      logger.info(new StringBuilder().append("IN Deal Buyer() UPDATE query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      this.qryList.add(insertPrepStmtObject);

      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
      logger.info(new StringBuilder().append("In savebuyer......................").append(status).toString());
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      bufInsUpdSql = null;

      ob = null;
      id = null;
      vo = null;
    }
    return status;
  }

  public boolean deleteBuyerDetails(String[] id, String bptype)
  {
    logger.info(new StringBuilder().append("BPStatus for buyer...............................................................").append(bptype).toString());
    boolean status = false;
    try
    {
      this.qryList = new ArrayList();
      this.bufInsUpdSql = new StringBuffer();

      for (int k = 0; k < id.length; k++)
      {
        StringBuilder query = new StringBuilder();
        query.append(new StringBuilder().append("Delete from cr_deal_buyer_supplier_dtl where DEAL_BUYER_SUPPLIER_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()).append("'").toString());

        this.qryList.add(query);
        query = null;
      }

      logger.info(new StringBuilder().append("delete query: ").append(this.qryList.get(0)).toString());

      status = ConnectionDAO.sqlInsUpdDelete(this.qryList);
      logger.info(new StringBuilder().append("Status of Deletion is =").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally {
      this.qryList.clear();
      this.qryList = null;
      id = null;
      bptype = null;
    }

    return status;
  }

  public boolean saveSupplierDetails(Object ob)
  {
    BuyerVo vo = (BuyerVo)ob;

    logger.info(new StringBuilder().append("vo.getUserId(): ").append(vo.getUserId()).toString());
    boolean status = false;
    StringBuffer bufInsUpdSql = new StringBuffer();
    this.qryList = new ArrayList();
    this.qryListB = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

    PrepStmtObject insertPrepStmtObject1 = new PrepStmtObject();
    try
    {
      bufInsUpdSql.append("insert into cr_deal_buyer_supplier_dtl(DEAL_ID,DEAL_BUYER_SUPPLIER_RELATION,DEAL_BUYER_SUPPLIER_TYPE,DEAL_BUYER_SUPPLIER_NAME, DEAL_BUYER_SUPPLIER_CONTACT,DEAL_BUYER_SUPPLIER_DESIGNATION,DEAL_BUYER_SUPPLIER_MOBILE,DEAL_BUYER_SUPPLIER_EMAIL,DEAL_BUYER_SUPPLIER_MONTLY_SALES,DEAL_BUYER_SUPPLIER_PAYMENT_TERM, DEAL_BUYER_SUPPLIER_PRODUCT_TYPE,DEAL_BUYER_SUPPLIER_VINTAGE,DEAL_BUYER_SUPPLIER_ADDRESS_TYPE,DEAL_BUYER_SUPPLIER_ADDRESS,DEAL_BUYER_SUPPLIER_COUNTRY,DEAL_BUYER_SUPPLIER_STATE,DEAL_BUYER_SUPPLIER_DISTRICT,DEAL_BUYER_SUPPLIER_PINCODE,REC_STATUS,MAKER_ID,MAKER_DATE,ADDRESS_LINE_2,ADDRESS_LINE_3,TAHSIL)");

      bufInsUpdSql.append(" values( ");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" 'P',");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND)").toString());
      bufInsUpdSql.append(" ,?");
      bufInsUpdSql.append(" ,?");
      bufInsUpdSql.append(" ,?)");
      if (CommonFunction.checkNull(vo.getDealId().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getDealId().trim());
      }

      insertPrepStmtObject.addString("S");

      insertPrepStmtObject.addString("S");

      if (CommonFunction.checkNull(vo.getBusinessPartnerName().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getBusinessPartnerName().trim());
      }

      if (CommonFunction.checkNull(vo.getContactPerson().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getContactPerson().trim());
      }

      if (CommonFunction.checkNull(vo.getDesignation().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getDesignation().trim());
      }

      if (CommonFunction.checkNull(vo.getMobile().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMobile().trim());
      }

      if (CommonFunction.checkNull(vo.getEmail().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getEmail().trim());
      }

      if (CommonFunction.checkNull(vo.getAveragePurchaseSales().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getAveragePurchaseSales().trim()).toString());
      }
      logger.info(new StringBuilder().append("vo.getAveragePurchaseSales(): ").append(vo.getAveragePurchaseSales()).toString());
      logger.info(new StringBuilder().append("myFormatter.parse((vo.getAveragePurchaseSales().trim())).toString(): ").append(this.myFormatter.parse(vo.getAveragePurchaseSales().trim()).toString()).toString());
      if (CommonFunction.checkNull(vo.getPaymentTerms().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPaymentTerms().trim());
      }

      if (CommonFunction.checkNull(vo.getProductType().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getProductType().trim());
      }

      if (CommonFunction.checkNull(vo.getVintageOfRelationship().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVintageOfRelationship().trim());
      }

      if (CommonFunction.checkNull(vo.getAddress()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAddress().trim());
      }

      if (CommonFunction.checkNull(vo.getAddressLine1()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAddressLine1().trim());
      }

      if (CommonFunction.checkNull(vo.getTxtCountryCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTxtCountryCode().trim());
      }
      if (CommonFunction.checkNull(vo.getTxtStateCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTxtStateCode().trim());
      }
      if (CommonFunction.checkNull(vo.getTxtDistCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTxtDistCode().trim());
      }

      if (CommonFunction.checkNull(vo.getPincode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPincode().trim());
      }

      if (CommonFunction.checkNull(vo.getUserId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getUserId());
      }
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getMakerDate());
      if (CommonFunction.checkNull(vo.getAddressLine2()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getAddressLine2().trim());
      if (CommonFunction.checkNull(vo.getAddressLine3()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getAddressLine3().trim());
      if (CommonFunction.checkNull(vo.getTxtTahsil()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTxtTahsil().trim());
      }
      insertPrepStmtObject.setSql(bufInsUpdSql.toString());

      logger.info(new StringBuilder().append("IN Deal saveSupplierDetails() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      this.qryListB.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryListB);
      logger.info(new StringBuilder().append("In cr deal buyer supplier dtl tables......................").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      ob = null;
      vo = null;
      this.qryList = null;
      bufInsUpdSql = null;
      this.qryListB = null;
      insertPrepStmtObject = null;
      insertPrepStmtObject1 = null;
    }

    return status;
  }

  public ArrayList<Object> getSupplierDetailsAll(String bptype1, String sRelation, String id)
  {
    BuyerVo vo = null;
    ArrayList list = new ArrayList();
    try
    {
      logger.info(new StringBuilder().append("bptype1").append(bptype1).toString());
      logger.info(new StringBuilder().append("id").append(id).toString());

      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT c.DEAL_BUYER_SUPPLIER_ID,if(c.DEAL_BUYER_SUPPLIER_RELATION='S','Supplier','') as DEAL_BUYER_SUPPLIER_RELATION,c.DEAL_BUYER_SUPPLIER_NAME,c.DEAL_BUYER_SUPPLIER_MONTLY_SALES,c.DEAL_BUYER_SUPPLIER_PAYMENT_TERM,c.DEAL_BUYER_SUPPLIER_PRODUCT_TYPE,c.DEAL_BUYER_SUPPLIER_VINTAGE from cr_deal_buyer_supplier_dtl c where DEAL_BUYER_SUPPLIER_RELATION='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sRelation)).trim()).append("' and DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()).toString());
      logger.info(new StringBuilder().append("BPStatus for Supplier...............................................................").append(bptype1).toString());
      ArrayList bdetails = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getSupplierDetailsAll").append(bdetails.size()).toString());

      query = null;

      for (int i = 0; i < bdetails.size(); i++)
      {
        ArrayList bdetails1 = (ArrayList)bdetails.get(i);
        if (bdetails1.size() > 0)
        {
          vo = new BuyerVo();
          vo.setPrimaryId(CommonFunction.checkNull(bdetails1.get(0)).trim());
          vo.setBusinessRelationship(CommonFunction.checkNull(bdetails1.get(1)).trim());
          vo.setBusinessPartnerName(CommonFunction.checkNull(bdetails1.get(2)).trim());

          if (!CommonFunction.checkNull(bdetails1.get(3)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(3)).trim());
            vo.setAveragePurchaseSales(this.myFormatter.format(reconNum));
          }

          vo.setPaymentTerms(CommonFunction.checkNull(bdetails1.get(4)).trim());
          vo.setProductType(CommonFunction.checkNull(bdetails1.get(5)).trim());
          vo.setVintageOfRelationship(CommonFunction.checkNull(bdetails1.get(6)).trim());
        }

        list.add(vo);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      bptype1 = null;
      sRelation = null;
      id = null;
      vo = null;
    }

    return list;
  }

  public ArrayList<Object> modifySupplierDetailsAll(String bptype1, String addrId)
  {
    logger.info(new StringBuilder().append("Value of Address ID in modify is =").append(addrId).toString());
    BuyerVo vo = new BuyerVo();
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("Select distinct c.DEAL_BUYER_SUPPLIER_ID,c.DEAL_BUYER_SUPPLIER_RELATION,c.DEAL_BUYER_SUPPLIER_NAME, DEAL_BUYER_SUPPLIER_CONTACT,c.DEAL_BUYER_SUPPLIER_DESIGNATION,c.DEAL_BUYER_SUPPLIER_MOBILE,c.DEAL_BUYER_SUPPLIER_EMAIL, c.DEAL_BUYER_SUPPLIER_MONTLY_SALES,c.DEAL_BUYER_SUPPLIER_PAYMENT_TERM,c.DEAL_BUYER_SUPPLIER_PRODUCT_TYPE, c.DEAL_BUYER_SUPPLIER_VINTAGE,c.DEAL_BUYER_SUPPLIER_ADDRESS,c.DEAL_BUYER_SUPPLIER_PINCODE, c.DEAL_BUYER_SUPPLIER_TYPE,c.DEAL_BUYER_SUPPLIER_ADDRESS_TYPE,c.DEAL_BUYER_SUPPLIER_COUNTRY,c.DEAL_BUYER_SUPPLIER_STATE,c.DEAL_BUYER_SUPPLIER_DISTRICT,c.ADDRESS_LINE_2,c.ADDRESS_LINE_3,c.TAHSIL from cr_deal_buyer_supplier_dtl c  where c.DEAL_BUYER_SUPPLIER_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(addrId)).trim()).append("'").toString());

      logger.info(new StringBuilder().append("modifyBuyerDetailsAll fetch data:").append(query).toString());
      ArrayList bdetails = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("modifyBuyerDetailsAll").append(bdetails.size()).toString());

      query = null;

      for (int i = 0; i < bdetails.size(); i++)
      {
        ArrayList bdetails1 = (ArrayList)bdetails.get(i);
        for (int k = 0; k < bdetails1.size(); k++)
        {
          vo.setPrimaryId(CommonFunction.checkNull(bdetails1.get(0)).trim());
          vo.setBusinessRelationship(CommonFunction.checkNull(bdetails1.get(1)).trim());

          vo.setBusinessPartnerName(CommonFunction.checkNull(bdetails1.get(2)).trim());
          vo.setContactPerson(CommonFunction.checkNull(bdetails1.get(3)).trim());
          vo.setDesignation(CommonFunction.checkNull(bdetails1.get(4)).trim());
          vo.setMobile(CommonFunction.checkNull(bdetails1.get(5)).trim());
          vo.setEmail(CommonFunction.checkNull(bdetails1.get(6)).trim());

          if (!CommonFunction.checkNull(bdetails1.get(7)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(7)).trim());
            vo.setAveragePurchaseSales(this.myFormatter.format(reconNum));
          }

          vo.setPaymentTerms(CommonFunction.checkNull(bdetails1.get(8)).trim());
          vo.setProductType(CommonFunction.checkNull(bdetails1.get(9)).trim());
          vo.setVintageOfRelationship(CommonFunction.checkNull(bdetails1.get(10)).trim());

          vo.setAddressLine1(CommonFunction.checkNull(bdetails1.get(11)).trim());
          vo.setPincode(CommonFunction.checkNull(bdetails1.get(12)).trim());
          logger.info(new StringBuilder().append("Address Type: ").append(bdetails1.get(14)).toString());
          vo.setBpType(CommonFunction.checkNull(bdetails1.get(13)).trim());

          vo.setAddress(CommonFunction.checkNull(bdetails1.get(14)).trim());

          vo.setTxtCountryCode(CommonFunction.checkNull(bdetails1.get(15)).trim());
          vo.setTxtStateCode(CommonFunction.checkNull(bdetails1.get(16)).trim());
          vo.setTxtDistCode(CommonFunction.checkNull(bdetails1.get(17)).trim());
          vo.setAddressLine2(CommonFunction.checkNull(bdetails1.get(18)).trim());
          vo.setAddressLine3(CommonFunction.checkNull(bdetails1.get(19)).trim());
          vo.setTxtTahsil(CommonFunction.checkNull(bdetails1.get(20)).trim());
        }

        bdetails1.clear();
        bdetails1 = null;
        list.add(vo);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      bptype1 = null;
      addrId = null;
      vo = null;
    }

    logger.info(new StringBuilder().append("Value of List is in dao is..................=").append(list).toString());
    return list;
  }

  public boolean updateSupplierDetailsAll(Object ob, String bptype1, String primaryId)
  {
    logger.info(new StringBuilder().append("Value of Address ID in Updation  is =").append(primaryId).toString());
    BuyerVo vo = (BuyerVo)ob;
    logger.info(new StringBuilder().append("Value of Address ID in Updation  is =").append(vo.getMakerDate()).toString());
    boolean status = false;
    StringBuffer bufInsUpdSql = new StringBuffer();
    this.qryList = new ArrayList();
    try
    {
      bufInsUpdSql.append(" UPDATE cr_deal_buyer_supplier_dtl");
      bufInsUpdSql.append(new StringBuilder().append(" SET DEAL_BUYER_SUPPLIER_TYPE =?,DEAL_BUYER_SUPPLIER_RELATION =?,DEAL_BUYER_SUPPLIER_NAME =?,DEAL_BUYER_SUPPLIER_CONTACT =?,DEAL_BUYER_SUPPLIER_DESIGNATION =?,DEAL_BUYER_SUPPLIER_MOBILE =?,DEAL_BUYER_SUPPLIER_EMAIL =?,DEAL_BUYER_SUPPLIER_MONTLY_SALES =?,DEAL_BUYER_SUPPLIER_PAYMENT_TERM =?,DEAL_BUYER_SUPPLIER_PRODUCT_TYPE =?,DEAL_BUYER_SUPPLIER_VINTAGE =?,DEAL_BUYER_SUPPLIER_ADDRESS_TYPE=?,DEAL_BUYER_SUPPLIER_ADDRESS=?,DEAL_BUYER_SUPPLIER_COUNTRY=?,DEAL_BUYER_SUPPLIER_STATE=?,DEAL_BUYER_SUPPLIER_DISTRICT=?,DEAL_BUYER_SUPPLIER_PINCODE=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND)").toString());

      bufInsUpdSql.append("  ,ADDRESS_LINE_2=?,ADDRESS_LINE_3=?,TAHSIL=?");
      bufInsUpdSql.append(" WHERE DEAL_BUYER_SUPPLIER_ID=?");
      PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

      insertPrepStmtObject.addString("S");

      insertPrepStmtObject.addString("S");

      if (CommonFunction.checkNull(vo.getBusinessPartnerName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getBusinessPartnerName().trim());
      }
      if (CommonFunction.checkNull(vo.getContactPerson()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getContactPerson().trim());
      }
      if (CommonFunction.checkNull(vo.getDesignation()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getDesignation().trim());
      }
      if (CommonFunction.checkNull(vo.getMobile()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMobile().trim());
      }
      if (CommonFunction.checkNull(vo.getEmail()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getEmail().trim());
      }
      if (CommonFunction.checkNull(vo.getAveragePurchaseSales().trim()).toString().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getAveragePurchaseSales().trim()).toString());
      }
      logger.info(new StringBuilder().append("vo.getAveragePurchaseSales(): ").append(vo.getAveragePurchaseSales()).toString());
      logger.info(new StringBuilder().append("myFormatter.parse((vo.getAveragePurchaseSales().trim())).toString(): ").append(this.myFormatter.parse(vo.getAveragePurchaseSales().trim()).toString()).toString());

      if (CommonFunction.checkNull(vo.getPaymentTerms()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPaymentTerms().trim());
      }
      if (CommonFunction.checkNull(vo.getProductType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getProductType().trim());
      }
      if (CommonFunction.checkNull(vo.getVintageOfRelationship()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVintageOfRelationship().trim());
      }
      if (CommonFunction.checkNull(vo.getAddress()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAddress().trim());
      }
      if (CommonFunction.checkNull(vo.getAddressLine1()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAddressLine1().trim());
      }
      if (CommonFunction.checkNull(vo.getTxtCountryCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTxtCountryCode().trim());
      }
      if (CommonFunction.checkNull(vo.getTxtStateCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTxtStateCode().trim());
      }
      if (CommonFunction.checkNull(vo.getTxtDistCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTxtDistCode().trim());
      }
      if (CommonFunction.checkNull(vo.getPincode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPincode().trim());
      }
      if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getUserId().trim());
      }
      if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerDate().trim());
      }
      if (CommonFunction.checkNull(vo.getAddressLine2()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getAddressLine2().trim());
      if (CommonFunction.checkNull(vo.getAddressLine3()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getAddressLine3().trim());
      if (CommonFunction.checkNull(vo.getTxtTahsil()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTxtTahsil().trim());
      }
      if (CommonFunction.checkNull(primaryId).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(primaryId.trim());
      }
      insertPrepStmtObject.setSql(bufInsUpdSql.toString());
      logger.info(new StringBuilder().append("IN Deal Buyer() UPDATE query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      this.qryList.add(insertPrepStmtObject);

      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
      logger.info(new StringBuilder().append("In savebuyer......................").append(status).toString());
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      bufInsUpdSql = null;
      ob = null;
      primaryId = null;
      vo = null;
    }

    return status;
  }

  public boolean deleteSupplierDetails(String[] id, String bptype1)
  {
    logger.info(new StringBuilder().append("BPStatus for Supplier...............................................................").append(bptype1).toString());
    boolean status = false;
    try
    {
      this.qryList = new ArrayList();
      this.bufInsUpdSql = new StringBuffer();
      this.delPrepStmtObject = new PrepStmtObject();
      for (int k = 0; k < id.length; k++)
      {
        StringBuilder query = new StringBuilder();
        query.append(new StringBuilder().append("Delete cr_deal_buyer_supplier_dtl,cr_deal_address_m from cr_deal_buyer_supplier_dtl left join cr_deal_address_m on DEAL_BUYER_SUPPLIER_ID=BPID where DEAL_BUYER_SUPPLIER_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()).append("'AND BPTYPE='S'").toString());
        this.delPrepStmtObject.setSql(query.toString());
        this.qryList.add(this.delPrepStmtObject);

        query = null;
      }

      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);

      logger.info(new StringBuilder().append("Status of Deletion is =").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally {
      this.qryList.clear();
      this.qryList = null;
      id = null;
      bptype1 = null;
    }

    return status;
  }

  public boolean saveLoanDetails(Object ob)
  {
    LoanDetailVo loanVo = (LoanDetailVo)ob;

    boolean status = false;
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = null;
    PrepStmtObject deletePrepStmtObject = null;
    logger.info(new StringBuilder().append("In saveCustomer....saveLoanDetails...").append(loanVo.getDealLoanId()).append("loanVo.getType() ").append(loanVo.getType()).toString());
    try {
      StringBuilder q = new StringBuilder();
      q.append(new StringBuilder().append("select DEAL_LOAN_ID from cr_deal_loan_dtl where DEAL_LOAN_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanVo.getDealLoanId())).trim()).append("'").toString());
      boolean upd = ConnectionDAO.checkStatus(q.toString());

      q = null;

      if (upd)
      {
        logger.info("In saveCustomer....saveLoanDetails...Update mode");
        StringBuilder deleteInst = new StringBuilder();
        deleteInst.append("DELETE from cr_deal_installment_plan where DEAL_LOAN_ID=?");
        deletePrepStmtObject = new PrepStmtObject();
        if (CommonFunction.checkNull(loanVo.getDealLoanId()).trim().equalsIgnoreCase(""))
          deletePrepStmtObject.addNull();
        else {
          deletePrepStmtObject.addString(loanVo.getDealLoanId().trim());
        }
        deletePrepStmtObject.setSql(deleteInst.toString());
        logger.info(new StringBuilder().append("IN saveLoanDetails() delete query1 ### ").append(deletePrepStmtObject.printQuery()).toString());
        qryList.add(deletePrepStmtObject);

        StringBuilder query = new StringBuilder();
        query.append(new StringBuilder().append("update cr_deal_loan_dtl set DEAL_PRODUCT=?,  DEAL_SCHEME=?,DEAL_DISBURSAL_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),").append(" DEAL_ASSET_COST=?,DEAL_MARGIN_RATE=?, ").append(" DEAL_MARGIN_AMOUNT=?,DEAL_LOAN_AMOUNT=?,DEAL_TENURE=?,").append(" DEAL_REPAYMENT_FREQ=?, ").append(" DEAL_RATE_TYPE=?,DEAL_RATE_METHOD=?,DEAL_BASE_RATE_TYPE=?,DEAL_BASE_RATE=?, ").append(" DEAL_MARKUP=?,DEAL_FINAL_RATE=?,DEAL_REPAYMENT_TYPE=?,DEAL_INSTALLMENT_TYPE=?, DEAL_INSTALLMENT_MODE=?, ").append(" DEAL_REPAYMENT_MODE=?,DEAL_NO_OF_INSTALLMENT=?,DEAL_LOAN_PURPOSE=?,DEAL_SECTOR_TYPE=?,DEAL_ADVANCE_INSTL=?,").append("DEAL_REPAY_EFF_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),DEAL_MATURITY_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),").append("DEAL_DUE_DAY=?,NEXT_DUE_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),DEAL_FLAT_RATE=?,DEAL_EFF_RATE=?,MAKER_ID=?,").append("MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),LOAN_TYPE=?,").append("DEAL_INT_CALC_FROM=?,TENURE_IN_DAY=?,DEAL_FLOATING_FIXED_PERIOD=?,NO_OF_ASSET=?,LOAN_CLASSIFICATION=?,").append("DEAL_CREDIT_PERIOD=?, INT_COMP_FREQ=?, INT_METHOD=?, INT_FREQ=?,INTEREST_DUE_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),edit_due_date=?,FIRST_INTEREST_DUE_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),INSURANCE_PREMIUM=?,DEAL_LOAN_AMOUNT_NEW=?,business_type=?,GROSS_BLOCK=?,NET_BLOCK=?   where DEAL_LOAN_ID=?").toString());
        insertPrepStmtObject = new PrepStmtObject();

        if (CommonFunction.checkNull(loanVo.getLbxProductID()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getLbxProductID().trim());
        }
        if (CommonFunction.checkNull(loanVo.getLbxscheme()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getLbxscheme().trim());
        }
        if (CommonFunction.checkNull(loanVo.getDisbursalDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getDisbursalDate().trim());
        }
        if (CommonFunction.checkNull(loanVo.getAssetCost()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getAssetCost().trim()).toString());
        }

        if (CommonFunction.checkNull(loanVo.getMarginPerc()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getMarginPerc().trim()).toString());
        }

        if (CommonFunction.checkNull(loanVo.getMarginAmount()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getMarginAmount().trim()).toString());
        }

        if (CommonFunction.checkNull(loanVo.getRequestedLoanAmount()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getRequestedLoanAmount().trim()).toString());
        }

        if (CommonFunction.checkNull(loanVo.getRequestedLoanTenure()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getRequestedLoanTenure().trim());
        }
        if (CommonFunction.checkNull(loanVo.getFrequency()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getFrequency().trim());
        }
        if (CommonFunction.checkNull(loanVo.getRateType()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getRateType().trim());
        }
        if (CommonFunction.checkNull(loanVo.getType()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getType().trim());
        }
        if (CommonFunction.checkNull(loanVo.getBaseRateType()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getBaseRateType().trim());
        }
        if (CommonFunction.checkNull(loanVo.getBaseRate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getBaseRate().trim()).toString());
        }

        if (CommonFunction.checkNull(loanVo.getMarkUp()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getMarkUp().trim()).toString());
        }

        if (CommonFunction.checkNull(loanVo.getEffectiveRate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getEffectiveRate().trim()).toString());
        }

        if (CommonFunction.checkNull(loanVo.getRepaymentType()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getRepaymentType().trim());
        }
        if (CommonFunction.checkNull(loanVo.getInstallmentType()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getInstallmentType().trim());
        }
        if (CommonFunction.checkNull(loanVo.getInstMode()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getInstMode().trim());
        }
        if (CommonFunction.checkNull(loanVo.getPaymentMode()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getPaymentMode().trim());
        }
        if (CommonFunction.checkNull(loanVo.getNoOfInstall()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getNoOfInstall().trim());
        }

        if (CommonFunction.checkNull(loanVo.getLbxLoanPurpose()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getLbxLoanPurpose().trim());
        }
        if (CommonFunction.checkNull(loanVo.getSectorType()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getSectorType().trim());
        }
        if (CommonFunction.checkNull(loanVo.getInstallments()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0");
        else {
          insertPrepStmtObject.addString(loanVo.getInstallments().trim());
        }
        if (CommonFunction.checkNull(loanVo.getRepayEffectiveDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getRepayEffectiveDate().trim());
        }
        if (CommonFunction.checkNull(loanVo.getMaturityDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getMaturityDate().trim());
        }
        if (CommonFunction.checkNull(loanVo.getCycleDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getCycleDate().trim());
        }
        if (CommonFunction.checkNull(loanVo.getNextDueDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getNextDueDate().trim());
        }
        if (CommonFunction.checkNull(loanVo.getRateType()).trim().equalsIgnoreCase("F"))
        {
          if (CommonFunction.checkNull(loanVo.getEffectiveRate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getEffectiveRate().trim()).toString());
          }
        }
        else {
          insertPrepStmtObject.addNull();
        }
        if (CommonFunction.checkNull(loanVo.getRateType()).trim().equalsIgnoreCase("E"))
        {
          if (CommonFunction.checkNull(loanVo.getEffectiveRate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getEffectiveRate().trim()).toString());
          }
        }
        else {
          insertPrepStmtObject.addNull();
        }

        if (CommonFunction.checkNull(loanVo.getUserId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getUserId().trim());
        }
        if (CommonFunction.checkNull(loanVo.getBgDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getBgDate().trim());
        }

        if (CommonFunction.checkNull(loanVo.getLoanType()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getLoanType().trim());
        }

        logger.info(new StringBuilder().append("IN DAOIMPL SAVE LOAN Int. Calc. From---").append(CommonFunction.checkNull(loanVo.getInterestCalc())).toString());
        if (CommonFunction.checkNull(loanVo.getInterestCalc()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getInterestCalc().trim());
        }
        if (CommonFunction.checkNull(loanVo.getTenureInDay()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getTenureInDay().trim());
        }

        if (CommonFunction.checkNull(loanVo.getFixPriod()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addInt(0L);
        else {
          insertPrepStmtObject.addString(loanVo.getFixPriod().trim());
        }
        if (CommonFunction.checkNull(loanVo.getNoOfAsset()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addInt(0L);
        else {
          insertPrepStmtObject.addString(loanVo.getNoOfAsset().trim());
        }
        if (CommonFunction.checkNull(loanVo.getLbxLoanClassification()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addInt(0L);
        else {
          insertPrepStmtObject.addString(loanVo.getLbxLoanClassification().trim());
        }

        if (CommonFunction.checkNull(loanVo.getCreditPeriod()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getCreditPeriod().trim());
        }

        if (CommonFunction.checkNull(loanVo.getInterestCompoundingFrequency()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getInterestCompoundingFrequency().trim());
        }
        if (CommonFunction.checkNull(loanVo.getInterestCalculationMethod()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getInterestCalculationMethod().trim());
        }
        if (CommonFunction.checkNull(loanVo.getInterestFrequency()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getInterestFrequency().trim());
        }
        if (CommonFunction.checkNull(loanVo.getInterestDueDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getInterestDueDate().trim());
        }
        if (CommonFunction.checkNull(loanVo.getEditDueDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getEditDueDate().trim());
        }
        if (CommonFunction.checkNull(loanVo.getFirstInterestDueDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getFirstInterestDueDate().trim());
        }
        if (CommonFunction.checkNull(loanVo.getInsurancePremium()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getInsurancePremium().trim());
        }
        if (CommonFunction.checkNull(loanVo.getRequestedLoamt()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getRequestedLoamt().trim()).toString());
        }

        if (CommonFunction.checkNull((loanVo.getBusinessType())).trim().equalsIgnoreCase(""))
			insertPrepStmtObject.addNull();
		else
			insertPrepStmtObject.addString((loanVo.getBusinessType()).trim());
		
        if (CommonFunction.checkNull(loanVo.getGrossBlock()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
        else {
            insertPrepStmtObject.addString(loanVo.getGrossBlock().trim());
        }
        if (CommonFunction.checkNull(loanVo.getNetBlock()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
        else {
            insertPrepStmtObject.addString(loanVo.getNetBlock().trim());
        }
        

        if (CommonFunction.checkNull(loanVo.getDealLoanId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(loanVo.getDealLoanId().trim());
        }
        insertPrepStmtObject.setSql(query.toString());
        logger.info(new StringBuilder().append("IN saveLoanDetails() update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveCustomer......................").append(status).toString());
        startDealNumberGenerator(loanVo.getDealId());
        query = null;
      }
      else
      {
        StringBuilder q2 = new StringBuilder();
        q2.append(new StringBuilder().append("select DEAL_LOAN_ID from cr_deal_loan_dtl where DEAL_ID=").append(loanVo.getDealId()).toString());
        logger.info(new StringBuilder().append("query of loan detail table: ").append(q2).toString());
        status = ConnectionDAO.checkStatus(q2.toString());
        logger.info(new StringBuilder().append("status of loan detail table: ").append(status).toString());

        q2 = null;

        if (!status)
        {
          StringBuffer bufInsSql = new StringBuffer();
          bufInsSql.append("insert into cr_deal_loan_dtl(DEAL_ID,DEAL_PRODUCT_CATEGORY,DEAL_PRODUCT, DEAL_SCHEME,DEAL_PRODUCT_TYPE,DEAL_DISBURSAL_DATE,DEAL_ASSET_COST,DEAL_MARGIN_RATE, DEAL_MARGIN_AMOUNT,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_REPAYMENT_FREQ, DEAL_RATE_TYPE,DEAL_RATE_METHOD,DEAL_BASE_RATE_TYPE,DEAL_BASE_RATE, DEAL_MARKUP,DEAL_FINAL_RATE,DEAL_REPAYMENT_TYPE,DEAL_INSTALLMENT_TYPE, DEAL_INSTALLMENT_MODE, DEAL_NO_OF_INSTALLMENT,  DEAL_REPAYMENT_MODE,DEAL_LOAN_PURPOSE,REC_STATUS,MAKER_ID,MAKER_DATE,DEAL_SECTOR_TYPE,DEAL_ADVANCE_INSTL, DEAL_REPAY_EFF_DATE,DEAL_MATURITY_DATE,DEAL_DUE_DAY,NEXT_DUE_DATE,DEAL_FLAT_RATE,DEAL_EFF_RATE, LOAN_TYPE,DEAL_INT_CALC_FROM,TENURE_IN_DAY,DEAL_FLOATING_FIXED_PERIOD,NO_OF_ASSET,LOAN_CLASSIFICATION, DEAL_CREDIT_PERIOD,INT_COMP_FREQ,INT_METHOD,INT_FREQ,INTEREST_DUE_DATE,edit_due_date,FIRST_INTEREST_DUE_DATE ,INSURANCE_PREMIUM,DEAL_LOAN_AMOUNT_NEW,business_type,GROSS_BLOCK,NET_BLOCK)");

          bufInsSql.append(" values ( ");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND), ").toString());
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
          bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
          bufInsSql.append(" ?, ");
          bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ? ,");
          bufInsSql.append(" ? ,");
          bufInsSql.append(" ? ,");
          bufInsSql.append(" ? ,");
          bufInsSql.append(" ?, ");
          bufInsSql.append(" ?, ");
          bufInsSql.append(" ?, ");
          bufInsSql.append(" ?, ");
          bufInsSql.append(" ?, ");
          bufInsSql.append(" ?,");
          bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'), ").toString());
          bufInsSql.append("?, ");
          bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?");
          bufInsSql.append(")");

          insertPrepStmtObject = new PrepStmtObject();

          if (CommonFunction.checkNull(loanVo.getDealId()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(loanVo.getDealId().trim());
          if (CommonFunction.checkNull(loanVo.getProductType()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(loanVo.getProductType().trim());
          if (CommonFunction.checkNull(loanVo.getLbxProductID()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(loanVo.getLbxProductID().trim());
          if (CommonFunction.checkNull(loanVo.getLbxscheme()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getLbxscheme().trim());
          }
          if (CommonFunction.checkNull(loanVo.getProductTypeFlag()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getProductTypeFlag().trim());
          }
          if (CommonFunction.checkNull(loanVo.getDisbursalDate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getDisbursalDate().trim());
          }
          if (loanVo.getAssetCost().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getAssetCost().trim()).toString());
          }
          if (loanVo.getMarginPerc().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getMarginPerc().trim()).toString());
          if (CommonFunction.checkNull(loanVo.getMarginAmount()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getMarginAmount().trim()).toString());
          if (CommonFunction.checkNull(loanVo.getRequestedLoanAmount()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getRequestedLoanAmount().trim()).toString());
          if (CommonFunction.checkNull(loanVo.getRequestedLoanTenure()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(loanVo.getRequestedLoanTenure().trim());
          if (CommonFunction.checkNull(loanVo.getFrequency()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getFrequency().trim());
          }
          if (CommonFunction.checkNull(loanVo.getRateType()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getRateType().trim());
          }
          if (CommonFunction.checkNull(loanVo.getType()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getType().trim());
          }
          if (CommonFunction.checkNull(loanVo.getBaseRateType()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getBaseRateType().trim());
          }
          if (CommonFunction.checkNull(loanVo.getBaseRate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getBaseRate().trim());
          }
          if (CommonFunction.checkNull(loanVo.getMarkUp()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getMarkUp().trim()).toString());
          }
          if (CommonFunction.checkNull(loanVo.getEffectiveRate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getEffectiveRate().trim()).toString());
          }
          if (CommonFunction.checkNull(loanVo.getRepaymentType()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(loanVo.getRepaymentType().trim());
          if (CommonFunction.checkNull(loanVo.getInstallmentType()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(loanVo.getInstallmentType().trim());
          if (CommonFunction.checkNull(loanVo.getInstMode()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getInstMode().trim());
          }

          if (CommonFunction.checkNull(loanVo.getNoOfInstall()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getNoOfInstall().trim());
          }
          if (CommonFunction.checkNull(loanVo.getPaymentMode()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(loanVo.getPaymentMode().trim());
          if (CommonFunction.checkNull(loanVo.getLbxLoanPurpose()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getLbxLoanPurpose().trim());
          }
          insertPrepStmtObject.addString("P");
          if (CommonFunction.checkNull(loanVo.getUserId()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getUserId().trim());
          }
          if (CommonFunction.checkNull(loanVo.getBgDate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getBgDate().trim());
          }

          if (CommonFunction.checkNull(loanVo.getSectorType()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getSectorType().trim());
          }
          if (CommonFunction.checkNull(loanVo.getInstallments()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addString("0");
          else {
            insertPrepStmtObject.addString(loanVo.getInstallments().trim());
          }
          if (CommonFunction.checkNull(loanVo.getRepayEffectiveDate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getRepayEffectiveDate().trim());
          }
          if (CommonFunction.checkNull(loanVo.getMaturityDate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getMaturityDate().trim());
          }
          if (CommonFunction.checkNull(loanVo.getCycleDate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getCycleDate().trim());
          }
          if (CommonFunction.checkNull(loanVo.getNextDueDate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getNextDueDate().trim());
          }
          if (CommonFunction.checkNull(loanVo.getRateType()).trim().equalsIgnoreCase("F"))
          {
            if (CommonFunction.checkNull(loanVo.getEffectiveRate()).trim().equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else {
              insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getEffectiveRate().trim()).toString());
            }
          }
          else {
            insertPrepStmtObject.addNull();
          }
          if (CommonFunction.checkNull(loanVo.getRateType()).trim().equalsIgnoreCase("E"))
          {
            if (CommonFunction.checkNull(loanVo.getEffectiveRate()).trim().equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else {
              insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getEffectiveRate().trim()).toString());
            }
          }
          else {
            insertPrepStmtObject.addNull();
          }

          if (CommonFunction.checkNull(loanVo.getLoanType()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getLoanType().trim());
          }

          logger.info(new StringBuilder().append("IN DAOIMPL SAVE LOAN Int. Calc. From---").append(CommonFunction.checkNull(loanVo.getInterestCalc())).toString());
          if (CommonFunction.checkNull(loanVo.getInterestCalc()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getInterestCalc().trim());
          }
          if (CommonFunction.checkNull(loanVo.getTenureInDay()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getTenureInDay().trim());
          }
          if (CommonFunction.checkNull(loanVo.getFixPriod()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addInt(0L);
          else {
            insertPrepStmtObject.addString(loanVo.getFixPriod().trim());
          }
          if (CommonFunction.checkNull(loanVo.getNoOfAsset()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addInt(0L);
          else {
            insertPrepStmtObject.addString(loanVo.getNoOfAsset().trim());
          }
          if (CommonFunction.checkNull(loanVo.getLbxLoanClassification()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addInt(0L);
          else {
            insertPrepStmtObject.addString(loanVo.getLbxLoanClassification().trim());
          }
          if (CommonFunction.checkNull(loanVo.getCreditPeriod()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addInt(0L);
          else {
            insertPrepStmtObject.addString(loanVo.getCreditPeriod().trim());
          }
          if (CommonFunction.checkNull(loanVo.getInterestCompoundingFrequency()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getInterestCompoundingFrequency().trim());
          }
          if (CommonFunction.checkNull(loanVo.getInterestCalculationMethod()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getInterestCalculationMethod().trim());
          }
          if (CommonFunction.checkNull(loanVo.getInterestFrequency()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getInterestFrequency().trim());
          }

          if (CommonFunction.checkNull(loanVo.getInterestDueDate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getInterestDueDate().trim());
          }
          if (CommonFunction.checkNull(loanVo.getEditDueDate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getEditDueDate().trim());
          }
          if (CommonFunction.checkNull(loanVo.getFirstInterestDueDate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getFirstInterestDueDate().trim());
          }
          if (CommonFunction.checkNull(loanVo.getInsurancePremium()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(loanVo.getInsurancePremium().trim());
          }

          if (CommonFunction.checkNull(loanVo.getRequestedLoamt()).trim().equalsIgnoreCase(""))
              insertPrepStmtObject.addNull();
            else {
              insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getRequestedLoamt().trim()).toString());
            }

  			if (CommonFunction.checkNull((loanVo.getBusinessType())).trim().equalsIgnoreCase(""))
  				insertPrepStmtObject.addNull();
  			else
  				insertPrepStmtObject.addString((loanVo.getBusinessType()).trim());
  			
  	       if (CommonFunction.checkNull(loanVo.getGrossBlock()).trim().equalsIgnoreCase(""))
  	           insertPrepStmtObject.addNull();
  	       else {
  	           insertPrepStmtObject.addString(loanVo.getGrossBlock().trim());
  	       }

  	       if (CommonFunction.checkNull(loanVo.getNetBlock()).trim().equalsIgnoreCase(""))
  	          insertPrepStmtObject.addNull();
  	       else {
  	           insertPrepStmtObject.addString(loanVo.getNetBlock().trim());
  	       }

            insertPrepStmtObject.setSql(bufInsSql.toString());
          logger.info(new StringBuilder().append("IN SaveLoan() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
          qryList.add(insertPrepStmtObject);
          status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
          logger.info(new StringBuilder().append("In saveCustomer......................").append(status).toString());

          bufInsSql = null;
          StringBuilder checkStageM = new StringBuilder();
          logger.info(new StringBuilder().append("Company Id:--------- ").append(loanVo.getCompanyId()).append(" dealId:-------").append(loanVo.getDealId()).toString());
          checkStageM.append(CommonFunction.stageMovement(loanVo.getCompanyId(), "DC", "I", loanVo.getDealId(), "DC", loanVo.getBgDate(), loanVo.getUserId()));
          logger.info(new StringBuilder().append("checkStageM : ").append(checkStageM).toString());
          startDealNumberGenerator(loanVo.getDealId());
        }
        else
        {
          status = false;
        }

      }

      if (status)
      {
        logger.info(new StringBuilder().append("status : ").append(status).toString());
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      ob = null;
      loanVo = null;
    }

    return status;
  }

  public boolean saveNotepadData(Object ob)
  {
    CreditProcessingNotepadVo vo = (CreditProcessingNotepadVo)ob;
    boolean status = false;

    StringBuilder metingdateTime = new StringBuilder();
    StringBuilder followupdateTime = new StringBuilder();
    StringBuilder commonId = new StringBuilder();

    if ((vo.getLoanId() != null) && (!vo.getLoanId().equalsIgnoreCase("")))
    {
      commonId.append(vo.getLoanId());
    }
    else
    {
      commonId.append(vo.getDealId());
    }
    if (vo.getFollowUp().equalsIgnoreCase("Y")) {
      metingdateTime.append(new StringBuilder().append(vo.getMeetingDate()).append(" ").append(vo.getMeetingTime()).toString());
      followupdateTime.append(new StringBuilder().append(vo.getFollowupDate()).append(" ").append(vo.getFollowupTime()).toString());
      logger.info(new StringBuilder().append("In saveNotepadData...............").append(metingdateTime).append("......................Dao Impl....111").append(followupdateTime).toString());
    }
    else if (vo.getFollowUp().equalsIgnoreCase("N")) {
      metingdateTime.append(new StringBuilder().append(vo.getMeetingDate()).append(" ").append(vo.getMeetingTime()).toString());
    }

    logger.info(new StringBuilder().append("VALUE OF FollowUpDateTime.....................................").append(followupdateTime).toString());
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    try
    {
      logger.info("In insert customer address part");
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("insert into cr_notepad_dtl(TXN_TYPE,TXN_ID,NOTEPAD_DATE,NOTEPAD_CODE,NOTEPAD_COMMENTS,PERSON_MET,MEETING_LOCATION,FOLLOWUP_REQD,FOLLOWUP_DATE,FOLLOWUP_REMARKS,FOLLOWUP_PERSON,FOLLOWUP_LOCATION,MAKER_ID,MAKER_DATE)");
      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormatWithTime).append("'),").toString());
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormatWithTime).append("'),").toString());
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND))").toString());

      if (CommonFunction.checkNull(vo.getTxnType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTxnType().trim());
      }
      if (CommonFunction.checkNull(commonId.toString()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(commonId.toString().trim());
      }
      if (CommonFunction.checkNull(metingdateTime).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(metingdateTime.toString().trim());
      }
      if (CommonFunction.checkNull(vo.getNoteCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getNoteCode().trim());
      }
      if (CommonFunction.checkNull(vo.getMeetingRemarks()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMeetingRemarks().trim());
      }
      if (CommonFunction.checkNull(vo.getPersonMet()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPersonMet().trim());
      }
      if (CommonFunction.checkNull(vo.getMeetingLocation()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMeetingLocation().trim());
      }
      if (CommonFunction.checkNull(vo.getFollowUp()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getFollowUp().trim());
      }
      if (CommonFunction.checkNull(followupdateTime).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(followupdateTime.toString().trim());
      }
      if (CommonFunction.checkNull(vo.getFollowupRemarks()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getFollowupRemarks().trim());
      if (CommonFunction.checkNull(vo.getFollowUpPerson()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getFollowUpPerson().trim());
      if (CommonFunction.checkNull(vo.getFollowUpLocation()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getFollowUpLocation().trim());
      if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getUserId().trim());
      if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerDate().trim());
      }
      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN saveNotepadData() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In saveNotepadData......................").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      ob = null;
      vo = null;
      metingdateTime = null;
      followupdateTime = null;
      commonId = null;
    }
    return status;
  }

  public ArrayList getNoteCode() {
    ArrayList list = new ArrayList();
    try {
      logger.info("In getNoteCode..........................DAOImpl");
      StringBuilder query = new StringBuilder();
      query.append("select gm.value, gm.description from generic_master gm,generic_master_keys gmk where gm.generic_key='note_code'and gmk.generic_key='note_code' and gm.REC_STATUS='A' and gm.value!='PD'");
      logger.info(new StringBuilder().append("query: ").append(query).toString());
      CreditProcessingNotepadVo noteVO = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getNoteCode ").append(product.size()).toString());

      query = null;

      for (int i = 0; i < product.size(); i++)
      {
        ArrayList data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          noteVO = new CreditProcessingNotepadVo();
          noteVO.setNoteCodeValue(CommonFunction.checkNull(data.get(0)).trim());
          noteVO.setNoteCodeDescription(CommonFunction.checkNull(data.get(1)).trim());
          list.add(noteVO);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getNotepadDataForNotepad(String txnid)
  {
    ArrayList list = new ArrayList();
    try {
      logger.info(new StringBuilder().append("In getNotepadDataForNotepad......Dao Impl").append(txnid).toString());

      StringBuilder query = new StringBuilder();

      query.append(new StringBuilder().append("select distinct b.description ,DATE_FORMAT(notepad_date,'").append(this.dateFormatWithTime).append("'),person_met,meeting_location,if(followup_reqd='N','NO','YES') as followup_reqd,").append(" DATE_FORMAT(followup_date,'").append(this.dateFormatWithTime).append("'),followup_location,notepad_comments,followup_remarks,FOLLOWUP_PERSON, ").append(" s.USER_NAME,DATE_FORMAT(a.maker_date,'").append(this.dateFormatWithTime).append("') from cr_notepad_dtl a,generic_master b,sec_user_m s").append(" where notepad_code=b.value and ").append("txn_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnid)).trim()).append("' and TXN_TYPE='LIM'").append(" and a.MAKER_ID=s.USER_ID and a.notepad_code!='PD' ").append("union all ").append(" select distinct b.description ,DATE_FORMAT(notepad_date,'").append(this.dateFormatWithTime).append("'),person_met,meeting_location,if(followup_reqd='N','NO','YES') as followup_reqd,").append(" DATE_FORMAT(followup_date,'").append(this.dateFormatWithTime).append("'),followup_location,notepad_comments,followup_remarks,FOLLOWUP_PERSON, ").append(" s.USER_NAME,DATE_FORMAT(a.maker_date,'").append(this.dateFormatWithTime).append("') from cr_notepad_dtl a,generic_master b,sec_user_m s").append(" where notepad_code=b.value and ").append("txn_id=(SELECT LOAN_DEAL_ID FROM  CR_LOAN_DTL WHERE LOAN_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnid)).trim()).append("') and TXN_TYPE='DC'").append(" and a.MAKER_ID=s.USER_ID and a.notepad_code!='PD'").toString());

      query.append(" union all ");
      query.append(" select distinct b.description ,DATE_FORMAT(notepad_date,'%d-%m-%Y %H:%i'),person_met,meeting_location,if(followup_reqd='N','NO','YES') as followup_reqd, DATE_FORMAT(followup_date,'%d-%m-%Y %H:%i'),followup_location,notepad_comments,followup_remarks,FOLLOWUP_PERSON,  s.USER_NAME,DATE_FORMAT(a.maker_date,'%d-%m-%Y %H:%i')  ");
      query.append(" from cr_notepad_dtl a,generic_master b,sec_user_m s ");
      query.append(new StringBuilder().append(" where notepad_code=b.value and txn_id = (select a.lead_id from cr_deal_dtl a left join cr_loan_dtl b on b.loan_deal_id=a.deal_id where b.loan_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnid)).trim()).append("') and TXN_TYPE in ('LT','LP') and a.MAKER_ID=s.USER_ID and a.notepad_code!='PD' ").toString());
      logger.info(new StringBuilder().append("In getNotepadData").append(query).toString());

      CreditProcessingNotepadVo noteVO = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getNotepadData ").append(product.size()).toString());

      query = null;

      for (int i = 0; i < product.size(); i++)
      {
        ArrayList data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          noteVO = new CreditProcessingNotepadVo();
          noteVO.setNoteCodeDescription(CommonFunction.checkNull(data.get(0)).trim());

          noteVO.setMeetingDate(CommonFunction.checkNull(data.get(1)).trim());
          noteVO.setPersonMet(CommonFunction.checkNull(data.get(2)).trim());
          noteVO.setMeetingLocation(CommonFunction.checkNull(data.get(3)).trim());
          noteVO.setFollowUp(CommonFunction.checkNull(data.get(4)).trim());
          noteVO.setFollowupDate(CommonFunction.checkNull(data.get(5)).trim());
          noteVO.setFollowUpLocation(CommonFunction.checkNull(data.get(6)).trim());
          noteVO.setMeetingRemarks(CommonFunction.checkNull(data.get(7)).trim());
          noteVO.setFollowupRemarks(CommonFunction.checkNull(data.get(8)).trim());
          noteVO.setFollowUpPerson(CommonFunction.checkNull(data.get(9)).trim());
          noteVO.setUserName(CommonFunction.checkNull(data.get(10)).trim());
          noteVO.setCreationDate(CommonFunction.checkNull(data.get(11)).trim());
          list.add(noteVO);
        }
        noteVO = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      txnid = null;
    }
    return list;
  }

  public ArrayList getNotepadData(String txnid, String txnType) {
    ArrayList list = new ArrayList();
    try {
      logger.info(new StringBuilder().append("In getNotepadData......Dao Impl").append(txnType).toString());

      StringBuilder query = new StringBuilder();

      query.append(new StringBuilder().append("select distinct b.description ,DATE_FORMAT(notepad_date,'").append(this.dateFormatWithTime).append("'),person_met,meeting_location,if(followup_reqd='N','NO','YES') as followup_reqd,").append(" DATE_FORMAT(followup_date,'").append(this.dateFormatWithTime).append("'),followup_location,notepad_comments,followup_remarks,FOLLOWUP_PERSON, ").append(" s.USER_NAME,DATE_FORMAT(a.maker_date,'").append(this.dateFormatWithTime).append("') from cr_notepad_dtl a,generic_master b,sec_user_m s").append(" where notepad_code=b.value and ").append("txn_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnid)).trim()).append("' and TXN_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()).append("'").append(" and a.MAKER_ID=s.USER_ID and a.notepad_code!='PD'").toString());

      logger.info(new StringBuilder().append("In getNotepadData").append(query).toString());

      CreditProcessingNotepadVo noteVO = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getNotepadData ").append(product.size()).toString());

      query = null;

      for (int i = 0; i < product.size(); i++)
      {
        ArrayList data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          noteVO = new CreditProcessingNotepadVo();
          noteVO.setNoteCodeDescription(CommonFunction.checkNull(data.get(0)).trim());

          noteVO.setMeetingDate(CommonFunction.checkNull(data.get(1)).trim());
          noteVO.setPersonMet(CommonFunction.checkNull(data.get(2)).trim());
          noteVO.setMeetingLocation(CommonFunction.checkNull(data.get(3)).trim());
          noteVO.setFollowUp(CommonFunction.checkNull(data.get(4)).trim());
          noteVO.setFollowupDate(CommonFunction.checkNull(data.get(5)).trim());
          noteVO.setFollowUpLocation(CommonFunction.checkNull(data.get(6)).trim());
          noteVO.setMeetingRemarks(CommonFunction.checkNull(data.get(7)).trim());
          noteVO.setFollowupRemarks(CommonFunction.checkNull(data.get(8)).trim());
          noteVO.setFollowUpPerson(CommonFunction.checkNull(data.get(9)).trim());
          noteVO.setUserName(CommonFunction.checkNull(data.get(10)).trim());
          noteVO.setCreationDate(CommonFunction.checkNull(data.get(11)).trim());
          list.add(noteVO);
        }
        data.clear();
        data = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      txnid = null;
      txnType = null;
    }
    return list;
  }

  public ArrayList getLeadNotepadData(String txnid, String txnType)
  {
    ArrayList list = new ArrayList();
    try {
      logger.info(new StringBuilder().append("In getNotepadData......Dao Impl").append(txnType).toString());

      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select distinct b.description ,DATE_FORMAT(notepad_date,'").append(this.dateFormatWithTime).append("'),person_met,meeting_location,if(followup_reqd='N','NO','YES') as followup_reqd,").append(" DATE_FORMAT(followup_date,'").append(this.dateFormatWithTime).append("'),followup_location,notepad_comments,followup_remarks,FOLLOWUP_PERSON, ").append(" s.USER_NAME,DATE_FORMAT(a.maker_date,'").append(this.dateFormatWithTime).append("') from cr_notepad_dtl a,generic_master b,sec_user_m s").append(" where notepad_code=b.value and ").append("txn_id=(select LEAD_ID from cr_deal_dtl where DEAL_ID=(select LOAN_DEAL_ID from cr_loan_dtl where LOAN_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnid)).trim()).append("')) and TXN_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()).append("'").append(" and a.MAKER_ID=s.USER_ID and a.notepad_code!='PD'").toString());

      logger.info(new StringBuilder().append("In getNotepadData").append(query).toString());

      CreditProcessingNotepadVo noteVO = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getNotepadData ").append(product.size()).toString());

      query = null;

      for (int i = 0; i < product.size(); i++)
      {
        ArrayList data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          noteVO = new CreditProcessingNotepadVo();
          noteVO.setNoteCodeDescription(CommonFunction.checkNull(data.get(0)).trim());

          noteVO.setMeetingDate(CommonFunction.checkNull(data.get(1)).trim());
          noteVO.setPersonMet(CommonFunction.checkNull(data.get(2)).trim());
          noteVO.setMeetingLocation(CommonFunction.checkNull(data.get(3)).trim());
          noteVO.setFollowUp(CommonFunction.checkNull(data.get(4)).trim());
          noteVO.setFollowupDate(CommonFunction.checkNull(data.get(5)).trim());
          noteVO.setFollowUpLocation(CommonFunction.checkNull(data.get(6)).trim());
          noteVO.setMeetingRemarks(CommonFunction.checkNull(data.get(7)).trim());
          noteVO.setFollowupRemarks(CommonFunction.checkNull(data.get(8)).trim());
          noteVO.setFollowUpPerson(CommonFunction.checkNull(data.get(9)).trim());
          noteVO.setUserName(CommonFunction.checkNull(data.get(10)).trim());
          noteVO.setCreationDate(CommonFunction.checkNull(data.get(11)).trim());
          list.add(noteVO);
        }
        noteVO = null;
        data.clear();
        data = null;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      txnid = null;
      txnType = null;
    }

    return list;
  }

  public ArrayList getLeadNotepadDataCP(String txnid, String txnType) {
    ArrayList list = new ArrayList();
    try {
      logger.info(new StringBuilder().append("In getLeadNotepadDataCP......Dao Impl").append(txnType).toString());

      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select distinct b.description ,DATE_FORMAT(notepad_date,'").append(this.dateFormatWithTime).append("'),person_met,meeting_location,if(followup_reqd='N','NO','YES') as followup_reqd,").append(" DATE_FORMAT(followup_date,'").append(this.dateFormatWithTime).append("'),followup_location,notepad_comments,followup_remarks,FOLLOWUP_PERSON, ").append(" s.USER_NAME,DATE_FORMAT(a.maker_date,'").append(this.dateFormatWithTime).append("') from cr_notepad_dtl a,generic_master b,sec_user_m s").append(" where notepad_code=b.value and ").append("txn_id=(select LEAD_ID from cr_deal_dtl where DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnid)).trim()).append("') and TXN_TYPE in ('LT','LP') ").append(" and a.MAKER_ID=s.USER_ID and a.notepad_code!='PD'").toString());

      logger.info(new StringBuilder().append("In getNotepadData").append(query).toString());

      CreditProcessingNotepadVo noteVO = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getNotepadData ").append(product.size()).toString());

      query = null;
      int size = product.size();
      for (int i = 0; i < size; i++)
      {
        ArrayList data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          noteVO = new CreditProcessingNotepadVo();
          noteVO.setNoteCodeDescription(CommonFunction.checkNull(data.get(0)).trim());

          noteVO.setMeetingDate(CommonFunction.checkNull(data.get(1)).trim());
          noteVO.setPersonMet(CommonFunction.checkNull(data.get(2)).trim());
          noteVO.setMeetingLocation(CommonFunction.checkNull(data.get(3)).trim());
          noteVO.setFollowUp(CommonFunction.checkNull(data.get(4)).trim());
          noteVO.setFollowupDate(CommonFunction.checkNull(data.get(5)).trim());
          noteVO.setFollowUpLocation(CommonFunction.checkNull(data.get(6)).trim());
          noteVO.setMeetingRemarks(CommonFunction.checkNull(data.get(7)).trim());
          noteVO.setFollowupRemarks(CommonFunction.checkNull(data.get(8)).trim());
          noteVO.setFollowUpPerson(CommonFunction.checkNull(data.get(9)).trim());
          noteVO.setUserName(CommonFunction.checkNull(data.get(10)).trim());
          noteVO.setCreationDate(CommonFunction.checkNull(data.get(11)).trim());
          list.add(noteVO);
        }
        noteVO = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      txnid = null;
      txnType = null;
    }
    return list;
  }

  public ArrayList getLoanDetailList(String dealId)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append("SELECT DEAL_LOAN_ID,DEAL_PRODUCT,DEAL_SCHEME,p.PRODUCT_DESC,s.SCHEME_DESC,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_RATE_TYPE,DEAL_RATE_METHOD,DEAL_LOAN_PURPOSE,d.TENURE_IN_DAY,d.DEAL_FLOATING_FIXED_PERIOD,pl.DESCRIPTION,ifnull(d.vat_amount,'') as vat_amount,round(d.insurance_premium,2),d.DEAL_LOAN_AMOUNT_NEW,d.GROSS_BLOCK,d.NET_BLOCK from cr_deal_loan_dtl d left join cr_product_m p on d.DEAL_PRODUCT=p.PRODUCT_ID left join cr_scheme_m s on d.DEAL_SCHEME=s.SCHEME_ID left join generic_master pl on pl.VALUE=d.DEAL_LOAN_PURPOSE and pl.parent_value = d.deaL_product and pl.rec_status='A'");

      query.append(new StringBuilder().append(" where d.DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());

      logger.info(new StringBuilder().append("getLoanDetailList").append(query).toString());
      LoanDetailVo loanVo = null;
      ArrayList loandeatail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getProductTypeList").append(loandeatail.size()).toString());

      query = null;

      for (int i = 0; i < loandeatail.size(); i++)
      {
        ArrayList loandeatail1 = (ArrayList)loandeatail.get(i);
        if (loandeatail1.size() > 0)
        {
          loanVo = new LoanDetailVo();
          loanVo.setDealLoanId(CommonFunction.checkNull(loandeatail1.get(0)).trim());
          loanVo.setLbxProductID(CommonFunction.checkNull(loandeatail1.get(1)).trim());
          loanVo.setLbxscheme(CommonFunction.checkNull(loandeatail1.get(2)).trim());
          loanVo.setProduct(CommonFunction.checkNull(loandeatail1.get(3)).trim());
          loanVo.setScheme(CommonFunction.checkNull(loandeatail1.get(4)).trim());

          if (!CommonFunction.checkNull(loandeatail1.get(5)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(5)).trim());
            loanVo.setRequestedLoanAmount(this.myFormatter.format(reconNum));
          }

          loanVo.setRequestedLoanTenure(CommonFunction.checkNull(loandeatail1.get(6)).trim());

          if (CommonFunction.checkNull(loandeatail1.get(7)).trim().equals("F"))
          {
            loanVo.setRateType("Flat Rate");
          }
          else if (CommonFunction.checkNull(loandeatail1.get(7)).trim().equals("E"))
          {
            loanVo.setRateType("Effective Rate");
          }

          if (CommonFunction.checkNull(loandeatail1.get(8)).trim().equals("F"))
          {
            loanVo.setType("Fixed");
          }
          else if (CommonFunction.checkNull(loandeatail1.get(8)).trim().equals("L"))
          {
            loanVo.setType("Floating");
          }
          else
          {
            loanVo.setType("");
          }

          loanVo.setLbxLoanPurpose(CommonFunction.checkNull(loandeatail1.get(9)).trim());
          loanVo.setTenureInDay(CommonFunction.checkNull(loandeatail1.get(10)).trim());
          loanVo.setFixPriod(CommonFunction.checkNull(loandeatail1.get(11)).trim());
          loanVo.setLoanPurpose(CommonFunction.checkNull(loandeatail1.get(12)).trim());
          loanVo.setTotalVatAmt(CommonFunction.checkNull(loandeatail1.get(13)).trim());
          loanVo.setInsurancePremium(CommonFunction.checkNull(loandeatail1.get(14)).trim());
          if (!CommonFunction.checkNull(loandeatail1.get(15)).equalsIgnoreCase(""))
          {
            Number reconReqLoanAmount = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(15)).trim());
            loanVo.setRequestedLoamt(this.myFormatter.format(reconReqLoanAmount));
          }

          logger.info(new StringBuilder().append("GrossBlock/netblock-------------------").append(loandeatail1.get(16)).toString());
          loanVo.setGrossBlock(CommonFunction.checkNull(loandeatail1.get(16)).trim());
          loanVo.setNetBlock(CommonFunction.checkNull(loandeatail1.get(17)).trim());

          list.add(loanVo);
        }
        loanVo = null;
        loandeatail1.clear();
        loandeatail1 = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      dealId = null;
    }

    return list;
  }

  public boolean deleteLoanDetails(String[] id)
  {
    logger.info(new StringBuilder().append("deleteLoanDetails for deleteLoanDetails......").append(id).toString());
    boolean status = false;
    try
    {
      this.qryList = new ArrayList();
      this.bufInsUpdSql = new StringBuffer();

      for (int k = 0; k < id.length; k++)
      {
        StringBuilder query = new StringBuilder();
        query.append(new StringBuilder().append("delete from cr_deal_loan_dtl where DEAL_LOAN_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()).toString());

        this.qryList.add(query);
        query = null;
      }

      logger.info(new StringBuilder().append("delete query: ").append(this.qryList.get(0)).toString());

      status = ConnectionDAO.sqlInsUpdDelete(this.qryList);
      logger.info(new StringBuilder().append("Status of Deletion is =").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally {
      id = null;
      this.qryList.clear();
      this.qryList = null;
    }
    return status;
  }

  public boolean deleteChargeInstallmentRepay(String dealId, String[] dealLoanId)
  {
    logger.info(new StringBuilder().append("deleteChargeInstallmentRepay for deleteChargeInstallmentRepay....dealLoanId..").append(dealLoanId).append(" dealId ").append(dealId).toString());
    boolean status = false;
    try
    {
      this.qryList = new ArrayList();

      for (int k = 0; k < dealLoanId.length; k++)
      {
        StringBuilder deleteChatge = new StringBuilder();
        StringBuilder deleteInstallment = new StringBuilder();
        StringBuilder deleteSecurity = new StringBuilder();
        StringBuilder deleteRepay = new StringBuilder();
        deleteChatge.append(new StringBuilder().append("delete from cr_deal_txncharges_dtl where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append(" and DEAL_LOAN_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId[k])).trim()).toString());
        deleteSecurity.append(new StringBuilder().append("delete from cr_deal_sd_m where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append(" and DEAL_LOAN_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId[k])).trim()).toString());
        deleteInstallment.append(new StringBuilder().append("delete from cr_deal_installment_plan where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append(" and DEAL_LOAN_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId[k])).trim()).toString());
        deleteRepay.append(new StringBuilder().append("delete from cr_deal_repaysch_dtl where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append(" and DEAL_LOAN_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId[k])).trim()).toString());
        logger.info(new StringBuilder().append("delete query:deleteChatge ").append(deleteChatge).toString());
        logger.info(new StringBuilder().append("delete query:deleteSecurity ").append(deleteSecurity).toString());
        logger.info(new StringBuilder().append("delete query:deleteInstallment ").append(deleteInstallment).toString());
        logger.info(new StringBuilder().append("delete query:deleteRepay ").append(deleteRepay).toString());
        this.qryList.add(deleteChatge);
        this.qryList.add(deleteSecurity);
        this.qryList.add(deleteInstallment);
        this.qryList.add(deleteRepay);

        deleteRepay = null;
        deleteChatge = null;
        deleteSecurity = null;
        deleteInstallment = null;
      }

      status = ConnectionDAO.sqlInsUpdDelete(this.qryList);
      logger.info(new StringBuilder().append("Status of Deletion is =").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return status;
  }

  public ArrayList<Object> getLeadEntryList(String leadId)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT DEAL_ID,DEAL_APPLICATION_FORM_NO,DATE_FORMAT(DEAL_DATE,'").append(this.dateFormatWithTime).append("'),DATE_FORMAT(DEAL_ENCODED_DATE,'").append(this.dateFormatWithTime).append("'), ").append("DEAL_BRANCH,b.BRANCH_DESC,DEAL_INDUSTRY_ID,i.INDUSTRY_DESC,DEAL_SUB_INDUSTRY_ID,s.SUB_INDUSTRY_DESC,DEAL_SOURCE_TYPE,DEAL_SOURCE_NAME,DEAL_VENDOR_CODE,DEAL_RM,r.USER_NAME,c.DEALER_DESC,DEAL_NO,DEAL_CATEGORY,d.LEAD_ID,L.CUSTOMER_NAME ").append(",d.REC_STATUS,d.AREA_CODE,(SELECT B.AREA_CODE_NAME FROM com_areacode_m B WHERE B.AREA_CODE=d.AREA_CODE)AS areaCodeName,d.GENERATED_BY,(select DESCRIPTION from generic_master where value=DEAL_SOURCE_TYPE AND GENERIC_KEY='SOURCE_TYPE')lovSourceDes,sm.USER_NAME,DEAL_RO,DEALER_EXECUTIVE_NAME,DEALER_MANAGER_NAME,d.RATE_APPROVAL_REMARKS,").append(" if(L.LEAD_ID is null, ").append(" CASE IFNULL(d.GENERATED_BY,'') WHEN 'RM' THEN  'RM / SALES EXEC' WHEN  'VENDOR' THEN 'VENDOR/DEALER' WHEN 'BRANCH' ").append(" THEN 'TELECALLER / BRANCH'  ELSE  IFNULL(d.GENERATED_BY,'') END ,CASE IFNULL(d.GENERATED_BY,'') WHEN 'RM' THEN  'RM / SALES EXEC' WHEN  'VENDOR' THEN 'DEALER' WHEN 'BRANCH' ").append(" THEN 'TELECALLER' WHEN 'RO' THEN 'RM / SALES EXEC' WHEN 'OTHERS' THEN 'OTHERS' ELSE  IFNULL(d.GENERATED_BY,'') END)AS SOURCE_TYPE_DESC,d.REFERRED_BY,d.FI_APPRAISER_NAME,d.FI_DECISION,d.FI_REMARKS,d.MAKER_REMARKS,d.CASE_VISITED_BY  ").append(" from cr_deal_dtl d ").append("left join com_branch_m b on b.BRANCH_ID=d.DEAL_BRANCH ").append("left join com_industry_m i on i.INDUSTRY_ID=d.DEAL_INDUSTRY_ID ").append("left join com_sub_industry_m s on s.sub_industry_id=d.DEAL_SUB_INDUSTRY_ID ").append("left join sec_user_m r on r.USER_ID=d.DEAL_RM ").append("left join cr_dsa_dealer_m c on c.DEALER_ID=d.DEAL_VENDOR_CODE ").append("left join cr_lead_dtl L on L.LEAD_ID=d.LEAD_ID ").append("left join sec_user_m sm on sm.USER_ID=d.DEAL_RO ").append("where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(leadId)).trim()).toString());

      logger.info(new StringBuilder().append("getLeadEntryList").append(query).toString());
      CreditProcessingLeadEntryVo loanVo = null;
      ArrayList leaddeatail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getLeadEntryList").append(leaddeatail.size()).toString());

      query = null;

      for (int i = 0; i < leaddeatail.size(); i++)
      {
        ArrayList leaddeatail1 = (ArrayList)leaddeatail.get(i);
        if (leaddeatail1.size() > 0)
        {
          logger.info(new StringBuilder().append("getLeadEntryList").append(leaddeatail1.size()).toString());
          loanVo = new CreditProcessingLeadEntryVo();
          loanVo.setDealId(CommonFunction.checkNull(leaddeatail1.get(0)).trim());
          loanVo.setApplicationFormNo(CommonFunction.checkNull(leaddeatail1.get(1)).trim());
          loanVo.setLeadDate(CommonFunction.checkNull(leaddeatail1.get(2)).trim().substring(0, 10));
          loanVo.setLeadTime(CommonFunction.checkNull(leaddeatail1.get(2)).trim().substring(11, 16));

          loanVo.setDateEncoded(CommonFunction.checkNull(leaddeatail1.get(3)).trim());

          loanVo.setLbxBranchId(CommonFunction.checkNull(leaddeatail1.get(4)).trim());
          loanVo.setBranch(CommonFunction.checkNull(leaddeatail1.get(5)).trim());

          loanVo.setLbxIndustry(CommonFunction.checkNull(leaddeatail1.get(6)).trim());
          loanVo.setIndustry(CommonFunction.checkNull(leaddeatail1.get(7)).trim());

          loanVo.setLbxSubIndustry(CommonFunction.checkNull(leaddeatail1.get(8)).trim());
          loanVo.setSubIndustry(CommonFunction.checkNull(leaddeatail1.get(9)).trim());

          loanVo.setSource(CommonFunction.checkNull(leaddeatail1.get(10)).trim());
          loanVo.setSourcedesc(CommonFunction.checkNull(leaddeatail1.get(11)).trim());

          loanVo.setLbxvendorCode(CommonFunction.checkNull(leaddeatail1.get(12)).trim());
          loanVo.setLbxRelationship(CommonFunction.checkNull(leaddeatail1.get(13)).trim());
          loanVo.setRelationshipManager(CommonFunction.checkNull(leaddeatail1.get(14)).toString());
          loanVo.setVendorCode(CommonFunction.checkNull(leaddeatail1.get(15)).trim());
          loanVo.setDealNo(CommonFunction.checkNull(leaddeatail1.get(16)).trim());
          loanVo.setDealCat(CommonFunction.checkNull(leaddeatail1.get(17)).trim());
          loanVo.setLeadNo(CommonFunction.checkNull(leaddeatail1.get(18)).trim());
          loanVo.setCustomerName(CommonFunction.checkNull(leaddeatail1.get(19)).trim());
          loanVo.setRecStatus(CommonFunction.checkNull(leaddeatail1.get(20)).trim());
          loanVo.setLbxareaCodeVal(CommonFunction.checkNull(leaddeatail1.get(21)).trim());

          loanVo.setAreaCodename(CommonFunction.checkNull(leaddeatail1.get(22)).trim());
          loanVo.setLeadGeneratorBy(CommonFunction.checkNull(leaddeatail1.get(23)).trim());
          loanVo.setLovSourceDes(CommonFunction.checkNull(leaddeatail1.get(24)).trim());
          loanVo.setGeneratedUser(CommonFunction.checkNull(leaddeatail1.get(25)).trim());
          loanVo.setLeadRo(CommonFunction.checkNull(leaddeatail1.get(26)).trim());
          loanVo.setDealerExecutive(CommonFunction.checkNull(leaddeatail1.get(27)).trim());
          loanVo.setDealerManager(CommonFunction.checkNull(leaddeatail1.get(28)).trim());
          loanVo.setRateApprovalRemark(CommonFunction.checkNull(leaddeatail1.get(29)).trim());
          loanVo.setLeadGeneratorByDesc(CommonFunction.checkNull(leaddeatail1.get(30)).trim());
          loanVo.setReferredBy(CommonFunction.checkNull(leaddeatail1.get(31)).trim());

          loanVo.setFiAppraiserName(CommonFunction.checkNull(leaddeatail1.get(32)).trim());
          loanVo.setFidecisionDeal(CommonFunction.checkNull(leaddeatail1.get(33)).trim());
          loanVo.setFiRemarksDeal(CommonFunction.checkNull(leaddeatail1.get(34)).trim());
          loanVo.setMakerRemark(CommonFunction.checkNull(leaddeatail1.get(35)).trim());
          loanVo.setCaseVisitedBy(CommonFunction.checkNull(leaddeatail1.get(36)).trim());

          list.add(loanVo);
        }
        loanVo = null;
        leaddeatail1.clear();
        leaddeatail1 = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      leadId = null;
    }
    return list;
  }

  public ArrayList<Object> getsourceTypeList()
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append("SELECT M.VALUE,M.DESCRIPTION FROM generic_master M,generic_master_keys K WHERE K.GENERIC_KEY='SOURCE_TYPE' AND K.GENERIC_KEY=M.GENERIC_KEY and m.REC_STATUS='A'");
      logger.info(new StringBuilder().append("getsourceTypeList").append(query).toString());
      CodeDescVo vo = null;
      ArrayList source = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getsourceTypeList").append(source.size()).toString());

      query = null;

      for (int i = 0; i < source.size(); i++)
      {
        ArrayList subsource = (ArrayList)source.get(i);
        if (subsource.size() > 0)
        {
          logger.info(new StringBuilder().append("getsourceTypeList").append(subsource.size()).toString());
          vo = new CodeDescVo();
          vo.setId(CommonFunction.checkNull(subsource.get(0)).trim());
          vo.setName(CommonFunction.checkNull(subsource.get(1)).trim());
          list.add(vo);
        }
        vo = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getBaseRateList(String businessdate) {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT A.BASE_RATE_TYPE FROM cr_base_rate_m A WHERE A.REC_STATUS='A' and A.EFFECTIVE_FROM = (SELECT MAX(B.EFFECTIVE_FROM) FROM cr_base_rate_m B WHERE B.REC_STATUS='A' and A.BASE_RATE_TYPE= B.BASE_RATE_TYPE AND B.EFFECTIVE_FROM <= STR_TO_DATE('").append(businessdate).append("','").append(this.dateFormat).append("'))").toString());

      logger.info(new StringBuilder().append("query : ").append(query).toString());
      CodeDescVo branchVo = null;
      ArrayList baseRate = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("query : ").append(query).toString());

      query = null;

      for (int i = 0; i < baseRate.size(); i++)
      {
        ArrayList baseRate1 = (ArrayList)baseRate.get(i);
        if (baseRate1.size() > 0)
        {
          branchVo = new CodeDescVo();

          branchVo.setId(CommonFunction.checkNull(baseRate1.get(0)).trim());
          logger.info(new StringBuilder().append("id.................................. ").append(CommonFunction.checkNull(baseRate1.get(0)).trim()).toString());
          list.add(branchVo);
        }
        baseRate1.clear();
        baseRate1 = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      businessdate = null;
    }
    return list;
  }

  public String getBaseRate(String baseRateType, String bDate)
  {
    String baseRate = "";
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT BASE_RATE  from cr_base_rate_m where BASE_RATE_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(baseRateType))).append("' and  REC_STATUS='A' and ").toString());
      query.append(new StringBuilder().append("EFFECTIVE_FROM=(select max(EFFECTIVE_FROM) from cr_base_rate_m where BASE_RATE_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(baseRateType))).append("' ").toString());
      query.append(new StringBuilder().append("and  REC_STATUS='A' and date(EFFECTIVE_FROM) <= STR_TO_DATE('").append(bDate).append("','").append(this.dateFormat).append("')  ) and date(EFFECTIVE_FROM) <= STR_TO_DATE('").append(bDate).append("','").append(this.dateFormat).append("') ").toString());
      logger.info(new StringBuilder().append("getBaseRate").append(query).toString());
      baseRate = ConnectionDAO.singleReturn(query.toString());
      logger.info(new StringBuilder().append("getBaseRate").append(baseRate).toString());

      query = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      baseRateType = null;
      bDate = null;
    }
    return baseRate;
  }

  public ArrayList getLoanDetailScheme(String scheme, String bdate) {
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT DEFAULT_MARGIN_RATE,RATE_TYPE,RATE_METHOD,S.BASE_RATE_TYPE,B.BASE_RATE,DEF_FLAT_RATE, DEF_EFF_RATE,DEF_TENURE,REPAYMENT_FREQ,INSTALLMENT_TYPE,REPAYMENT_MODE,INSTALLMENT_MODE ,P.REPAYMENT_TYPE,P.REVOLVING_FLAG ,MIN_MARGIN_RATE,MAX_MARGIN_RATE,MIN_TENURE,MAX_TENURE,MIN_AMT_FIN,MAX_AMT_FIN,P.ASSET_FLAG,p.DAYS_BASIS,S.FLOATING_FIXED_PERIOD,S.MIN_FLAT_RATE,S.MAX_FLAT_RATE,S.MIN_EFF_RATE,S.MAX_EFF_RATE from cr_scheme_m S LEFT JOIN cr_base_rate_m B ON S.BASE_RATE_TYPE=B.BASE_RATE_TYPE AND B.rec_status='A' and b.EFFECTIVE_FROM <= STR_TO_DATE('").append(bdate).append("','").append(this.dateFormat).append("') ").append(" LEFT JOIN cr_product_m P ON S.PRODUCT_ID=P.PRODUCT_ID").append(" where SCHEME_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scheme)).trim()).append(" AND S.REC_STATUS='A' ").append(" order by b.EFFECTIVE_FROM desc limit 1").toString());

      logger.info(new StringBuilder().append("getLoanDetailScheme  :  ").append(query).toString());
      SchemeVo schemeVo = null;
      ArrayList schemedeatail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getLeadEntryList").append(schemedeatail.size()).toString());

      query = null;

      for (int i = 0; i < schemedeatail.size(); i++)
      {
        ArrayList schemedeatail1 = (ArrayList)schemedeatail.get(i);
        if (schemedeatail1.size() > 0)
        {
          logger.info(new StringBuilder().append("getLeadEntryList").append(schemedeatail1.size()).toString());
          schemeVo = new SchemeVo();
          if (!CommonFunction.checkNull(schemedeatail1.get(0)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(0)).trim());
            schemeVo.setDefMarginRate(this.myFormatter.format(reconNum));
          }
          schemeVo.setRateTYPE(CommonFunction.checkNull(schemedeatail1.get(1)).trim());
          schemeVo.setRateMethod(CommonFunction.checkNull(schemedeatail1.get(2)).trim());
          schemeVo.setBaseRateType(CommonFunction.checkNull(schemedeatail1.get(3)).trim());
          if (!CommonFunction.checkNull(schemedeatail1.get(4)).equalsIgnoreCase(""))
          {
            Number reconNumb = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(4)).trim());
            schemeVo.setBaseRate(this.myFormatter.format(reconNumb));
          }
          if (!CommonFunction.checkNull(schemedeatail1.get(5)).equalsIgnoreCase(""))
          {
            Number reconNumd = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(5)).trim());
            schemeVo.setDefFlatRate(this.myFormatter.format(reconNumd));
          }
          else
          {
            schemeVo.setDefFlatRate("0.0000000");
          }
          if (!CommonFunction.checkNull(schemedeatail1.get(6)).equalsIgnoreCase(""))
          {
            Number reconNume = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(6)).trim());
            schemeVo.setDefEffRate(this.myFormatter.format(reconNume));
          }
          else
          {
            schemeVo.setDefEffRate("0.0000000");
          }

          schemeVo.setDefTenure(CommonFunction.checkNull(schemedeatail1.get(7)).trim());
          schemeVo.setRepaymentFREQ(CommonFunction.checkNull(schemedeatail1.get(8)).trim());
          schemeVo.setInstallmentTYPE(CommonFunction.checkNull(schemedeatail1.get(9)).trim());
          schemeVo.setRepaymentMODE(CommonFunction.checkNull(schemedeatail1.get(10)).trim());
          schemeVo.setInstallmentMODE(CommonFunction.checkNull(schemedeatail1.get(11)).trim());
          schemeVo.setRepaymentType(CommonFunction.checkNull(schemedeatail1.get(12)).trim());
          schemeVo.setRevolvingFlag(CommonFunction.checkNull(schemedeatail1.get(13)).trim());
          if (!CommonFunction.checkNull(schemedeatail1.get(14)).equalsIgnoreCase(""))
          {
            Number reconNumm = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(14)).trim());
            schemeVo.setMinMarginRate(this.myFormatter.format(reconNumm));
          }

          if (!CommonFunction.checkNull(schemedeatail1.get(15)).equalsIgnoreCase(""))
          {
            Number reconNumR = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(15)).trim());
            schemeVo.setMaxMarginRate(this.myFormatter.format(reconNumR));
          }

          schemeVo.setMinTenure(CommonFunction.checkNull(schemedeatail1.get(16)).trim());
          schemeVo.setMaxTenure(CommonFunction.checkNull(schemedeatail1.get(17)).trim());

          if (!CommonFunction.checkNull(schemedeatail1.get(18)).equalsIgnoreCase(""))
          {
            Number reconNumf = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(18)).trim());
            schemeVo.setMinFinance(this.myFormatter.format(reconNumf));
          }

          if (!CommonFunction.checkNull(schemedeatail1.get(19)).equalsIgnoreCase(""))
          {
            Number reconNummF = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(19)).trim());
            schemeVo.setMaxFinance(this.myFormatter.format(reconNummF));
          }

          schemeVo.setAssetFlag(CommonFunction.checkNull(schemedeatail1.get(20)).trim());
          schemeVo.setDaysBasis(CommonFunction.checkNull(schemedeatail1.get(21)).trim());
          schemeVo.setFixPriod(CommonFunction.checkNull(schemedeatail1.get(22)).trim());

          if (!CommonFunction.checkNull(schemedeatail1.get(23)).equalsIgnoreCase(""))
          {
            Number reconNumd = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(23)).trim());
            schemeVo.setMinFlatRate(this.myFormatter.format(reconNumd));
          }
          else
          {
            schemeVo.setMinFlatRate("0.0000000");
          }
          if (!CommonFunction.checkNull(schemedeatail1.get(24)).equalsIgnoreCase(""))
          {
            Number reconNumd = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(24)).trim());
            schemeVo.setMaxFlatRate(this.myFormatter.format(reconNumd));
          }
          else
          {
            schemeVo.setMaxFlatRate("0.0000000");
          }

          if (!CommonFunction.checkNull(schemedeatail1.get(25)).equalsIgnoreCase(""))
          {
            Number reconNumd = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(25)).trim());
            schemeVo.setMinEffectiveRate(this.myFormatter.format(reconNumd));
          }
          else
          {
            schemeVo.setMinEffectiveRate("0.0000000");
          }
          if (!CommonFunction.checkNull(schemedeatail1.get(26)).equalsIgnoreCase(""))
          {
            Number reconNumd = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(26)).trim());
            schemeVo.setMaxEffectiveRate(this.myFormatter.format(reconNumd));
          }
          else
          {
            schemeVo.setMaxEffectiveRate("0.0000000");
          }

          list.add(schemeVo);
        }
        schemedeatail1.clear();
        schemedeatail1 = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      scheme = null;
      bdate = null;
    }
    return list;
  }

  public ArrayList getAllLoanDetails(String dealLoanId)
  {
    logger.info(new StringBuilder().append("dealLoanId: ").append(dealLoanId).toString());
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT DEAL_PRODUCT,DEAL_SCHEME,DATE_FORMAT(DEAL_DISBURSAL_DATE,'").append(this.dateFormat).append("'),DEAL_ASSET_COST,").append(" DEAL_MARGIN_RATE,DEAL_MARGIN_AMOUNT,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_REPAYMENT_FREQ,DEAL_RATE_TYPE,").append(" DEAL_RATE_METHOD,DEAL_BASE_RATE_TYPE,DEAL_BASE_RATE,DEAL_MARKUP,DEAL_FINAL_RATE,DEAL_REPAYMENT_TYPE,DEAL_INSTALLMENT_TYPE,").append(" DEAL_INSTALLMENT_MODE,DEAL_REPAYMENT_MODE,DEAL_LOAN_PURPOSE,DEAL_LOAN_ID,p.PRODUCT_DESC,s.SCHEME_DESC,s.MIN_AMT_FIN,s.MAX_AMT_FIN,").append("s.MIN_MARGIN_RATE,s.MAX_MARGIN_RATE,s.MIN_TENURE,s.MAX_TENURE,p.ASSET_FLAG,d.DEAL_NO_OF_INSTALLMENT,p.ASSET_FLAG,DEAL_SECTOR_TYPE,").append("DEAL_ADVANCE_INSTL,DATE_FORMAT(DEAL_REPAY_EFF_DATE,'").append(this.dateFormat).append("') ,DATE_FORMAT(DEAL_MATURITY_DATE,'").append(this.dateFormat).append("'),").append("DEAL_DUE_DAY,DATE_FORMAT(NEXT_DUE_DATE,'").append(this.dateFormat).append("'),g.value,S.RATE_METHOD,DEAL_INT_CALC_FROM,d.NET_LTV,").append("d.TENURE_IN_DAY,p.DAYS_BASIS,d.DEAL_FLOATING_FIXED_PERIOD,S.MIN_FLAT_RATE,S.MAX_FLAT_RATE,S.MIN_EFF_RATE,S.MAX_EFF_RATE,").append("S.DEF_FLAT_RATE,S.DEF_EFF_RATE,d.NO_OF_ASSET,LOAN_CLASSIFICATION,pl.DESCRIPTION,if(IFNULL(cacm.vat_amount,'')='',").append("0.00,sum(cacm.vat_amount))as vat_amount,ifnull(deal_credit_period,0),").append(" INT_COMP_FREQ,INT_METHOD,INT_FREQ ,").append("DATE_FORMAT(INTEREST_DUE_DATE,'").append(this.dateFormat).append("')").append("INTEREST_DUE_DATE, ").append("").append("d.edit_due_date,DATE_FORMAT(FIRST_INTEREST_DUE_DATE,'").append(this.dateFormat).append("'),ifnull(d.insurance_premium,0),ifnull(d.DEAL_LOAN_AMOUNT_NEW,d.DEAL_LOAN_AMOUNT),business_type,d.GROSS_BLOCK,d.NET_BLOCK").append("").append("  from cr_deal_loan_dtl d left join cr_product_m p on d.DEAL_PRODUCT=p.PRODUCT_ID ").append("left join cr_scheme_m s on d.DEAL_SCHEME=s.SCHEME_ID left join generic_master g on g.VALUE=d.LOAN_TYPE ").append("left join generic_master pl on pl.VALUE=d.DEAL_LOAN_PURPOSE  left join cr_deal_collateral_m cdld on cdld.deal_id=d.DEAL_ID  ").append("left join cr_asset_collateral_m cacm on cacm.asset_id=cdld.assetid and cacm.asset_collateral_class='VEHICLE'  where d.DEAL_LOAN_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId)).trim()).toString());

      logger.info(new StringBuilder().append("getAllLoanDetails: ").append(query).toString());

      LoanDetailVo loanVo = null;
      ArrayList loandeatail = ConnectionDAO.sqlSelect(query.toString());

      query = null;

      if (loandeatail.size() > 0) {
        for (int i = 0; i < loandeatail.size(); i++)
        {
          logger.info(new StringBuilder().append("getAllLoanDetails").append(loandeatail.get(i).toString()).toString());
          ArrayList loandeatail1 = (ArrayList)loandeatail.get(i);
          if (loandeatail1.size() > 0)
          {
            logger.info(new StringBuilder().append("getAllLoanDetails").append(loandeatail1.size()).toString());
            loanVo = new LoanDetailVo();
            loanVo.setLbxProductID(CommonFunction.checkNull(loandeatail1.get(0)).trim());
            loanVo.setLbxscheme(CommonFunction.checkNull(loandeatail1.get(1)).trim());
            loanVo.setDisbursalDate(CommonFunction.checkNull(loandeatail1.get(2)).trim());
            if (!CommonFunction.checkNull(loandeatail1.get(3)).equalsIgnoreCase(""))
            {
              Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(3)).trim());
              loanVo.setAssetCost(this.myFormatter.format(reconNum));
            }
            if (!CommonFunction.checkNull(loandeatail1.get(4)).equalsIgnoreCase(""))
            {
              Number reconNumP = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(4)).trim());
              loanVo.setMarginPerc(this.myFormatter.format(reconNumP));
              loanVo.setLtvPerc(this.myFormatter.format(100.0D - reconNumP.doubleValue()));
            }
            else
            {
              loanVo.setLtvPerc("100.00");
            }

            if (!CommonFunction.checkNull(loandeatail1.get(5)).equalsIgnoreCase(""))
            {
              Number reconNumA = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(5)).trim());
              loanVo.setMarginAmount(this.myFormatter.format(reconNumA));
            }

            if (!CommonFunction.checkNull(loandeatail1.get(6)).equalsIgnoreCase(""))
            {
              Number reconNumL = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(6)).trim());
              loanVo.setRequestedLoanAmount(this.myFormatter.format(reconNumL));
            }

            loanVo.setRequestedLoanTenure(CommonFunction.checkNull(loandeatail1.get(7)).trim());
            loanVo.setFrequency(CommonFunction.checkNull(loandeatail1.get(8)).trim());
            loanVo.setRateType(CommonFunction.checkNull(loandeatail1.get(9)).trim());
            loanVo.setType(CommonFunction.checkNull(loandeatail1.get(10)).trim());
            logger.info(new StringBuilder().append("base rate type............... ").append(CommonFunction.checkNull(loandeatail1.get(11)).trim()).toString());
            loanVo.setBaseRateType(CommonFunction.checkNull(loandeatail1.get(11)).trim());
            if (!CommonFunction.checkNull(loandeatail1.get(12)).equalsIgnoreCase(""))
            {
              Number reconNumb = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(12)).trim());
              loanVo.setBaseRate(this.myFormatter.format(reconNumb));
            }

            if (!CommonFunction.checkNull(loandeatail1.get(13)).equalsIgnoreCase(""))
            {
              Number reconNumU = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(13)).trim());
              loanVo.setMarkUp(this.myFormatter.format(reconNumU));
            }

            if (!CommonFunction.checkNull(loandeatail1.get(14)).equalsIgnoreCase(""))
            {
              Number reconNumE = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(14)).trim());
              loanVo.setEffectiveRate(this.myFormatter.format(reconNumE));
            }

            loanVo.setRepaymentType(CommonFunction.checkNull(loandeatail1.get(15)).trim());
            if (CommonFunction.checkNull(loandeatail1.get(15)).trim().equalsIgnoreCase("I"))
            {
              loanVo.setShowRepaymentType("INSTALLMENT");
            }
            else if (CommonFunction.checkNull(loandeatail1.get(15)).trim().equalsIgnoreCase("N"))
            {
              loanVo.setShowRepaymentType("NON-INSTALLMENT");
            }
            loanVo.setInstallmentType(CommonFunction.checkNull(loandeatail1.get(16)).trim());
            loanVo.setInstMode(CommonFunction.checkNull(loandeatail1.get(17)).trim());
            loanVo.setPaymentMode(CommonFunction.checkNull(loandeatail1.get(18)).trim());
            loanVo.setLbxLoanPurpose(CommonFunction.checkNull(loandeatail1.get(19)).trim());
            loanVo.setDealLoanId(CommonFunction.checkNull(loandeatail1.get(20)).trim());
            loanVo.setProduct(CommonFunction.checkNull(loandeatail1.get(21)).trim());
            loanVo.setScheme(CommonFunction.checkNull(loandeatail1.get(22)).trim());
            if (!CommonFunction.checkNull(loandeatail1.get(23)).equalsIgnoreCase(""))
            {
              Number reconNumf = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(23)).trim());
              loanVo.setMinFinanceAmount(this.myFormatter.format(reconNumf));
            }

            if (!CommonFunction.checkNull(loandeatail1.get(24)).equalsIgnoreCase(""))
            {
              Number reconNummf = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(24)).trim());
              loanVo.setMaxFinanceAmount(this.myFormatter.format(reconNummf));
            }

            if (!CommonFunction.checkNull(loandeatail1.get(25)).equalsIgnoreCase(""))
            {
              Number reconNummr = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(25)).trim());
              loanVo.setMinMRate(this.myFormatter.format(reconNummr));
            }

            if (!CommonFunction.checkNull(loandeatail1.get(26)).equalsIgnoreCase(""))
            {
              Number reconNummm = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(26)).trim());
              loanVo.setMaxMRate(this.myFormatter.format(reconNummm));
            }

            loanVo.setMinTenure(CommonFunction.checkNull(loandeatail1.get(27)).trim());
            loanVo.setMaxTenure(CommonFunction.checkNull(loandeatail1.get(28)).trim());
            loanVo.setAssetFlag(CommonFunction.checkNull(loandeatail1.get(29)).trim());
            loanVo.setNoOfInstall(CommonFunction.checkNull(loandeatail1.get(30)).trim());
            loanVo.setProductTypeFlag(CommonFunction.checkNull(loandeatail1.get(31)).trim());
            loanVo.setSectorType(CommonFunction.checkNull(loandeatail1.get(32)).trim());

            loanVo.setInstallments(CommonFunction.checkNull(loandeatail1.get(33)).trim());
            loanVo.setRepayEffectiveDate(CommonFunction.checkNull(loandeatail1.get(34)).trim());
            loanVo.setMaturityDate(CommonFunction.checkNull(loandeatail1.get(35)).trim());
            loanVo.setCycleDate(CommonFunction.checkNull(loandeatail1.get(36)).trim());
            loanVo.setNextDueDate(CommonFunction.checkNull(loandeatail1.get(37)).trim());
            loanVo.setLoanType(CommonFunction.checkNull(loandeatail1.get(38)).trim());
            loanVo.setRateMethodType(CommonFunction.checkNull(loandeatail1.get(39)).trim());
            logger.info(new StringBuilder().append("getAllLoanDetails: Interest Calc From---").append(CommonFunction.checkNull(loandeatail1.get(40))).toString());
            loanVo.setInterestCalc(CommonFunction.checkNull(loandeatail1.get(40)).trim());
            loanVo.setNetLtv(CommonFunction.checkNull(loandeatail1.get(41)).trim());
            loanVo.setTenureInDay(CommonFunction.checkNull(loandeatail1.get(42)).trim());
            loanVo.setDaysBasis(CommonFunction.checkNull(loandeatail1.get(43)).trim());
            loanVo.setFixPriod(CommonFunction.checkNull(loandeatail1.get(44)).trim());

            if (!CommonFunction.checkNull(loandeatail1.get(45)).equalsIgnoreCase(""))
            {
              Number reconNumd = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(45)).trim());
              loanVo.setMinFlatRate(this.myFormatter.format(reconNumd));
            }
            else
            {
              loanVo.setMinFlatRate("0.0000000");
            }
            if (!CommonFunction.checkNull(loandeatail1.get(46)).equalsIgnoreCase(""))
            {
              Number reconNumd = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(46)).trim());
              loanVo.setMaxFlatRate(this.myFormatter.format(reconNumd));
            }
            else
            {
              loanVo.setMaxFlatRate("0.0000000");
            }

            if (!CommonFunction.checkNull(loandeatail1.get(47)).equalsIgnoreCase(""))
            {
              Number reconNumd = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(47)).trim());
              loanVo.setMinEffectiveRate(this.myFormatter.format(reconNumd));
            }
            else
            {
              loanVo.setMinEffectiveRate("0.0000000");
            }
            if (!CommonFunction.checkNull(loandeatail1.get(48)).equalsIgnoreCase(""))
            {
              Number reconNumd = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(48)).trim());
              loanVo.setMaxEffectiveRate(this.myFormatter.format(reconNumd));
            }
            else
            {
              loanVo.setMaxEffectiveRate("0.0000000");
            }

            if (!CommonFunction.checkNull(loandeatail1.get(49)).equalsIgnoreCase(""))
            {
              Number reconNumd = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(49)).trim());
              loanVo.setDefaultFlatRate(this.myFormatter.format(reconNumd));
            }
            else
            {
              loanVo.setDefaultFlatRate("0.0000000");
            }
            if (!CommonFunction.checkNull(loandeatail1.get(50)).equalsIgnoreCase(""))
            {
              Number reconNumd = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(50)).trim());
              loanVo.setDefaultEffectiveRate(this.myFormatter.format(reconNumd));
            }
            else
            {
              loanVo.setDefaultEffectiveRate("0.0000000");
            }
            loanVo.setNoOfAsset(CommonFunction.checkNull(loandeatail1.get(51)).trim());
            loanVo.setLbxLoanClassification(CommonFunction.checkNull(loandeatail1.get(52)).trim());
            loanVo.setLoanPurpose(CommonFunction.checkNull(loandeatail1.get(53)).trim());
            loanVo.setTotalVatAmt(CommonFunction.checkNull(loandeatail1.get(54)).trim());
            loanVo.setCreditPeriod(CommonFunction.checkNull(loandeatail1.get(55)).trim());
            loanVo.setInterestCompoundingFrequency(CommonFunction.checkNull(loandeatail1.get(56)).trim());
            loanVo.setInterestCalculationMethod(CommonFunction.checkNull(loandeatail1.get(57)).trim());
            loanVo.setInterestFrequency(CommonFunction.checkNull(loandeatail1.get(58)).trim());
            loanVo.setInterestDueDate(CommonFunction.checkNull(loandeatail1.get(59)).trim());
            loanVo.setEditDueDate(CommonFunction.checkNull(loandeatail1.get(60)).trim());
            loanVo.setFirstInterestDueDate(CommonFunction.checkNull(loandeatail1.get(61)).trim());
            loanVo.setInsurancePremium(CommonFunction.checkNull(loandeatail1.get(62)).trim());

            if (!CommonFunction.checkNull(loandeatail1.get(63)).equalsIgnoreCase(""))
            {
              Number requestedLoanNew = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(63)).trim());
              loanVo.setRequestedLoamt(this.myFormatter.format(requestedLoanNew));
            }
            loanVo.setBusinessType((CommonFunction.checkNull(loandeatail1.get(64))).trim());
            loanVo.setGrossBlock(CommonFunction.checkNull(loandeatail1.get(65)).trim());
            loanVo.setNetBlock(CommonFunction.checkNull(loandeatail1.get(66)).trim());

            list.add(loanVo);
          }
          loanVo = null;
          loandeatail1.clear();
          loandeatail1 = null;
        }
        loandeatail.clear();
        loandeatail = null;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      dealLoanId = null;
    }
    return list;
  }

  public ArrayList getUnderWriterData(String id)
  {
    ArrayList list = new ArrayList();
    try {
      logger.info(new StringBuilder().append("In getUnderWriterData..........................DAOImpl").append(id).toString());
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append(" select distinct d.deal_no,d.deal_application_form_no,g.CUSTOMER_NAME, d.deal_source_type,d.deal_source_name,r.USER_NAME, if((select count(1) from cr_deal_verification_dtl where REC_STATUS='C' AND VERIFICATION_ACTION='I' and VERIFICATION_STATUS !='W' and DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()).append("' LIMIT 1)>0,'N','Y')as allWaived, ").append("(select distinct VERIFICATION_STATUS from cr_deal_verification_dtl where REC_STATUS='C' AND VERIFICATION_ACTION='I' and DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()).append("' LIMIT 1)as fv_stats, ").append("(select distinct VERIFICATION_REMARKS from cr_deal_verification_dtl where REC_STATUS='C'AND VERIFICATION_ACTION='I' and DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()).append("' LIMIT 1)as fv_remarks, ").append("if((select count(1) from cr_policy_decision where REC_STATUS='A' and DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()).append("')>0,'Y','N')as deviationStats,DEAL_CUSTOMER_TYPE,  ").append("(select count(1) from cr_deal_verification_dtl where VERIFICATION_ACTION='I' AND deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()).append("') as verificationStatus, ").append("(select count(1) from cr_deal_verification_dtl where deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()).append("') as verification ").append("from cr_deal_dtl d,cr_deal_customer_m g,sec_user_m r where d.deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()).append("' ").append("and d.deal_customer_id =g.CUSTOMER_ID and d.DEAL_RM=r.USER_ID ").toString());

      logger.info(new StringBuilder().append("In getUnderWriterData...............query...........DAOImpl").append(query).toString());
      CommonPageVo noteVO = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getUnderWriterData ").append(product.size()).toString());

      query = null;

      for (int i = 0; i < product.size(); i++) {
        logger.info(new StringBuilder().append("getUnderWriterData...Outer FOR loop ").append(CommonFunction.checkNull(product.get(i)).toString()).toString());
        ArrayList data = (ArrayList)product.get(i);
        logger.info(new StringBuilder().append("data.size() ---->> ").append(data.size()).toString());
        if (data.size() > 0) {
          noteVO = new CommonPageVo();
          noteVO.setDealNo(CommonFunction.checkNull(data.get(0)).trim());
          noteVO.setApplicationFormNo(CommonFunction.checkNull(data.get(1)).trim());
          noteVO.setCustomerName(CommonFunction.checkNull(data.get(2)).trim());
          noteVO.setsourcingPartnerType(CommonFunction.checkNull(data.get(3)).trim());
          noteVO.setSourcingPartnerName(CommonFunction.checkNull(data.get(4)).trim());
          noteVO.setDealRm(CommonFunction.checkNull(data.get(5)).trim());
          noteVO.setAllWaived(CommonFunction.checkNull(data.get(6)).trim());
          noteVO.setFieldResults(CommonFunction.checkNull(data.get(7)).trim());
          noteVO.setFieldRemarks(CommonFunction.checkNull(data.get(8)).trim());
          noteVO.setDevResults(CommonFunction.checkNull(data.get(9)).trim());
          noteVO.setCustomerType(CommonFunction.checkNull(data.get(10)).trim());
          noteVO.setVerificationStatus(CommonFunction.checkNull(data.get(11)).trim());
          noteVO.setVerification(CommonFunction.checkNull(data.get(12)).trim());
          list.add(noteVO);
        }
        noteVO = null;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      id = null;
    }

    return list;
  }

  public ArrayList getCreditDecisionData(String dealId)
  {
    ArrayList list = new ArrayList();
    try {
      String dealSancAmout1 = ConnectionDAO.singleReturn(new StringBuilder().append(" select ifnull(round(ifnull(deal_sanction_amount,'0'),0),0) from cr_deal_loan_dtl  where deal_id = '").append(dealId).append("' ").toString());

      if (CommonFunction.checkNull(dealSancAmout1).equalsIgnoreCase(""))
      {
        dealSancAmout1 = "0";
      }
      long dealSancAmout = Long.parseLong(dealSancAmout1);
      logger.info(new StringBuilder().append("dealSancAmout------------->>>> ").append(dealSancAmout).toString());

      long assetCollateralValue = Long.parseLong(ConnectionDAO.singleReturn(new StringBuilder().append(" SELECT ifnull(round(sum(ifnull(asset_collateral_value,'0')),0),0) FROM cr_asset_collateral_m  WHERE ASSET_ID IN ( select ASSETID from cr_deal_collateral_m WHERE DEAL_ID = '").append(dealId).append("') ").toString()));

      logger.info(new StringBuilder().append("assetCollateralValue------------->>>> ").append(assetCollateralValue).toString());

      String dealLoanAmount1 = ConnectionDAO.singleReturn(new StringBuilder().append(" select ifnull(round(ifnull(DEAL_LOAN_AMOUNT,'0'),0),0) from CR_DEAL_LOAN_DTL  where deal_id = '").append(dealId).append("' ").toString());

      if (CommonFunction.checkNull(dealLoanAmount1).equalsIgnoreCase(""))
      {
        dealLoanAmount1 = "0";
      }
      long dealLoanAmount = Long.parseLong(dealLoanAmount1);
      logger.info(new StringBuilder().append("dealLoanAmount------------->>>> ").append(dealLoanAmount).toString());

      logger.info("valueationAmount logic start------->>> ");
      long valueationAmount = Long.parseLong(ConnectionDAO.singleReturn(new StringBuilder().append(" SELECT ifnull(round(ifnull(SUM(VALUATION_AMOUNT),'0'),0),'0')  FROM CR_ASSET_COLLATERAL_M WHERE ASSET_COLLATERAL_CLASS = 'PROPERTY'  AND ASSET_ID IN (SELECT ASSETID FROM CR_DEAL_COLLATERAL_M WHERE DEAL_ID = '").append(dealId).append("' ) ").toString()));

      logger.info(new StringBuilder().append("valueationAmount ------->>> ").append(valueationAmount).toString());

      String GrossLTV = "";
      if (valueationAmount == 0L) {
        GrossLTV = "0";
      } else {
        long finalValue = dealLoanAmount * 100L / valueationAmount;
        GrossLTV = String.valueOf(finalValue);
      }
      logger.info(new StringBuilder().append("GrossLTV ----->>> ").append(GrossLTV).toString());

      long OUTSTANDING_AMOUNT = 0L;
      int count = Integer.parseInt(ConnectionDAO.singleReturn(new StringBuilder().append(" select count(1) from cr_obligation_analysis_dtl where deal_id = '").append(dealId).append("' ").toString()));
      logger.info(new StringBuilder().append("count1 --------->>> ").append(count).toString());
      if (count > 0) {
        OUTSTANDING_AMOUNT = Long.parseLong(ConnectionDAO.singleReturn(new StringBuilder().append(" select ifnull(round(ifnull(OUTSTANDING_AMOUNT,'0'),0),0) from cr_obligation_analysis_dtl where deal_id = '").append(dealId).append("' and OBLIGATION_TO_BE_CONSIDER = 'Y' ").toString()));
      }
      logger.info(new StringBuilder().append("OUTSTANDING_AMOUNT ------->>> ").append(OUTSTANDING_AMOUNT).toString());
      count = 0;
      long INSTL_Amount = 0L;
      count = Integer.parseInt(ConnectionDAO.singleReturn(new StringBuilder().append(" select count(1) from cr_deal_repaysch_dtl where deal_id = '").append(dealId).append("' ").toString()));
      logger.info(new StringBuilder().append("count2 --------->>> ").append(count).toString());
      if (count > 0) {
        INSTL_Amount = Long.parseLong(ConnectionDAO.singleReturn(new StringBuilder().append(" select ifnull(round(sum(ifnull(INSTL_Amount,'0')),0),0) from cr_deal_repaysch_dtl where deal_id = '").append(dealId).append("' ").toString()));
      }
      logger.info(new StringBuilder().append("INSTL_Amount ----->>> ").append(INSTL_Amount).toString());
      count = 0;
      long Net_Profit = 0L;
      count = Integer.parseInt(ConnectionDAO.singleReturn(new StringBuilder().append(" select count(1) from cr_financial_data_dtl where PARAM_CODE = 'GRPR' and deal_id = '").append(dealId).append("' and SOURCE_TYPE = 'P' ").toString()));
      logger.info(new StringBuilder().append("count3 --------->>> ").append(count).toString());
      if (count > 0) {
        Net_Profit = Long.parseLong(ConnectionDAO.singleReturn(new StringBuilder().append(" select ifnull(round(sum(ifnull(PARAM_VALUE,'0')),0),0) from cr_financial_data_dtl where PARAM_CODE = 'GRPR' and deal_id = '").append(dealId).append("' and SOURCE_TYPE = 'P' ").toString()));
      }
      logger.info(new StringBuilder().append("Net_Profit ------>>>> ").append(Net_Profit).toString());
      String FOIR = "0";
      if (Net_Profit > 0L) {
        long finalValue = (OUTSTANDING_AMOUNT + INSTL_Amount) * 100L / Net_Profit;
        FOIR = String.valueOf(finalValue);
      }
      logger.info(new StringBuilder().append("FOIR ------>>>>>>>>> ").append(FOIR).toString());
      double sancAmtDisp = 0.0D;
      logger.info(new StringBuilder().append("In getCreditDecisionData..........................DAOImpl").append(dealId).toString());
      String valDays = "";
      StringBuilder valQuery = new StringBuilder();
      valQuery.append(new StringBuilder().append("select Validity_Days from cr_scheme_m csm left join cr_deal_loan_dtl cld on (cld.DEAL_SCHEME=csm.SCHEME_ID) and (cld.DEAL_PRODUCT=csm.PRODUCT_ID) where cld.deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("'").toString());
      logger.info(new StringBuilder().append("Validity days query : ").append(valQuery.toString()).toString());
      valDays = ConnectionDAO.singleReturn(valQuery.toString());
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select dl.deal_loan_id,d.deal_id,p.PRODUCT_DESC,if(p.revolving_flag='Y','Revolving','Non-Revolving') deal_product_type , dl.deal_loan_purpose, dl.deal_loan_amount,dl.deal_sanction_amount,dl.deal_tenure,dl.DEAL_FLAT_RATE,DATE_FORMAT(dl.DEAL_SANCTION_VALID_TILL,'").append(this.dateFormat).append("'),").append("dl.DEAL_IRR2,dl.DEAL_EFF_RATE,she.MIN_IRR,she.MAX_IRR,dl.DEAL_REPAYMENT_TYPE,(select DATE_FORMAT(DATE_ADD(PARAMETER_VALUE,INTERVAL '").append(CommonFunction.checkNull(valDays).trim()).append("' DAY),'%d-%m-%Y') from parameter_mst where PARAMETER_KEY='BUSINESS_DATE')as valid_date").append(" from cr_deal_loan_dtl dl, cr_deal_dtl d, cr_product_m p ,cr_scheme_m she").append(" where d.deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' ").append("and dl.deal_id=d.deal_id and dl.deal_product=p.PRODUCT_ID and she.SCHEME_ID = dl.DEAL_SCHEME").toString());

      logger.info(new StringBuilder().append("In getCreditDecisionData...............query...........DAOImpl").append(query).toString());

      CommonPageVo noteVO = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getCreditDecisionData product.size() ---->>> ").append(product.size()).toString());

      query = null;
      valQuery = null;

      for (int i = 0; i < product.size(); i++) {
        logger.info(new StringBuilder().append("getCreditDecisionData...Outer FOR loop ").append(CommonFunction.checkNull(product.get(i)).toString()).toString());
        ArrayList data = (ArrayList)product.get(i);
        logger.info(new StringBuilder().append("data.size() --------------->>>>>>>>> ").append(data.size()).toString());
        if (data.size() > 0) {
          noteVO = new CommonPageVo();
          noteVO.setDealLoanId(CommonFunction.checkNull(data.get(0)).trim());
          noteVO.setDealId(CommonFunction.checkNull(data.get(1)).trim());
          noteVO.setProduct(CommonFunction.checkNull(data.get(2)).trim());
          noteVO.setCreditType(CommonFunction.checkNull(data.get(3)).trim());
          noteVO.setPurpose(CommonFunction.checkNull(data.get(4)).trim());

          if (!CommonFunction.checkNull(data.get(5)).equalsIgnoreCase(""))
          {
            Number reconNummm = this.myFormatter.parse(CommonFunction.checkNull(data.get(5)).trim());
            noteVO.setRequestAmt(this.myFormatter.format(reconNummm));
          }

          noteVO.setSancAmt(CommonFunction.checkNull(data.get(6)).trim());
          noteVO.setUnderTenure(CommonFunction.checkNull(data.get(7)).trim());
          if (!CommonFunction.checkNull(data.get(8)).equalsIgnoreCase(""))
          {
            Number reconNummm = this.myFormatter.parse(CommonFunction.checkNull(data.get(8)).trim());
            noteVO.setEmi(this.myFormatter.format(reconNummm));
          }

          if ((noteVO.getSancAmt() != null) && (!noteVO.getSancAmt().equals("")))
          {
            sancAmtDisp += Double.parseDouble(noteVO.getSancAmt());
            if (!CommonFunction.checkNull(Double.valueOf(sancAmtDisp)).equalsIgnoreCase(""))
            {
              Number reconNummm = this.myFormatter.parse(CommonFunction.checkNull(Double.valueOf(sancAmtDisp)));

              noteVO.setSancAmtDisp(this.myFormatter.format(reconNummm));
            }
          }

          if (!CommonFunction.checkNull(data.get(6)).equalsIgnoreCase(""))
          {
            Number reconNummm = this.myFormatter.parse(CommonFunction.checkNull(data.get(6)).trim());
            noteVO.setSancAmt(this.myFormatter.format(reconNummm));
          }
          if (CommonFunction.checkNull(data.get(9)).equalsIgnoreCase(""))
          {
            logger.info(new StringBuilder().append("sanc valid date : ").append(data.get(15)).toString());
            noteVO.setSancDate(CommonFunction.checkNull(data.get(15)).trim());
          }
          else
          {
            noteVO.setSancDate(CommonFunction.checkNull(data.get(9)).trim());
          }

          if (!CommonFunction.checkNull(data.get(10)).equalsIgnoreCase(""))
          {
            Number reconNummm = this.myFormatter.parse(CommonFunction.checkNull(data.get(10)).trim());
            noteVO.setBusIrr(this.myFormatter.format(reconNummm));
          }
          if (!CommonFunction.checkNull(data.get(10)).equalsIgnoreCase(""))
          {
            Number reconNummm = this.myFormatter.parse(CommonFunction.checkNull(data.get(10)).trim());
            noteVO.setBusIrr(this.myFormatter.format(reconNummm));
          }
          if (!CommonFunction.checkNull(data.get(11)).equalsIgnoreCase(""))
          {
            Number reconNummm = this.myFormatter.parse(CommonFunction.checkNull(data.get(11)).trim());
            noteVO.setEffectiveRate(this.myFormatter.format(reconNummm));
          }
          noteVO.setMinIRR(CommonFunction.checkNull(data.get(12)).trim());
          noteVO.setMaxIRR(CommonFunction.checkNull(data.get(13)).trim());
          noteVO.setRepayType(CommonFunction.checkNull(data.get(14)).trim());

          noteVO.setGrossLtv(CommonFunction.checkNull(GrossLTV).trim());
          noteVO.setFoir(CommonFunction.checkNull(FOIR).trim());
          list.add(noteVO);
        }
        noteVO = null;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      dealId = null;
    }

    return list;
  }

  public ArrayList getApplicationDocuments(String entityType, String commonId, String stage, String txnType, String source)
  {
    ArrayList list = new ArrayList();
    try {
      String table = "cr_document_dtl";
      if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
        table = "cr_document_dtl_edit";
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append(" SELECT TXN_DOC_ID,DOC_ID,DOC_DESC,DATE_FORMAT(DOC_RECEIVED_DATE,'").append(this.dateFormat).append("'),").append("\tDATE_FORMAT(DOC_DEFFRED_DATE,'").append(this.dateFormat).append("'),DATE_FORMAT(DOC_EXPIRY_DATE,'").append(this.dateFormat).append("'), ").append("\tDOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS,Doc_Expiry_Flag,DOC_CHILD_FLAG,DOC_CHILD_IDS,d.ENTITY_ID,d.DOCUMENT_TYPE  ").append("\tfrom ").append(table).append(" d ").append("\twhere DOC_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()).append("'and TXNID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()).append(" and TXN_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()).append("' and STAGE_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()).append("'and ENTITY_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()).append("").toString());

      logger.info(new StringBuilder().append("getDocumentsDetai Queryl: ").append(query).toString());
      DocumentsVo docsVo = null;
      ArrayList docsdeatail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getDocumentsDetail OUTER ARRAYLIST SIZE: ").append(docsdeatail.size()).toString());

      for (int i = 0; i < docsdeatail.size(); i++)
      {
        ArrayList docsdeatail1 = (ArrayList)docsdeatail.get(i);
        if (docsdeatail1.size() > 0)
        {
          docsVo = new DocumentsVo();
          docsVo.setDocId(CommonFunction.checkNull(docsdeatail1.get(0)).trim());
          docsVo.setRealDocId(CommonFunction.checkNull(docsdeatail1.get(1)).trim());
          docsVo.setDocDesc(CommonFunction.checkNull(docsdeatail1.get(2)).trim());
          docsVo.setRecieveDate(CommonFunction.checkNull(docsdeatail1.get(3)).trim());
          docsVo.setDeferDate(CommonFunction.checkNull(docsdeatail1.get(4)).trim());
          docsVo.setExpirDate(CommonFunction.checkNull(docsdeatail1.get(5)).trim());

          if (CommonFunction.checkNull(docsdeatail1.get(6)).trim().equals("Y"))
          {
            docsVo.setMandatory("MANDATORY");
          }
          else if (CommonFunction.checkNull(docsdeatail1.get(6)).trim().equals("N"))
          {
            docsVo.setMandatory("NON-MANDATORY");
          }

          if (CommonFunction.checkNull(docsdeatail1.get(7)).trim().equals("Y"))
          {
            docsVo.setOriginal("ORIGINAL");
          }
          else if (CommonFunction.checkNull(docsdeatail1.get(7)).trim().equals("N"))
          {
            docsVo.setOriginal("PHOTOCOPY");
          }

          docsVo.setDocStatus(CommonFunction.checkNull(docsdeatail1.get(8)).trim());
          docsVo.setRemark(CommonFunction.checkNull(docsdeatail1.get(9)).trim());
          docsVo.setExpirFlag(CommonFunction.checkNull(docsdeatail1.get(10)).trim());
          docsVo.setDocChildFlag(CommonFunction.checkNull(docsdeatail1.get(11)).trim());
          docsVo.setDocChildId(CommonFunction.checkNull(docsdeatail1.get(12)).trim());
          docsVo.setEntityId(CommonFunction.checkNull(docsdeatail1.get(13)).trim());
          docsVo.setvDocumentType(CommonFunction.checkNull(docsdeatail1.get(14)).trim());
          list.add(docsVo);
        }
        query = null;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      entityType = null;
      commonId = null;
      stage = null;
      txnType = null;
      source = null;
    }

    return list;
  }

  public boolean saveCollateralDetails(Object ob)
  {
    int maxId = 0;
    CollateralVo vo = (CollateralVo)ob;
    this.qryList = new ArrayList();
    this.qryList1 = new ArrayList();
    String standard = "";
    boolean status = false;
    StringBuffer bufInsUpdSql = new StringBuffer();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    StringBuffer bufInsUpdSql1 = new StringBuffer();

    PrepStmtObject insertPrepStmtObject1 = new PrepStmtObject();
    logger.info(new StringBuilder().append("vo.getAssetStandard::::::Insert::::::::").append(vo.getAssetStandard()).toString());
    logger.info(new StringBuilder().append("getColltype2::::::Insert::::::::").append(vo.getColltype2()).toString());
    if (vo.getColltype2().equalsIgnoreCase("ASSET"))
      if ((vo.getAssetStandard() != null) && (vo.getAssetStandard().equals("on")))
        standard = "Y";
      else
        standard = "N";
    try
    {
      bufInsUpdSql.append("insert into cr_asset_collateral_m(ASSET_TYPE,ASSET_NEW_OLD,ASSET_COLLATERAL_CLASS,ASSET_COLLATERAL_DESC, ASSET_COLLATERAL_VALUE, ASSET_SUPPLIER,ASSET_MANUFATURER,ASSET_SUPPLIER_DESC,ASSET_MANUFATURER_DESC,COLLATERAL_SECURITY_MARGIN,DEFAULT_LTV, FD_AMOUNT, FD_TENURE, FD_RATE, FD_BOOK_DATE, FD_MATURITY_DATE, FD_AGENCY_NAME, FD_AGENCY_RATING, FD_APPLICANT, SBLC_AMOUNT, SBLC_VALIDITY, SBLC_ISSUING_DATE, SBLC_PARENT_COMPANY, SECURITY_TYPE, SECURITY_CATEGORY, SECURITY_MARKET_VALUE, MACHINE_MAKE, MACHINE_MODEL, MACHINE_TYPE, MACHINE_OWNER, MACHINE_MANUFACTURING_YEAR, MACHINE_IDENTIFICATION_NO, MACHINE_COLLATERAL_COST, MACHINE_MARGIN, PROPERTY_TYPE, PROPERTY_ADDRESS, ADDRESS_LINE2, ADDRESS_LINE3, COUNTRY, STATE, DISTRICT, PINCODE, TEHSIL, PROPERTY_AREA, PROPERTY_CONSTRUCTION, PROPERY_VALUE, PROPERTY_OWNER,MORTAGE_TYPE, VEHICLE_MAKE, VEHICLE_MODEL,MAKE_MODEL_ID,VEHICLE_TYPE, VEHICLE_OWNER, VEHICLE_MANUFACTURING_YEAR, VEHICLE_REGISTRATION_NO, VEHICLE_REGISTRATION_DATE, VEHICLE_CHASIS_NUMBER, VEHICLE_Insurer, VEHICLE_INSURED_DATE, VEHICLE_COLLATERAL_COST, VEHICLE_MARGIN, STOCK_TYPE, STOCK_NATURE, STOCK_VALUE, STOCK_GODOWN_ADDRESS, STOCK_INVENTORY_CYCLE, DEBTOR_TYPE, DEBTOR_TOTAL_OUTSTANDING,BG_TYPE,BG_AMOUNT,BG_ISSUE_DATE,BG_VALIDITY_DATE,BG_ISSUING_BANK,INVOICE_DATE,ASSET_LEVEL,VILLAGE_NAME_LANDMARK,TXN_VALUE,TECH_VERIFICATION,DOCUMENT_VALUE,ADDITIONAL_CONSTRUCTION,BUILT_UP_AREA,REC_STATUS, MAKER_ID, MAKER_DATE,MACHINE_VALUE,MACHINE_DISCOUNT,VEHICLE_VALUE,VEHICLE_DISCOUNT,LOAN_AMOUNT,SECURITY,VEHICLE_ASSET_STATE,VEHICLE_ASSET_USES_TYPE,ASSET_STANDARD,LAWYER_NAME,VALUER_NAME,PROPERTY_DIRECTION,ENGINE_NUMBER,PROPERTY_TITLE,PROPERTY_STATUS,CARPET_AREA,TECHNICAL_VAL1,TECHNICAL_VAL2,BUILDUPAREASQMTR,ISSUEING_BANK_ID,ISSUEING_BRANCH_ID,SUPER_BUILDUP_AREA,PROPERTY_OWNER_GCD_ID,VALUATION_METHOD_ID,VALUATION_AMOUNT,INSURANCE_POLICY_NO,INSURANCE_PREMIUM_AMOUNT,INSURANCE_POLICY_START_DATE,INSURANCE_MATURITY_DATE,INSURANCE_PREMIUM_FREQUENCY,INSURANCE_NOMINEE,INSURANCE_RELATION_WITH_NOMINEE,INSURANCE_TENURE,INSURANCE_AGENCY,COVER_NOTE,SUM_ASSURED,VEHICLE_IDV,VEHICLE_VALUATION_AMOUNT,VEHICLE_GRID_VALUE,INVOICE_NO,VECHICLE_INVOICE_DATE,RC_RECEIVED,RC_RECEIVED_DATE,PROPERTY_TOTAL_AREA,DEALER_EXECUTIVE_ID,DEALER_MANAGER_ID,VAT_PERCENT,VAT_AMOUNT,service_tax,INVOICE_SI_RD_NAME,ORNAMENT_TYPE,ORNAMENT_STANDARD,ORNAMENT_RATE,ORNAMENT_LTV,ORNAMENT_GROSS_WEIGHT,ORNAMENT_DEDUCTION,ORNAMENT_NET_WEIGHT,ORNAMENT_LOAN_AMOUNT,ORNAMENT_VALUE_NET,ORNAMENT_PRIMARY_EVALUATER,ORNAMENT_QUANTITY,LAWYER_NAME2,VALUER_NAME2,LAWYER_NAME3,VALUER_NAME3,AMOUNT_FUNDED,TOTAL_AMOUNT_FUNDED,Sibdi)");

      bufInsUpdSql.append("values(");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsUpdSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsUpdSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");

      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");

      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");

      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsUpdSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());

      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");

      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?,");

      bufInsUpdSql.append(" ?,");
      bufInsUpdSql.append(" ?, ");

      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsUpdSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");

      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?, ");
      bufInsUpdSql.append(" ?) ");

      if (CommonFunction.checkNull(vo.getColltype2()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getColltype2().trim());
      }
      if (CommonFunction.checkNull(vo.getAssetNature()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAssetNature().trim());
      }
      if (CommonFunction.checkNull(vo.getColltype1()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getColltype1().trim());
      }
      if (CommonFunction.checkNull(vo.getAssetsCollateralDesc()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAssetsCollateralDesc().trim());
      }

      if (CommonFunction.checkNull(vo.getColltype1()).trim().equalsIgnoreCase("GOLD"))
      {
        if (CommonFunction.checkNull(vo.getNetOrnamentValue()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.0000");
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getNetOrnamentValue().trim()).toString());
        }

      }
      else if (CommonFunction.checkNull(vo.getAssetsCollateralValue()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getAssetsCollateralValue().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getLbxmachineSupplier()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLbxmachineSupplier().trim());
      }
      if (CommonFunction.checkNull(vo.getLbxmachineManufact()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLbxmachineManufact().trim());
      }

      if (CommonFunction.checkNull(vo.getMachineSupplier()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMachineSupplier().trim());
      }
      if (CommonFunction.checkNull(vo.getAssetManufact()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAssetManufact().trim());
      }
      if (CommonFunction.checkNull(vo.getCollateralSecurityMargin()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getCollateralSecurityMargin().trim()).toString());
      if (CommonFunction.checkNull(vo.getCollateralSecurityMarginDF()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getCollateralSecurityMarginDF().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getFdAmount()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getFdAmount().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getFdTenure()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getFdTenure().trim());
      }
      if (CommonFunction.checkNull(vo.getFdRate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getFdRate().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getFdBookDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getFdBookDate().trim());
      }
      if (CommonFunction.checkNull(vo.getFdMatureDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getFdMatureDate().trim());
      }
      if (CommonFunction.checkNull(vo.getFdAgencyName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getFdAgencyName().trim());
      }
      if (CommonFunction.checkNull(vo.getFdAgencyRating()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getFdAgencyRating().trim());
      }
      if (CommonFunction.checkNull(vo.getFdApplicants()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getFdApplicants().trim());
      }
      if (CommonFunction.checkNull(vo.getSblcAmount()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getSblcAmount().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getSblcValidity()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getSblcValidity().trim());
      }
      if (CommonFunction.checkNull(vo.getSblcIssuingDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getSblcIssuingDate().trim());
      }
      if (CommonFunction.checkNull(vo.getSblcParentCompany()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getSblcParentCompany().trim());
      }
      if (CommonFunction.checkNull(vo.getSecurityType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getSecurityType().trim());
      }
      if (CommonFunction.checkNull(vo.getSecurityCategory()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getSecurityCategory().trim());
      }
      if (CommonFunction.checkNull(vo.getSecurityMarketValue()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getSecurityMarketValue().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getMachineMake()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMachineMake().trim());
      }
      if (CommonFunction.checkNull(vo.getMachineModel()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMachineModel().trim());
      }
      if (CommonFunction.checkNull(vo.getMachineType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMachineType().trim());
      }
      if (CommonFunction.checkNull(vo.getMachineOwner()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMachineOwner().trim());
      }
      if (CommonFunction.checkNull(vo.getMachineYearOfManufact()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMachineYearOfManufact().trim());
      }
      if (CommonFunction.checkNull(vo.getMachineIdNo()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMachineIdNo().trim());
      }

      if (CommonFunction.checkNull(vo.getMachineCollateralCost()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getMachineCollateralCost().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getMachineMargin()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getMachineMargin().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getPropertyType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPropertyType().trim());
      }
      if (CommonFunction.checkNull(vo.getPropertyAddress()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPropertyAddress().trim());
      }
      if (CommonFunction.checkNull(vo.getAddr2()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getAddr2().trim());
      if (CommonFunction.checkNull(vo.getAddr3()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getAddr3().trim());
      if (CommonFunction.checkNull(vo.getTxtCountryCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getTxtCountryCode().trim());
      if (CommonFunction.checkNull(vo.getTxtStateCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getTxtStateCode().trim());
      if (CommonFunction.checkNull(vo.getTxtDistCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getTxtDistCode().trim());
      if (CommonFunction.checkNull(vo.getPincode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getPincode().trim());
      if (CommonFunction.checkNull(vo.getTahsil()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTahsil().trim());
      }
      if (CommonFunction.checkNull(vo.getPropertyArea()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPropertyArea().trim());
      }
      if (CommonFunction.checkNull(vo.getPropertyConstruct()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPropertyConstruct().trim());
      }
      if (CommonFunction.checkNull(vo.getAssetsCollateralValue()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getAssetsCollateralValue().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getPropertyOwner()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPropertyOwner().trim());
      }

      if (CommonFunction.checkNull(vo.getMortgage()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMortgage().trim());
      }

      if (CommonFunction.checkNull(vo.getVehicleMake()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleMake().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleModel()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleModel().trim());
      }
      if (CommonFunction.checkNull(vo.getMake_model_id()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMake_model_id().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleType().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleOwner()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleOwner().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleYearOfManufact()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleYearOfManufact().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleRegNo()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleRegNo().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleRegDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleRegDate().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleChesisNo()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleChesisNo().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleInsurer()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleInsurer().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleInsureDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleInsureDate().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleCollateralCost()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getVehicleCollateralCost().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getVehicleMargin()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getVehicleMargin().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getStockType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getStockType().trim());
      }
      if (CommonFunction.checkNull(vo.getStockNature()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getStockNature().trim());
      }
      if (CommonFunction.checkNull(vo.getAssetsCollateralValue()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getAssetsCollateralValue().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getStockAddress()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getStockAddress().trim());
      }
      if (CommonFunction.checkNull(vo.getStockCycle()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getStockCycle().trim());
      }

      if (CommonFunction.checkNull(vo.getDebtorType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getDebtorType().trim());
      }
      if (CommonFunction.checkNull(vo.getDebtorTotal()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getDebtorTotal().trim());
      }

      if (CommonFunction.checkNull(vo.getBgType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getBgType().trim());
      }
      if (CommonFunction.checkNull(vo.getAssetsCollateralValue()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getAssetsCollateralValue().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getBgInDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getBgInDate().trim());
      }

      if (CommonFunction.checkNull(vo.getBgValidity()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getBgValidity().trim());
      }
      if (CommonFunction.checkNull(vo.getBgIssuing()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getBgIssuing().trim());
      }
      if (CommonFunction.checkNull(vo.getInvoiceDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getInvoiceDate().trim());
      }

      if (CommonFunction.checkNull(vo.getAssetLevel()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getAssetLevel().trim());
      if (CommonFunction.checkNull(vo.getVillageLandmark()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getVillageLandmark().trim());
      if (CommonFunction.checkNull(vo.getTxnValue()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getTxnValue().trim()).toString());
      if (CommonFunction.checkNull(vo.getTechValuation()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getTechValuation().trim()).toString());
      if (CommonFunction.checkNull(vo.getDocValue()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getDocValue().trim()).toString());
      if (CommonFunction.checkNull(vo.getAddConstruction()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getAddConstruction().trim()).toString());
      if (CommonFunction.checkNull(vo.getBuildUpArea()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getBuildUpArea().trim());
      }

      insertPrepStmtObject.addString("P");

      if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getUserId().trim());
      }
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerDate());
      }
      if (CommonFunction.checkNull(vo.getAssetsCost()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.00");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getAssetsCost().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getAssetsDiscount()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.00");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getAssetsDiscount().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getVehicleCost()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.00");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getVehicleCost().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getVehicleDiscount()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.00");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getVehicleDiscount().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getLoanAmount()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.00");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getLoanAmount().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getSecurityTypes()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getSecurityTypes().trim());
      }

      if (CommonFunction.checkNull(vo.getTxtStateCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTxtStateCode().trim());
      }
      if (CommonFunction.checkNull(vo.getUsageType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getUsageType().trim());
      }
      if (CommonFunction.checkNull(standard).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(standard);
      }
      if (CommonFunction.checkNull(vo.getLawyerName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLawyerName().trim());
      }
      if (CommonFunction.checkNull(vo.getValuerName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getValuerName().trim());
      }
      if (CommonFunction.checkNull(vo.getPropertyDirection()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPropertyDirection().trim());
      }

      if (CommonFunction.checkNull(vo.getEngineNumber()).equalsIgnoreCase(""))
      {
        insertPrepStmtObject.addNull();
      }
      else insertPrepStmtObject.addString(vo.getEngineNumber());

      if (CommonFunction.checkNull(vo.getPropertyTitle()).trim().equalsIgnoreCase("")) {
        logger.info(new StringBuilder().append("getPropertyTitlecccccc").append(vo.getPropertyTitle()).toString());
        insertPrepStmtObject.addNull();
      } else {
        insertPrepStmtObject.addString(vo.getPropertyTitle().trim());
      }
      if (CommonFunction.checkNull(vo.getPropertyStatus()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPropertyStatus().trim());
      }
      if (CommonFunction.checkNull(vo.getCarpetArea()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getCarpetArea().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getTechnicalValuation1()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getTechnicalValuation1().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getTechnicalValuation2()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getTechnicalValuation2().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getBuildUpAreaSQMTR()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getBuildUpAreaSQMTR().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getLbxBankID()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLbxBankID().trim());
      }
      if (CommonFunction.checkNull(vo.getLbxBranchID()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLbxBranchID().trim());
      }
      if (CommonFunction.checkNull(vo.getSuperBuildUpArea()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getSuperBuildUpArea().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getPropertyOwnerGcdId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getPropertyOwnerGcdId().trim());
      if (CommonFunction.checkNull(vo.getValuationMethodId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getValuationMethodId().trim());
      if (CommonFunction.checkNull(vo.getValuationAmount()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getValuationAmount().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getPolicyNo()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPolicyNo().trim());
      }

      if (CommonFunction.checkNull(vo.getPremiumAmount()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getPremiumAmount().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getPolicyStartDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPolicyStartDate().trim());
      }

      if (CommonFunction.checkNull(vo.getInsMatureDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getInsMatureDate().trim());
      }
      if (CommonFunction.checkNull(vo.getPremiumFrequency()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPremiumFrequency().trim());
      }
      if (CommonFunction.checkNull(vo.getNominee()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getNominee().trim());
      }
      if (CommonFunction.checkNull(vo.getRelWithNominee()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getRelWithNominee().trim());
      }
      if (CommonFunction.checkNull(vo.getTenureYear()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTenureYear().trim());
      }

      if (CommonFunction.checkNull(vo.getLbxInsuranceAgency()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getLbxInsuranceAgency().trim());
      if (CommonFunction.checkNull(vo.getCoverNoteNo()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getCoverNoteNo().trim());
      if (CommonFunction.checkNull(vo.getSumAssured()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getSumAssured().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getIdv()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getIdv().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getValuationCost()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getValuationCost().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getGridValue()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getGridValue().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getInvoiceNumber()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getInvoiceNumber().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleInvoiceDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleInvoiceDate().trim());
      }
      if (CommonFunction.checkNull(vo.getRcReceived()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getRcReceived().trim());
      }
      if (CommonFunction.checkNull(vo.getRcReceivedDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getRcReceivedDate().trim());
      }

      if (CommonFunction.checkNull(vo.getTotalArea()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getTotalArea().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getLbxDealerExecutive()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getLbxDealerExecutive()));
      }
      if (CommonFunction.checkNull(vo.getLbxDealerManager()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getLbxDealerManager()));
      }

      if (CommonFunction.checkNull(vo.getVatPercent()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getVatPercent()));
      if (CommonFunction.checkNull(vo.getVatAmount()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getVatAmount()));
      if (CommonFunction.checkNull(vo.getServiceTax()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getServiceTax()));
      }
      if (CommonFunction.checkNull(vo.getSiRdName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getSiRdName()).trim());
      }

      if (CommonFunction.checkNull(vo.getOrnamentType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getOrnamentType()));
      }
      if (CommonFunction.checkNull(vo.getOrnamentStandard()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getOrnamentStandard()));
      }
      if (CommonFunction.checkNull(vo.getRateGoldOrnament()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getRateGoldOrnament().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getGoldOrnamentLTV()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getGoldOrnamentLTV().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getGrossWeight()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getGrossWeight().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getDeduction()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getDeduction().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getNetWeight()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getNetWeight().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getLoanAmountEligible()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getLoanAmountEligible().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getNetOrnamentValue()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getNetOrnamentValue().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getPrimaryEvaluator()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getPrimaryEvaluator()));
      }
      if (CommonFunction.checkNull(vo.getQuantity()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getQuantity().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getLawyerName2()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLawyerName2().trim());
      }
      if (CommonFunction.checkNull(vo.getValuerName2()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getValuerName2().trim());
      }
      if (CommonFunction.checkNull(vo.getLawyerName3()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLawyerName3().trim());
      }
      if (CommonFunction.checkNull(vo.getValuerName3()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getValuerName3().trim());
      }
      if (CommonFunction.checkNull(vo.getAmountFunded()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAmountFunded().trim());
      }
      if (CommonFunction.checkNull(vo.getTotalAmountFunded()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTotalAmountFunded().trim());
      }
      if (CommonFunction.checkNull(vo.getSibdi()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.0000");
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getSibdi().trim()).toString());
        }
      insertPrepStmtObject.setSql(bufInsUpdSql.toString());

      logger.info(new StringBuilder().append("IN Machinery() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      this.qryList.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
      if (status)
      {
        StringBuilder query3 = new StringBuilder();
        query3.append("Select distinct max(ASSET_ID) from cr_asset_collateral_m for update");
        StringBuilder id = new StringBuilder();
        id.append(ConnectionDAO.singleReturn(query3.toString()));
        maxId = Integer.parseInt(id.toString());
        logger.info(new StringBuilder().append("maxId : ").append(maxId).toString());
        query3 = null;
        id = null;
      }
      String table = "";
      if (CommonFunction.checkNull(vo.getSource()).trim().equalsIgnoreCase("ED"))
        table = "cr_loan_collateral_m_edit";
      else
        table = "cr_loan_collateral_m";
      if ((vo.getLoanId() != null) && (!vo.getLoanId().equalsIgnoreCase("")))
      {
        bufInsUpdSql1.append(new StringBuilder().append("insert into ").append(table).append("(LOAN_ID,ASSETID,REC_STATUS,MAKER_ID,MAKER_DATE)").toString());
        bufInsUpdSql1.append("values(");
        bufInsUpdSql1.append(" ?,");
        bufInsUpdSql1.append(" ?,");
        bufInsUpdSql1.append(" ?,");
        bufInsUpdSql1.append(" ?,");
        bufInsUpdSql1.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) ) ").toString());

        if (CommonFunction.checkNull(vo.getLoanId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject1.addNull();
        else {
          insertPrepStmtObject1.addString(vo.getLoanId().trim());
        }
        if (CommonFunction.checkNull(Integer.valueOf(maxId)).trim().equalsIgnoreCase(""))
          insertPrepStmtObject1.addNull();
        else {
          insertPrepStmtObject1.addString(new StringBuilder().append("").append(maxId).toString().trim());
        }
        insertPrepStmtObject1.addString("P");
        if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject1.addNull();
        else {
          insertPrepStmtObject1.addString(vo.getUserId().trim());
        }
        if (CommonFunction.checkNull(vo.getMakerDate().trim()).equalsIgnoreCase(""))
          insertPrepStmtObject1.addNull();
        else {
          insertPrepStmtObject1.addString(vo.getMakerDate().trim());
        }
        insertPrepStmtObject1.setSql(bufInsUpdSql1.toString());

        logger.info(new StringBuilder().append("IN In CM insert query1 into cr_loan_collateral_m  ### ").append(insertPrepStmtObject1.printQuery()).toString());
        this.qryList1.add(insertPrepStmtObject1);
        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList1);
        logger.info(new StringBuilder().append("In MAchinery......................").append(status).toString());

        if (CommonFunction.checkNull(vo.getSource()).trim().equalsIgnoreCase("ED"))
        {
          String q1 = new StringBuilder().append("select EDIT_REFRESH_FLAG from cr_loan_dtl where loan_id=").append(vo.getLoanId()).toString();
          String refresh = ConnectionDAO.singleReturn(q1);
          if (CommonFunction.checkNull(refresh).trim().equalsIgnoreCase(""))
            refresh = "   ";
          String ref = new StringBuilder().append("YN").append(refresh.charAt(2)).toString();
          ArrayList queryList = new ArrayList();
          StringBuffer insert = new StringBuffer();
          insert.append(new StringBuilder().append("INSERT INTO cr_asset_collateral_m_edit SELECT * FROM cr_asset_collateral_m WHERE ASSET_ID=").append(maxId).toString());
          PrepStmtObject stmt = new PrepStmtObject();
          stmt.setSql(insert.toString());
          queryList.add(stmt);
          StringBuffer updatLoan = new StringBuffer();
          updatLoan.append(new StringBuilder().append("update cr_loan_dtl set EDIT_REFRESH_FLAG='").append(ref).append("' where loan_id=").append(vo.getLoanId()).toString());
          PrepStmtObject prepStmt = new PrepStmtObject();
          prepStmt.setSql(updatLoan.toString());
          queryList.add(prepStmt);
          status = ConnectionDAO.sqlInsUpdDeletePrepStmt(queryList);
        }

      }
      else
      {
        bufInsUpdSql1.append("insert into cr_deal_collateral_m(DEAL_ID,ASSETID,REC_STATUS,MAKER_ID,MAKER_DATE)");
        bufInsUpdSql1.append("values(");
        bufInsUpdSql1.append(" ?,");
        bufInsUpdSql1.append(" ?,");
        bufInsUpdSql1.append(" ?,");
        bufInsUpdSql1.append(" ?,");
        bufInsUpdSql1.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) ) ").toString());

        if (CommonFunction.checkNull(vo.getDealId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject1.addNull();
        else {
          insertPrepStmtObject1.addString(vo.getDealId().trim());
        }

        if (CommonFunction.checkNull(Integer.valueOf(maxId)).trim().equalsIgnoreCase(""))
          insertPrepStmtObject1.addNull();
        else {
          insertPrepStmtObject1.addString(new StringBuilder().append("").append(maxId).toString().trim());
        }
        insertPrepStmtObject1.addString("P");
        if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject1.addNull();
        else {
          insertPrepStmtObject1.addString(vo.getUserId().trim());
        }
        if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject1.addNull();
        else {
          insertPrepStmtObject1.addString(vo.getMakerDate().trim());
        }
        insertPrepStmtObject1.setSql(bufInsUpdSql1.toString());

        logger.info(new StringBuilder().append("IN credit processing insert cr_deal_collateral_m query1 ### ").append(insertPrepStmtObject1.printQuery()).toString());
        this.qryList1.add(insertPrepStmtObject1);
        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList1);
        logger.info(new StringBuilder().append("In MAchinery......................").append(status).toString());
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      vo = null;
      bufInsUpdSql = null;
      bufInsUpdSql1 = null;
      standard = null;
    }
    return status;
  }

  public ArrayList<Object> getCollateralDetailsAll(String dealId)
  {
    CollateralVo vo = null;
    ArrayList list = new ArrayList();
    try
    {
      logger.info(new StringBuilder().append("Value of Assets Id in dao is....................").append(dealId).toString());
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT c.ASSET_ID,if(ASSET_COLLATERAL_CLASS='INVOICE','INVOICE',if(ASSET_COLLATERAL_CLASS='GOLD',(select description from generic_master where value=c.ornament_type),c.ASSET_COLLATERAL_DESC)),sum(if(ASSET_COLLATERAL_CLASS='INVOICE',ifnull(e.INVOICE_AMT,0),c.ASSET_COLLATERAL_VALUE))ASSETCOLLATERALVALUE,c.ASSET_TYPE, ASSET_COLLATERAL_CLASS from cr_asset_collateral_m c left join cr_deal_collateral_m d on c.ASSET_ID=d.ASSETID left join cr_asset_invoice_dtl e on e.ASSET_ID=c.ASSET_ID where d.DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("'group by c.asset_id").toString());

      logger.info(new StringBuilder().append("query").append(query).toString());
      ArrayList bdetails = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("CollateralDetailsAll").append(bdetails.size()).toString());

      query = null;
      for (int i = 0; i < bdetails.size(); i++)
      {
        ArrayList bdetails1 = (ArrayList)bdetails.get(i);
        if (bdetails1.size() > 0)
        {
          vo = new CollateralVo();
          vo.setAssetsId(CommonFunction.checkNull(bdetails1.get(0)).trim());
          vo.setAssetsCollateralDesc(CommonFunction.checkNull(bdetails1.get(1)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(2)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(2)).trim());
            vo.setAssetsCollateralValue(this.myFormatter.format(reconNum));
          }

          vo.setColltype2(CommonFunction.checkNull(bdetails1.get(3)).trim());
          vo.setColltype1(CommonFunction.checkNull(bdetails1.get(4)).trim());
        }

        list.add(vo);
      }

      logger.info(new StringBuilder().append("list").append(list.size()).toString());
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      vo = null;
      dealId = null;
    }

    return list;
  }

  public ArrayList<Object> fetchCollateralDetailsAll(String primaryId, String propValue, String source)
  {
    logger.info("in fetchCollateralDetailsAll()");
    CollateralVo vo = null;

    ArrayList list = new ArrayList();
    String table = "cr_asset_collateral_m";
    if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
      table = "cr_asset_collateral_m_edit";
    try
    {
      logger.info(new StringBuilder().append("Value of Assets Id in dao is....................").append(primaryId).toString());
      logger.info(new StringBuilder().append("Value of Property in dao is....................").append(propValue).toString());
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("Select c.ASSET_ID, c.ASSET_TYPE, c.ASSET_NEW_OLD, c.ASSET_COLLATERAL_DESC, c.ASSET_COLLATERAL_VALUE,  c.COLLATERAL_SECURITY_MARGIN, c.FD_AMOUNT, c.FD_TENURE, c.FD_RATE,DATE_FORMAT(c.FD_BOOK_DATE,'").append(this.dateFormat).append("'), DATE_FORMAT(c.FD_MATURITY_DATE,'").append(this.dateFormat).append("'), c.FD_AGENCY_NAME, ").append(" c.FD_AGENCY_RATING, c.FD_APPLICANT, c.SBLC_AMOUNT, DATE_FORMAT(c.SBLC_VALIDITY,'").append(this.dateFormat).append("'), DATE_FORMAT(c.SBLC_ISSUING_DATE,'").append(this.dateFormat).append("'), c.SBLC_PARENT_COMPANY, ").append(" c.SECURITY_TYPE, c.SECURITY_CATEGORY, c.SECURITY_MARKET_VALUE, c.MACHINE_MAKE, c.MACHINE_MODEL, c.MACHINE_TYPE, ").append(" c.MACHINE_OWNER, DATE_FORMAT(c.MACHINE_MANUFACTURING_YEAR,'").append(this.dateFormat).append("'), c.MACHINE_IDENTIFICATION_NO, c.ASSET_SUPPLIER, c.MACHINE_COLLATERAL_COST, ").append(" c.MACHINE_MARGIN, c.PROPERTY_TYPE, c.PROPERTY_ADDRESS, c.PROPERTY_AREA, c.PROPERTY_CONSTRUCTION,c.PROPERTY_OWNER,c.MORTAGE_TYPE, ").append(" c.VEHICLE_MAKE, c.VEHICLE_MODEL, c.VEHICLE_TYPE, c.VEHICLE_OWNER, c.VEHICLE_MANUFACTURING_YEAR, ").append(" c.VEHICLE_REGISTRATION_NO, DATE_FORMAT(c.VEHICLE_REGISTRATION_DATE,'").append(this.dateFormat).append("'), c.VEHICLE_CHASIS_NUMBER, c.VEHICLE_Insurer, DATE_FORMAT(c.VEHICLE_INSURED_DATE,'").append(this.dateFormat).append("'), ").append(" c.VEHICLE_COLLATERAL_COST, c.VEHICLE_MARGIN, c.STOCK_TYPE, c.STOCK_NATURE, c.STOCK_GODOWN_ADDRESS, ").append(" c.STOCK_INVENTORY_CYCLE, c.DEBTOR_TYPE, c.DEBTOR_TOTAL_OUTSTANDING,c.ASSET_COLLATERAL_CLASS, c.BG_TYPE,DATE_FORMAT(c.BG_ISSUE_DATE,'").append(this.dateFormat).append("'), DATE_FORMAT(c.BG_VALIDITY_DATE,'").append(this.dateFormat).append("'), BG_ISSUING_BANK ,ds.DEALER_DESC,c.ASSET_MANUFATURER,c.ASSET_MANUFATURER_DESC,c.ASSET_SUPPLIER_DESC,DATE_FORMAT(c.INVOICE_DATE,'").append(this.dateFormat).append("'),").append("c.MACHINE_VALUE,c.MACHINE_DISCOUNT,C.VEHICLE_VALUE,C.VEHICLE_DISCOUNT ,c.LOAN_AMOUNT,c.SECURITY,c.VEHICLE_ASSET_STATE,st.STATE_DESC,c.VEHICLE_ASSET_USES_TYPE,c.DEFAULT_LTV, ").append("c.VILLAGE_NAME_LANDMARK,c.BUILT_UP_AREA,c.TXN_VALUE,c.TECH_VERIFICATION,c.DOCUMENT_VALUE,c.ADDITIONAL_CONSTRUCTION,c.ASSET_LEVEL,").append("c.ADDRESS_LINE2,c.ADDRESS_LINE3,ccm.COUNTRY_DESC,csm.STATE_DESC,cdm.DISTRICT_DESC,c.TEHSIL,c.PINCODE,c.COUNTRY,c.STATE,c.DISTRICT,c.ASSET_STANDARD,c.LAWYER_NAME,c.VALUER_NAME,c.PROPERTY_DIRECTION,c.ENGINE_NUMBER,c.PROPERTY_STATUS,c.PROPERTY_TITLE,c.CARPET_AREA,c.TECHNICAL_VAL1,c.TECHNICAL_VAL2,c.BUILDUPAREASQMTR,c.ISSUEING_BANK_ID,(SELECT BANK_NAME FROM com_bank_m where BANK_ID=c.ISSUEING_BANK_ID)BANK_NAME,c.ISSUEING_BRANCH_ID").append("  ,(SELECT BANK_BRANCH_NAME FROM com_bankbranch_m where BANK_BRANCH_ID=c.ISSUEING_BRANCH_ID)BRANCHNAME,c.SUPER_BUILDUP_AREA,c.PROPERTY_OWNER_GCD_ID,C.VALUATION_METHOD_ID,(SELECT  DESCRIPTION FROM GENERIC_MASTER WHERE GENERIC_KEY='VALUATION_METHOD' AND VALUE=C.VALUATION_METHOD_ID )AS VALUATION_DESC,C.VALUATION_AMOUNT,C.INSURANCE_POLICY_NO,C.INSURANCE_PREMIUM_AMOUNT,DATE_FORMAT(C.INSURANCE_POLICY_START_DATE,'").append(this.dateFormat).append("'),DATE_FORMAT(C.INSURANCE_MATURITY_DATE,'").append(this.dateFormat).append("'),C.INSURANCE_PREMIUM_FREQUENCY,C.INSURANCE_NOMINEE,C.INSURANCE_RELATION_WITH_NOMINEE,C.INSURANCE_TENURE,").append("C.INSURANCE_AGENCY,(select AGENCY_NAME from com_agency_m where agency_type='INS' and REC_STATUS='A' AND agency_code=C.INSURANCE_AGENCY)INSURANCE_AGENCY_NAME,C.COVER_NOTE,C.SUM_ASSURED,C.VEHICLE_IDV,C.VEHICLE_VALUATION_AMOUNT,C.VEHICLE_GRID_VALUE,C.INVOICE_NO,DATE_FORMAT(C.VECHICLE_INVOICE_DATE,'%d-%m-%Y'),C.RC_RECEIVED,DATE_FORMAT(C.RC_RECEIVED_DATE,'%d-%m-%Y'),C.PROPERTY_TOTAL_AREA,c.MAKE_MODEL_ID,C.DEALER_EXECUTIVE_ID,C.DEALER_MANAGER_ID,E.EMPLOYEE_NAME,M.EMPLOYEE_NAME,C.VAT_PERCENT,C.VAT_AMOUNT, ").append("c.ORNAMENT_TYPE,c.ORNAMENT_STANDARD,c.ORNAMENT_RATE,c.ORNAMENT_LTV,c.ORNAMENT_GROSS_WEIGHT,c.ORNAMENT_DEDUCTION,c.ORNAMENT_NET_WEIGHT,c.ORNAMENT_LOAN_AMOUNT,c.ORNAMENT_VALUE_NET,c.ORNAMENT_PRIMARY_EVALUATER,c.ORNAMENT_QUANTITY ,if(ASSET_COLLATERAL_CLASS='GOLD',(select description from generic_master where value=c.ornament_type),c.ASSET_COLLATERAL_DESC) as ORNAMENT_TYPE_desc, ").append(" c.LAWYER_NAME2,c.VALUER_NAME2,c.LAWYER_NAME3,c.VALUER_NAME3,c.AMOUNT_FUNDED,c.TOTAL_AMOUNT_FUNDED,c.Sibdi ").append(" from ").append(table).append(" c ").append("left join cr_dsa_dealer_m ds on c.ASSET_SUPPLIER=ds.DEALER_ID left join com_state_m st on c.VEHICLE_ASSET_STATE=st.STATE_ID ").append(" left join com_country_m ccm on c.COUNTRY=ccm.COUNTRY_ID left join com_state_m csm on c.STATE=csm.STATE_ID left join com_district_m cdm on c.DISTRICT=cdm.DISTRICT_ID ").append(" left join COM_BP_EMPLOYEE_M E ON E.BP_EMP_ID=C.DEALER_EXECUTIVE_ID ").append(" left join COM_BP_EMPLOYEE_M M ON M.BP_EMP_ID=C.DEALER_MANAGER_ID ").append(" where c.ASSET_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(primaryId)).trim()).append(" and c.ASSET_COLLATERAL_CLASS='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(propValue)).trim()).append("' limit 1").toString());

      logger.info(new StringBuilder().append("in fetchCollateralDetailsAll()   Query  :  ").append(query).toString());
      ArrayList bdetails = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("CollateralDetailsFetchAll").append(bdetails.size()).toString());

      query = null;
      int size = bdetails.size();
      for (int i = 0; i < bdetails.size(); i++)
      {
        ArrayList bdetails1 = (ArrayList)bdetails.get(i);
        if (bdetails1.size() > 0)
        {
          vo = new CollateralVo();
          vo.setAssetsId(CommonFunction.checkNull(bdetails1.get(0)).trim());
          vo.setColltype2(CommonFunction.checkNull(bdetails1.get(1)).trim());
          vo.setAssetNature(CommonFunction.checkNull(bdetails1.get(2)).trim());
          vo.setAssetsCollateralDesc(CommonFunction.checkNull(bdetails1.get(3)).trim());

          if (!CommonFunction.checkNull(bdetails1.get(4)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(4)).trim());
            vo.setAssetsCollateralValue(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(bdetails1.get(5)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(5)).trim());
            vo.setCollateralSecurityMargin(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(bdetails1.get(6)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(6)).trim());
            vo.setFdAmount(this.myFormatter.format(reconNum));
          }

          vo.setFdTenure(CommonFunction.checkNull(bdetails1.get(7)).trim());

          if (!CommonFunction.checkNull(bdetails1.get(8)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(8)).trim());
            vo.setFdRate(this.myFormatter.format(reconNum));
          }

          vo.setFdBookDate(CommonFunction.checkNull(bdetails1.get(9)).trim());
          vo.setFdMatureDate(CommonFunction.checkNull(bdetails1.get(10)).trim());
          vo.setFdAgencyName(CommonFunction.checkNull(bdetails1.get(11)).trim());
          vo.setFdAgencyRating(CommonFunction.checkNull(bdetails1.get(12)).trim());
          vo.setFdApplicants(CommonFunction.checkNull(bdetails1.get(13)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(14)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(14)).trim());
            vo.setSblcAmount(this.myFormatter.format(reconNum));
          }

          vo.setSblcValidity(CommonFunction.checkNull(bdetails1.get(15)).trim());
          vo.setSblcIssuingDate(CommonFunction.checkNull(bdetails1.get(16)).trim());
          vo.setSblcParentCompany(CommonFunction.checkNull(bdetails1.get(17)).trim());
          vo.setSecurityType(CommonFunction.checkNull(bdetails1.get(18)).trim());
          vo.setSecurityCategory(CommonFunction.checkNull(bdetails1.get(19)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(20)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(20)).trim());
            vo.setSecurityMarketValue(this.myFormatter.format(reconNum));
          }

          vo.setMachineMake(CommonFunction.checkNull(bdetails1.get(21)).trim());
          vo.setMachineModel(CommonFunction.checkNull(bdetails1.get(22)).trim());
          vo.setMachineType(CommonFunction.checkNull(bdetails1.get(23)).trim());
          vo.setMachineOwner(CommonFunction.checkNull(bdetails1.get(24)).trim());
          vo.setMachineYearOfManufact(CommonFunction.checkNull(bdetails1.get(25)).trim());
          vo.setMachineIdNo(CommonFunction.checkNull(bdetails1.get(26)).trim());
          vo.setLbxmachineSupplier(CommonFunction.checkNull(bdetails1.get(27)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(28)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(28)).trim());
            vo.setMachineCollateralCost(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(bdetails1.get(29)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(29)).trim());
            vo.setMachineMargin(this.myFormatter.format(reconNum));
          }

          vo.setPropertyType(CommonFunction.checkNull(bdetails1.get(30)).trim());
          vo.setPropertyAddress(CommonFunction.checkNull(bdetails1.get(31)).trim());
          vo.setPropertyArea(CommonFunction.checkNull(bdetails1.get(32)).trim());
          vo.setPropertyConstruct(CommonFunction.checkNull(bdetails1.get(33)).trim());
          vo.setPropertyOwner(CommonFunction.checkNull(bdetails1.get(34)).trim());
          vo.setMortgage(CommonFunction.checkNull(bdetails1.get(35)).trim());
          vo.setVehicleMake(CommonFunction.checkNull(bdetails1.get(36)).trim());
          vo.setVehicleModel(CommonFunction.checkNull(bdetails1.get(37)).trim());
          vo.setVehicleType(CommonFunction.checkNull(bdetails1.get(38)).trim());
          vo.setVehicleOwner(CommonFunction.checkNull(bdetails1.get(39)).trim());
          vo.setVehicleYearOfManufact(CommonFunction.checkNull(bdetails1.get(40)).trim());
          vo.setVehicleRegNo(CommonFunction.checkNull(bdetails1.get(41)).trim());
          vo.setVehicleRegDate(CommonFunction.checkNull(bdetails1.get(42)).trim());
          vo.setVehicleChesisNo(CommonFunction.checkNull(bdetails1.get(43)).trim());
          vo.setVehicleInsurer(CommonFunction.checkNull(bdetails1.get(44)).trim());
          vo.setVehicleInsureDate(CommonFunction.checkNull(bdetails1.get(45)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(46)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(46)).trim());
            vo.setVehicleCollateralCost(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(bdetails1.get(47)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(47)).trim());
            vo.setVehicleMargin(this.myFormatter.format(reconNum));
          }

          vo.setStockType(CommonFunction.checkNull(bdetails1.get(48)).trim());
          vo.setStockNature(CommonFunction.checkNull(bdetails1.get(49)).trim());
          vo.setStockAddress(CommonFunction.checkNull(bdetails1.get(50)).trim());
          vo.setStockCycle(CommonFunction.checkNull(bdetails1.get(51)).trim());
          vo.setDebtorType(CommonFunction.checkNull(bdetails1.get(52)).trim());
          vo.setDebtorTotal(CommonFunction.checkNull(bdetails1.get(53)).trim());
          vo.setColltype1(CommonFunction.checkNull(bdetails1.get(54)).trim());
          vo.setBgType(CommonFunction.checkNull(bdetails1.get(55)).trim());
          vo.setBgInDate(CommonFunction.checkNull(bdetails1.get(56)).trim());
          vo.setBgValidity(CommonFunction.checkNull(bdetails1.get(57)).trim());

          vo.setBgIssuing(CommonFunction.checkNull(bdetails1.get(58)).trim());

          vo.setMachineSupplier(CommonFunction.checkNull(bdetails1.get(59)).toString());

          vo.setLbxmachineManufact(CommonFunction.checkNull(bdetails1.get(60)).trim());

          if (CommonFunction.checkNull(propValue).equalsIgnoreCase("vehicle"))
          {
            vo.setAssetManufact(CommonFunction.checkNull(bdetails1.get(61)).trim());
          }
          else
          {
            vo.setAssetManufactDesc(CommonFunction.checkNull(bdetails1.get(61)).trim());
          }

          vo.setSupplierDesc(CommonFunction.checkNull(bdetails1.get(62)).trim());

          vo.setInvoiceDate(CommonFunction.checkNull(bdetails1.get(63)).trim());

          if (!CommonFunction.checkNull(bdetails1.get(64)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(64)).trim());
            vo.setAssetsCost(this.myFormatter.format(reconNum));
          }
          else
          {
            vo.setAssetsCost("0.00");
          }

          if (!CommonFunction.checkNull(bdetails1.get(65)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(65)).trim());
            vo.setAssetsDiscount(this.myFormatter.format(reconNum));
          }
          else
          {
            vo.setAssetsDiscount("0.00");
          }

          if (!CommonFunction.checkNull(bdetails1.get(66)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(66)).trim());
            vo.setVehicleCost(this.myFormatter.format(reconNum));
          }
          else
          {
            vo.setVehicleCost("0.00");
          }

          if (!CommonFunction.checkNull(bdetails1.get(67)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(67)).trim());
            vo.setVehicleDiscount(this.myFormatter.format(reconNum));
          }
          else
          {
            vo.setVehicleDiscount("0.00");
          }
          if (!CommonFunction.checkNull(bdetails1.get(68)).equalsIgnoreCase(""))
          {
            Number reconNum1 = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(68)).trim());
            vo.setLoanAmount(this.myFormatter.format(reconNum1));
          }
          else
          {
            vo.setLoanAmount("0.00");
          }
          vo.setSecurityTypes(CommonFunction.checkNull(bdetails1.get(69)).trim());

          vo.setTxtStateCode(CommonFunction.checkNull(bdetails1.get(70)).trim());
          vo.setAssetState(CommonFunction.checkNull(bdetails1.get(71)).trim());

          vo.setUsageType(CommonFunction.checkNull(bdetails1.get(72)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(73)).equalsIgnoreCase(""))
          {
            Number reconNum1 = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(73)).trim());
            vo.setCollateralSecurityMarginDF(this.myFormatter.format(reconNum1));
          }

          vo.setVillageLandmark(CommonFunction.checkNull(bdetails1.get(74)).trim());
          vo.setBuildUpArea(CommonFunction.checkNull(bdetails1.get(75)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(76)).trim().equalsIgnoreCase(""))
          {
            Number num = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(76)).trim());
            vo.setTxnValue(this.myFormatter.format(num));
          }
          if (!CommonFunction.checkNull(bdetails1.get(77)).trim().equalsIgnoreCase(""))
          {
            Number num = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(77)).trim());
            vo.setTechValuation(this.myFormatter.format(num));
          }
          if (!CommonFunction.checkNull(bdetails1.get(78)).trim().equalsIgnoreCase(""))
          {
            Number num = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(78)).trim());
            vo.setDocValue(this.myFormatter.format(num));
          }
          if (!CommonFunction.checkNull(bdetails1.get(79)).trim().equalsIgnoreCase(""))
          {
            Number num = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(79)).trim());
            vo.setAddConstruction(this.myFormatter.format(num));
          }
          vo.setAssetLevel(CommonFunction.checkNull(bdetails1.get(80)).trim());
          vo.setAddr2(CommonFunction.checkNull(bdetails1.get(81)).trim());
          vo.setAddr3(CommonFunction.checkNull(bdetails1.get(82)).trim());
          vo.setCountry(CommonFunction.checkNull(bdetails1.get(83)).trim());
          vo.setState(CommonFunction.checkNull(bdetails1.get(84)).trim());
          vo.setDist(CommonFunction.checkNull(bdetails1.get(85)).trim());
          vo.setTahsil(CommonFunction.checkNull(bdetails1.get(86)).trim());
          vo.setPincode(CommonFunction.checkNull(bdetails1.get(87)).trim());
          vo.setTxtCountryCode(CommonFunction.checkNull(bdetails1.get(88)).trim());
          vo.setTxtStateCode(CommonFunction.checkNull(bdetails1.get(89)).trim());
          vo.setTxtDistCode(CommonFunction.checkNull(bdetails1.get(90)).trim());
          vo.setAssetStandard(CommonFunction.checkNull(bdetails1.get(91)).trim());
          vo.setLawyerName(CommonFunction.checkNull(bdetails1.get(92)).trim());
          vo.setValuerName(CommonFunction.checkNull(bdetails1.get(93)).trim());
          vo.setPropertyDirection(CommonFunction.checkNull(bdetails1.get(94)).trim());
          vo.setEngineNumber(CommonFunction.checkNull(bdetails1.get(95)).trim());
          vo.setPropertyStatus(CommonFunction.checkNull(bdetails1.get(96)).trim());
          vo.setPropertyTitle(CommonFunction.checkNull(bdetails1.get(97)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(98)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(98)).trim());
            vo.setCarpetArea(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(bdetails1.get(99)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(99)).trim());
            vo.setTechnicalValuation1(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(bdetails1.get(100)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(100)).trim());
            vo.setTechnicalValuation2(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(bdetails1.get(101)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(101)).trim());
            vo.setBuildUpAreaSQMTR(this.myFormatter.format(reconNum));
          }

          vo.setLbxBankID(CommonFunction.checkNull(bdetails1.get(102)).trim());
          vo.setBank(CommonFunction.checkNull(bdetails1.get(103)).trim());
          vo.setLbxBranchID(CommonFunction.checkNull(bdetails1.get(104)).trim());
          vo.setBranch(CommonFunction.checkNull(bdetails1.get(105)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(106)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(106)).trim());
            vo.setSuperBuildUpArea(this.myFormatter.format(reconNum));
          }
          vo.setPropertyOwnerGcdId(CommonFunction.checkNull(bdetails1.get(107)).trim());
          vo.setValuationMethodId(CommonFunction.checkNull(bdetails1.get(108)).trim());
          vo.setValuationMethod(CommonFunction.checkNull(bdetails1.get(109)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(110)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(110)).trim());
            vo.setValuationAmount(this.myFormatter.format(reconNum));
          }
          vo.setPolicyNo(CommonFunction.checkNull(bdetails1.get(111)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(112)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(112)).trim());
            vo.setPremiumAmount(this.myFormatter.format(reconNum));
          }
          vo.setPolicyStartDate(CommonFunction.checkNull(bdetails1.get(113)).trim());
          vo.setInsMatureDate(CommonFunction.checkNull(bdetails1.get(114)).trim());
          vo.setPremiumFrequency(CommonFunction.checkNull(bdetails1.get(115)).trim());
          vo.setNominee(CommonFunction.checkNull(bdetails1.get(116)).trim());
          vo.setRelWithNominee(CommonFunction.checkNull(bdetails1.get(117)).trim());

          vo.setTenureYear(CommonFunction.checkNull(bdetails1.get(118)).trim());

          vo.setLbxInsuranceAgency(CommonFunction.checkNull(bdetails1.get(119)).trim());
          vo.setInsuranceAgency(CommonFunction.checkNull(bdetails1.get(120)).trim());
          vo.setCoverNoteNo(CommonFunction.checkNull(bdetails1.get(121)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(122)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(122)).trim());
            vo.setSumAssured(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(bdetails1.get(123)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(123)).trim());
            vo.setIdv(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(bdetails1.get(124)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(124)).trim());
            vo.setValuationCost(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(bdetails1.get(125)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(125)).trim());
            vo.setGridValue(this.myFormatter.format(reconNum));
          }

          vo.setInvoiceNumber(CommonFunction.checkNull(bdetails1.get(126)).trim());
          vo.setVehicleInvoiceDate(CommonFunction.checkNull(bdetails1.get(127)).trim());
          vo.setRcReceived(CommonFunction.checkNull(bdetails1.get(128)).trim());
          vo.setRcReceivedDate(CommonFunction.checkNull(bdetails1.get(129)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(130)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(130)).trim());
            vo.setTotalArea(this.myFormatter.format(reconNum));
          }
          vo.setMake_model_id(CommonFunction.checkNull(bdetails1.get(131)).trim());

          vo.setLbxDealerExecutive(CommonFunction.checkNull(bdetails1.get(132)).trim());
          vo.setLbxDealerManager(CommonFunction.checkNull(bdetails1.get(133)).trim());
          vo.setDealerExecutive(CommonFunction.checkNull(bdetails1.get(134)).trim());
          vo.setDealerManager(CommonFunction.checkNull(bdetails1.get(135)).trim());
          vo.setVatPercent(CommonFunction.checkNull(bdetails1.get(136)));
          vo.setVatAmount(CommonFunction.checkNull(bdetails1.get(137)));

          vo.setLbxOrnamentType(CommonFunction.checkNull(bdetails1.get(138)));
          vo.setOrnamentStandard(CommonFunction.checkNull(bdetails1.get(139)));
          if (!CommonFunction.checkNull(bdetails1.get(140)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(140)).trim());
            vo.setRateGoldOrnament(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(bdetails1.get(141)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(141)).trim());
            vo.setGoldOrnamentLTV(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(bdetails1.get(142)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(142)).trim());
            vo.setGrossWeight(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(bdetails1.get(143)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(143)).trim());
            vo.setDeduction(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(bdetails1.get(144)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(144)).trim());
            vo.setNetWeight(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(bdetails1.get(145)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(145)).trim());
            vo.setLoanAmountEligible(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(bdetails1.get(146)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(146)).trim());
            vo.setNetOrnamentValue(this.myFormatter.format(reconNum));
          }

          vo.setPrimaryEvaluator(CommonFunction.checkNull(bdetails1.get(147)));
          vo.setQuantity(CommonFunction.checkNull(bdetails1.get(148)));
          vo.setOrnamentType(CommonFunction.checkNull(bdetails1.get(149)));
          vo.setLawyerName2(CommonFunction.checkNull(bdetails1.get(150)));
          vo.setValuerName2(CommonFunction.checkNull(bdetails1.get(151)));
          vo.setLawyerName3(CommonFunction.checkNull(bdetails1.get(152)));
          vo.setValuerName3(CommonFunction.checkNull(bdetails1.get(153)));
          vo.setAmountFunded(CommonFunction.checkNull(bdetails1.get(154)));
          vo.setTotalAmountFunded(CommonFunction.checkNull(bdetails1.get(155)));
          if (!CommonFunction.checkNull(bdetails1.get(156)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(156)).trim());
            vo.setSibdi(this.myFormatter.format(reconNum));
          }
          logger.info(new StringBuilder().append("setMake_model_id").append(vo.getMake_model_id()).toString());
        }
        list.add(vo);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      vo = null;
      primaryId = null;

      propValue = null;
      source = null;
    }
    return list;
  }

  public boolean updateCollateralDetailsAll(Object ob, String primaryId, String assetType, String source)
  {
    CollateralVo vo = (CollateralVo)ob;
    boolean status = false;
    String standard = "";
    logger.info(new StringBuilder().append("vo.getAssetStandard:::::Update:::::::::").append(vo.getAssetStandard()).toString());

    logger.info(new StringBuilder().append("getColltype2::::::Insert::::::::").append(vo.getColltype2()).toString());

    if (vo.getColltype2().equalsIgnoreCase("ASSET")) {
      if ((vo.getAssetStandard() != null) && (vo.getAssetStandard().equals("on")))
      {
        standard = "Y";
      }
      else standard = "N";
    }
    StringBuffer bufInsUpdSql = new StringBuffer();
    logger.info(new StringBuilder().append("vo.getVehicleMargin(): ---updateCollateralDetailsAll---").append(vo.getVehicleMargin()).toString());
    if (CommonFunction.checkNull(vo.getLbxmachineSupplier()).trim().equalsIgnoreCase(""))
    {
      vo.setLbxmachineSupplier("0");
    }
    if (CommonFunction.checkNull(vo.getLbxmachineManufact()).trim().equalsIgnoreCase(""))
    {
      vo.setLbxmachineManufact("0");
    }
    if (CommonFunction.checkNull(vo.getSecurityCategory()).trim().equalsIgnoreCase(""))
    {
      vo.setSecurityCategory("");
    }
    if (CommonFunction.checkNull(vo.getCollateralSecurityMargin()).trim().equalsIgnoreCase(""))
    {
      vo.setCollateralSecurityMargin("0");
    }
    if (CommonFunction.checkNull(vo.getCollateralSecurityMarginDF()).trim().equalsIgnoreCase(""))
    {
      vo.setCollateralSecurityMarginDF("0");
    }
    if (CommonFunction.checkNull(vo.getFdAmount()).trim().equalsIgnoreCase(""))
    {
      vo.setFdAmount("0.00");
    }
    if (CommonFunction.checkNull(vo.getSblcAmount()).trim().equalsIgnoreCase(""))
    {
      vo.setSblcAmount("0.00");
    }
    if (CommonFunction.checkNull(vo.getSecurityMarketValue()).trim().equalsIgnoreCase(""))
    {
      vo.setSecurityMarketValue("0.00");
    }
    if (CommonFunction.checkNull(vo.getMachineCollateralCost()).trim().equalsIgnoreCase(""))
    {
      vo.setMachineCollateralCost("0.00");
    }
    if (CommonFunction.checkNull(vo.getAssetsCollateralValue()).trim().equalsIgnoreCase(""))
    {
      vo.setAssetsCollateralValue("0.00");
    }
    if (CommonFunction.checkNull(vo.getVehicleCollateralCost()).trim().equalsIgnoreCase(""))
    {
      vo.setVehicleCollateralCost("0.00");
    }
    if (CommonFunction.checkNull(vo.getAssetsCost()).trim().equalsIgnoreCase(""))
    {
      vo.setAssetsCost("0.00");
    }
    if (CommonFunction.checkNull(vo.getAssetsDiscount()).trim().equalsIgnoreCase(""))
    {
      vo.setAssetsDiscount("0.00");
    }
    if (CommonFunction.checkNull(vo.getVehicleCost()).trim().equalsIgnoreCase(""))
    {
      vo.setVehicleCost("0.00");
    }
    if (CommonFunction.checkNull(vo.getVehicleDiscount()).trim().equalsIgnoreCase(""))
    {
      vo.setVehicleDiscount("0.00");
    }
    this.qryList = new ArrayList();
    String table = "cr_asset_collateral_m";
    String invoiceTable = "cr_asset_invoice_dtl";
    if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
    {
      table = "cr_asset_collateral_m_edit";
      invoiceTable = "cr_asset_invoice_dtl_edit";
    }

    try
    {
      if (vo.getColltype1().trim().equalsIgnoreCase("INVOICE"))
      {
        StringBuilder query = new StringBuilder();
        query.append(new StringBuilder().append("SELECT ROUND(sum(ifnull(INVOICE_AMT,0)),2) from ").append(invoiceTable).append(" where ASSET_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(primaryId)).trim()).toString());
        String val = ConnectionDAO.singleReturn(query.toString());

        logger.info(new StringBuilder().append("val::::").append(val).toString());

        vo.setAssetsCollateralValue(val);
      }

      bufInsUpdSql.append(new StringBuilder().append("UPDATE ").append(table).append(" ").toString());
      bufInsUpdSql.append(new StringBuilder().append(" SET ASSET_TYPE=?,ASSET_NEW_OLD=?,ASSET_COLLATERAL_DESC=?,ASSET_COLLATERAL_VALUE=?,COLLATERAL_SECURITY_MARGIN=?,DEFAULT_LTV=?, FD_AMOUNT=?,FD_TENURE=?,FD_RATE=?,FD_BOOK_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),").append(" FD_MATURITY_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),FD_AGENCY_NAME=?,").append(" FD_AGENCY_RATING=?,FD_APPLICANT=?,SBLC_AMOUNT=?,SBLC_VALIDITY=STR_TO_DATE(?,'").append(this.dateFormat).append("'),").append(" SBLC_ISSUING_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),SBLC_PARENT_COMPANY=?,").append(" SECURITY_TYPE=?,SECURITY_CATEGORY=?,SECURITY_MARKET_VALUE=?,MACHINE_MAKE=?,MACHINE_MODEL=?,MACHINE_TYPE=?,").append(" MACHINE_OWNER=?,MACHINE_MANUFACTURING_YEAR=STR_TO_DATE(?,'").append(this.dateFormat).append("'),MACHINE_IDENTIFICATION_NO=?,").append(" ASSET_SUPPLIER=?,MACHINE_COLLATERAL_COST=?,MACHINE_MARGIN=?,").append(" PROPERTY_TYPE=?,PROPERTY_ADDRESS=?,PROPERTY_AREA=?,PROPERTY_CONSTRUCTION=?,PROPERY_VALUE=?,").append(" PROPERTY_OWNER=?,MORTAGE_TYPE=?,VEHICLE_MAKE=?, VEHICLE_MODEL=?,MAKE_MODEL_ID=?,VEHICLE_TYPE=?,VEHICLE_OWNER=?,").append(" VEHICLE_MANUFACTURING_YEAR=?, VEHICLE_REGISTRATION_NO=?,").append(" VEHICLE_REGISTRATION_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'), VEHICLE_CHASIS_NUMBER=?,VEHICLE_Insurer=?,").append(" VEHICLE_INSURED_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),VEHICLE_COLLATERAL_COST=?,").append(" VEHICLE_MARGIN=?,STOCK_TYPE=?, STOCK_NATURE=?,STOCK_GODOWN_ADDRESS=?,STOCK_INVENTORY_CYCLE=?,DEBTOR_TYPE=?,").append(" DEBTOR_TOTAL_OUTSTANDING=?,ASSET_COLLATERAL_CLASS=?,ASSET_MANUFATURER=?,ASSET_SUPPLIER_DESC=?,").append(" ASSET_MANUFATURER_DESC=?,BG_ISSUING_BANK=?,INVOICE_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),").append("MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").append("MACHINE_VALUE=?,MACHINE_DISCOUNT=?,VEHICLE_VALUE=?,VEHICLE_DISCOUNT=?,LOAN_AMOUNT=?,SECURITY=?,VEHICLE_ASSET_STATE=?,VEHICLE_ASSET_USES_TYPE=?,").append("ASSET_LEVEL=?,VILLAGE_NAME_LANDMARK=?,TXN_VALUE=?,TECH_VERIFICATION=?,DOCUMENT_VALUE=?,ADDITIONAL_CONSTRUCTION=?,BUILT_UP_AREA=?,").append("ADDRESS_LINE2=?,ADDRESS_LINE3=?,COUNTRY=?,STATE=?,DISTRICT=?,PINCODE=?,TEHSIL=?,ASSET_STANDARD=?,LAWYER_NAME=?,VALUER_NAME=?,PROPERTY_DIRECTION=?,ENGINE_NUMBER=?,PROPERTY_TITLE=?,PROPERTY_STATUS=?,CARPET_AREA=?,TECHNICAL_VAL1=?,TECHNICAL_VAL2=?,BUILDUPAREASQMTR=?,ISSUEING_BANK_ID=?,ISSUEING_BRANCH_ID=?,SUPER_BUILDUP_AREA=?,PROPERTY_OWNER_GCD_ID=?,VALUATION_METHOD_ID=?,VALUATION_AMOUNT=?,").append("INSURANCE_POLICY_NO=?,INSURANCE_PREMIUM_AMOUNT=?,INSURANCE_POLICY_START_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),INSURANCE_MATURITY_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),INSURANCE_PREMIUM_FREQUENCY=?,INSURANCE_NOMINEE=?,INSURANCE_RELATION_WITH_NOMINEE=?,INSURANCE_TENURE=?,INSURANCE_AGENCY=?,COVER_NOTE=?,SUM_ASSURED=?,VEHICLE_IDV=?,VEHICLE_VALUATION_AMOUNT=?,VEHICLE_GRID_VALUE=?,").append("INVOICE_NO=?,VECHICLE_INVOICE_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),RC_RECEIVED=?,RC_RECEIVED_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),PROPERTY_TOTAL_AREA=? ,DEALER_EXECUTIVE_ID=?,DEALER_MANAGER_ID=?,VAT_PERCENT=?,VAT_AMOUNT=?,service_tax=?,INVOICE_SI_RD_NAME=?, ").append("ORNAMENT_TYPE=?,ORNAMENT_STANDARD=?,ORNAMENT_RATE=?,ORNAMENT_LTV=?,ORNAMENT_GROSS_WEIGHT=?,ORNAMENT_DEDUCTION=?,ORNAMENT_NET_WEIGHT=?,ORNAMENT_LOAN_AMOUNT=?,ORNAMENT_VALUE_NET=?,ORNAMENT_PRIMARY_EVALUATER=?,ORNAMENT_QUANTITY=?,LAWYER_NAME2=?,VALUER_NAME2=?,LAWYER_NAME3=?,VALUER_NAME3=?,AMOUNT_FUNDED=?,TOTAL_AMOUNT_FUNDED=?,Sibdi=? ").toString());

      bufInsUpdSql.append(" WHERE ASSET_ID=? AND ASSET_TYPE=? ");

      PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

      if (CommonFunction.checkNull(vo.getColltype2()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getColltype2().trim());
      }
      if (CommonFunction.checkNull(vo.getAssetNature()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAssetNature().trim());
      }
      if (CommonFunction.checkNull(vo.getAssetsCollateralDesc()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAssetsCollateralDesc().trim());
      }
      if (CommonFunction.checkNull(vo.getColltype1()).trim().equalsIgnoreCase("GOLD"))
      {
        if (CommonFunction.checkNull(vo.getNetOrnamentValue()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.0000");
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getNetOrnamentValue().trim()).toString());
        }

      }
      else if (CommonFunction.checkNull(vo.getAssetsCollateralValue()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getAssetsCollateralValue().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getCollateralSecurityMargin()).trim().equalsIgnoreCase("")) {
        insertPrepStmtObject.addNull();
      }
      else
        insertPrepStmtObject.addString(vo.getCollateralSecurityMargin().trim());
      if (CommonFunction.checkNull(vo.getCollateralSecurityMarginDF()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getCollateralSecurityMarginDF().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getFdAmount()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getFdAmount().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getFdTenure()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getFdTenure().trim());
      }
      if (CommonFunction.checkNull(vo.getFdRate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getFdRate().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getFdBookDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getFdBookDate().trim());
      }
      if (CommonFunction.checkNull(vo.getFdMatureDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getFdMatureDate().trim());
      }
      if (CommonFunction.checkNull(vo.getFdAgencyName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getFdAgencyName().trim());
      }
      if (CommonFunction.checkNull(vo.getFdAgencyRating()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getFdAgencyRating().trim());
      }
      if (CommonFunction.checkNull(vo.getFdApplicants()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getFdApplicants().trim());
      }
      if (CommonFunction.checkNull(vo.getSblcAmount()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getSblcAmount().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getSblcValidity()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getSblcValidity().trim());
      }
      if (CommonFunction.checkNull(vo.getSblcIssuingDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getSblcIssuingDate().trim());
      }
      if (CommonFunction.checkNull(vo.getSblcParentCompany()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getSblcParentCompany().trim());
      }
      if (CommonFunction.checkNull(vo.getSecurityType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getSecurityType().trim());
      }
      if (CommonFunction.checkNull(vo.getSecurityCategory()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getSecurityCategory().trim());
      }
      if (CommonFunction.checkNull(vo.getSecurityMarketValue()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getSecurityMarketValue().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getMachineMake()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMachineMake().trim());
      }
      if (CommonFunction.checkNull(vo.getMachineModel()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMachineModel().trim());
      }
      if (CommonFunction.checkNull(vo.getMachineType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMachineType().trim());
      }
      if (CommonFunction.checkNull(vo.getMachineOwner()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMachineOwner().trim());
      }
      if (CommonFunction.checkNull(vo.getMachineYearOfManufact()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMachineYearOfManufact().trim());
      }
      if (CommonFunction.checkNull(vo.getMachineIdNo()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMachineIdNo().trim());
      }
      if (CommonFunction.checkNull(vo.getLbxmachineSupplier()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLbxmachineSupplier().trim());
      }
      if (CommonFunction.checkNull(vo.getMachineCollateralCost()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getMachineCollateralCost().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getMachineMargin()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getMachineMargin().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getPropertyType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPropertyType().trim());
      }
      if (CommonFunction.checkNull(vo.getPropertyAddress()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPropertyAddress().trim());
      }
      if (CommonFunction.checkNull(vo.getPropertyArea()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPropertyArea().trim());
      }
      if (CommonFunction.checkNull(vo.getPropertyConstruct()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPropertyConstruct().trim());
      }
      if (CommonFunction.checkNull(vo.getAssetsCollateralValue()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getAssetsCollateralValue().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getPropertyOwner()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPropertyOwner().trim());
      }
      if (CommonFunction.checkNull(vo.getMortgage()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getMortgage().trim());
      if (CommonFunction.checkNull(vo.getVehicleMake()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleMake().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleModel()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleModel().trim());
      }
      if (CommonFunction.checkNull(vo.getMake_model_id()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMake_model_id().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleType().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleOwner()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleOwner().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleYearOfManufact()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleYearOfManufact().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleRegNo()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleRegNo().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleRegDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleRegDate().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleChesisNo()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleChesisNo().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleInsurer()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleInsurer().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleInsureDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleInsureDate().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleCollateralCost()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getVehicleCollateralCost().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getVehicleMargin()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getVehicleMargin().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getStockType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getStockType().trim());
      }
      if (CommonFunction.checkNull(vo.getStockNature()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getStockNature().trim());
      }
      if (CommonFunction.checkNull(vo.getStockAddress()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getStockAddress().trim());
      }
      if (CommonFunction.checkNull(vo.getStockCycle()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getStockCycle().trim());
      }
      if (CommonFunction.checkNull(vo.getDebtorType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getDebtorType().trim());
      }
      if (CommonFunction.checkNull(vo.getDebtorTotal()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getDebtorTotal().trim());
      }
      if (CommonFunction.checkNull(vo.getColltype1()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getColltype1().trim());
      }
      if (CommonFunction.checkNull(vo.getLbxmachineManufact()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLbxmachineManufact().trim());
      }

      if (CommonFunction.checkNull(vo.getMachineSupplier()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMachineSupplier().trim());
      }
      if (CommonFunction.checkNull(vo.getAssetManufact()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAssetManufact().trim());
      }

      if (CommonFunction.checkNull(vo.getBgIssuing()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getBgIssuing().trim());
      }

      if (CommonFunction.checkNull(vo.getInvoiceDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getInvoiceDate().trim());
      }
      if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getUserId().trim());
      }
      if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerDate().trim());
      }
      if (CommonFunction.checkNull(vo.getAssetsCost()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.00");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getAssetsCost().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getAssetsDiscount()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.00");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getAssetsDiscount().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getVehicleCost()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.00");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getVehicleCost().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getVehicleDiscount()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.00");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getVehicleDiscount().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getLoanAmount()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getLoanAmount().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getSecurityTypes()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getSecurityTypes().trim());
      }
      if (CommonFunction.checkNull(vo.getTxtStateCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTxtStateCode().trim());
      }
      if (CommonFunction.checkNull(vo.getUsageType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getUsageType().trim());
      }

      if (CommonFunction.checkNull(vo.getAssetLevel()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getAssetLevel().trim());
      if (CommonFunction.checkNull(vo.getVillageLandmark()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getVillageLandmark().trim());
      if (CommonFunction.checkNull(vo.getTxnValue()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getTxnValue().trim()).toString());
      if (CommonFunction.checkNull(vo.getTechValuation()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getTechValuation().trim()).toString());
      if (CommonFunction.checkNull(vo.getDocValue()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getDocValue().trim()).toString());
      if (CommonFunction.checkNull(vo.getAddConstruction()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getAddConstruction().trim()).toString());
      if (CommonFunction.checkNull(vo.getBuildUpArea()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getBuildUpArea().trim());
      if (CommonFunction.checkNull(vo.getAddr2()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getAddr2().trim());
      if (CommonFunction.checkNull(vo.getAddr3()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getAddr3().trim());
      if (CommonFunction.checkNull(vo.getTxtCountryCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getTxtCountryCode().trim());
      if (CommonFunction.checkNull(vo.getTxtStateCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getTxtStateCode().trim());
      if (CommonFunction.checkNull(vo.getTxtDistCode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getTxtDistCode().trim());
      if (CommonFunction.checkNull(vo.getPincode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getPincode().trim());
      if (CommonFunction.checkNull(vo.getTahsil()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTahsil().trim());
      }

      if (CommonFunction.checkNull(standard).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(standard);
      }

      if (CommonFunction.checkNull(vo.getLawyerName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getLawyerName().trim());
      if (CommonFunction.checkNull(vo.getValuerName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getValuerName().trim());
      if (CommonFunction.checkNull(vo.getPropertyDirection()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPropertyDirection().trim());
      }

      if (CommonFunction.checkNull(vo.getEngineNumber()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getEngineNumber());
      }

      if (CommonFunction.checkNull(vo.getPropertyTitle()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPropertyTitle().trim());
      }

      if (CommonFunction.checkNull(vo.getPropertyStatus()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPropertyStatus().trim());
      }
      if (CommonFunction.checkNull(vo.getCarpetArea()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getCarpetArea().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getTechnicalValuation1()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getTechnicalValuation1().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getTechnicalValuation2()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getTechnicalValuation2().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getBuildUpAreaSQMTR()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getBuildUpAreaSQMTR().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getLbxBankID()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getLbxBankID().trim());
      if (CommonFunction.checkNull(vo.getLbxBranchID()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLbxBranchID().trim());
      }

      if (CommonFunction.checkNull(vo.getSuperBuildUpArea()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getSuperBuildUpArea().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getPropertyOwnerGcdId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getPropertyOwnerGcdId().trim());
      if (CommonFunction.checkNull(vo.getValuationMethodId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getValuationMethodId().trim());
      if (CommonFunction.checkNull(vo.getValuationAmount()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getValuationAmount().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getPolicyNo()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPolicyNo().trim());
      }

      if (CommonFunction.checkNull(vo.getPremiumAmount()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getPremiumAmount().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getPolicyStartDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPolicyStartDate().trim());
      }

      if (CommonFunction.checkNull(vo.getInsMatureDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getInsMatureDate().trim());
      }
      if (CommonFunction.checkNull(vo.getPremiumFrequency()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPremiumFrequency().trim());
      }
      if (CommonFunction.checkNull(vo.getNominee()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getNominee().trim());
      }
      if (CommonFunction.checkNull(vo.getRelWithNominee()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getRelWithNominee().trim());
      }
      if (CommonFunction.checkNull(vo.getTenureYear()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTenureYear().trim());
      }
      if (CommonFunction.checkNull(vo.getLbxInsuranceAgency()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLbxInsuranceAgency().trim());
      }
      if (CommonFunction.checkNull(vo.getCoverNoteNo()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getCoverNoteNo().trim());
      }
      if (CommonFunction.checkNull(vo.getSumAssured()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getSumAssured().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getIdv()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getIdv().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getValuationCost()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getValuationCost().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getGridValue()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getGridValue().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getInvoiceNumber()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getInvoiceNumber().trim());
      }
      if (CommonFunction.checkNull(vo.getVehicleInvoiceDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getVehicleInvoiceDate().trim());
      }
      if (CommonFunction.checkNull(vo.getRcReceived()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getRcReceived().trim());
      }
      if (CommonFunction.checkNull(vo.getRcReceivedDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getRcReceivedDate().trim());
      }

      if (CommonFunction.checkNull(vo.getTotalArea()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getTotalArea().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getLbxDealerExecutive()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getLbxDealerExecutive()));
      }
      if (CommonFunction.checkNull(vo.getLbxDealerManager()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getLbxDealerManager()));
      }

      if (CommonFunction.checkNull(CommonFunction.checkNull(vo.getVatPercent())).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getVatPercent()));
      }
      if (CommonFunction.checkNull(CommonFunction.checkNull(vo.getVatAmount())).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getVatAmount()).trim());
      if (CommonFunction.checkNull(CommonFunction.checkNull(vo.getServiceTax())).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getServiceTax()).trim());
      }
      if (CommonFunction.checkNull(vo.getSiRdName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getSiRdName()));
      }

      if (CommonFunction.checkNull(vo.getOrnamentType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getOrnamentType()));
      }
      if (CommonFunction.checkNull(vo.getOrnamentStandard()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getOrnamentStandard()));
      }
      if (CommonFunction.checkNull(vo.getRateGoldOrnament()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getRateGoldOrnament().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getGoldOrnamentLTV()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getGoldOrnamentLTV().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getGrossWeight()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getGrossWeight().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getDeduction()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getDeduction().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getNetWeight()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getNetWeight().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getLoanAmountEligible()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getLoanAmountEligible().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getNetOrnamentValue()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0.0000");
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getNetOrnamentValue().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getPrimaryEvaluator()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getPrimaryEvaluator()));
      }
      if (CommonFunction.checkNull(vo.getQuantity()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getQuantity().trim()).toString());
      }
      if (CommonFunction.checkNull(vo.getLawyerName2()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLawyerName2().trim());
      }
      if (CommonFunction.checkNull(vo.getValuerName2()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getValuerName2().trim());
      }

      if (CommonFunction.checkNull(vo.getLawyerName3()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLawyerName3().trim());
      }
      if (CommonFunction.checkNull(vo.getValuerName3()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getValuerName3().trim());
      }
      if (CommonFunction.checkNull(vo.getAmountFunded()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAmountFunded().trim());
      }
      if (CommonFunction.checkNull(vo.getTotalAmountFunded()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getTotalAmountFunded().trim());
      }
      if (CommonFunction.checkNull(vo.getSibdi()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.0000");
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(vo.getSibdi().trim()).toString());
        }
      if (CommonFunction.checkNull(primaryId).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(primaryId.trim());
      }
      if (CommonFunction.checkNull(assetType).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(assetType.trim());
      }

      insertPrepStmtObject.setSql(bufInsUpdSql.toString());
      logger.info(new StringBuilder().append("IN Deal cr_asset_collateral_m UPDATE query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      this.qryList.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
      logger.info(new StringBuilder().append("In UPDATE STATUS IS=......................").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      bufInsUpdSql = null;
      standard = null;
      vo = null;
      ob = null;
      primaryId = null;
      assetType = null;
      source = null;
    }

    return status;
  }

  public boolean deleteCollateralDetails(String assetId, String type, String source)
  {
    boolean status = false;
    try
    {
      this.qryList = new ArrayList();
      this.bufInsUpdSql = new StringBuffer();
      this.delPrepStmtObject = new PrepStmtObject();

      String tblName = "";

      if (type.equalsIgnoreCase("D"))
      {
        tblName = "cr_deal_collateral_m";
      }

      if (type.equalsIgnoreCase("L"))
      {
        tblName = "cr_loan_collateral_m";

        if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
          tblName = "cr_loan_collateral_m_edit";
      }
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("Delete from ").append(tblName).append(" where ASSETID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(assetId)).trim()).append("' ").toString());
      logger.info(new StringBuilder().append("query").append(query).toString());
      this.delPrepStmtObject.setSql(query.toString());
      this.qryList.add(this.delPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
      logger.info(new StringBuilder().append("Status of Deletion is & forwarding into action class =").append(status).toString());
      query = null;
      tblName = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return status;
  }

  public boolean saveDocument(Object ob, String source)
  {
    DocumentsVo vo = (DocumentsVo)ob;
    logger.info(new StringBuilder().append("In saveDocument....saveDocument...Update mod").append(vo.getChildId()).toString());
    String[] dId = vo.getDocumentId();
    String[] dstatus = vo.getStatus();
    String[] dvDocType = vo.getvDocType();
    String[] drec = vo.getRecievedDate();
    String[] ddef = vo.getDeferedDate();
    String[] expDate = vo.getExpiryDate();
    String[] dremark = vo.getRemarks();
    String[] chId = vo.getChildId();
    String[] chk = vo.getChk();
    logger.info(new StringBuilder().append("Child Id:").append(vo.getChildId()).toString());
    this.qryList = new ArrayList();
    boolean status = false;

    String table = "cr_document_dtl";
    if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
      table = "cr_document_dtl_edit";
    for (int k = 0; k < vo.getDocumentId().length; k++)
    {
      logger.info(new StringBuilder().append("Doc Id in saveDocument: ").append(dId[k]).toString());
      PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append(new StringBuilder().append("update ").append(table).append(" set DOC_STATUS=?, ").toString());
      bufInsSql.append(new StringBuilder().append(" DOC_RECEIVED_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'), ").toString());
      bufInsSql.append(new StringBuilder().append(" DOC_DEFFRED_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),DOC_EXPIRY_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'), ").toString());
      bufInsSql.append(new StringBuilder().append(" DOC_REMARKS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),DOC_CHILD_IDS=?,DOCUMENT_TYPE=?").toString());
      bufInsSql.append(" where TXN_DOC_ID=?");

      if (CommonFunction.checkNull(dstatus[k]).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(dstatus[k].trim());
      try
      {
        if (CommonFunction.checkNull(drec[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(drec[k].trim());
      }
      catch (ArrayIndexOutOfBoundsException aie) {
        insertPrepStmtObject.addNull();
      }
      try {
        if (CommonFunction.checkNull(ddef[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(ddef[k].trim());
      }
      catch (ArrayIndexOutOfBoundsException aie) {
        insertPrepStmtObject.addNull();
      }
      if (CommonFunction.checkNull(expDate[k]).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(expDate[k].trim());
      if (CommonFunction.checkNull(dremark[k]).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(dremark[k].trim());
      if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getUserId().trim());
      }
      if (CommonFunction.checkNull(vo.getBussinessDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getBussinessDate().trim());
      }
      if (chId == null)
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(chId[k].trim());
      }

      if (CommonFunction.checkNull(dvDocType[k]).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(dvDocType[k].trim());
      }
      if (CommonFunction.checkNull(dId[k]).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(dId[k].trim());
      }

      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN saveDocument() UPDATE query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      this.qryList.add(insertPrepStmtObject);

      bufInsSql = null;
    }

    logger.info(new StringBuilder().append("chk.length: ").append(chk.length).toString());
    StringBuffer bufInsSql2 = new StringBuffer();
    bufInsSql2.append(new StringBuilder().append("select count(1) from ").append(table).append(" where txn_type='").append(CommonFunction.checkNull(vo.getTxnType()).trim()).append("'").append(" and txnid='").append(CommonFunction.checkNull(vo.getTxnId().trim())).append("' ").append(" and stage_id='").append(CommonFunction.checkNull(vo.getStageId().trim())).append("' ").append(" and doc_type='").append(CommonFunction.checkNull(vo.getDocType().trim())).append("' ").append(" and doc_id is null ").toString());

    String countStr = ConnectionDAO.singleReturn(bufInsSql2.toString());
    logger.info(new StringBuilder().append("Count before delete: ").append(countStr).toString());

    StringBuffer bufInsSql1 = new StringBuffer();
    PrepStmtObject insertPrepStmtObject1 = new PrepStmtObject();
    if (Integer.parseInt(CommonFunction.checkNull(countStr)) > 0) {
      bufInsSql1.append(new StringBuilder().append("delete from ").append(table).append(" where txn_type='").append(CommonFunction.checkNull(vo.getTxnType()).trim()).append("'").append(" and txnid='").append(CommonFunction.checkNull(vo.getTxnId().trim())).append("' ").append(" and stage_id='").append(CommonFunction.checkNull(vo.getStageId().trim())).append("' ").append(" and doc_type='").append(CommonFunction.checkNull(vo.getDocType().trim())).append("' ").append(" and doc_id is null ").toString());

      insertPrepStmtObject1.setSql(bufInsSql1.toString());
      logger.info(new StringBuilder().append("IN SaveDocument() delete query1 ### ").append(insertPrepStmtObject1.printQuery()).toString());
      this.qryList.add(insertPrepStmtObject1);
    }
    try
    {
      if (this.qryList.size() > 0)
        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
      else
        status = true;
    } catch (Exception e) {
      e.printStackTrace();
    }
    logger.info(new StringBuilder().append("In SaveDocument saving Additional documents......................").append(status).toString());

    if ((chk.length > 0) && (status))
    {
      ArrayList qryList2 = new ArrayList();
      for (int i = 0; i < chk.length; i++)
      {
        PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
        StringBuffer bufInsSql = new StringBuffer();

        bufInsSql.append("insert into cr_document_dtl (TXN_TYPE, TXNID, STAGE_ID, DOC_TYPE, ENTITY_ID,");
        bufInsSql.append(" DOC_ID, DOC_DESC, DOC_STATUS, DOC_STATUS_PREV, DOC_RECEIVED_DATE, DOC_DEFFRED_DATE, ");
        bufInsSql.append(" DOC_EXPIRY_DATE, DOC_REMARKS, Doc_Expiry_Flag, DOC_CHILD_IDS, DOC_MANDATORY,");
        bufInsSql.append(" DOC_ORIGINAL, DOC_CHILD_FLAG, REC_STATUS, MAKER_ID,DOCUMENT_TYPE,MAKER_DATE)");

        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?, '").append(this.dateFormat).append("'),").toString());
        bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?, '").append(this.dateFormat).append("'),").toString());
        bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?, '").append(this.dateFormat).append("'),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

        if (CommonFunction.checkNull(vo.getTxnType().trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getTxnType().trim());
        }
        if (CommonFunction.checkNull(vo.getTxnId().trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getTxnId().trim());
        }
        if (CommonFunction.checkNull(vo.getStageId().trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getStageId().trim());
        }
        if (CommonFunction.checkNull(vo.getDocType().trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getDocType().trim());
        }
        insertPrepStmtObject.addNull();

        insertPrepStmtObject.addNull();

        if (CommonFunction.checkNull(vo.getDocNameAdditional()[i].trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getDocNameAdditional()[i].trim());
        }
        if (CommonFunction.checkNull(vo.getAdditionalDocStatus()[i].trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getAdditionalDocStatus()[i].trim());
        }
        insertPrepStmtObject.addNull();
        try
        {
          if (CommonFunction.checkNull(vo.getAdditionalReceivedDate()[i].trim()).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getAdditionalReceivedDate()[i].trim());
        }
        catch (ArrayIndexOutOfBoundsException aie) {
          insertPrepStmtObject.addNull();
        }
        try {
          if (CommonFunction.checkNull(vo.getAdditionalDeferredDate()[i].trim()).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getAdditionalDeferredDate()[i].trim());
        }
        catch (ArrayIndexOutOfBoundsException aie) {
          insertPrepStmtObject.addNull();
        }
        try {
          if (CommonFunction.checkNull(vo.getAdditionalExpiryDate()[i].trim()).equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getAdditionalExpiryDate()[i].trim());
        }
        catch (ArrayIndexOutOfBoundsException aie) {
          insertPrepStmtObject.addNull();
        }

        if (CommonFunction.checkNull(vo.getAdditionalRemarks()[i].trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getAdditionalRemarks()[i].trim());
        try
        {
          if (CommonFunction.checkNull(vo.getAdditionalExpiryDate()[i].trim()).equalsIgnoreCase(""))
            insertPrepStmtObject.addString("N");
          else
            insertPrepStmtObject.addString("Y");
        }
        catch (ArrayIndexOutOfBoundsException aie) {
          insertPrepStmtObject.addString("N");
        }

        insertPrepStmtObject.addNull();

        if (CommonFunction.checkNull(vo.getMandatoryOrNonMandatory()[i].trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMandatoryOrNonMandatory()[i].trim());
        }
        if (CommonFunction.checkNull(vo.getOriginalOrCopy()[i].trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getOriginalOrCopy()[i].trim());
        }
        insertPrepStmtObject.addString("N");
        insertPrepStmtObject.addString("F");

        if (CommonFunction.checkNull(vo.getUserId().trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getUserId().trim());
        }
        if (CommonFunction.checkNull(vo.getvAdditionalDocType()[i].trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getvAdditionalDocType()[i].trim());
        }
        if (CommonFunction.checkNull(vo.getBussinessDate().trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getBussinessDate().trim());
        }
        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN SaveDocument() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList2.add(insertPrepStmtObject);

        bufInsSql = null;
        bufInsSql1 = null;
        bufInsSql2 = null;
        insertPrepStmtObject1 = null;
        insertPrepStmtObject = null;
        try
        {
          status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList2);
          if ((CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED")) && (status))
          {
            String q1 = "select TXN_DOC_ID from cr_document_dtl order by TXN_DOC_ID desc limit 1";
            String ratingID = ConnectionDAO.singleReturn(q1);
            String query = new StringBuilder().append("INSERT INTO cr_document_dtl_edit select * from cr_document_dtl where TXN_DOC_ID=").append(ratingID).toString();
            PrepStmtObject stmt = new PrepStmtObject();
            stmt.setSql(query);
            ArrayList list = new ArrayList();
            list.add(stmt);
            status = ConnectionDAO.sqlInsUpdDeletePrepStmt(list);
            logger.info(new StringBuilder().append("Edit Insert Status  :  ").append(status).toString());

            String query2 = new StringBuilder().append("delete from cr_document_dtl where TXN_DOC_ID=").append(ratingID).toString();
            PrepStmtObject stmt2 = new PrepStmtObject();
            stmt2.setSql(query2);
            ArrayList list2 = new ArrayList();
            list2.add(stmt2);
            status = ConnectionDAO.sqlInsUpdDeletePrepStmt(list2);
            logger.info(new StringBuilder().append("Edit delete Status  :  ").append(status).toString());
          }
        } catch (Exception e) {
          e.printStackTrace();
        }
      }
    }
    logger.info(new StringBuilder().append("In SaveDocument saving Additional documents......................").append(status).toString());
    return status;
  }

  public String getGroupExposureLimitCheck(CommonPageSecVo vo) {
    logger.info("Inside getGroupExposureLimitCheck .....................DAOImpl");

    String[] dealIdArr = vo.getDealId();
    String[] sancAmtArr = vo.getSancAmt();
    BigDecimal balPrin = null;
    BigDecimal overdueprin = null;
    BigDecimal balancePrincipal = new BigDecimal("0.00");
    BigDecimal overduePrincipal = new BigDecimal("0.00");
    String status = "";

    StringBuilder dealId = new StringBuilder();
    StringBuilder sancAmt = new StringBuilder();
    for (int k = 0; k < 1; k++)
    {
      dealId.append(dealIdArr[0]);
      sancAmt.append(sancAmtArr[0]);
    }
    try
    {
      StringBuilder query1 = new StringBuilder();
      BigDecimal groupExposureLimit = new BigDecimal("0.00");
      query1.append(new StringBuilder().append("select sum(CUSTOMER_GROUP_EXPOSURE_LIMIT) from cr_deal_customer_m where customer_id=(select deal_customer_id from cr_deal_dtl where deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId))).append("')").toString());
      String groupExposureLimitStr = ConnectionDAO.singleReturn(query1.toString());
      if (!CommonFunction.checkNull(groupExposureLimitStr).equalsIgnoreCase(""))
      {
        groupExposureLimit = new BigDecimal(groupExposureLimitStr);
      }

      logger.info(new StringBuilder().append("group Exposure Limit: ").append(groupExposureLimit).toString());

      StringBuilder query2 = new StringBuilder();
      query2.append(new StringBuilder().append("select customer_group_id from cr_deal_customer_m where customer_id=(select deal_customer_id from cr_deal_dtl where deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId))).append("')").toString());

      String groupId = ConnectionDAO.singleReturn(query2.toString());

      StringBuilder query4 = new StringBuilder();
      query4.append(new StringBuilder().append("select IFNULL(sum(LOAN_BALANCE_PRINCIPAL),0)+IFNULL(sum(LOAN_OVERDUE_PRINCIPAL),0) from cr_loan_dtl where LOAN_CUSTOMER_ID IN (select customer_id from gcd_customer_m where GROUP_ID='").append(groupId).append("' and GROUP_ID<>'' and customer_status='A') and rec_status='A'").toString());
      String balancePrincipalOutStr = ConnectionDAO.singleReturn(query4.toString());
      logger.info(new StringBuilder().append("query4: ").append(query4).toString());
      BigDecimal principalOutstanding = new BigDecimal("0.00");
      if (!CommonFunction.checkNull(balancePrincipalOutStr).equalsIgnoreCase(""))
      {
        principalOutstanding = new BigDecimal(balancePrincipalOutStr);
      }
      BigDecimal sanctionAmt = new BigDecimal("0.00");
      if (!CommonFunction.checkNull(sancAmt).equalsIgnoreCase(""))
      {
        sanctionAmt = new BigDecimal(this.myFormatter.parse(CommonFunction.checkNull(sancAmt)).toString());
      }
      int res = 0;

      if ((!CommonFunction.checkNull(principalOutstanding).equalsIgnoreCase("")) && (!CommonFunction.checkNull(sancAmt).equalsIgnoreCase("")) && (!CommonFunction.checkNull(groupExposureLimit).equalsIgnoreCase("")))
      {
        res = principalOutstanding.add(sanctionAmt).compareTo(groupExposureLimit);
      }

      if (res > 0)
      {
        status = "groupExposure";
      }

      query1 = null;
      query2 = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      dealId = null;
      sancAmt = null;
    }
    logger.info(new StringBuilder().append("Group Exposure Limit Status: ").append(status).toString());
    return status;
  }

  public String getCustomerExposureLimitCheck(CommonPageSecVo vo)
  {
    logger.info("Inside getCustomerExposureLimitCheck .....................DAOImpl");
    String[] balancePrincipalStr = null;
    String[] overduePrincipalStr = null;
    String[] dealIdArr = vo.getDealId();
    String[] sancAmtArr = vo.getSancAmt();
    BigDecimal balPrin = null;
    BigDecimal overdueprin = null;
    BigDecimal balancePrincipal = new BigDecimal("0.00");
    BigDecimal overduePrincipal = new BigDecimal("0.00");
    String status = "";

    StringBuilder dealId = new StringBuilder();
    StringBuilder sancAmt = new StringBuilder();

    for (int k = 0; k < 1; k++)
    {
      dealId.append(dealIdArr[0]);
      sancAmt.append(sancAmtArr[0]);
    }
    try
    {
      BigDecimal customerExposureLimit = new BigDecimal("0.00");
      StringBuilder query1 = new StringBuilder();
      query1.append(new StringBuilder().append("select sum(customer_exposure_limit) from cr_scheme_m where scheme_id=(select deal_scheme from cr_deal_loan_dtl where deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId))).append("')").toString());

      String customerExposureLimitStr = ConnectionDAO.singleReturn(query1.toString());
      if (!CommonFunction.checkNull(customerExposureLimitStr).equalsIgnoreCase(""))
      {
        customerExposureLimit = new BigDecimal(customerExposureLimitStr);
      }

      StringBuilder query2 = new StringBuilder();
      query2.append(new StringBuilder().append("select gcd_customer_id from cr_deal_customer_m where customer_id=(select deal_customer_id from cr_deal_dtl where deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId))).append("')").toString());

      String customerId = ConnectionDAO.singleReturn(query2.toString());

      StringBuilder query3 = new StringBuilder();
      query3.append(new StringBuilder().append("select deal_scheme from cr_deal_loan_dtl where deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId))).append("'").toString());

      String schemeId = ConnectionDAO.singleReturn(query3.toString());

      StringBuilder query4 = new StringBuilder();
      query4.append(new StringBuilder().append("select deal_product from cr_deal_loan_dtl where deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId))).append("'").toString());

      String productId = ConnectionDAO.singleReturn(query4.toString());

      StringBuilder query5 = new StringBuilder();
      query5.append(new StringBuilder().append("select sum(LOAN_BALANCE_PRINCIPAL),sum(LOAN_OVERDUE_PRINCIPAL) from cr_loan_dtl where loan_customer_id='").append(customerId).append("'").append(" and loan_scheme='").append(schemeId).append("' and loan_product='").append(productId).append("' and rec_status='A'").toString());

      logger.info(new StringBuilder().append("query5: ").append(query5).toString());
      ArrayList loanList = ConnectionDAO.sqlSelect(query5.toString());
      for (int j = 0; j < loanList.size(); j++)
      {
        ArrayList data = (ArrayList)loanList.get(j);
        balancePrincipalStr = new String[loanList.size()];
        overduePrincipalStr = new String[loanList.size()];
        if (data.size() > 0)
        {
          balancePrincipalStr[j] = CommonFunction.checkNull(data.get(0)).toString().trim();
          if (balancePrincipalStr[j].equalsIgnoreCase(""))
            balPrin = new BigDecimal("0.00");
          else
            balPrin = new BigDecimal(balancePrincipalStr[j]);
          overduePrincipalStr[j] = CommonFunction.checkNull(data.get(1)).toString().trim();
          if (overduePrincipalStr[j].equalsIgnoreCase(""))
            overdueprin = new BigDecimal("0.00");
          else
            overdueprin = new BigDecimal(overduePrincipalStr[j]);
          balancePrincipal = balancePrincipal.add(balPrin);
          overduePrincipal = overduePrincipal.add(overdueprin);
        }

      }

      BigDecimal principalOutstanding = balancePrincipal.add(overduePrincipal);
      BigDecimal sanctionAmt = new BigDecimal("0.00");
      if (!CommonFunction.checkNull(sancAmt).equalsIgnoreCase(""))
      {
        sanctionAmt = new BigDecimal(this.myFormatter.parse(CommonFunction.checkNull(sancAmt)).toString());
      }

      int res = 0;
      if ((!CommonFunction.checkNull(principalOutstanding).equalsIgnoreCase("")) && (!CommonFunction.checkNull(sanctionAmt).equalsIgnoreCase("")) && (!CommonFunction.checkNull(customerExposureLimit).equalsIgnoreCase("")))
      {
        res = principalOutstanding.add(sanctionAmt).compareTo(customerExposureLimit);
      }

      if (res > 0)
      {
        status = "customerExposure";
      }
      query1 = null;
      query2 = null;
      query3 = null;
      query4 = null;
      query5 = null;
      productId = null;
      schemeId = null;
      customerId = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      dealId = null;
      sancAmt = null;
    }
    return status;
  }

  public double updateCreditDecision(Object ob)
  {
    CommonPageSecVo vo = (CommonPageSecVo)ob;
    logger.info(new StringBuilder().append("In updateCreditDecision.......Update mode ").append(vo.getDealLoanId().length).toString());
    String[] dealId = vo.getDealId();
    double sancAmtDisp = 0.0D;
    String[] dealLoanId = vo.getDealLoanId();
    String[] creditType = vo.getCreditType();
    String[] sancAmt = vo.getSancAmt();
    String[] underTenure = vo.getUnderTenure();
    String[] emi = vo.getEmi();
    String[] sancDate = vo.getSancDate();
    String[] bIrr = vo.getBusIrr();
    String[] effRate = vo.getEffectiveRate();
    String[] grossLtv = vo.getGrossLtv();
    String[] foir = vo.getFoir();
    String Ltv = "";
    String FOIRCheck = "";

    String dealLoanAmount1 = ConnectionDAO.singleReturn(new StringBuilder().append(" select ifnull(round(ifnull(DEAL_LOAN_AMOUNT,'0'),0),0) from CR_DEAL_LOAN_DTL  where deal_id = '").append(dealId).append("' ").toString());

    if (CommonFunction.checkNull(dealLoanAmount1).equalsIgnoreCase(""))
    {
      dealLoanAmount1 = "0";
    }
    long dealLoanAmount = Long.parseLong(dealLoanAmount1);
    logger.info(new StringBuilder().append("dealLoanAmount------------->>>> ").append(dealLoanAmount).toString());

    long valueationAmount = Long.parseLong(ConnectionDAO.singleReturn(new StringBuilder().append(" SELECT ifnull(round(ifnull(SUM(VALUATION_AMOUNT),'0'),0),'0')  FROM CR_ASSET_COLLATERAL_M WHERE ASSET_COLLATERAL_CLASS = 'PROPERTY'  AND ASSET_ID IN (SELECT ASSETID FROM CR_DEAL_COLLATERAL_M WHERE DEAL_ID = '").append(dealId).append("' ) ").toString()));

    logger.info(new StringBuilder().append("valueationAmount ------->>> ").append(valueationAmount).toString());

    String GrossLTV = "";
    if (valueationAmount == 0L) {
      GrossLTV = "0";
    } else {
      long finalValue = dealLoanAmount * 100L / valueationAmount;
      GrossLTV = String.valueOf(finalValue);
    }
    logger.info(new StringBuilder().append("GrossLTV ----->>> ").append(GrossLTV).toString());

    long OUTSTANDING_AMOUNT = 0L;
    int count = Integer.parseInt(ConnectionDAO.singleReturn(new StringBuilder().append(" select count(1) from cr_obligation_analysis_dtl where deal_id = '").append(dealId).append("' ").toString()));
    logger.info(new StringBuilder().append("count1 --------->>> ").append(count).toString());
    if (count > 0) {
      OUTSTANDING_AMOUNT = Long.parseLong(ConnectionDAO.singleReturn(new StringBuilder().append(" select ifnull(round(ifnull(OUTSTANDING_AMOUNT,'0'),0),0) from cr_obligation_analysis_dtl where deal_id = '").append(dealId).append("' and OBLIGATION_TO_BE_CONSIDER = 'Y' ").toString()));
    }
    logger.info(new StringBuilder().append("OUTSTANDING_AMOUNT ------->>> ").append(OUTSTANDING_AMOUNT).toString());
    count = 0;
    long INSTL_Amount = 0L;
    count = Integer.parseInt(ConnectionDAO.singleReturn(new StringBuilder().append(" select count(1) from cr_deal_repaysch_dtl where deal_id = '").append(dealId).append("' ").toString()));
    logger.info(new StringBuilder().append("count2 --------->>> ").append(count).toString());
    if (count > 0) {
      INSTL_Amount = Long.parseLong(ConnectionDAO.singleReturn(new StringBuilder().append(" select ifnull(round(sum(ifnull(INSTL_Amount,'0')),0),0) from cr_deal_repaysch_dtl where deal_id = '").append(dealId).append("' ").toString()));
    }
    logger.info(new StringBuilder().append("INSTL_Amount ----->>> ").append(INSTL_Amount).toString());
    count = 0;
    long Net_Profit = 0L;
    count = Integer.parseInt(ConnectionDAO.singleReturn(new StringBuilder().append(" select count(1) from cr_financial_data_dtl where PARAM_CODE = 'GRPR' and deal_id = '").append(dealId).append("' and SOURCE_TYPE = 'P' ").toString()));
    logger.info(new StringBuilder().append("count3 --------->>> ").append(count).toString());
    if (count > 0) {
      Net_Profit = Long.parseLong(ConnectionDAO.singleReturn(new StringBuilder().append(" select ifnull(round(sum(ifnull(PARAM_VALUE,'0')),0),0) from cr_financial_data_dtl where PARAM_CODE = 'GRPR' and deal_id = '").append(dealId).append("' and SOURCE_TYPE = 'P' ").toString()));
    }
    logger.info(new StringBuilder().append("Net_Profit ------>>>> ").append(Net_Profit).toString());
    String FOIR = "0";
    if (Net_Profit > 0L) {
      long finalValue = (OUTSTANDING_AMOUNT + INSTL_Amount) * 100L / Net_Profit;
      FOIR = String.valueOf(finalValue);
    }
    this.qryList = new ArrayList();
    ArrayList dealQryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = null;
    for (int k = 0; k < vo.getDealLoanId().length; k++)
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("update cr_deal_loan_dtl dl set  REDY_TO_AUTHOR='Y',dl.rec_status='F',dl.deal_sanction_amount=?,  dl.DEAL_SANCTION_DATE= STR_TO_DATE(?,'").append(this.dateFormatWithTime).append("'),").append(" dl.DEAL_SANCTION_VALID_TILL= STR_TO_DATE(?,'").append(this.dateFormatWithTime).append("'),GROSS_LTV= ?,FOIR=?").append(" where dl.deal_id=? and dl.deal_loan_id=?").toString());

      insertPrepStmtObject = new PrepStmtObject();

      if (CommonFunction.checkNull(sancAmt[k]).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        try {
          insertPrepStmtObject.addString(this.myFormatter.parse(sancAmt[k]).toString().trim());
        }
        catch (ParseException e) {
          e.printStackTrace();
        }

      }

      if (CommonFunction.checkNull(vo.getBussinessDate()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getBussinessDate().trim());
      }
      if (CommonFunction.checkNull(sancDate[k]).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(sancDate[k].trim());
      }

      if (CommonFunction.checkNull(GrossLTV).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(GrossLTV.trim());
      }
      if (CommonFunction.checkNull(FOIR).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(FOIR.trim());
      }
      if (CommonFunction.checkNull(dealId[k]).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(dealId[k].trim());
      }
      if (CommonFunction.checkNull(dealLoanId[k]).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(dealLoanId[k].trim());
      }
      insertPrepStmtObject.setSql(query.toString());
      this.qryList.add(insertPrepStmtObject);

      query = null;
      try {
        sancAmtDisp += Double.parseDouble(this.myFormatter.parse(sancAmt[k]).toString().trim());
      }
      catch (NumberFormatException e) {
        e.printStackTrace();
      }
      catch (ParseException e) {
        e.printStackTrace();
      }
    //Pooja Changes Strats for one deal_multiple loan
		
    		PrepStmtObject insertPrepStmtObject1 = null;
    		insertPrepStmtObject1 = new PrepStmtObject();
    		
    		String updateQuery="UPDATE CR_DEAL_DTL SET DEAL_SANCTION_AMOUNT=? WHERE DEAL_ID=? ";
    		
    		if ((CommonFunction.checkNull(sancAmt[k])).trim().equalsIgnoreCase(""))
    			insertPrepStmtObject1.addNull();
    		else
    			insertPrepStmtObject1.addString(((sancAmt[k]).trim()).toString());
    		
    		
    		if ((CommonFunction.checkNull(dealId[k])).trim().equalsIgnoreCase(""))
    			insertPrepStmtObject1.addNull();
    		else
    			insertPrepStmtObject1.addString(((dealId[k]).trim()).toString());
    		insertPrepStmtObject1.setSql(updateQuery);
    		logger.info("IN updateCreditDecision() update cr_deal_dtl query1 ### "+insertPrepStmtObject1.printQuery());
    		dealQryList.add(insertPrepStmtObject1);
    		//Pooja Changes end
    }

    logger.info(new StringBuilder().append("IN updateCreditDecision() update query1 ### ").append(this.qryList.get(0)).toString());
    boolean status = false;
    try {
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
      logger.info(new StringBuilder().append("In updateCreditDecision......................status= ").append(status).toString());
      boolean dealStatus=ConnectionDAO.sqlInsUpdDeletePrepStmt(dealQryList);
		logger.info("In updateCreditDecision cr_deal_dtl......................"+dealStatus);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    if (status)
    {
      return sancAmtDisp;
    }

    return sancAmtDisp = 0.0D;
  }

  public boolean saveUnderwritingQueryData(Object ob, String dealId)
  {
    QueryProcessingVo vo = (QueryProcessingVo)ob;
    boolean status = false;
    StringBuilder queryDateTime = new StringBuilder();
    StringBuilder resolutionDateTime = new StringBuilder();

    if (CommonFunction.checkNull(vo.getResolutionTime()).trim().equalsIgnoreCase(""))
    {
      resolutionDateTime.append(vo.getResolutionDate());
    }
    else if (CommonFunction.checkNull(vo.getResolutionTime()).trim().length() >= 5)
    {
      String rdate = new StringBuilder().append(CommonFunction.checkNull(vo.getResolutionDate())).append(" ").append(CommonFunction.checkNull(vo.getResolutionTime()).trim().substring(0, 5)).toString();
      resolutionDateTime.append(rdate);
    }
    else
    {
      resolutionDateTime.append(vo.getResolutionDate());
    }

    if (CommonFunction.checkNull(vo.getQueryTime()).trim().equalsIgnoreCase(""))
    {
      queryDateTime.append(vo.getQueryDate());
    }
    else if (CommonFunction.checkNull(vo.getQueryTime()).trim().length() >= 5)
    {
      String qdate = new StringBuilder().append(CommonFunction.checkNull(vo.getQueryDate())).append(" ").append(CommonFunction.checkNull(vo.getQueryTime()).trim().substring(0, 5)).toString();
      queryDateTime.append(qdate);
    }
    else
    {
      queryDateTime.append(CommonFunction.checkNull(vo.getQueryDate()));
    }

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    try {
      logger.info("In insert query data part");
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("insert into deal_query_dtl(deal_id,query_date,query_remarks,resolution_status,resolution_datetime,resolution_remarks,maker_id,user_id,maker_date,QUERY_TYPE )");
      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormatWithTime).append("'),").toString());
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormatWithTime).append("'),").toString());
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
      bufInsSql.append(" ? )");
      if (CommonFunction.checkNull(vo.getDealId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getDealId().trim());
      if (CommonFunction.checkNull(queryDateTime).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(queryDateTime.toString().trim());
      if (CommonFunction.checkNull(vo.getQueryRemarks()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getQueryRemarks().trim());
      if (CommonFunction.checkNull(vo.getResolutionStatus()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getResolutionStatus().trim());
      if (CommonFunction.checkNull(resolutionDateTime).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(resolutionDateTime.toString().trim());
      if (CommonFunction.checkNull(vo.getResolutionRemarks()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getResolutionRemarks().trim());
      if (CommonFunction.checkNull(vo.getUserId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getUserId());
      }
      if (CommonFunction.checkNull(vo.getLbxUserId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLbxUserId());
      }
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerDate());
      }
      if (CommonFunction.checkNull(vo.getQueryType()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getQueryType());
      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN saveUnderwritingQueryData() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In saveUnderwritingQueryData......................").append(status).toString());

      bufInsSql = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      vo = null;
      queryDateTime = null;
      resolutionDateTime = null;
    }
    return status;
  }

  public ArrayList getUnderwritingQueryData(String dealId) {
    ArrayList list = new ArrayList();
    try {
      logger.info("In getUnderwritingQueryData..........................DAOImpl");
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select deal_id,DATE_FORMAT(query_date,'").append(this.dateFormatWithTime).append("'),query_remarks,if(resolution_status='P','Pending','Resolved') as resolution_status,DATE_FORMAT(resolution_datetime,'").append(this.dateFormatWithTime).append("'),resolution_remarks,u.USER_NAME,resolution_status,DEAL_QUERY_ID,").append("(select USER_NAME from sec_user_m where USER_ID=q.MAKER_ID)MAKER_ID,QUERY_TYPE,case when QUERY_TYPE='CRT' then 'CRITERIA RELATED' when QUERY_TYPE='CLA' then 'CLARIFICATION RELATED'  when QUERY_TYPE='BNK' then 'BANK RELATED'  when QUERY_TYPE='DOC' then 'DOCUMENTS RELATED'  when QUERY_TYPE='MJD' then 'MAJOR DEBTOR'  when QUERY_TYPE='MAC' then 'MAJOR CREDITOR'   end as QUERY_TYPE_DESC from deal_query_dtl q left join sec_user_m u on u.user_id=q.user_id ").append(" where deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("'").toString());

      logger.info(new StringBuilder().append("In getUnderWriterData...............query...........DAOImpl").append(query).toString());
      QueryProcessingVo vo = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());

      query = null;

      for (int i = 0; i < product.size(); i++)
      {
        ArrayList data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          vo = new QueryProcessingVo();
          vo.setDealId(CommonFunction.checkNull(data.get(0)).trim());
          vo.setQueryDate(CommonFunction.checkNull(data.get(1)).trim());
          vo.setQueryRemarks(CommonFunction.checkNull(data.get(2)).trim());
          vo.setResolution(CommonFunction.checkNull(data.get(3)).trim());
          vo.setResolutionDate(CommonFunction.checkNull(data.get(4)).trim());
          vo.setResolutionRemarks(CommonFunction.checkNull(data.get(5)).trim());
          vo.setUserId(CommonFunction.checkNull(data.get(6)).trim());
          vo.setResolutionStatus(CommonFunction.checkNull(data.get(7)).trim());
          vo.setDealQueryId(CommonFunction.checkNull(data.get(8)).trim());
          vo.setInitiatedBy(CommonFunction.checkNull(data.get(9)).trim());
          vo.setQueryType(CommonFunction.checkNull(data.get(10)).trim());
          vo.setQueryTypeDesc(CommonFunction.checkNull(data.get(11)).trim());
          list.add(vo);
        }
        vo = null;
        data.clear();
        data = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      dealId = null;
    }

    return list;
  }

  public String collectDocuments(String txnType, String dealId, String stage, String source)
  {
    String status = "";
    ArrayList in = new ArrayList();
    ArrayList out = new ArrayList();
    ArrayList outMessages = new ArrayList();

    StringBuilder s1 = new StringBuilder();
    StringBuilder s2 = new StringBuilder();
    try
    {
     /*boolean chk = CheckDocumentList(dealId);
      if (!chk)
      {*/
        logger.info("In collectDocuments proc( Insert_Document_Checklist )");
        logger.info(new StringBuilder().append("In DocsCollectionInCMBehindAction collectDocuments txnType: ").append(txnType).append(" dealId: ").append(dealId).append(" stage: ").append(stage).toString());
        in.add(txnType);
        in.add(dealId);
        in.add(stage);
        in.add(CommonFunction.checkNull(source).trim());
        out.add(s1);
        out.add(s2);
        outMessages = (ArrayList)ConnectionDAO.callSP("Insert_Document_Checklist", in, out);
        if ((outMessages != null) && (outMessages.size() > 0))
        {
          s1.append(CommonFunction.checkNull(outMessages.get(0)));

          if ((s1 != null) && (s1.toString().equalsIgnoreCase("S")))
          {
            status = s1.toString();
            logger.info(new StringBuilder().append("Procedure s1----").append(s1).toString());
          }
          else if ((s1 != null) && (s1.toString().equalsIgnoreCase("E")))
          {
            s2.append(CommonFunction.checkNull(outMessages.get(1)));
            logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
            status = s2.toString();
          }
        }
    /*  }
      else
      {
        logger.info(new StringBuilder().append("in else block collectDocuments----------- ").append(s1).toString());
        status = "S";
      }*/

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      s1 = null;
      s2 = null;
      in = null;
      out = null;
      outMessages = null;
      txnType = null;
      dealId = null;
      stage = null;
      source = null;
    }

    return status;
  }
  /*public String collectDocuments(String txnType, String dealId, String stage, String source)
  {
    String status = "";
    ArrayList in = new ArrayList();
    ArrayList out = new ArrayList();
    ArrayList outMessages = new ArrayList();

    StringBuilder s1 = new StringBuilder();
    StringBuilder s2 = new StringBuilder();
    try
    {
      boolean chk = CheckDocumentList(dealId);
      if (!chk)
      {
        logger.info("In collectDocuments proc( Insert_Document_Checklist )");
        logger.info(new StringBuilder().append("In DocsCollectionInCMBehindAction collectDocuments txnType: ").append(txnType).append(" dealId: ").append(dealId).append(" stage: ").append(stage).toString());
        in.add(txnType);
        in.add(dealId);
        in.add(stage);
        in.add(CommonFunction.checkNull(source).trim());
        out.add(s1);
        out.add(s2);
        outMessages = (ArrayList)ConnectionDAO.callSP("Insert_Document_Checklist", in, out);
        if ((outMessages != null) && (outMessages.size() > 0))
        {
          s1.append(CommonFunction.checkNull(outMessages.get(0)));

          if ((s1 != null) && (s1.toString().equalsIgnoreCase("S")))
          {
            status = s1.toString();
            logger.info(new StringBuilder().append("Procedure s1----").append(s1).toString());
          }
          else if ((s1 != null) && (s1.toString().equalsIgnoreCase("E")))
          {
            s2.append(CommonFunction.checkNull(outMessages.get(1)));
            logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
            status = s2.toString();
          }
        }

      }
      else
      {
        logger.info(new StringBuilder().append("in else block collectDocuments----------- ").append(s1).toString());
        status = "S";
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      s1 = null;
      s2 = null;
      in = null;
      out = null;
      outMessages = null;
      txnType = null;
      dealId = null;
      stage = null;
      source = null;
    }

    return status;
  }*/

  public ArrayList showUnderwritingQueryData(Object ob)
  {
    QueryProcessingVo vo = (QueryProcessingVo)ob;

    ArrayList list = new ArrayList();
    try
    {
      logger.info("In showUnderwritingQueryData..........................DAOImpl");

      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select deal_id,DATE_FORMAT(query_date,'").append(this.dateFormatWithTime).append("'),query_remarks,if(resolution_status='P','Pending','Resolved') as resolution_status,DATE_FORMAT(resolution_datetime,'").append(this.dateFormatWithTime).append("'),resolution_remarks ,u.USER_NAME,q.user_id,resolution_status,DEAL_QUERY_ID from deal_query_dtl q left join sec_user_m u on u.user_id=q.user_id").append(" where DEAL_QUERY_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getDealQueryId())).trim()).append("' ").toString());

      logger.info(new StringBuilder().append("In showUnderwritingQueryData...............query...........DAOImpl").append(query).toString());
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());

      query = null;

      for (int i = 0; i < product.size(); i++)
      {
        ArrayList data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          vo = new QueryProcessingVo();
          vo.setDealId(CommonFunction.checkNull(data.get(0)).trim());

          if (!CommonFunction.checkNull(data.get(1)).trim().equalsIgnoreCase(""))
          {
            vo.setQueryDate(CommonFunction.checkNull(data.get(1)).trim().substring(0, 10));
            vo.setQueryTime(CommonFunction.checkNull(data.get(1)).trim().substring(11, 16));
          }

          vo.setQueryRemarks(CommonFunction.checkNull(data.get(2)).trim());
          vo.setResolution(CommonFunction.checkNull(data.get(3)).trim());
          vo.setResolutionDate(CommonFunction.checkNull(data.get(4)).trim());
          vo.setResolutionRemarks(CommonFunction.checkNull(data.get(5)).trim());
          vo.setUserId(CommonFunction.checkNull(data.get(6)).trim());
          vo.setLbxUserId(CommonFunction.checkNull(data.get(7)).trim());
          vo.setResolutionStatus(CommonFunction.checkNull(data.get(8)).trim());
          vo.setDealQueryId(CommonFunction.checkNull(data.get(9)).trim());
          list.add(vo);
        }

        vo = null;
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally {
      ob = null;
    }

    return list;
  }

  public boolean updateUnderwritingQueryData(Object ob, String dealId)
  {
    QueryProcessingVo vo = (QueryProcessingVo)ob;

    logger.info("In updateUnderwritingQueryData.......Update mode ");
    String resolutionDateTime = "";
    if (CommonFunction.checkNull(vo.getResolutionTime()).equalsIgnoreCase(""))
    {
      resolutionDateTime = vo.getResolutionDate().trim();
    }
    else
    {
      resolutionDateTime = new StringBuilder().append(vo.getResolutionDate().trim()).append(" ").append(vo.getResolutionTime().trim().substring(0, 5)).toString();
    }

    logger.info(new StringBuilder().append("resolutionDateTime : ").append(resolutionDateTime).toString());

    this.qryList = new ArrayList();
    StringBuilder query = new StringBuilder();
    query.append(new StringBuilder().append("update deal_query_dtl set resolution_status=?,resolution_datetime=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),resolution_remarks=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),user_id=?,QUERY_TYPE=? where DEAL_QUERY_ID=? ").toString());
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

    if (CommonFunction.checkNull(vo.getResolutionStatus()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getResolutionStatus().trim());
    }
    if (CommonFunction.checkNull(resolutionDateTime).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(resolutionDateTime.toString().trim());
    }
    if (CommonFunction.checkNull(vo.getResolutionRemarks()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getResolutionRemarks().trim());
    }

    if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getMakerDate().trim());
    }
    if (CommonFunction.checkNull(vo.getLbxUserId()).trim().equalsIgnoreCase("")) {
      if (!CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString(vo.getUserId().trim());
      else
        insertPrepStmtObject.addNull();
    }
    else insertPrepStmtObject.addString(vo.getLbxUserId().trim());

    if (CommonFunction.checkNull(vo.getQueryType()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getQueryType().trim());
    }

    if (CommonFunction.checkNull(vo.getDealQueryId()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getDealQueryId().trim());
    }

    insertPrepStmtObject.setSql(query.toString());
    logger.info(new StringBuilder().append("IN updateUnderwritingQueryData() update query1 ### 1....").append(insertPrepStmtObject.printQuery()).toString());
    this.qryList.add(insertPrepStmtObject);
    boolean status = false;
    try {
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      dealId = null;
      vo = null;
      query = null;
      resolutionDateTime = null;
    }

    return status;
  }

  public boolean updatesecuritydeposit(ChargeVo cv, String dealId)
  {
    StringBuffer bufInsSql = new StringBuffer();
    this.qryList = new ArrayList();
    boolean status = false;
    String amt = "";
    StringBuilder query = new StringBuilder();
    query.append(new StringBuilder().append("select DEAL_CHARGE_CALCULATED_AMOUNT from  cr_deal_txncharges_dtl where DEAL_ID='").append(dealId).append("' and DEAL_CHARGE_CODE=103 limit 1").toString());
    amt = CommonFunction.checkNull(ConnectionDAO.singleReturn(query.toString()));
    logger.info(new StringBuilder().append("In updatesecuritydeposit() SD Amount to be.. ").append(amt).toString());

    query = null;

    if (amt == "") {
      amt = "0.00";
    }
    if (Double.parseDouble(CommonFunction.checkNull(amt).trim()) == 0.0D) {
      bufInsSql.append(new StringBuilder().append("update cr_deal_sd_m set SD_INTEREST_TYPE=?,SD_INTEREST_RATE=?,SD_INTEREST=? where DEAL_ID='").append(dealId).append("'").toString());
      PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

      insertPrepStmtObject.addString("N");
      try
      {
        insertPrepStmtObject.addString(this.myFormatter.parse("0.00").toString());
      }
      catch (ParseException e) {
        e.printStackTrace();
      }
      try
      {
        insertPrepStmtObject.addString(this.myFormatter.parse("0.00").toString());
      }
      catch (ParseException e) {
        e.printStackTrace();
      }
      finally
      {
        query = null;
      }

      logger.info(new StringBuilder().append("ibufInsUpdSql.toString()").append(bufInsSql.toString()).toString());
      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN updatesecuritydeposit query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

      this.qryList.add(insertPrepStmtObject);
      try {
        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
      }
      catch (RemoteException e) {
        e.printStackTrace();
      }
      catch (SQLException e) {
        e.printStackTrace();
      }
      finally {
        cv = null;
        dealId = null;
        bufInsSql = null;
        this.qryList = null;
      }
    }
    return status;
  }

  public boolean saveCharges(Object ob)
  {
    ChargeVo vo = (ChargeVo)ob;
    logger.info(new StringBuilder().append("In saveCharges....saveCharges...Update mod:  ").append(vo.getChargeIdDtl()).toString());
    this.qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = null;
    String[] dId = vo.getChargeIdDtl();
    String[] finalAmount = vo.getFinalAmount();
    String[] chargeAmount = vo.getChargeAmount();

    String[] taxAmount1 = vo.getDealChargeTaxAmountInConfig1();
    String[] taxAmount2 = vo.getDealChargeTaxAmountInConfig2();
    String[] tdsAmount = vo.getDealChargeTdsAmountInConfig();
    String[] netAmount = vo.getDealChargeNetAmountInConfig();

    if (!CommonFunction.checkNull(vo.getChargeIdDtl()).equalsIgnoreCase(""))
    {
      for (int k = 0; k < vo.getChargeIdDtl().length; k++)
      {
        logger.info(new StringBuilder().append("Charge Id in saveCharges: ").append(dId[k]).toString());
        StringBuilder query = new StringBuilder();
        query.append(new StringBuilder().append("update cr_deal_txncharges_dtl set DEAL_CHARGE_FINAL_AMOUNT=?,DEAL_CHARGE_CALCULATED_AMOUNT=?,DEAL_CHARGE_TAX_AMOUNT1=?,DEAL_CHARGE_TAX_AMOUNT2=?,DEAL_CHARGE_TDS_AMOUNT=?,DEAL_CHARGE_NET_AMOUNT=?, REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) where DEAL_CHARGE_DTL_ID=?").toString());
        insertPrepStmtObject = new PrepStmtObject();

        if (CommonFunction.checkNull(finalAmount[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          try {
            insertPrepStmtObject.addString(this.myFormatter.parse(finalAmount[k].trim()).toString());
          }
          catch (ParseException e) {
            e.printStackTrace();
          }

        }

        if (CommonFunction.checkNull(chargeAmount[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          try {
            insertPrepStmtObject.addString(this.myFormatter.parse(chargeAmount[k].trim()).toString());
          }
          catch (ParseException e) {
            e.printStackTrace();
          }
        }
        if (CommonFunction.checkNull(taxAmount1[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          try {
            insertPrepStmtObject.addString(this.myFormatter.parse(taxAmount1[k].trim()).toString());
          }
          catch (ParseException e) {
            e.printStackTrace();
          }

        }

        if (CommonFunction.checkNull(taxAmount2[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          try {
            insertPrepStmtObject.addString(this.myFormatter.parse(taxAmount2[k].trim()).toString());
          }
          catch (ParseException e) {
            e.printStackTrace();
          }
        }
        if (CommonFunction.checkNull(tdsAmount[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          try {
            insertPrepStmtObject.addString(this.myFormatter.parse(tdsAmount[k].trim()).toString());
          }
          catch (ParseException e) {
            e.printStackTrace();
          }

        }

        if (CommonFunction.checkNull(netAmount[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          try {
            insertPrepStmtObject.addString(this.myFormatter.parse(netAmount[k].trim()).toString());
          }
          catch (ParseException e) {
            e.printStackTrace();
          }
        }

        insertPrepStmtObject.addString("P");

        if (CommonFunction.checkNull(vo.getUserId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getUserId());
        }
        if (CommonFunction.checkNull(vo.getBussinessDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getBussinessDate());
        }
        if (CommonFunction.checkNull(dId[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(dId[k].trim());
        }
        insertPrepStmtObject.setSql(query.toString());
        this.qryList.add(insertPrepStmtObject);
        query = null;
      }

    }

    boolean status = false;
    try {
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      vo = null;
      ob = null;
    }
    logger.info(new StringBuilder().append("In saveCharges......................").append(status).toString());
    return status;
  }

  public boolean checkUploadFeasibility(String dealId)
  {
    boolean status = false;
    Connection conn = null;
    Statement stmt = null;
    ResultSet rs = null;
    try
    {
      logger.info("In check Upload Feasibility..........................DAOImpl");
      StringBuilder noOfDocument = new StringBuilder();
      int limitOfUploadDocument = 0;
      noOfDocument.append("select PARAMETER_VALUE from PARAMETER_MST  where PARAMETER_KEY='NUMBER_OF_DOCUMENT_UPLOAD'");
      String uploadDocument = ConnectionDAO.singleReturn(noOfDocument.toString());
      if (!CommonFunction.checkNull(uploadDocument).equalsIgnoreCase(""))
      {
        limitOfUploadDocument = Integer.parseInt(uploadDocument);
      }
      else
      {
        limitOfUploadDocument = 0;
      }
      noOfDocument = null;
      String strReturn = null;
      int count = 0;
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select count(txn_id) from cr_uploaded_documents where txn_id='").append(dealId).append("' and txn_type='DC'").toString());
      logger.info(new StringBuilder().append("In check Upload Feasibility...............query...........DAOImpl ").append(query).toString());
      conn = ConnectionDAO.getConnection();
      stmt = conn.createStatement();
      rs = stmt.executeQuery(query.toString());
      if (rs.next()) {
        strReturn = rs.getString(1);
      }
      count = Integer.parseInt(strReturn);

      if (count < limitOfUploadDocument)
      {
        status = true;
      }
      else if (count >= limitOfUploadDocument)
      {
        status = false;
      }
      logger.info(new StringBuilder().append("Resultset value====  ").append(count).toString());

      query = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      try {
        rs.close();
        stmt.close();
        conn.close();
      } catch (Exception e) {
        e.printStackTrace();
      }
    }
    return status;
  }

  public boolean uploadUnderwritingData(Object ob)
  {
    UnderwritingDocUploadVo uwDocVo = (UnderwritingDocUploadVo)ob;
    boolean status = false;

    logger.info("Document Uploaded Successfully");
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    try {
      logger.info("In insert part of uploadUnderwritingData....");
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("insert into cr_uploaded_documents(txn_type,txn_id,document_desc,file_name,document_path,uploaded_by,uploaded_date,DOCUMENT_TYPE)");
      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append("now(),");
      bufInsSql.append(" ?)");

      insertPrepStmtObject.addString("DC".trim());

      if (CommonFunction.checkNull(uwDocVo.getDealId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(uwDocVo.getDealId().trim());
      if (CommonFunction.checkNull(uwDocVo.getDocDescription()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(uwDocVo.getDocDescription().trim());
      if (CommonFunction.checkNull(uwDocVo.getFileName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(CommonFunction.checkNull(uwDocVo.getFileName()).trim());
      if (CommonFunction.checkNull(uwDocVo.getDocPath()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(uwDocVo.getDocPath().trim());
      if (CommonFunction.checkNull(uwDocVo.getUserName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(uwDocVo.getUserName().trim());
      if (CommonFunction.checkNull(uwDocVo.getDocTypeId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(uwDocVo.getDocTypeId().trim());
      }

      insertPrepStmtObject.setSql(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN uploadUnderwritingData() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In uploadUnderwritingData.................query status..... ").append(status).toString());
      bufInsSql = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      uwDocVo = null;
      qryList.clear();
      qryList = null;
    }
    return status;
  }

  public boolean uploadUnderwritingDataForCm(Object ob)
  {
    UnderwritingDocUploadVo uwDocVo = (UnderwritingDocUploadVo)ob;
    boolean status = false;

    logger.info("Document Uploaded Successfully");
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    try {
      logger.info("In insert part of uploadUnderwritingData....");
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("insert into cr_uploaded_documents(txn_type,txn_id,document_desc,file_name,document_path,uploaded_by,uploaded_date,DOCUMENT_TYPE)");
      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append("now(),");
      bufInsSql.append(" ?)");

      insertPrepStmtObject.addString("LIM".trim());

      if (CommonFunction.checkNull(uwDocVo.getDealId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(uwDocVo.getDealId().trim());
      if (CommonFunction.checkNull(uwDocVo.getDocDescription()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(uwDocVo.getDocDescription().trim());
      if (CommonFunction.checkNull(uwDocVo.getFileName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(CommonFunction.checkNull(uwDocVo.getFileName()).trim());
      if (CommonFunction.checkNull(uwDocVo.getDocPath()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(uwDocVo.getDocPath().trim());
      if (CommonFunction.checkNull(uwDocVo.getUserName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(uwDocVo.getUserName().trim());
      insertPrepStmtObject.setSql(bufInsSql.toString());

      if (CommonFunction.checkNull(uwDocVo.getDocTypeId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(uwDocVo.getDocTypeId().trim());
      insertPrepStmtObject.setSql(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN uploadUnderwritingData() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In uploadUnderwritingData.................query status..... ").append(status).toString());
      bufInsSql = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      uwDocVo = null;
      qryList.clear();
      qryList = null;
    }
    return status;
  }

  public ArrayList getUploadUnderwritingData(String dealId)
  {
    ArrayList list = new ArrayList();
    ArrayList data = null;
    try {
        StringBuilder query = new StringBuilder(new StringBuilder().append(" SELECT A.TXN_ID, A.FILE_NAME, A.DOCUMENT_DESC, B.USER_NAME,S.STAGE_DESC, case A.DOC_Type when 'APPL' THEN 'APPLICATION'  WHEN 'PRAPPL' THEN 'APPLICANT' WHEN 'COAPPL' THEN 'CO APPLICANT'  WHEN 'GUARANTOR' THEN 'GUARANTOR' WHEN 'ASSET' THEN 'ASSET'  WHEN 'COLLATERAL' THEN 'COLLATERAL' WHEN 'CIBIL' THEN 'CUSTOMER' WHEN 'LVI' THEN 'LEGAL VERIFICATION'  WHEN 'TVI' THEN 'TECHNICAL VERIFICATION' WHEN 'RVI' THEN 'RCU VERIFICATION'  WHEN 'FVI' THEN 'FIELD VERIFICATION' WHEN 'FVILM' THEN 'FIELD VERIFICATION(CREDIT MANAGEMENT)'  WHEN 'RVILM' THEN 'RCU VERIFICATION(CREDIT MANAGEMENT)'  WHEN 'TVILM' THEN 'TECHNICAL VERIFICATION(CREDIT MANAGEMENT)' WHEN 'LVILM' THEN 'LEGAL VERIFICATION(CREDIT MANAGEMENT)'  ELSE (CASE WHEN GM.DESCRIPTION IS NULL THEN 'NA' ELSE GM.DESCRIPTION END) END AS DOC_TYPE  ,CASE WHEN A.DOC_TYPE IN('PRAPPL','COAPPL','GUARANTOR','CIBIL') THEN IFNULL(CDCM.CUSTOMER_NAME,'')  WHEN A.DOC_TYPE IN('APPL','',NULL) THEN 'APPLICATION'  WHEN A.DOC_TYPE='LVI' THEN 'LEGAL VERIFICATION(CP)' WHEN A.DOC_TYPE='TVI' THEN 'TECHNICAL VERIFICATION(CP)' WHEN A.DOC_TYPE='RVI' THEN 'RCU VERIFICATION(CP)' WHEN A.DOC_TYPE='FVI' THEN 'FIELD VERIFICATION(CP)' WHEN A.DOC_TYPE='LVILM' THEN 'LEGAL VERIFICATION(CM)' WHEN A.DOC_TYPE='TVILM' THEN 'TECHNICAL VERIFICATION(CM)' WHEN A.DOC_TYPE='RVILM' THEN 'RCU VERIFICATION(CM)' WHEN A.DOC_TYPE='FVILM' THEN 'FIELD VERIFICATION(CM)' WHEN A.DOC_TYPE='CROP' THEN 'CROP' WHEN A.DOC_TYPE='N' THEN 'NA' ELSE  \tCASE IFNULL(GM.PARENT_VALUE,'N') \tWHEN GM.PARENT_VALUE='OVI' THEN 'OFFICE VERIFICATION' \tWHEN GM.PARENT_VALUE='RVI' THEN 'CURRENT ADDRESS VERIFICATION' \tWHEN GM.PARENT_VALUE='TVI' THEN 'TECHNICAL VERIFICATION' \tELSE 'NA' \tEND END ENTITY_NAME, IFNULL(CDM.DOC_DESC,'')DOCUMENT_TYPE,IFNULL(child.DOC_DESC,'')DOCUMENT_NAME,IFNULL(DMS_ID,0),DMS_DOC_URL, A.DOCUMENT_ID,A.DMS_DOC_NUMBER,DATE_FORMAT(A.UPLOADED_DATE,'").append(this.dateFormatWithTime).append("')UPLOADED_DATE,1 CAT ").append(" FROM CR_UPLOADED_DOCUMENTS A ").append(" JOIN SEC_USER_M B ON A.UPLOADED_BY=B.USER_ID AND IFNULL(A.DOC_TYPE,'') NOT IN('PD')").append(" LEFT JOIN CR_STAGE_M S ON S.STAGE_ID=A.TXN_TYPE").append(" LEFT JOIN CR_DEAL_CUSTOMER_M CDCM ON(CDCM.CUSTOMER_ID=A.ENTITY_ID AND A.DOC_TYPE IN('PRAPPL','COAPPL','GUARANTOR','CIBIL')) ").append(" LEFT JOIN CR_DOCUMENT_M CDM ON (CDM.DOC_ID=A.DOC_ID) ").append(" LEFT JOIN CR_DOCUMENT_CHILD_M CHILD ON (CHILD.DOC_CHILD_ID=A.CHILD_DOC_ID)").append(" LEFT JOIN generic_master GM ON(GM.generic_key='IMAGE_UPLOAD_TYPE' AND GM.VALUE=A.DOC_Type)").append(" where txn_id='").append(dealId).append("' and TXN_TYPE='DC' and A.DOCUMENT_STATUS='A'").append(" UNION ").append(" SELECT A.TXN_ID, A.FILE_NAME, A.DOCUMENT_DESC,B.USER_NAME,S.STAGE_DESC,'PERSONAL DISCUSSION'DOC_Type,").append(" CDCM.CUSTOMER_NAME ENTITY_NAME,IFNULL(CDM.DOC_NAME,'')DOCUMENT_TYPE,''DOCUMENT_NAME,IFNULL(DMS_ID,0)DMS_ID,").append(" DMS_DOC_URL,A.DOCUMENT_ID,A.DMS_DOC_NUMBER,DATE_FORMAT(A.UPLOADED_DATE,'").append(this.dateFormatWithTime).append("')UPLOADED_DATE,2 CAT").append(" FROM CR_UPLOADED_DOCUMENTS A ").append(" JOIN SEC_USER_M B ON A.UPLOADED_BY=B.USER_ID AND A.DOC_TYPE='PD'").append(" LEFT JOIN CR_STAGE_M S ON S.STAGE_ID=A.TXN_TYPE ").append(" join cr_pd_documents_dtl pd on(pd.id=A.ENTITY_ID)").append(" join cr_pd_customer_dtl pdcust on(pdcust.PD_CUSTOMER_ID=pd.PD_CUSTOMER_ID)").append(" JOIN CR_DEAL_CUSTOMER_M CDCM ON(CDCM.CUSTOMER_ID=pdcust.GCD_ID) ").append(" LEFT JOIN cr_pd_document_m CDM ON (CDM.DOC_ID=pd.DOCUMENTS_ID) ").append(" where A.txn_id='").append(dealId).append("' and TXN_TYPE='DC' and A.DOCUMENT_STATUS='A'").append(" ORDER BY CAT,DOC_TYPE,ENTITY_NAME,UPLOADED_DATE").toString());

        logger.info(new StringBuilder().append("In getUploadUnderwritingData Document List Query : ").append(query).toString());      
        UnderwritingDocUploadVo uwDocVo = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());

      query = null;
      for (int i = 0; i < product.size(); i++)
      {
        data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          uwDocVo = new UnderwritingDocUploadVo();
          uwDocVo.setDealId(CommonFunction.checkNull(data.get(0)).trim());
          uwDocVo.setFileName(CommonFunction.checkNull(data.get(1)).trim());
          uwDocVo.setDocDescription(CommonFunction.checkNull(data.get(2)).trim());
          uwDocVo.setUserName(CommonFunction.checkNull(data.get(3)).trim());
          uwDocVo.setUploadedState(CommonFunction.checkNull(data.get(4)).trim());
          uwDocVo.setDocTypeDesc(CommonFunction.checkNull(data.get(5)).trim());
          uwDocVo.setEntityName(CommonFunction.checkNull(data.get(6)).trim());
          uwDocVo.setDocumentType(CommonFunction.checkNull(data.get(7)).trim());
          uwDocVo.setDocumentName(CommonFunction.checkNull(data.get(8)).trim());
          uwDocVo.setDmsDocId(CommonFunction.checkNull(data.get(9)).trim());
          uwDocVo.setDmsDocUrl(CommonFunction.checkNull(data.get(10)).trim());
          uwDocVo.setLbxDocId(CommonFunction.checkNull(data.get(11)).trim());
          uwDocVo.setDmsDocNumber(CommonFunction.checkNull(data.get(12)).trim());
          uwDocVo.setUploadedDate(CommonFunction.checkNull(data.get(13)).trim());
          list.add(uwDocVo);
          uwDocVo = null;
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      data = null;
    }

    return list;
  }

  public ArrayList getUploadUnderwritingDataForCm(String dealId)
  {
    ArrayList list = new ArrayList();
    ArrayList data = null;
    try {
        StringBuilder query = new StringBuilder(new StringBuilder().append(" SELECT A.TXN_ID, A.FILE_NAME, A.DOCUMENT_DESC, B.USER_NAME,S.STAGE_DESC, case A.DOC_Type when 'APPL' THEN 'APPLICATION'  WHEN 'PRAPPL' THEN 'APPLICANT' WHEN 'COAPPL' THEN 'CO APPLICANT'  WHEN 'GUARANTOR' THEN 'GUARANTOR' WHEN 'ASSET' THEN 'ASSET'  WHEN 'COLLATERAL' THEN 'COLLATERAL' WHEN 'CIBIL' THEN 'CUSTOMER' WHEN 'LVI' THEN 'LEGAL VERIFICATION'  WHEN 'TVI' THEN 'TECHNICAL VERIFICATION' WHEN 'RVI' THEN 'RCU VERIFICATION'  WHEN 'FVI' THEN 'FIELD VERIFICATION' WHEN 'FVILM' THEN 'FIELD VERIFICATION(CREDIT MANAGEMENT)'  WHEN 'RVILM' THEN 'RCU VERIFICATION(CREDIT MANAGEMENT)'  WHEN 'TVILM' THEN 'TECHNICAL VERIFICATION(CREDIT MANAGEMENT)' WHEN 'LVILM' THEN 'LEGAL VERIFICATION(CREDIT MANAGEMENT)'  ELSE (CASE WHEN GM.DESCRIPTION IS NULL THEN 'NA' ELSE GM.DESCRIPTION END) END AS DOC_TYPE  ,CASE WHEN A.DOC_TYPE IN('PRAPPL','COAPPL','GUARANTOR','CIBIL') THEN IFNULL(CDCM.CUSTOMER_NAME,'')  WHEN A.DOC_TYPE IN('APPL','',NULL) THEN 'APPLICATION'  WHEN A.DOC_TYPE='LVI' THEN 'LEGAL VERIFICATION(CP)' WHEN A.DOC_TYPE='TVI' THEN 'TECHNICAL VERIFICATION(CP)' WHEN A.DOC_TYPE='RVI' THEN 'RCU VERIFICATION(CP)' WHEN A.DOC_TYPE='FVI' THEN 'FIELD VERIFICATION(CP)' WHEN A.DOC_TYPE='LVILM' THEN 'LEGAL VERIFICATION(CM)' WHEN A.DOC_TYPE='TVILM' THEN 'TECHNICAL VERIFICATION(CM)' WHEN A.DOC_TYPE='RVILM' THEN 'RCU VERIFICATION(CM)' WHEN A.DOC_TYPE='FVILM' THEN 'FIELD VERIFICATION(CM)' WHEN A.DOC_TYPE='CROP' THEN 'CROP' WHEN A.DOC_TYPE='N' THEN 'NA' ELSE  \tCASE IFNULL(GM.PARENT_VALUE,'N') \tWHEN GM.PARENT_VALUE='OVI' THEN 'OFFICE VERIFICATION' \tWHEN GM.PARENT_VALUE='RVI' THEN 'CURRENT ADDRESS VERIFICATION' \tWHEN GM.PARENT_VALUE='TVI' THEN 'TECHNICAL VERIFICATION' \tELSE 'NA' \tEND END ENTITY_NAME, IFNULL(CDM.DOC_DESC,'')DOCUMENT_TYPE,IFNULL(child.DOC_DESC,'')DOCUMENT_NAME,IFNULL(DMS_ID,0),DMS_DOC_URL, A.DOCUMENT_ID,A.DMS_DOC_NUMBER,DATE_FORMAT(A.UPLOADED_DATE,'").append(this.dateFormatWithTime).append("')UPLOADED_DATE,A.TXN_TYPE,1 CAT ").append(" FROM CR_UPLOADED_DOCUMENTS A ").append(" JOIN SEC_USER_M B ON A.UPLOADED_BY=B.USER_ID AND IFNULL(A.DOC_TYPE,'') NOT IN('PD') ").append(" LEFT JOIN CR_STAGE_M S ON S.STAGE_ID=A.TXN_TYPE ").append(" LEFT JOIN CR_DEAL_CUSTOMER_M CDCM ON(CDCM.CUSTOMER_ID=A.ENTITY_ID AND A.DOC_TYPE IN('PRAPPL','COAPPL','GUARANTOR','CIBIL')) ").append(" LEFT JOIN CR_DOCUMENT_M CDM ON (CDM.DOC_ID=A.DOC_ID) ").append(" LEFT JOIN CR_DOCUMENT_CHILD_M CHILD ON (CHILD.DOC_CHILD_ID=A.CHILD_DOC_ID)").append(" LEFT JOIN generic_master GM ON(GM.generic_key='IMAGE_UPLOAD_TYPE' AND GM.VALUE=A.DOC_Type)").append(" where txn_id='").append(dealId).append("' and TXN_TYPE='LIM' ").toString());

        logger.info(new StringBuilder().append("In getUploadUnderwritingDataForCm...............query...........DAOImpl").append(query).toString());
      UnderwritingDocUploadVo uwDocVo = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());

      query = null;
      for (int i = 0; i < product.size(); i++)
      {
        data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          uwDocVo = new UnderwritingDocUploadVo();
          uwDocVo.setTxnId(CommonFunction.checkNull(data.get(0)).trim());
          uwDocVo.setFileName(CommonFunction.checkNull(data.get(1)).trim());
          uwDocVo.setDocDescription(CommonFunction.checkNull(data.get(2)).trim());
          uwDocVo.setUserName(CommonFunction.checkNull(data.get(3)).trim());
          uwDocVo.setUploadedState(CommonFunction.checkNull(data.get(4)).trim());
          uwDocVo.setDocTypeDesc(CommonFunction.checkNull(data.get(5)).trim());
          uwDocVo.setEntityName(CommonFunction.checkNull(data.get(6)).trim());
          uwDocVo.setDocumentType(CommonFunction.checkNull(data.get(7)).trim());
          uwDocVo.setDocumentName(CommonFunction.checkNull(data.get(8)).trim());
          uwDocVo.setDmsDocId(CommonFunction.checkNull(data.get(9)).trim());
          uwDocVo.setDmsDocUrl(CommonFunction.checkNull(data.get(10)).trim());
          uwDocVo.setLbxDocId(CommonFunction.checkNull(data.get(11)).trim());
          uwDocVo.setDmsDocNumber(CommonFunction.checkNull(data.get(12)).trim());
          uwDocVo.setUploadedDate(CommonFunction.checkNull(data.get(13)).trim());
          uwDocVo.setTxnType(CommonFunction.checkNull(data.get(14)).trim());
          list.add(uwDocVo);
          uwDocVo = null;
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      data = null;
    }

    return list;
  }

  public ArrayList getUploadUnderwritingDataForCmCp(String dealId)
  {
    ArrayList list = new ArrayList();
    ArrayList data = null;
    try {
      String deaId = ConnectionDAO.singleReturn(new StringBuilder().append("select LOAN_DEAL_ID from cr_loan_dtl where LOAN_ID='").append(dealId).append("'").toString());
      StringBuilder query = new StringBuilder();

      query.append("SELECT A.TXN_ID, A.FILE_NAME, A.DOCUMENT_DESC, B.USER_NAME,S.STAGE_DESC,A.TXN_TYPE,");
      query.append(" case A.DOC_Type when 'APPL' THEN 'APPLICATION'  WHEN 'PRAPPL' THEN 'APPLICANT' WHEN 'COAPPL' THEN 'CO APPLICANT'");
      query.append(" WHEN 'GUARANTOR' THEN 'GUARANTOR' WHEN 'ASSET' THEN 'ASSET' ");
      query.append(" WHEN 'COLLATERAL' THEN 'COLLATERAL' WHEN 'CIBIL' THEN 'CUSTOMER' WHEN 'LVI' THEN 'LEGAL VERIFICATION'");
      query.append(" WHEN 'TVI' THEN 'TECHNICAL VERIFICATION' WHEN 'RVI' THEN 'RCU VERIFICATION' ");
      query.append(" WHEN 'FVI' THEN 'FIELD VERIFICATION' WHEN 'FVILM' THEN 'FIELD VERIFICATION(CREDIT MANAGEMENT)' ");
      query.append(" WHEN 'RVILM' THEN 'RCU VERIFICATION(CREDIT MANAGEMENT)' ");
      query.append(" WHEN 'TVILM' THEN 'TECHNICAL VERIFICATION(CREDIT MANAGEMENT)' WHEN 'LVILM' THEN 'LEGAL VERIFICATION(CREDIT MANAGEMENT)'");
      query.append(" ELSE (CASE WHEN GM.DESCRIPTION IS NULL THEN 'NA' ELSE GM.DESCRIPTION END) END AS DOC_TYPE ");
      query.append(" ,CASE WHEN A.DOC_TYPE IN('PRAPPL','COAPPL','GUARANTOR','CIBIL') THEN IFNULL(CDCM.CUSTOMER_NAME,'') ");
      query.append(" WHEN A.DOC_TYPE IN('APPL','',NULL) THEN 'APPLICATION' ");
      query.append(" WHEN A.DOC_TYPE='LVI' THEN 'LEGAL VERIFICATION(CP)'");
      query.append(" WHEN A.DOC_TYPE='TVI' THEN 'TECHNICAL VERIFICATION(CP)'");
      query.append(" WHEN A.DOC_TYPE='RVI' THEN 'RCU VERIFICATION(CP)'");
      query.append(" WHEN A.DOC_TYPE='FVI' THEN 'FIELD VERIFICATION(CP)'");
      query.append(" WHEN A.DOC_TYPE='LVILM' THEN 'LEGAL VERIFICATION(CM)'");
      query.append(" WHEN A.DOC_TYPE='TVILM' THEN 'TECHNICAL VERIFICATION(CM)'");
      query.append(" WHEN A.DOC_TYPE='RVILM' THEN 'RCU VERIFICATION(CM)'");
      query.append(" WHEN A.DOC_TYPE='FVILM' THEN 'FIELD VERIFICATION(CM)'");
      query.append(" WHEN A.DOC_TYPE='CROP' THEN 'CROP'");
      query.append(" WHEN A.DOC_TYPE='N' THEN 'NA'");
      query.append(" ELSE ");
      query.append(" CASE IFNULL(GM.PARENT_VALUE,'N')");
      query.append(" WHEN GM.PARENT_VALUE='OVI' THEN 'OFFICE VERIFICATION'");
      query.append(" WHEN GM.PARENT_VALUE='RVI' THEN 'CURRENT ADDRESS VERIFICATION'");
      query.append(" WHEN GM.PARENT_VALUE='TVI' THEN 'TECHNICAL VERIFICATION'");
      query.append("ELSE 'NA'");
      query.append("  END");
      query.append(" END ENTITY_NAME,");
      query.append("  IFNULL(CDM.DOC_DESC,'')DOCUMENT_TYPE,IFNULL(child.DOC_DESC,'')DOCUMENT_NAME,IFNULL(DMS_ID,0),DMS_DOC_URL,");
      query.append(new StringBuilder().append(" A.DOCUMENT_ID,A.DMS_DOC_NUMBER,DATE_FORMAT(A.UPLOADED_DATE,'").append(this.dateFormatWithTime).append("')UPLOADED_DATE,1 CAT ").toString());
      query.append(" FROM CR_UPLOADED_DOCUMENTS A ");
      query.append(" JOIN SEC_USER_M B ON A.UPLOADED_BY=B.USER_ID AND IFNULL(A.DOC_TYPE,'') NOT IN('PD')");
      query.append(" LEFT JOIN CR_STAGE_M S ON S.STAGE_ID=A.TXN_TYPE");
      query.append(" LEFT JOIN CR_DEAL_CUSTOMER_M CDCM ON(CDCM.CUSTOMER_ID=A.ENTITY_ID AND A.DOC_TYPE IN('PRAPPL','COAPPL','GUARANTOR','CIBIL'))");
      query.append(" LEFT JOIN CR_DOCUMENT_M CDM ON (CDM.DOC_ID=A.DOC_ID) ");
      query.append(" LEFT JOIN CR_DOCUMENT_CHILD_M CHILD ON (CHILD.DOC_CHILD_ID=A.CHILD_DOC_ID)");
      query.append(" LEFT JOIN generic_master GM ON(GM.generic_key='IMAGE_UPLOAD_TYPE' AND GM.VALUE=A.DOC_Type)");
      query.append(new StringBuilder().append(" where txn_id='").append(deaId).append("' and TXN_TYPE='DC' ").toString());

      logger.info(new StringBuilder().append("In getUploadUnderwritingDataForCmCp...............query...........DAOImpl").append(query).toString());
      UnderwritingDocUploadVo uwDocVo = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      for (int i = 0; i < product.size(); i++)
      {
        data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          uwDocVo = new UnderwritingDocUploadVo();
          uwDocVo.setTxnId(CommonFunction.checkNull(data.get(0)).trim());
          uwDocVo.setFileName(CommonFunction.checkNull(data.get(1)).trim());
          uwDocVo.setDocDescription(CommonFunction.checkNull(data.get(2)).trim());
          uwDocVo.setUserName(CommonFunction.checkNull(data.get(3)).trim());
          uwDocVo.setUploadedState(CommonFunction.checkNull(data.get(4)).trim());
          uwDocVo.setTxnType(CommonFunction.checkNull(data.get(5)).trim());
          uwDocVo.setDocTypeDesc(CommonFunction.checkNull(data.get(6)).trim());
          uwDocVo.setEntityName(CommonFunction.checkNull(data.get(7)).trim());
          uwDocVo.setDocumentType(CommonFunction.checkNull(data.get(8)).trim());
          uwDocVo.setDocumentName(CommonFunction.checkNull(data.get(9)).trim());
          uwDocVo.setDmsDocId(CommonFunction.checkNull(data.get(10)).trim());
          uwDocVo.setDmsDocUrl(CommonFunction.checkNull(data.get(11)).trim());
          uwDocVo.setLbxDocId(CommonFunction.checkNull(data.get(12)).trim());
          uwDocVo.setDmsDocNumber(CommonFunction.checkNull(data.get(13)).trim());
          uwDocVo.setUploadedDate(CommonFunction.checkNull(data.get(14)).trim());
          list.add(uwDocVo);
          uwDocVo = null;
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      data = null;
    }
    return list;
  }
  /*public ArrayList getUploadUnderwritingDataForCmCp(String dealId)
  {
    ArrayList list = new ArrayList();
    ArrayList data = null;
    try {
      String deaId = ConnectionDAO.singleReturn(new StringBuilder().append("select LOAN_DEAL_ID from cr_loan_dtl where LOAN_ID='").append(dealId).append("'").toString());
      StringBuilder query = new StringBuilder();

      query.append("SELECT A.TXN_ID, A.FILE_NAME, A.DOCUMENT_DESC, B.USER_NAME,S.STAGE_DESC,A.TXN_TYPE,");
      query.append(" case A.DOC_Type when 'APPL' THEN 'APPLICATION'  WHEN 'PRAPPL' THEN 'APPLICANT' WHEN 'COAPPL' THEN 'CO APPLICANT'");
      query.append(" WHEN 'GUARANTOR' THEN 'GUARANTOR' WHEN 'ASSET' THEN 'ASSET' ");
      query.append(" WHEN 'COLLATERAL' THEN 'COLLATERAL' WHEN 'CIBIL' THEN 'CUSTOMER' WHEN 'LVI' THEN 'LEGAL VERIFICATION'");
      query.append(" WHEN 'TVI' THEN 'TECHNICAL VERIFICATION' WHEN 'RVI' THEN 'RCU VERIFICATION' ");
      query.append(" WHEN 'FVI' THEN 'FIELD VERIFICATION' WHEN 'FVILM' THEN 'FIELD VERIFICATION(CREDIT MANAGEMENT)' ");
      query.append(" WHEN 'RVILM' THEN 'RCU VERIFICATION(CREDIT MANAGEMENT)' ");
      query.append(" WHEN 'TVILM' THEN 'TECHNICAL VERIFICATION(CREDIT MANAGEMENT)' WHEN 'LVILM' THEN 'LEGAL VERIFICATION(CREDIT MANAGEMENT)'");
      query.append(" ELSE (CASE WHEN GM.DESCRIPTION IS NULL THEN 'NA' ELSE GM.DESCRIPTION END) END AS DOC_TYPE ");
      query.append(" ,CASE WHEN A.DOC_TYPE IN('PRAPPL','COAPPL','GUARANTOR','CIBIL') THEN IFNULL(CDCM.CUSTOMER_NAME,'') ");
      query.append(" WHEN A.DOC_TYPE IN('APPL','',NULL) THEN 'APPLICATION' ");
      query.append(" WHEN A.DOC_TYPE='LVI' THEN 'LEGAL VERIFICATION(CP)'");
      query.append(" WHEN A.DOC_TYPE='TVI' THEN 'TECHNICAL VERIFICATION(CP)'");
      query.append(" WHEN A.DOC_TYPE='RVI' THEN 'RCU VERIFICATION(CP)'");
      query.append(" WHEN A.DOC_TYPE='FVI' THEN 'FIELD VERIFICATION(CP)'");
      query.append(" WHEN A.DOC_TYPE='LVILM' THEN 'LEGAL VERIFICATION(CM)'");
      query.append(" WHEN A.DOC_TYPE='TVILM' THEN 'TECHNICAL VERIFICATION(CM)'");
      query.append(" WHEN A.DOC_TYPE='RVILM' THEN 'RCU VERIFICATION(CM)'");
      query.append(" WHEN A.DOC_TYPE='FVILM' THEN 'FIELD VERIFICATION(CM)'");
      query.append(" WHEN A.DOC_TYPE='CROP' THEN 'CROP'");
      query.append(" WHEN A.DOC_TYPE='N' THEN 'NA'");
      query.append(" ELSE ");
      query.append(" CASE IFNULL(GM.PARENT_VALUE,'N')");
      query.append(" WHEN GM.PARENT_VALUE='OVI' THEN 'OFFICE VERIFICATION'");
      query.append(" WHEN GM.PARENT_VALUE='RVI' THEN 'CURRENT ADDRESS VERIFICATION'");
      query.append(" WHEN GM.PARENT_VALUE='TVI' THEN 'TECHNICAL VERIFICATION'");
      query.append("ELSE 'NA'");
      query.append("  END");
      query.append(" END ENTITY_NAME,");
      query.append("  IFNULL(CDM.DOC_DESC,'')DOCUMENT_TYPE,IFNULL(child.DOC_DESC,'')DOCUMENT_NAME,IFNULL(DMS_ID,0),DMS_DOC_URL,");
      query.append(new StringBuilder().append(" A.DOCUMENT_ID,A.DMS_DOC_NUMBER,DATE_FORMAT(A.UPLOADED_DATE,'").append(this.dateFormatWithTime).append("')UPLOADED_DATE,1 CAT ").toString());
      query.append(" FROM CR_UPLOADED_DOCUMENTS A ");
      query.append(" JOIN SEC_USER_M B ON A.UPLOADED_BY=B.USER_ID AND IFNULL(A.DOC_TYPE,'') NOT IN('PD')");
      query.append(" LEFT JOIN CR_STAGE_M S ON S.STAGE_ID=A.TXN_TYPE");
      query.append(" LEFT JOIN CR_DEAL_CUSTOMER_M CDCM ON(CDCM.CUSTOMER_ID=A.ENTITY_ID AND A.DOC_TYPE IN('PRAPPL','COAPPL','GUARANTOR','CIBIL'))");
      query.append(" LEFT JOIN CR_DOCUMENT_M CDM ON (CDM.DOC_ID=A.DOC_ID) ");
      query.append(" LEFT JOIN CR_DOCUMENT_CHILD_M CHILD ON (CHILD.DOC_CHILD_ID=A.CHILD_DOC_ID)");
      query.append(" LEFT JOIN generic_master GM ON(GM.generic_key='IMAGE_UPLOAD_TYPE' AND GM.VALUE=A.DOC_Type)");
      query.append(new StringBuilder().append(" where txn_id='").append(deaId).append("' and TXN_TYPE='DC' ").toString());

      logger.info(new StringBuilder().append("In getUploadUnderwritingDataForCmCp...............query...........DAOImpl").append(query).toString());
      UnderwritingDocUploadVo uwDocVo = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      for (int i = 0; i < product.size(); i++)
      {
        data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          uwDocVo = new UnderwritingDocUploadVo();
          uwDocVo.setTxnId(CommonFunction.checkNull(data.get(0)).trim());
          uwDocVo.setFileName(CommonFunction.checkNull(data.get(1)).trim());
          uwDocVo.setDocDescription(CommonFunction.checkNull(data.get(2)).trim());
          uwDocVo.setUserName(CommonFunction.checkNull(data.get(3)).trim());
          uwDocVo.setUploadedState(CommonFunction.checkNull(data.get(4)).trim());
          uwDocVo.setTxnType(CommonFunction.checkNull(data.get(5)).trim());
          uwDocVo.setDocTypeDesc(CommonFunction.checkNull(data.get(6)).trim());
          uwDocVo.setEntityName(CommonFunction.checkNull(data.get(7)).trim());
          uwDocVo.setDocumentType(CommonFunction.checkNull(data.get(8)).trim());
          uwDocVo.setDocumentName(CommonFunction.checkNull(data.get(9)).trim());
          uwDocVo.setDmsDocId(CommonFunction.checkNull(data.get(10)).trim());
          uwDocVo.setDmsDocUrl(CommonFunction.checkNull(data.get(11)).trim());
          uwDocVo.setLbxDocId(CommonFunction.checkNull(data.get(12)).trim());
          uwDocVo.setDmsDocNumber(CommonFunction.checkNull(data.get(13)).trim());
          uwDocVo.setUploadedDate(CommonFunction.checkNull(data.get(14)).trim());
          list.add(uwDocVo);
          uwDocVo = null;
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      data = null;
    }
    return list;
  }*/

  public boolean deleteDocumentUploadEntry(String documentName, String dealId) {
    logger.info(new StringBuilder().append("In deleteDocumentUploadEntry .......DAOImpl..").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(documentName).trim())).toString());
    boolean status = false;
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("delete from cr_uploaded_documents where file_name='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(documentName).trim())).append("' and txn_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' and txn_type='DC'").toString());
      this.qryList = new ArrayList();
      this.qryList.add(query);
      status = ConnectionDAO.sqlInsUpdDelete(this.qryList);
      logger.info(new StringBuilder().append("Deletion Status :").append(status).toString());
      query = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      documentName = null;
      dealId = null;
    }
    return status;
  }

  public boolean deleteDocumentUploadEntryForCm(String documentName, String dealId)
  {
    logger.info(new StringBuilder().append("In deleteDocumentUploadEntry .......DAOImpl..").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(documentName).trim())).toString());
    boolean status = false;
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("delete from cr_uploaded_documents where file_name='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(documentName).trim())).append("' and txn_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' and txn_type='LIM'").toString());
      this.qryList = new ArrayList();
      this.qryList.add(query);
      status = ConnectionDAO.sqlInsUpdDelete(this.qryList);
      logger.info(new StringBuilder().append("Deletion Status :").append(status).toString());
      query = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      documentName = null;
      dealId = null;
    }
    return status;
  }

  public String callProcedure(String dealCap, String dealId)
  {
    ArrayList list = new ArrayList();
    String message = "";
    try
    {
      int dId = Integer.parseInt(dealId);
      StringBuilder custIdQ = new StringBuilder();
      StringBuilder custId = new StringBuilder();
      StringBuilder suplId = new StringBuilder();
      StringBuilder manfId = new StringBuilder();
      StringBuilder supllierIdQ = new StringBuilder();
      StringBuilder exactManfId = new StringBuilder();
      StringBuilder exactSuplId = new StringBuilder();

      custIdQ.append(new StringBuilder().append("select DEAL_CUSTOMER_ID from cr_deal_dtl where DEAL_ID=").append(dealId).toString());
      suplId.append("SU;");
      manfId.append("MF;");
      custId.append(ConnectionDAO.singleReturn(custIdQ.toString()));
      logger.info(new StringBuilder().append("In callProcedure for deal customerId: ").append(custId).toString());
      supllierIdQ.append(new StringBuilder().append("select distinct ASSET_SUPPLIER from cr_deal_collateral_m d,cr_asset_collateral_m a  where d.ASSETID=a.ASSET_ID and a.ASSET_TYPE='ASSET'  and  DEAL_ID=").append(dealId).toString());

      logger.info(new StringBuilder().append("In callProcedure for deal supplier: ").append(supllierIdQ.toString()).toString());
      ArrayList supllierIdList = ConnectionDAO.sqlSelect(supllierIdQ.toString());

      supllierIdQ = null;

      if (supllierIdList.size() > 0)
      {
        for (int i = 0; i < supllierIdList.size(); i++)
        {
          ArrayList subsupllierIdList = (ArrayList)supllierIdList.get(i);
          if (subsupllierIdList.size() > 0)
            suplId.append(new StringBuilder().append(CommonFunction.checkNull(subsupllierIdList.get(0))).append("|SU;").toString());
        }
      }
      logger.info(new StringBuilder().append("In callProcedure for deal ## suplId ## ").append(suplId).toString());
      logger.info(new StringBuilder().append("In callProcedure for deal appendSQL true----  in check index Of").append(suplId.lastIndexOf("SU;")).append("------").append(suplId.length() - 3).toString());
      if (suplId.lastIndexOf("SU;") == suplId.length() - 3)
      {
        logger.info("In callProcedure for deal appendSQL true----  in check index Of");
        exactSuplId.append(suplId.substring(0, suplId.length() - 3));
        logger.info(new StringBuilder().append("In callProcedure for deal ...suplId.").append(exactSuplId).toString());
      }
      StringBuilder manufactIdQ = new StringBuilder();
      manufactIdQ.append(new StringBuilder().append("select distinct ASSET_MANUFATURER from cr_deal_collateral_m d,cr_asset_collateral_m a  where d.ASSETID=a.ASSET_ID and a.ASSET_TYPE='ASSET'  and  DEAL_ID=").append(dealId).toString());

      logger.info(new StringBuilder().append("In callProcedure for deal manufact: ").append(manufactIdQ.toString()).toString());
      ArrayList manufactIdList = ConnectionDAO.sqlSelect(manufactIdQ.toString());
      logger.info(new StringBuilder().append("manufactIdList.size(): ").append(manufactIdList.size()).toString());
      manufactIdQ = null;
      if (manufactIdList.size() > 0)
      {
        for (int i = 0; i < manufactIdList.size(); i++)
        {
          ArrayList submanufactIdList = (ArrayList)manufactIdList.get(i);
          if (submanufactIdList.size() > 0)
          {
            manfId.append(new StringBuilder().append(CommonFunction.checkNull(submanufactIdList.get(0))).append("|MF;").toString());
          }
        }
      }

      logger.info(new StringBuilder().append("In callProcedure for deal ## manfId ## ").append(manfId).toString());
      logger.info(new StringBuilder().append("In callProcedure for deal In appendSQL true----  in check index Of").append(manfId.lastIndexOf("MF;")).append("------").append(manfId.length() - 3).toString());
      if (manfId.lastIndexOf("MF;") == manfId.length() - 3)
      {
        logger.info("In appendSQL true----  in check index Of");
        exactManfId.append(manfId.substring(0, manfId.length() - 3));
        logger.info(new StringBuilder().append("In callProcedure for deal.exactManfId  .").append(exactManfId).toString());
      }
      StringBuilder productQuery = new StringBuilder();

      productQuery.append(new StringBuilder().append("select DEAL_PRODUCT,DEAL_SCHEME,DEAL_LOAN_AMOUNT,DEAL_MARGIN_AMOUNT,DEAL_LOAN_ID from cr_deal_loan_dtl where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
      logger.info(new StringBuilder().append("In callProcedure for deal productQuery: ").append(productQuery).toString());
      ArrayList productList = ConnectionDAO.sqlSelect(productQuery.toString());

      productQuery = null;
      StringBuilder checkQuery = new StringBuilder();

      checkQuery.append(new StringBuilder().append("select DEAL_CHARGE_DTL_ID from cr_deal_txncharges_dtl where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
      logger.info(new StringBuilder().append("checkQuery: ").append(checkQuery).toString());
      boolean status = ConnectionDAO.checkStatus(checkQuery.toString());

      checkQuery = null;
      if (!status)
      {
        String repayQuery = new StringBuilder().append("select DEAL_REPAYMENT_TYPE from cr_deal_loan_dtl where deal_id='").append(dealId).append("'").toString();
        String repay = ConnectionDAO.singleReturn(repayQuery.toString());
        String q1="select count(1) from cr_deal_dtl where rec_status is not null and deal_id='"+dealId+"'";
        int count=Integer.parseInt(ConnectionDAO.singleReturn(q1));
        if(count>0){
        RefreshFlagVo vo1 = new RefreshFlagVo();
        vo1.setRecordId(Integer.parseInt(dealId));
        vo1.setTabIndex(6);
        vo1.setModuleName("CP");
        vo1.setNonInstallment(repay);
        RefreshFlagValueInsert.updateRefreshFlag(vo1);
        }
        for (int i = 0; i < productList.size(); i++)
        {
          ArrayList subproductList = (ArrayList)productList.get(i);
          if (subproductList.size() > 0)
          {
            StringBuffer chargeStr = new StringBuffer();
            if (!CommonFunction.checkNull(subproductList.get(2)).equalsIgnoreCase(""))
              chargeStr.append(new StringBuilder().append("2;").append(subproductList.get(2)).append("|").toString());
            if (!CommonFunction.checkNull(subproductList.get(3)).equalsIgnoreCase(""))
              chargeStr.append(new StringBuilder().append("3;").append(CommonFunction.checkNull(subproductList.get(3))).append("|").toString());
            String bpStr = new StringBuilder().append("CS;").append(custId).append("|").append(exactSuplId).append(exactManfId).toString();
            String dealLoanId = CommonFunction.checkNull(subproductList.get(4));
            int loanDId = 0;
            if (!dealLoanId.equalsIgnoreCase(""))
              loanDId = Integer.parseInt(dealLoanId);
            logger.info(new StringBuilder().append(" STAGE INFO: ").append(dealCap).append("DealLoanId from crdealLoandtl: ").append(loanDId).append(" Total Charges: ").append(chargeStr).append(" bpStr:  ").append(bpStr).append(" Product: ").append(subproductList.get(0)).append(" Scheme: ").append(subproductList.get(1)).toString());
            logger.info("GET_CHARGES in deal capturing");
            ArrayList in = new ArrayList();
            ArrayList out = new ArrayList();
            ArrayList outMessages = new ArrayList();
            StringBuilder s1 = new StringBuilder();
            StringBuilder s2 = new StringBuilder();
            try
            {
              in.add(dealCap);
              in.add(Integer.valueOf(loanDId));
              in.add(CommonFunction.checkNull(subproductList.get(0)).toString());
              in.add(CommonFunction.checkNull(subproductList.get(1)).toString());
              in.add(chargeStr.toString());
              in.add(bpStr);
              out.add(s1);
              out.add(s2);
              outMessages = (ArrayList)ConnectionDAO.callSP("GET_CHARGES", in, out);
              if ((outMessages != null) && (outMessages.size() > 0))
              {
                s1.append(CommonFunction.checkNull(outMessages.get(0)));

                if ((s1 != null) && (s1.toString().equalsIgnoreCase("S")))
                {
                  message = s1.toString();
                  logger.info(new StringBuilder().append("Procedure s1----").append(s1).toString());
                }
                else if ((s1 != null) && (s1.toString().equalsIgnoreCase("E")))
                {
                  s2.append(CommonFunction.checkNull(outMessages.get(1)));
                  logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
                  message = s2.toString();
                }
                logger.info(new StringBuilder().append("s1  :  ").append(s1).toString());
                logger.info(new StringBuilder().append("s2  :  ").append(s2).toString());

                s1 = null;
                s2 = null;
              }
            }
            catch (Exception e) {
              e.printStackTrace();
            }
            finally
            {
              in = null;
              out = null;
              outMessages = null;
              exactManfId = null;
              exactSuplId = null;
              dealCap = null;
              dealId = null;
            }
          }
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }return message;
  }

  public ArrayList getchargesDetail(String dealCap, String dealId) {
    ArrayList list = new ArrayList();
    try
    {
      ChargeVo vo = null;
      StringBuilder query = new StringBuilder();
      query.append("select DEAL_CHARGE_DTL_ID,DEAL_CHARGE_TYPE,DEAL_CHARGE_CODE,CHARGE_DESC,");
      query.append(" GM.DESCRIPTION,v.DEALER_DESC,DEAL_CHARGE_CALCULATED_AMOUNT,");
      query.append(" DEAL_CHARGE_FINAL_AMOUNT,d.CUSTOMER_NAME,p.DEAL_LOAN_AMOUNT,(IFNULL(P.DEAL_ASSET_COST,0)-IFNULL(P.DEAL_LOAN_AMOUNT,0)) AS 'MARGIN AMOUNT',");
      query.append(" DEAL_CHARGE_CALCULATED_ON,if(DEAL_CHARGE_METHOD='P','PERCENTAGE','FLAT'),if(DEAL_CHARGE_TAX_INCLUSIVE='N','NO','YES'),");
      query.append(" DEAL_CHARGE_TAX_RATE1,DEAL_CHARGE_TAX_RATE2,DEAL_CHARGE_BP_TYPE,if(DEAL_MIN_CHARGE_METHOD='P','PERCENTAGE','FLAT'),DEAL_CHARGE_MIN_CHARGE_AMOUNT,");
      query.append(" DEAL_CHARGE_TAX_APPLICABLE,DEAL_CHARGE_TDS_APPLICABLE,DEAL_CHARGE_TAX_AMOUNT1,DEAL_CHARGE_TAX_AMOUNT2,DEAL_CHARGE_MIN_CHARGE_AMOUNT,DEAL_CHARGE_TDS_RATE,DEAL_CHARGE_TDS_AMOUNT,DEAL_CHARGE_NET_AMOUNT,DEAL_CHARGE_APPLICATION_STAGE, ");
      query.append(new StringBuilder().append(" (SELECT sum(DEAL_CHARGE_CALCULATED_AMOUNT) from  CR_DEAL_TXNCHARGES_DTL where DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' and DEAL_CHARGE_BP_TYPE='CS' and DEAL_CHARGE_TYPE='R') as CUST_CHARGE_AMOUNT, ").toString());
      query.append(new StringBuilder().append(" (SELECT sum(DEAL_CHARGE_FINAL_AMOUNT) from  CR_DEAL_TXNCHARGES_DTL where DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' and DEAL_CHARGE_BP_TYPE='CS' and DEAL_CHARGE_TYPE='R') as CUST_FINAL_CHARGE_AMOUNT ").toString());
      query.append(" from cr_deal_txncharges_dtl t ");
      query.append(" left join com_charge_code_m c on t.DEAL_CHARGE_CODE=c.CHARGE_CODE ");
      query.append(" left join cr_dsa_dealer_m v on v.DEALER_ID=t.DEAL_CHARGE_BP_ID and v.BP_TYPE=t.DEAL_CHARGE_BP_TYPE and v.REC_STATUS='A' ");
      query.append(" left join cr_deal_customer_m d on d.CUSTOMER_ID=t.DEAL_CHARGE_BP_ID ");
      query.append(" left join cr_deal_loan_dtl p on p.DEAL_ID=t.DEAL_ID  ");
      query.append(" left join generic_master GM on GM.VALUE=DEAL_CHARGE_BP_TYPE and GM.GENERIC_KEY='BPTYPE' ");
      query.append(new StringBuilder().append(" where  t.DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' ").toString());
      logger.info(new StringBuilder().append("getchargesDetail in deal  query ").append(query.toString()).toString());
      ArrayList charges = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getchargesDetail in deal  size ").append(charges.size()).toString());

      query = null;

      for (int i = 0; i < charges.size(); i++)
      {
        ArrayList subcharges = (ArrayList)charges.get(i);
        if (subcharges.size() > 0)
        {
          vo = new ChargeVo();
          vo.setChargeId(CommonFunction.checkNull(subcharges.get(0)).trim());
          if (CommonFunction.checkNull(subcharges.get(1)).trim().equals("R"))
          {
            vo.setChargeType("Receivable");
          }
          else if (CommonFunction.checkNull(subcharges.get(1)).trim().equals("P"))
          {
            vo.setChargeType("Payable");
          }
          vo.setChargeCode(CommonFunction.checkNull(subcharges.get(2)).trim());
          vo.setChargeDesc(CommonFunction.checkNull(subcharges.get(3)).trim());
          vo.setChargeBPType(CommonFunction.checkNull(subcharges.get(4)).trim());
          if (CommonFunction.checkNull(subcharges.get(16)).trim().equals("CS"))
          {
            vo.setChargeBPId(CommonFunction.checkNull(subcharges.get(8)).trim());
          }
          else
          {
            vo.setChargeBPId(CommonFunction.checkNull(subcharges.get(5)).trim());
          }
          if (!CommonFunction.checkNull(subcharges.get(6)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(6)).trim());
            vo.setChargeCal(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(7)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(7)).trim());
            vo.setChargeFinal(this.myFormatter.format(reconNum));
          }

          vo.setLoanAmount(CommonFunction.checkNull(subcharges.get(9)).trim());
          vo.setMarginAmount(CommonFunction.checkNull(subcharges.get(10)).trim());
          vo.setChargeCalculatedOn(CommonFunction.checkNull(subcharges.get(11)).trim());
          vo.setChargeMethod(CommonFunction.checkNull(subcharges.get(12)).trim());
          vo.setTaxsInclusive(CommonFunction.checkNull(subcharges.get(13)).trim());
          if (!CommonFunction.checkNull(subcharges.get(14)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(14)).trim());
            vo.setTaxtRat1(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(15)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(15)).trim());
            logger.info(new StringBuilder().append("setTaxtRat2: ").append(reconNum).toString());
            vo.setTaxtRat2(this.myFormatter.format(reconNum));
          }
          vo.setMinChargeMethod(CommonFunction.checkNull(subcharges.get(17)).trim());
          vo.setMinChargeCalculatedOn(CommonFunction.checkNull(subcharges.get(18)).trim());
          vo.setDealChargeTaxApp(CommonFunction.checkNull(subcharges.get(19)).trim());
          vo.setDealChargeTdsApp(CommonFunction.checkNull(subcharges.get(20)).trim());
          if (!CommonFunction.checkNull(subcharges.get(21)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(21)).trim());
            vo.setDealChargeTaxAmount1(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(22)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(22)).trim());

            vo.setDealChargeTaxAmount2(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(23)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(23)).trim());
            vo.setDealChargeMinChargeAmount(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(24)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(24)).trim());

            vo.setDealChargeTdsRate(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(25)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(25)).trim());
            vo.setDealChargeTdsAmount(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(26)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(26)).trim());

            vo.setDealChargeNetAmount(this.myFormatter.format(reconNum));
          }
          vo.setApplStage(CommonFunction.checkNull(subcharges.get(27)));
          if (!CommonFunction.checkNull(subcharges.get(28)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(28)).trim());
            vo.setCustomerCharge(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(subcharges.get(29)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(29)).trim());
            vo.setCustomerFinalCharge(this.myFormatter.format(reconNum));
          }

          list.add(vo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    } finally {
      dealCap = null;
      dealId = null;
    }
    return list;
  }

  public ArrayList fetchHeader(String id)
  {
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      StringBuilder query1 = new StringBuilder();
      logger.info("In fetchHeader.....DAOImpl.....................");
      query.append(new StringBuilder().append("select d.deal_id, deal_no,c.CUSTOMER_NAME,DATE_FORMAT(deal_date,'").append(this.dateFormat).append("'),c.CUSTOMER_NAME from cr_deal_dtl d left join cr_deal_customer_m c").append(" on d.DEAL_CUSTOMER_ID = c.CUSTOMER_ID").append(" where d.DEAL_ID=").append(id).toString());

      query1.append(new StringBuilder().append("select DEAL_PRODUCT_CATEGORY,deal_product,DEAL_SCHEME,DEAL_LOAN_AMOUNT,DEAL_MARGIN_AMOUNT  from cr_deal_loan_dtl where  deal_id=").append(id).toString());

      logger.info(new StringBuilder().append("In fetchHeader.......query...........DAOImpl........").append(query1).toString());
      HeaderInfoVo vo = null;
      HeaderInfoVo vo1 = null;
      ArrayList header = ConnectionDAO.sqlSelect(query.toString());
      ArrayList header1 = ConnectionDAO.sqlSelect(query1.toString());

      query1 = null;
      query = null;

      if (header1.size() > 1)
      {
        vo1 = new HeaderInfoVo();
        ArrayList subheader = (ArrayList)header1.get(0);
        vo1.setDealProductCat(CommonFunction.checkNull(subheader.get(0)).toString());
        vo1.setDealProduct("Multiple");
        vo1.setDealScheme("Multiple");
      }
      else if ((header1 != null) && (header1.size() != 0))
      {
        vo1 = new HeaderInfoVo();
        ArrayList subheader = (ArrayList)header1.get(0);
        vo1.setDealProductCat(CommonFunction.checkNull(subheader.get(0)).toString());
        vo1.setDealProduct(CommonFunction.checkNull(subheader.get(1)).toString());
        vo1.setDealScheme(CommonFunction.checkNull(subheader.get(2)).toString());
      }

      for (int i = 0; i < header.size(); i++)
      {
        ArrayList subheader = (ArrayList)header.get(i);
        if (subheader.size() > 0) {
          vo = new HeaderInfoVo();
          vo.setDealId(CommonFunction.checkNull(subheader.get(0)).toString());
          vo.setDealNo(CommonFunction.checkNull(subheader.get(1)).toString());
          if (subheader.get(2) != null)
          {
            vo.setDealCustomerName(CommonFunction.checkNull(subheader.get(2)).toString());
          }
          else if (subheader.get(4) != null)
          {
            vo.setDealCustomerName(CommonFunction.checkNull(subheader.get(4)).toString());
          }

          vo.setDealDate(CommonFunction.checkNull(subheader.get(3)).toString());
          list.add(vo);
          vo = null;
        }
      }
      list.add(vo1);
      vo1 = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      id = null;
    }

    return list;
  }

  public ArrayList getDealHeader(String id)
  {
	    ArrayList list = new ArrayList();
	    try
	    {

		  String quey1="SELECT DEAL_PRODUCT FROM cr_deal_loan_dtl WHERE DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()+"' ";
		  String quey2="SELECT DEAL_SCHEME FROM cr_deal_loan_dtl WHERE DEAL_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()+"' ";
		  String Result1=ConnectionDAO.singleReturn(quey1);
		  String Result2=ConnectionDAO.singleReturn(quey2);
		  String dealloanId = CommonFunction.minDealLoanId(id);  
			// String dealloanId = CommonFunction.minDealLoanId(id);  
	      StringBuilder query = new StringBuilder();
			
			 query.append(" select d.deal_id, deal_no,d.DEAL_CUSTOMER_ID,deal.CUSTOMER_NAME,DATE_FORMAT(deal_date,'"+dateFormat+"'),p.PRODUCT_DESC,s.SCHEME_DESC,P.PRODUCT_CATEGORY,d.REC_STATUS,S.MIN_AMT_FIN,S.MAX_AMT_FIN  from cr_deal_dtl d");
			 query.append(" left join cr_deal_loan_dtl l on d.DEAL_ID=l.DEAL_ID  ");
					 
						/*	" left join cr_product_m p on l.DEAL_PRODUCT=p.PRODUCT_ID"+
							" left join cr_scheme_m s on l.DEAL_SCHEME=s.SCHEME_ID"+
							" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID"+
							" where d.DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()+" limit 1");*/
			 //addedby harsh
				if(!CommonFunction.checkNull(dealloanId).equalsIgnoreCase("")){
					query.append(" AND l.DEAL_LOAN_ID = '"+dealloanId+"' ");
					}else{
						query.append(" and l.DEAL_LOAN_ID = (select min(DEAL_LOAN_ID) from cr_DEAL_LOAN_DTL WHERE DEAL_ID=D.DEAL_ID) ");
					}
					query.append(" left join cr_lead_dtl l1 on d.lead_id=l1.Lead_id  ");
					if(CommonFunction.checkNull(Result1).equalsIgnoreCase("")){
						query.append(" left join cr_product_m p on l1.PRODUCT=p.PRODUCT_ID ");
					}else{
					query.append(" left join cr_product_m p on l.DEAL_PRODUCT=p.PRODUCT_ID ");
					}
					if(CommonFunction.checkNull(Result2).equalsIgnoreCase("")){
						query.append(" left join cr_scheme_m s on l1.SCHEME=s.SCHEME_ID ");
					}else{
				    query.append(" left join cr_scheme_m s on l.DEAL_SCHEME=s.SCHEME_ID ");
					}
					query.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
					query.append(" where d.DEAL_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()+" limit 1 ");
			 
			
			logger.info("getDealHeader Query: "+query.toString());
			
	      HeaderInfoVo vo = null;
	      ArrayList header = ConnectionDAO.sqlSelect(query.toString());

	      query = null;
	      int size = header.size();
	      for (int i = 0; i < size; i++)
	      {
	        ArrayList header1 = (ArrayList)header.get(i);
	        if ((header1 != null) && (header1.size() > 0))
	        {
	          vo = new HeaderInfoVo();
	          vo.setDealId(CommonFunction.checkNull(header1.get(0)).trim());
	          vo.setDealNo(CommonFunction.checkNull(header1.get(1)).trim());
	          vo.setDealCustomerId(CommonFunction.checkNull(header1.get(2)).trim());
	          vo.setDealCustomerName(CommonFunction.checkNull(header1.get(3)).trim());
	          vo.setDealDate(CommonFunction.checkNull(header1.get(4)).trim());
	          vo.setDealProduct(CommonFunction.checkNull(header1.get(5)).trim());
	          vo.setDealScheme(CommonFunction.checkNull(header1.get(6)).trim());
	          vo.setDealProductCat(CommonFunction.checkNull(header1.get(7)).trim());
	          vo.setSchemeMinAmt(CommonFunction.checkNull(header1.get(9)).trim());
	          vo.setSchemeMaxAmt(CommonFunction.checkNull(header1.get(10)).trim());
	          list.add(vo);
	          vo = null;
	        }
	        header1.clear();
	        header1 = null;
	      }
	      header.clear();
	      header = null;
	      id = null;
	    }
	    catch (Exception e)
	    {
	      e.printStackTrace();
	    }

	    return list;
	  }

  public String getAppraiserType(String dealId, String verificationId)
  {
    String flag = "";
    StringBuilder query = new StringBuilder();
    query.append(new StringBuilder().append("SELECT APPRAISER_TYPE FROM cr_deal_verification_dtl WHERE DEAL_ID= '").append(dealId).append("' and VERIFICATION_ID=").append(verificationId).append("").toString());
    logger.info(new StringBuilder().append("APPRAISER_TYPE:::::::::::::::::").append(query.toString()).toString());
    try
    {
      flag = ConnectionDAO.singleReturn(query.toString());
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      query = null;
      dealId = null;
      verificationId = null;
    }
    return flag;
  }

  public ArrayList getDealHeaderForCm(String id)
  {
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append(" select distinct cld.LOAN_ID,cld.LOAN_NO,cld.LOAN_REFERENCE_NO,gcd.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,cld.LOAN_PRODUCT_CATEGORY,DATE_FORMAT(cld.LOAN_INITIATION_DATE,'").append(this.dateFormat).append("') from cr_loan_dtl cld ").append("left join cr_product_m p on cld.loan_product=p.PRODUCT_ID  left join gcd_customer_m gcd on gcd.CUSTOMER_ID=cld.loan_CUSTOMER_ID").append(" left join cr_scheme_m s on cld.loan_SCHEME=s.SCHEME_ID ").append(" where cld.LOAN_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()).append(" limit 1").toString());

      logger.info(new StringBuilder().append("getDealHeader Query: ").append(query).toString());

      HeaderInfoVo vo = null;
      ArrayList header = ConnectionDAO.sqlSelect(query.toString());

      query = null;
      for (int i = 0; i < header.size(); i++)
      {
        ArrayList header1 = (ArrayList)header.get(i);
        if ((header1 != null) && (header1.size() > 0))
        {
          vo = new HeaderInfoVo();
          vo.setDealId(CommonFunction.checkNull(header1.get(0)).trim());
          vo.setDealNo(CommonFunction.checkNull(header1.get(1)).trim());

          vo.setDealCustomerName(CommonFunction.checkNull(header1.get(3)).trim());

          vo.setDealProduct(CommonFunction.checkNull(header1.get(4)).trim());
          vo.setDealScheme(CommonFunction.checkNull(header1.get(5)).trim());
          vo.setDealProductCat(CommonFunction.checkNull(header1.get(6)).trim());
          vo.setDealDate(CommonFunction.checkNull(header1.get(7)).trim());
          list.add(vo);
          vo = null;
        }
        header1 = null;
      }
      header = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return list;
  }

  public String checkStage(String dealId)
  {
    String status = "";
    StringBuilder productCategoryType = new StringBuilder();
    StringBuilder commAddr = new StringBuilder();
    StringBuilder gAddr = new StringBuilder();
    String gauranterStatus = "";
    String coapplicantStatus = "";
    ArrayList gCheckAddr = new ArrayList();
    StringBuilder coAddr = new StringBuilder();
    ArrayList coCheckAddr = new ArrayList();
    StringBuilder guram = new StringBuilder();
    StringBuilder tenure = new StringBuilder();
    StringBuilder sdAmount = new StringBuilder();
    StringBuilder checkSDAm = new StringBuilder();
    StringBuilder q1 = new StringBuilder();
    StringBuilder q2 = new StringBuilder();
    StringBuilder q3 = new StringBuilder();
    StringBuilder q4 = new StringBuilder();
    StringBuilder q5 = new StringBuilder();
    StringBuilder q8 = new StringBuilder();
    StringBuilder q9 = new StringBuilder();
    StringBuilder q10 = new StringBuilder();
    StringBuilder q11 = new StringBuilder();
    StringBuilder checkSDQ = new StringBuilder();
    StringBuilder q12 = new StringBuilder();
    StringBuilder q7 = new StringBuilder();
    StringBuilder q13 = new StringBuilder();
    StringBuilder q15 = new StringBuilder();
    StringBuilder q18 = new StringBuilder();
    StringBuilder q19 = new StringBuilder();
    StringBuilder q20 = new StringBuilder();
    StringBuilder q21 = new StringBuilder();
    StringBuilder q22 = new StringBuilder();
    StringBuilder q23 = new StringBuilder();
    q22.append(new StringBuilder().append("SELECT IFNULL(ASSET_MANDATORY_AT_DEAL,'N') FROM CR_DEAL_LOAN_DTL A JOIN CR_PRODUCT_M B ON A.DEAL_PRODUCT=B.PRODUCT_ID WHERE A.DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
    String assetMandatoryFlag = ConnectionDAO.singleReturn(q22.toString());

    q23.append(new StringBuilder().append("select count(1) from cr_deal_collateral_m a join cr_asset_collateral_m b on(b.ASSET_ID=a.ASSETID) where b.ASSET_TYPE='ASSET'  and a.DEAL_ID=").append(dealId.trim()).toString());
    int noOfTotalAsset = Integer.parseInt(ConnectionDAO.singleReturn(q23.toString()));

    productCategoryType.append(new StringBuilder().append("select count(1) from cr_deal_loan_dtl where DEAL_PRODUCT_CATEGORY!='TA' and DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
    String referenceCountParaQuery = "select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY='APPLICANT_REFERENCE_COUNT'";
    String referenceCountQuery = new StringBuilder().append("select count(*) from cr_deal_reference_m where ifnull(BPTYPE,'CS')='CS' and BPID=(select DEAL_CUSTOMER_ID from cr_deal_dtl where deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("')").toString();
    q1.append(new StringBuilder().append("select DEAL_CUSTOMER_ID from cr_deal_dtl where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
    q2.append(new StringBuilder().append("select DEAL_LOAN_ID from cr_deal_loan_dtl where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
    q3.append(new StringBuilder().append("select DEAL_ID from cr_deal_collateral_m where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
    q4.append(new StringBuilder().append("select count(1) from cr_deal_txncharges_dtl where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
    q5.append(new StringBuilder().append("select DOC_STATUS from cr_document_dtl where TXNID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append(" and ENTITY_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append(" and DOC_MANDATORY='Y' and STAGE_ID='PRS' AND TXN_TYPE='DC'").toString());
    q9.append(new StringBuilder().append("select DOC_STATUS from cr_document_dtl where TXNID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append(" and ENTITY_ID in (select DEAL_CUSTOMER_ID from cr_deal_customer_role where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append(") and DOC_MANDATORY='Y' and STAGE_ID='PRS' AND TXN_TYPE='DC'").toString());
    q10.append(new StringBuilder().append("select DOC_STATUS from cr_document_dtl where TXNID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append(" and ENTITY_ID in (select ASSETID from cr_deal_collateral_m where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append(")  and DOC_MANDATORY='Y' and STAGE_ID='PRS' AND TXN_TYPE='DC'").toString());
    q8.append(new StringBuilder().append("SELECT GUARANTEE_AMOUNT FROM cr_deal_customer_role WHERE DEAL_CUSTOMER_ROLE_TYPE='GUARANTOR' AND DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
    q11.append(new StringBuilder().append("select SD_TENURE from cr_deal_sd_m s,cr_deal_loan_dtl d where d.DEAL_ID=s.DEAL_ID and s.SD_TENURE<=d.DEAL_TENURE and d.DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());

    checkSDQ.append(new StringBuilder().append("SELECT IFNULL(S.SD_AMOUNT,0) FROM cr_deal_sd_m s  WHERE  S.DEAL_ID =").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
    checkSDAm.append(ConnectionDAO.singleReturn(checkSDQ.toString()));
    q12.append(new StringBuilder().append("SELECT IFNULL(C.DEAL_CHARGE_FINAL_AMOUNT,0) FROM cr_deal_txncharges_dtl c WHERE  c.DEAL_CHARGE_CODE='103' AND c.DEAL_ID =").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
    try
    {
      logger.info(new StringBuilder().append("Customer Detail Query: ").append(q1.toString()).toString());
      boolean cust = ConnectionDAO.checkStatus(q1.toString());
      String str1;
      if (!cust)
      {
        status = "CS";
        return status;
      }
      q7.append(new StringBuilder().append("select count(*) FROM cr_deal_address_m where BPID=(SELECT DEAL_CUSTOMER_ID FROM cr_deal_dtl WHERE DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append(") and BPTYPE='CS' and COMMUNICATION_ADDRESS='Y'").toString());
      logger.info(new StringBuilder().append("Applicant Communication Address check query : ").append(q7.toString()).toString());
      commAddr.append(ConnectionDAO.singleReturn(q7.toString()));
      if (!commAddr.toString().equalsIgnoreCase("1"))
      {
        status = "CA";
        return status;
      }
      q13.append(new StringBuilder().append("SELECT DEAL_CUSTOMER_ID FROM cr_deal_customer_role where DEAL_CUSTOMER_ROLE_TYPE='GUARANTOR' AND DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
      logger.info(new StringBuilder().append("Gurantor ID List check query : ").append(q13.toString()).toString());
      gCheckAddr = ConnectionDAO.sqlSelect(q13.toString());
      if ((!CommonFunction.checkNull(gCheckAddr).equalsIgnoreCase("")) && (gCheckAddr.size() > 0))
      {
        int ff = gCheckAddr.size();
        for (int j = 0; j < ff; j++)
        {
          ArrayList data = (ArrayList)gCheckAddr.get(j);
          int flag = data.size();
          StringBuilder q14;
          if (flag > 0)
          {
            q14 = new StringBuilder();
            gAddr = new StringBuilder();
            q14.append(new StringBuilder().append("select count(*) FROM cr_deal_address_m where BPID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(data.get(0))).trim()).append("' and BPTYPE='CS' and COMMUNICATION_ADDRESS='Y'").toString());
            logger.info(new StringBuilder().append("Gurantor communication address check query  : ").append(q14.toString()).toString());
            gAddr.append(ConnectionDAO.singleReturn(q14.toString()));
            q14 = null;
          }
          if (gAddr.toString().equalsIgnoreCase("0"))
          {
            status = "CA";
            return status;
          }
        }
      }
      q15.append(new StringBuilder().append("SELECT DEAL_CUSTOMER_ID FROM cr_deal_customer_role where DEAL_CUSTOMER_ROLE_TYPE='COAPPL' AND DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
      logger.info(new StringBuilder().append("Coapplicant ID List check query : ").append(q15.toString()).toString());
      coCheckAddr = ConnectionDAO.sqlSelect(q15.toString());
      ArrayList data;
      if ((!CommonFunction.checkNull(coCheckAddr).equalsIgnoreCase("")) && (coCheckAddr.size() > 0))
      {
        int ff = coCheckAddr.size();
        for (int j = 0; j < ff; j++)
        {
          data = (ArrayList)coCheckAddr.get(j);
          int flag = data.size();
          StringBuilder q16;
          if (flag > 0)
          {
            q16 = new StringBuilder();
            coAddr = new StringBuilder();
            q16.append(new StringBuilder().append("select count(*) FROM cr_deal_address_m where BPID = '").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(data.get(0))).trim()).append("' and BPTYPE='CS' and COMMUNICATION_ADDRESS='Y'").toString());
            logger.info(new StringBuilder().append("CO Applicant communication address check query  : ").append(q16.toString()).toString());
            coAddr.append(ConnectionDAO.singleReturn(q16.toString()));
            q16 = null;
          }
          if (coAddr.toString().equalsIgnoreCase("0"))
          {
            status = "CA";
            return status;
          }
        }
      }
      if ((!CommonFunction.checkNull(gCheckAddr).equalsIgnoreCase("")) && (gCheckAddr.size() > 0))
      {
        String guaraneeAmountQuery = "select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY='GUARANTEE_AMOUNT'";
        String guaraneeAmountPara = ConnectionDAO.singleReturn(guaraneeAmountQuery);
        logger.info(new StringBuilder().append("guaraneeAmountPara:::::::::::::::").append(guaraneeAmountPara).toString());
        if (CommonFunction.checkNull(guaraneeAmountPara).equalsIgnoreCase("Y"))
        {
          logger.info(new StringBuilder().append("Gurantor Amount Query : ").append(q8.toString()).toString());
          guram.append(ConnectionDAO.singleReturn(q8.toString()));
          if ((guram != null) && (guram.toString().equalsIgnoreCase("0.0000")))
          {
            status = "GA";
            return status;
          }
        }
      }

      logger.info(new StringBuilder().append("productCategoryType query : ").append(productCategoryType.toString()).toString());
      int categoryCount = Integer.parseInt(ConnectionDAO.singleReturn(productCategoryType.toString()));
      logger.info(new StringBuilder().append("categoryCount::::::").append(categoryCount).toString());
      logger.info(new StringBuilder().append("ReferenceCount Parameter Query : ").append(referenceCountParaQuery).toString());
      String referenceCountPara = ConnectionDAO.singleReturn(referenceCountParaQuery);
      logger.info(new StringBuilder().append("ReferenceCount Query : ").append(referenceCountQuery).toString());
      String referenceCountForCustomer = ConnectionDAO.singleReturn(referenceCountQuery);
      int rcp = 0;
      int rcfc = 0;
      if (!CommonFunction.checkNull(referenceCountPara).equalsIgnoreCase(""))
        rcp = Integer.parseInt(referenceCountPara);
      if (!CommonFunction.checkNull(referenceCountForCustomer).equalsIgnoreCase(""))
        rcfc = Integer.parseInt(referenceCountForCustomer);
      if ((rcp > rcfc) && (categoryCount > 0))
      {
        status = "CUSTREF";
        return status;
      }
      logger.info(new StringBuilder().append("Loan Detail Query: ").append(q2.toString()).toString());
      boolean loanDetail = ConnectionDAO.checkStatus(q2.toString());
      String str3;
      if (!loanDetail)
      {
        status = "LD";
        return status;
      }
      logger.info(new StringBuilder().append("SD Amount Query  :  ").append(q12.toString()).toString());
      sdAmount.append(ConnectionDAO.singleReturn(q12.toString()));
      if ((sdAmount != null) && (!CommonFunction.checkNull(sdAmount).equalsIgnoreCase("0")))
      {
        if (!CommonFunction.checkNull(sdAmount).equalsIgnoreCase(CommonFunction.checkNull(checkSDAm)))
        {
          logger.info(new StringBuilder().append("SD Tenure Query  :  ").append(q11.toString()).toString());
          tenure.append(ConnectionDAO.singleReturn(q11.toString()));
          if (CommonFunction.checkNull(tenure).equalsIgnoreCase(""))
          {
            status = "TE";
            return status;
          }

          status = "SD";
          return status;
        }
      }

      logger.info(new StringBuilder().append("Asset Detail Query: ").append(q3.toString()).toString());
      boolean asset = ConnectionDAO.checkStatus(q3.toString());
      if ((!asset) && (CommonFunction.checkNull(assetMandatoryFlag).equalsIgnoreCase("Y")))
      {
        StringBuilder prodFlagQ = new StringBuilder();
        prodFlagQ.append(new StringBuilder().append("select count(*) from cr_deal_loan_dtl dl,cr_product_m p where dl.DEAL_PRODUCT=p.PRODUCT_ID and p.ASSET_FLAG='N' and DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("'").toString());
        StringBuilder prodFlag = new StringBuilder();
        prodFlag.append(ConnectionDAO.singleReturn(prodFlagQ.toString()));
        logger.info(new StringBuilder().append("prodFlagQ: ").append(prodFlagQ).append("status ").append(prodFlag).toString());
        prodFlagQ = null;
        if (CommonFunction.checkNull(prodFlag).equalsIgnoreCase("0"))
        {
          status = "AC";
          return status;
        }
      }
      int c1 = 0;
      int c2 = 0;
      String query1 = new StringBuilder().append("select count(1) from cr_deal_loan_dtl l,com_charges_m p where l.DEAL_PRODUCT=p.PRODUCT_ID and l.DEAL_SCHEME=p.scheme_id and DEF_STAGE_ID='DC'  and p.rec_status='A' and l.deal_id=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString();
      logger.info(new StringBuilder().append(" Query To find charges defined on product scheme combination or not : ").append(query1.toString()).toString());
      c1 = Integer.parseInt(ConnectionDAO.singleReturn(query1.toString()));
      if (c1 == 0)
      {
        String query2 = new StringBuilder().append("select count(*) from cr_deal_loan_dtl l,com_charges_m p where l.DEAL_PRODUCT=p.PRODUCT_ID  and p.rec_status='A' AND DEF_STAGE_ID='DC' and l.deal_id=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString();
        logger.info(new StringBuilder().append(" Query To find charges defined on product  : ").append(query2.toString()).toString());
        c2 = Integer.parseInt(ConnectionDAO.singleReturn(query2.toString()));
      }
      if ((c1 != 0) || (c2 != 0))
      {
        logger.info(new StringBuilder().append("Charge query : ").append(q4.toString()).toString());
        int charge = Integer.parseInt(ConnectionDAO.singleReturn(q4.toString()));
        if (charge == 0)
        {
          status = "CH";
          return status;
        }
      }

      ArrayList docs = ConnectionDAO.sqlSelect(q5.toString());
      if ((docs != null) || (CommonFunction.checkNull(docs).equals("")))
      {
        int size = docs.size();
        for (int j = 0; j < size; j++)
        {
          ArrayList dataList = (ArrayList)docs.get(j);
          if (dataList.size() > 0)
          {
            String docMode = dataList.get(0).toString();
            if ((docMode.equalsIgnoreCase("P")) || (docMode.equalsIgnoreCase("W")))
            {
              status = "DC";
              return status;
            }
          }
        }
      }
      ArrayList docs1 = ConnectionDAO.sqlSelect(q9.toString());
      if ((docs1 != null) || (CommonFunction.checkNull(docs1).equals("")))
      {
        int size = docs1.size();
        for (int j = 0; j < size; j++)
        {
          ArrayList dataList = (ArrayList)docs1.get(j);
          if (dataList.size() > 0)
          {
            String docMode = dataList.get(0).toString();
            if ((docMode.equalsIgnoreCase("P")) || (docMode.equalsIgnoreCase("W")))
            {
              status = "DC";
              return status;
            }
          }
        }
      }
      ArrayList docs2 = ConnectionDAO.sqlSelect(q10.toString());
      if ((docs2 != null) || (CommonFunction.checkNull(docs2).equals("")))
      {
        int size = docs2.size();
        for (int j = 0; j < size; j++)
        {
          ArrayList dataList = (ArrayList)docs2.get(j);
          if (dataList.size() > 0)
          {
            String docMode = dataList.get(0).toString();
            if ((docMode.equalsIgnoreCase("P")) || (docMode.equalsIgnoreCase("W")))
            {
              status = "DC";
              return status;
            }
          }
        }
      }

      String dealLoanIdQuery = new StringBuilder().append("select DEAL_LOAN_ID from cr_deal_loan_dtl where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString();
      logger.info(new StringBuilder().append("dealLoanIdQuery: ").append(dealLoanIdQuery).toString());
      String dealLoanId = ConnectionDAO.singleReturn(dealLoanIdQuery);
      logger.info(new StringBuilder().append("dealLoanId: ").append(dealLoanId).toString());
      String marginQuery = new StringBuilder().append("select (ifnull(DEAL_ASSET_COST,0)-ifnull(DEAL_LOAN_AMOUNT,0)) as 'Margin Amount' from cr_deal_loan_dtl where DEAL_LOAN_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId)).trim()).append("'").toString();
      logger.info(new StringBuilder().append("marginQuery: ").append(marginQuery).toString());
      String marginAmount = ConnectionDAO.singleReturn(marginQuery);
      logger.info(new StringBuilder().append("marginAmount: ").append(marginAmount).toString());
      double marAmt = 0.0D;
      if (!CommonFunction.checkNull(marginAmount).equalsIgnoreCase(""))
      {
        marAmt = Double.parseDouble(marginAmount);
      }
      String query101 = new StringBuilder().append("select  c.DEAL_CHARGE_FINAL_AMOUNT from cr_deal_txncharges_dtl c where  DEAL_CHARGE_CODE=101 and DEAL_LOAN_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId)).trim()).append("'").toString();
      logger.info(new StringBuilder().append("query101: ").append(query101).toString());
      String query101Amount = ConnectionDAO.singleReturn(query101);
      double query101Amt = 0.0D;
      if (!CommonFunction.checkNull(query101Amount).equalsIgnoreCase(""))
      {
        query101Amt = Double.parseDouble(query101Amount);
      }

      logger.info(new StringBuilder().append("query101Amount: ").append(query101Amount).toString());
      String query102 = new StringBuilder().append("select  c.DEAL_CHARGE_FINAL_AMOUNT from cr_deal_txncharges_dtl c where  DEAL_CHARGE_CODE=102 and DEAL_LOAN_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId)).trim()).append("'").toString();
      logger.info(new StringBuilder().append("query102: ").append(query102).toString());
      String query102Amount = ConnectionDAO.singleReturn(query102);
      double query102Amt = 0.0D;
      if (!CommonFunction.checkNull(query102Amount).equalsIgnoreCase(""))
      {
        query102Amt = Double.parseDouble(query102Amount);
      }
      logger.info(new StringBuilder().append("query102Amount: ").append(query102Amount).toString());
      ArrayList list = getAssetLoanDetailAmount(dealId);
      if (list.size() > 0)
      {
        ArrayList sublist = (ArrayList)list.get(0);
        String repyType = CommonFunction.checkNull((String)sublist.get(0));
        String astFlag = CommonFunction.checkNull((String)sublist.get(1));
        logger.info(new StringBuilder().append("repyType     :    ").append(repyType).toString());
        logger.info(new StringBuilder().append("astFlag      :    ").append(astFlag).toString());

        if ((astFlag.trim().equalsIgnoreCase("A")) && ((noOfTotalAsset > 0) || (CommonFunction.checkNull(assetMandatoryFlag).equalsIgnoreCase("Y"))))
        {
          String str9;
          if ((!CommonFunction.checkNull(query101Amount).equalsIgnoreCase("")) && (query101Amt > marAmt))
          {
            status = "charge101";
            return status;
          }
          if ((!CommonFunction.checkNull(query102Amount).equalsIgnoreCase("")) && (query102Amt > marAmt))
          {
            status = "charge102";
            return status;
          }
          if ((!CommonFunction.checkNull(query101Amount).equalsIgnoreCase("")) && (!CommonFunction.checkNull(query102Amount).equalsIgnoreCase("")))
          {
            if (!CommonFunction.checkNull(query102Amount).equalsIgnoreCase(CommonFunction.checkNull(query101Amount)))
            {
              status = "bothcharge";
              return status;
            }
          }
          else if (((query101Amt > 0.0D) && (!CommonFunction.checkNull(query101Amount).equalsIgnoreCase(""))) || ((query102Amt > 0.0D) && (!CommonFunction.checkNull(query102Amount).equalsIgnoreCase(""))))
          {
            status = "bothNotExist";
            return status;
          }

          StringBuilder noOfAssetLoanQry = new StringBuilder();
          noOfAssetLoanQry.append(new StringBuilder().append("select NO_OF_ASSET from cr_deal_loan_dtl where deal_id='").append(dealId.trim()).append("' ").toString());
          String noOfAssetLoan = ConnectionDAO.singleReturn(noOfAssetLoanQry.toString());
          if (CommonFunction.checkNull(noOfAssetLoan).equalsIgnoreCase(""))
            noOfAssetLoan = "0";
          StringBuilder noOfAssetQry = new StringBuilder();
          noOfAssetQry.append(new StringBuilder().append("select count(1) from cr_deal_collateral_m a join cr_asset_collateral_m b on(b.ASSET_ID=a.ASSETID) where b.ASSET_TYPE='ASSET'  and a.DEAL_ID=").append(dealId.trim()).toString());
          String noOfAsset = ConnectionDAO.singleReturn(noOfAssetQry.toString());
          if (CommonFunction.checkNull(noOfAsset).equalsIgnoreCase(""))
            noOfAsset = "0";
          int loanAsstCt = Integer.parseInt(noOfAssetLoan);
          int asstCt = Integer.parseInt(noOfAsset);
          String str10;
          /*if (loanAsstCt < 1) {
            status = "PLZASSETCAP";
            return status;
          }*/
          if ((loanAsstCt > asstCt) || (loanAsstCt < asstCt))
          {
            status = "ASSETCT";
            return status;
          }
          StringBuilder query = new StringBuilder();
          query.append(new StringBuilder().append("select count(1) from cr_deal_collateral_m a join cr_asset_collateral_m b on(b.ASSET_ID=a.ASSETID) where b.ASSET_TYPE='ASSET' and a.DEAL_ID=").append(dealId.trim()).toString());
          logger.info(new StringBuilder().append("In execute()  query   :   ").append(query.toString()).toString());
          String ct = ConnectionDAO.singleReturn(query.toString());
          logger.info(new StringBuilder().append("In execute()  count   :   ").append(ct).toString());

          StringBuilder queryV = new StringBuilder();
          queryV.append(new StringBuilder().append("select count(1) from cr_deal_collateral_m a join cr_asset_collateral_m b on(b.ASSET_ID=a.ASSETID) where b.ASSET_TYPE='ASSET' and b.ASSET_COLLATERAL_CLASS='VEHICLE' and a.DEAL_ID=").append(dealId.trim()).toString());
          logger.info(new StringBuilder().append("In execute() vehicle  query   :   ").append(queryV.toString()).toString());
          String vehicleCount = ConnectionDAO.singleReturn(queryV.toString());
          int val1 = 0;
          if (CommonFunction.checkNull(vehicleCount).equalsIgnoreCase(""))
            val1 = 0;
          else {
            val1 = Integer.parseInt(vehicleCount);
          }
          int value = 0;
          if (ct == null)
            value = 0;
          else
            value = Integer.parseInt(ct);
          logger.info(new StringBuilder().append("value      :    ").append(value).toString());
          if (value > 0)
          {
            String astcstLD = (String)sublist.get(2);
            String lnamtLD = (String)sublist.get(3);
            String astcstAD = (String)sublist.get(4);
            String lnamtAD = (String)sublist.get(5);
            double asstcstLD;
           // double asstcstLD;
            if (astcstLD == null)
              asstcstLD = 0.0D;
            else
              asstcstLD = Double.parseDouble(astcstLD);
            double loanamtLD;
           // double loanamtLD;
            if (lnamtLD == null)
              loanamtLD = 0.0D;
            else
              loanamtLD = Double.parseDouble(lnamtLD);
            double asstcstAD;
           // double asstcstAD;
            if (astcstAD == null)
              asstcstAD = 0.0D;
            else
              asstcstAD = Double.parseDouble(astcstAD);
            double loanamtAD;
          //  double loanamtAD;
            if (lnamtAD == null)
              loanamtAD = 0.0D;
            else {
              loanamtAD = Double.parseDouble(lnamtAD);
            }
            logger.info(new StringBuilder().append("asstcstLD    :    ").append(asstcstLD).toString());
            logger.info(new StringBuilder().append("loanamtLD    :    ").append(loanamtLD).toString());
            logger.info(new StringBuilder().append("asstcstAD    :    ").append(asstcstAD).toString());
            logger.info(new StringBuilder().append("loanamtAD    :    ").append(loanamtAD).toString());
            if (marAmt + loanamtLD != asstcstLD) {
              status = "LNASTNTMATMAR";
              return status;
            }
            int val = 0;
            if (val1 == 0)
            {
              if (asstcstLD != asstcstAD)
                val = 1;
            }
            else
            {
              if ((asstcstLD != asstcstAD) && (loanamtLD == loanamtAD))
                val = 1;
              if ((asstcstLD == asstcstAD) && (loanamtLD != loanamtAD))
                val = 2;
              if ((asstcstLD != asstcstAD) && (loanamtLD != loanamtAD))
                val = 3;
            }
            logger.info(new StringBuilder().append("val    :    ").append(val).toString());
            logger.info(new StringBuilder().append("val1   :    ").append(val1).toString());
            if (val > 0)
            {
              status = new StringBuilder().append(val).append("").toString();
              return status;
            }

          }

        }

      }

      StringBuilder queryToCheckVehicle = new StringBuilder();
      StringBuilder queryToCheckTotalVehicle = new StringBuilder();
      queryToCheckVehicle.append("select count(1) from cr_deal_collateral_m a join cr_asset_collateral_m b on(b.ASSET_ID=a.ASSETID) ");
      queryToCheckVehicle.append("left join cr_make_model_master c on (b.MAKE_MODEL_ID=c.MAKE_MODEL_ID) left join cr_deal_loan_dtl d on (d.DEAL_ID=a.DEAL_ID) ");
      queryToCheckVehicle.append(new StringBuilder().append(" where b.ASSET_COLLATERAL_CLASS='VEHICLE' and a.DEAL_ID=").append(dealId).append(" ").toString());
      queryToCheckVehicle.append(" AND c.PRODUCT_ID=d.deal_product AND ((IFNULL(c.SCHEME_ID,'')<>'' and c.SCHEME_ID=d.deal_scheme) OR (IFNULL(c.SCHEME_ID,'')='' and 'a'='a'))");

      queryToCheckTotalVehicle.append("select count(1) from cr_deal_collateral_m a join cr_asset_collateral_m b on(b.ASSET_ID=a.ASSETID) ");
      queryToCheckTotalVehicle.append(new StringBuilder().append(" where b.ASSET_COLLATERAL_CLASS='VEHICLE' and a.DEAL_ID=").append(dealId).append(" ").toString());

      String checkVehicleCount = ConnectionDAO.singleReturn(queryToCheckVehicle.toString());
      String checkTotalVehicleCount = ConnectionDAO.singleReturn(queryToCheckTotalVehicle.toString());
      logger.info(new StringBuilder().append("checkVehicleCount :: ").append(checkVehicleCount).toString());
      logger.info(new StringBuilder().append("checkTotalVehicleCount :: ").append(checkTotalVehicleCount).toString());
      if (!CommonFunction.checkNull(checkVehicleCount).equals(checkTotalVehicleCount))
      {
        status = "VEHICLECT";
      }
      queryToCheckVehicle = null;
      queryToCheckTotalVehicle = null;
      checkVehicleCount = null;
      checkTotalVehicleCount = null;
    }
    catch (SQLException e)
    {
      e.printStackTrace();
    }
    finally
    {
      q1 = null;
      q2 = null;
      q3 = null;
      q4 = null;
      q5 = null;
      q7 = null;
      q8 = null;
      q9 = null;
      q10 = null;
      q11 = null;
      q12 = null;
      q13 = null;
      q15 = null;
      gAddr = null;
      coAddr = null;
      guram = null;
      tenure = null;
      sdAmount = null;
      checkSDAm = null;
      commAddr = null;
    }
    return status;
  }

  public boolean stageForward(String dealId, String bDate)
  {
    logger.info(new StringBuilder().append("In stageForward.......Update mode ").append(dealId).toString());
    this.qryList = new ArrayList();
    StringBuilder query1 = new StringBuilder();
    StringBuilder query2 = new StringBuilder();

    StringBuilder query4 = new StringBuilder();
    StringBuilder query5 = new StringBuilder();
    StringBuilder query6 = new StringBuilder();
    StringBuilder query7 = new StringBuilder();
    query1.append(new StringBuilder().append("update cr_deal_dtl set DEAL_FORWARDED_DATE=DATE_ADD(STR_TO_DATE('").append(bDate).append("', '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),REC_STATUS='F' where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
    query2.append(new StringBuilder().append("update cr_deal_customer_role set STATUS='F' where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());

    query4.append(new StringBuilder().append("update cr_deal_loan_dtl set REC_STATUS='F' where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());

    query5.append(new StringBuilder().append("update cr_deal_collateral_m set REC_STATUS='F' where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
    query6.append(new StringBuilder().append("update cr_deal_txncharges_dtl set REC_STATUS='F' where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
    query7.append(new StringBuilder().append("update cr_document_dtl set REC_STATUS='F' where TXNID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());

    this.qryList.add(query1);
    this.qryList.add(query2);

    this.qryList.add(query4);
    this.qryList.add(query5);
    this.qryList.add(query6);
    this.qryList.add(query7);

    boolean status = false;
    DedupeReferalDTO dto= new DedupeReferalDTO();// by rohit
    try
    {
    	status = ConnectionDAO.sqlInsUpdDelete(qryList);
		logger.info("In stageForward......................status= "+status);
		 
		String deal_Id=CommonFunction.checkNull(dealId).trim();
		String str="DC";
	
	 	dto.setTxnType(str);// by rohit
	 	dto.setTxnId(deal_Id);// by rohit
	 	
		LMSMessagingClient lms =new LMSMessagingClient();
		lms.sendObjectMessage(dto,"DedupeProcessingQueue");
	} catch (Exception e) {
		e.printStackTrace();
	}
	finally
	{
		query1=null;
		query2=null;
		//query3=null;
		query4=null;
		query5=null;
		query6=null;
		query7=null;
	}
	return status;
  }
  public ArrayList<ScoringVO> scoringSearchGrid(ScoringVO scoringVo) {
    ArrayList list = new ArrayList();
    try
    {
      logger.info(new StringBuilder().append("Date Format: ").append(this.dateFormat).toString());
      ArrayList header = null;
      int count = 0;
      int startRecordIndex = 0;
      int endRecordIndex = this.no;

      logger.info(new StringBuilder().append("here userid++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ").append(scoringVo.getReportingToUserId()).toString());
      String userNameQ = new StringBuilder().append("select USER_NAME from sec_user_m where REC_STATUS='A' and USER_ID='").append(scoringVo.getReportingToUserId()).append("'").toString();
      String userName = ConnectionDAO.singleReturn(userNameQ);
      logger.info(new StringBuilder().append("userNameQ: ").append(userNameQ).append(" userName: ").append(userName).toString());

      userNameQ = null;

      boolean appendSQL = false;
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();
      StringBuilder dealId = new StringBuilder();
      StringBuilder appNo = new StringBuilder();
      StringBuilder appDate = new StringBuilder();
      StringBuilder custName = new StringBuilder();
      StringBuilder productId = new StringBuilder();

      dealId.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getLbxDealNo())).trim());
      appNo.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getApplicationno())).trim());
      appDate.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getApplicationdate())).trim());
      custName.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getCustomerName())).trim());
      productId.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getLbxProductID())).trim());

      bufInsSql.append(" select distinct SD.DEAL_ID,D.DEAL_NO,D.DEAL_APPLICATION_FORM_NO,");
      bufInsSql.append(new StringBuilder().append(" DATE_FORMAT(D.DEAL_DATE,'").append(this.dateFormat).append("'),deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,(SELECT USER_NAME FROM SEC_USER_M WHERE USER_ID=SD.MAKER_ID) MAKER_ID from cr_scoring_m SD  ").toString());
      bufInsSql.append(" LEFT JOIN cr_deal_dtl d ON SD.DEAL_ID=d.DEAL_ID ");
      bufInsSql.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID ");
      bufInsSql.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID ");
      bufInsSql.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
      bufInsSql.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID WHERE SD.REC_STATUS='P'");

      bufInsSqlTempCount.append(" select  count(1) FROM cr_scoring_m SD ,cr_deal_dtl d , cr_deal_loan_dtl n ,cr_product_m p, cr_deal_customer_m deal,cr_scheme_m s   where SD.DEAL_ID=d.DEAL_ID and d.DEAL_ID=n.DEAL_ID  and  n.DEAL_SCHEME=s.SCHEME_ID  and  n.DEAL_PRODUCT=p.PRODUCT_ID  and deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID and SD.REC_STATUS='P'");

      if ((!StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getLbxDealNo()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getApplicationno())).trim().equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getApplicationdate())).trim().equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getCustomerName()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getLbxProductID()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getLbxscheme()).trim()).equalsIgnoreCase("")))
      {
        bufInsSql.append(new StringBuilder().append(" AND d.MAKER_ID='").append(StringEscapeUtils.escapeSql(scoringVo.getReportingToUserId()).trim()).append("'  and  d.DEAL_ID='").append(StringEscapeUtils.escapeSql(scoringVo.getLbxDealNo()).trim()).append("' AND d.DEAL_APPLICATION_FORM_NO='").append(StringEscapeUtils.escapeSql(scoringVo.getApplicationno()).trim()).append("' AND date(d.DEAL_DATE) =STR_TO_DATE('").append(StringEscapeUtils.escapeSql(scoringVo.getApplicationdate()).trim()).append("','").append(this.dateFormat).append("') AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(scoringVo.getCustomerName()).trim()).append("%' AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(scoringVo.getLbxProductID()).trim()).append("'AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(scoringVo.getLbxscheme()).trim()).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND d.MAKER_ID='").append(StringEscapeUtils.escapeSql(scoringVo.getReportingToUserId()).trim()).append("'  and  d.DEAL_ID='").append(StringEscapeUtils.escapeSql(scoringVo.getLbxDealNo()).trim()).append("' AND d.DEAL_APPLICATION_FORM_NO='").append(StringEscapeUtils.escapeSql(scoringVo.getApplicationno()).trim()).append("' AND date(d.DEAL_DATE) =STR_TO_DATE('").append(StringEscapeUtils.escapeSql(scoringVo.getApplicationdate()).trim()).append("','").append(this.dateFormat).append("') AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(scoringVo.getCustomerName()).trim()).append("%' AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(scoringVo.getLbxProductID()).trim()).append("'AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(scoringVo.getLbxscheme()).trim()).append("'").toString());
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getLbxDealNo())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND d.DEAL_ID='").append(StringEscapeUtils.escapeSql(scoringVo.getLbxDealNo()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND d.DEAL_ID='").append(StringEscapeUtils.escapeSql(scoringVo.getLbxDealNo()).trim()).append("'").toString());
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getApplicationno())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND d.DEAL_APPLICATION_FORM_NO='").append(StringEscapeUtils.escapeSql(scoringVo.getApplicationno()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND d.DEAL_APPLICATION_FORM_NO='").append(StringEscapeUtils.escapeSql(scoringVo.getApplicationno()).trim()).append("' ").toString());
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getApplicationdate())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND date(d.DEAL_DATE) =STR_TO_DATE('").append(StringEscapeUtils.escapeSql(scoringVo.getApplicationdate()).trim()).append("','").append(this.dateFormat).append("') ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND date(d.DEAL_DATE) =STR_TO_DATE('").append(StringEscapeUtils.escapeSql(scoringVo.getApplicationdate()).trim()).append("','").append(this.dateFormat).append("')").toString());
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getCustomerName())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(scoringVo.getCustomerName()).trim()).append("%'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(scoringVo.getCustomerName()).trim()).append("%'").toString());
        appendSQL = true;
      }
      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getLbxProductID())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(scoringVo.getLbxProductID()).trim()).append("'  ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(scoringVo.getLbxProductID()).trim()).append("'").toString());
        appendSQL = true;
      }
      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getLbxscheme())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(scoringVo.getLbxscheme()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(scoringVo.getLbxscheme()).trim()).append("' ").toString());
        appendSQL = true;
      }

      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getReportingToUserId())).trim().equalsIgnoreCase(""))
      {
        bufInsSql.append(new StringBuilder().append(" and Sd.MAKER_ID='").append(StringEscapeUtils.escapeSql(scoringVo.getUserId()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" and Sd.MAKER_ID='").append(StringEscapeUtils.escapeSql(scoringVo.getUserId()).trim()).append("'").toString());

        logger.debug("Rituuuuuuuuuuu a");
      }
      else {
        bufInsSql.append(new StringBuilder().append(" and Sd.MAKER_ID='").append(StringEscapeUtils.escapeSql(scoringVo.getReportingToUserId()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" and Sd.MAKER_ID='").append(StringEscapeUtils.escapeSql(scoringVo.getReportingToUserId()).trim()).append("'").toString());

        logger.debug("Rituuuuuuuuuuu b");
      }

      count = Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
      logger.info(new StringBuilder().append("bufInsSqlTempCount : ").append(bufInsSqlTempCount.toString()).toString());

      if (((dealId.toString().trim() == null) && (appNo.toString().trim() == null) && (appDate.toString().trim() == null) && (custName.toString().trim() == null) && (productId.toString().trim() == null)) || ((dealId.toString().trim().equalsIgnoreCase("")) && (appNo.toString().trim().equalsIgnoreCase("")) && (appDate.toString().trim().equalsIgnoreCase("")) && (custName.toString().trim().equalsIgnoreCase("")) && (productId.toString().trim().equalsIgnoreCase(""))) || (scoringVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(scoringVo.getCurrentPageLink()).toString());
        if (scoringVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (scoringVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }
      }
      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      header = ConnectionDAO.sqlSelect(bufInsSql.toString());

      for (int i = 0; i < header.size(); i++)
      {
        ArrayList header1 = (ArrayList)header.get(i);
        if ((header1 != null) && (header1.size() > 0))
        {
          ScoringVO vo = new ScoringVO();

          vo.setLbxDealNo(new StringBuilder().append("<a href=scoringProcessAction.do?method=savedScoringData&viewMode=&lbxDealNo=").append(CommonFunction.checkNull(header1.get(0)).trim()).append(">").append(CommonFunction.checkNull(header1.get(1))).append("</a>").toString());

          vo.setDealNo(CommonFunction.checkNull(header1.get(1)).trim());
          vo.setApplicationno(CommonFunction.checkNull(header1.get(2)).trim());
          vo.setApplicationdate(CommonFunction.checkNull(header1.get(3)).trim());
          vo.setCustomerName(CommonFunction.checkNull(header1.get(4)).trim());
          vo.setProduct(CommonFunction.checkNull(header1.get(5)).trim());
          vo.setScheme(CommonFunction.checkNull(header1.get(6)).trim());
          vo.setReportingToUserId(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(header1.get(7))).trim());
          vo.setTotalRecordSize(count);
          list.add(vo);
        }

      }

      logger.info(new StringBuilder().append("getTotalRecordSize : ").append(scoringVo.getTotalRecordSize()).toString());

      dealId = null;
      bufInsSql = null;
      bufInsSqlTempCount = null;
      appNo = null;
      appDate = null;
      custName = null;
      productId = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    logger.info(new StringBuilder().append("Detail List when searchList is : ").append(list).toString());

    return list;
  }

  public ArrayList<ScoringVO> getScoringList(ScoringVO scoringVo)
  {
    ArrayList scoringList = new ArrayList();
    try {
      ArrayList searchlist = new ArrayList();
      logger.info("In searchPaymentData....................");
      StringBuffer bufInsSql = new StringBuffer();

      bufInsSql.append(new StringBuilder().append(" Select SDT.DEAL_ID,D.DEAL_NO,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,n.DEAL_LOAN_AMOUNT,n.DEAL_TENURE,n.DEAL_LOAN_PURPOSE,   SDT.SCORING_PARAM_CODE,SDT.SCORING_PARAM_VALUE,SDT.SCORING_PARAM_SCORE,SDT.SCORING_WEIGHTAGE,  SDT.SCORING_PARAM_RESULT,SD.SCORING_DECISION,SD.REMARKS,SDT.SCORING_ID    from cr_scoring_dtl SDT LEFT JOIN cr_scoring_m SD ON SDT.SCORING_ID=SD.SCORING_ID  LEFT JOIN cr_deal_dtl d ON SD.DEAL_ID=d.DEAL_ID  left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID  left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID  WHERE SDT.DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scoringVo.getLbxDealNo()).trim())).append("'").append(" and SDT.REC_STATUS='P' ").toString());

      logger.info(new StringBuilder().append("In searchPaymentData......... query...........").append(bufInsSql.toString()).toString());
      searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("getScoringList search Data size is....").append(searchlist.size()).toString());

      for (int i = 0; i < searchlist.size(); i++)
      {
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          ScoringVO VO = new ScoringVO();
          VO.setLbxDealNo(CommonFunction.checkNull(data.get(0)).trim());
          VO.setDealNo(CommonFunction.checkNull(data.get(1)).trim());
          VO.setCustomerName(CommonFunction.checkNull(data.get(2)).trim());
          logger.info(new StringBuilder().append(" setCustomerName:-------------").append(data.get(2)).toString());
          VO.setDealProduct(CommonFunction.checkNull(data.get(3)).trim());
          logger.info(new StringBuilder().append("  setDealProduct:-------------").append(data.get(3)).toString());
          VO.setDealScheme(CommonFunction.checkNull(data.get(4)).trim());
          logger.info(new StringBuilder().append("setDealScheme:-------------").append(data.get(4)).toString());

          if (!CommonFunction.checkNull(data.get(5)).equalsIgnoreCase(""))
          {
            Number LoanAmount = this.myFormatter.parse(CommonFunction.checkNull(data.get(5)).trim());
            logger.info(new StringBuilder().append("LoanAmount: ").append(LoanAmount).toString());
            VO.setLoanAmount(this.myFormatter.format(LoanAmount));
          }
          VO.setLoanTenure(CommonFunction.checkNull(data.get(6)).trim());
          VO.setLoanPurpose(CommonFunction.checkNull(data.get(7)).trim());
          VO.setPramName(CommonFunction.checkNull(data.get(8)).trim());
          VO.setParamValue(CommonFunction.checkNull(data.get(9)).trim());
          VO.setParamScore(CommonFunction.checkNull(data.get(10)).trim());
          VO.setParamWeightage(CommonFunction.checkNull(data.get(11)).trim());
          logger.info(new StringBuilder().append(" setBankAccount:-------------").append(data.get(11)).toString());
          VO.setWeightageScore(CommonFunction.checkNull(data.get(12)).trim());
          VO.setDecision(CommonFunction.checkNull(data.get(13)).trim());
          VO.setRemark(CommonFunction.checkNull(data.get(14)).trim());
          VO.setScoringID(CommonFunction.checkNull(data.get(15)).trim());
          scoringList.add(VO);
          VO = null;
        }
      }

      bufInsSql = null;
    } catch (Exception e) {
      e.printStackTrace();
    }

    return scoringList;
  }

  public boolean updateOnSaveScore(ScoringVO scoringVo)
  {
    StringBuffer sBUpdQry = new StringBuffer();
    ArrayList getDataList = new ArrayList();
    PrepStmtObject updatePrepStmtObject = new PrepStmtObject();
    boolean status = false;
    logger.info("In updateOnSaveScore,,,,,");
    ArrayList queryList = new ArrayList();
    try
    {
      sBUpdQry.append(" UPDATE cr_scoring_m SET SCORING_DECISION =?, ");
      sBUpdQry.append(" REMARKS=? WHERE SCORING_ID=? ");

      if (CommonFunction.checkNull(scoringVo.getDecision()).trim().equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else
        updatePrepStmtObject.addString(CommonFunction.checkNull(scoringVo.getDecision()).trim());
      if (CommonFunction.checkNull(scoringVo.getRemark()).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(CommonFunction.checkNull(scoringVo.getRemark()).trim());
      }

      if (CommonFunction.checkNull(scoringVo.getUserId()).trim().equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(CommonFunction.checkNull(scoringVo.getUserId()).trim());
      }
      if (CommonFunction.checkNull(scoringVo.getBusinessdate()).trim().equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(CommonFunction.checkNull(scoringVo.getBusinessdate()).trim());
      }

      if (CommonFunction.checkNull(scoringVo.getScoringID()).equalsIgnoreCase(""))
        updatePrepStmtObject.addNull();
      else {
        updatePrepStmtObject.addString(CommonFunction.checkNull(scoringVo.getScoringID()).trim());
      }

      updatePrepStmtObject.setSql(sBUpdQry.toString());

      queryList.add(updatePrepStmtObject);
      logger.info(new StringBuilder().append("IN updateOnSaveScore query1 ### ").append(updatePrepStmtObject.printQuery()).toString());

      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(queryList);
      logger.info(new StringBuilder().append("In updateOnSaveScore.....................").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      sBUpdQry = null;
      scoringVo = null;
    }

    return status;
  }

  public String getFileInfo(String dealId, String fileName)
  {
    String filePath = "";
    try
    {
      logger.info("In getFileInfo..........................DAOImpl");
      StringBuffer query = new StringBuffer();
      query.append(new StringBuilder().append("select document_path from cr_uploaded_documents where txn_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' and file_name='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(fileName)).trim()).append("' AND TXN_TYPE='DC'").toString());
      logger.info(new StringBuilder().append("In getFileInfo...............query...........DAOImpl ").append(query).toString());
      filePath = ConnectionDAO.singleReturn(query.toString());
      logger.info(new StringBuilder().append("Resultset value====  ").append(filePath).toString());
      query = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      dealId = null;
      fileName = null;
    }

    return filePath;
  }

  public String getFileInfoForCm(String dealId, String fileName)
  {
    String filePath = "";
    try
    {
      StringBuffer query = new StringBuffer();
      query.append(new StringBuilder().append("select document_path from cr_uploaded_documents where txn_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' and file_name='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(fileName)).trim()).append("' AND TXN_TYPE='LIM'").toString());

      filePath = ConnectionDAO.singleReturn(query.toString());

      query = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      dealId = null;
      fileName = null;
    }

    return filePath;
  }

  public String getFileInfoForCmCp(String dealId, String fileName)
  {
    String filePath = "";
    try
    {
      String deaId = ConnectionDAO.singleReturn(new StringBuilder().append("select LOAN_DEAL_ID from cr_loan_dtl where LOAN_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("'").toString());
      StringBuffer query = new StringBuffer();
      query.append(new StringBuilder().append("select document_path from cr_uploaded_documents where txn_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(deaId)).trim()).append("' and file_name='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(fileName)).trim()).append("' AND TXN_TYPE='DC'").toString());

      filePath = ConnectionDAO.singleReturn(query.toString());

      query = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      dealId = null;
      fileName = null;
    }

    return filePath;
  }

  public ArrayList<ApplicantTypeVO> getApplicantList()
  {
    ArrayList list = new ArrayList();
    ArrayList applicantList = null;
    ArrayList subList = null;
    try {
      StringBuffer query = new StringBuffer();
      query.append("SELECT VALUE,DESCRIPTION FROM generic_master  where GENERIC_KEY='CUST_ROLE' and REC_STATUS='A' order by DESCRIPTION  ");

      applicantList = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      for (int i = 0; i < applicantList.size(); i++) {
        subList = (ArrayList)applicantList.get(i);

        if (subList.size() > 0) {
          ApplicantTypeVO av = new ApplicantTypeVO();
          av.setApplicant_code(CommonFunction.checkNull(subList.get(0)).trim());
          av.setApplicant_desc(CommonFunction.checkNull(subList.get(1)).trim());
          list.add(av);
          av = null;
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      applicantList = null;
      subList = null;
    }

    return list;
  }

  public ArrayList<Object> getApplicantDetailAll(String dealId)
  {
    CreditProcessingCustomerEntryVo appl = new CreditProcessingCustomerEntryVo();
    ArrayList list = new ArrayList();
    try
    {
      StringBuffer query = new StringBuffer();
      query.append(new StringBuilder().append("select DEAL_CUSTOMER_ID,DEAL_CUSTOMER_NAME,M.DESCRIPTION,DEAL_CUSTOMER_TYPE,DEAL_EXISTING_CUSTOMER from cr_deal_customer_role S,generic_master M where deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' and M.VALUE=S.DEAL_CUSTOMER_ROLE_TYPE").toString());

      logger.info(new StringBuilder().append("Query Result: ").append(query).toString());
      ArrayList appdetails = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getApplicantDetailsAll").append(appdetails.size()).toString());
      query = null;
      for (int i = 0; i < appdetails.size(); i++)
      {
        logger.info(new StringBuilder().append("getApplicantDetailsAll").append(appdetails.get(i).toString()).toString());
        ArrayList adetails1 = (ArrayList)appdetails.get(i);
        if (adetails1.size() > 0)
        {
          appl = new CreditProcessingCustomerEntryVo();

          appl.setCustomerId(CommonFunction.checkNull(adetails1.get(0)).trim());
          appl.setCustomerName(CommonFunction.checkNull(adetails1.get(1)).trim());

          appl.setApplicantType(CommonFunction.checkNull(adetails1.get(2)).trim());

          appl.setApplicantCategory(CommonFunction.checkNull(adetails1.get(3)).trim());
          appl.setExistingCustomer(CommonFunction.checkNull(adetails1.get(4)).trim());
          appl.setFlagForUpdate("updateFlag");
          list.add(appl);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      appl = null;
    }
    logger.info(new StringBuilder().append("Value of List in dao is=").append(list).toString());
    return list;
  }

  public int deleteCustomerEntry(String cust_id)
  {
    logger.info(new StringBuilder().append("In delete .......").append(cust_id).toString());
    int status = 0;
    boolean delStatus = false;
    try {
      StringBuffer query = new StringBuffer();
      query.append(new StringBuilder().append("delete from cr_deal_customer_role where DEAL_CUSTOMER_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(cust_id)).trim()).toString());
      this.qryList.add(query);
      delStatus = ConnectionDAO.sqlInsUpdDelete(this.qryList);
      logger.info(new StringBuilder().append("Deletion Status :").append(delStatus).toString());

      query = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      cust_id = null;
    }
    if (delStatus)
    {
      status = 2;
    }
    return status;
  }

  public ArrayList<Object> searchApplicant(LinkCustomerVo vo)
  {
    logger.info("In searchApplicant");

    ArrayList list = new ArrayList();
    ArrayList deatilList = new ArrayList();
    LinkCustomerVo appl = null;

    StringBuilder tableName = new StringBuilder();
    String loanNo = "";
    tableName.append("cr_deal_customer_m");
    if (vo.getLoanNO() != null) {
      loanNo = vo.getLoanNO().trim();
    }
    if (vo.getLoanNO().equalsIgnoreCase(""))
      tableName.append("cr_deal_customer_m");
    else {
      tableName.append("gcd_customer_m");
    }

    try
    {
      boolean appendSQL = false;
      StringBuffer bufInsSql = new StringBuffer();

      if (vo.getLoanNO().equalsIgnoreCase("")) {
        bufInsSql.append("select DISTINCT CUSTOMER_ID,CUSTOMER_NAME,CUSTOMER_CONSTITUTION,CUSTOMER_BUSINESS_SEGMENT,if(CUSTOMER_TYPE='I','INDIVIDUAL','CORPORATE'),  DEAL_APPLICATION_FORM_NO,loan_no,cr_deal_dtl.DEAL_NO from cr_deal_customer_m  left join cr_deal_customer_role r on (r.DEAL_CUSTOMER_ID=cr_deal_customer_m.CUSTOMER_ID)  left outer join cr_deal_dtl on(cr_deal_dtl.DEAL_ID=r.deal_id)  left outer join cr_loan_dtl on(cr_loan_dtl.LOAN_DEAL_ID=cr_deal_dtl.DEAL_ID)  left outer join cr_deal_address_m on (r.DEAL_CUSTOMER_ID=cr_deal_address_m.BPID)  left join cr_deal_collateral_m on (cr_deal_dtl.DEAL_ID=cr_deal_collateral_m.DEAL_ID) and cr_deal_collateral_m.rec_status='A'  left join cr_asset_collateral_m on (cr_deal_collateral_m.ASSETID=cr_asset_collateral_m.ASSET_ID) where true");
      }
      else
      {
        bufInsSql.append(" select distinct gcd_customer_m.CUSTOMER_ID,cr_deal_customer_m.CUSTOMER_NAME,gcd_customer_m.CUSTOMER_CONSTITUTION,gcd_customer_m.CUSTOMER_BUSINESS_SEGMENT,  if(gcd_customer_m.CUSTOMER_TYPE='I','INDIVIDUAL','CORPORATE'),LOAN_REFERENCE_NO,loan_no ,cr_deal_dtl.deal_no   from gcd_customer_m    left join cr_loan_customer_role  on (cr_loan_customer_role.gcd_id=gcd_customer_m.CUSTOMER_ID)   left outer join cr_loan_dtl on(cr_loan_dtl.loan_id=cr_loan_customer_role.loan_ID)   left outer join cr_deal_dtl on(cr_deal_dtl.DEAL_ID=cr_loan_dtl.loan_deal_id)  join cr_deal_customer_m on (cr_deal_customer_m.GCD_CUSTOMER_ID=gcd_customer_m.customer_id) where true ");
      }

      if (!vo.getLbxcustomerId().trim().equalsIgnoreCase(""))
        bufInsSql.append(new StringBuilder().append(" and CUSTOMER_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxcustomerId()).trim()).append("'").toString());
      if (!vo.getCustomerName().trim().equalsIgnoreCase(""))
        bufInsSql.append(new StringBuilder().append(" and CUSTOMER_NAME like '%").append(StringEscapeUtils.escapeSql(vo.getCustomerName()).trim()).append("%'").toString());
      if (!vo.getPanNo().trim().equalsIgnoreCase(""))
        bufInsSql.append(new StringBuilder().append(" and CUSTMER_PAN='").append(StringEscapeUtils.escapeSql(vo.getPanNo()).trim()).append("'").toString());
      if (!vo.getAadhaar().trim().equalsIgnoreCase(""))
        bufInsSql.append(new StringBuilder().append(" and UID_NO='").append(StringEscapeUtils.escapeSql(vo.getAadhaar()).trim()).append("'").toString());
      if (!vo.getRegistrationNo().trim().equalsIgnoreCase(""))
        bufInsSql.append(new StringBuilder().append(" and CUSTOMER_REGISTRATION_NO='").append(StringEscapeUtils.escapeSql(vo.getRegistrationNo()).trim()).append("'").toString());
      if (vo.getLoanNO().equalsIgnoreCase(""))
      {
        if (!vo.getAppFormNo().trim().equalsIgnoreCase(""))
          bufInsSql.append(new StringBuilder().append(" and DEAL_APPLICATION_FORM_NO ='").append(StringEscapeUtils.escapeSql(vo.getAppFormNo()).trim()).append("'").toString());
      }
      else
      {
        if (!vo.getLoanNO().trim().equalsIgnoreCase(""))
          bufInsSql.append(new StringBuilder().append(" and cr_loan_customer_role.loan_id ='").append(StringEscapeUtils.escapeSql(vo.getLoanID()).trim()).append("'").toString());
        if (!vo.getAppFormNo().trim().equalsIgnoreCase("")) {
          bufInsSql.append(new StringBuilder().append(" and LOAN_REFERENCE_NO ='").append(StringEscapeUtils.escapeSql(vo.getAppFormNo()).trim()).append("'").toString());
        }
      }
      logger.info(new StringBuilder().append("11111111").append(vo.getFatherHusband()).toString());
      logger.info(new StringBuilder().append("222222").append(vo.getBirthDate()).toString());
      logger.info(new StringBuilder().append("33333").append(vo.getMoblieNo()).toString());
      logger.info(new StringBuilder().append("444444").append(vo.getTelephoneNo()).toString());
      logger.info(new StringBuilder().append("55555").append(vo.getDrivingLicense()).toString());
      logger.info(new StringBuilder().append("55555").append(vo.getVehicleNo()).toString());

      if (!vo.getFatherHusband().trim().equalsIgnoreCase(""))
        bufInsSql.append(new StringBuilder().append(" and FATHER_HUSBAND_NAME like '%").append(StringEscapeUtils.escapeSql(vo.getFatherHusband()).trim()).append("%'").toString());
      if (!vo.getBirthDate().trim().equalsIgnoreCase(""))
        bufInsSql.append(new StringBuilder().append(" and CUSTOMER_DOB='").append(CommonFunction.changeFormat(CommonFunction.checkNull(vo.getBirthDate()).trim())).append("' ").toString());
      if (!vo.getMoblieNo().trim().equalsIgnoreCase(""))
        bufInsSql.append(new StringBuilder().append(" and PRIMARY_PHONE='").append(StringEscapeUtils.escapeSql(vo.getMoblieNo()).trim()).append("'").toString());
      if (!vo.getTelephoneNo().trim().equalsIgnoreCase(""))
        bufInsSql.append(new StringBuilder().append(" and ALTERNATE_PHONE='").append(StringEscapeUtils.escapeSql(vo.getTelephoneNo()).trim()).append("'").toString());
      if (!vo.getDrivingLicense().trim().equalsIgnoreCase(""))
        bufInsSql.append(new StringBuilder().append(" and DRIVING_LICENSE='").append(StringEscapeUtils.escapeSql(vo.getDrivingLicense()).trim()).append("'").toString());
      if (!vo.getVehicleNo().trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" and VEHICLE_REGISTRATION_NO='").append(StringEscapeUtils.escapeSql(vo.getVehicleNo()).trim()).append("'").toString());
      }

      logger.info(new StringBuilder().append("searchApplicant() of CreditProcessingDAOImpl Query : ").append(bufInsSql.toString()).toString());
      deatilList = ConnectionDAO.sqlSelect(bufInsSql.toString());
      bufInsSql = null;
      if (deatilList.size() > 0) {
        for (int i = 0; i < deatilList.size(); i++)
        {
          ArrayList data = (ArrayList)deatilList.get(i);
          if (data.size() > 0) {
            appl = new LinkCustomerVo();

            appl.setCustomerId(CommonFunction.checkNull(data.get(0)).trim());

            appl.setCustomerName(CommonFunction.checkNull(data.get(1)).trim());

            appl.setConstitution(CommonFunction.checkNull(data.get(2)).trim());
            appl.setBusinessSegment(CommonFunction.checkNull(data.get(3)).trim());
            appl.setCustType(CommonFunction.checkNull(data.get(4)).trim());
            appl.setAppFormNo(CommonFunction.checkNull(data.get(5)).trim());
            appl.setLoanNO(CommonFunction.checkNull(data.get(6)).trim());
            appl.setDealNO(CommonFunction.checkNull(data.get(7)).trim());
            list.add(appl);
          }
        }
      }
      bufInsSql = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally {
      tableName = null;
      vo = null;
    }

    return list;
  }

  public boolean saveApprovalData(Object ob)
  {
    UnderwriterApprovalVo vo = (UnderwriterApprovalVo)ob;
    boolean status = false;
    logger.info("In saveApprovalData.....................................Dao Impl....111");
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    try
    {
      logger.info("In insert Approval Data part");
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("insert into cr_deal_approval_dtl(deal_id,approval_level,approval_decision,approval_by,approval_date,approval_remarks)");
      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsSql.append(" ? )");

      if (CommonFunction.checkNull(vo.getDealId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getDealId()).trim());
      }
      if (CommonFunction.checkNull(vo.getApprovalLevel()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getApprovalLevel()).trim());
      }
      if (CommonFunction.checkNull(vo.getDecision()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getDecision()).trim());
      }
      if (CommonFunction.checkNull(vo.getUserName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getUserName()).trim());
      }
      if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getMakerDate()).trim());
      }
      if (CommonFunction.checkNull(vo.getRemarks()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getRemarks()).trim());
      }
      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN saveApprovalData() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In saveApprovalData......................").append(status).toString());

      bufInsSql = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      qryList.clear();
      qryList = null;
      ob = null;
    }
    return status;
  }

  public ArrayList getApprovalData(String dealId, String role) {
    ArrayList list = new ArrayList();
    String roleName = "";
    try {
      logger.info(new StringBuilder().append("In getApprovalData..........................DAOImpl").append(dealId).toString());

      StringBuilder queryPrim = new StringBuilder();
      queryPrim.append(new StringBuilder().append("select role_name from role_master where role_id='").append(role).append("'").toString());
      logger.info(new StringBuilder().append("In getApprovalData...............queryPrim...........DAOImpl ").append(queryPrim).toString());
      roleName = ConnectionDAO.singleReturn(queryPrim.toString());

      logger.info(new StringBuilder().append("Resultset value==== ").append(roleName).toString());

      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select approval_by,approval_level,approval_decision,approval_remarks,DATE_FORMAT(APPROVAL_DATE,'").append(this.dateFormatWithTime).append("'),R.REASON_DESC,(select USER_NAME from SEC_USER_M where USER_ID=approval_by) USER_NAME from cr_deal_approval_dtl A LEFT JOIN com_reason_m R ON R.REASON_ID=A.REASON_ID where deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("'").toString());
      logger.info(new StringBuilder().append("In getApprovalData...............query...........DAOImpl").append(query).toString());
      UnderwriterApprovalVo noteVO = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getApprovalData ").append(product.size()).toString());
      query = null;
      queryPrim = null;

      for (int i = 0; i < product.size(); i++)
      {
        ArrayList data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          noteVO = new UnderwriterApprovalVo();
          noteVO.setUserName(new StringBuilder().append(CommonFunction.checkNull(data.get(0)).trim()).append(" - ").append(CommonFunction.checkNull(data.get(6)).trim()).toString());
          noteVO.setApprovalLevel(CommonFunction.checkNull(data.get(1)).trim());
          if (CommonFunction.checkNull(data.get(2)).equalsIgnoreCase("P"))
          {
            noteVO.setDecision("Send Back");
          }
          else if (CommonFunction.checkNull(data.get(2)).equalsIgnoreCase("A"))
          {
            noteVO.setDecision("Approved");
          }
          else if (CommonFunction.checkNull(data.get(2)).equalsIgnoreCase("X"))
          {
            noteVO.setDecision("Rejected");
          }

          noteVO.setRemarks(CommonFunction.checkNull(data.get(3)).trim());
          noteVO.setMakerDate(CommonFunction.checkNull(data.get(4)).trim());
          noteVO.setReasonDesc(CommonFunction.checkNull(data.get(5)).trim());
          list.add(noteVO);
        }
        noteVO = null;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      dealId = null;
      role = null;
    }
    return list;
  }

  public String updateApprovalData(Object ob)
  {
    UnderwriterApprovalVo vo = (UnderwriterApprovalVo)ob;
    if (CommonFunction.checkNull(vo.getLbxReason()).equalsIgnoreCase(""))
    {
      vo.setLbxReason("0");
    }
    logger.info(new StringBuilder().append("In updateApprovalData......DealId:  ").append(vo.getDealId()).append("UserId:  ").append(vo.getUserId()).append("Approval decision:  ").append(vo.getDecision()).append("Reverse Stage:  ").append(vo.getReversingStage()).append("Reprocessing flag:  ").append(vo.getRpStageFlag()).append(" Reason Id: ").append(vo.getLbxReason()).toString());
    CallableStatement cst = null;
    String statusProc = "";

    int x = 0;
    boolean status = false;
    try
    {
      ArrayList in = new ArrayList();
      ArrayList out = new ArrayList();
      ArrayList outMessages = new ArrayList();
      String s1 = "";
      String s2 = "";
      in.add(vo.getDealId());
      in.add(vo.getUserId());
      String date = CommonFunction.changeFormat(vo.getMakerDate());
      in.add(date);
      in.add(vo.getDecision());
      in.add(vo.getReversingStage());
      in.add(vo.getRpStageFlag());
      in.add(vo.getRemarks());
      in.add(vo.getLbxReason());
      out.add(s1);
      out.add(s2);

      logger.info(new StringBuilder().append("CP_Underwriter_Approval (").append(in.toString()).append(",").append(out.toString()).append(")").toString());
      outMessages = (ArrayList)ConnectionDAO.callSP("CP_Underwriter_Approval", in, out);
      s1 = CommonFunction.checkNull(outMessages.get(0));
      s2 = CommonFunction.checkNull(outMessages.get(1));
      logger.info(new StringBuilder().append("s1  : ").append(s1).toString());
      logger.info(new StringBuilder().append("s2  : ").append(s2).toString());
      if (s1.equalsIgnoreCase("S"))
      {
        statusProc = s1;
        status = true;
        logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
      }
      else
      {
        statusProc = s2;
        logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
      }
      in.clear();
      in = null;
      out.clear();
      out = null;
    } catch (Exception e) {
      e.printStackTrace();
    } finally {
      vo = null;
      ob = null;
    }
    return statusProc;
  }

  public boolean checkApplicationFormNo(String appNo, String dealId)
  {
    logger.info(new StringBuilder().append("Application Form Number: ").append(appNo).append("dealId: ").append(dealId).toString());
    StringBuilder q = new StringBuilder();
    if ((dealId != null) && (!CommonFunction.checkNull(dealId).equalsIgnoreCase("")))
    {
      q.append(new StringBuilder().append("select DEAL_APPLICATION_FORM_NO from cr_deal_dtl where DEAL_APPLICATION_FORM_NO='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(appNo)).trim()).append("' and deal_Id is not null and rec_status!='X' and deal_Id!=").append(CommonFunction.checkNull(dealId).trim()).toString());
    }
    else
    {
      q.append(new StringBuilder().append("select DEAL_APPLICATION_FORM_NO from cr_deal_dtl where DEAL_APPLICATION_FORM_NO='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(appNo)).trim()).append("' and deal_Id is not null and rec_status!='X'").toString());
    }
    boolean status = false;
    logger.info(new StringBuilder().append("In........checkApplicationFormNo").append(q.toString()).toString());
    status = ConnectionDAO.checkStatus(q.toString());
    q = null;
    appNo = null;
    dealId = null;
    return status;
  }

  public int moveFromGCD(String customerId, String applType, String dealId, String tableStatus)
  {
    logger.info("In moveFromGCD");
    boolean status1 = false;
    CallableStatement cst = null;
    int statusProc = 0;
    StringBuilder q = new StringBuilder();
    if (tableStatus.equalsIgnoreCase("G"))
    {
      q.append(new StringBuilder().append("select GCD_ID from cr_deal_customer_role where GCD_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(customerId)).trim()).append(" and DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
    }
    else if (tableStatus.equalsIgnoreCase("C"))
    {
      q.append(new StringBuilder().append("select GCD_ID from cr_deal_customer_role where DEAL_CUSTOMER_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(customerId)).trim()).append(" and DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
    }
    logger.info(new StringBuilder().append("Query: ").append(q).toString());
    boolean exist = ConnectionDAO.checkStatus(q.toString());

    q = null;

    if (exist)
    {
      statusProc = 0;
    }
    else
    {
      Connection con = ConnectionDAO.getConnection();
      try {
        cst = con.prepareCall("call Gcd_Customer_Link(?,?,?,?,?,?)");
        cst.setString(1, dealId);
        cst.setString(2, customerId);
        cst.setString(3, applType);
        cst.setString(4, tableStatus);

        cst.registerOutParameter(5, 1);
        cst.registerOutParameter(6, 1);

        statusProc = cst.executeUpdate();

        String s1 = cst.getString(5);
        String s2 = cst.getString(6);
        logger.info(new StringBuilder().append("s1: ").append(s1).toString());
        logger.info(new StringBuilder().append("s2: ").append(s2).toString());

        if ((s1 != null) && (s1.equalsIgnoreCase("S")))
        {
          status1 = true;
          con.commit();
          logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
        }
        else
        {
          con.rollback();
          logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
        }
        logger.info(new StringBuilder().append("s1: ").append(s1).toString());
        logger.info(new StringBuilder().append("s2: ").append(s2).toString());

        s1 = null;
        s2 = null;
      } catch (Exception e) {
        try {
          con.rollback();
        } catch (SQLException e1) {
          logger.info(new StringBuilder().append("Rollback Gcd_Customer_Link proc( Gcd_Customer_Link )").append(e1).toString());
          e1.printStackTrace();
        }
        e.printStackTrace();
      }
      finally
      {
        try
        {
          cst = null;
          con.close();
        }
        catch (SQLException e) {
          e.printStackTrace();
        }
        finally {
          customerId = null;
          applType = null;
          dealId = null;
          tableStatus = null;
          q = null;
        }

      }

    }

    return statusProc;
  }

  public ArrayList getAssets(ExistingAssetVo sh)
  {
    ArrayList list = new ArrayList();
    try
    {
      ArrayList header = null;
      ExistingAssetVo fetchVo = null;

      logger.info(new StringBuilder().append("openType test in DAOImpl : ").append(sh.getOpenType()).toString());
      StringBuffer bufInsSql = new StringBuffer();
      if (CommonFunction.checkNull(sh.getOpenType()).trim().equalsIgnoreCase("D"))
      {
        bufInsSql.append("select DISTINCT b.ASSETID,a.ASSET_TYPE,a.ASSET_COLLATERAL_DESC,a.ASSET_COLLATERAL_CLASS,a.ASSET_COLLATERAL_VALUE from cr_asset_collateral_m a ");
        bufInsSql.append(" join cr_deal_collateral_m b on(b.ASSETID=a.ASSET_ID) left join cr_deal_dtl c on(c.DEAL_ID=b.DEAL_ID) left join cr_deal_customer_m d on (c.DEAL_CUSTOMER_ID=d.CUSTOMER_ID) ");
        bufInsSql.append(" where a.ASSET_TYPE='COLLATERAL' and b.REC_STATUS<>'X' ");
        if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getLbxDealNo()).trim()).equalsIgnoreCase(""))
          bufInsSql.append(new StringBuilder().append(" and b.DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getLbxLoanNoHID())).trim()).append("'").toString());
        if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getCustomerName()).trim()).equalsIgnoreCase(""))
          bufInsSql.append(new StringBuilder().append(" and d.CUSTOMER_NAME like '%").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getCustomerName())).trim()).append("%'").toString());
        if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getLbxCollateralId()).trim()).equalsIgnoreCase(""))
          bufInsSql.append(new StringBuilder().append(" and b.ASSETID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getLbxCollateralId())).trim()).append("'").toString());
        if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getAssetDesc()).trim()).equalsIgnoreCase(""))
          bufInsSql.append(new StringBuilder().append(" and a.ASSET_COLLATERAL_DESC LIKE '%").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getAssetDesc())).trim()).append("%'").toString());
      }
      else
      {
        bufInsSql.append("select A.ASSETID,D.ASSET_TYPE,D.ASSET_COLLATERAL_DESC,D.ASSET_COLLATERAL_CLASS,D.ASSET_COLLATERAL_VALUE from cr_loan_collateral_m  A,");
        bufInsSql.append(new StringBuilder().append(" cr_asset_collateral_m D, cr_loan_dtl L, gcd_customer_m G where L.LOAN_CUSTOMER_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getApplicantCustId())).trim()).append("'").toString());
        bufInsSql.append(" and A.REC_STATUS='A' and D.ASSET_ID=A.ASSETID and A.LOAN_ID = L.LOAN_ID and G.CUSTOMER_ID=L.LOAN_CUSTOMER_ID ");
        if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getLbxDealNo()).trim()).equalsIgnoreCase(""))
          bufInsSql.append(new StringBuilder().append("  and A.LOAN_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getLbxLoanNoHID())).trim()).append("'").toString());
        if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getCustomerName()).trim()).equalsIgnoreCase(""))
          bufInsSql.append(new StringBuilder().append("  and G.CUSTOMER_NAME like '%").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getCustomerName())).trim()).append("%'").toString());
        if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getLbxCollateralId()).trim()).equalsIgnoreCase(""))
          bufInsSql.append(new StringBuilder().append("  and A.ASSETID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getLbxCollateralId())).trim()).append("'").toString());
        if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getAssetDesc()).trim()).equalsIgnoreCase("")) {
          bufInsSql.append(new StringBuilder().append("  and D.ASSET_COLLATERAL_DESC LIKE '%").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getAssetDesc())).trim()).append("%'").toString());
        }

      }

      logger.info(new StringBuilder().append("in getAssets()  :  ").append(bufInsSql.toString()).toString());
      header = ConnectionDAO.sqlSelect(bufInsSql.toString());
      int size = header.size();
      for (int i = 0; i < size; i++)
      {
        ArrayList header1 = (ArrayList)header.get(i);
        if ((header1 != null) && (header1.size() > 0))
        {
          fetchVo = new ExistingAssetVo();
          fetchVo.setLbxCollateralId(CommonFunction.checkNull(header1.get(0)).trim());
          fetchVo.setAssetType(CommonFunction.checkNull(header1.get(1)).trim());
          fetchVo.setAssetDesc(CommonFunction.checkNull(header1.get(2)).trim());
          fetchVo.setAssetClass(CommonFunction.checkNull(header1.get(3)).trim());
          fetchVo.setAssetValue(CommonFunction.checkNull(header1.get(4)).trim());
          list.add(fetchVo);
          fetchVo = null;
        }

        header1.clear();
        header1 = null;
      }
      header.clear();
      header = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally {
      sh = null;
    }

    return list;
  }

  public ArrayList getAssetsAll(String asset)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuffer query = new StringBuffer();

      query.append("SELECT distinct a.ASSET_COLLATERAL_CLASS,b.DESCRIPTION FROM CR_ASSET_PRODUCT_CATEGORY_M a join generic_master b on a.ASSET_COLLATERAL_CLASS=b.VALUE ");
      query.append("WHERE a.ASSET_TYPE='ASSET'  and a.REC_STATUS='A' and b.GENERIC_KEY='asset_class' ");
      query.append(new StringBuilder().append(" AND a.PRODUCT_CATEGORY='").append(CommonFunction.checkNull(asset)).append("'").toString());
      logger.info(new StringBuilder().append("In creditProcessingDaoI getAssetsAll").append(query).toString());
      ArrayList assetAll = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      for (int i = 0; i < assetAll.size(); i++)
      {
        ArrayList subList = (ArrayList)assetAll.get(i);

        if (subList.size() > 0) {
          CodeDescVo av = new CodeDescVo();
          av.setId(CommonFunction.checkNull(subList.get(0)).trim());
          av.setName(CommonFunction.checkNull(subList.get(1)).trim());
          list.add(av);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      asset = null;
    }
    return list;
  }

  public ArrayList getCollateralsAll(String coll)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuffer query = new StringBuffer();

      query.append("SELECT distinct a.ASSET_COLLATERAL_CLASS,b.DESCRIPTION FROM CR_ASSET_PRODUCT_CATEGORY_M a join generic_master b on a.ASSET_COLLATERAL_CLASS=b.VALUE ");
      query.append("WHERE a.ASSET_TYPE='COLLATERAL'  and a.REC_STATUS='A' and b.GENERIC_KEY='COLLATERAL_CLASS' ");
      query.append(new StringBuilder().append(" AND a.PRODUCT_CATEGORY='").append(CommonFunction.checkNull(coll)).append("'").toString());

      logger.info(new StringBuilder().append("In creditProcessingDaoI getCollateralsAll").append(query).toString());

      ArrayList collateralsAll = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      for (int i = 0; i < collateralsAll.size(); i++) {
        ArrayList sublist = (ArrayList)collateralsAll.get(i);
        if (sublist.size() > 0) {
          CodeDescVo av = new CodeDescVo();
          av.setId(CommonFunction.checkNull(sublist.get(0)).trim());
          av.setName(CommonFunction.checkNull(sublist.get(1)).trim());
          list.add(av);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      coll = null;
    }
    return list;
  }

  public ArrayList getAssetCollateralDocuments(String entityType, String commonId, String stage, String txnType, String source)
  {
    ArrayList list = new ArrayList();
    try
    {
      String tabName = "cr_loan_collateral_m";
      String Commonid = "LOAN_ID";
      String docTable = "cr_document_dtl";
      String assetTable = "cr_asset_collateral_m";

      if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
      {
        tabName = "cr_loan_collateral_m_edit";
        docTable = "cr_document_dtl_edit";
        assetTable = "cr_asset_collateral_m_edit";
      }
      if (stage.equalsIgnoreCase("PRS"))
      {
        tabName = "cr_deal_collateral_m";
        Commonid = "DEAL_ID";
      }
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append(" SELECT DISTINCT TXN_DOC_ID,DOC_ID,DOC_DESC,R.ASSETID,ASSET_COLLATERAL_CLASS, DATE_FORMAT(DOC_RECEIVED_DATE,'").append(this.dateFormat).append("'),").append("  DATE_FORMAT(DOC_DEFFRED_DATE,'").append(this.dateFormat).append("'),DATE_FORMAT(DOC_EXPIRY_DATE,'").append(this.dateFormat).append("'), ").append("  DOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS,Doc_Expiry_Flag,DOC_CHILD_FLAG,DOC_CHILD_IDS,D.ENTITY_ID,d.document_type ").append("  from ").append(docTable).append(" d, ").append(tabName).append(" R,").append(assetTable).append(" A ").append(" where DOC_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()).append("'and TXNID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()).append(" and TXN_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()).append("' and STAGE_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()).append("'").append(" AND D.TXNID = R.").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Commonid)).trim()).append(" ").append(" AND D.ENTITY_ID = R.ASSETID ").append(" AND R.ASSETID=A.ASSET_ID").toString());

      logger.info(new StringBuilder().append("getDocumentsDetail getAssetCollateralDocuments Queryl :  ").append(query).toString());
      DocumentsVo docsVo = null;
      ArrayList docsdeatail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getDocumentsDetail OUTER ARRAYLIST SIZE: ").append(docsdeatail.size()).toString());

      query = null;

      for (int i = 0; i < docsdeatail.size(); i++)
      {
        ArrayList docsdeatail1 = (ArrayList)docsdeatail.get(i);
        if (docsdeatail1.size() > 0)
        {
          docsVo = new DocumentsVo();
          docsVo.setDocId(CommonFunction.checkNull(docsdeatail1.get(0)).trim());
          docsVo.setRealDocId(CommonFunction.checkNull(docsdeatail1.get(1)).trim());
          docsVo.setDocDesc(CommonFunction.checkNull(docsdeatail1.get(2)).trim());
          docsVo.setType(CommonFunction.checkNull(docsdeatail1.get(4)).trim());
          docsVo.setRecieveDate(CommonFunction.checkNull(docsdeatail1.get(5)).trim());
          docsVo.setDeferDate(CommonFunction.checkNull(docsdeatail1.get(6)).trim());
          docsVo.setExpirDate(CommonFunction.checkNull(docsdeatail1.get(7)).trim());

          if (CommonFunction.checkNull(docsdeatail1.get(8)).trim().equals("Y"))
          {
            docsVo.setMandatory("MANDATORY");
          }
          else if (CommonFunction.checkNull(docsdeatail1.get(8)).trim().equals("N"))
          {
            docsVo.setMandatory("NON-MANDATORY");
          }

          if (CommonFunction.checkNull(docsdeatail1.get(9)).trim().equals("Y"))
          {
            docsVo.setOriginal("ORIGINAL");
          }
          else if (CommonFunction.checkNull(docsdeatail1.get(9)).trim().equals("N"))
          {
            docsVo.setOriginal("PHOTOCOPY");
          }

          docsVo.setDocStatus(CommonFunction.checkNull(docsdeatail1.get(10)).trim());
          docsVo.setRemark(CommonFunction.checkNull(docsdeatail1.get(11)).trim());
          docsVo.setExpirFlag(CommonFunction.checkNull(docsdeatail1.get(12)).trim());
          docsVo.setDocChildFlag(CommonFunction.checkNull(docsdeatail1.get(13)).trim());
          docsVo.setDocChildId(CommonFunction.checkNull(docsdeatail1.get(14)).trim());
          docsVo.setEntityId(CommonFunction.checkNull(docsdeatail1.get(15)).trim());
          docsVo.setvDocumentType(CommonFunction.checkNull(docsdeatail1.get(16)).trim());
          list.add(docsVo);
        }
        docsVo = null;
      }
      tabName = null;
      Commonid = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      entityType = null;
      commonId = null;
      stage = null;
      txnType = null;
      source = null;
    }
    return list;
  }

  public ArrayList getAllApplicantDocs(String entityType, String commonId, String stage, String txnType, String source)
  {
    ArrayList list = new ArrayList();
    try
    {
      String docTable = "cr_document_dtl";
      String custTable = "gcd_customer_m";
      String roleTable = "CR_LOAN_CUSTOMER_ROLE";
      if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
      {
        docTable = "cr_document_dtl_edit";
        custTable = "gcd_customer_m_edit";
        roleTable = "CR_LOAN_CUSTOMER_ROLE_edit";
      }
      StringBuilder query = new StringBuilder();

      if ((stage.equalsIgnoreCase("PRD")) || (stage.equalsIgnoreCase("POD")))
      {
        query.append(new StringBuilder().append(" SELECT DISTINCT TXN_DOC_ID,DOC_ID,DOC_DESC,g.CUSTOMER_NAME, DATE_FORMAT(DOC_RECEIVED_DATE,'").append(this.dateFormat).append("'),").append("\tDATE_FORMAT(DOC_DEFFRED_DATE,'").append(this.dateFormat).append("'),DATE_FORMAT(DOC_EXPIRY_DATE,'").append(this.dateFormat).append("'), ").append("\tDOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS,Doc_Expiry_Flag,DOC_CHILD_FLAG,DOC_CHILD_IDS,D.ENTITY_ID,d.document_type ").append("\tfrom ").append(docTable).append(" d, ").append(custTable).append(" g, cr_loan_dtl L,").append(roleTable).append(" R ").append("\twhere DOC_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()).append("'and TXNID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()).append(" and TXN_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()).append("' and STAGE_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()).append("'").append("\tAND D.TXNID = L.LOAN_ID ").append("\tAND D.ENTITY_ID=R.GCD_ID and R.GCD_ID=g.CUSTOMER_ID AND R.LOAN_CUSTOMER_ROLE_TYPE = '").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()).append("' ").toString());
      }
      else if (stage.equalsIgnoreCase("PRS"))
      {
        query.append(new StringBuilder().append(" SELECT DISTINCT TXN_DOC_ID,DOC_ID,DOC_DESC,c.CUSTOMER_NAME, DATE_FORMAT(DOC_RECEIVED_DATE,'").append(this.dateFormat).append("'),").append("\tDATE_FORMAT(DOC_DEFFRED_DATE,'").append(this.dateFormat).append("'),DATE_FORMAT(DOC_EXPIRY_DATE,'").append(this.dateFormat).append("'), ").append("\tDOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS,Doc_Expiry_Flag,DOC_CHILD_FLAG,DOC_CHILD_IDS,D.ENTITY_ID,d.document_type ").append("\tfrom cr_document_dtl d, CR_DEAL_CUSTOMER_M c, CR_DEAL_CUSTOMER_ROLE r ").append("\twhere DOC_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()).append("'and TXNID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()).append(" and TXN_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()).append("' and STAGE_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()).append("'").append("\tAND D.TXNID = r.DEAL_ID ").append("\tAND R.DEAL_CUSTOMER_ROLE_TYPE = '").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()).append("' ").append("\tAND D.ENTITY_ID=r.DEAL_CUSTOMER_ID and r.DEAL_CUSTOMER_ID=c.CUSTOMER_ID").toString());
      }

      logger.info(new StringBuilder().append("getDocumentsDetai Queryllllll: ").append(query).toString());

      DocumentsVo docsVo = null;
      ArrayList docsdeatail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getDocumentsDetail OUTER ARRAYLIST SIZE: ").append(docsdeatail.size()).toString());

      query = null;

      for (int i = 0; i < docsdeatail.size(); i++)
      {
        ArrayList docsdeatail1 = (ArrayList)docsdeatail.get(i);

        if (docsdeatail1.size() > 0)
        {
          docsVo = new DocumentsVo();
          docsVo.setDocId(CommonFunction.checkNull(docsdeatail1.get(0)).trim());
          docsVo.setRealDocId(CommonFunction.checkNull(docsdeatail1.get(1)).trim());
          docsVo.setDocDesc(CommonFunction.checkNull(docsdeatail1.get(2)).trim());
          docsVo.setApplName(CommonFunction.checkNull(docsdeatail1.get(3)).trim());
          docsVo.setRecieveDate(CommonFunction.checkNull(docsdeatail1.get(4)).trim());
          docsVo.setDeferDate(CommonFunction.checkNull(docsdeatail1.get(5)).trim());
          docsVo.setExpirDate(CommonFunction.checkNull(docsdeatail1.get(6)).trim());

          if (CommonFunction.checkNull(docsdeatail1.get(7)).trim().equals("Y"))
          {
            docsVo.setMandatory("MANDATORY");
          }
          else if (CommonFunction.checkNull(docsdeatail1.get(7)).trim().equals("N"))
          {
            docsVo.setMandatory("NON-MANDATORY");
          }

          if (CommonFunction.checkNull(docsdeatail1.get(8)).trim().equals("Y"))
          {
            docsVo.setOriginal("ORIGINAL");
          }
          else if (CommonFunction.checkNull(docsdeatail1.get(8)).trim().equals("N"))
          {
            docsVo.setOriginal("PHOTOCOPY");
          }

          docsVo.setDocStatus(CommonFunction.checkNull(docsdeatail1.get(9)).trim());
          docsVo.setRemark(CommonFunction.checkNull(docsdeatail1.get(10)).trim());
          docsVo.setExpirFlag(CommonFunction.checkNull(docsdeatail1.get(11)).trim());
          docsVo.setDocChildFlag(CommonFunction.checkNull(docsdeatail1.get(12)).trim());
          docsVo.setDocChildId(CommonFunction.checkNull(docsdeatail1.get(13)).trim());
          docsVo.setEntityId(CommonFunction.checkNull(docsdeatail1.get(14)).trim());
          docsVo.setvDocumentType(CommonFunction.checkNull(docsdeatail1.get(15)).trim());
          list.add(docsVo);
        }
        docsVo = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      entityType = null;
      commonId = null;
      stage = null;
      txnType = null;
      source = null;
    }
    return list;
  }

  public ArrayList getAssetCollateralDealDocuments(String entityType, String commonId, String stage, String txnType)
  {
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder tabName = new StringBuilder();
      StringBuilder Commonid = new StringBuilder();

      if (stage.equalsIgnoreCase("PRS"))
      {
        tabName.append("cr_deal_collateral_m");
        Commonid.append("dEAL_ID");
      }
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append(" SELECT DISTINCT TXN_DOC_ID,DOC_ID,DOC_DESC,R.ASSETID,ASSET_COLLATERAL_CLASS, DATE_FORMAT(DOC_RECEIVED_DATE,'").append(this.dateFormat).append("'),").append("  DATE_FORMAT(DOC_DEFFRED_DATE,'").append(this.dateFormat).append("'),DATE_FORMAT(DOC_EXPIRY_DATE,'").append(this.dateFormat).append("'), ").append("  DOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS,Doc_Expiry_Flag,DOC_CHILD_FLAG,DOC_CHILD_IDS,D.ENTITY_ID,d.document_type ").append("  from cr_document_dtl d, ").append(tabName).append(" R,cr_asset_collateral_m A ").append(" where DOC_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()).append("'and TXNID=(select loan_deal_id from cr_loan_dtl where loan_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()).append("')  and TXN_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()).append("' and STAGE_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()).append("'").append(" AND D.TXNID = R.").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(Commonid)).trim()).append(" ").append(" AND D.ENTITY_ID = R.ASSETID ").append(" AND R.ASSETID=A.ASSET_ID").toString());

      logger.info(new StringBuilder().append("getDocumentsDetail getAssetCollateralDealDocuments Queryl: ").append(query).toString());
      DocumentsVo docsVo = null;
      ArrayList docsdeatail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getDocumentsDealDetail OUTER ARRAYLIST SIZE: ").append(docsdeatail.size()).toString());

      query = null;

      for (int i = 0; i < docsdeatail.size(); i++)
      {
        ArrayList docsdeatail1 = (ArrayList)docsdeatail.get(i);

        if (docsdeatail1.size() > 0)
        {
          docsVo = new DocumentsVo();
          docsVo.setDocId(CommonFunction.checkNull(docsdeatail1.get(0)).trim());
          docsVo.setRealDocId(CommonFunction.checkNull(docsdeatail1.get(1)).trim());
          docsVo.setDocDesc(CommonFunction.checkNull(docsdeatail1.get(2)).trim());
          docsVo.setType(CommonFunction.checkNull(docsdeatail1.get(4)).trim());
          docsVo.setRecieveDate(CommonFunction.checkNull(docsdeatail1.get(5)).trim());
          docsVo.setDeferDate(CommonFunction.checkNull(docsdeatail1.get(6)).trim());
          docsVo.setExpirDate(CommonFunction.checkNull(docsdeatail1.get(7)).trim());

          if (CommonFunction.checkNull(docsdeatail1.get(8)).trim().equals("Y"))
          {
            docsVo.setMandatory("MANDATORY");
          }
          else if (CommonFunction.checkNull(docsdeatail1.get(8)).trim().equals("N"))
          {
            docsVo.setMandatory("NON-MANDATORY");
          }

          if (CommonFunction.checkNull(docsdeatail1.get(9)).trim().equals("Y"))
          {
            docsVo.setOriginal("ORIGINAL");
          }
          else if (CommonFunction.checkNull(docsdeatail1.get(9)).trim().equals("N"))
          {
            docsVo.setOriginal("PHOTOCOPY");
          }

          docsVo.setDocStatus(CommonFunction.checkNull(docsdeatail1.get(10)).trim());
          docsVo.setRemark(CommonFunction.checkNull(docsdeatail1.get(11)).trim());
          docsVo.setExpirFlag(CommonFunction.checkNull(docsdeatail1.get(12)).trim());
          docsVo.setDocChildFlag(CommonFunction.checkNull(docsdeatail1.get(13)).trim());
          docsVo.setDocChildId(CommonFunction.checkNull(docsdeatail1.get(14)).trim());
          docsVo.setEntityId(CommonFunction.checkNull(docsdeatail1.get(15)).trim());
          docsVo.setvDocumentType(CommonFunction.checkNull(docsdeatail1.get(16)).trim());
          list.add(docsVo);
        }
      }
      tabName = null;
      Commonid = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      entityType = null;
      commonId = null;
      stage = null;
      txnType = null;
    }
    return list;
  }

  public ArrayList getAllApplicantDealDocs(String entityType, String commonId, String stage, String txnType)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();

      query.append(new StringBuilder().append(" SELECT DISTINCT TXN_DOC_ID,DOC_ID,DOC_DESC,c.CUSTOMER_NAME, DATE_FORMAT(DOC_RECEIVED_DATE,'").append(this.dateFormat).append("'),").append("\tDATE_FORMAT(DOC_DEFFRED_DATE,'").append(this.dateFormat).append("'),DATE_FORMAT(DOC_EXPIRY_DATE,'").append(this.dateFormat).append("'), ").append("\tDOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS,Doc_Expiry_Flag,DOC_CHILD_FLAG,DOC_CHILD_IDS,D.ENTITY_ID,d.document_type ").append("\tfrom cr_document_dtl d, CR_DEAL_CUSTOMER_M c, CR_DEAL_CUSTOMER_ROLE r ").append("\twhere DOC_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()).append("'and TXNID=(select loan_deal_id from cr_loan_dtl where loan_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()).append("') and TXN_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()).append("' and STAGE_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()).append("'").append("\tAND D.TXNID = r.DEAL_ID ").append("\tAND R.DEAL_CUSTOMER_ROLE_TYPE = '").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()).append("' ").append("\tAND D.ENTITY_ID=r.DEAL_CUSTOMER_ID and r.DEAL_CUSTOMER_ID=c.CUSTOMER_ID").toString());

      logger.info(new StringBuilder().append("getDocumentsDealDetail Queryl: ").append(query).toString());

      DocumentsVo docsVo = null;
      ArrayList docsdeatail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getDocumentsDealDetail OUTER ARRAYLIST SIZE: ").append(docsdeatail.size()).toString());

      query = null;

      for (int i = 0; i < docsdeatail.size(); i++)
      {
        ArrayList docsdeatail1 = (ArrayList)docsdeatail.get(i);

        if (docsdeatail1.size() > 0)
        {
          docsVo = new DocumentsVo();
          docsVo.setDocId(CommonFunction.checkNull(docsdeatail1.get(0)).trim());
          docsVo.setRealDocId(CommonFunction.checkNull(docsdeatail1.get(1)).trim());
          docsVo.setDocDesc(CommonFunction.checkNull(docsdeatail1.get(2)).trim());
          docsVo.setApplName(CommonFunction.checkNull(docsdeatail1.get(3)).trim());
          docsVo.setRecieveDate(CommonFunction.checkNull(docsdeatail1.get(4)).trim());
          docsVo.setDeferDate(CommonFunction.checkNull(docsdeatail1.get(5)).trim());
          docsVo.setExpirDate(CommonFunction.checkNull(docsdeatail1.get(6)).trim());

          if (CommonFunction.checkNull(docsdeatail1.get(7)).trim().equals("Y"))
          {
            docsVo.setMandatory("MANDATORY");
          }
          else if (CommonFunction.checkNull(docsdeatail1.get(7)).trim().equals("N"))
          {
            docsVo.setMandatory("NON-MANDATORY");
          }

          if (CommonFunction.checkNull(docsdeatail1.get(8)).trim().equals("Y"))
          {
            docsVo.setOriginal("ORIGINAL");
          }
          else if (CommonFunction.checkNull(docsdeatail1.get(8)).trim().equals("N"))
          {
            docsVo.setOriginal("PHOTOCOPY");
          }

          docsVo.setDocStatus(CommonFunction.checkNull(docsdeatail1.get(9)).trim());
          docsVo.setRemark(CommonFunction.checkNull(docsdeatail1.get(10)).trim());
          docsVo.setExpirFlag(CommonFunction.checkNull(docsdeatail1.get(11)).trim());
          docsVo.setDocChildFlag(CommonFunction.checkNull(docsdeatail1.get(12)).trim());
          docsVo.setDocChildId(CommonFunction.checkNull(docsdeatail1.get(13)).trim());
          docsVo.setEntityId(CommonFunction.checkNull(docsdeatail1.get(14)).trim());
          docsVo.setvDocumentType(CommonFunction.checkNull(docsdeatail1.get(15)).trim());
          list.add(docsVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      entityType = null;
      commonId = null;
      stage = null;
      txnType = null;
    }
    return list;
  }

  public ArrayList getAdditionalDealDocs(String entityType, String commonId, String stage, String txnType)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();

      query.append(new StringBuilder().append(" SELECT DISTINCT DOC_DESC,DATE_FORMAT(DOC_RECEIVED_DATE,'").append(this.dateFormat).append("'),").append("\tDATE_FORMAT(DOC_DEFFRED_DATE,'").append(this.dateFormat).append("'),DATE_FORMAT(DOC_EXPIRY_DATE,'").append(this.dateFormat).append("'), ").append("\tDOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS,d.document_type").append("\tfrom cr_document_dtl d").append("\twhere DOC_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()).append("' ").append("  and TXNID=(select loan_deal_id from cr_loan_dtl where loan_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()).append("')").append("  and TXN_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()).append("' ").append("  and STAGE_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()).append("' ").append("  and DOC_ID IS NULL ").toString());

      logger.info(new StringBuilder().append("getAdditionalDealDocs Query: ").append(query).toString());

      DocumentsVo docsVo = null;
      ArrayList docsdeatail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getAdditionalDealDocs OUTER ARRAYLIST SIZE: ").append(docsdeatail.size()).toString());

      query = null;

      for (int i = 0; i < docsdeatail.size(); i++)
      {
        ArrayList docsdeatail1 = (ArrayList)docsdeatail.get(i);

        if (docsdeatail1.size() > 0)
        {
          docsVo = new DocumentsVo();
          docsVo.setDocNameAddn(CommonFunction.checkNull(docsdeatail1.get(0)).trim());
          docsVo.setAddnReceivedDate(CommonFunction.checkNull(docsdeatail1.get(1)).trim());
          docsVo.setAddnDeferredDate(CommonFunction.checkNull(docsdeatail1.get(2)).trim());
          docsVo.setAddnExpiryDate(CommonFunction.checkNull(docsdeatail1.get(3)).trim());
          docsVo.setMandateOrNonMandate(CommonFunction.checkNull(docsdeatail1.get(4)).trim());
          docsVo.setOrgOrCopy(CommonFunction.checkNull(docsdeatail1.get(5)).trim());
          docsVo.setAddnDocStatus(CommonFunction.checkNull(docsdeatail1.get(6)).trim());
          docsVo.setAddnRemarks(CommonFunction.checkNull(docsdeatail1.get(7)).trim());
          docsVo.setvDocumentType(CommonFunction.checkNull(docsdeatail1.get(8)).trim());

          list.add(docsVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      entityType = null;
      commonId = null;
      stage = null;
      txnType = null;
    }
    return list;
  }

  public ArrayList getApplicationDealDocuments(String entityType, String commonId, String stage, String txnType)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("  SELECT TXN_DOC_ID,DOC_ID,DOC_DESC,DATE_FORMAT(DOC_RECEIVED_DATE,'").append(this.dateFormat).append("'),").append("\tDATE_FORMAT(DOC_DEFFRED_DATE,'").append(this.dateFormat).append("'),DATE_FORMAT(DOC_EXPIRY_DATE,'").append(this.dateFormat).append("'), ").append("\tDOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS,Doc_Expiry_Flag,DOC_CHILD_FLAG,DOC_CHILD_IDS,d.ENTITY_ID,d.document_type ").append("\tfrom cr_document_dtl d ").append("\twhere DOC_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()).append("'and TXNID=(select loan_deal_id from cr_loan_dtl where loan_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()).append("') and TXN_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()).append("' and STAGE_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()).append("'and ENTITY_ID=(select loan_deal_id from cr_loan_dtl where loan_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()).append("')").toString());

      logger.info(new StringBuilder().append("getDocumentsDetai Queryl: ").append(query).toString());
      DocumentsVo docsVo = null;
      ArrayList docsdeatail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getDocumentsDetail OUTER ARRAYLIST SIZE: ").append(docsdeatail.size()).toString());

      for (int i = 0; i < docsdeatail.size(); i++)
      {
        logger.info(new StringBuilder().append("getDocumentsDetail").append(docsdeatail.get(i).toString()).toString());
        ArrayList docsdeatail1 = (ArrayList)docsdeatail.get(i);
        if (docsdeatail1.size() > 0)
        {
          logger.info(new StringBuilder().append("getDocumentsDetail INNNER ARRAYLIST SIZE: ").append(docsdeatail1.size()).toString());
          docsVo = new DocumentsVo();
          docsVo.setDocId(CommonFunction.checkNull(docsdeatail1.get(0)).trim());
          docsVo.setRealDocId(CommonFunction.checkNull(docsdeatail1.get(1)).trim());
          docsVo.setDocDesc(CommonFunction.checkNull(docsdeatail1.get(2)).trim());
          docsVo.setRecieveDate(CommonFunction.checkNull(docsdeatail1.get(3)).trim());
          logger.info(new StringBuilder().append("recieve date:").append(CommonFunction.checkNull(docsdeatail1.get(3))).toString());
          docsVo.setDeferDate(CommonFunction.checkNull(docsdeatail1.get(4)).trim());
          docsVo.setExpirDate(CommonFunction.checkNull(docsdeatail1.get(5)).trim());

          if (CommonFunction.checkNull(docsdeatail1.get(6)).trim().equals("Y"))
          {
            docsVo.setMandatory("MANDATORY");
          }
          else if (CommonFunction.checkNull(docsdeatail1.get(6)).trim().equals("N"))
          {
            docsVo.setMandatory("NON-MANDATORY");
          }

          if (CommonFunction.checkNull(docsdeatail1.get(7)).trim().equals("Y"))
          {
            docsVo.setOriginal("ORIGINAL");
          }
          else if (CommonFunction.checkNull(docsdeatail1.get(7)).trim().equals("N"))
          {
            docsVo.setOriginal("PHOTOCOPY");
          }

          docsVo.setDocStatus(CommonFunction.checkNull(docsdeatail1.get(8)).trim());
          docsVo.setRemark(CommonFunction.checkNull(docsdeatail1.get(9)).trim());
          docsVo.setExpirFlag(CommonFunction.checkNull(docsdeatail1.get(10)).trim());
          docsVo.setDocChildFlag(CommonFunction.checkNull(docsdeatail1.get(11)).trim());
          docsVo.setDocChildId(CommonFunction.checkNull(docsdeatail1.get(12)).trim());
          docsVo.setEntityId(CommonFunction.checkNull(docsdeatail1.get(13)).trim());
          docsVo.setvDocumentType(CommonFunction.checkNull(docsdeatail1.get(14)).trim());
          list.add(docsVo);
        }
        query = null;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      entityType = null;
      commonId = null;
      stage = null;
      txnType = null;
    }
    return list;
  }

  public ArrayList getAdditionalDocs(String entityType, String commonId, String stage, String txnType, String source)
  {
    ArrayList list = new ArrayList();
    try
    {
      String table = "cr_document_dtl";
      if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
        table = "cr_document_dtl_edit";
      StringBuilder query = new StringBuilder();

      query.append(new StringBuilder().append(" SELECT DISTINCT DOC_DESC,DATE_FORMAT(DOC_RECEIVED_DATE,'").append(this.dateFormat).append("'),").append("\tDATE_FORMAT(DOC_DEFFRED_DATE,'").append(this.dateFormat).append("'),DATE_FORMAT(DOC_EXPIRY_DATE,'").append(this.dateFormat).append("'), ").append("\tDOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS,d.document_type").append("\tfrom ").append(table).append(" d").append("\twhere DOC_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(entityType)).trim()).append("' ").append("  and TXNID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()).append(" ").append("  and TXN_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()).append("' ").append("  and STAGE_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()).append("' ").append("  and DOC_ID IS NULL ").toString());

      logger.info(new StringBuilder().append("getAdditionalDocs Query: ").append(query).toString());

      DocumentsVo docsVo = null;
      ArrayList docsdeatail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getAdditionalDocs OUTER ARRAYLIST SIZE: ").append(docsdeatail.size()).toString());

      query = null;

      for (int i = 0; i < docsdeatail.size(); i++)
      {
        ArrayList docsdeatail1 = (ArrayList)docsdeatail.get(i);
        if (docsdeatail1.size() > 0)
        {
          docsVo = new DocumentsVo();
          docsVo.setDocNameAddn(CommonFunction.checkNull(docsdeatail1.get(0)).trim());
          docsVo.setAddnReceivedDate(CommonFunction.checkNull(docsdeatail1.get(1)).trim());
          docsVo.setAddnDeferredDate(CommonFunction.checkNull(docsdeatail1.get(2)).trim());
          docsVo.setAddnExpiryDate(CommonFunction.checkNull(docsdeatail1.get(3)).trim());
          docsVo.setMandateOrNonMandate(CommonFunction.checkNull(docsdeatail1.get(4)).trim());
          docsVo.setOrgOrCopy(CommonFunction.checkNull(docsdeatail1.get(5)).trim());
          docsVo.setAddnDocStatus(CommonFunction.checkNull(docsdeatail1.get(6)).trim());
          docsVo.setAddnRemarks(CommonFunction.checkNull(docsdeatail1.get(7)).trim());
          docsVo.setvDocumentType(CommonFunction.checkNull(docsdeatail1.get(8)).trim());
          list.add(docsVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      entityType = null;
      commonId = null;
      stage = null;
      txnType = null;
      source = null;
    }
    return list;
  }

  public ArrayList getchargesDetailInCM(String loanStage, String loanId)
  {
    CallableStatement cst = null;
    int dId = 0;
    ArrayList list = new ArrayList();
    Connection con = ConnectionDAO.getConnection();
    try {
      if (!loanId.trim().equalsIgnoreCase(""))
        dId = Integer.parseInt(loanId.trim());
      StringBuilder selectQuery = new StringBuilder();
      selectQuery.append(new StringBuilder().append("select LOAN_CUSTOMER_ID,LOAN_PRODUCT,LOAN_SCHEME,LOAN_LOAN_AMOUNT,LOAN_MARGIN_AMOUNT from cr_loan_dtl where LOAN_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim()).toString());
      ArrayList productList = ConnectionDAO.sqlSelect(selectQuery.toString());

      selectQuery = null;

      StringBuilder supllierIdQ = new StringBuilder();
      StringBuilder suplId = new StringBuilder();
      StringBuilder manfId = new StringBuilder();
      StringBuilder exactManfId = new StringBuilder();
      StringBuilder exactSuplId = new StringBuilder();
      StringBuilder query = new StringBuilder();
      String rsp = "";
      suplId.append("SU;");
      manfId.append("MF;");

      supllierIdQ.append(new StringBuilder().append("select distinct ASSET_SUPPLIER from cr_loan_collateral_m L,cr_asset_collateral_m a  where L.ASSETID=a.ASSET_ID and a.ASSET_TYPE='ASSET'  and  LOAN_ID=").append(loanId).toString());

      logger.info(new StringBuilder().append("getchargesDetailInCM supllierIdQ:  ").append(supllierIdQ.toString()).toString());

      ArrayList supllierIdList = ConnectionDAO.sqlSelect(supllierIdQ.toString());

      supllierIdQ = null;
      if (supllierIdList.size() > 0)
      {
        for (int i = 0; i < supllierIdList.size(); i++)
        {
          ArrayList subsupllierIdList = (ArrayList)supllierIdList.get(i);
          if (subsupllierIdList.size() > 0)
          {
            suplId.append(new StringBuilder().append(CommonFunction.checkNull(subsupllierIdList.get(0))).append("|SU;").toString());
          }
        }
      }
      logger.info(new StringBuilder().append("In getchargesDetailInCM() ## suplId ## ").append(suplId).toString());
      logger.info(new StringBuilder().append("In getchargesDetailInCM() ## manfId ##length ").append(suplId.length()).toString());

      logger.info(new StringBuilder().append("getchargesDetailInCM appendSQL true----  in check index Of").append(suplId.lastIndexOf("SU;")).append("------").append(suplId.length() - 3).toString());
      if (suplId.lastIndexOf("SU;") == suplId.length() - 3) {
        logger.info("getchargesDetailInCM appendSQL true----  in check index Of");
        exactSuplId.append(suplId.substring(0, suplId.length() - 3));
        logger.info(new StringBuilder().append("getchargesDetailInCM ...suplId.").append(exactSuplId).toString());
      }
      StringBuilder manufactIdQ = new StringBuilder();
      manufactIdQ.append(new StringBuilder().append("select distinct ASSET_MANUFATURER from cr_loan_collateral_m L,cr_asset_collateral_m a  where L.ASSETID=a.ASSET_ID and a.ASSET_TYPE='ASSET'  and  LOAN_ID=").append(loanId).toString());

      logger.info(new StringBuilder().append("getchargesDetailInCM manufactIdQ:  ").append(manufactIdQ.toString()).toString());
      ArrayList manufactIdList = ConnectionDAO.sqlSelect(manufactIdQ.toString());

      manufactIdQ = null;

      if (manufactIdList.size() > 0)
      {
        for (int i = 0; i < manufactIdList.size(); i++)
        {
          ArrayList submanufactIdList = (ArrayList)manufactIdList.get(i);
          if (submanufactIdList.size() > 0)
          {
            manfId.append(new StringBuilder().append(CommonFunction.checkNull(submanufactIdList.get(0))).append("|MF;").toString());
          }
        }
      }

      logger.info(new StringBuilder().append("In getchargesDetailInCM() ## manfId ## ").append(manfId).toString());
      logger.info(new StringBuilder().append("In getchargesDetailInCM() ## manfId ##length ").append(manfId.length()).toString());

      logger.info(new StringBuilder().append("getchargesDetailInCM appendSQL true----  in check index Of").append(manfId.lastIndexOf("MF;")).append("------").append(manfId.length() - 3).toString());
      if (manfId.lastIndexOf("MF;") == manfId.length() - 3) {
        logger.info("getchargesDetailInCM appendSQL true----  in check index Of");

        exactManfId.append(manfId.substring(0, manfId.length() - 3));
        logger.info(new StringBuilder().append("getchargesDetailInCM ...manfId.").append(exactManfId).toString());
      }

      query.append(new StringBuilder().append("SELECT IFNULL(PARTNER_ID,'') FROM cr_business_partner_dtl WHERE LOAN_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim()).append(" AND IFNULL(SELF_FLAG,'')='N'").toString());
      String val = ConnectionDAO.singleReturn(query.toString());
      if (!CommonFunction.checkNull(val).equalsIgnoreCase(""))
      {
        rsp = new StringBuilder().append("CP;").append(val).append("|").toString();
      }

      StringBuilder checkQuery = new StringBuilder();
      checkQuery.append(new StringBuilder().append("select DEAL_CHARGE_DTL_ID from cr_txncharges_dtl where TXN_TYPE='LIM' and TXN_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim()).toString());
      boolean status = ConnectionDAO.checkStatus(checkQuery.toString());

      checkQuery = null;
      if (!status)
      {
        for (int i = 0; i < productList.size(); i++)
        {
          ArrayList subproductList = (ArrayList)productList.get(i);
          if (subproductList.size() > 0)
          {
            String chargeStr = new StringBuilder().append("2;").append(CommonFunction.checkNull(subproductList.get(3))).append("|3;").append(CommonFunction.checkNull(subproductList.get(4))).append("|").toString();

            String bpStr = new StringBuilder().append("CS;").append(CommonFunction.checkNull(subproductList.get(0))).append("|").append(exactSuplId).append(exactManfId).append(rsp).toString();
            con.setAutoCommit(false);
            logger.info(new StringBuilder().append("Loan Id/Deal Id ").append(dId).append(" STAGE INFO: ").append(loanStage).append(" Total Charges: ").append(chargeStr).append(" customer Id:  ").append(CommonFunction.checkNull(subproductList.get(0))).append(" Product: ").append(CommonFunction.checkNull(subproductList.get(1))).append(" Scheme: ").append(CommonFunction.checkNull(subproductList.get(2))).append("bpStr: ").append(bpStr).toString());
            cst = con.prepareCall("call GET_CHARGES(?,?,?,?,?,?,?,?)");
            cst.setString(1, loanStage);
            cst.setInt(2, dId);
            cst.setString(3, CommonFunction.checkNull(subproductList.get(1)));
            cst.setString(4, CommonFunction.checkNull(subproductList.get(2)));
            cst.setString(5, chargeStr);
            cst.setString(6, bpStr);
            cst.registerOutParameter(7, 1);
            cst.registerOutParameter(8, 1);
            cst.executeUpdate();
            String s1 = cst.getString(7);
            String s2 = cst.getString(8);

            if ((s1 != null) && (s1.equalsIgnoreCase("S")))
            {
              status = true;
              con.commit();
              logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
            }
            else
            {
              con.rollback();
              logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
            }
            logger.info(new StringBuilder().append("s1: ").append(s1).toString());
            logger.info(new StringBuilder().append("s2: ").append(s2).toString());

            s1 = null;
            s2 = null;
          }
        }
      }
    } catch (Exception e) {
      try {
        con.rollback();
      } catch (SQLException e1) {
        logger.info(new StringBuilder().append("Rollback collectDocuments proc( GET_CHARGES )").append(e1).toString());
        e1.printStackTrace();
      }
      e.printStackTrace();
    }
    finally
    {
      try
      {
        cst = null;
        if (con != null)
          con.close();
      }
      catch (SQLException e) {
        e.printStackTrace();
      }

    }

    try
    {
      con = ConnectionDAO.getConnection();
      ChargeVo vo = null;
      StringBuilder query = new StringBuilder();
      query.append("select DEAL_CHARGE_DTL_ID,DEAL_CHARGE_TYPE,DEAL_CHARGE_CODE,CHARGE_DESC,");
      query.append(" GM.DESCRIPTION,v.DEALER_DESC,DEAL_CHARGE_CALCULATED_AMOUNT,");
      query.append(" DEAL_CHARGE_FINAL_AMOUNT,g.CUSTOMER_NAME,L.LOAN_LOAN_AMOUNT,");
      query.append(" (IFNULL(L.LOAN_ASSET_COST,0)-IFNULL(L.LOAN_LOAN_AMOUNT,0)) AS 'MARGIN AMOUNT',DEAL_CHARGE_CALCULATED_ON,if(DEAL_CHARGE_METHOD='P','PERCENTAGE','FLAT'),");
      query.append(" if(DEAL_CHARGE_TAX_INCLUSIVE='N','NO','YES'),DEAL_CHARGE_TAX_RATE1,");
      query.append(" DEAL_CHARGE_TAX_RATE2,DEAL_CHARGE_BP_TYPE, if(DEAL_MIN_CHARGE_METHOD='P','PERCENTAGE','FLAT'),DEAL_CHARGE_MIN_CHARGE_AMOUNT,");
      query.append(" DEAL_CHARGE_TAX_APPLICABLE,DEAL_CHARGE_TDS_APPLICABLE,DEAL_CHARGE_TAX_AMOUNT1,DEAL_CHARGE_TAX_AMOUNT2,DEAL_CHARGE_MIN_CHARGE_AMOUNT,DEAL_CHARGE_TDS_RATE,DEAL_CHARGE_TDS_AMOUNT,DEAL_CHARGE_NET_AMOUNT,DEAL_CHARGE_APPLICATION_STAGE, ");
      query.append(new StringBuilder().append(" (SELECT sum(DEAL_CHARGE_CALCULATED_AMOUNT) from  cr_txncharges_dtl where TXN_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim()).append("' and DEAL_CHARGE_BP_TYPE='CS' and DEAL_CHARGE_TYPE='R') as CUST_CHARGE_AMOUNT, ").toString());
      query.append(new StringBuilder().append(" (SELECT sum(DEAL_CHARGE_FINAL_AMOUNT) from  cr_txncharges_dtl where TXN_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim()).append("' and DEAL_CHARGE_BP_TYPE='CS' and DEAL_CHARGE_TYPE='R') as CUST_FINAL_CHARGE_AMOUNT, ").toString());
      query.append(" if(ifnull(DEAL_CHARGE_BP_TYPE,'')='CP',(select  name  from com_partner_details_m where partner_id=DEAL_CHARGE_BP_ID),GM.DESCRIPTION)'RSPNAME' ");
      query.append(" from cr_txncharges_dtl t ");
      query.append(" left join com_charge_code_m c on t.DEAL_CHARGE_CODE=c.CHARGE_CODE ");
      query.append(" left join cr_dsa_dealer_m v on v.DEALER_ID=t.DEAL_CHARGE_BP_ID and v.BP_TYPE=t.DEAL_CHARGE_BP_TYPE and v.REC_STATUS='A' ");
      query.append(" left join gcd_customer_m g on g.CUSTOMER_ID=t.DEAL_CHARGE_BP_ID ");
      query.append(" left join cr_loan_dtl L on L.LOAN_ID=TXN_ID ");
      query.append(" left join generic_master GM on GM.VALUE=DEAL_CHARGE_BP_TYPE and GM.GENERIC_KEY='BPTYPE' ");
      query.append(new StringBuilder().append(" where TXN_TYPE='LIM' and TXN_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim()).append("' ").toString());
      logger.info(new StringBuilder().append("getchargesDetail query ").append(query).toString());
      ArrayList charges = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getchargesDetail size ").append(charges.size()).toString());
      query = null;
      for (int i = 0; i < charges.size(); i++)
      {
        ArrayList subcharges = (ArrayList)charges.get(i);
        if (subcharges.size() > 0) {
          vo = new ChargeVo();
          vo.setChargeId(CommonFunction.checkNull(subcharges.get(0)).trim());
          if (CommonFunction.checkNull(subcharges.get(1)).trim().equals("R"))
          {
            vo.setChargeType("Receivable");
          }
          else if (CommonFunction.checkNull(subcharges.get(1)).trim().equals("P"))
          {
            vo.setChargeType("Payable");
          }
          vo.setChargeCode(CommonFunction.checkNull(subcharges.get(2)).trim());
          vo.setChargeDesc(CommonFunction.checkNull(subcharges.get(3)).trim());
          vo.setChargeBPType(CommonFunction.checkNull(subcharges.get(4)).trim());
          if (CommonFunction.checkNull(subcharges.get(16)).trim().equals("CS"))
          {
            vo.setChargeBPId(CommonFunction.checkNull(subcharges.get(8)).trim());
          }
          else if (CommonFunction.checkNull(subcharges.get(16)).trim().equals("CP"))
          {
            vo.setChargeBPId(CommonFunction.checkNull(subcharges.get(30)).trim());
          }
          else
          {
            vo.setChargeBPId(CommonFunction.checkNull(subcharges.get(5)).trim());
          }
          logger.info(new StringBuilder().append("Name : ").append(vo.getChargeBPId()).toString());

          if (!CommonFunction.checkNull(subcharges.get(6)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(6)).trim());
            vo.setChargeCal(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(7)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(7)).trim());
            vo.setChargeFinal(this.myFormatter.format(reconNum));
          }

          vo.setLoanAmount(CommonFunction.checkNull(subcharges.get(9)).trim());
          vo.setMarginAmount(CommonFunction.checkNull(subcharges.get(10)).trim());
          vo.setChargeCalculatedOn(CommonFunction.checkNull(subcharges.get(11)).trim());
          vo.setChargeMethod(CommonFunction.checkNull(subcharges.get(12)).trim());
          vo.setTaxsInclusive(CommonFunction.checkNull(subcharges.get(13)).trim());
          if (!CommonFunction.checkNull(subcharges.get(14)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(14)).trim());
            vo.setTaxtRat1(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(15)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(15)).trim());
            logger.info(new StringBuilder().append("setTaxtRat2: ").append(reconNum).toString());
            vo.setTaxtRat2(this.myFormatter.format(reconNum));
          }
          vo.setMinChargeMethod(CommonFunction.checkNull(subcharges.get(17)).trim());
          vo.setMinChargeCalculatedOn(CommonFunction.checkNull(subcharges.get(18)).trim());
          vo.setDealChargeTaxApp(CommonFunction.checkNull(subcharges.get(19)).trim());
          vo.setDealChargeTdsApp(CommonFunction.checkNull(subcharges.get(20)).trim());
          if (!CommonFunction.checkNull(subcharges.get(21)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(21)).trim());
            vo.setDealChargeTaxAmount1(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(22)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(22)).trim());

            vo.setDealChargeTaxAmount2(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(subcharges.get(23)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(23)).trim());
            vo.setDealChargeMinChargeAmount(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(24)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(24)).trim());

            vo.setDealChargeTdsRate(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(25)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(25)).trim());
            vo.setDealChargeTdsAmount(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(26)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(26)).trim());

            vo.setDealChargeNetAmount(this.myFormatter.format(reconNum));
          }

          vo.setApplStage(CommonFunction.checkNull(subcharges.get(27)).trim());
          if (!CommonFunction.checkNull(subcharges.get(28)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(28)).trim());
            vo.setCustomerCharge(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(subcharges.get(29)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(29)).trim());
            vo.setCustomerFinalCharge(this.myFormatter.format(reconNum));
          }

          list.add(vo);
        }
        vo = null;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      try {
        if (con != null)
          con.close();
      } catch (SQLException e) {
        e.printStackTrace();
      }
    }

    return list;
  }

  public ArrayList getChildDocs(String docId)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select DOC_CHILD_ID,DOC_DESC from cr_document_child_m  where REC_STATUS='A' and  DOC_ID=").append(docId).toString());

      logger.info(new StringBuilder().append("In creditProcessingDaoI getChildDocs").append(query).toString());

      ArrayList collateralsAll = ConnectionDAO.sqlSelect(query.toString());

      query = null;

      for (int i = 0; i < collateralsAll.size(); i++) {
        ArrayList sublist = (ArrayList)collateralsAll.get(i);
        if (sublist.size() > 0) {
          CodeDescVo av = new CodeDescVo();
          av.setId(CommonFunction.checkNull(sublist.get(0)).trim());
          av.setName(CommonFunction.checkNull(sublist.get(1)).trim());
          list.add(av);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      docId = null;
    }
    return list;
  }

  public ArrayList<ConsumerVo> getCibilData(Object ob)
  {
    ArrayList list = new ArrayList();
    ConsumerVo vo = (ConsumerVo)ob;
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT CIBIL_ID,CONSUMER_NAME,DATE_FORMAT(DEAL_DATE,'").append(this.dateFormatWithTime).append("'),CIBIL_SCORE,TOTAL_ACCOUNTS,TOTAL_OVERDUE_ACCOUNTS,HIGHER_SANCTION_AMOUNT,CURRENT_BALANCE,OVERDUE_BALANCE,NO_OF_ENQUIRIES,if(DECISION='A','Approved','Rejected')AS DECISION,COMMENT from cr_cibil_dtl where  DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getDealId().trim())).append("'").toString());
      logger.info(new StringBuilder().append("getDATA:Query ").append(query.toString()).toString());

      ArrayList list1 = ConnectionDAO.sqlSelect(query.toString());
      query = null;

      logger.info(new StringBuilder().append("getList").append(list1.size()).toString());
      for (int i = 0; i < list1.size(); i++)
      {
        logger.info(new StringBuilder().append("getList").append(list1.get(i).toString()).toString());
        ArrayList list2 = (ArrayList)list1.get(i);
        if (list2.size() > 0)
        {
          vo = new ConsumerVo();
          vo.setCivilId(CommonFunction.checkNull(list2.get(0)));
          vo.setConsumername(CommonFunction.checkNull(list2.get(1)));
          vo.setDateandtime(CommonFunction.checkNull(list2.get(2)).toString());
          vo.setCibilCodes(CommonFunction.checkNull(list2.get(3)).toString());
          vo.setTotalAc(CommonFunction.checkNull(list2.get(4)).toString());

          vo.setTotalOverdueac(CommonFunction.checkNull(list2.get(5)).toString());

          if (!CommonFunction.checkNull(list2.get(6)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(list2.get(6)).trim());
            vo.setHigherSanctionAmount(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(list2.get(7)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(list2.get(7)).trim());
            vo.setCurrentBalance(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(list2.get(8)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(list2.get(8)).trim());
            vo.setOverDue(this.myFormatter.format(reconNum));
          }

          vo.setNoofEnquiry(CommonFunction.checkNull(list2.get(9)).toString());
          vo.setDecison(CommonFunction.checkNull(list2.get(10)).toString());
          vo.setComment(CommonFunction.checkNull(list2.get(11)).toString());

          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      vo = null;
    }
    return list;
  }

  public int saveCibilData(Object ob)
  {
    boolean status = false;
    int maxId = 0;
    ConsumerVo vo = (ConsumerVo)ob;

    String name = vo.getConsumername();
    String dateTime = new StringBuilder().append(CommonFunction.checkNull(vo.getLeadDate())).append(" ").append(CommonFunction.checkNull(vo.getLeadTime())).toString();
    logger.info(new StringBuilder().append("name.......................").append(name).toString());
    logger.info("In SaveCibildata.....................................CreditProcessing Impl");
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String stat = "X";
    try
    {
      logger.info("In insert ");
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("insert into cr_cibil_dtl(DEAL_ID,CONSUMER_NAME,DEAL_DATE,CIBIL_SCORE,TOTAL_ACCOUNTS,TOTAL_OVERDUE_ACCOUNTS,HIGHER_SANCTION_AMOUNT,CURRENT_BALANCE,OVERDUE_BALANCE,NO_OF_ENQUIRIES,DECISION,COMMENT)");
      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormatWithTime).append("'),").toString());
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ? )");

      if (CommonFunction.checkNull(vo.getDealId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getDealId().trim()));
      }

      if (CommonFunction.checkNull(vo.getConsumername()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getConsumername().trim()));
      }
      if (CommonFunction.checkNull(dateTime).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(dateTime.trim()));
      }

      if (CommonFunction.checkNull(vo.getCibilCodes()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getCibilCodes().trim()));
      }
      if (CommonFunction.checkNull(vo.getTotalAc()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getTotalAc().trim()));
      }
      if (CommonFunction.checkNull(vo.getTotalOverdueac()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getTotalOverdueac().trim()));
      }

      if (CommonFunction.checkNull(vo.getHigherSanctionAmount().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getHigherSanctionAmount().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getCurrentBalance().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getCurrentBalance().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getOverDue().trim()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(vo.getOverDue().trim()).toString());
      }

      if (CommonFunction.checkNull(vo.getNoofEnquiry()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getNoofEnquiry().trim()));
      }

      if (CommonFunction.checkNull(vo.getDecison()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getDecison().trim()));
      if (CommonFunction.checkNull(vo.getComment()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getComment().trim()));
      }
      insertPrepStmtObject.setSql(bufInsSql.toString());
      qryList.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      if ((status) && (vo.getDecison().trim().equalsIgnoreCase("A")))
      {
        StringBuilder checkStageM = new StringBuilder();
        logger.info(new StringBuilder().append("Company Id: ").append(vo.getCompanyId()).append(" dealId: ").append(vo.getDealId()).toString());
        checkStageM.append(CommonFunction.stageMovement(vo.getCompanyId(), "DC", "F", vo.getDealId(), "CBL", vo.getMakerDate(), vo.getUserName()));
        logger.info(new StringBuilder().append("checkStageM : ").append(checkStageM).toString());
      }

      String maxIdQuery = "Select distinct max(CIBIL_ID) from cr_cibil_dtl for update";

      String id = ConnectionDAO.singleReturn(maxIdQuery);
      maxId = Integer.parseInt(id.toString());
      logger.info(new StringBuilder().append("maxId : ").append(maxId).toString());

      logger.info(new StringBuilder().append("In saveCibilData......................").append(status).toString());

      bufInsSql = null;
      qryList = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      name = null;
      dateTime = null;
      vo = null;
    }

    return maxId;
  }

  public boolean deleteCibilEntry(String[] s1, String dealId)
  {
    ArrayList qrylist = new ArrayList();
    boolean delStatus = false;
    try {
      for (int i = 0; i < s1.length; i++)
      {
        StringBuilder query = new StringBuilder();
        StringBuilder query2 = new StringBuilder();
        query.append(new StringBuilder().append("delete from cr_cibil_dtl where CIBIL_ID='").append(s1[i]).append("'").toString());
        logger.info(new StringBuilder().append("query ").append(query).toString());
        query2.append(new StringBuilder().append("delete from cr_uploaded_documents where txn_id='").append(s1[i]).append("' and txn_type='CBL'").toString());
        logger.info(new StringBuilder().append("query2 ").append(query2).toString());
        qrylist.add(query);
        qrylist.add(query2);
        query = null;
        query2 = null;
        uploadedCibilDocsDelete(dealId, s1[i]);
      }

      delStatus = ConnectionDAO.sqlInsUpdDelete(qrylist);

      logger.info(new StringBuilder().append("Deletion Status :").append(delStatus).toString());
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      qrylist.clear();
      qrylist = null;
      s1 = null;
      dealId = null;
    }

    return delStatus;
  }

  public String callRefreshChargesDetailPro(String dealCap, String dealId)
  {
    String message = "";
    boolean status = false;
    int dId = Integer.parseInt(dealId);
    StringBuilder custIdQ = new StringBuilder();
    custIdQ.append(new StringBuilder().append("select DEAL_CUSTOMER_ID from cr_deal_dtl where DEAL_ID=").append(dealId).toString());
    logger.info(new StringBuilder().append("callRefreshChargesDetailPro in deal custIdQ: ").append(custIdQ).toString());
    StringBuilder suplId = new StringBuilder();
    StringBuilder manfId = new StringBuilder();
    StringBuilder custId = new StringBuilder();
    StringBuilder exactManfId = new StringBuilder();
    StringBuilder exactSuplId = new StringBuilder();
    suplId.append("SU;");
    manfId.append("MF;");
    custId.append(ConnectionDAO.singleReturn(custIdQ.toString()));
    logger.info(new StringBuilder().append("callRefreshChargesDetailPro in deal customerId: ").append(custId).toString());
    StringBuilder supllierIdQ = new StringBuilder();
    supllierIdQ.append(new StringBuilder().append("select distinct ASSET_SUPPLIER from cr_deal_collateral_m d,cr_asset_collateral_m a  where d.ASSETID=a.ASSET_ID and a.ASSET_TYPE='ASSET'  and  DEAL_ID=").append(dealId).toString());

    logger.info(new StringBuilder().append("callRefreshChargesDetailPro in deal supllierIdQ : ").append(supllierIdQ.toString()).toString());
    ArrayList supllierIdList = null;

    StringBuilder manufactIdQ = new StringBuilder();
    ArrayList manufactIdList = null;
    ArrayList productList = null;
    logger.info(new StringBuilder().append("supllierIdQ: ").append(supllierIdQ).toString());
    try
    {
      supllierIdList = ConnectionDAO.sqlSelect(supllierIdQ.toString());
      if (supllierIdList.size() > 0)
      {
        for (int i = 0; i < supllierIdList.size(); i++)
        {
          ArrayList subsupllierIdList = (ArrayList)supllierIdList.get(i);
          if (subsupllierIdList.size() > 0)
            suplId.append(new StringBuilder().append(CommonFunction.checkNull(subsupllierIdList.get(0))).append("|SU;").toString());
        }
      }
      logger.info(new StringBuilder().append("callRefreshChargesDetailPro in deal ## suplId ## ").append(suplId).toString());
      logger.info(new StringBuilder().append("callRefreshChargesDetailPro in deal appendSQL true----  in check index Of").append(suplId.lastIndexOf("SU;")).append("------").append(suplId.length() - 3).toString());
      if (suplId.toString().lastIndexOf("SU;") == suplId.toString().length() - 3)
      {
        logger.info("callRefreshChargesDetailPro in deal appendSQL true----  in check index Of");
        exactSuplId.append(suplId.substring(0, suplId.length() - 3));
        logger.info(new StringBuilder().append("callRefreshChargesDetailPro in deal ...exactSuplId.").append(exactSuplId).toString());
      }
      manufactIdQ.append(new StringBuilder().append("select distinct ASSET_MANUFATURER from cr_deal_collateral_m d,cr_asset_collateral_m a  where d.ASSETID=a.ASSET_ID and a.ASSET_TYPE='ASSET'  and  DEAL_ID=").append(dealId).toString());

      logger.info(new StringBuilder().append("callRefreshChargesDetailPro in deal manufactIdQ : ").append(manufactIdQ.toString()).toString());
      manufactIdList = ConnectionDAO.sqlSelect(manufactIdQ.toString());
      if (manufactIdList.size() > 0)
      {
        for (int i = 0; i < manufactIdList.size(); i++)
        {
          ArrayList submanufactIdList = (ArrayList)manufactIdList.get(i);
          if (submanufactIdList.size() > 0)
            manfId.append(new StringBuilder().append(CommonFunction.checkNull(submanufactIdList.get(0))).append("|MF;").toString());
        }
      }
      logger.info(new StringBuilder().append("callRefreshChargesDetailPro in deal ## manfId ## ").append(manfId).toString());
      logger.info(new StringBuilder().append("callRefreshChargesDetailPro in deal appendSQL true----  in check index Of").append(manfId.lastIndexOf("MF;")).append("------").append(manfId.length() - 3).toString());
      if (manfId.lastIndexOf("MF;") == manfId.length() - 3)
      {
        logger.info("callRefreshChargesDetailPro in deal appendSQL true----  in check index Of");
        exactManfId.append(manfId.substring(0, manfId.length() - 3));
        logger.info(new StringBuilder().append("callRefreshChargesDetailPro in deal ...exactManfId.").append(exactManfId).toString());
      }

      StringBuilder productQuery = new StringBuilder();
      productQuery.append(new StringBuilder().append("select DEAL_PRODUCT,DEAL_SCHEME,DEAL_LOAN_AMOUNT,DEAL_MARGIN_AMOUNT,DEAL_LOAN_ID from cr_deal_loan_dtl where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
      logger.info(new StringBuilder().append("callRefreshChargesDetailPro in deal productQuery: ").append(productQuery).toString());
      productList = ConnectionDAO.sqlSelect(productQuery.toString());
      logger.info(new StringBuilder().append("callRefreshChargesDetailPro in deal productQuery: ").append(productList).toString());
      productQuery = null;

      for (int i = 0; i < productList.size(); i++)
      {
        ArrayList subproductList = (ArrayList)productList.get(i);
        if (subproductList.size() > 0)
        {
          StringBuffer chargeStr = new StringBuffer();
          if (!CommonFunction.checkNull(subproductList.get(2)).equalsIgnoreCase(""))
            chargeStr.append(new StringBuilder().append("2;").append(subproductList.get(2)).append("|").toString());
          if (!CommonFunction.checkNull(subproductList.get(3)).equalsIgnoreCase(""))
            chargeStr.append(new StringBuilder().append("3;").append(CommonFunction.checkNull(subproductList.get(3))).append("|").toString());
          String bpStr = new StringBuilder().append("CS;").append(custId).append("|").append(exactSuplId).append(exactManfId).toString();
          String dealLoanId = CommonFunction.checkNull(subproductList.get(4));
          int loanDId = 0;
          if (!dealLoanId.equalsIgnoreCase(""))
            loanDId = Integer.parseInt(dealLoanId);
          ArrayList in = new ArrayList();
          ArrayList out = new ArrayList();
          ArrayList outMessages = new ArrayList();
          StringBuilder s1 = new StringBuilder();
          StringBuilder s2 = new StringBuilder();
          try
          {
            in.add(dealCap);
            in.add(Integer.valueOf(loanDId));
            in.add(CommonFunction.checkNull(subproductList.get(0)).toString());
            in.add(CommonFunction.checkNull(subproductList.get(1)).toString());
            in.add(chargeStr.toString());
            in.add(bpStr);
            out.add(s1);
            out.add(s2);
            logger.info(new StringBuilder().append(" STAGE INFO: ").append(dealCap).append("DealLoanId from crdealLoandtl: ").append(loanDId).append(" Total Charges: ").append(chargeStr).append(" customer Id:  ").append(bpStr).append(" Product: ").append(subproductList.get(0)).append(" Scheme: ").append(subproductList.get(1)).toString());
            logger.info("callRefreshChargesDetailPro in GET_CHARGES deal in deal capturing");
            outMessages = (ArrayList)ConnectionDAO.callSP("GET_CHARGES", in, out);
            if ((outMessages != null) && (outMessages.size() > 0))
            {
              s1.append(CommonFunction.checkNull(outMessages.get(0)));
              if ((s1 != null) && (s1.toString().equalsIgnoreCase("S")))
              {
                message = s1.toString();
                logger.info(new StringBuilder().append("GET_CHARGES Procedure s1----").append(s1).toString());
              }
              else if ((s1 != null) && (s1.toString().equalsIgnoreCase("E")))
              {
                s2.append(CommonFunction.checkNull(outMessages.get(1)));
                logger.info(new StringBuilder().append("GET_CHARGES Procedure Error Message----").append(s2).toString());
                message = s2.toString();
              }
            }
          }
          catch (Exception e) {
            e.printStackTrace();
          }
          finally {
            s1 = null;
          }

        }

      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally {
      custIdQ = null;
      suplId = null;
      manfId = null;
      custId = null;
      supllierIdQ = null;
      supllierIdList = null;
      manufactIdQ = null;
      manufactIdList = null;
      productList = null;
    }
    return message;
  }

  public ArrayList refreshchargesDetail(String dealCap, String dealId)
  {
    ArrayList list = new ArrayList();
    ChargeVo vo = null;
    StringBuilder query = new StringBuilder();
    ArrayList charges = null;
    ArrayList subcharges = null;
    try
    {
      query.append("select DEAL_CHARGE_DTL_ID,DEAL_CHARGE_TYPE,DEAL_CHARGE_CODE,CHARGE_DESC,");
      query.append(" GM.DESCRIPTION,v.DEALER_DESC,DEAL_CHARGE_CALCULATED_AMOUNT,");
      query.append(" DEAL_CHARGE_FINAL_AMOUNT,d.CUSTOMER_NAME,p.DEAL_LOAN_AMOUNT,(IFNULL(P.DEAL_ASSET_COST,0)-IFNULL(P.DEAL_LOAN_AMOUNT,0)) AS 'MARGIN AMOUNT',");
      query.append(" DEAL_CHARGE_CALCULATED_ON,if(DEAL_CHARGE_METHOD='P','PERCENTAGE','FLAT'),if(DEAL_CHARGE_TAX_INCLUSIVE='N','NO','YES'),");
      query.append(" DEAL_CHARGE_TAX_RATE1,DEAL_CHARGE_TAX_RATE2,DEAL_CHARGE_BP_TYPE,if(DEAL_MIN_CHARGE_METHOD='P','PERCENTAGE','FLAT'),DEAL_CHARGE_MIN_CHARGE_AMOUNT, ");
      query.append(" DEAL_CHARGE_TAX_APPLICABLE,DEAL_CHARGE_TDS_APPLICABLE,DEAL_CHARGE_TAX_AMOUNT1,DEAL_CHARGE_TAX_AMOUNT2,DEAL_CHARGE_MIN_CHARGE_AMOUNT,DEAL_CHARGE_TDS_RATE,DEAL_CHARGE_TDS_AMOUNT,DEAL_CHARGE_NET_AMOUNT,DEAL_CHARGE_APPLICATION_STAGE, ");
      query.append(new StringBuilder().append(" (SELECT sum(DEAL_CHARGE_CALCULATED_AMOUNT) from  CR_DEAL_TXNCHARGES_DTL where DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' and DEAL_CHARGE_BP_TYPE='CS' and DEAL_CHARGE_TYPE='R') as CUST_CHARGE_AMOUNT, ").toString());
      query.append(new StringBuilder().append(" (SELECT sum(DEAL_CHARGE_FINAL_AMOUNT) from  CR_DEAL_TXNCHARGES_DTL where DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' and DEAL_CHARGE_BP_TYPE='CS' and DEAL_CHARGE_TYPE='R') as CUST_FINAL_CHARGE_AMOUNT ").toString());
      query.append(" from cr_deal_txncharges_dtl t ");
      query.append(" left join com_charge_code_m c on t.DEAL_CHARGE_CODE=c.CHARGE_CODE ");
      query.append(" left join cr_dsa_dealer_m v on v.DEALER_ID=t.DEAL_CHARGE_BP_ID and v.BP_TYPE=t.DEAL_CHARGE_BP_TYPE and v.REC_STATUS='A' ");
      query.append(" left join cr_deal_customer_m d on d.CUSTOMER_ID=t.DEAL_CHARGE_BP_ID ");
      query.append(" left join cr_deal_loan_dtl p on p.DEAL_ID=t.DEAL_ID  ");
      query.append(" left join generic_master GM on GM.VALUE=DEAL_CHARGE_BP_TYPE and GM.GENERIC_KEY='BPTYPE' ");
      query.append(new StringBuilder().append(" where t.DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' ").toString());
      logger.info(new StringBuilder().append("refreshchargesDetail for getting charges in deal query ").append(query).toString());
      charges = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("refreshchargesDetail for getting charges in deal  size ").append(charges.size()).toString());
      for (int i = 0; i < charges.size(); i++)
      {
        subcharges = (ArrayList)charges.get(i);
        if (subcharges.size() > 0)
        {
          vo = new ChargeVo();
          vo.setChargeId(CommonFunction.checkNull(subcharges.get(0)).trim());
          if (CommonFunction.checkNull(subcharges.get(1)).trim().equals("R"))
            vo.setChargeType("Receivable");
          else if (CommonFunction.checkNull(subcharges.get(1)).trim().equals("P"))
            vo.setChargeType("Payable");
          vo.setChargeCode(CommonFunction.checkNull(subcharges.get(2)).trim());
          vo.setChargeDesc(CommonFunction.checkNull(subcharges.get(3)).trim());
          vo.setChargeBPType(CommonFunction.checkNull(subcharges.get(4)).trim());
          if (CommonFunction.checkNull(subcharges.get(16)).trim().equals("CS"))
            vo.setChargeBPId(CommonFunction.checkNull(subcharges.get(8)).trim());
          else
            vo.setChargeBPId(CommonFunction.checkNull(subcharges.get(5)).trim());
          if (!CommonFunction.checkNull(subcharges.get(6)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(6)).trim());
            vo.setChargeCal(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(7)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(7)).trim());
            vo.setChargeFinal(this.myFormatter.format(reconNum));
          }
          vo.setLoanAmount(CommonFunction.checkNull(subcharges.get(9)).trim());
          vo.setMarginAmount(CommonFunction.checkNull(subcharges.get(10)).trim());
          vo.setChargeCalculatedOn(CommonFunction.checkNull(subcharges.get(11)).trim());
          vo.setChargeMethod(CommonFunction.checkNull(subcharges.get(12)).trim());
          vo.setTaxsInclusive(CommonFunction.checkNull(subcharges.get(13)).trim());
          if (!CommonFunction.checkNull(subcharges.get(14)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(14)).trim());
            vo.setTaxtRat1(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(15)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(15)).trim());
            logger.info(new StringBuilder().append("setTaxtRat2: ").append(reconNum).toString());
            vo.setTaxtRat2(this.myFormatter.format(reconNum));
          }
          vo.setMinChargeMethod(CommonFunction.checkNull(subcharges.get(17)).trim());
          vo.setMinChargeCalculatedOn(CommonFunction.checkNull(subcharges.get(18)).trim());
          vo.setDealChargeTaxApp(CommonFunction.checkNull(subcharges.get(19)).trim());
          vo.setDealChargeTdsApp(CommonFunction.checkNull(subcharges.get(20)).trim());
          if (!CommonFunction.checkNull(subcharges.get(21)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(21)).trim());
            vo.setDealChargeTaxAmount1(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(22)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(22)).trim());

            vo.setDealChargeTaxAmount2(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(23)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(23)).trim());
            vo.setDealChargeMinChargeAmount(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(24)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(24)).trim());

            vo.setDealChargeTdsRate(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(25)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(25)).trim());
            vo.setDealChargeTdsAmount(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(26)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(26)).trim());

            vo.setDealChargeNetAmount(this.myFormatter.format(reconNum));
          }
          vo.setApplStage(CommonFunction.checkNull(subcharges.get(27)));
          if (!CommonFunction.checkNull(subcharges.get(28)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(28)).trim());
            vo.setCustomerCharge(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(subcharges.get(29)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(29)).trim());
            vo.setCustomerFinalCharge(this.myFormatter.format(reconNum));
          }

          list.add(vo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      vo = null;
      query = null;
      charges = null;
      subcharges = null;
    }
    return list;
  }

  public ArrayList<CreditProcessingNotepadVo> showPDData(CreditProcessingNotepadVo pdVo)
  {
    ArrayList PDList = new ArrayList();
    try
    {
      ArrayList mainList = new ArrayList();
      ArrayList subList = new ArrayList();
      CallableStatement cst = null;
      logger.info(" In showPDData....");

      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append(" select  if(NOTEPAD_CODE='PD','Personal Discussion','') as NOTEPAD_CODE,DATE_FORMAT(NOTEPAD_DATE,'").append(this.dateFormatWithTime).append("'),PERSON_MET,MEETING_LOCATION, ").append(" NOTEPAD_COMMENTS,if(followup_reqd='N','NO','YES') as followup_reqd,DATE_FORMAT(FOLLOWUP_DATE,'").append(this.dateFormatWithTime).append("'),FOLLOWUP_PERSON,").append(" FOLLOWUP_LOCATION,FOLLOWUP_REMARKS, s.USER_NAME,DATE_FORMAT(a.maker_date,'").append(this.dateFormatWithTime).append("') from cr_notepad_dtl a ,sec_user_m s where NOTEPAD_CODE='PD' and a.MAKER_ID=s.USER_ID and txn_id='").append(StringEscapeUtils.escapeSql(pdVo.getDealId())).append("'").toString());

      logger.info(new StringBuilder().append("In showPDData").append(query).toString());

      mainList = ConnectionDAO.sqlSelect(query.toString());
      query = null;

      for (int i = 0; i < mainList.size(); i++)
      {
        subList = (ArrayList)mainList.get(i);
        if (subList.size() > 0) {
          CreditProcessingNotepadVo pdvo = new CreditProcessingNotepadVo();
          pdvo.setPdCode(CommonFunction.checkNull(subList.get(0)).trim());
          pdvo.setPdDate(CommonFunction.checkNull(subList.get(1)).trim());
          pdvo.setPersonMet(CommonFunction.checkNull(subList.get(2)).trim());
          pdvo.setPdMeetingLocation(CommonFunction.checkNull(subList.get(3)).trim());
          pdvo.setPdRemark(CommonFunction.checkNull(subList.get(4)).trim());
          pdvo.setFollowUp(CommonFunction.checkNull(subList.get(5)).trim());
          pdvo.setFollowupDate(CommonFunction.checkNull(subList.get(6)).trim());
          pdvo.setFollowUpPerson(CommonFunction.checkNull(subList.get(7)).trim());
          pdvo.setFollowUpLocation(CommonFunction.checkNull(subList.get(8)).trim());
          pdvo.setFollowupRemarks(CommonFunction.checkNull(subList.get(9)).trim());
          pdvo.setUserName(CommonFunction.checkNull(subList.get(10)).trim());
          pdvo.setCreationDate(CommonFunction.checkNull(subList.get(11)).trim());

          PDList.add(pdvo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      pdVo = null;
    }

    return PDList;
  }

  public boolean savePersonalDiscussion(CreditProcessingNotepadVo pdVo)
  {
    ArrayList getDataList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    boolean status = false;
    StringBuilder pddateTime = new StringBuilder();
    StringBuilder followupdateTime = new StringBuilder();
    String ptime = "";
    String ftime = "";
    if (CommonFunction.checkNull(pdVo.getFollowUp()).equalsIgnoreCase("Y")) {
      if (CommonFunction.checkNull(pdVo.getPdTime()).equalsIgnoreCase(""))
        ptime = "";
      else {
        ptime = CommonFunction.checkNull(pdVo.getPdTime()).substring(0, 5);
      }

      if (CommonFunction.checkNull(pdVo.getFollowupTime()).equalsIgnoreCase(""))
        ftime = "";
      else {
        ftime = CommonFunction.checkNull(pdVo.getFollowupTime()).substring(0, 5);
      }
      pddateTime.append(new StringBuilder().append(CommonFunction.checkNull(pdVo.getPdDate())).append(" ").append(ptime).toString());
      followupdateTime.append(new StringBuilder().append(CommonFunction.checkNull(pdVo.getFollowupDate())).append(" ").append(ftime).toString());
    } else if (CommonFunction.checkNull(pdVo.getFollowUp()).equalsIgnoreCase("N")) {
      if (CommonFunction.checkNull(pdVo.getPdTime()).equalsIgnoreCase(""))
        ptime = "";
      else {
        ptime = CommonFunction.checkNull(pdVo.getPdTime()).substring(0, 5);
      }
      pddateTime.append(new StringBuilder().append(CommonFunction.checkNull(pdVo.getPdDate())).append(" ").append(ptime).toString());
    }

    logger.info("In savePersonalDiscussion.....................................Dao Impl....111");
    logger.info(new StringBuilder().append("VALUE OF FollowUpDateTime.....................................").append(followupdateTime).toString());

    ArrayList qryList = new ArrayList();
    try
    {
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("insert into cr_notepad_dtl (txn_id,NOTEPAD_CODE,NOTEPAD_DATE, PERSON_MET,MEETING_LOCATION,NOTEPAD_COMMENTS,FOLLOWUP_REQD, FOLLOWUP_DATE,FOLLOWUP_PERSON,FOLLOWUP_LOCATION,FOLLOWUP_REMARKS,MAKER_ID,MAKER_DATE )");

      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormatWithTime).append("'),").toString());
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormatWithTime).append("'),").toString());
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND))").toString());

      if (CommonFunction.checkNull(pdVo.getDealId()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(pdVo.getDealId().trim());
      }
      if (CommonFunction.checkNull(pdVo.getHidpdCode()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(pdVo.getHidpdCode().trim());
      if (CommonFunction.checkNull(pddateTime.toString()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(pddateTime.toString().trim());
      }

      if (CommonFunction.checkNull(pdVo.getPersonMet()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(pdVo.getPersonMet().trim());
      }
      if (CommonFunction.checkNull(pdVo.getPdMeetingLocation()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(pdVo.getPdMeetingLocation().trim());
      if (CommonFunction.checkNull(pdVo.getPdRemark()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(pdVo.getPdRemark().trim());
      }
      if (CommonFunction.checkNull(pdVo.getFollowUp()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(pdVo.getFollowUp().trim());
      }
      if (CommonFunction.checkNull(followupdateTime.toString()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(followupdateTime.toString().trim());
      }
      if (CommonFunction.checkNull(pdVo.getFollowUpPerson()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(pdVo.getFollowUpPerson().trim());
      }
      if (CommonFunction.checkNull(pdVo.getFollowUpLocation()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(pdVo.getFollowUpLocation().trim());
      if (CommonFunction.checkNull(pdVo.getFollowupRemarks()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(pdVo.getFollowupRemarks().trim());
      if (CommonFunction.checkNull(pdVo.getUserId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(pdVo.getUserId().trim());
      if (CommonFunction.checkNull(pdVo.getMakerDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(pdVo.getMakerDate().trim());
      }
      insertPrepStmtObject.setSql(bufInsSql.toString());

      qryList.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("IN savePersonalDiscussion insert  ### ").append(insertPrepStmtObject.printQuery()).toString());

      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In savePersonalDiscussion .....................").append(status).toString());

      bufInsSql = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      pddateTime = null;
      followupdateTime = null;
      pdVo = null;
    }

    return status;
  }

  public ArrayList<DisbursalSearchVO> searchCPGrid(DisbursalSearchVO vo)
  {
    StringBuilder dealNo = new StringBuilder();
    StringBuilder customerName = new StringBuilder();

    ArrayList detailListGrid = new ArrayList();
    try {
      ArrayList searchlist = new ArrayList();
      logger.info("In searchCPGrid....................");
      boolean appendSQL = false;
      StringBuffer bufInsSql = new StringBuffer();

      dealNo.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()));
      logger.info(new StringBuilder().append("In searchCPGrid......dealNo-  ").append(dealNo).toString());
      customerName.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomerName()).trim()));

      bufInsSql.append(" select A.DEAL_ID,A.DEAL_NO,C.CUSTOMER_NAME,B.DEAL_PRODUCT,P.product_desc,B.DEAL_SCHEME, S.scheme_desc,A.REC_STATUS,br.BRANCH_DESC,su.USER_NAME as maker,author.user_name AS AUTHOR,author.APPROVAL_DATE,case A.REC_STATUS when 'A' then 'APPROVED '  when 'X' then if((select count(1) from cr_deal_movement_dtl where REC_STATUS='A' and deal_id=A.DEAL_ID)>0,'REJECTED ','CANCELLED ')when 'P' then 'PENDING 'when 'F' then 'FORWARDED 'end as deal_status");
      bufInsSql.append("  from cr_deal_dtl A  left outer join cr_deal_loan_dtl B on(A.DEAL_ID = B.DEAL_ID) left outer join cr_deal_customer_m C ");
      bufInsSql.append(" on(A.DEAL_CUSTOMER_ID =C.CUSTOMER_ID) left outer join cr_product_m P on(P.product_id = B.DEAL_PRODUCT) left outer join cr_scheme_m S");
      bufInsSql.append(" on(S.scheme_id = B.DEAL_SCHEME) left outer join com_branch_m br on(br.BRANCH_ID=a.DEAL_BRANCH)left outer join sec_user_m su on (su.USER_ID=a.MAKER_ID) ");
      bufInsSql.append(" left outer join ( ");
      bufInsSql.append(" SELECT A.deal_id,u.user_name,APPROVAL_DATE FROM cr_deal_approval_dtl A JOIN ( ");
      bufInsSql.append(new StringBuilder().append(" SELECT MAX(DEAL_APPROVAL_ID)DEAL_APPROVAL_ID,DEAL_ID FROM cr_deal_approval_dtl WHERE DEAL_ID='").append(dealNo).append("' GROUP BY DEAL_ID ) B ON(A.DEAL_ID=B.DEAL_ID AND A.DEAL_APPROVAL_ID=B.DEAL_APPROVAL_ID) JOIN sec_user_m u on (u.USER_ID=A.APPROVAL_BY) ) author on(author.DEAL_ID=a.DEAL_ID) ").toString());
      bufInsSql.append(new StringBuilder().append(" WHERE A.DEAL_ID=").append(dealNo).append(" ").toString());

      logger.info(new StringBuilder().append("query ::::::::::::::::::::::::::::::: ").append(bufInsSql).toString());
      searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN searchCPGrid() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("searchCPGrid ").append(searchlist.size()).toString());

      logger.info(new StringBuilder().append("searchCPGrid SIZE---").append(searchlist.size()).toString());
      logger.info(new StringBuilder().append("searchCPGrid    ........").append(bufInsSql.toString()).toString());

      bufInsSql = null;
      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("searchCPGrid search List ").append(searchlist.get(i).toString()).toString());
        ArrayList data = (ArrayList)searchlist.get(i);

        if (data.size() > 0) {
          DisbursalSearchVO disVO = new DisbursalSearchVO();

          disVO.setLbxDealNo(CommonFunction.checkNull(data.get(0)).trim());
          disVO.setDealNo(CommonFunction.checkNull(data.get(1)).trim());
          logger.info(new StringBuilder().append("setCustomerName:-------------").append(data.get(2)).toString());
          disVO.setCustomerName(CommonFunction.checkNull(data.get(2)).trim());
          disVO.setLbxProductID(CommonFunction.checkNull(data.get(3)).trim());
          disVO.setProduct(CommonFunction.checkNull(data.get(4)).trim());
          logger.info(new StringBuilder().append("setProduct:-------------").append(data.get(4)).toString());
          disVO.setLbxscheme(CommonFunction.checkNull(data.get(5)).trim());
          disVO.setScheme(CommonFunction.checkNull(data.get(6)).trim());
          disVO.setRecStatus(CommonFunction.checkNull(data.get(7)).trim());
          disVO.setDealBranch(CommonFunction.checkNull(data.get(8)).trim());
          disVO.setMaker(CommonFunction.checkNull(data.get(9)).trim());
          disVO.setAuthor(CommonFunction.checkNull(data.get(10)).trim());
          disVO.setCurrentStatus(CommonFunction.checkNull(data.get(12)).trim());
          detailListGrid.add(disVO);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      dealNo = null;
      customerName = null;
      vo = null;
    }
    return detailListGrid;
  }

  public ArrayList<Object> fetchDealDetail(CommonDealVo vo,String functionId) {
	  ArrayList list=new ArrayList();
	try
	{
		logger.info("In fetchDealDetail deal Status: "+vo.getStage());
		
		String userNameQ="select USER_NAME from sec_user_m where REC_STATUS='A' and USER_ID='"+vo.getReportingToUserId()+"'";
		logger.info(" In fetchDealDetail userNameQ: "+userNameQ);
		String userName=ConnectionDAO.singleReturn(userNameQ);
	
		
		userNameQ=null;
		ArrayList header=null;
		int count=0;
		int startRecordIndex=0;
		int endRecordIndex = no;
		CommonDealVo fetchVo= (CommonDealVo) vo;
		boolean appendSQL=false;
		StringBuffer bufInsSql=new StringBuffer();
		StringBuffer bufInsSqlTempCount = new StringBuffer();
		StringBuilder dealId=new StringBuilder();
		StringBuilder appNo=new StringBuilder();
		StringBuilder appDate=new StringBuilder();
		StringBuilder custName=new StringBuilder();
		StringBuilder productId=new StringBuilder();
		StringBuilder leadNo=new StringBuilder();
		
		 dealId.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim()));
		 appNo.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim()));
		 appDate.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim()));
		 custName.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim()));
		 productId.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim()));
		 leadNo.append((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLeadno())).trim()));
		
		 String quey1="SELECT IFNULL(PARAMETER_VALUE,'N') FROM PARAMETER_MST WHERE PARAMETER_KEY='PRE_DEAL_MODULE' ";
		 String quey2="SELECT IFNULL(PARAMETER_VALUE,'N') FROM PARAMETER_MST WHERE PARAMETER_KEY='PRE_DEAL_VERI_MANDATORY' ";
		 String quey3="SELECT DEAL_PRODUCT FROM cr_deal_loan_dtl WHERE DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ";
		 String quey4="SELECT DEAL_SCHEME FROM cr_deal_loan_dtl WHERE DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ";
		 String Result1=ConnectionDAO.singleReturn(quey1);
		 String Result2=ConnectionDAO.singleReturn(quey2);
		 String Result3=ConnectionDAO.singleReturn(quey3);
		 String Result4=ConnectionDAO.singleReturn(quey4);
		 String dealloanId =  CommonFunction.minDealLoanId(vo.getLbxDealNo());
		
	if(vo.getStage()!=null && !vo.getStage().equalsIgnoreCase("F"))
	{
		logger.info("In fetchDealDetail  Serach for Deal Capturing...");	
		bufInsSql.append(" select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,DATE_FORMAT(DEAL_DATE,'"+dateFormat+"'),deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,(SELECT USER_NAME FROM SEC_USER_M WHERE USER_ID=d.MAKER_ID) MAKER_ID from cr_deal_dtl d");
		bufInsSql.append(" left join cr_lead_dtl n1 on d.lead_id=n1.lead_id ");
		bufInsSql.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID ");
	if(!CommonFunction.checkNull(dealloanId).equalsIgnoreCase("")){
		bufInsSql.append(" AND n.DEAL_LOAN_ID = "+dealloanId+" ");
	}else{
		bufInsSql.append("  and n.DEAL_LOAN_ID = (select min(DEAL_LOAN_ID) from cr_DEAL_LOAN_DTL WHERE DEAL_ID=D.DEAL_ID) ");
	}
	if(CommonFunction.checkNull(Result3).equalsIgnoreCase("")){
		bufInsSql.append(" left join cr_product_m p on n1.PRODUCT=p.PRODUCT_ID  ");
	}else{
		bufInsSql.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
	}
		bufInsSql.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID");
	if(CommonFunction.checkNull(Result4).equalsIgnoreCase("")){
		bufInsSql.append(" left join cr_scheme_m s on n1.SCHEME=s.SCHEME_ID ");
	}else{
		bufInsSql.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
	}
	bufInsSql.append("left join cr_deal_movement_dtl cdmds on d.deal_id=cdmds.deal_id");
		if(!functionId.equals("8000312") && Result1.equalsIgnoreCase("Y"))
			{ 
		
		bufInsSql.append("INNER join cr_deal_movement_dtl dm on dm.DEAL_ID=d.DEAL_ID AND DM.DEAL_RECEIVED<>'0000-00-00 00:00:00' ");
		bufInsSql.append("AND DM.DEAL_FORWARDED='0000-00-00 00:00:00' AND DM.DEAL_STAGE_ID='DC'  AND DM.REC_STATUS='A' ");
		if(Result2.equalsIgnoreCase("Y")){
		bufInsSql.append("inner join cr_deal_movement_dtl dm1 on dm1.DEAL_ID=d.DEAL_ID AND DM1.DEAL_FORWARDED<>'0000-00-00 00:00:00' AND DM1.DEAL_STAGE_ID='PVI'  AND DM1.REC_STATUS='A'  ");
			}
			}
//		bufInsSqlTempCount.append(" select distinct count(1) FROM (select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,DATE_FORMAT(DEAL_DATE,'"+dateFormat+"'),deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC from cr_deal_dtl d ");
			bufInsSqlTempCount.append(" select COUNT(distinct d.deal_id) from cr_deal_dtl d ");
		bufInsSqlTempCount.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
		if(!CommonFunction.checkNull(dealloanId).equalsIgnoreCase("")){
			bufInsSqlTempCount.append(" AND n.DEAL_LOAN_ID = "+dealloanId+" ");
		}else{
			bufInsSqlTempCount.append("  and n.DEAL_LOAN_ID = (select min(DEAL_LOAN_ID) from cr_DEAL_LOAN_DTL WHERE DEAL_ID=D.DEAL_ID) ");
		}
		bufInsSqlTempCount.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
		bufInsSqlTempCount.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
		bufInsSqlTempCount.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
		bufInsSqlTempCount.append("left join cr_deal_movement_dtl cdmds on d.deal_id=cdmds.deal_id");
		if(!functionId.equals("8000312")  && Result1.equalsIgnoreCase("Y"))
		{
			bufInsSqlTempCount.append("INNER join cr_deal_movement_dtl dm on dm.DEAL_ID=d.DEAL_ID AND DM.DEAL_RECEIVED<>'0000-00-00 00:00:00' ");
			bufInsSqlTempCount.append("AND DM.DEAL_FORWARDED='0000-00-00 00:00:00' AND DM.DEAL_STAGE_ID='DC'  AND DM.REC_STATUS='A' ");
			if(Result2.equalsIgnoreCase("Y")){
				bufInsSqlTempCount.append("inner join cr_deal_movement_dtl dm1 on dm1.DEAL_ID=d.DEAL_ID AND DM1.DEAL_FORWARDED<>'0000-00-00 00:00:00' AND DM1.DEAL_STAGE_ID='PVI'  AND DM1.REC_STATUS='A'  ");
			}
		}
		if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim().equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase(""))))
		{
			  bufInsSql.append("WHERE d.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' AND date(d.DEAL_DATE) =STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"'");
		   	  bufInsSqlTempCount.append("WHERE d.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' AND date(d.DEAL_DATE) =STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"'");
			}
		
		if(((vo.getLbxDealNo().equalsIgnoreCase("")))||((vo.getApplicationno().equalsIgnoreCase("")))||((vo.getApplicationdate().equalsIgnoreCase("")))||((vo.getCustomername().equalsIgnoreCase("")))||((vo.getLbxProductID().equalsIgnoreCase("")))||((vo.getLbxscheme().equalsIgnoreCase("")))||((vo.getStage().equalsIgnoreCase("")))){
			appendSQL=true;
		}
		
		if(appendSQL){
			logger.info("In Where Clause");
			
			bufInsSql.append(" WHERE d.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"' ");
			bufInsSqlTempCount.append(" WHERE d.DEAL_BRANCH='"+StringEscapeUtils.escapeSql(vo.getBranchId()).trim()+"' and d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"' ");
			
			if(functionId.equals("8000312"))
			{
				bufInsSql.append(" and d.deal_type='PDC'  AND d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"' ");
				bufInsSqlTempCount.append(" and d.deal_type='PDC' AND d.Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"' ");
				
				bufInsSql.append(" AND (D.MAKER_ID='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' OR IFNULL(D.MAKER_ID,'')='')");
				bufInsSqlTempCount.append(" AND (D.MAKER_ID='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' OR IFNULL(D.MAKER_ID,'')='')");
			}
		}
		 if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")))) {
	        bufInsSql.append("AND d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
	        bufInsSqlTempCount.append("AND d.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
	   	 	appendSQL=true;
	   	  
	     }
		 
		if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")))) {
	   	  bufInsSql.append("AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
	   	  bufInsSqlTempCount.append("AND d.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
	   	  appendSQL=true;
	     }
		
		if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim().equalsIgnoreCase("")))) {
	   	  bufInsSql.append("AND date(d.DEAL_DATE) =STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') ");
	   	  bufInsSqlTempCount.append("AND date(d.DEAL_DATE) =STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') ");
	   	  appendSQL=true;
	     }
		
		if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")))) {
	   	  bufInsSql.append("AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
	   	  bufInsSqlTempCount.append("AND deal.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
	   	  appendSQL=true;
	     }
		if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")))) {
		   	  bufInsSql.append("AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
		   	  bufInsSqlTempCount.append("AND n.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
		   	  appendSQL=true;
		     }
		if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")))) {
		   	  bufInsSql.append("AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
		   	  bufInsSqlTempCount.append("AND n.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
		   	  appendSQL=true;
		     }
		//shyamakant code fore lead lov search
		if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLeadno())).trim().equalsIgnoreCase("")))) {
		   	  bufInsSql.append("AND d.lead_id='"+StringEscapeUtils.escapeSql(vo.getLeadno()).trim()+"' ");
		   	  bufInsSqlTempCount.append("AND d.lead_id='"+StringEscapeUtils.escapeSql(vo.getLeadno()).trim()+"' ");
		   	  appendSQL=true;
		     }
		
		
		 String queryCnt=ConnectionDAO.singleReturn(bufInsSqlTempCount.toString());
		 if(!CommonFunction.checkNull(queryCnt).equalsIgnoreCase(""))
		 {
			 count =Integer.parseInt(queryCnt);
		 }
		 logger.info("In fetchDealDetail  bufInsSqlTempCount : "+bufInsSqlTempCount.toString());
		//if((dealId.toString().trim()==null && appNo.toString().trim()==null && appDate.toString().trim()==null && custName.toString().trim()==null && productId.toString().trim()==null) || (dealId.toString().trim().equalsIgnoreCase("") && appNo.toString().trim().equalsIgnoreCase("") && appDate.toString().trim().equalsIgnoreCase("") && custName.toString().trim().equalsIgnoreCase("") && productId.toString().trim().equalsIgnoreCase("")) || fetchVo.getCurrentPageLink()>1)
		//{
		
	
		if(fetchVo.getCurrentPageLink()>1)
		{
			startRecordIndex = (fetchVo.getCurrentPageLink()-1)*no;
			endRecordIndex = no;
//			 logger.info("In fetchDealDetail startRecordIndex .................... "+startRecordIndex);
//			 logger.info("In fetchDealDetail  endRecordIndex .................... "+endRecordIndex);
		}
		
		bufInsSql.append(" limit "+startRecordIndex+","+endRecordIndex);

	//	}
		 logger.info("In fetchDealDetail  query : "+bufInsSql.toString());
	     header = ConnectionDAO.sqlSelect(bufInsSql.toString());
	 
		int size=header.size();	
		for(int i=0;i<size;i++){
		
			ArrayList header1=(ArrayList)header.get(i);
			if(header1!=null && header1.size()>0)
			{
				
				fetchVo = new CommonDealVo();
	
				if(vo.getStage().equalsIgnoreCase("F"))
				{
					fetchVo.setLbxDealNo("<a href=commonPageBehind.do?dealId="+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+">"+(CommonFunction.checkNull(header1.get(1)))+"</a>");
				}
				else
				{
					fetchVo.setLbxDealNo("<a href=dealCapturing.do?method=leadEntryCapturing&dealId="+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+">"+(CommonFunction.checkNull(header1.get(1)))+"</a>");
				}
				
				fetchVo.setDealNo((CommonFunction.checkNull(header1.get(1))).trim());
				fetchVo.setApplicationno((CommonFunction.checkNull(header1.get(2))).trim());
				fetchVo.setApplicationdate((CommonFunction.checkNull(header1.get(3))).trim());
				fetchVo.setCustomername((CommonFunction.checkNull(header1.get(4))).trim());
		
				fetchVo.setProduct((CommonFunction.checkNull(header1.get(5))).trim());
				fetchVo.setScheme((CommonFunction.checkNull(header1.get(6))).trim());
				fetchVo.setReportingToUserId(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(header1.get(7))).trim());
				//fetchVo.setUserId(vo.getUserId());
				fetchVo.setTotalRecordSize(count);
				list.add(fetchVo);
				fetchVo=null;
			}
			header1.clear();
			header1=null;
		}
		header.clear();
		header=null;
	}
	else if(vo.getStage()!=null && vo.getStage().equalsIgnoreCase("F"))
	{
		
		   logger.info("In fetchDealDetail Search at Under Writer....");
		   
		   String branch="";
		   if(vo.getAllBranches().equalsIgnoreCase("on") || !(CommonFunction.checkNull(vo.getLbxDealNo()).trim().equalsIgnoreCase("")))
		   {
			   String branchMappedToUserQuery="SELECT GROUP_CONCAT(BRANCH_ID) FROM sec_user_branch_dtl WHERE USER_ID='"+CommonFunction.checkNull(vo.getReportingToUserId()).trim()+"' AND REC_STATUS='A'";
			   branch=ConnectionDAO.singleReturn(branchMappedToUserQuery);
			   logger.info("In fetchDealDetail branchMappedToUserQuery: "+branchMappedToUserQuery+"      branches maped to user:   "+branch);
		   }
		   else
		   {
			   branch=vo.getBranchId();
		   }
		   
		   if(CommonFunction.checkNull(branch).equalsIgnoreCase(""))
		   {
			   branch=vo.getBranchId(); 
		   }
		   if(vo.getFunctionId().equalsIgnoreCase("3000296")){
		   String status= callProcUnderWriterSerachData(vo);
		   logger.info("status of callProcUnderWriterSerachData: "+status);
		   if(CommonFunction.checkNull(status).equalsIgnoreCase("S"))
		    {
				    bufInsSql.append(" SELECT distinct a.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,DATE_FORMAT(DEAL_DATE,'"+dateFormat+"'),CUSTOMER_NAME,PRODUCT_DESC,SCHEME_DESC,(SELECT USER_NAME FROM SEC_USER_M WHERE A.MAKER_ID=USER_ID)USER_NAME,BRANCH_DESC,case d.DEAL_FORWARDED when '0000-00-00 00:00:00' then 'Pending'   ELSE IF((SELECT COUNT(1) FROM CR_LEAD_DTL L JOIN CR_DEAL_DTL D ON D.LEAD_ID=L.LEAD_ID WHERE D.DEAL_ID=A.DEAL_ID AND L.REC_STATUS='X' )>0,'Rejected from SINGLE PAGE BUREAU','FORWARDED') end as REC_STATUS  ");
		 			bufInsSql.append(" FROM under_writer_search_temp_data a left join cr_deal_movement_dtl d on d.deal_id= a.deal_id  and d.DEAL_STAGE_ID='DC' and d.rec_status='A' ");
	 			//bufInsSqlTempCount.append(" select distinct count(1) FROM (select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,DATE_FORMAT(DEAL_DATE,'"+dateFormat+"'),deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,ua.AMOUNT_TO ,ua.AMOUNT_FROM,n.DEAL_LOAN_AMOUNT from cr_deal_dtl d ");
		 			bufInsSqlTempCount.append(" select count(distinct a.deal_id) from under_writer_search_temp_data a left join cr_deal_movement_dtl d on d.deal_id= a.deal_id  and d.DEAL_STAGE_ID='DC' and d.rec_status='A' ");
	 			
		
				if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim().equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase(""))) && ((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on"))))
				{
			   	  bufInsSql.append("WHERE USER_ID='"+CommonFunction.checkNull(vo.getUserId())+"' AND  MAKER_ID!='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"'   AND   DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+") and DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' AND date(DEAL_DATE) =STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') AND CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"'");
			   	  bufInsSqlTempCount.append("WHERE USER_ID='"+CommonFunction.checkNull(vo.getUserId())+"' AND MAKER_ID!='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' AND   DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+")  and DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' AND date(DEAL_DATE) =STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') AND CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND Rec_status='"+StringEscapeUtils.escapeSql(vo.getStage()).trim()+"'");
				}
				
				if(((vo.getLbxDealNo().equalsIgnoreCase("")))||((vo.getApplicationno().equalsIgnoreCase("")))||((vo.getApplicationdate().equalsIgnoreCase("")))||((vo.getCustomername().equalsIgnoreCase("")))||((vo.getLbxProductID().equalsIgnoreCase("")))||((vo.getLbxscheme().equalsIgnoreCase("")))||((vo.getStage().equalsIgnoreCase("")))|| (!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on")))){
					appendSQL=true;
				}
				
				if(appendSQL){
					logger.info("In Where Clause");
					bufInsSql.append(" WHERE IFNULL(USER_ID,'')='"+CommonFunction.checkNull(vo.getUserId())+"' AND  IFNULL(MAKER_ID,'')!='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"'    AND   DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+")   ");// rec status removed by Richa
					bufInsSqlTempCount.append(" WHERE IFNULL(USER_ID,'')='"+CommonFunction.checkNull(vo.getUserId())+"' AND IFNULL(MAKER_ID,'')!='"+StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()+"' AND  DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+")   "); //Rec status removed by richa
				}
				
				 if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")))) {
	 		        bufInsSql.append(" AND a.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
	 		        bufInsSqlTempCount.append(" AND a.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
	 		   	 appendSQL=true;
	 		   	  
	 		     }
	 			 
	 			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")))) {
	 		   	  bufInsSql.append(" AND DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
	 		   	  bufInsSqlTempCount.append(" AND DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
	 		   	  appendSQL=true;
	 		     }
	 			
	 			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim().equalsIgnoreCase("")))) {
	 		   	  bufInsSql.append(" AND DATE(DEAL_DATE) =STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') ");
	 		   	  bufInsSqlTempCount.append(" AND DATE(DEAL_DATE) =STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') ");
	 		   	  appendSQL=true;
	 		     }
	 			
	 			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")))) {
	 		   	  bufInsSql.append(" AND CUSTOMER_NAME LIKE'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
	 		   	  bufInsSqlTempCount.append(" AND CUSTOMER_NAME LIKE'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
	 		   	  appendSQL=true;
	 		     }
	 			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")))) {
	 			   	  bufInsSql.append(" AND DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
	 			   	  bufInsSqlTempCount.append(" AND DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
	 			   	  appendSQL=true;
	 			     }
	 			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")))) {
	 			   	  bufInsSql.append(" AND DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
	 			   	  bufInsSqlTempCount.append(" AND DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
	 			   	  appendSQL=true;
	 			     }
	 			 		  			
	  			 logger.info("bufInsSqlTempCount : "+bufInsSqlTempCount.toString());
	  			 count =Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
	  			
	  			//if((dealId.toString().trim()==null && appNo.toString().trim()==null && appDate.toString().trim()==null && custName.toString().trim()==null && productId.toString().trim()==null) || (dealId.toString().trim().equalsIgnoreCase("") && appNo.toString().trim().equalsIgnoreCase("") && appDate.toString().trim().equalsIgnoreCase("") && custName.toString().trim().equalsIgnoreCase("") && productId.toString().trim().equalsIgnoreCase("")) || fetchVo.getCurrentPageLink()>1)
	  			//{
	  			
	  			// logger.info("current PAge Link no .................... "+fetchVo.getCurrentPageLink());
	  			if(fetchVo.getCurrentPageLink()>1)
	  			{
	  				startRecordIndex = (fetchVo.getCurrentPageLink()-1)*no;
	  				endRecordIndex = no;
//	  				 logger.info("startRecordIndex .................... "+startRecordIndex);
//	  				 logger.info("endRecordIndex .................... "+endRecordIndex);
	  			}
	  			
	  			
	  			bufInsSql.append(" LIMIT "+startRecordIndex+","+endRecordIndex);
	  			
	  			
	  			//query = query +" limit "+startRecordIndex+","+endRecordIndex;
	  			//}
	  			 logger.info("Main query : "+bufInsSql.toString());
	  		     header = ConnectionDAO.sqlSelect(bufInsSql.toString());
	  		     
	  		     bufInsSql=null;
	  		     bufInsSqlTempCount=null;
	  		     
	  		   //logger.info("here &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&"+vo.getUserid());
	  			int size=header.size();	
	  			for(int i=0;i<size;i++){
	  			//	logger.info("header: "+header.size());
	  				ArrayList header1=(ArrayList)header.get(i);
	  				if(header1!=null && header1.size()>0)
	  				{
	  					
	  					fetchVo = new CommonDealVo();
	  			//		logger.info("vo.getStage(): "+vo.getStage());
	  					if(vo.getStage().equalsIgnoreCase("F"))
	  					{
	  						fetchVo.setLbxDealNo("<a href=commonPageBehind.do?dealId="+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+">"+(CommonFunction.checkNull(header1.get(1)))+"</a>");
	  					}
	  					else
	  					{
	  						fetchVo.setLbxDealNo("<a href=dealCapturing.do?method=leadEntryCapturing&dealId="+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+">"+(CommonFunction.checkNull(header1.get(1)))+"</a>");
	  					}
	  					
	  					fetchVo.setDealNo((CommonFunction.checkNull(header1.get(1))).trim());
	  					fetchVo.setApplicationno((CommonFunction.checkNull(header1.get(2))).trim());
	  					fetchVo.setApplicationdate((CommonFunction.checkNull(header1.get(3))).trim());
	  					fetchVo.setCustomername((CommonFunction.checkNull(header1.get(4))).trim());
	  			//		logger.info("Customer First Name: "+(CommonFunction.checkNull(header1.get(4))).trim());
	  					fetchVo.setProduct((CommonFunction.checkNull(header1.get(5))).trim());
	  					fetchVo.setScheme((CommonFunction.checkNull(header1.get(6))).trim());
	  					fetchVo.setReportingToUserId(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(header1.get(7))).trim());
	  					fetchVo.setAllBranches(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(header1.get(8))).trim());
	  					fetchVo.setStatus(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(header1.get(9))).trim());
	  					//fetchVo.setUserId(vo.getUserId());
	  					fetchVo.setTotalRecordSize(count);
	  					list.add(fetchVo);
	  					fetchVo=null;
	  				}
	  				header1.clear();
	  				header1=null;
	  			}
	  			header.clear();
	  			header=null;
       }
	 		} else if(vo.getFunctionId().equalsIgnoreCase("500000123")){
	 			String ApprovalId=ConnectionDAO.singleReturn("SELECT MAX(APPROVAL_ID) FROM CR_DEAL_COLANDING_APPROVAL_DTL WHERE DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"'");

			    bufInsSql.append(" select distinct cdcd.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,DEAL_DATE,cdcm.CUSTOMER_NAME,cpm.PRODUCT_DESC,csm.SCHEME_DESC,cdcd.MAKER_ID,cbm.BRANCH_DESC ");
	 			bufInsSql.append(" FROM CR_DEAL_COLANDING_APPROVAL_DTL cdcd join cr_deal_Dtl cdd on cdcd.deal_id=cdd.deal_id join cr_deal_loan_Dtl cdld on cdld.deal_id=cdd.deal_id and cdld.DEAL_LOAN_ID=(select min(DEAL_LOAN_ID) from cr_deal_loan_Dtl where deal_id=cdd.deal_id ) ");
	 			bufInsSql.append(" join cr_Deal_customer_m cdcm on cdcm.CUSTOMER_ID=cdd.DEAL_CUSTOMER_ID join cr_product_m cpm on cpm.PRODUCT_ID=cdld.DEAL_PRODUCT ");
	 			bufInsSql.append(" join cr_scheme_m csm on csm.SCHEME_ID=cdld.DEAL_SCHEME join com_branch_m cbm on cbm.BRANCH_ID=cdd.DEAL_BRANCH" );
	 			//bufInsSqlTempCount.append(" select distinct count(1) FROM (select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,DATE_FORMAT(DEAL_DATE,'"+dateFormat+"'),deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,ua.AMOUNT_TO ,ua.AMOUNT_FROM,n.DEAL_LOAN_AMOUNT from cr_deal_dtl d ");
	 			bufInsSqlTempCount.append(" select distinct count(1) FROM CR_DEAL_COLANDING_APPROVAL_DTL cdcd join cr_deal_Dtl cdd on cdcd.deal_id=cdd.deal_id join cr_deal_loan_Dtl cdld on cdld.deal_id=cdd.deal_id and cdld.DEAL_LOAN_ID=(select min(DEAL_LOAN_ID) from cr_deal_loan_Dtl where deal_id=cdd.deal_id ) ");
	 			bufInsSqlTempCount.append(" join cr_Deal_customer_m cdcm on cdcm.CUSTOMER_ID=cdd.DEAL_CUSTOMER_ID join cr_product_m cpm on cpm.PRODUCT_ID=cdld.DEAL_PRODUCT ");
	 			bufInsSqlTempCount.append(" join cr_scheme_m csm on csm.SCHEME_ID=cdld.DEAL_SCHEME join com_branch_m cbm on cbm.BRANCH_ID=cdd.DEAL_BRANCH ");
		
				if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim().equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")))&&(!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase(""))) && ((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on"))))
				{
			   	  bufInsSql.append("WHERE cdcd.MAKER_ID!='"+CommonFunction.checkNull(vo.getUserId())+"'  AND   cdd.DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+") and cdcd.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' cdd.AND DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' AND date(DEAL_DATE) =STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') AND cdcm.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND cdld.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND cdld.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' AND cdcd.Rec_status='P'");
			   	  bufInsSqlTempCount.append("WHERE cdcd.MAKER_ID!='"+CommonFunction.checkNull(vo.getUserId())+"' AND   cdd.DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+")  and cdcd.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' AND cdd.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' AND date(DEAL_DATE) =STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') AND cdcm.CUSTOMER_NAME like'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' AND cdld.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"'AND cdld.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' cdcd.AND Rec_status='P'");
				}
				
				if(((vo.getLbxDealNo().equalsIgnoreCase("")))||((vo.getApplicationno().equalsIgnoreCase("")))||((vo.getApplicationdate().equalsIgnoreCase("")))||((vo.getCustomername().equalsIgnoreCase("")))||((vo.getLbxProductID().equalsIgnoreCase("")))||((vo.getLbxscheme().equalsIgnoreCase("")))|| (!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on")))){
					appendSQL=true;
				}
				
				if(appendSQL){
					logger.info("In Where Clause");
					bufInsSql.append(" WHERE IFNULL(cdcd.MAKER_ID,'')!='"+CommonFunction.checkNull(vo.getUserId())+"' AND   cdd.DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+")  AND cdcd.REC_STATUS='P' ");
					bufInsSqlTempCount.append(" WHERE IFNULL(cdcd.MAKER_ID,'')!='"+CommonFunction.checkNull(vo.getUserId())+"' AND  cdd.DEAL_BRANCH IN ("+StringEscapeUtils.escapeSql(branch).trim()+")  AND cdcd.REC_STATUS='P' ");
				}
				
				 if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")))) {
	 		        bufInsSql.append(" AND cdcd.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
	 		        bufInsSqlTempCount.append(" AND cdcd.DEAL_ID='"+StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()+"' ");
	 		   	 appendSQL=true;
	 		   	  
	 		     }
	 			 
	 			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")))) {
	 		   	  bufInsSql.append(" AND cdd.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
	 		   	  bufInsSqlTempCount.append(" AND cdd.DEAL_APPLICATION_FORM_NO='"+StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()+"' ");
	 		   	  appendSQL=true;
	 		     }
	 			
	 			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim().equalsIgnoreCase("")))) {
	 		   	  bufInsSql.append(" AND DATE(DEAL_DATE) =STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') ");
	 		   	  bufInsSqlTempCount.append(" AND DATE(DEAL_DATE) =STR_TO_DATE('"+StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()+"','"+dateFormat+"') ");
	 		   	  appendSQL=true;
	 		     }
	 			
	 			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")))) {
	 		   	  bufInsSql.append(" AND cdcm.CUSTOMER_NAME LIKE'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
	 		   	  bufInsSqlTempCount.append(" AND cdcm.CUSTOMER_NAME LIKE'%"+StringEscapeUtils.escapeSql(vo.getCustomername()).trim()+"%' ");
	 		   	  appendSQL=true;
	 		     }
	 			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")))) {
	 			   	  bufInsSql.append(" AND cdld.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
	 			   	  bufInsSqlTempCount.append(" AND cdld.DEAL_PRODUCT='"+StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()+"' ");
	 			   	  appendSQL=true;
	 			     }
	 			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")))) {
	 			   	  bufInsSql.append(" AND cdld.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
	 			   	  bufInsSqlTempCount.append(" AND cdld.DEAL_SCHEME='"+StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()+"' ");
	 			   	  appendSQL=true;
	 			     }
	 			if((!(StringEscapeUtils.escapeSql(CommonFunction.checkNull(ApprovalId)).trim().equalsIgnoreCase("")))) {
				   	  bufInsSql.append(" AND cdcd.APPROVAL_ID='"+StringEscapeUtils.escapeSql(ApprovalId).trim()+"' ");
				   	  bufInsSqlTempCount.append(" AND cdcd.APPROVAL_ID='"+StringEscapeUtils.escapeSql(ApprovalId).trim()+"' ");
				   	  appendSQL=true;
				     }
	 			 		  			
	  			 logger.info("bufInsSqlTempCount : "+bufInsSqlTempCount.toString());
	  			 count =Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
	  			
	  			//if((dealId.toString().trim()==null && appNo.toString().trim()==null && appDate.toString().trim()==null && custName.toString().trim()==null && productId.toString().trim()==null) || (dealId.toString().trim().equalsIgnoreCase("") && appNo.toString().trim().equalsIgnoreCase("") && appDate.toString().trim().equalsIgnoreCase("") && custName.toString().trim().equalsIgnoreCase("") && productId.toString().trim().equalsIgnoreCase("")) || fetchVo.getCurrentPageLink()>1)
	  			//{
	  			
	  			// logger.info("current PAge Link no .................... "+fetchVo.getCurrentPageLink());
	  			if(fetchVo.getCurrentPageLink()>1)
	  			{
	  				startRecordIndex = (fetchVo.getCurrentPageLink()-1)*no;
	  				endRecordIndex = no;
//	  				 logger.info("startRecordIndex .................... "+startRecordIndex);
//	  				 logger.info("endRecordIndex .................... "+endRecordIndex);
	  			}
	  			
	  			
	  			bufInsSql.append(" LIMIT "+startRecordIndex+","+endRecordIndex);
	  			
	  			
	  			//query = query +" limit "+startRecordIndex+","+endRecordIndex;
	  			//}
	  			 logger.info("Main query : "+bufInsSql.toString());
	  		     header = ConnectionDAO.sqlSelect(bufInsSql.toString());
	  		     
	  		     bufInsSql=null;
	  		     bufInsSqlTempCount=null;
	  		     
	  		   //logger.info("here &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&"+vo.getUserid());
	  			int size=header.size();	
	  			for(int i=0;i<size;i++){
	  			//	logger.info("header: "+header.size());
	  				ArrayList header1=(ArrayList)header.get(i);
	  				if(header1!=null && header1.size()>0)
	  				{
	  					
	  					fetchVo = new CommonDealVo();
	  			//		logger.info("vo.getStage(): "+vo.getStage());
	  					if(vo.getStage().equalsIgnoreCase("F"))
	  					{
	  						fetchVo.setLbxDealNo("<a href=commonPageBehind.do?dealId="+(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0)))).trim()+">"+(CommonFunction.checkNull(header1.get(1)))+"</a>");
	  					}
	  					
	  					fetchVo.setDealNo((CommonFunction.checkNull(header1.get(1))).trim());
	  					fetchVo.setApplicationno((CommonFunction.checkNull(header1.get(2))).trim());
	  					fetchVo.setApplicationdate((CommonFunction.checkNull(header1.get(3))).trim());
	  					fetchVo.setCustomername((CommonFunction.checkNull(header1.get(4))).trim());
	  			//		logger.info("Customer First Name: "+(CommonFunction.checkNull(header1.get(4))).trim());
	  					fetchVo.setProduct((CommonFunction.checkNull(header1.get(5))).trim());
	  					fetchVo.setScheme((CommonFunction.checkNull(header1.get(6))).trim());
	  					fetchVo.setReportingToUserId(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(header1.get(7))).trim());
	  					fetchVo.setAllBranches(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(header1.get(8))).trim());
	  					//fetchVo.setUserId(vo.getUserId());
	  					fetchVo.setTotalRecordSize(count);
	  					list.add(fetchVo);
	  					fetchVo=null;
	  				}
	  				header1.clear();
	  				header1=null;
	  			}
	  			header.clear();
	  			header=null;
	     
	 		} 
	//}
}
	
	
		
		 dealId=null;
		 appNo=null;
		 appDate=null;
		 custName=null;
		 productId=null;
	}
	catch(Exception e)
	{
		e.printStackTrace();
	}
	finally
	{
		vo=null;
	}
	
	
	return list;
}

 
  public ArrayList getSectorList()
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append("SELECT g.VALUE,g.DESCRIPTION from generic_master g where g.GENERIC_KEY='SECTOR_TYPE' and g.REC_STATUS='A'");
      logger.info("getSectorList");
      CodeDescVo branchVo = null;
      ArrayList baseRate = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getSectorList").append(baseRate.size()).toString());

      query = null;
      for (int i = 0; i < baseRate.size(); i++)
      {
        logger.info(new StringBuilder().append("getSectorList").append(baseRate.get(i).toString()).toString());
        ArrayList baseRate1 = (ArrayList)baseRate.get(i);
        if (baseRate1.size() > 0)
        {
          branchVo = new CodeDescVo();
          branchVo.setId(CommonFunction.checkNull(baseRate1.get(0)).trim());
          branchVo.setName(CommonFunction.checkNull(baseRate1.get(1)).trim());
          list.add(branchVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }
  public ArrayList getinterstCalcFrom() {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append("SELECT gm.VALUE,gm.DESCRIPTION from generic_master gm where gm.GENERIC_KEY='INTERST_CAL_FROM' and gm.REC_STATUS='A'");
      logger.info(new StringBuilder().append("getinterstCalcFrom::::::::").append(query).toString());
      CodeDescVo branchVo = null;
      ArrayList listData = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getSectorList").append(listData.size()).toString());

      query = null;
      for (int i = 0; i < listData.size(); i++)
      {
        ArrayList listData1 = (ArrayList)listData.get(i);
        if (listData.size() > 0)
        {
          branchVo = new CodeDescVo();
          branchVo.setId(CommonFunction.checkNull(listData1.get(0)).trim());
          branchVo.setName(CommonFunction.checkNull(listData1.get(1)).trim());
          list.add(branchVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public ArrayList getMakerData(String dealId) {
    ArrayList list = new ArrayList();
    String roleName = "";
    try {
      logger.info(new StringBuilder().append("In getMakerData..........................DAOImpl").append(dealId).toString());
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select approval_decision,approval_remarks from cr_deal_approval_dtl  where DEAL_APPROVAL_ID=(select max(DEAL_APPROVAL_ID) from cr_deal_approval_dtl where deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' and approval_decision='P') limit 1").toString());
      logger.info(new StringBuilder().append("In getMakerData...............query...........DAOImpl").append(query).toString());
      UnderwriterApprovalVo noteVO = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getApprovalData ").append(product.size()).toString());
      query = null;

      for (int i = 0; i < product.size(); i++)
      {
        ArrayList data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          noteVO = new UnderwriterApprovalVo();

          noteVO.setDecision(CommonFunction.checkNull(data.get(0)).trim());
          noteVO.setRemarks(CommonFunction.checkNull(data.get(1)).trim());

          list.add(noteVO);
        }
        noteVO = null;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      dealId = null;
      roleName = null;
    }
    return list;
  }

  public ArrayList getNotepadDataInLoanInit(String loanId, String txnType)
  {
    ArrayList list = new ArrayList();
    try {
      logger.info("In getNotepadDataInLoanInit.....................................Dao Impl");
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select b.description ,DATE_FORMAT(notepad_date,'").append(this.dateFormatWithTime).append("'),person_met,meeting_location,if(followup_reqd='N','NO','YES') as followup_reqd,").append(" DATE_FORMAT(followup_date,'").append(this.dateFormatWithTime).append("'),followup_location,notepad_comments,followup_remarks,FOLLOWUP_PERSON, ").append(" s.USER_NAME,DATE_FORMAT(a.maker_date,'").append(this.dateFormatWithTime).append("') from cr_notepad_dtl a,generic_master b,sec_user_m s").append(" where notepad_code=b.value and TXN_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()).append("' and txn_id=(select LOAN_DEAL_ID from cr_loan_dtl where LOAN_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim()).append(") and a.notepad_code!='PD' and a.MAKER_ID=s.USER_ID").toString());

      logger.info(new StringBuilder().append("In getNotepadDataInLoanInit").append(query).toString());

      CreditProcessingNotepadVo noteVO = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getNotepadDataInLoanInit ").append(product.size()).toString());
      query = null;

      for (int i = 0; i < product.size(); i++)
      {
        ArrayList data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          noteVO = new CreditProcessingNotepadVo();
          noteVO.setNoteCodeDescription(CommonFunction.checkNull(data.get(0)).trim());

          noteVO.setMeetingDate(CommonFunction.checkNull(data.get(1)).trim());
          noteVO.setPersonMet(CommonFunction.checkNull(data.get(2)).trim());
          noteVO.setMeetingLocation(CommonFunction.checkNull(data.get(3)).trim());
          noteVO.setFollowUp(CommonFunction.checkNull(data.get(4)).trim());
          noteVO.setFollowupDate(CommonFunction.checkNull(data.get(5)).trim());
          noteVO.setFollowUpLocation(CommonFunction.checkNull(data.get(6)).trim());
          noteVO.setMeetingRemarks(CommonFunction.checkNull(data.get(7)).trim());
          noteVO.setFollowupRemarks(CommonFunction.checkNull(data.get(8)).trim());
          noteVO.setFollowUpPerson(CommonFunction.checkNull(data.get(9)).trim());
          noteVO.setUserName(CommonFunction.checkNull(data.get(10)).trim());
          noteVO.setCreationDate(CommonFunction.checkNull(data.get(11)).trim());
          list.add(noteVO);
        }
        noteVO = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      loanId = null;
      txnType = null;
    }
    return list;
  }

  public boolean saveGuaranteeAmount(Object ob)
  {
    CreditProcessingCustomerEntryVo creditVo = (CreditProcessingCustomerEntryVo)ob;

    boolean status = false;
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    StringBuilder queryUpdate = new StringBuilder();
    queryUpdate.append("update cr_deal_customer_role set GUARANTEE_AMOUNT=? where DEAL_CUSTOMER_ROLE_ID=?");
    PrepStmtObject prepStmt = new PrepStmtObject();

    if (CommonFunction.checkNull(creditVo.getGuaranteeAmount()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      try {
        insertPrepStmtObject.addString(this.myFormatter.parse(creditVo.getGuaranteeAmount().trim()).toString());
      }
      catch (ParseException e1) {
        e1.printStackTrace();
      }
    }
    if (CommonFunction.checkNull(creditVo.getId()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(creditVo.getId().trim());
    }
    insertPrepStmtObject.setSql(queryUpdate.toString());
    logger.info(new StringBuilder().append("IN saveGuaranteeAmount() update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
    qryList.add(insertPrepStmtObject);
    try
    {
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In saveGuaranteeAmount.........update status: ").append(status).toString());
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      queryUpdate = null;
    }
    logger.info(new StringBuilder().append("status in dao : ").append(status).toString());
    return status;
  }

  public ArrayList getTenureAmountInDeal(String dealId) {
    ArrayList list = new ArrayList();
    try
    {
      ArrayList searchlist = new ArrayList();
      logger.info("In getTenureAmountInDeal....................");

      StringBuffer bufInsSql = new StringBuffer();

      bufInsSql.append(new StringBuilder().append("select DEAL_TENURE,DEAL_CHARGE_FINAL_AMOUNT from  cr_deal_loan_dtl L,cr_deal_txncharges_dtl C where L.DEAL_ID=").append(dealId).append(" and L.DEAL_ID=C.DEAL_ID and c.DEAL_CHARGE_CODE=103 limit 1").toString());

      logger.info(new StringBuilder().append("In getTenureAmountInDeal......... query...........").append(bufInsSql.toString()).toString());
      searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());

      bufInsSql = null;

      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("getTenureAmountInDeal  List ").append(searchlist.get(i)).toString());
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0)
        {
          TenureAmountVo receiptvo = new TenureAmountVo();
          receiptvo.setTenure(CommonFunction.checkNull(data.get(0)).trim());
          Number reconNum = Double.valueOf(0.0D);
          reconNum = this.myFormatter.parse(CommonFunction.checkNull(data.get(1)).trim());
          receiptvo.setSecurityAmount(this.myFormatter.format(reconNum));
          list.add(receiptvo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      dealId = null;
    }
    return list;
  }

  public ArrayList getInstallTypeInDeal(String dealId) {
    ArrayList list = new ArrayList();
    ArrayList mainList = new ArrayList();
    ArrayList subList = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();

      query.append(new StringBuilder().append(" select distinct FROM_INSTL_NO,TO_INSTL_NO,RECOVERY_PERCENT,DEAL_INSTALLMENT_TYPE,DEAL_NO_OF_INSTALLMENT,PRINCIPAL_AMOUNT,INSTALLMENT_AMOUNT,DEAL_RATE_TYPE,DEAL_LOAN_AMOUNT,RECOVERY_TYPE,DATE_FORMAT(deal_repay_eff_date,'").append(this.dateFormat).append("'),DATE_FORMAT(L.DEAL_MATURITY_DATE,'").append(this.dateFormat).append("'),DATE_FORMAT(d.due_date,'").append(this.dateFormat).append("'),IFNULL(EDIT_DUE_DATE,'N'),DATE_FORMAT(NEXT_DUE_DATE,'").append(this.dateFormat).append("') ").append(" ,DEAL_REPAYMENT_FREQ ").append("  from cr_deal_loan_dtl L left JOIN cr_deal_installment_plan D on D.DEAL_ID=L.DEAL_ID ").append(" where L.DEAL_ID=").append(dealId).toString());

      logger.info(new StringBuilder().append("getInstallType Queryl: ").append(query).toString());
      mainList = ConnectionDAO.sqlSelect(query.toString());

      query = null;

      for (int i = 0; i < mainList.size(); i++)
      {
        subList = (ArrayList)mainList.get(i);
        if (subList.size() > 0) {
          InstallmentPlanForCMVO ipVo = new InstallmentPlanForCMVO();
          ipVo = new InstallmentPlanForCMVO();
          if (((CommonFunction.checkNull(subList.get(3)).equalsIgnoreCase("E")) || (CommonFunction.checkNull(subList.get(3)).equalsIgnoreCase("P"))) && (CommonFunction.checkNull(subList.get(13)).equalsIgnoreCase("N")))
          {
            ipVo.setFromInstallment("1");
            ipVo.setToInstallment(CommonFunction.checkNull(subList.get(4)).trim());
            if (!CommonFunction.checkNull(subList.get(2)).equalsIgnoreCase("")) {
              Number RecoveryPercen = this.myFormatter.parse(CommonFunction.checkNull(subList.get(2)).trim());

              logger.info(new StringBuilder().append("RecoveryPercen: ").append(RecoveryPercen).toString());
              ipVo.setRecoveryPercen(this.myFormatter.format(RecoveryPercen));
            } else {
              ipVo.setRecoveryPercen("0");
            }
            ipVo.setInstallmentType(CommonFunction.checkNull(subList.get(3)).trim());
            ipVo.setTotalInstallment(CommonFunction.checkNull(subList.get(4)).trim());
          }
          else
          {
            ipVo.setFromInstallment(CommonFunction.checkNull(subList.get(0)).trim());
            ipVo.setToInstallment(CommonFunction.checkNull(subList.get(1)).trim());
            if (!CommonFunction.checkNull(subList.get(2)).equalsIgnoreCase("")) {
              Number RecoveryPercen = this.myFormatter.parse(CommonFunction.checkNull(subList.get(2)).trim());

              logger.info(new StringBuilder().append("RecoveryPercen: ").append(RecoveryPercen).toString());
              ipVo.setRecoveryPercen(this.myFormatter.format(RecoveryPercen));
            } else {
              ipVo.setRecoveryPercen("0");
            }
            ipVo.setInstallmentType(CommonFunction.checkNull(subList.get(3)).trim());
            ipVo.setTotalInstallment(CommonFunction.checkNull(subList.get(4)).trim());
          }

          ipVo.setRateType(CommonFunction.checkNull(subList.get(7)).trim());
          if (!CommonFunction.checkNull(subList.get(5)).equalsIgnoreCase("")) {
            Number princam = this.myFormatter.parse(CommonFunction.checkNull(subList.get(5)).trim());

            logger.info(new StringBuilder().append("princ amount: ").append(princam).toString());
            ipVo.setPrinAm(this.myFormatter.format(princam));
          } else {
            ipVo.setPrinAm("0.00");
          }
          if (!CommonFunction.checkNull(subList.get(6)).equalsIgnoreCase("")) {
            Number instam = this.myFormatter.parse(CommonFunction.checkNull(subList.get(6)).trim());

            logger.info(new StringBuilder().append("inst amount: ").append(instam).toString());
            ipVo.setInstalAm(this.myFormatter.format(instam));
          } else {
            ipVo.setInstalAm("0.00");
          }
          if (!CommonFunction.checkNull(subList.get(8)).equalsIgnoreCase("")) {
            Number instam = this.myFormatter.parse(CommonFunction.checkNull(subList.get(8)).trim());

            logger.info(new StringBuilder().append("setLoanAmount: ").append(instam).toString());
            ipVo.setLoanAmount(this.myFormatter.format(instam));
          } else {
            ipVo.setLoanAmount("0.00");
          }
          ipVo.setRecoveryType(CommonFunction.checkNull(subList.get(9)).trim());
          ipVo.setRepayeffdate(CommonFunction.checkNull(subList.get(10)).trim());
          ipVo.setMaxDate(CommonFunction.checkNull(subList.get(11)).trim());
          ipVo.setDueDatee(CommonFunction.checkNull(subList.get(12)).trim());

          ipVo.setEditDueDate(CommonFunction.checkNull(subList.get(13)).trim());
          ipVo.setInsNextDueDate(CommonFunction.checkNull(subList.get(14)).trim());

          ipVo.setFrequency(CommonFunction.checkNull(subList.get(15)).trim());

          list.add(ipVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      dealId = null;
    }
    return list;
  }

  public ArrayList getCycleDateList(String dealId, String stage)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append("SELECT CAST(DUE_DAY AS UNSIGNED INTEGER) id,CAST(DUE_DAY AS UNSIGNED INTEGER) id1 FROM com_next_due_date_m WHERE rec_status='A' ");
      if (stage.equalsIgnoreCase("LIM"))
        query.append(new StringBuilder().append(" AND PRODUCT_CATEGORY=(select DEAL_PRODUCT_CATEGORY from cr_deal_loan_dtl where deal_loan_id=(select LOAN_DEAL_LOAN_ID from cr_loan_dtl where loan_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("')) ORDER BY id ").toString());
      if (stage.equalsIgnoreCase("DC"))
        query.append(new StringBuilder().append(" AND PRODUCT_CATEGORY=(select DEAL_PRODUCT_CATEGORY from cr_deal_loan_dtl where deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("') ORDER BY id ").toString());
      logger.info(new StringBuilder().append("getCycleDateList: ").append(query).toString());
      CodeDescVo branchVo = null;
      ArrayList baseRate = ConnectionDAO.sqlSelect(query.toString());

      query = null;
      for (int i = 0; i < baseRate.size(); i++)
      {
        ArrayList baseRate1 = (ArrayList)baseRate.get(i);
        if (baseRate1.size() > 0)
        {
          branchVo = new CodeDescVo();
          branchVo.setId(CommonFunction.checkNull(baseRate1.get(0)).trim());
          branchVo.setName(CommonFunction.checkNull(baseRate1.get(1)).trim());
          list.add(branchVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      stage = null;
    }
    return list;
  }

  public ArrayList getCycleDueDay(String scheme, String stage) {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append("SELECT CAST(DUE_DAY AS UNSIGNED INTEGER) id,CAST(DUE_DAY AS UNSIGNED INTEGER) id1 FROM com_next_due_date_m WHERE rec_status='A' ");
      if (stage.equalsIgnoreCase("DC"))
      {
        query.append("AND PRODUCT_CATEGORY=(select PRODUCT_CATEGORY from cr_scheme_m S left join  cr_product_m P on S.PRODUCT_ID=P.PRODUCT_ID ");
        query.append(new StringBuilder().append("where S.SCHEME_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scheme)).trim()).append(" ) ORDER BY id").toString());
      }
      if (stage.equalsIgnoreCase("LIM"))
      {
        query.append(new StringBuilder().append(" AND PRODUCT_CATEGORY=(select DEAL_PRODUCT_CATEGORY from cr_deal_loan_dtl where DEAL_LOAN_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scheme)).trim()).append("') ORDER BY id ").toString());
      }
      logger.info(new StringBuilder().append("getCycleDueDay: ").append(query.toString()).toString());
      CodeDescVo branchVo = null;
      ArrayList baseRate = ConnectionDAO.sqlSelect(query.toString());

      query = null;
      for (int i = 0; i < baseRate.size(); i++)
      {
        ArrayList baseRate1 = (ArrayList)baseRate.get(i);
        if (baseRate1.size() > 0)
        {
          branchVo = new CodeDescVo();
          branchVo.setId(CommonFunction.checkNull(baseRate1.get(0)).trim());
          branchVo.setName(CommonFunction.checkNull(baseRate1.get(1)).trim());
          list.add(branchVo);
        }
        branchVo = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      stage = null;
      scheme = null;
    }
    return list;
  }

  public ArrayList<Object> getSecurityDetailAllInDeal(String dealId, String functionId)
  {
    SecurityDepositVO appl = new SecurityDepositVO();
    ArrayList list = new ArrayList();

    String tableName = "cr_deal_sd_m";
    if (CommonFunction.checkNull(functionId).trim().equalsIgnoreCase("3000955"))
      tableName = "cr_deal_sd_emi_calc_m";
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select DEAL_LOAN_ID,DEAL_ID,SD_AMOUNT,SD_INTEREST_TYPE,SD_INTEREST_RATE,SD_COMPOUNDING_FREQ,SD_TENURE,SD_INTEREST,SD_ADJUSTMENT from ").append(tableName).append(" S ").append("where DEAL_ID=").append(dealId).toString());

      ArrayList appdetails = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getSecurityDetailAll").append(appdetails.size()).toString());

      query = null;
      for (int i = 0; i < appdetails.size(); i++)
      {
        ArrayList adetails1 = (ArrayList)appdetails.get(i);
        for (int k = 0; k < adetails1.size(); k++)
        {
          appl = new SecurityDepositVO();
          appl.setTxnType(CommonFunction.checkNull(adetails1.get(0)).trim());
          appl.setTxnId(CommonFunction.checkNull(adetails1.get(1)).trim());

          if (!CommonFunction.checkNull(adetails1.get(2)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(adetails1.get(2)).trim());
            appl.setSecurityAmount(this.myFormatter.format(reconNum));
          }

          if (CommonFunction.checkNull(adetails1.get(3)).trim().equalsIgnoreCase("N"))
          {
            appl.setInterestType("NO");
          }
          else if (CommonFunction.checkNull(adetails1.get(3)).trim().equalsIgnoreCase("S"))
          {
            appl.setInterestType("SIMPLE");
          }
          else if (CommonFunction.checkNull(adetails1.get(3)).trim().equalsIgnoreCase("C"))
          {
            appl.setInterestType("COMPOUND");
          }

          if (!CommonFunction.checkNull(adetails1.get(4)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(adetails1.get(4)).trim());
            appl.setInterestRate(this.myFormatter.format(reconNum));
          }

          appl.setCompoundFrequency(CommonFunction.checkNull(adetails1.get(5)).trim());
          appl.setTenure(CommonFunction.checkNull(adetails1.get(6)).trim());
          if (!CommonFunction.checkNull(adetails1.get(7)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(adetails1.get(7)).trim());
            appl.setRelatedInterest(this.myFormatter.format(reconNum));
          }
          appl.setSdAdjust(CommonFunction.checkNull(adetails1.get(8)).trim());
        }

        list.add(appl);
      }
      appl = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      dealId = null;
    }
    logger.info(new StringBuilder().append("Value of List is in dao is=").append(list).toString());
    return list;
  }

  public boolean deleteSecurityDepositInDeal(String[] id)
  {
    logger.info(new StringBuilder().append("In deleteSecurityDeposit. deleteSecurityDepositInDeal.......").append(id).toString());
    boolean status = false;
    ArrayList queryList = new ArrayList();
    try {
      for (int k = 0; k < id.length; k++)
      {
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append(new StringBuilder().append("DELETE FROM cr_deal_sd_m WHERE DEAL_ID=").append(id[k]).toString());

        queryList.add(bufInsSql.toString());

        bufInsSql = null;
      }
      status = ConnectionDAO.sqlInsUpdDelete(queryList);
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      id = null;
    }
    return status;
  }

  public boolean saveSecurityDepositInDeal(SecurityDepositVO vo)
  {
    SecurityDepositVO cv = vo;
    ArrayList qryList = new ArrayList();
    StringBuffer bufInsSql = new StringBuffer();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    boolean status = false;
    logger.info(new StringBuilder().append("In saveSecurityDeposit.TXNID(dealId)").append(vo.getDealId()).append(" and TXN_TYPE ").append(vo.getTxnType()).toString());
    try {
      StringBuilder loanDealQuery = new StringBuilder();
      loanDealQuery.append(new StringBuilder().append("select DEAL_LOAN_ID from cr_deal_loan_dtl where DEAL_ID=").append(vo.getDealId()).append(" limit 1").toString());
      logger.info(new StringBuilder().append("query ").append(loanDealQuery).toString());
      String loanDealId = ConnectionDAO.singleReturn(loanDealQuery.toString());

      logger.info(new StringBuilder().append("loanDealId ").append(loanDealId).toString());
      loanDealQuery = null;

      StringBuilder q1 = new StringBuilder();
      q1.append(new StringBuilder().append("select count(*) from cr_deal_sd_m where DEAL_ID=").append(vo.getDealId()).toString());
      logger.info(new StringBuilder().append("query ").append(q1).toString());
      String status1 = ConnectionDAO.singleReturn(q1.toString());

      q1 = null;

      if (status1.equalsIgnoreCase("0"))
      {
        bufInsSql.append("Insert into cr_deal_sd_m(DEAL_LOAN_ID,DEAL_ID,SD_AMOUNT,SD_INTEREST_TYPE,SD_INTEREST_RATE,SD_COMPOUNDING_FREQ,SD_TENURE,SD_INTEREST,SD_ADJUSTMENT,REC_STATUS,MAKER_ID,MAKER_DATE)");

        bufInsSql.append(" values ( ");
        bufInsSql.append(new StringBuilder().append(" '").append(loanDealId).append("',").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" 'P',");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

        if (CommonFunction.checkNull(cv.getDealId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getDealId()).trim());
        }

        if (CommonFunction.checkNull(cv.getSecurityAmount()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(cv.getSecurityAmount()).trim()).toString());
        }

        if (CommonFunction.checkNull(cv.getInterestType()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getInterestType()).trim());
        }
        if (CommonFunction.checkNull(cv.getInterestRate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(cv.getInterestRate()).trim()).toString());
        }
        logger.info(new StringBuilder().append("Compound Fre: ").append(cv.getCompoundFrequency()).toString());
        if (CommonFunction.checkNull(cv.getCompoundFrequency()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getCompoundFrequency()).trim());
        if (CommonFunction.checkNull(cv.getTenure()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getTenure()).trim());
        }

        if (CommonFunction.checkNull(cv.getRelatedInterest()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(cv.getRelatedInterest()).trim()).toString());
        }

        if (CommonFunction.checkNull(cv.getSdAdjust()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getSdAdjust()).trim());
        }

        if (CommonFunction.checkNull(cv.getUserId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getUserId()).trim());
        }
        if (CommonFunction.checkNull(cv.getBussinessDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getBussinessDate()).trim());
        }
        logger.info(new StringBuilder().append("ibufInsUpdSql.toString()").append(bufInsSql.toString()).toString());
        insertPrepStmtObject.setSql(bufInsSql.toString());

        logger.info(new StringBuilder().append("IN security deposit insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In security deposit......................").append(status).toString());
      }
      else
      {
        bufInsSql.append(new StringBuilder().append("update cr_deal_sd_m set SD_INTEREST_TYPE=?,SD_INTEREST_RATE=?,SD_COMPOUNDING_FREQ=?,SD_INTEREST=?,SD_AMOUNT=?, SD_ADJUSTMENT=?,SD_TENURE=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) where DEAL_ID=?").toString());

        if (CommonFunction.checkNull(cv.getInterestType()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getInterestType()).trim());
        if (CommonFunction.checkNull(cv.getInterestRate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(cv.getInterestRate()).trim()).toString());
        if (CommonFunction.checkNull(cv.getCompoundFrequency()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getCompoundFrequency()).trim());
        }
        if (CommonFunction.checkNull(cv.getRelatedInterest()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(cv.getRelatedInterest()).trim()).toString());
        }
        if (CommonFunction.checkNull(cv.getSecurityAmount()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(cv.getSecurityAmount()).trim()).toString());
        }
        if (CommonFunction.checkNull(cv.getSdAdjust()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getSdAdjust()).trim());
        }

        if (CommonFunction.checkNull(cv.getTenure()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getTenure()).trim());
        }
        if (CommonFunction.checkNull(cv.getUserId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getUserId()).trim());
        }

        if (CommonFunction.checkNull(cv.getBussinessDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getBussinessDate()).trim());
        }

        if (CommonFunction.checkNull(cv.getDealId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getDealId()).trim());
        }

        logger.info(new StringBuilder().append("ibufInsUpdSql.toString()").append(bufInsSql.toString()).toString());
        insertPrepStmtObject.setSql(bufInsSql.toString());

        logger.info(new StringBuilder().append("IN security Deposit update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In security Deposit......................").append(status).toString());

        bufInsSql = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      vo = null;
      cv = null;
    }
    return status;
  }

  public boolean saveInstallPlanInDeal(InstallmentPlanForCMVO ipvo)
  {
    logger.info("In saveInstallPlanInDeal");
    String[] FromInstallment = ipvo.getFromInstall();

    logger.info(new StringBuilder().append("In FromInstallment.....").append(FromInstallment.length).toString());
    String[] ToInstallment = ipvo.getToInstall();

    String[] RecoveryPercen = ipvo.getRecoveryPer();

    String InstallmentType = ipvo.getInstallmentType();

    String TotalInstallment = ipvo.getTotalInstallment();

    String toInstallment = ipvo.getToInstallment();

    String[] prinAmount = ipvo.getPrincipalAmount();

    String[] instalAmount = ipvo.getInstallmentAmount();

    String loanId = ipvo.getLoanId();

    String[] dueDate = ipvo.getDueDate();

    String editDueDate = ipvo.getEditDueDate();

    ArrayList qryList = new ArrayList();
    boolean status = false;

    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    StringBuffer bufInsSql = new StringBuffer();
    StringBuilder checkQ = new StringBuilder();
    String dealLoanId = CommonFunction.checkNull(ConnectionDAO.singleReturn(new StringBuilder().append(" select DEAL_LOAN_ID from CR_DEAL_LOAN_DTL WHERE DEAL_ID = '").append(CommonFunction.checkNull(ipvo.getDealId()).trim()).append("' ").toString()));
    checkQ.append(new StringBuilder().append("select count(*) from cr_deal_installment_plan where DEAL_ID=").append(CommonFunction.checkNull(ipvo.getDealId()).trim()).append("").toString());
    String count = ConnectionDAO.singleReturn(checkQ.toString());

    checkQ = null;

    if (!count.equalsIgnoreCase("0"))
    {
      insertPrepStmtObject = new PrepStmtObject();
      StringBuilder qry = new StringBuilder();
      qry.append(new StringBuilder().append("DELETE FROM cr_deal_installment_plan WHERE DEAL_ID='").append(CommonFunction.checkNull(ipvo.getDealId()).trim()).append("'").toString());

      insertPrepStmtObject.setSql(qry.toString());
      qryList.add(insertPrepStmtObject);

      qry = null;
    }

    try
    {
      for (int k = 0; k < FromInstallment.length; k++)
      {
        bufInsSql = new StringBuffer();

        insertPrepStmtObject = new PrepStmtObject();

        if (CommonFunction.checkNull(editDueDate).equalsIgnoreCase("Y"))
        {
          bufInsSql.append("insert into cr_deal_installment_plan (DEAL_ID,DEAL_LOAN_ID,FROM_INSTL_NO,TO_INSTL_NO,RECOVERY_PERCENT,PRINCIPAL_AMOUNT,INSTALLMENT_AMOUNT,REC_STATUS,SEQ_NO,RECOVERY_TYPE,MAKER_ID,MAKER_DATE,DUE_DATE) ");
          bufInsSql.append(new StringBuilder().append("values(?,?,?,?,?,?,?,?,?,?,?,DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND)").toString());
          bufInsSql.append(")");
        }
        else
        {
          bufInsSql.append("insert into cr_deal_installment_plan (DEAL_ID,DEAL_LOAN_ID,FROM_INSTL_NO,TO_INSTL_NO,RECOVERY_PERCENT,PRINCIPAL_AMOUNT,INSTALLMENT_AMOUNT,REC_STATUS,SEQ_NO,RECOVERY_TYPE,MAKER_ID,MAKER_DATE ");
          if (CommonFunction.checkNull(InstallmentType).equalsIgnoreCase("I"))
            bufInsSql.append(",DUE_DATE)");
          else {
            bufInsSql.append(")");
          }

          bufInsSql.append(new StringBuilder().append("values(?,?,?,?,?,?,?,?,?,?,?,DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND)").toString());
          if ((CommonFunction.checkNull(InstallmentType).equalsIgnoreCase("I")) || (CommonFunction.checkNull(InstallmentType).equalsIgnoreCase("J")))
            bufInsSql.append(new StringBuilder().append(",DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND))").toString());
          else {
            bufInsSql.append(")");
          }
        }
        if (CommonFunction.checkNull(ipvo.getDealId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(ipvo.getDealId().trim());
        }
        if (CommonFunction.checkNull(dealLoanId).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(dealLoanId.trim());
          }
        if (CommonFunction.checkNull(FromInstallment[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(FromInstallment[k].trim());
        }
        if (CommonFunction.checkNull(ToInstallment[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(ToInstallment[k].trim());
        }
        if (CommonFunction.checkNull(RecoveryPercen[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.00");
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(RecoveryPercen[k]).trim()).toString());
        }
        if (CommonFunction.checkNull(prinAmount[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.00");
        else
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(prinAmount[k]).trim()).toString());
        if (CommonFunction.checkNull(instalAmount[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.00");
        else
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(instalAmount[k]).trim()).toString());
        insertPrepStmtObject.addString("P");

        insertPrepStmtObject.addString(new StringBuilder().append("").append(k + 1).toString());
        if (CommonFunction.checkNull(InstallmentType).equalsIgnoreCase("I"))
        {
          insertPrepStmtObject.addString("F");
        }
        else if (CommonFunction.checkNull(ipvo.getRecoveryType()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(ipvo.getRecoveryType().trim());
        }

        if (CommonFunction.checkNull(ipvo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(ipvo.getMakerId()).trim());
        }

        if (CommonFunction.checkNull(ipvo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(ipvo.getMakerDate()).trim());
        }

        if (CommonFunction.checkNull(editDueDate).equalsIgnoreCase("Y"))
        {
          if (CommonFunction.checkNull(dueDate[k]).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(dueDate[k].trim());
          }

        }
        else if (CommonFunction.checkNull(InstallmentType).equalsIgnoreCase("I"))
        {
          if (CommonFunction.checkNull(dueDate[k]).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(dueDate[k].trim());
          }

        }

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN saveInstallPlan() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        bufInsSql = null;
      }

      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      ipvo = null;
    }
    logger.info(new StringBuilder().append("In saveInstallPlan......................").append(status).toString());
    return status;
  }

  public boolean updateInstallPlanInDeal(InstallmentPlanForCMVO ipvo)
  {
    logger.info("In updateInstallPlanInDeal");
    String[] FromInstallment = ipvo.getFromInstall();

    String[] ToInstallment = ipvo.getToInstall();

    String[] RecoveryPercen = ipvo.getRecoveryPer();

    String InstallmentType = ipvo.getInstallmentType();

    String TotalInstallment = ipvo.getTotalInstallment();

    String toInstallment = ipvo.getToInstallment();

    String[] dueDate = ipvo.getDueDate();
    ArrayList qryList = new ArrayList();
    boolean status = false;
    try
    {
      for (int k = 0; k < FromInstallment.length; k++)
      {
        PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
        StringBuffer bufInsSql = new StringBuffer();

        bufInsSql.append("update cr_deal_installment_plan set FROM_INSTL_NO=?,TO_INSTL_NO=?,RECOVERY_PERCENT=?,PRINCIPAL_AMOUNT='0',INSTALLMENT_AMOUNT='0',REC_STATUS='P',due_date=? where DEAL_ID=? ");

        if (CommonFunction.checkNull(FromInstallment[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(FromInstallment[k].trim());
        }
        if (CommonFunction.checkNull(ToInstallment[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(ToInstallment[k].trim());
        }
        if (CommonFunction.checkNull(RecoveryPercen[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.00");
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(RecoveryPercen[k]).trim()).toString());
        }

        if (CommonFunction.checkNull(dueDate[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(dueDate[k].trim());
        }

        if (CommonFunction.checkNull(ipvo.getDealId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(ipvo.getDealId().trim());
        }
        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN updateInstallPlan() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        bufInsSql = null;
      }

      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      ipvo = null;
    }
    logger.info(new StringBuilder().append("In updateInstallPlan......................").append(status).toString());
    return status;
  }

  public String generateRepyScheduleInDeal(String dealId, String makerId) {
    boolean status = false;
    CallableStatement cst = null;
    Connection con = ConnectionDAO.getConnection();
    logger.info(new StringBuilder().append("Deal id: ").append(dealId).toString());
    String procval = "Noresult";
    try {
      StringBuilder productQuery = new StringBuilder();
      productQuery.append(new StringBuilder().append("select DEAL_LOAN_ID from cr_deal_loan_dtl where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
      logger.info(new StringBuilder().append("productQuery: ").append(productQuery).toString());
      ArrayList productList = ConnectionDAO.sqlSelect(productQuery.toString());

      productQuery = null;
      for (int i = 0; i < productList.size(); i++)
      {
        ArrayList subproductList = (ArrayList)productList.get(i);
        if (subproductList.size() > 0)
        {
          logger.info(new StringBuilder().append("loanDeal Id: ").append(CommonFunction.checkNull(subproductList.get(0))).toString());
          con.setAutoCommit(false);
          cst = con.prepareCall("call Generate_Repayment_schedule(?,?,?,?)");
          cst.setString(1, "DC");
          cst.setString(2, CommonFunction.checkNull(subproductList.get(0)));
          cst.registerOutParameter(3, 1);
          cst.registerOutParameter(4, 1);
          cst.executeUpdate();
          String s1 = cst.getString(3);
          String s2 = cst.getString(4);

          if ((s1 != null) && (s1.equalsIgnoreCase("S")))
          {
            status = true;
            con.commit();
            procval = s1;
          }
          else
          {
            procval = s2;
            con.rollback();
          }
          logger.info(new StringBuilder().append("status: ").append(status).toString());
          logger.info(new StringBuilder().append("s2: ").append(s2).toString());
        }
      }
    } catch (Exception e) {
      try {
        con.rollback();
      } catch (SQLException e1) {
        logger.info(new StringBuilder().append("Roll back in generateRepySchedule: ").append(e1).toString());
        e1.printStackTrace();
      }
      e.printStackTrace();
    }
    finally
    {
      try {
        con.commit();
        cst = null;
        con.close();
        dealId = null;
        makerId = null;
      }
      catch (SQLException e) {
        e.printStackTrace();
      }
    }

    return procval;
  }

  public ArrayList getFromLoanDtlInDeal(String dealId)
  {
    ArrayList list = new ArrayList();

    logger.info("In getFromLoanDtlInDeal: ");

    ArrayList mainlist = new ArrayList();
    ArrayList subList = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select DEAL_RATE_METHOD,DEAL_FLAT_RATE,DEAL_EFF_RATE,DEAL_IRR1,DEAL_IRR2, UPFRONT_ROUNDING_AMOUNT  from cr_deal_loan_dtl where DEAL_ID=").append(dealId).toString());

      logger.info(new StringBuilder().append("Query in getFromLoanDtlInDeal-----").append(query).toString());
      StringBuilder bussIrrQ = new StringBuilder();
      bussIrrQ.append(new StringBuilder().append("select DEAL_BUSINESS_IRR from cr_deal_loan_dtl where DEAL_ID=(select LOAN_DEAL_ID from cr_loan_dtl where LOAN_ID=").append(dealId).append(")").toString());
      logger.info(new StringBuilder().append("Query in getFromLoanDtlInDeal--DEAL_BUSINESS_IRR---").append(bussIrrQ).toString());
      String bussIrr = ConnectionDAO.singleReturn(bussIrrQ.toString());
      logger.info(new StringBuilder().append("Query in getFromLoanDtlInDeal--bussIrr---").append(bussIrr).toString());
      mainlist = ConnectionDAO.sqlSelect(query.toString());

      query = null;
      bussIrrQ = null;

      for (int i = 0; i < mainlist.size(); i++)
      {
        subList = (ArrayList)mainlist.get(i);
        RepayScheduleVo repvo = new RepayScheduleVo();
        if (subList.size() > 0)
        {
          repvo.setLoanRateMethod(CommonFunction.checkNull(subList.get(0)).trim());
          if (!CommonFunction.checkNull(subList.get(1)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(1)).trim());
            repvo.setFinalRate(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(subList.get(2)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(2)).trim());
            repvo.setEffectiveRate(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(subList.get(3)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(3)).trim());
            repvo.setMktIRR1(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(subList.get(4)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(4)).trim());
            repvo.setMktIRR2(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(subList.get(5)).trim().equalsIgnoreCase(""))
          {
            Number UPFRONT_ROUNDING_AMOUNT = this.myFormatter.parse(CommonFunction.checkNull(subList.get(5)).trim());
            repvo.setUpfrontRoundingAmount(this.myFormatter.format(UPFRONT_ROUNDING_AMOUNT));
          }
          else {
            repvo.setUpfrontRoundingAmount("0.00");
          }

          if (CommonFunction.checkNull(subList.get(0)).trim().equalsIgnoreCase("E"))
          {
            repvo.setFinalRate("");
          }
          repvo.setBussIrr(bussIrr);
        }

        list.add(repvo);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      dealId = null;
    }

    return list;
  }

  public ArrayList getRepaySchedInDeal(String dealId)
  {
    ArrayList list = new ArrayList();

    logger.info("In getRepaySched: ");

    ArrayList mainlist = new ArrayList();
    ArrayList subList = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select INSTL_NO,DATE_FORMAT(INSTL_DATE,'").append(this.dateFormat).append("'),INSTL_AMOUNT,PRIN_COMP,INT_COMP,EXCESS_INT,").append(" if(ADV_FLAG='Y','YES','NO'),PRIN_OS,OTHER_CHARGES,vat_amount, service_amount from cr_deal_repaysch_dtl where DEAL_ID=").append(dealId).toString());

      logger.info(new StringBuilder().append("Query in getRepaySched-----").append(query).toString());
      mainlist = ConnectionDAO.sqlSelect(query.toString());

      query = null;

      for (int i = 0; i < mainlist.size(); i++) {
        subList = (ArrayList)mainlist.get(i);
        RepayScheduleVo repvo = new RepayScheduleVo();
        if (subList.size() > 0)
        {
          repvo.setInstNo(CommonFunction.checkNull(subList.get(0)).trim());
          repvo.setDueDate(CommonFunction.checkNull(subList.get(1)).trim());

          if (!CommonFunction.checkNull(subList.get(2)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(2)).trim());
            repvo.setInstAmount(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(subList.get(3)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(3)).trim());
            repvo.setPrinciple(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(subList.get(4)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(4)).trim());
            repvo.setInstCom(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(subList.get(5)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(5)).trim());
            repvo.setExcess(this.myFormatter.format(reconNum));
          }

          repvo.setAdvFlag(CommonFunction.checkNull(subList.get(6)).trim());
          if (!CommonFunction.checkNull(subList.get(7)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(7)).trim());
            repvo.setPrinOS(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(subList.get(8)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(8)).trim());
            repvo.setOtherCharges(this.myFormatter.format(reconNum));
          }
          else
          {
            repvo.setOtherCharges("0.00");
          }

          if (!CommonFunction.checkNull(subList.get(9)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(9)).trim());
            repvo.setVatAmount(this.myFormatter.format(reconNum));
          }
          else
          {
            repvo.setVatAmount("0.00");
          }
          if (!CommonFunction.checkNull(subList.get(10)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(10)).trim());
            repvo.setServiceAmount(this.myFormatter.format(reconNum));
          }
          else
          {
            repvo.setServiceAmount("0.00");
          }

        }

        list.add(repvo);
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public ArrayList<Object> getDealCatList()
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append("SELECT M.VALUE,M.DESCRIPTION FROM generic_master M,generic_master_keys K WHERE K.GENERIC_KEY='DEAL_CATEGORY' AND K.GENERIC_KEY=M.GENERIC_KEY and m.REC_STATUS='A'");
      logger.info(new StringBuilder().append("getDealCatList").append(query).toString());
      CodeDescVo vo = null;
      ArrayList source = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getDealCatList").append(source.size()).toString());
      query = null;

      for (int i = 0; i < source.size(); i++)
      {
        logger.info(new StringBuilder().append("getDealCatList").append(source.get(i).toString()).toString());
        ArrayList subsource = (ArrayList)source.get(i);
        if (subsource.size() > 0)
        {
          logger.info(new StringBuilder().append("getDealCatList").append(subsource.size()).toString());
          vo = new CodeDescVo();
          vo.setId(CommonFunction.checkNull(subsource.get(0)).trim());
          vo.setName(CommonFunction.checkNull(subsource.get(1)).trim());
          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public boolean deleteApplDocs(String dealId, String[] dealLoanId)
  {
    logger.info(new StringBuilder().append("deleteApplDocs for deleteApplDocs....dealLoanId..").append(dealLoanId).append(" dealId ").append(dealId).toString());
    boolean status = false;
    try
    {
      this.qryList = new ArrayList();
      this.bufInsUpdSql = new StringBuffer();

      for (int k = 0; k < dealLoanId.length; k++)
      {
        StringBuilder deleteChatge = new StringBuilder();
        deleteChatge.append(new StringBuilder().append("delete from cr_document_dtl where TXN_TYPE='DC' AND STAGE_ID='PRS' AND DOC_TYPE='APPL' AND  TXNID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append(" and ENTITY_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
        logger.info(new StringBuilder().append("delete query:deleteChatge ").append(deleteChatge).toString());
        this.qryList.add(deleteChatge);

        deleteChatge = null;
      }

      status = ConnectionDAO.sqlInsUpdDelete(this.qryList);
      logger.info(new StringBuilder().append("Status of Deletion is =").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return status;
  }

  public boolean deleteCollateralAssetDocs(String CommonId, String[] assetId, String[] type, String tabType)
  {
    logger.info(new StringBuilder().append("deleteApplDocs for deleteApplDocs....asset id..").append(assetId).append(" dealId/LOANiD ").append(CommonId).append(" type: ").append(type).append("From deal/loan stage: ").append(tabType).toString());
    boolean status = false;
    try
    {
      this.qryList = new ArrayList();
      this.bufInsUpdSql = new StringBuffer();

      for (int k = 0; k < assetId.length; k++)
      {
        if (tabType.equalsIgnoreCase("D"))
        {
          StringBuilder deleteCharge = new StringBuilder();
          deleteCharge.append(new StringBuilder().append("delete from cr_document_dtl where TXN_TYPE='DC' AND STAGE_ID='PRS' AND DOC_TYPE='").append(type[k]).append("' AND  TXNID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(CommonId)).trim()).append(" and ENTITY_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(assetId[k])).trim()).toString());
          logger.info(new StringBuilder().append("delete query:deletedocs/Deal Stage ").append(deleteCharge).toString());
          this.qryList.add(deleteCharge);

          deleteCharge = null;
        }
        else if (tabType.equalsIgnoreCase("L"))
        {
          StringBuilder updatePrsDocs = new StringBuilder();
          updatePrsDocs.append(new StringBuilder().append("update cr_document_dtl set rec_status='X' where TXN_TYPE='DC' AND STAGE_ID='PRS' AND  TXNID=(select DISTINCT LOAN_DEAL_ID from cr_loan_dtl where loan_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(CommonId)).trim()).append("') and ENTITY_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(assetId[k])).trim()).append("'").toString());
          logger.info(new StringBuilder().append("updatePrsDocs/Loan satge ").append(updatePrsDocs).toString());
          this.qryList.add(updatePrsDocs);

          StringBuilder deleteCharge = new StringBuilder();
          deleteCharge.append(new StringBuilder().append("delete from cr_document_dtl where TXN_TYPE='LIM' AND STAGE_ID='PRD' AND  TXNID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(CommonId)).trim()).append(" and ENTITY_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(assetId[k])).trim()).toString());
          logger.info(new StringBuilder().append("delete query:deletedocs/Loan satge ").append(deleteCharge).toString());
          this.qryList.add(deleteCharge);

          deleteCharge = null;
        }

      }

      status = ConnectionDAO.sqlInsUpdDelete(this.qryList);
      logger.info(new StringBuilder().append("Status of Deletion is =").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return status;
  }

  public int dealExisForBuySupp(BuyerVo sh)
  {
    int count = 0;
    String countStr = "";
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select count(1) from cr_deal_buyer_supplier_dtl where deal_id='").append(sh.getDealId()).append("'").toString());
      logger.info(new StringBuilder().append("dealExisForBuySupp").append(query).toString());
      countStr = ConnectionDAO.singleReturn(query.toString());
      logger.info(new StringBuilder().append(countStr).append("-----countStr").toString());

      count = Integer.parseInt(countStr);
      logger.info(new StringBuilder().append(count).append("-----count").toString());
      query = null;
    } catch (Exception e) {
      e.printStackTrace();
    }

    return count;
  }

  public boolean forwardDealforbuySupp(BuyerVo sh)
  {
    ArrayList qryList = new ArrayList();
    logger.info("forwardDealforbuySupp");
    boolean status = false;
    try
    {
      StringBuilder updateDeal = new StringBuilder();
      updateDeal.append(new StringBuilder().append("update cr_deal_buyer_supplier_dtl set REC_STATUS='A' where deal_id='").append(sh.getDealId()).append("'").toString());
      logger.info(new StringBuilder().append("updateDeal query-------- ").append(updateDeal.toString()).toString());
      qryList.add(updateDeal);

      StringBuilder updateOtherQuery = new StringBuilder();
      updateOtherQuery.append(new StringBuilder().append("update cr_deal_other_relation_dtl set REC_STATUS='A',AUTHOR_ID='").append(sh.getUserId()).append("',AUTHOR_DATE=DATE_ADD(STR_TO_DATE('").append(sh.getMakerDate()).append("', '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) where deal_id='").append(sh.getDealId()).append("'").toString());
      logger.info(new StringBuilder().append("updateOtherQuery-------- ").append(updateOtherQuery.toString()).toString());
      qryList.add(updateOtherQuery);

      status = ConnectionDAO.sqlInsUpdDelete(qryList);

      logger.info(new StringBuilder().append("Status of Deletion is =").append(status).toString());
      updateDeal = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return status;
  }

  public ArrayList retriveLeadInfoValues(String lbxLeadNo)
  {
    logger.info(new StringBuilder().append("lead Id in retriveLeadInfoValues ").append(lbxLeadNo).toString());
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select  ifnull(l.SOURCE_TYPE,''),ifnull(l.SOURCE_NAME,''),ifnull(l.SOURCE_CODE,''),ifnull(l.LEAD_SERVICING_RM,''),ifnull((SELECT A.USER_NAME FROM  sec_user_m A WHERE LEAD_SERVICING_RM=A.USER_ID),'')AS rmName,ifnull(l.AREA_CODE,''),ifnull((SELECT B.AREA_CODE_NAME FROM com_areacode_m B WHERE B.AREA_CODE=l.AREA_CODE),'')AS areaCodeName,ifnull(l.SOURCE,''),ifnull((SELECT distinct DESCRIPTION FROM generic_master WHERE VALUE=l.SOURCE and generic_key='SOURCE_TYPE'),'') DESCRIPTION,ifnull(l.SOURCE_DESCRIPTION,''),  CASE IFNULL(l.SOURCE_TYPE,'') WHEN 'RM' THEN  'RM / SALES EXEC' WHEN  'VENDOR' THEN 'DEALER' WHEN 'BRANCH' THEN 'TELECALLER' WHEN 'RO' THEN 'RM / SALES EXEC' WHEN 'OTHERS' THEN 'OTHERS' ELSE IFNULL(l.SOURCE_TYPE,'') END AS SOURCE_TYPE_DESC   from cr_lead_dtl l where l.REC_STATUS='A'  and LEAD_ID= ").append(lbxLeadNo).toString());

      logger.info(new StringBuilder().append("retriveLeadInfoValues :Query ").append(query).toString());
      LeadCaptureVo vo = null;
      ArrayList roleList = ConnectionDAO.sqlSelect(query.toString());

      logger.info(new StringBuilder().append("retriveLeadInfoValues ").append(roleList.size()).toString());

      query = null;

      for (int i = 0; i < roleList.size(); i++) {
        ArrayList data = (ArrayList)roleList.get(i);
        if (data.size() > 0)
        {
          vo = new LeadCaptureVo();

          vo.setSourceType(CommonFunction.checkNull(data.get(0)).toString());
          vo.setSourceName(CommonFunction.checkNull(data.get(1)).toString());
          vo.setSourceCode(CommonFunction.checkNull(data.get(2)).toString());
          vo.setDealRm(CommonFunction.checkNull(data.get(3)).toString());
          vo.setDealRmName(CommonFunction.checkNull(data.get(4)).toString());
          vo.setLbxareaCodeVal(CommonFunction.checkNull(data.get(5)).toString());
          vo.setAreaCodename(CommonFunction.checkNull(data.get(6)).toString());
          vo.setSource(CommonFunction.checkNull(data.get(7)).toString());
          vo.setLovSourceDes(CommonFunction.checkNull(data.get(8)).toString());
          vo.setSourcedesc(CommonFunction.checkNull(data.get(9)).toString());
          vo.setSourceTypeDesc(CommonFunction.checkNull(data.get(10)).toString());
          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public boolean saveBuyersupplierAuthorDetails(BuyerVo sh)
  {
    logger.info("saveBuyersupplierAuthorDetails");
    boolean status = false;
    StringBuilder query = new StringBuilder();
    try
    {
      this.qryList = new ArrayList();

      if (sh.getDecision().equalsIgnoreCase("A"))
      {
        query.append(new StringBuilder().append("update cr_deal_buyer_supplier_dtl set rec_status='A' where DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getDealId())).trim()).append("'").toString());
        this.qryList.add(query);
      }
      else {
        query.append(new StringBuilder().append("update cr_deal_buyer_supplier_dtl set rec_status='X' where DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sh.getDealId())).trim()).append("'").toString());
        this.qryList.add(query);
      }

      logger.info("delete query: ");

      status = ConnectionDAO.sqlInsUpdDelete(this.qryList);
      logger.info(new StringBuilder().append("Status of Deletion is =").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      query = null;
    }

    return status;
  }

  public ArrayList<FieldVerificationVo> searchDealDetailforBuyerSuppAuthor(FieldVerificationVo vo, HttpServletRequest request)
  {
    ArrayList list = new ArrayList();
    logger.info("In searchDealDetailforBuyerSuppAuthor");
    try
    {
      ArrayList header = null;
      int count = 0;
      int startRecordIndex = 0;
      int endRecordIndex = this.no;
      FieldVerificationVo fieldVo = vo;
      boolean appendSQL = false;

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      StringBuilder dealNo = new StringBuilder();
      StringBuilder appDate = new StringBuilder();
      StringBuilder custName = new StringBuilder();
      StringBuilder productId = new StringBuilder();
      StringBuilder schemeId = new StringBuilder();
      StringBuilder initDate = new StringBuilder();
      dealNo.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim());
      appDate.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationDate())).trim());
      custName.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomerName())).trim());
      productId.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim());
      schemeId.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim());
      initDate.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getInitiationDate())).trim());

      bufInsSql.append(new StringBuilder().append(" select distinct d.DEAL_ID,d.DEAL_NO,deal.CUSTOMER_NAME,DATE_FORMAT(d.MAKER_DATE,'").append(this.dateFormat).append("'),p.PRODUCT_DESC,s.SCHEME_DESC,").toString());
      bufInsSqlTempCount.append(" select distinct count(1) from (select distinct d.DEAL_ID,d.DEAL_NO,deal.CUSTOMER_NAME,d.MAKER_DATE,p.PRODUCT_DESC,s.SCHEME_DESC,");
      bufInsSql.append(new StringBuilder().append(" CASE WHEN d.REC_STATUS='F' THEN 'Pending' end as rsstatus,D.DEAL_RM,DATE_FORMAT(D.DEAL_DATE,'").append(this.dateFormat).append("')").toString());
      bufInsSqlTempCount.append(new StringBuilder().append(" CASE  WHEN d.REC_STATUS='F' THEN 'Pending' end as rsstatus,D.DEAL_RM,DATE_FORMAT(D.DEAL_DATE,'").append(this.dateFormat).append("')").toString());

      bufInsSql.append(" from cr_deal_dtl d left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID ");
      bufInsSqlTempCount.append(" from cr_deal_dtl d left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID ");
      bufInsSql.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
      bufInsSqlTempCount.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
      bufInsSql.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID Where d.REC_STATUS='F' and d.deal_id in(select DEAL_ID from cr_deal_buyer_supplier_dtl where rec_status='F') ");
      bufInsSqlTempCount.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID Where d.REC_STATUS='F' and d.deal_id in(select DEAL_ID from cr_deal_buyer_supplier_dtl where rec_status='F') ");

      if ((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")) && (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomerName()).trim()).equalsIgnoreCase("")) && (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")) && (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase("")) && (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getInitiationDate()).trim()).equalsIgnoreCase("")))
      {
        bufInsSqlTempCount.append(") as b");
      }

      if ((!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomerName()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getInitiationDate()).trim()).equalsIgnoreCase("")))
      {
        bufInsSql.append(new StringBuilder().append("WHERE d.DEAL_ID='").append(dealNo).append("' AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomerName()).trim()).append("%' AND p.PRODUCT_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND s.SCHEME_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' AND date(d.MAKER_DATE) =STR_TO_DATE('").append(StringEscapeUtils.escapeSql(vo.getInitiationDate()).trim()).append("','").append(this.dateFormat).append("')").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE d.DEAL_ID='").append(dealNo).append("' AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomerName()).trim()).append("%' AND p.PRODUCT_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND s.SCHEME_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' AND date(.MAKER_DATE) =STR_TO_DATE('").append(StringEscapeUtils.escapeSql(vo.getInitiationDate()).trim()).append("','").append(this.dateFormat).append("')) as b").toString());
      }

      if ((vo.getLbxDealNo().equalsIgnoreCase("")) || (vo.getCustomerName().equalsIgnoreCase("")) || (vo.getLbxProductID().equalsIgnoreCase("")) || (vo.getLbxscheme().equalsIgnoreCase("")) || (vo.getInitiationDate().equalsIgnoreCase(""))) {
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND d.DEAL_ID='").append(dealNo).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND d.DEAL_ID='").append(dealNo).append("' ").toString());
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getInitiationDate())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND date(d.MAKER_DATE) =STR_TO_DATE('").append(StringEscapeUtils.escapeSql(vo.getInitiationDate()).trim()).append("','").append(this.dateFormat).append("') ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND date(d.MAKER_DATE) =STR_TO_DATE('").append(StringEscapeUtils.escapeSql(vo.getInitiationDate()).trim()).append("','").append(this.dateFormat).append("') ").toString());
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomerName())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomerName()).trim()).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomerName()).trim()).append("%'").toString());
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND p.PRODUCT_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND p.PRODUCT_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'").toString());
        appendSQL = true;
      }
      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND s.SCHEME_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND s.SCHEME_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("'").toString());
        appendSQL = true;
      }
      if ((!vo.getLbxDealNo().equalsIgnoreCase("")) || (!vo.getCustomerName().equalsIgnoreCase("")) || (!vo.getLbxProductID().equalsIgnoreCase("")) || (!vo.getLbxscheme().equalsIgnoreCase("")) || (!vo.getInitiationDate().equalsIgnoreCase(""))) {
        bufInsSqlTempCount.append(") as b");
        appendSQL = true;
      }
      count = Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
      logger.info(new StringBuilder().append("bufInsSqlTempCount : ").append(bufInsSqlTempCount.toString()).toString());
      if (((dealNo.toString().trim() == null) && (appDate.toString().trim() == null) && (custName.toString().trim() == null) && (productId.toString().trim() == null) && (schemeId.toString().trim() == null)) || ((dealNo.toString().trim().equalsIgnoreCase("")) && (appDate.toString().trim().equalsIgnoreCase("")) && (custName.toString().trim().equalsIgnoreCase("")) && (productId.toString().trim().equalsIgnoreCase("")) && (schemeId.toString().trim().equalsIgnoreCase(""))) || (fieldVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(fieldVo.getCurrentPageLink()).toString());
        if (fieldVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (fieldVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      header = ConnectionDAO.sqlSelect(bufInsSql.toString());

      for (int i = 0; i < header.size(); i++)
      {
        ArrayList header1 = (ArrayList)header.get(i);
        if ((header1 != null) && (header1.size() > 0))
        {
          fieldVo = new FieldVerificationVo();

          fieldVo.setLbxDealNo(CommonFunction.checkNull(header1.get(0)).trim());
          fieldVo.setDealNo(new StringBuilder().append("<a href=\"#\" onclick=\"modifyBuyerSupplierAuthor('").append(CommonFunction.checkNull(header1.get(0)).trim()).append("','").append(CommonFunction.checkNull(header1.get(1)).trim()).append("','").append(CommonFunction.checkNull(header1.get(2)).trim()).append("'").append(",'").append(CommonFunction.checkNull(header1.get(8)).trim()).append("','").append(CommonFunction.checkNull(header1.get(7)).trim()).append("');\" >").append(CommonFunction.checkNull(header1.get(1)).trim()).append("</a>").toString());

          fieldVo.setCustomerName(CommonFunction.checkNull(header1.get(2)).trim());
          fieldVo.setInitiationDate(CommonFunction.checkNull(header1.get(3)).trim());
          fieldVo.setProduct(CommonFunction.checkNull(header1.get(4)).trim());
          fieldVo.setScheme(CommonFunction.checkNull(header1.get(5)).trim());
          fieldVo.setStatus(CommonFunction.checkNull(header1.get(6)).trim());
          fieldVo.setDealDate(CommonFunction.checkNull(header1.get(8)).trim());
          fieldVo.setRmName(CommonFunction.checkNull(header1.get(7)).trim());
          fieldVo.setReportingToUserId(CommonFunction.checkNull(header1.get(9)).trim());
          fieldVo.setTotalRecordSize(count);
          list.add(fieldVo);
        }
      }

      if (header.size() == 0)
      {
        request.setAttribute("flag", "yes");
      }

      logger.info(new StringBuilder().append("getTotalRecordSize : ").append(fieldVo.getTotalRecordSize()).toString());

      dealNo = null;
      appDate = null;
      custName = null;
      productId = null;
      schemeId = null;
      initDate = null;
      bufInsSql = null;
      bufInsSqlTempCount = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    logger.info(new StringBuilder().append("Detail List when searchList is : ").append(list.size()).toString());

    return list;
  }

  public ArrayList<FieldVerificationVo> searchDealDetailforBuyerSupp(FieldVerificationVo vo, HttpServletRequest request)
  {
    ArrayList list = new ArrayList();
    logger.info("In searchDealDetailforBuyerSupp");
    try
    {
      ArrayList header = null;
      int count = 0;
      int startRecordIndex = 0;
      int endRecordIndex = this.no;

      FieldVerificationVo fieldVo = vo;
      FieldVerificationVo fieldVo1 = vo;
      boolean appendSQL = false;

      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      StringBuilder dealNo = new StringBuilder();
      StringBuilder appDate = new StringBuilder();
      StringBuilder custName = new StringBuilder();
      StringBuilder productId = new StringBuilder();
      StringBuilder schemeId = new StringBuilder();
      StringBuilder initDate = new StringBuilder();

      dealNo.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim());
      logger.info(new StringBuilder().append("dealNo").append(dealNo).toString());
      appDate.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationDate())).trim());
      custName.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomerName())).trim());
      productId.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim());
      schemeId.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim());
      initDate.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getInitiationDate())).trim());

      bufInsSql.append(new StringBuilder().append(" select distinct d.DEAL_ID,d.DEAL_NO,deal.CUSTOMER_NAME,DATE_FORMAT(d.MAKER_DATE,'").append(this.dateFormat).append("'),p.PRODUCT_DESC,s.SCHEME_DESC,").toString());
      bufInsSqlTempCount.append(" select distinct count(1) from (select distinct d.DEAL_ID,d.DEAL_NO,deal.CUSTOMER_NAME,d.MAKER_DATE,p.PRODUCT_DESC,s.SCHEME_DESC,");

      bufInsSql.append(new StringBuilder().append(" CASE WHEN d.REC_STATUS='F' and bs.rec_status='P'  THEN 'In Process' WHEN d.REC_STATUS='F'  THEN 'Pending' end as rsstatus,D.DEAL_RM,DATE_FORMAT(D.DEAL_DATE,'").append(this.dateFormat).append("')").toString());
      bufInsSqlTempCount.append(new StringBuilder().append(" CASE WHEN d.REC_STATUS='F' and bs.rec_status='P'  THEN 'In Process' WHEN d.REC_STATUS='F'  THEN 'Pending' end as rsstatus,D.DEAL_RM,DATE_FORMAT(D.DEAL_DATE,'").append(this.dateFormat).append("')").toString());

      bufInsSql.append(" ,(SELECT USER_NAME FROM SEC_USER_M WHERE if((d.REC_STATUS='F' and bs.rec_status='P'),USER_ID=BS.MAKER_ID,USER_ID=d.MAKER_ID)) MAKER_ID");
      bufInsSqlTempCount.append(" ,(SELECT USER_NAME FROM SEC_USER_M WHERE if((d.REC_STATUS='F' and bs.rec_status='P'),USER_ID=BS.MAKER_ID,USER_ID=d.MAKER_ID)) MAKER_ID");

      bufInsSql.append(" from cr_deal_dtl d left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID ");
      bufInsSqlTempCount.append(" from cr_deal_dtl d left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID ");
      bufInsSql.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
      bufInsSqlTempCount.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");

      bufInsSql.append(" INNER JOIN cr_deal_movement_dtl M ON M.DEAL_ID=D.DEAL_ID AND M.DEAL_STAGE_ID='BSA' AND M.DEAL_RECEIVED<>'0000-00-00 00:00:00' AND M.DEAL_FORWARDED='0000-00-00 00:00:00' AND M.REC_STATUS='A'  ");
      bufInsSqlTempCount.append(" INNER JOIN cr_deal_movement_dtl M ON M.DEAL_ID=D.DEAL_ID AND M.DEAL_STAGE_ID='BSA' AND M.DEAL_RECEIVED<>'0000-00-00 00:00:00' AND M.DEAL_FORWARDED='0000-00-00 00:00:00' AND M.REC_STATUS='A' ");

      bufInsSql.append(new StringBuilder().append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID left join cr_deal_buyer_supplier_dtl bs on bs.deal_id=d.deal_id Where d.REC_STATUS='F' and d.deal_id not in(select DEAL_ID from cr_deal_buyer_supplier_dtl where rec_status='A') AND if(IFNULL(bs.rec_status,'X')='P',BS.MAKER_ID='").append(StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()).append("',true) AND D.DEAL_BRANCH='").append(vo.getBranchId()).append("'").toString());
      bufInsSqlTempCount.append(new StringBuilder().append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID left join cr_deal_buyer_supplier_dtl bs on bs.deal_id=d.deal_id Where d.REC_STATUS='F' and d.deal_id not in(select DEAL_ID from cr_deal_buyer_supplier_dtl where rec_status='A') AND if(IFNULL(bs.rec_status,'X')='P',BS.MAKER_ID='").append(StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()).append("',true) AND D.DEAL_BRANCH='").append(vo.getBranchId()).append("'").toString());

      if ((StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")) && (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomerName()).trim()).equalsIgnoreCase("")) && (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")) && (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase("")) && (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getInitiationDate()).trim()).equalsIgnoreCase("")))
      {
        bufInsSqlTempCount.append(") as b");
      }

      if ((!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomerName()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getInitiationDate()).trim()).equalsIgnoreCase("")))
      {
        bufInsSql.append(new StringBuilder().append("WHERE d.DEAL_ID='").append(dealNo).append("' AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomerName()).trim()).append("%' AND p.PRODUCT_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND s.SCHEME_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' AND date(d.MAKER_DATE) =STR_TO_DATE('").append(StringEscapeUtils.escapeSql(vo.getInitiationDate()).trim()).append("','").append(this.dateFormat).append("')").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE d.DEAL_ID='").append(dealNo).append("' AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomerName()).trim()).append("%' AND p.PRODUCT_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND s.SCHEME_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' AND date(d.MAKER_DATE) =STR_TO_DATE('").append(StringEscapeUtils.escapeSql(vo.getInitiationDate()).trim()).append("','").append(this.dateFormat).append("')) as b").toString());
      }

      if ((vo.getLbxDealNo().equalsIgnoreCase("")) || (vo.getCustomerName().equalsIgnoreCase("")) || (vo.getLbxProductID().equalsIgnoreCase("")) || (vo.getLbxscheme().equalsIgnoreCase("")) || (vo.getInitiationDate().equalsIgnoreCase(""))) {
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND d.DEAL_ID='").append(dealNo).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND d.DEAL_ID='").append(dealNo).append("' ").toString());
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getInitiationDate())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND date(d.MAKER_DATE) =STR_TO_DATE('").append(StringEscapeUtils.escapeSql(vo.getInitiationDate()).trim()).append("','").append(this.dateFormat).append("') ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND date(d.MAKER_DATE) =STR_TO_DATE('").append(StringEscapeUtils.escapeSql(vo.getInitiationDate()).trim()).append("','").append(this.dateFormat).append("') ").toString());
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomerName())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomerName()).trim()).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomerName()).trim()).append("%'").toString());
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND p.PRODUCT_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND p.PRODUCT_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'").toString());
        appendSQL = true;
      }
      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" AND s.SCHEME_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND s.SCHEME_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("'").toString());
        appendSQL = true;
      }

      if ((!vo.getLbxDealNo().equalsIgnoreCase("")) || (!vo.getCustomerName().equalsIgnoreCase("")) || (!vo.getLbxProductID().equalsIgnoreCase("")) || (!vo.getLbxscheme().equalsIgnoreCase("")) || (!vo.getInitiationDate().equalsIgnoreCase(""))) {
        bufInsSqlTempCount.append(") as b");
        appendSQL = true;
      }
      count = Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
      logger.info(new StringBuilder().append("bufInsSqlTempCount : ").append(bufInsSqlTempCount.toString()).toString());
      if (((dealNo.toString().trim() == null) && (appDate.toString().trim() == null) && (custName.toString().trim() == null) && (productId.toString().trim() == null) && (schemeId.toString().trim() == null)) || ((dealNo.toString().trim().equalsIgnoreCase("")) && (appDate.toString().trim().equalsIgnoreCase("")) && (custName.toString().trim().equalsIgnoreCase("")) && (productId.toString().trim().equalsIgnoreCase("")) && (schemeId.toString().trim().equalsIgnoreCase(""))) || (fieldVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(fieldVo.getCurrentPageLink()).toString());
        if (fieldVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (fieldVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      header = ConnectionDAO.sqlSelect(bufInsSql.toString());

      for (int i = 0; i < header.size(); i++)
      {
        ArrayList header1 = (ArrayList)header.get(i);
        if ((header1 != null) && (header1.size() > 0))
        {
          fieldVo1 = new FieldVerificationVo();

          fieldVo1.setLbxDealNo(CommonFunction.checkNull(header1.get(0)).trim());
          fieldVo1.setDealNo(new StringBuilder().append("<a href=\"#\" onclick=\"modifyBuyerSupplier('").append(CommonFunction.checkNull(header1.get(0)).trim()).append("');\" >").append(CommonFunction.checkNull(header1.get(1)).trim()).append("</a>").toString());

          fieldVo1.setCustomerName(CommonFunction.checkNull(header1.get(2)).trim());
          fieldVo1.setInitiationDate(CommonFunction.checkNull(header1.get(3)).trim());
          fieldVo1.setProduct(CommonFunction.checkNull(header1.get(4)).trim());
          fieldVo1.setScheme(CommonFunction.checkNull(header1.get(5)).trim());
          fieldVo1.setStatus(CommonFunction.checkNull(header1.get(6)).trim());
          fieldVo1.setDealDate(CommonFunction.checkNull(header1.get(8)).trim());
          fieldVo1.setRmName(CommonFunction.checkNull(header1.get(7)).trim());
          fieldVo1.setReportingToUserId(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(header1.get(9))).trim());
          fieldVo1.setTotalRecordSize(count);
          list.add(fieldVo1);
        }
      }
      logger.info(new StringBuilder().append("header.size() : ").append(header.size()).toString());
      if (header.size() == 0)
      {
        logger.info(new StringBuilder().append("header.size() 1: ").append(header.size()).toString());

        request.setAttribute("flag", "yes");
      }

      logger.info(new StringBuilder().append("getTotalRecordSize : ").append(fieldVo.getTotalRecordSize()).toString());

      dealNo = null;
      appDate = null;
      custName = null;
      productId = null;
      schemeId = null;
      initDate = null;
      bufInsSql = null;
      bufInsSqlTempCount = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return list;
  }

  public ArrayList getDealMovementDetail(String txnid, String userId)
  {
    logger.info(new StringBuilder().append("In getDealMovementDetail......Dao Impl").append(txnid).toString());
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(" select s.STAGE_DESC,case when b.DEAL_FORWARDED<>'00-00-0000 00:00' and ifnull(b.DEAL_FORWARD_USER,'')<>'' THEN 'COMPLETED'");
      query.append(" when b.DEAL_FORWARDED='00-00-0000 00:00' and ifnull(b.DEAL_FORWARD_USER,'')='' then 'INITIATED' when b.DEAL_ACTION is null then 'PENDING' end as 'Deal Action',");
      query.append(new StringBuilder().append(" DATE_FORMAT(b.DEAL_RECEIVED,'").append(this.dateFormatWithTime).append("'),DATE_FORMAT(b.DEAL_FORWARDED,'").append(this.dateFormatWithTime).append("'), b.DEAL_FORWARD_USER,b.DEAL_RECEIVED_USER,b.DEAL_MOVEMENT_ID STAGE_SEQ_NO").toString());
      query.append(" from cr_deal_movement_dtl b");
      query.append(new StringBuilder().append(" join cr_stage_m s on s.STAGE_ID=b.DEAL_STAGE_ID AND b.deal_id='").append(CommonFunction.checkNull(txnid).trim()).append("' and b.rec_status='A'").toString());
      query.append(" ORDER BY b.DEAL_MOVEMENT_ID");

      logger.info(new StringBuilder().append("In getDealMovementDetail   :  ").append(query).toString());
      DealMovementVo vo = null;
      ArrayList dealMovement = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getDealMovementDetail ").append(dealMovement.size()).toString());
      query = null;
      for (int i = 0; i < dealMovement.size(); i++)
      {
        ArrayList data = (ArrayList)dealMovement.get(i);
        if (data.size() > 0)
        {
          vo = new DealMovementVo();
          vo.setSeqNo(new StringBuilder().append(i + 1).append("").toString());
          vo.setStage(CommonFunction.checkNull(data.get(0)).trim());
          vo.setAction(CommonFunction.checkNull(data.get(1)));
          vo.setDealReceived(CommonFunction.checkNull(data.get(2)).trim());
          vo.setDealForwarded(CommonFunction.checkNull(data.get(3)).trim());
          vo.setDealForwardedUser(CommonFunction.checkNull(data.get(4)).trim());
          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList<Object> docUploadedDetailInSearch(CommonDealVo vo, HttpServletRequest request)
  {
    ArrayList list = new ArrayList();

    ArrayList header = null;
    ArrayList header1 = null;
    StringBuilder bufInsSql = new StringBuilder();
    StringBuilder bufInsSqlTempCount = new StringBuilder();
    CommonDealVo fetchVo = vo;
    try
    {
      logger.info(new StringBuilder().append("here userid++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ").append(vo.getReportingToUserId()).toString());
      String userNameQ = new StringBuilder().append("select USER_NAME from sec_user_m where REC_STATUS='A' and USER_ID='").append(vo.getReportingToUserId()).append("'").toString();
      String userName = ConnectionDAO.singleReturn(userNameQ);
      logger.info(new StringBuilder().append("userNameQ: ").append(userNameQ).append(" userName: ").append(userName).toString());
      logger.info("docUploadedDetailInSearch");

      userNameQ = null;
      int count = 0;
      int startRecordIndex = 0;
      int endRecordIndex = this.no;

      boolean appendSQL = false;

      StringBuilder dealId = new StringBuilder();
      StringBuilder appNo = new StringBuilder();
      StringBuilder appDate = new StringBuilder();
      StringBuilder custName = new StringBuilder();
      StringBuilder productId = new StringBuilder();

      dealId.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim());
      appNo.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim());
      appDate.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim());
      custName.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim());
      productId.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim());

      bufInsSql.append(new StringBuilder().append(" select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,DATE_FORMAT(DEAL_DATE,'").append(this.dateFormat).append("'),deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC from cr_deal_dtl d").toString());
      bufInsSqlTempCount.append(new StringBuilder().append(" select distinct count(1) FROM (select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,DATE_FORMAT(DEAL_DATE,'").append(this.dateFormat).append("'),deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC from cr_deal_dtl d ").toString());
      bufInsSql.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
      bufInsSqlTempCount.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
      bufInsSql.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
      bufInsSqlTempCount.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
      bufInsSql.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
      bufInsSqlTempCount.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
      bufInsSql.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
      bufInsSqlTempCount.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
      bufInsSql.append(" left join cr_uploaded_documents U on d.DEAL_ID=U.TXN_ID and TXN_TYPE='DC'  ");
      bufInsSqlTempCount.append(" left join cr_uploaded_documents U on d.DEAL_ID=U.TXN_ID and TXN_TYPE='DC' ");

      bufInsSql.append(" LEFT JOIN cr_deal_movement_dtl M ON M.DEAL_ID=D.DEAL_ID AND M.DEAL_FORWARDED<>'0000-00-00 00:00:00' AND DEAL_STAGE_ID='DC' AND M.REC_STATUS='A' ");
      bufInsSqlTempCount.append(" LEFT JOIN cr_deal_movement_dtl M ON M.DEAL_ID=D.DEAL_ID AND M.DEAL_FORWARDED<>'0000-00-00 00:00:00' AND DEAL_STAGE_ID='DC' AND M.REC_STATUS='A' ");

      if ((!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim().equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase("")))
      {
        bufInsSql.append(new StringBuilder().append("WHERE    d.DEAL_BRANCH='").append(StringEscapeUtils.escapeSql(vo.getBranchId()).trim()).append("' and d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' AND d.DEAL_APPLICATION_FORM_NO='").append(StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()).append("' AND date(d.DEAL_DATE) =STR_TO_DATE('").append(StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()).append("','").append(this.dateFormat).append("') AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' AND d.Rec_status='F'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE   d.DEAL_BRANCH='").append(StringEscapeUtils.escapeSql(vo.getBranchId()).trim()).append("' and d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' AND d.DEAL_APPLICATION_FORM_NO='").append(StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()).append("' AND date(d.DEAL_DATE) =STR_TO_DATE('").append(StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()).append("','").append(this.dateFormat).append("') AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' AND d.Rec_status='F'").toString());
      }

      if ((vo.getLbxDealNo().equalsIgnoreCase("")) || (vo.getApplicationno().equalsIgnoreCase("")) || (vo.getApplicationdate().equalsIgnoreCase("")) || (vo.getCustomername().equalsIgnoreCase("")) || (vo.getLbxProductID().equalsIgnoreCase("")) || (vo.getLbxscheme().equalsIgnoreCase("")) || (vo.getStage().equalsIgnoreCase(""))) {
        appendSQL = true;
      }

      if (appendSQL) {
        logger.info("In Where Clause");
        bufInsSql.append(new StringBuilder().append(" WHERE    d.DEAL_BRANCH='").append(StringEscapeUtils.escapeSql(vo.getBranchId()).trim()).append("' and d.Rec_status='F' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE  d.DEAL_BRANCH='").append(StringEscapeUtils.escapeSql(vo.getBranchId()).trim()).append("' and d.Rec_status='F' ").toString());
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' ").toString());
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND d.DEAL_APPLICATION_FORM_NO='").append(StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND d.DEAL_APPLICATION_FORM_NO='").append(StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()).append("' ").toString());
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND date(d.DEAL_DATE) =STR_TO_DATE('").append(StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()).append("','").append(this.dateFormat).append("') ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND date(d.DEAL_DATE) =STR_TO_DATE('").append(StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()).append("','").append(this.dateFormat).append("') ").toString());
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' ").toString());
        appendSQL = true;
      }
      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("' ").toString());
        appendSQL = true;
      }
      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
        appendSQL = true;
      }

      bufInsSqlTempCount.append(") as b");
      appendSQL = true;

      logger.info(new StringBuilder().append("bufInsSqlTempCount Query: ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));

      if (((dealId.toString().trim() == null) && (appNo.toString().trim() == null) && (appDate.toString().trim() == null) && (custName.toString().trim() == null) && (productId.toString().trim() == null)) || ((dealId.toString().trim().equalsIgnoreCase("")) && (appNo.toString().trim().equalsIgnoreCase("")) && (appDate.toString().trim().equalsIgnoreCase("")) && (custName.toString().trim().equalsIgnoreCase("")) && (productId.toString().trim().equalsIgnoreCase(""))) || (fetchVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(fetchVo.getCurrentPageLink()).toString());
        if (fetchVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (fetchVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      header = ConnectionDAO.sqlSelect(bufInsSql.toString());

      for (int i = 0; i < header.size(); i++)
      {
        if (header.size() > 0)
        {
          header1 = (ArrayList)header.get(i);
        }

        if ((header1 != null) && (header1.size() > 0))
        {
          fetchVo = new CommonDealVo();

          fetchVo.setLbxDealNo(new StringBuilder().append("<a href=underwritingDocUploadBehind.do?dealId=").append(CommonFunction.checkNull(header1.get(0)).trim()).append(">").append(CommonFunction.checkNull(header1.get(1)).trim()).append("</a>").toString());

          fetchVo.setDealNo(CommonFunction.checkNull(header1.get(1)).trim());
          fetchVo.setApplicationno(CommonFunction.checkNull(header1.get(2)).trim());
          fetchVo.setApplicationdate(CommonFunction.checkNull(header1.get(3)).trim());
          fetchVo.setCustomername(CommonFunction.checkNull(header1.get(4)).trim());

          fetchVo.setProduct(CommonFunction.checkNull(header1.get(5)).trim());
          fetchVo.setScheme(CommonFunction.checkNull(header1.get(6)).trim());
          fetchVo.setReportingToUserId(userName);
          fetchVo.setTotalRecordSize(count);

          list.add(fetchVo);
        }
      }

      logger.info(new StringBuilder().append("getTotalRecordSize : ").append(fetchVo.getTotalRecordSize()).toString());
      userName = null;

      dealId = null;
      appDate = null;
      custName = null;
      productId = null;
      appNo = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      fetchVo = null;
      header1 = null;
      header = null;
      bufInsSql = null;
      bufInsSqlTempCount = null;
    }
    logger.info(new StringBuilder().append("Detail List when searchList is : ").append(list).toString());
    return list;
  }

  public ArrayList<Object> docUploadedDetailInSearchForCm(CommonDealVo vo, HttpServletRequest request)
  {
    ArrayList list = new ArrayList();

    ArrayList header = null;
    ArrayList header1 = null;
    StringBuilder bufInsSql = new StringBuilder();
    StringBuilder bufInsSqlTempCount = new StringBuilder();
    CommonDealVo fetchVo = vo;
    try
    {
      logger.info(new StringBuilder().append("here userid++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ").append(vo.getReportingToUserId()).toString());
      String userNameQ = new StringBuilder().append("select USER_NAME from sec_user_m where REC_STATUS='A' and USER_ID='").append(vo.getReportingToUserId()).append("'").toString();
      String userName = ConnectionDAO.singleReturn(userNameQ);
      logger.info(new StringBuilder().append("userNameQ: ").append(userNameQ).append(" userName: ").append(userName).toString());
      logger.info("docUploadedDetailInSearchForCm");

      userNameQ = null;
      int count = 0;
      int startRecordIndex = 0;
      int endRecordIndex = this.no;

      boolean appendSQL = false;

      StringBuilder dealId = new StringBuilder();

      StringBuilder custName = new StringBuilder();
      StringBuilder productId = new StringBuilder();

      dealId.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim());

      custName.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim());
      productId.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim());

      bufInsSql.append(" select distinct cld.LOAN_ID,cld.LOAN_NO,cld.LOAN_REFERENCE_NO,cld.LOAN_PRODUCT,cld.LOAN_SCHEME,gcd.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC from cr_loan_dtl cld ");
      bufInsSqlTempCount.append(" select distinct count(1) FROM ( select distinct cld.LOAN_ID,cld.LOAN_NO,cld.LOAN_REFERENCE_NO,cld.LOAN_PRODUCT,cld.LOAN_SCHEME,gcd.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC from cr_loan_dtl cld ");
      bufInsSql.append(" left join cr_product_m p on cld.loan_product=p.PRODUCT_ID ");
      bufInsSqlTempCount.append(" left join cr_product_m p on cld.loan_product=p.PRODUCT_ID  ");
      bufInsSql.append(" left join gcd_customer_m gcd on gcd.CUSTOMER_ID=cld.loan_CUSTOMER_ID    ");
      bufInsSqlTempCount.append(" left join gcd_customer_m gcd on gcd.CUSTOMER_ID=cld.loan_CUSTOMER_ID  ");
      bufInsSql.append(" left join cr_scheme_m s on cld.loan_SCHEME=s.SCHEME_ID   ");
      bufInsSqlTempCount.append(" left join cr_scheme_m s on cld.loan_SCHEME=s.SCHEME_ID ");
      bufInsSql.append(" left join cr_uploaded_documents U on cld.LOAN_id=U.TXN_ID and TXN_TYPE='LIM'  ");
      bufInsSqlTempCount.append(" left join cr_uploaded_documents U on cld.LOAN_id=U.TXN_ID and TXN_TYPE='LIM' ");
      bufInsSql.append(" where  cld.REC_STATUS in('P','F','A','C')  ");
      bufInsSqlTempCount.append(" where cld.REC_STATUS in('P','F','A','C') ");

      if ((!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase("")))
      {
        bufInsSql.append(new StringBuilder().append("   cld.loan_BRANCH='").append(StringEscapeUtils.escapeSql(vo.getBranchId()).trim()).append("' and cld.LOAN_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' AND gcd.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' AND cld.LOAN_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND cld.LOAN_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" cld.loan_BRANCH='").append(StringEscapeUtils.escapeSql(vo.getBranchId()).trim()).append("' and cld.LOAN_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' AND gcd.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' AND cld.LOAN_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND cld.LOAN_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).toString());
      }

      if ((vo.getLbxDealNo().equalsIgnoreCase("")) || (vo.getApplicationno().equalsIgnoreCase("")) || (vo.getApplicationdate().equalsIgnoreCase("")) || (vo.getCustomername().equalsIgnoreCase("")) || (vo.getLbxProductID().equalsIgnoreCase("")) || (vo.getLbxscheme().equalsIgnoreCase("")) || (vo.getStage().equalsIgnoreCase(""))) {
        appendSQL = true;
      }

      if (appendSQL) {
        logger.info("In Where Clause");
        bufInsSql.append(new StringBuilder().append(" AND    cld.loan_BRANCH='").append(StringEscapeUtils.escapeSql(vo.getBranchId()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND    cld.loan_BRANCH='").append(StringEscapeUtils.escapeSql(vo.getBranchId()).trim()).append("' ").toString());
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND cld.LOAN_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND cld.LOAN_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' ").toString());
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND gcd.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND gcd.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' ").toString());
        appendSQL = true;
      }
      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND cld.LOAN_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND cld.LOAN_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("' ").toString());
        appendSQL = true;
      }
      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND cld.LOAN_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND cld.LOAN_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
        appendSQL = true;
      }

      bufInsSqlTempCount.append(") as b");
      appendSQL = true;

      logger.info(new StringBuilder().append("bufInsSqlTempCount Query: ").append(bufInsSqlTempCount.toString()).toString());

      count = Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));

      if (((dealId.toString().trim() == null) && (custName.toString().trim() == null) && (productId.toString().trim() == null)) || ((dealId.toString().trim().equalsIgnoreCase("")) && (custName.toString().trim().equalsIgnoreCase("")) && (productId.toString().trim().equalsIgnoreCase(""))) || (fetchVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(fetchVo.getCurrentPageLink()).toString());
        if (fetchVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (fetchVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      header = ConnectionDAO.sqlSelect(bufInsSql.toString());

      for (int i = 0; i < header.size(); i++)
      {
        if (header.size() > 0)
        {
          header1 = (ArrayList)header.get(i);
        }

        if ((header1 != null) && (header1.size() > 0))
        {
          fetchVo = new CommonDealVo();

          fetchVo.setLbxDealNo(new StringBuilder().append("<a href=underwritingDocUploadBehind.do?loanId=").append(CommonFunction.checkNull(header1.get(0)).trim()).append(">").append(CommonFunction.checkNull(header1.get(1)).trim()).append("</a>").toString());

          fetchVo.setDealNo(CommonFunction.checkNull(header1.get(1)).trim());
          fetchVo.setApplicationno(CommonFunction.checkNull(header1.get(2)).trim());

          fetchVo.setCustomername(CommonFunction.checkNull(header1.get(5)).trim());

          fetchVo.setProduct(CommonFunction.checkNull(header1.get(6)).trim());
          fetchVo.setScheme(CommonFunction.checkNull(header1.get(7)).trim());
          fetchVo.setReportingToUserId(userName);
          fetchVo.setTotalRecordSize(count);

          list.add(fetchVo);
        }
      }

      logger.info(new StringBuilder().append("getTotalRecordSize : ").append(fetchVo.getTotalRecordSize()).toString());
      userName = null;

      dealId = null;

      custName = null;
      productId = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      fetchVo = null;
      header1 = null;
      header = null;
      bufInsSql = null;
      bufInsSqlTempCount = null;
    }
    logger.info(new StringBuilder().append("Detail List when searchList is : ").append(list).toString());
    return list;
  }

  public ArrayList<Object> docUploadedDetailInSearchForLegal(CommonDealVo vo, HttpServletRequest request)
  {
    ArrayList list = new ArrayList();

    ArrayList header = null;
    ArrayList header1 = null;
    StringBuilder bufInsSql = new StringBuilder();
    StringBuilder bufInsSqlTempCount = new StringBuilder();
    CommonDealVo fetchVo = vo;
    try
    {
      logger.info("In docUploadedDetailInSearchForLegal");
      String userNameQ = new StringBuilder().append("select USER_NAME from sec_user_m where REC_STATUS='A' and USER_ID='").append(vo.getReportingToUserId()).append("'").toString();
      String userName = ConnectionDAO.singleReturn(userNameQ);
      logger.info(new StringBuilder().append("userNameQ: ").append(userNameQ).append(" userName: ").append(userName).toString());

      userNameQ = null;
      int count = 0;
      int startRecordIndex = 0;
      int endRecordIndex = this.no;

      boolean appendSQL = false;

      StringBuilder dealId = new StringBuilder();

      StringBuilder custName = new StringBuilder();
      StringBuilder productId = new StringBuilder();

      dealId.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim());

      custName.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim());
      productId.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim());

      bufInsSql.append(" select distinct cld.LOAN_ID,cld.LOAN_NO,cld.LOAN_REFERENCE_NO,cld.LOAN_PRODUCT,cld.LOAN_SCHEME,gcd.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC from cr_loan_dtl cld ");
      bufInsSqlTempCount.append(" select distinct count(1) FROM ( select distinct cld.LOAN_ID,cld.LOAN_NO,cld.LOAN_REFERENCE_NO,cld.LOAN_PRODUCT,cld.LOAN_SCHEME,gcd.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC from cr_loan_dtl cld ");
      bufInsSql.append(" left join cr_product_m p on cld.loan_product=p.PRODUCT_ID ");
      bufInsSqlTempCount.append(" left join cr_product_m p on cld.loan_product=p.PRODUCT_ID  ");
      bufInsSql.append(" left join gcd_customer_m gcd on gcd.CUSTOMER_ID=cld.loan_CUSTOMER_ID    ");
      bufInsSqlTempCount.append(" left join gcd_customer_m gcd on gcd.CUSTOMER_ID=cld.loan_CUSTOMER_ID  ");
      bufInsSql.append(" left join cr_scheme_m s on cld.loan_SCHEME=s.SCHEME_ID   ");
      bufInsSqlTempCount.append(" left join cr_scheme_m s on cld.loan_SCHEME=s.SCHEME_ID ");
      bufInsSql.append(" left join cr_uploaded_documents U on cld.LOAN_id=U.TXN_ID and TXN_TYPE='LIM'  ");
      bufInsSqlTempCount.append(" left join cr_uploaded_documents U on cld.LOAN_id=U.TXN_ID and TXN_TYPE='LIM' ");
      bufInsSql.append(" JOIN LEGAL_NOTICE_DTL LND ON CLD.LOAN_ID= LND.LOAN_NO ");
      bufInsSql.append(" where  cld.REC_STATUS in('P','F','A')  ");
      bufInsSqlTempCount.append(" JOIN LEGAL_NOTICE_DTL LND ON CLD.LOAN_ID= LND.LOAN_NO ");
      bufInsSqlTempCount.append(" where cld.REC_STATUS in('P','F','A') ");

      if ((!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase("")))
      {
        bufInsSql.append(new StringBuilder().append("   cld.loan_BRANCH='").append(StringEscapeUtils.escapeSql(vo.getBranchId()).trim()).append("' and cld.LOAN_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' AND gcd.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' AND cld.LOAN_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND cld.LOAN_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" cld.loan_BRANCH='").append(StringEscapeUtils.escapeSql(vo.getBranchId()).trim()).append("' and cld.LOAN_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' AND gcd.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' AND cld.LOAN_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND cld.LOAN_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).toString());
      }

      if ((vo.getLbxDealNo().equalsIgnoreCase("")) || (vo.getApplicationno().equalsIgnoreCase("")) || (vo.getApplicationdate().equalsIgnoreCase("")) || (vo.getCustomername().equalsIgnoreCase("")) || (vo.getLbxProductID().equalsIgnoreCase("")) || (vo.getLbxscheme().equalsIgnoreCase("")) || (vo.getStage().equalsIgnoreCase(""))) {
        appendSQL = true;
      }

      if (appendSQL) {
        logger.info("In Where Clause");
        bufInsSql.append(new StringBuilder().append(" AND    cld.loan_BRANCH='").append(StringEscapeUtils.escapeSql(vo.getBranchId()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND    cld.loan_BRANCH='").append(StringEscapeUtils.escapeSql(vo.getBranchId()).trim()).append("' ").toString());
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND cld.LOAN_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND cld.LOAN_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' ").toString());
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND gcd.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND gcd.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' ").toString());
        appendSQL = true;
      }
      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND cld.LOAN_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND cld.LOAN_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("' ").toString());
        appendSQL = true;
      }
      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND cld.LOAN_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND cld.LOAN_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
        appendSQL = true;
      }

      bufInsSqlTempCount.append(") as b");
      appendSQL = true;

      logger.info(new StringBuilder().append("In docUploadedDetailInSearchForLegal bufInsSqlTempCount Query: ").append(bufInsSqlTempCount.toString()).toString());

      count = Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));

      if (((dealId.toString().trim() == null) && (custName.toString().trim() == null) && (productId.toString().trim() == null)) || ((dealId.toString().trim().equalsIgnoreCase("")) && (custName.toString().trim().equalsIgnoreCase("")) && (productId.toString().trim().equalsIgnoreCase(""))) || (fetchVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(fetchVo.getCurrentPageLink()).toString());
        if (fetchVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (fetchVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      header = ConnectionDAO.sqlSelect(bufInsSql.toString());

      for (int i = 0; i < header.size(); i++)
      {
        if (header.size() > 0)
        {
          header1 = (ArrayList)header.get(i);
        }

        if ((header1 != null) && (header1.size() > 0))
        {
          fetchVo = new CommonDealVo();

          fetchVo.setLbxDealNo(new StringBuilder().append("<a href=underwritingDocUploadBehind.do?loanId=").append(CommonFunction.checkNull(header1.get(0)).trim()).append(">").append(CommonFunction.checkNull(header1.get(1)).trim()).append("</a>").toString());

          fetchVo.setDealNo(CommonFunction.checkNull(header1.get(1)).trim());
          fetchVo.setApplicationno(CommonFunction.checkNull(header1.get(2)).trim());

          fetchVo.setCustomername(CommonFunction.checkNull(header1.get(5)).trim());

          fetchVo.setProduct(CommonFunction.checkNull(header1.get(6)).trim());
          fetchVo.setScheme(CommonFunction.checkNull(header1.get(7)).trim());
          fetchVo.setReportingToUserId(userName);
          fetchVo.setTotalRecordSize(count);

          list.add(fetchVo);
        }
      }

      logger.info(new StringBuilder().append("getTotalRecordSize : ").append(fetchVo.getTotalRecordSize()).toString());
      userName = null;

      dealId = null;

      custName = null;
      productId = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      fetchVo = null;
      header1 = null;
      header = null;
      bufInsSql = null;
      bufInsSqlTempCount = null;
    }
    logger.info(new StringBuilder().append("Detail List when searchList is : ").append(list).toString());
    return list;
  }

  public ArrayList getworkFlowStage(String dealId, String funId)
  {
    ArrayList list = new ArrayList();
    try {
      int Id = 0;
      String qualityCheckStatus = "N";
      funId = CommonFunction.checkNull(funId).trim();
      if (CommonFunction.checkNull(funId).trim().equalsIgnoreCase(""))
        funId = "0";
      Id = Integer.parseInt(funId);
      if (Id != 4000103)
      {
        String qualityCheckStatusQuery = "SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='EDITABLE_QUALITY_CHECK_DEAL'";
        logger.info(new StringBuilder().append("In searchDealForQualityCheck()  :  ").append(qualityCheckStatusQuery).toString());
        qualityCheckStatus = ConnectionDAO.singleReturn(qualityCheckStatusQuery);
      }
      StringBuilder query = new StringBuilder();
      if ((CommonFunction.checkNull(qualityCheckStatus).equalsIgnoreCase("")) || (CommonFunction.checkNull(qualityCheckStatus).equalsIgnoreCase("N")))
      {
        query.append(new StringBuilder().append("SELECT DISTINCT W.STAGE_ID,S.STAGE_DESC FROM cr_stage_workflow_m W,cr_stage_m S WHERE W.STAGE_ID=S.STAGE_ID AND W.STAGE_ID NOT IN('QC','UNC')AND W.PRODUCT_ID=(select DEAL_PRODUCT_CATEGORY from cr_deal_loan_dtl where  DEAL_ID='").append(dealId).append("') AND S.REC_STATUS='A'").toString());
      }
      else
      {
        query.append(new StringBuilder().append("SELECT DISTINCT W.STAGE_ID,S.STAGE_DESC FROM cr_stage_workflow_m W,cr_stage_m S WHERE W.STAGE_ID=S.STAGE_ID AND W.STAGE_ID NOT IN('UNC')AND W.PRODUCT_ID=(select DEAL_PRODUCT_CATEGORY from cr_deal_loan_dtl where  DEAL_ID='").append(dealId).append("') AND S.REC_STATUS='A'").toString());
      }
      logger.info(new StringBuilder().append("query in getworkFlowStage:--").append(query.toString()).toString());
      ArrayList getworkFlowStage = ConnectionDAO.sqlSelect(query.toString());

      query = null;

      for (int i = 0; i < getworkFlowStage.size(); i++)
      {
        ArrayList data = (ArrayList)getworkFlowStage.get(i);
        if (data.size() > 0) {
          CodeDescVo branchVo = new CodeDescVo();
          branchVo.setId(CommonFunction.checkNull(data.get(0)).trim());
          branchVo.setName(CommonFunction.checkNull(data.get(1)).trim());
          list.add(branchVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getLoanTypeList()
  {
    ArrayList list = new ArrayList();
    try {
      logger.info("In getSourceDetailList..........................DAOImpl");
      StringBuilder query = new StringBuilder();

      query.append("SELECT M.VALUE,M.DESCRIPTION FROM generic_master M,generic_master_keys K WHERE K.GENERIC_KEY='LOAN_TYPE' AND K.GENERIC_KEY=M.GENERIC_KEY and m.REC_STATUS='A'");

      logger.info(new StringBuilder().append("In getSourceDetailList...............query...........DAOImpl").append(query).toString());
      LoanDetailVo loanVo = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());

      query = null;

      logger.info(new StringBuilder().append("getSourceDetailList ").append(product.size()).toString());
      for (int i = 0; i < product.size(); i++) {
        logger.info(new StringBuilder().append("getSourceDetailList...Outer FOR loop ").append(CommonFunction.checkNull(product.get(i)).toString()).toString());
        ArrayList data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          loanVo = new LoanDetailVo();
          loanVo.setLoanTypeID(CommonFunction.checkNull(data.get(0)).trim());
          loanVo.setLoanTypeName(CommonFunction.checkNull(data.get(1)).trim());
          list.add(loanVo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public ArrayList getAssetLoanDetailAmount(String dealId)
  {
    ArrayList list = new ArrayList();
    try
    {
      logger.info("In getAssetLoanDetailAmount()");
      StringBuilder query = new StringBuilder();

      query.append(new StringBuilder().append("select cr_product_m.REPAYMENT_TYPE,cr_product_m.ASSET_FLAG,cr_deal_loan_dtl.DEAL_ASSET_COST as astcstLD,  cr_deal_loan_dtl.DEAL_LOAN_AMOUNT as lonamtLD,ast.ac as astcstAD,ast.lm as lonamtAD from cr_deal_loan_dtl   join cr_product_m on(cr_product_m.PRODUCT_ID=cr_deal_loan_dtl.DEAL_PRODUCT and cr_product_m.PRODUCT_CATEGORY=cr_deal_loan_dtl.DEAL_PRODUCT_CATEGORY)   left outer join (select a.deal_id,sum(ifnull(b.ASSET_COLLATERAL_VALUE,0)) as ac,sum(ifnull(b.LOAN_AMOUNT,0)) as lm   from cr_deal_collateral_m a join cr_asset_collateral_m b on(b.ASSET_ID=a.ASSETID)where b.ASSET_TYPE='ASSET' and a.DEAL_ID=").append(dealId.trim()).append(") ").append("  as ast on(ast.deal_id=cr_deal_loan_dtl.DEAL_ID) where cr_deal_loan_dtl.DEAL_ID=").append(dealId.trim()).toString());

      logger.info(new StringBuilder().append("In getAssetLoanDetailAmount()  query   :   ").append(query.toString()).toString());
      list = ConnectionDAO.sqlSelect(query.toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }return list;
  }

  public ArrayList getDealWithCibilReport(CommonDealVo vo, HttpServletRequest request)
  {
    ArrayList list = new ArrayList();
    try
    {
      logger.info(new StringBuilder().append(" getDealWithCibilReport vo.getStage(): ").append(vo.getStage()).toString());
      logger.info(new StringBuilder().append("here userid++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ").append(vo.getReportingToUserId()).toString());
      String userNameQ = new StringBuilder().append("select USER_NAME from sec_user_m where REC_STATUS='A' and USER_ID='").append(vo.getReportingToUserId()).append("'").toString();
      String userName = ConnectionDAO.singleReturn(userNameQ);
      logger.info(new StringBuilder().append("userNameQ: ").append(userNameQ).append(" userName: ").append(userName).toString());

      String dstatus = new StringBuilder().append("select Cibil_Id from cr_cibil_dtl where deal_ID='").append(vo.getLbxDealNo()).append("'").toString();

      userNameQ = null;

      logger.info(new StringBuilder().append("Date Format: ").append(this.dateFormat).toString());
      ArrayList header = null;
      int count = 0;
      int startRecordIndex = 0;
      int endRecordIndex = this.no;
      CommonDealVo fetchVo = vo;
      boolean appendSQL = false;
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();
      StringBuilder dealId = new StringBuilder();
      StringBuilder appNo = new StringBuilder();
      StringBuilder appDate = new StringBuilder();
      StringBuilder custName = new StringBuilder();
      StringBuilder productId = new StringBuilder();
      StringBuilder branchId = new StringBuilder();

      dealId.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim());
      appNo.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim());
      appDate.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim());
      custName.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim());
      productId.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim());
      branchId.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxBranchId())).trim());

      String branch = "";
      logger.info(new StringBuilder().append("vo.getLbxBranchId()  :: ").append(fetchVo.getLbxBranchId()).toString());
      logger.info(new StringBuilder().append("vo. vo.getSelectiveBranch()()  :: ").append(vo.getSelectiveBranch()).toString());

      if (vo.getAllBranches().equalsIgnoreCase("on"))
      {
        String branchMappedToUserQuery = new StringBuilder().append("SELECT GROUP_CONCAT(BRANCH_ID) FROM sec_user_branch_dtl WHERE USER_ID='").append(CommonFunction.checkNull(vo.getReportingToUserId()).trim()).append("' AND REC_STATUS='A'").toString();
        branch = ConnectionDAO.singleReturn(branchMappedToUserQuery);
        logger.info(new StringBuilder().append("branchMappedToUserQuery: ").append(branchMappedToUserQuery).append("      branches maped to user:   ").append(branch).toString());
      }
      else if (!CommonFunction.checkNull(vo.getLbxBranchId()).equalsIgnoreCase(""))
      {
        branch = vo.getLbxBranchId();
      }
      else
      {
        branch = vo.getBranchId();
      }

      logger.info(" getDealWithCibilReport select........");
      bufInsSql.append(new StringBuilder().append(" select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,DATE_FORMAT(DEAL_DATE,'").append(this.dateFormat).append("'),deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,(SELECT USER_NAME FROM SEC_USER_M WHERE USER_ID=d.MAKER_ID) MAKER_ID,if(deal.cibil_id is null,'Non Captured','Captured')as status from cr_deal_dtl d ").toString());
      bufInsSqlTempCount.append(new StringBuilder().append(" select distinct count(1) FROM (select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,DATE_FORMAT(DEAL_DATE,'").append(this.dateFormat).append("'),deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC from cr_deal_dtl d ").toString());

      bufInsSql.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
      bufInsSqlTempCount.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");

      bufInsSql.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
      bufInsSqlTempCount.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");

      bufInsSql.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
      bufInsSqlTempCount.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");

      bufInsSql.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
      bufInsSqlTempCount.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");

      bufInsSql.append(" left join (select cibil_id,deal_id from cr_cibil_dtl group by deal_id)J on J.deal_id=d.deal_id ");
      bufInsSqlTempCount.append(" left join (select cibil_id,deal_id from cr_cibil_dtl group by deal_id)J on J.deal_id=d.deal_id ");

      if ((!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase("")) && (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on")))
      {
        bufInsSql.append(new StringBuilder().append("WHERE D.REC_STATUS in ('P','F') AND  d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(") and d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE D.REC_STATUS in ('P','F')  AND d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(") and d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
      }

      if ((vo.getLbxDealNo().equalsIgnoreCase("")) || (vo.getCustomername().equalsIgnoreCase("")) || (vo.getLbxProductID().equalsIgnoreCase("")) || (vo.getLbxscheme().equalsIgnoreCase("")) || (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on"))) {
        appendSQL = true;
      }

      if (appendSQL) {
        logger.info("In Where Clause");

        bufInsSql.append(new StringBuilder().append(" WHERE D.REC_STATUS in ('P','F') AND  d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(") ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE D.REC_STATUS in ('P','F') AND  d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(") ").toString());
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND d.DEAL_APPLICATION_FORM_NO='").append(StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND d.DEAL_APPLICATION_FORM_NO='").append(StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()).append("' ").toString());
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND date(d.DEAL_DATE) =STR_TO_DATE('").append(StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()).append("','").append(this.dateFormat).append("') ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND date(d.DEAL_DATE) =STR_TO_DATE('").append(StringEscapeUtils.escapeSql(vo.getApplicationdate()).trim()).append("','").append(this.dateFormat).append("') ").toString());
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' ").toString());
        appendSQL = true;
      }
      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("' ").toString());
        appendSQL = true;
      }
      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
        appendSQL = true;
      }

      if ((!vo.getLbxDealNo().equalsIgnoreCase("")) || (!vo.getApplicationno().equalsIgnoreCase("")) || (!vo.getApplicationdate().equalsIgnoreCase("")) || (!vo.getCustomername().equalsIgnoreCase("")) || (!vo.getLbxProductID().equalsIgnoreCase("")) || (!vo.getLbxscheme().equalsIgnoreCase("")) || (!vo.getStage().equalsIgnoreCase(""))) {
        bufInsSqlTempCount.append(" ) as b");
        appendSQL = true;
      }
      bufInsSql.append("order by status desc ");

      count = Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
      logger.info(new StringBuilder().append("bufInsSqlTempCount : ").append(bufInsSqlTempCount.toString()).toString());
      if (((dealId.toString().trim() == null) && (appNo.toString().trim() == null) && (appDate.toString().trim() == null) && (custName.toString().trim() == null) && (productId.toString().trim() == null)) || ((dealId.toString().trim().equalsIgnoreCase("")) && (appNo.toString().trim().equalsIgnoreCase("")) && (appDate.toString().trim().equalsIgnoreCase("")) && (custName.toString().trim().equalsIgnoreCase("")) && (productId.toString().trim().equalsIgnoreCase(""))) || (fetchVo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(fetchVo.getCurrentPageLink()).toString());
        if (fetchVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (fetchVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("getDealWithCibilReport query : ").append(bufInsSql).toString());
      header = ConnectionDAO.sqlSelect(bufInsSql.toString());

      for (int i = 0; i < header.size(); i++)
      {
        ArrayList header1 = (ArrayList)header.get(i);
        if ((header1 != null) && (header1.size() > 0))
        {
          fetchVo = new CommonDealVo();

          fetchVo.setLbxDealNo(new StringBuilder().append("<a href=cibilCustomer.do?method=cibilReportLoad&dealId=").append(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0))).trim()).append(">").append(CommonFunction.checkNull(header1.get(1))).append("</a>").toString());

          fetchVo.setDealNo(CommonFunction.checkNull(header1.get(1)).trim());
          fetchVo.setApplicationno(CommonFunction.checkNull(header1.get(2)).trim());
          fetchVo.setApplicationdate(CommonFunction.checkNull(header1.get(3)).trim());
          fetchVo.setCustomername(CommonFunction.checkNull(header1.get(4)).trim());

          fetchVo.setProduct(CommonFunction.checkNull(header1.get(5)).trim());
          fetchVo.setScheme(CommonFunction.checkNull(header1.get(6)).trim());
          fetchVo.setReportingToUserId(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(header1.get(7))).trim());
          fetchVo.setDealStatus(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(header1.get(8))).trim());

          fetchVo.setTotalRecordSize(count);
          list.add(fetchVo);
        }
      }

      logger.info(new StringBuilder().append(" getDealWithCibilReport getTotalRecordSize : ").append(fetchVo.getTotalRecordSize()).toString());
      dealId = null;
      appNo = null;
      appDate = null;
      custName = null;
      productId = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    logger.info(new StringBuilder().append(" getDealWithCibilReport Detail List when searchList is : ").append(list).toString());

    return list;
  }

  public ArrayList<CommonDealVo> dealWithCibilReportSearchDetail(CommonDealVo vo)
  {
    ArrayList list = new ArrayList();
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    logger.info(new StringBuilder().append("here userid++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ").append(vo.getReportingToUserId()).toString());
    String userNameQ = new StringBuilder().append("select USER_NAME from sec_user_m where REC_STATUS='A' and USER_ID='").append(vo.getReportingToUserId()).append("'").toString();
    String userName = ConnectionDAO.singleReturn(userNameQ);
    logger.info(new StringBuilder().append("userNameQ: ").append(userNameQ).append(" userName: ").append(userName).toString());
    ArrayList header = new ArrayList();

    String branch = "";
    if (vo.getAllBranches().equalsIgnoreCase("on"))
    {
      String branchMappedToUserQuery = new StringBuilder().append("SELECT GROUP_CONCAT(BRANCH_ID) FROM sec_user_branch_dtl WHERE USER_ID='").append(CommonFunction.checkNull(vo.getReportingToUserId()).trim()).append("' AND REC_STATUS='A'").toString();
      branch = ConnectionDAO.singleReturn(branchMappedToUserQuery);
      logger.info(new StringBuilder().append("branchMappedToUserQuery: ").append(branchMappedToUserQuery).append("      branches maped to user:   ").append(branch).toString());
    }
    else
    {
      branch = vo.getBranchId();
    }

    if (CommonFunction.checkNull(branch).equalsIgnoreCase(""))
    {
      branch = vo.getBranchId();
    }

    try
    {
      logger.info("Inside querySearchDetail.....");

      CommonDealVo fetchVo = vo;
      boolean appendSQL = false;
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append(" select distinct d.DEAL_ID,DEAL_NO,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC from cr_deal_dtl d");
      bufInsSqlTempCount.append("SELECT COUNT(distinct d.DEAL_ID,DEAL_NO,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC) FROM cr_deal_dtl d ");

      bufInsSql.append(" inner join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
      bufInsSqlTempCount.append(" inner join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");

      bufInsSql.append(" inner join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
      bufInsSqlTempCount.append(" inner join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");

      bufInsSql.append(" inner join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
      bufInsSqlTempCount.append(" inner join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");

      bufInsSql.append(" inner join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
      bufInsSqlTempCount.append(" inner join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");

      if ((!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase("")) && (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on")))
      {
        bufInsSql.append(new StringBuilder().append("WHERE D.REC_STATUS = 'P' AND  d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(") and d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE D.REC_STATUS = 'P' AND d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(") and d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
      }

      if ((vo.getLbxDealNo().equalsIgnoreCase("")) || (vo.getCustomername().equalsIgnoreCase("")) || (vo.getLbxProductID().equalsIgnoreCase("")) || (vo.getLbxscheme().equalsIgnoreCase("")) || (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on"))) {
        appendSQL = true;
      }

      if (appendSQL) {
        logger.info("In Where Clause");

        bufInsSql.append(new StringBuilder().append(" WHERE D.REC_STATUS = 'P' AND  d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(")").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE D.REC_STATUS = 'P' AND  d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(")").toString());
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' ").toString());
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' ").toString());
        appendSQL = true;
      }
      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("' ").toString());
        appendSQL = true;
      }
      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
        appendSQL = true;
      }
      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on")) {
        bufInsSql.append(new StringBuilder().append("AND d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(") ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(") ").toString());
        appendSQL = true;
      }
      LoggerMsg.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));

      if (((StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim() == null) && (StringEscapeUtils.escapeSql(vo.getCustomername()).trim() == null)) || ((StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim().equalsIgnoreCase("")) && (StringEscapeUtils.escapeSql(vo.getCustomername()).trim().equalsIgnoreCase(""))) || ((StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim() == null) && (StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim().equalsIgnoreCase(""))) || ((StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim() == null) && (StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim().equalsIgnoreCase(""))) || (vo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(vo.getCurrentPageLink()).toString());
        if (vo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (vo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());

      header = ConnectionDAO.sqlSelect(bufInsSql.toString());

      for (int i = 0; i < header.size(); i++)
      {
        logger.info(new StringBuilder().append("header: ").append(header.size()).toString());
        ArrayList header1 = (ArrayList)header.get(i);
        if ((header1 != null) && (header1.size() > 0))
        {
          logger.info(new StringBuilder().append("header list size .....................").append(header.size()).toString());
          fetchVo = new CommonDealVo();

          fetchVo.setLbxDealNo(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0))).trim());

          fetchVo.setDealNo(new StringBuilder().append("<a href=queryBehind.do?method=showQueryDataFirst&dealId=").append(CommonFunction.checkNull(header1.get(0)).toString()).append(">").append(CommonFunction.checkNull(header1.get(1)).toString()).append("</a>").toString());
          fetchVo.setCustomername(CommonFunction.checkNull(header1.get(2)).trim());
          fetchVo.setProduct(CommonFunction.checkNull(header1.get(3)).trim());
          fetchVo.setScheme(CommonFunction.checkNull(header1.get(4)).trim());
          fetchVo.setReportingToUserId(userName);
          fetchVo.setTotalRecordSize(count);
          list.add(fetchVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return list;
  }

  public boolean uploadCibilReportData(ConsumerVo uwDocVo)
  {
    boolean status = false;
    logger.info(new StringBuilder().append("Inside DAO Impl: File= ").append(uwDocVo.getFileName()).toString());
    logger.info(new StringBuilder().append("Inside DAO Impl: deal id= ").append(uwDocVo.getDealId()).toString());

    logger.info("Document Uploaded Successfully");
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    try {
      logger.info("In insert part of uploadUnderwritingData....");
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("insert into cr_uploaded_documents(txn_type,txn_id,document_desc,file_name,document_path,uploaded_by,uploaded_date)");
      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append("now())");

      insertPrepStmtObject.addString("CBL".trim());

      if (CommonFunction.checkNull(uwDocVo.getCivilId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(uwDocVo.getCivilId().trim());
      }
      insertPrepStmtObject.addNull();

      if (CommonFunction.checkNull(uwDocVo.getFileName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(CommonFunction.checkNull(uwDocVo.getFileName()).trim());
      if (CommonFunction.checkNull(uwDocVo.getDocPath()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(uwDocVo.getDocPath().trim());
      if (CommonFunction.checkNull(uwDocVo.getUserName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(uwDocVo.getUserName().trim());
      }

      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN uploadUnderwritingData() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In uploadUnderwritingData.................query status..... ").append(status).toString());
      bufInsSql = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    return status;
  }

  public ArrayList getUploadCibilData(String dealId)
  {
    ArrayList list = new ArrayList();
    try
    {
      logger.info(new StringBuilder().append("In getUploadCibilData...........cibilId...............DAOImpl").append(dealId).toString());
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select txn_id, file_name, document_desc, uploaded_by from cr_uploaded_documents where txn_id IN (select CIBIL_ID from cr_cibil_dtl where deal_id='").append(dealId).append("') and TXN_TYPE='CBL'").toString());
      logger.info(new StringBuilder().append("In getUploadCibilData...............query...........DAOImpl").append(query).toString());
      UnderwritingDocUploadVo uwDocVo = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getUploadCibilData size of list Product ").append(product.size()).toString());
      query = null;
      for (int i = 0; i < product.size(); i++) {
        logger.info(new StringBuilder().append("getUploadCibilData... FOR loop ").append(CommonFunction.checkNull(product.get(i)).toString()).toString());
        ArrayList data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          uwDocVo = new UnderwritingDocUploadVo();
          uwDocVo.setDealId(CommonFunction.checkNull(data.get(0)).trim());
          uwDocVo.setFileName(CommonFunction.checkNull(data.get(1)).trim());
          uwDocVo.setDocDescription(CommonFunction.checkNull(data.get(2)).trim());
          uwDocVo.setUserName(CommonFunction.checkNull(data.get(3)).trim());
          list.add(uwDocVo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public String getFileInfoOFCibilReport(String dealId, String fileName)
  {
    String filePath = "";
    try
    {
      logger.info("In getFileInfo..........................DAOImpl");
      StringBuffer query = new StringBuffer();
      query.append(new StringBuilder().append("select document_path from cr_uploaded_documents where txn_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' and file_name='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(fileName)).trim()).append("' AND TXN_TYPE='CBL'").toString());
      logger.info(new StringBuilder().append("In getFileInfo...............query...........DAOImpl ").append(query).toString());
      filePath = ConnectionDAO.singleReturn(query.toString());
      logger.info(new StringBuilder().append("Resultset value====  ").append(filePath).toString());
      query = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return filePath;
  }

  public boolean uploadedCibilDocsDelete(String dealId, String cibilId)
  {
    boolean status = false;
    try
    {
      String query = "SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='UNDERWRITER_UPLOAD'";
      String rpt = ConnectionDAO.singleReturn(query);
      File directory = new File(new StringBuilder().append(rpt).append("/").append(dealId).toString());
      boolean isDirectory = directory.isDirectory();
      if (isDirectory) {
        logger.info(new StringBuilder().append("the name you have entered is a directory  : ").append(directory).toString());
        logger.info(new StringBuilder().append("the path is ").append(directory.getAbsolutePath()).toString());
      }

      String getFileNameQ = new StringBuilder().append("select file_name from cr_uploaded_documents where txn_id = '").append(cibilId).append("' and TXN_TYPE='CBL'").toString();

      ArrayList getFileName = ConnectionDAO.sqlSelect(getFileNameQ);
      int size = getFileName.size();
      for (int i = 0; size > 0; i++)
      {
        ArrayList fileName = (ArrayList)getFileName.get(i);
        if (fileName.size() > 0)
        {
          File file = new File(directory.getAbsolutePath(), fileName.get(0).toString());
          boolean exists = file.exists();
          if (exists)
          {
            logger.info(new StringBuilder().append("the name you have entered is a file  : ").append(file.getName()).toString());
            logger.info(new StringBuilder().append("the path is ").append(file.getAbsolutePath()).toString());
            file.delete();
            status = true;
          }
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return status;
  }

  public ArrayList<LeaddetailDealVo> CustomerDetailsList(String leadId)
  {
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();

      query.append(new StringBuilder().append("SELECT distinct l.LEAD_ID,l.CUSTOMER_NAME,l.ADDRESS_LINE1,l.ADDRESS_LINE2,l.ADDRESS_LINE3,l.PINCODE,l.PRIMARY_PHONE,l.ALTERNATE_PHONE,l.EMAIL_ID,l.COUNTRY,l.STATE,l.DISTRICT,l.NO_OF_YEARS,l.INDUSTRY_ID,l.SUB_INDUSTRY_ID,l.CUSTOMER_TYPE,l.ADDRESS_TYPE,l.GROUP_ID,l.CONSTITUTION,REGISTRATION_NO,l.PAN,l.BUSINESS_SEGMENT,l.FIRST_NAME,l.LAST_NAME,DATE_FORMAT(l.CUSTOMER_DOB,'").append(this.dateFormat).append("'),l.EXISTING_CUSTOMER,l.PRODUCT,l.SCHEME,l.GROUP_TYPE,l.GROUP_DESC,l.NO_OF_MONTHS,").append("OWNERSHIP,FATHER_HUSBAND_NAME,DRIVING_LICENSE,VOTER_ID,PASSPORT_NUMBER,TAHSIL,LOAN_TYPE from  cr_lead_dtl l where LEAD_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(leadId))).append("'").toString());

      logger.info(new StringBuilder().append("CustomerDetailsList-------------").append(query).toString());

      LeaddetailDealVo leadVo = null;
      ArrayList leaddeatail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("CustomerDetailsList----size-----").append(leaddeatail.size()).toString());

      query = null;

      for (int i = 0; i < leaddeatail.size(); i++)
      {
        logger.info(new StringBuilder().append("CustomerDetailsList").append(leaddeatail.get(i).toString()).toString());
        ArrayList leaddeatail1 = (ArrayList)leaddeatail.get(i);
        if (leaddeatail1.size() > 0) {
          logger.info(new StringBuilder().append("CustomerDetailsList=========size======").append(leaddeatail1.size()).toString());

          leadVo = new LeaddetailDealVo();

          leadVo.setLbxLeadNo(CommonFunction.checkNull(leaddeatail1.get(0)).trim());
          leadVo.setCustomerName(CommonFunction.checkNull(leaddeatail1.get(1)).trim());
          leadVo.setAddressLine1(CommonFunction.checkNull(leaddeatail1.get(2)).trim());
          leadVo.setAddressLine2(CommonFunction.checkNull(leaddeatail1.get(3)).trim());
          leadVo.setAddressLine3(CommonFunction.checkNull(leaddeatail1.get(4)).trim());
          leadVo.setPinCode(CommonFunction.checkNull(leaddeatail1.get(5)).trim());
          leadVo.setPhone(CommonFunction.checkNull(leaddeatail1.get(6)).trim());
          leadVo.setAltPhone(CommonFunction.checkNull(leaddeatail1.get(7)).trim());
          leadVo.setEmail(CommonFunction.checkNull(leaddeatail1.get(8)).trim());
          leadVo.setLbxCountry(CommonFunction.checkNull(leaddeatail1.get(9)).trim());
          leadVo.setLbxState(CommonFunction.checkNull(leaddeatail1.get(10)).trim());
          leadVo.setLbxDistrict(CommonFunction.checkNull(leaddeatail1.get(11)).trim());
          leadVo.setNoOfYrs(CommonFunction.checkNull(leaddeatail1.get(12)).trim());
          leadVo.setLbxIndustry(CommonFunction.checkNull(leaddeatail1.get(13)).trim());
          leadVo.setLbxSubIndustry(CommonFunction.checkNull(leaddeatail1.get(14)).trim());
          leadVo.setCustomerType(CommonFunction.checkNull(leaddeatail1.get(15)).trim());
          leadVo.setAddressType(CommonFunction.checkNull(leaddeatail1.get(16)).trim());
          leadVo.setGroupId(CommonFunction.checkNull(leaddeatail1.get(17)).trim());
          leadVo.setConstitution(CommonFunction.checkNull(leaddeatail1.get(18)).trim());
          leadVo.setRegistrationNo(CommonFunction.checkNull(leaddeatail1.get(19)).trim());

          leadVo.setPan(CommonFunction.checkNull(leaddeatail1.get(20)).trim());
          leadVo.setBusinessSegment(CommonFunction.checkNull(leaddeatail1.get(21)).trim());
          leadVo.setFirstName(CommonFunction.checkNull(leaddeatail1.get(22)).trim());
          leadVo.setLastName(CommonFunction.checkNull(leaddeatail1.get(23)).trim());
          leadVo.setCustDOB(CommonFunction.checkNull(leaddeatail1.get(24)).trim());
          leadVo.setExistingFlag(CommonFunction.checkNull(leaddeatail1.get(25)).trim());
          leadVo.setLeadProduct(CommonFunction.checkNull(leaddeatail1.get(26)).trim());
          leadVo.setLeadScheme(CommonFunction.checkNull(leaddeatail1.get(27)).trim());
          leadVo.setLeadGroupType(CommonFunction.checkNull(leaddeatail1.get(28)).trim());
          leadVo.setLeadGroupName(CommonFunction.checkNull(leaddeatail1.get(29)).trim());
          leadVo.setNoOfMonths(CommonFunction.checkNull(leaddeatail1.get(30)).trim());

          leadVo.setOwner(CommonFunction.checkNull(leaddeatail1.get(31)).trim());
          leadVo.setFatherHusbandName(CommonFunction.checkNull(leaddeatail1.get(32)).trim());
          leadVo.setDrivingLicence(CommonFunction.checkNull(leaddeatail1.get(33)).trim());
          leadVo.setVoterId(CommonFunction.checkNull(leaddeatail1.get(34)).trim());
          leadVo.setPassportNo(CommonFunction.checkNull(leaddeatail1.get(35)).trim());
          leadVo.setTehsil(CommonFunction.checkNull(leaddeatail1.get(36)).trim());
          leadVo.setLoanType(CommonFunction.checkNull(leaddeatail1.get(37)).trim());

          list.add(leadVo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public String saveLeadCustomerDetails(LeaddetailDealVo vo)
  {
    boolean status = false;
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList qryList = new ArrayList();
    String result = "";
    try
    {
      logger.info("In insert saveLeadCustomerDetails");
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("insert into cr_deal_customer_m(CUSTOMER_NAME,CUSTOMER_FNAME,CUSTOMER_LNAME,CUSTOMER_TYPE,CUSTOMER_GROUP_ID,CUSTOMER_DOB,CUSTMER_PAN,CUSTOMER_REGISTRATION_NO,CUSTOMER_CONSTITUTION,CUSTOMER_BUSINESS_SEGMENT,CUSTOMER_INDUSTRY,CUSTOMER_SUB_INDUSTRY,CUSTOMER_EMAIL,FATHER_HUSBAND_NAME,DRIVING_LICENSE,VOTER_ID,PASSPORT_NUMBER,REC_STATUS,MAKER_ID,CUSTOMER_GROUP_TYPE,CUSTOMER_GROUP_DESC,MAKER_DATE)");

      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");

      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

      if (CommonFunction.checkNull(vo.getCustomerName()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getCustomerName().trim());
      }
      if (CommonFunction.checkNull(vo.getFirstName()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getFirstName().trim());
      }
      if (CommonFunction.checkNull(vo.getLastName()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLastName().trim());
      }
      if (CommonFunction.checkNull(vo.getCustomerType()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getCustomerType().trim());
      }
      if (CommonFunction.checkNull(vo.getGroupId()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getGroupId().trim());
      }

      if (CommonFunction.checkNull(vo.getCustDOB()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getCustDOB().trim());
      }
      if (CommonFunction.checkNull(vo.getPan()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPan().trim());
      }

      if (CommonFunction.checkNull(vo.getRegistrationNo()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getRegistrationNo().trim());
      }

      if (CommonFunction.checkNull(vo.getConstitution()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getConstitution().trim());
      }

      if (CommonFunction.checkNull(vo.getBusinessSegment()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getBusinessSegment().trim());
      }
      if (CommonFunction.checkNull(vo.getLbxIndustry()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLbxIndustry().trim());
      }
      if (CommonFunction.checkNull(vo.getLbxSubIndustry()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getLbxSubIndustry().trim());
      if (CommonFunction.checkNull(vo.getEmail()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getEmail().trim());
      }

      if (CommonFunction.checkNull(vo.getFatherHusbandName()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getFatherHusbandName().trim());
      }

      if (CommonFunction.checkNull(vo.getDrivingLicence()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getDrivingLicence().trim());
      }
      if (CommonFunction.checkNull(vo.getVoterId()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getVoterId().trim());
      if (CommonFunction.checkNull(vo.getPassportNo()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getPassportNo().trim());
      insertPrepStmtObject.addString("A");

      if (CommonFunction.checkNull(vo.getMakerId()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerId().trim());
      }
      if (CommonFunction.checkNull(vo.getLeadGroupType()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLeadGroupType());
      }
      if (CommonFunction.checkNull(vo.getLeadGroupName()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLeadGroupName());
      }

      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerDate());
      }
      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN saveLeadCustomerDetails() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

      qryList.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      if (status)
      {
        String query1 = "Select max(CUSTOMER_ID) from cr_deal_customer_m for update";
        String strMax = ConnectionDAO.singleReturn(query1);
        result = strMax;
        new CorpotateDAOImpl().saveLeadCustomer(vo, strMax);
      } else {
        result = "0";
      }
      logger.info(new StringBuilder().append("In saveLeadCustomerDetails..........status............").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      vo = null;
    }
    return result;
  }

  public boolean saveLeadCustomerAddressDetails(LeaddetailDealVo vo) {
    boolean status = false;
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList qryList = new ArrayList();
    try
    {
      logger.info("In insert saveLeadCustomerAddressDetails");
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("insert into cr_deal_address_m(ADDRESS_TYPE,ADDRESS_LINE1,ADDRESS_LINE2,ADDRESS_LINE3,COUNTRY,STATE,DISTRICT,PINCODE,PRIMARY_PHONE,NO_OF_YEARS,ALTERNATE_PHONE,BPID,COMMUNICATION_ADDRESS,REC_STATUS,MAKER_ID,MAKER_DATE,BPTYPE,ADDRESS_DETAIL,TAHSIL,NO_OF_MONTHS)");

      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");

      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ? )");

      if (CommonFunction.checkNull(vo.getAddressType()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAddressType().trim());
      }
      if (CommonFunction.checkNull(vo.getAddressLine1()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAddressLine1().trim());
      }
      if (CommonFunction.checkNull(vo.getAddressLine2()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAddressLine2().trim());
      }
      if (CommonFunction.checkNull(vo.getAddressLine3()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAddressLine3().trim());
      }
      if (CommonFunction.checkNull(vo.getLbxCountry()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLbxCountry().trim());
      }

      if (CommonFunction.checkNull(vo.getLbxState()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLbxState().trim());
      }
      if (CommonFunction.checkNull(vo.getLbxDistrict()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getLbxDistrict().trim());
      }

      if (CommonFunction.checkNull(vo.getPinCode()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPinCode().trim());
      }

      if (CommonFunction.checkNull(vo.getPhone()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPhone().trim());
      }

      if (CommonFunction.checkNull(vo.getNoOfYrs()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getNoOfYrs().trim());
      }
      if (CommonFunction.checkNull(vo.getAltPhone()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAltPhone().trim());
      }
      if (CommonFunction.checkNull(vo.getBpId()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getBpId().trim());
      }
      if (CommonFunction.checkNull(vo.getCommAddress()).trim().equals(""))
        insertPrepStmtObject.addString("N");
      else {
        insertPrepStmtObject.addString("Y");
      }
      insertPrepStmtObject.addString("A");

      if (CommonFunction.checkNull(vo.getMakerId()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerId().trim());
      }
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getMakerDate());
      insertPrepStmtObject.addString("CS");
      if (CommonFunction.checkNull(vo.getOwner()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getOwner().trim());
      if (CommonFunction.checkNull(vo.getTehsil()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getTehsil().trim());
      if (CommonFunction.checkNull(vo.getNoOfMonths()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getNoOfMonths().trim());
      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN saveLeadCustomerAddressDetails() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);

      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In saveLeadCustomerAddressDetails..........status............").append(status).toString());
      new CorpotateDAOImpl().saveLeadCustomerAddress(vo);
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      vo = null;
    }
    return status;
  }

  public boolean linkLeadCustomer(LeaddetailDealVo vo) {
    boolean status = false;
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList qryList = new ArrayList();
    try
    {
      logger.info("In insert saveLeadCustomerAddressDetails");
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("Insert Into cr_deal_customer_role(DEAL_ID,  DEAL_CUSTOMER_ROLE_TYPE, DEAL_CUSTOMER_TYPE,DEAL_CUSTOMER_ID, DEAL_EXISTING_CUSTOMER, STATUS, MAKER_ID, MAKER_DATE)");

      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");

      bufInsSql.append(" ?,");

      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

      if (CommonFunction.checkNull(vo.getDealId()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getDealId().trim());
      }
      insertPrepStmtObject.addString("PRAPPL");
      if (CommonFunction.checkNull(vo.getCustomerType()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getCustomerType().trim());
      }
      if (CommonFunction.checkNull(vo.getBpId()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getBpId().trim());
      if (CommonFunction.checkNull(vo.getExistingFlag()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getExistingFlag().trim());
      }

      insertPrepStmtObject.addString("A");

      if (CommonFunction.checkNull(vo.getMakerId()).trim().equals(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerId().trim());
      }
      if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerDate());
      }
      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN saveLeadCustomerAddressDetails() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);

      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In saveLeadCustomerAddressDetails..........status............").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      vo = null;
    }
    return status;
  }
  public boolean updateDealCustomer(LeaddetailDealVo vo) {
    logger.info("In updateDealCustomer");

    ArrayList qryList = new ArrayList();
    boolean status = false;
    try
    {
      PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
      StringBuffer bufInsSql = new StringBuffer();

      bufInsSql.append("Update cr_deal_dtl set DEAL_CUSTOMER_ID=?, DEAL_EXISTING_CUSTOMER=? ,DEAL_CUSTOMER_TYPE=?  where  DEAL_ID=?; ");

      if (CommonFunction.checkNull(vo.getBpId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getBpId().trim());
      if (CommonFunction.checkNull(vo.getExistingFlag()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getExistingFlag().trim());
      if (CommonFunction.checkNull(vo.getCustomerType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getCustomerType().trim());
      }
      if (CommonFunction.checkNull(vo.getDealId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getDealId().trim());
      }
      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN updateDealCustomer() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);
      bufInsSql = null;

      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
    } catch (Exception e) {
      e.printStackTrace();
    }
    logger.info(new StringBuilder().append("In updateDealCustomer......................").append(status).toString());
    return status;
  }

  public ArrayList getProductSchemeDetailsFromLead(String product, String scheme, String loanTenure, String loanAmount, String loanPurpose, String bdate, String loanType, String sectorType, String loanPurposeValue, String premium)
  {
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT DEFAULT_MARGIN_RATE,RATE_TYPE,RATE_METHOD,S.BASE_RATE_TYPE,B.BASE_RATE,DEF_FLAT_RATE, DEF_EFF_RATE,DEF_TENURE,REPAYMENT_FREQ,INSTALLMENT_TYPE,REPAYMENT_MODE,INSTALLMENT_MODE ,P.REPAYMENT_TYPE,P.REVOLVING_FLAG ,MIN_MARGIN_RATE,MAX_MARGIN_RATE,MIN_TENURE,MAX_TENURE,MIN_AMT_FIN,MAX_AMT_FIN,P.ASSET_FLAG,p.PRODUCT_DESC,s.SCHEME_DESC,p.PRODUCT_CATEGORY,p.DAYS_BASIS,S.FLOATING_FIXED_PERIOD,S.MIN_FLAT_RATE,S.MAX_FLAT_RATE,S.MIN_EFF_RATE,S.MAX_EFF_RATE,date_format(DATE_ADD(STR_TO_DATE('").append(bdate).append("','").append(this.dateFormat).append("'), INTERVAL ").append(loanTenure).append(" MONTH),'").append(this.dateFormat).append("') from cr_scheme_m S ").append(" LEFT JOIN cr_base_rate_m B ON S.BASE_RATE_TYPE=B.BASE_RATE_TYPE AND B.rec_status='A' and b.EFFECTIVE_FROM <= STR_TO_DATE('").append(bdate).append("','").append(this.dateFormat).append("') ").append(" LEFT JOIN cr_product_m P ON S.PRODUCT_ID=P.PRODUCT_ID").append(" where SCHEME_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scheme)).trim()).append(" AND S.REC_STATUS='A' ").append(" order by b.EFFECTIVE_FROM desc limit 1").toString());

      logger.info(new StringBuilder().append("getLoanDetailScheme").append(query).toString());
      LoanDetailVo loanVo = null;
      ArrayList schemedeatail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getLeadEntryList").append(schemedeatail.size()).toString());

      query = null;

      for (int i = 0; i < schemedeatail.size(); i++)
      {
        logger.info(new StringBuilder().append("getLeadEntryList").append(schemedeatail.get(i).toString()).toString());
        ArrayList schemedeatail1 = (ArrayList)schemedeatail.get(i);
        if (schemedeatail1.size() > 0)
        {
          logger.info(new StringBuilder().append("getLeadEntryList").append(schemedeatail1.size()).toString());
          loanVo = new LoanDetailVo();
          if (!CommonFunction.checkNull(schemedeatail1.get(0)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(0)).trim());
            loanVo.setMarginPerc(this.myFormatter.format(reconNum));
            double ltv = 100.0D - reconNum.doubleValue();
            loanVo.setLtvPerc(new StringBuilder().append("").append(ltv).toString());
          }
          loanVo.setRateType(CommonFunction.checkNull(schemedeatail1.get(1)).trim());
          loanVo.setType(CommonFunction.checkNull(schemedeatail1.get(2)).trim());
          loanVo.setBaseRateType(CommonFunction.checkNull(schemedeatail1.get(3)).trim());
          if (!CommonFunction.checkNull(schemedeatail1.get(4)).equalsIgnoreCase(""))
          {
            Number reconNumb = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(4)).trim());
            loanVo.setBaseRate(this.myFormatter.format(reconNumb));
          }

          if (CommonFunction.checkNull(schemedeatail1.get(1)).trim().equalsIgnoreCase("E"))
          {
            Number effRate = Double.valueOf(0.0D);
            Number baseRate = Double.valueOf(0.0D);
            if (!CommonFunction.checkNull(schemedeatail1.get(6)).equalsIgnoreCase(""))
            {
              effRate = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(6)).trim());
            }
            if (!CommonFunction.checkNull(schemedeatail1.get(4)).equalsIgnoreCase(""))
            {
              baseRate = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(4)).trim());
            }
            Number markUp = Double.valueOf(effRate.doubleValue() - baseRate.doubleValue());
            loanVo.setEffectiveRate(this.myFormatter.format(effRate));
            loanVo.setMarkUp(this.myFormatter.format(markUp));
          }
          else
          {
            String fltRT = CommonFunction.checkNull(schemedeatail1.get(5));
            if (fltRT.trim().equalsIgnoreCase(""))
              fltRT = "0.00";
            String bsRT = CommonFunction.checkNull(schemedeatail1.get(4));
            if (bsRT.trim().equalsIgnoreCase(""))
              bsRT = "0.00";
            Number flatRate = this.myFormatter.parse(fltRT.trim());
            Number baseRate = this.myFormatter.parse(bsRT.trim());
            Number markUp = Double.valueOf(flatRate.doubleValue() - baseRate.doubleValue());
            loanVo.setEffectiveRate(this.myFormatter.format(flatRate));
            loanVo.setMarkUp(this.myFormatter.format(markUp));
          }

          loanVo.setRequestedLoanTenure(CommonFunction.checkNull(schemedeatail1.get(7)).trim());
          loanVo.setFrequency(CommonFunction.checkNull(schemedeatail1.get(8)).trim());
          int freqMonth = 0;
          if (CommonFunction.checkNull(schemedeatail1.get(8)).trim().equalsIgnoreCase("M"))
          {
            freqMonth = 1;
          }
          else if (CommonFunction.checkNull(schemedeatail1.get(8)).trim().equalsIgnoreCase("B"))
          {
            freqMonth = 2;
          }
          else if (CommonFunction.checkNull(schemedeatail1.get(8)).trim().equalsIgnoreCase("Q"))
          {
            freqMonth = 3;
          }
          else if (CommonFunction.checkNull(schemedeatail1.get(8)).trim().equalsIgnoreCase("H"))
          {
            freqMonth = 6;
          }
          else if (CommonFunction.checkNull(schemedeatail1.get(8)).trim().equalsIgnoreCase("Y"))
          {
            freqMonth = 12;
          }
          int parseTenure = Integer.parseInt(loanTenure);

          int calcInsat = parseTenure / freqMonth;

          loanVo.setNoOfInstall(new StringBuilder().append("").append(calcInsat).toString());
          loanVo.setInstallmentType(CommonFunction.checkNull(schemedeatail1.get(9)).trim());
          loanVo.setPaymentMode(CommonFunction.checkNull(schemedeatail1.get(10)).trim());
          loanVo.setInstMode(CommonFunction.checkNull(schemedeatail1.get(11)).trim());
          loanVo.setRepaymentType(CommonFunction.checkNull(schemedeatail1.get(12)).trim());
          if (CommonFunction.checkNull(schemedeatail1.get(12)).trim().equalsIgnoreCase("I"))
          {
            loanVo.setShowRepaymentType("INSTALLMENT");
          }
          else
          {
            loanVo.setShowRepaymentType("NON-INSTALLMENT");
          }

          if (!CommonFunction.checkNull(schemedeatail1.get(14)).equalsIgnoreCase(""))
          {
            Number reconNumm = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(14)).trim());
            loanVo.setMinMRate(this.myFormatter.format(reconNumm));
          }

          if (!CommonFunction.checkNull(schemedeatail1.get(15)).equalsIgnoreCase(""))
          {
            Number reconNumR = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(15)).trim());
            loanVo.setMaxMRate(this.myFormatter.format(reconNumR));
          }

          loanVo.setMinTenure(CommonFunction.checkNull(schemedeatail1.get(16)).trim());
          loanVo.setMaxTenure(CommonFunction.checkNull(schemedeatail1.get(17)).trim());

          if (!CommonFunction.checkNull(schemedeatail1.get(18)).equalsIgnoreCase(""))
          {
            Number reconNumf = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(18)).trim());
            loanVo.setMinFinanceAmount(this.myFormatter.format(reconNumf));
          }

          if (!CommonFunction.checkNull(schemedeatail1.get(19)).equalsIgnoreCase(""))
          {
            Number reconNummF = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(19)).trim());
            loanVo.setMaxFinanceAmount(this.myFormatter.format(reconNummF));
          }

          loanVo.setAssetFlag(CommonFunction.checkNull(schemedeatail1.get(20)).trim());
          loanVo.setProduct(CommonFunction.checkNull(schemedeatail1.get(21)).trim());
          loanVo.setScheme(CommonFunction.checkNull(schemedeatail1.get(22)).trim());
          loanVo.setProductType(CommonFunction.checkNull(schemedeatail1.get(23)).trim());
          loanVo.setDaysBasis(CommonFunction.checkNull(schemedeatail1.get(24)).trim());
          loanVo.setLbxProductID(product);
          loanVo.setLbxscheme(scheme);

          loanVo.setRequestedLoanTenure(loanTenure);
          if (!CommonFunction.checkNull(loanAmount).equalsIgnoreCase(""))
          {
            logger.info(new StringBuilder().append("loanAmount: ").append(loanAmount).toString());
            Number reconNummF = this.myFormatter.parse(loanAmount);
            loanVo.setRequestedLoanAmount(this.myFormatter.format(reconNummF));
          }
          loanVo.setLoanPurpose(loanPurpose);
          loanVo.setLoanPurposeValue(loanPurposeValue);
          loanVo.setLoanType(loanType);
          loanVo.setFixPriod(CommonFunction.checkNull(schemedeatail1.get(25)).trim());

          if (!CommonFunction.checkNull(schemedeatail1.get(26)).equalsIgnoreCase(""))
          {
            Number reconNumd = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(26)).trim());
            loanVo.setMinFlatRate(this.myFormatter.format(reconNumd));
          }
          else
          {
            loanVo.setMinFlatRate("0.0000000");
          }
          if (!CommonFunction.checkNull(schemedeatail1.get(27)).equalsIgnoreCase(""))
          {
            Number reconNumd = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(27)).trim());
            loanVo.setMaxFlatRate(this.myFormatter.format(reconNumd));
          }
          else
          {
            loanVo.setMaxFlatRate("0.0000000");
          }

          if (!CommonFunction.checkNull(schemedeatail1.get(28)).equalsIgnoreCase(""))
          {
            Number reconNumd = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(28)).trim());
            loanVo.setMinEffectiveRate(this.myFormatter.format(reconNumd));
          }
          else
          {
            loanVo.setMinEffectiveRate("0.0000000");
          }
          if (!CommonFunction.checkNull(schemedeatail1.get(29)).equalsIgnoreCase(""))
          {
            Number reconNumd = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(29)).trim());
            loanVo.setMaxEffectiveRate(this.myFormatter.format(reconNumd));
          }
          else
          {
            loanVo.setMaxEffectiveRate("0.0000000");
          }
          loanVo.setMaturityDate(CommonFunction.checkNull(schemedeatail1.get(30)).trim());
          loanVo.setSectorType(sectorType);
          Number reconNummPremium = this.myFormatter.parse(premium);
          loanVo.setInsurancePremium(this.myFormatter.format(reconNummPremium));
          list.add(loanVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getDealVerificationMovementDetail(String txnid, String userId)
  {
    ArrayList list = new ArrayList();
    try {
      logger.info(new StringBuilder().append("In getDealVerificationMovementDetail......Dao Impl").append(txnid).toString());
      StringBuilder query = new StringBuilder();
      query.append(" select V.VERIFICATION_ID,V.VERIFICATION_TYPE,V.APPRAISER_TYPE,S.USER_NAME,CASE WHEN V.VERIFICATION_ACTION='P' THEN 'PENDING'    WHEN V.VERIFICATION_ACTION='I' THEN 'INITIATED'  WHEN V.VERIFICATION_ACTION='W' THEN 'WAIVED'END AS VERIFICATION_ACTION,CASE  WHEN V.REC_STATUS='P' THEN 'PENDING'  WHEN V.REC_STATUS='F' THEN 'FORWARDED' WHEN V.REC_STATUS='R' THEN 'CAPTURED' WHEN V.REC_STATUS='C' THEN 'COMPLETED' END AS REC_STATUS, V.VERIFICATION_SUBTYPE,S.USER_ID from cr_deal_verification_dtl V ");
      query.append(" LEFT JOIN sec_user_m  S ON S.USER_ID IN (V.INTERNAL_APPRAISER,V.EXTERNAL_APPRAISER) ");
      query.append(new StringBuilder().append(" where  DEAL_ID='").append(CommonFunction.checkNull(txnid).trim()).append("'").toString());

      logger.info(new StringBuilder().append("In getDealVerificationMovementDetail").append(query.toString()).toString());

      DealMovementVo vo = null;
      ArrayList dealMovement = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getDealVerificationMovementDetail ").append(dealMovement.size()).toString());

      query = null;

      for (int i = 0; i < dealMovement.size(); i++)
      {
        ArrayList data = (ArrayList)dealMovement.get(i);
        if (data.size() > 0) {
          vo = new DealMovementVo();
          vo.setSeqNo(new StringBuilder().append(i + 1).append("").toString());
          vo.setVerificationType(CommonFunction.checkNull(data.get(1)).trim());
          vo.setAppraiserType(CommonFunction.checkNull(data.get(2)));
          vo.setAssignedTo(CommonFunction.checkNull(data.get(3)).trim());
          vo.setVerificationAction(CommonFunction.checkNull(data.get(4)).trim());
          vo.setStatus(CommonFunction.checkNull(data.get(5)).trim());
          vo.setVerificationSubType(CommonFunction.checkNull(data.get(6)).trim());
          vo.setUserId(CommonFunction.checkNull(data.get(7)).trim());
          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public String getEditableFlag()
  {
    logger.info("In getEditableFlag()");
    String ediFlag = "";
    try
    {
      StringBuilder query = new StringBuilder();
      query.append("select parameter_value from parameter_mst where parameter_key='EDITABLE_FLAG'");
      logger.info(new StringBuilder().append("In getEditableFlag() query  :  ").append(query.toString()).toString());
      ediFlag = ConnectionDAO.singleReturn(query.toString());
      logger.info(new StringBuilder().append("In getEditableFlag() ediFlag  :  ").append(ediFlag).toString());
    }
    catch (Exception e) {
      e.printStackTrace();
    }return ediFlag;
  }

  public String getDefaultAccountType()
  {
    StringBuffer query = new StringBuffer();
    String result = "";
    query.append("select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY='DEFAULT_CUSTOMER_ACCOUNT_ Type'");
    try
    {
      result = ConnectionDAO.singleReturn(query.toString());
      query = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }return result;
  }

  public int getProductCategaryStatus(String dealId, String tabName)
  {
    int count = 0;
    String strReturn = null;
    String query = null;
    try
    {
      query = new StringBuilder().append("select count(DEAL_LOAN_ID) from cr_deal_loan_dtl a join cr_viablity_fleet_productcategory_m b on (a.DEAL_PRODUCT_CATEGORY=b.product_category and b.operation ='").append(CommonFunction.checkNull(tabName).trim()).append("') where  DEAL_ID='").append(CommonFunction.checkNull(dealId).trim()).append("' ").toString();
      logger.info(new StringBuilder().append("In check getProductCategaryStatus..............query...........DAOImpl ").append(query).toString());
      strReturn = ConnectionDAO.singleReturn(query);
      if (!CommonFunction.checkNull(strReturn).equalsIgnoreCase(""))
      {
        count = Integer.parseInt(strReturn);
      }
      logger.info(new StringBuilder().append("value=count===  ").append(count).toString());
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      strReturn = null;
      query = null;
    }
    return count;
  }

  public String saveFleetInCP(Object ob)
  {
    String dateTime = null;
    FleetDetailsVo fleetVo = (FleetDetailsVo)ob;

    String res = "";
    int fleetStatusCount = 0;

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    try
    {
      if (!CommonFunction.checkNull(fleetVo.getDealFleetId()).equalsIgnoreCase(""))
      {
        StringBuilder query = new StringBuilder();
        query.append(new StringBuilder().append("SELECT count(DEAL_FLEET_ID) FROM cr_deal_fleet_dtl WHERE DEAL_FLEET_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(fleetVo.getDealFleetId()).trim())).append("'").toString());
        logger.info(new StringBuilder().append("saveFleetInCP query: ").append(query.toString()).toString());
        String val = ConnectionDAO.singleReturn(query.toString());
        if (!CommonFunction.checkNull(val).equalsIgnoreCase(""))
        {
          fleetStatusCount = Integer.parseInt(val);
        }
        query = null;
      }

      if (!CommonFunction.checkNull(Integer.valueOf(fleetStatusCount)).equalsIgnoreCase("0"))
      {
        logger.info("In update saveFleetInCP");
        boolean status = false;

        StringBuilder queryUpdate = new StringBuilder();
        queryUpdate.append(new StringBuilder().append("update cr_deal_fleet_dtl set VEHICLE_OWNER=?,RELATIONSHIP=?,VEHICLE_NO=?,VEHICLE_MODEL=?, MFG_YEAR=?,DOC_COLLECTED=?, REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),FINANCIAL_INST=?,FINANCIAL_INST_NAME=?,LOAN_ID=?,LOAN_NO=?,SEASONING=?,HPN_STATUS=?,CURRENT_POS=? where DEAL_FLEET_ID=?").toString());

        if (CommonFunction.checkNull(fleetVo.getVehicleOwner()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getVehicleOwner().trim());
        }

        if (CommonFunction.checkNull(fleetVo.getRelationship()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getRelationship().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getVehicleNo()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getVehicleNo().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getVehicleModel()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getVehicleModel().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getMfgYear()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getMfgYear().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getDocCollected()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getDocCollected().trim());
        }

        insertPrepStmtObject.addString("P");

        if (CommonFunction.checkNull(fleetVo.getMakerId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getMakerId().trim());
        }

        if (CommonFunction.checkNull(fleetVo.getMakerDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getMakerDate().trim());
        }

        if (CommonFunction.checkNull(fleetVo.getFinancialInst()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getFinancialInst().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getFinancialInstName()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getFinancialInstName().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getLbxLoanNoHid()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getLbxLoanNoHid().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getLoanNo()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getLoanNo().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getSeasoning()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getSeasoning().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getHpnStatus()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getHpnStatus().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getCurrentPos()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getCurrentPos().trim());
        }

        if (CommonFunction.checkNull(fleetVo.getDealFleetId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getDealFleetId().trim());
        }
        insertPrepStmtObject.setSql(queryUpdate.toString());
        logger.info(new StringBuilder().append("IN saveFleetInCP() update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        logger.info(new StringBuilder().append("In saveFleetInCP ........ update query: ").append(queryUpdate).toString());

        queryUpdate = null;
        try
        {
          status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
          logger.info(new StringBuilder().append("In saveFleetInCP.........update status: ").append(status).toString());
        }
        catch (Exception e) {
          e.printStackTrace();
        }

        logger.info(new StringBuilder().append("In saveFleetInCP......................").append(status).toString());
        if (status)
        {
          res = "S";
        }
        else
        {
          res = "E";
        }

      }
      else
      {
        logger.info("In insert saveFleetInCP");
        StringBuffer bufInsSql = new StringBuffer();
        bufInsSql.append("insert into cr_deal_fleet_dtl(DEAL_ID,VEHICLE_OWNER,RELATIONSHIP,VEHICLE_NO,VEHICLE_MODEL,MFG_YEAR,DOC_COLLECTED,REC_STATUS,MAKER_ID,MAKER_DATE,FINANCIAL_INST,FINANCIAL_INST_NAME,LOAN_ID,LOAN_NO,SEASONING,HPN_STATUS,CURRENT_POS)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");

        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) ,").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?)");

        if (CommonFunction.checkNull(fleetVo.getDealId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(fleetVo.getDealId().trim());
        if (CommonFunction.checkNull(fleetVo.getVehicleOwner()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getVehicleOwner().trim());
        }

        if (CommonFunction.checkNull(fleetVo.getRelationship()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getRelationship().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getVehicleNo()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getVehicleNo().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getVehicleModel()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getVehicleModel().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getMfgYear()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getMfgYear().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getDocCollected()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getDocCollected().trim());
        }

        insertPrepStmtObject.addString("P");

        if (CommonFunction.checkNull(fleetVo.getMakerId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getMakerId().trim());
        }

        if (CommonFunction.checkNull(fleetVo.getMakerDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getMakerDate().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getFinancialInst()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getFinancialInst().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getFinancialInstName()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getFinancialInstName().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getLbxLoanNoHid()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getLbxLoanNoHid().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getLoanNo()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getLoanNo().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getSeasoning()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getSeasoning().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getHpnStatus()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getHpnStatus().trim());
        }
        if (CommonFunction.checkNull(fleetVo.getCurrentPos()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(fleetVo.getCurrentPos().trim());
        }

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN saveFleetInCP() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        bufInsSql = null;

        qryList.add(insertPrepStmtObject);
        boolean status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveFleetInCP STATUS......................").append(status).toString());
        if (status)
        {
          res = "S";
        }
        else
        {
          res = "E";
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return res;
  }

  public ArrayList getFleetList(String dealId)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select DEAL_FLEET_ID,VEHICLE_OWNER,RELATIONSHIP,VEHICLE_NO,VEHICLE_MODEL,MFG_YEAR,DOC_COLLECTED from cr_deal_fleet_dtl where DEAL_ID='").append(dealId.trim()).append("'").toString());

      logger.info(new StringBuilder().append("query: ").append(query).toString());
      ArrayList fleetDetail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getFleetList ").append(fleetDetail.size()).toString());

      query = null;

      for (int i = 0; i < fleetDetail.size(); i++) {
        logger.info(new StringBuilder().append("getFleetList...Outer FOR loop ").append(CommonFunction.checkNull(fleetDetail.get(i)).toString()).toString());
        ArrayList data = (ArrayList)fleetDetail.get(i);
        if (data.size() > 0) {
          FleetDetailsVo fleetVo = new FleetDetailsVo();
          fleetVo.setDealFleetId(CommonFunction.checkNull(data.get(0)).trim());
          fleetVo.setVehicleOwner(CommonFunction.checkNull(data.get(1)).trim());
          fleetVo.setRelationship(CommonFunction.checkNull(data.get(2)).trim());
          fleetVo.setVehicleNo(CommonFunction.checkNull(data.get(3)).trim());
          fleetVo.setVehicleModel(CommonFunction.checkNull(data.get(4)).trim());
          fleetVo.setMfgYear(CommonFunction.checkNull(data.get(5)).trim());
          fleetVo.setDocCollected(CommonFunction.checkNull(data.get(6)).trim());
          list.add(fleetVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getAllFleetList(String dealFleetId)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select DEAL_FLEET_ID,VEHICLE_OWNER,RELATIONSHIP,VEHICLE_NO,VEHICLE_MODEL,MFG_YEAR,DOC_COLLECTED,FINANCIAL_INST,FINANCIAL_INST_NAME,LOAN_ID,LOAN_NO,SEASONING,HPN_STATUS,CURRENT_POS from cr_deal_fleet_dtl where DEAL_FLEET_ID='").append(dealFleetId.trim()).append("'").toString());

      logger.info(new StringBuilder().append("query: ").append(query).toString());
      ArrayList fleetDetail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getFleetList ").append(fleetDetail.size()).toString());

      query = null;

      for (int i = 0; i < fleetDetail.size(); i++) {
        logger.info(new StringBuilder().append("getFleetList...Outer FOR loop ").append(CommonFunction.checkNull(fleetDetail.get(i)).toString()).toString());
        ArrayList data = (ArrayList)fleetDetail.get(i);
        if (data.size() > 0) {
          FleetDetailsVo fleetVo = new FleetDetailsVo();
          fleetVo.setDealFleetId(CommonFunction.checkNull(data.get(0)).trim());
          fleetVo.setVehicleOwner(CommonFunction.checkNull(data.get(1)).trim());
          fleetVo.setRelationship(CommonFunction.checkNull(data.get(2)).trim());
          fleetVo.setVehicleNo(CommonFunction.checkNull(data.get(3)).trim());
          fleetVo.setVehicleModel(CommonFunction.checkNull(data.get(4)).trim());
          fleetVo.setMfgYear(CommonFunction.checkNull(data.get(5)).trim());
          fleetVo.setDocCollected(CommonFunction.checkNull(data.get(6)).trim());
          fleetVo.setFinancialInst(CommonFunction.checkNull(data.get(7)).trim());
          fleetVo.setFinancialInstName(CommonFunction.checkNull(data.get(8)).trim());
          fleetVo.setLbxLoanNoHid(CommonFunction.checkNull(data.get(9)).trim());
          fleetVo.setLoanNo(CommonFunction.checkNull(data.get(10)).trim());
          fleetVo.setSeasoning(CommonFunction.checkNull(data.get(11)).trim());
          fleetVo.setHpnStatus(CommonFunction.checkNull(data.get(12)).trim());
          fleetVo.setCurrentPos(CommonFunction.checkNull(data.get(13)).trim());
          list.add(fleetVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public boolean deleteFleetDtl(String[] dealFleetId)
  {
    ArrayList qrylist = new ArrayList();
    boolean delStatus = false;
    try {
      for (int i = 0; i < dealFleetId.length; i++)
      {
        StringBuilder query = new StringBuilder();
        StringBuilder query2 = new StringBuilder();
        query.append(new StringBuilder().append("delete from cr_deal_fleet_dtl where DEAL_FLEET_ID='").append(dealFleetId[i]).append("'").toString());
        logger.info(new StringBuilder().append("query ").append(query).toString());
        qrylist.add(query);
        query = null;
        query2 = null;
      }

      delStatus = ConnectionDAO.sqlInsUpdDelete(qrylist);

      logger.info(new StringBuilder().append("Deletion Status :").append(delStatus).toString());
    } catch (Exception e) {
      e.printStackTrace();
    }

    return delStatus;
  }

  public boolean updateDealAreaCodeFromLead(LeaddetailDealVo vo)
  {
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    boolean status = false;
    StringBuilder queryUpdate = new StringBuilder();
    queryUpdate.append("update cr_deal_dtl set AREA_CODE=? where DEAL_ID=?");

    if (CommonFunction.checkNull(vo.getLbxareaCodeVal()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getLbxareaCodeVal().trim());
    }

    if (CommonFunction.checkNull(vo.getDealId()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getDealId().trim());
    }
    insertPrepStmtObject.setSql(queryUpdate.toString());
    logger.info(new StringBuilder().append("IN updateDealAreaCodeFromLead() update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
    this.qryList.add(insertPrepStmtObject);
    logger.info(new StringBuilder().append("In updateDealAreaCodeFromLead ........ update query: ").append(queryUpdate).toString());

    queryUpdate = null;
    try
    {
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
      logger.info(new StringBuilder().append("In updateDealAreaCodeFromLead.........update status: ").append(status).toString());
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList getLtvFromMakeMod(String assetNature, String txtProductCat, String makeModelId, String branchId, String year)
  {
    String ltv = "";

    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();

      query.append(new StringBuilder().append("SELECT a.LTV,c.STATE_ID,a.MANUFACTURER_ID,b.DEALER_DESC,vp.GRID_VALUE,s.state_desc from cr_make_model_master a left join cr_dsa_dealer_m b on b.DEALER_ID=a.MANUFACTURER_ID left join cr_make_model_master_state_mapping c on c.MAKE_MODEL_ID=a.MAKE_MODEL_ID  left join com_state_m s on s.STATE_ID=c.STATE_ID left join (select make_model_id, GRID_VALUE,state_id from com_used_vehicle_pricing_m where make_model_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(makeModelId))).append("' and MANUFACTURING_YEAR = '").append(year).append("'  ) vp on vp.make_model_id = a.make_model_id and c.STATE_ID=vp.state_id ").append("where a.MAKE_MODEL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(makeModelId))).append("' and a.PRODUCT_CATEGORY='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txtProductCat))).append("' and a.MAKE_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(assetNature))).append("' and c.STATE_ID=(select state_id from com_branch_m where BRANCH_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(branchId))).append("') limit 1").toString());

      logger.info(new StringBuilder().append("ltvQuery: ").append(query.toString()).toString());
      ArrayList fleetDetail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getFleetList ").append(fleetDetail.size()).toString());

      query = null;

      for (int i = 0; i < fleetDetail.size(); i++) {
        logger.info(new StringBuilder().append("getFleetList...Outer FOR loop ").append(CommonFunction.checkNull(fleetDetail.get(i)).toString()).toString());
        ArrayList data = (ArrayList)fleetDetail.get(i);
        if (data.size() > 0) {
          CollateralVo collateralVo = new CollateralVo();
          collateralVo.setLtv(CommonFunction.checkNull(data.get(0)).trim());
          collateralVo.setTxtStateCode(CommonFunction.checkNull(data.get(1)).trim());
          collateralVo.setLbxmachineManufact(CommonFunction.checkNull(data.get(2)).trim());
          collateralVo.setAssetManufactDesc(CommonFunction.checkNull(data.get(3)).trim());
          collateralVo.setGridValue(CommonFunction.checkNull(data.get(4)).trim());
          collateralVo.setAssetState(CommonFunction.checkNull(data.get(5)).trim());
          list.add(collateralVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getGroupExposureData(String dealId, String customerId, String groupId, String groupType)
  {
    ArrayList list = new ArrayList();
    String grId = "0";
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select CUSTOMER_ID,CUSTOMER_NAME,CUSTOMER_GROUP_TYPE,CUSTOMER_GROUP_DESC,CUSTOMER_GROUP_ID,CUSTOMER_GROUP_EXPOSURE_LIMIT  from cr_deal_customer_m c  JOIN cr_deal_customer_role r on r.DEAL_CUSTOMER_ID=c.CUSTOMER_ID   and r.DEAL_ID='").append(CommonFunction.checkNull(dealId).trim()).append("' and r.DEAL_CUSTOMER_ID='").append(CommonFunction.checkNull(customerId).trim()).append("'  ").toString());

      logger.info(new StringBuilder().append("In getGroupExposureData() Query is ::: ").append(query.toString()).toString());
      ArrayList getGroupExposureDataDetail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getGroupExposureDataList ").append(getGroupExposureDataDetail.size()).toString());
      for (int i = 0; i < getGroupExposureDataDetail.size(); i++)
      {
        ArrayList data = (ArrayList)getGroupExposureDataDetail.get(i);
        if (data.size() > 0)
        {
          GcdGroupMasterVo groupVo = new GcdGroupMasterVo();
          groupVo.setCustomerId(CommonFunction.checkNull(data.get(0)).trim());
          groupVo.setCustomerName(CommonFunction.checkNull(data.get(1)).trim());
          if (CommonFunction.checkNull(groupType).trim().equalsIgnoreCase(""))
            groupType = CommonFunction.checkNull(data.get(2)).trim();
          groupVo.setGroupType(CommonFunction.checkNull(groupType).trim());
          groupVo.setGroupNameText(CommonFunction.checkNull(data.get(3)).trim());

          if (CommonFunction.checkNull(groupId).trim().equalsIgnoreCase(""))
          {
            groupVo.sethGroupId(CommonFunction.checkNull(data.get(4)).trim());
            grId = CommonFunction.checkNull(data.get(4)).trim();
          }
          else
          {
            groupVo.sethGroupId(CommonFunction.checkNull(groupId).trim());
            grId = groupId;
          }
          String groupDesc = "";
          String groupLimit = "0";
          String qry = new StringBuilder().append("select GROUP_DESC,GROUP_EXPOSURE_LIMIT from gcd_group_m where GROUP_ID='").append(CommonFunction.checkNull(grId).trim()).append("'").toString();
          logger.info(new StringBuilder().append("In getGroupExposureData() Group Detail : ").append(qry.toString()).toString());
          ArrayList exposureList = ConnectionDAO.sqlSelect(qry);
          if (exposureList.size() > 0)
          {
            ArrayList exposeData = (ArrayList)exposureList.get(0);
            if (exposeData.size() > 0)
            {
              groupDesc = CommonFunction.checkNull(exposeData.get(0)).trim();
              groupLimit = CommonFunction.checkNull(exposeData.get(1)).trim();
            }
          }
          groupVo.setGroupDescription(CommonFunction.checkNull(groupDesc).trim());
          if (CommonFunction.checkNull(groupLimit).trim().equalsIgnoreCase(""))
            groupLimit = "0";
          String customerGroup = CommonFunction.checkNull(data.get(5)).trim();
          if (CommonFunction.checkNull(customerGroup).trim().equalsIgnoreCase("")) {
            customerGroup = "0";
          }
          if (CommonFunction.checkNull(groupId).trim().equalsIgnoreCase(""))
          {
            if (CommonFunction.checkNull(customerGroup).trim().equalsIgnoreCase("0")) {
              customerGroup = groupLimit;
            }
          }
          else {
            customerGroup = groupLimit;
          }
          if (!CommonFunction.checkNull(customerGroup).equalsIgnoreCase(""))
          {
            Number reconNummF = this.myFormatter.parse(CommonFunction.checkNull(customerGroup).trim());
            groupVo.setGroupExposureLimit(this.myFormatter.format(reconNummF));
          }
          else
          {
            groupVo.setGroupExposureLimit("0.00");
          }

          list.add(groupVo);
          groupVo = null;
          query = null;
        }
        data = null;
      }

      getGroupExposureDataDetail = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return list;
  }

  public String saveGroupExposureLimit(GcdGroupMasterVo groupVo)
  {
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList qryList = new ArrayList();
    String status = "X";
    StringBuilder queryUpdate = new StringBuilder();
    queryUpdate.append("update cr_deal_customer_m set CUSTOMER_GROUP_DESC=?,CUSTOMER_GROUP_TYPE=?, CUSTOMER_GROUP_EXPOSURE_LIMIT=?,CUSTOMER_GROUP_ID=?  where CUSTOMER_ID=(select DEAL_CUSTOMER_ID from cr_deal_customer_role where  DEAL_CUSTOMER_ID=? and  deal_id=? ) ");

    if (CommonFunction.checkNull(groupVo.getGroupNameText()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(groupVo.getGroupNameText().trim());
    }
    if (CommonFunction.checkNull(groupVo.getGroupType()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(groupVo.getGroupType().trim());
    }
    if (CommonFunction.checkNull(groupVo.getGroupExposureLimit()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      try {
        insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(groupVo.getGroupExposureLimit().trim())).toString());
      }
      catch (ParseException e1) {
        e1.printStackTrace();
      }
    }

    if (CommonFunction.checkNull(groupVo.gethGroupId()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(groupVo.gethGroupId().trim());
    }
    if (CommonFunction.checkNull(groupVo.getCustomerId()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(groupVo.getCustomerId().trim());
    }

    if (CommonFunction.checkNull(groupVo.getDealId()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(groupVo.getDealId().trim());
    }
    insertPrepStmtObject.setSql(queryUpdate.toString());
    logger.info(new StringBuilder().append("IN saveGroupExposureLimit() update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
    qryList.add(insertPrepStmtObject);
    logger.info(new StringBuilder().append("In saveGroupExposureLimit ........ update query: ").append(queryUpdate).toString());

    PrepStmtObject updatePrepStmtObject = new PrepStmtObject();
    StringBuilder queryUpdateSanctionDate = new StringBuilder();
    queryUpdateSanctionDate.append("update cr_deal_loan_dtl set DEAL_SANCTION_VALID_TILL=?,DEAL_SANCTION_DATE=?  where DEAL_ID=?");

    updatePrepStmtObject.addNull();
    updatePrepStmtObject.addNull();
    if (CommonFunction.checkNull(groupVo.getDealId()).trim().equalsIgnoreCase(""))
      updatePrepStmtObject.addNull();
    else {
      updatePrepStmtObject.addString(groupVo.getDealId().trim());
    }
    updatePrepStmtObject.setSql(queryUpdateSanctionDate.toString());
    logger.info(new StringBuilder().append("IN saveGroupExposureLimit() update query1 ### ").append(updatePrepStmtObject.printQuery()).toString());
    qryList.add(updatePrepStmtObject);

    queryUpdate = null;
    try
    {
      boolean st = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      if (st)
      {
        status = "S";
      }
      logger.info(new StringBuilder().append("In saveGroupExposureLimit.........update status: ").append(status).toString());
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList getGroupExpLimitGrid(String dealId, String userId, String opUserId, String businessDate)
  {
    logger.info("In getGroupExpLimitGrid");
    ArrayList list = new ArrayList();
    CommonDealVo vo = null;
    String statusProc = null;
    boolean status = false;
    ArrayList in = new ArrayList();
    ArrayList out = new ArrayList();
    ArrayList outMessages = new ArrayList();
    String s1 = "";
    String s2 = "";
    StringBuilder query = new StringBuilder();
    try
    {
      in.add(CommonFunction.checkNull(dealId).trim());
      in.add(CommonFunction.checkNull(userId).trim());
      in.add(CommonFunction.checkNull(opUserId).trim());
      in.add(CommonFunction.changeFormat(CommonFunction.checkNull(businessDate).trim()));
      out.add(s1);
      out.add(s2);
      logger.info(new StringBuilder().append("callProcUnderWriterSerachData UNDERWRITER_SEARCH_DATA (").append(in.toString()).append(",").append(out.toString()).append(")").toString());
      outMessages = (ArrayList)ConnectionDAO.callSP("UNDERWRITER_SEARCH_DATA", in, out);
      s1 = CommonFunction.checkNull(outMessages.get(0));
      s2 = CommonFunction.checkNull(outMessages.get(1));
      logger.info(new StringBuilder().append("s1  : ").append(s1).toString());
      logger.info(new StringBuilder().append("s2  : ").append(s2).toString());
      query.append(" select c.CUSTOMER_ID,c.CUSTOMER_NAME,CUSTOMER_GROUP_TYPE,CUSTOMER_GROUP_DESC,CUSTOMER_GROUP_ID,");
      query.append(" g.GROUP_DESC,CUSTOMER_GROUP_EXPOSURE_LIMIT,G.GROUP_EXPOSURE_LIMIT,r.DEAL_CUSTOMER_ROLE_TYPE");
      query.append(" from cr_deal_customer_m c ");
      query.append(" join cr_deal_customer_role r on r.DEAL_CUSTOMER_ID=c.CUSTOMER_ID ");
      query.append(" left join gcd_group_m g on g.GROUP_ID=c.CUSTOMER_GROUP_ID ");
      query.append(new StringBuilder().append(" where r.DEAL_ID='").append(CommonFunction.checkNull(dealId).trim()).append("' ").toString());

      logger.info(new StringBuilder().append("In getGroupExpLimitGrid() Query is    :  ").append(query.toString()).toString());
      ArrayList getGroupExposureDataDetail = ConnectionDAO.sqlSelect(query.toString());
      for (int i = 0; i < getGroupExposureDataDetail.size(); i++)
      {
        ArrayList data = (ArrayList)getGroupExposureDataDetail.get(i);
        if (data.size() > 0)
        {
          GcdGroupMasterVo groupVo = new GcdGroupMasterVo();
          groupVo.setCustomerId(CommonFunction.checkNull(data.get(0)).trim());
          groupVo.setCustomerName(CommonFunction.checkNull(data.get(1)).trim());
          groupVo.setGroupType(CommonFunction.checkNull(data.get(2)).trim());
          if (CommonFunction.checkNull(groupVo.getGroupType()).equalsIgnoreCase("E"))
          {
            groupVo.setGroupNameText(CommonFunction.checkNull(data.get(5)).trim());
            groupVo.setGroupType("Existing");
          }
          else
          {
            groupVo.setGroupNameText(CommonFunction.checkNull(data.get(3)).trim());
            groupVo.setGroupType("New");
          }
          groupVo.sethGroupId(CommonFunction.checkNull(data.get(4)).trim());
          if ((CommonFunction.checkNull(groupVo.getGroupType()).equalsIgnoreCase("E")) && (CommonFunction.checkNull(data.get(6)).equalsIgnoreCase("")))
          {
            if (!CommonFunction.checkNull(data.get(7)).equalsIgnoreCase(""))
            {
              Number reconNummF = this.myFormatter.parse(CommonFunction.checkNull(data.get(7)).trim());
              groupVo.setGroupExposureLimit(this.myFormatter.format(reconNummF));
            }
            else
            {
              groupVo.setGroupExposureLimit("0.00");
            }
          }
          else
          {
            Number reconNummF = Integer.valueOf(0);
            if (CommonFunction.checkNull(data.get(6)).equals(""))
            {
              reconNummF = Integer.valueOf(0);
            }
            else
            {
              reconNummF = this.myFormatter.parse(CommonFunction.checkNull(data.get(6)).trim());
            }
            groupVo.setGroupExposureLimit(this.myFormatter.format(reconNummF));
          }
          if (CommonFunction.checkNull(groupVo.getGroupType()).equalsIgnoreCase("N"))
          {
            if (!CommonFunction.checkNull(data.get(6)).equalsIgnoreCase(""))
            {
              Number reconNummF = this.myFormatter.parse(CommonFunction.checkNull(data.get(6)).trim());
              groupVo.setGroupExposureLimit(this.myFormatter.format(reconNummF));
            }
            else
            {
              groupVo.setGroupExposureLimit("0.00");
            }
          }
          groupVo.setApplicantCat(CommonFunction.checkNull(data.get(8)).trim());
          list.add(groupVo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      vo = null;
      statusProc = null;
      in.clear();
      in = null;
      out.clear();
      out = null;
      outMessages.clear();
      outMessages = null;
      query = null;
    }
    return list;
  }

  public ArrayList fetchDueDayNextDate(String repayEffectiveDate)
  {
    ArrayList list = new ArrayList();
    try {
      String currDay = "0";
      if (!CommonFunction.checkNull(repayEffectiveDate).equalsIgnoreCase(""))
      {
        currDay = repayEffectiveDate.substring(0, 2);
      }

      logger.info(new StringBuilder().append("repayEffectiveDate: ").append(repayEffectiveDate).append(" currDay: ").append(CommonFunction.removePadding(currDay)).toString());
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select DUE_DAY,DATE_FORMAT(DATE_ADD(DATE_ADD(LAST_DAY(STR_TO_DATE('").append(repayEffectiveDate).append("', '").append(this.dateFormat).append("')), interval 1 day),INTERVAL DUE_DAY-1 day),'").append(this.dateFormat).append("') as 'NEXT_DUE_DATE' FROM com_next_due_date_m WHERE REC_STATUS='A' AND '").append(CommonFunction.removePadding(currDay)).append("' BETWEEN FROM_DATE AND TO_DATE").toString());
      logger.info(new StringBuilder().append("fetchDueDayNextDate: ").append(query.toString()).toString());
      LoanDetailVo vo = null;
      ArrayList source = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("fetchDueDayNextDate: ").append(source.size()).toString());

      query = null;

      for (int i = 0; i < source.size(); i++) {
        logger.info(new StringBuilder().append("fetchDueDayNextDate: ").append(source.get(i).toString()).toString());
        ArrayList subsource = (ArrayList)source.get(i);
        if (subsource.size() > 0)
        {
          logger.info(new StringBuilder().append("fetchDueDayNextDate: ").append(subsource.size()).toString());
          vo = new LoanDetailVo();
          vo.setCycleDate(CommonFunction.checkNull(subsource.get(0)).trim());
          vo.setNextDueDate(CommonFunction.checkNull(subsource.get(1)).trim());
          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getEMIAmount(String dealId)
  {
    ArrayList data = new ArrayList();
    Viability vo = new Viability();
    String amount = "";
    StringBuilder query = new StringBuilder();
    try {
      query.append(new StringBuilder().append("select DISTINCT INSTL_AMOUNT from cr_deal_repaysch_dtl where DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId))).append("'").toString());
      logger.info(new StringBuilder().append("query::::::emiAmount::::::::::::").append(query).toString());
      amount = ConnectionDAO.singleReturn(query.toString());
      logger.info(new StringBuilder().append(":::::::::amount::::::::::::").append(amount).toString());
      vo = new Viability();
      if (CommonFunction.checkNull(amount).equalsIgnoreCase("")) {
        vo.setEpmonth("0.0000");
      } else {
        Number emi = this.myFormatter.parse(amount);
        vo.setEpmonth(this.myFormatter.format(emi));
      }
      data.add(vo);
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      query = null;
      amount = null;
    }
    return data;
  }

  public boolean checkEMIAmountInViability(String dealId)
  {
    String checkDealId = "";
    String checkEMIAmnt = "";
    String viabilityStatus = "";
    boolean status = false;
    int count1 = 0;
    int count2 = 0;
    StringBuilder query1 = new StringBuilder();
    StringBuilder query2 = new StringBuilder();
    try {
      query1.append(new StringBuilder().append(" select count(*) from cr_viability_dtl where DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' ").toString());
      checkDealId = ConnectionDAO.singleReturn(query1.toString());
      count1 = Integer.parseInt(checkDealId);
      logger.info(new StringBuilder().append("query1:::::::::::::::::::::::::").append(query1).append(":::::::count=").append(count1).toString());
      if (count1 > 0) {
        query2.append(new StringBuilder().append(" select count(*) from cr_viability_dtl v join cr_deal_repaysch_dtl d where d.DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' AND d.INSTL_AMOUNT=v.EMI_PER_MONTH ").toString());
        checkEMIAmnt = ConnectionDAO.singleReturn(query2.toString());
        count2 = Integer.parseInt(checkEMIAmnt);
        logger.info(new StringBuilder().append("query2:::::::::::::::::::::::::").append(query2).append(":::::::count=").append(count2).toString());
        if (count2 == 0)
        {
          status = true;
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      query1 = null;
      query2 = null;
      checkEMIAmnt = null;
    }
    logger.info(new StringBuilder().append("status::::::::::::::::::::").append(status).toString());
    return status;
  }

  public ArrayList fetchDueDay(String repayEffectiveDate, String cycleDate)
  {
    ArrayList list = new ArrayList();
    try
    {
      logger.info(new StringBuilder().append("repayEffectiveDate: ").append(repayEffectiveDate).append(" cycleDate: ").append(CommonFunction.removePadding(cycleDate)).toString());
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select DUE_DAY,DATE_FORMAT(DATE_ADD(DATE_ADD(LAST_DAY(STR_TO_DATE('").append(repayEffectiveDate).append("', '").append(this.dateFormat).append("')), interval 1 day),INTERVAL '").append(CommonFunction.removePadding(cycleDate)).append("'-1 day),'").append(this.dateFormat).append("') as 'NEXT_DUE_DATE' FROM com_next_due_date_m WHERE REC_STATUS='A' AND '").append(CommonFunction.removePadding(cycleDate)).append("' BETWEEN FROM_DATE AND TO_DATE").toString());
      logger.info(new StringBuilder().append("fetchDueDayNextDate: ").append(query.toString()).toString());
      LoanDetailVo vo = null;
      ArrayList source = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("fetchDueDayNextDate: ").append(source.size()).toString());

      query = null;

      for (int i = 0; i < source.size(); i++)
      {
        logger.info(new StringBuilder().append("fetchDueDayNextDate: ").append(source.get(i).toString()).toString());
        ArrayList subsource = (ArrayList)source.get(i);
        if (subsource.size() > 0)
        {
          logger.info(new StringBuilder().append("fetchDueDayNextDate: ").append(subsource.size()).toString());
          vo = new LoanDetailVo();
          vo.setCycleDate(CommonFunction.checkNull(subsource.get(0)).trim());
          vo.setNextDueDate(CommonFunction.checkNull(subsource.get(1)).trim());
          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList<CommonDealVo> queryResponseSearchDetail(CommonDealVo vo)
  {
    ArrayList list = new ArrayList();
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    logger.info(new StringBuilder().append("here userid++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ").append(vo.getReportingToUserId()).toString());
    String userNameQ = new StringBuilder().append("select USER_NAME from sec_user_m where REC_STATUS='A' and USER_ID='").append(vo.getReportingToUserId()).append("'").toString();
    String userName = ConnectionDAO.singleReturn(userNameQ);
    logger.info(new StringBuilder().append("userNameQ: ").append(userNameQ).append(" userName: ").append(userName).toString());
    ArrayList header = new ArrayList();

    String branch = "";
    if (vo.getAllBranches().equalsIgnoreCase("on"))
    {
      String branchMappedToUserQuery = new StringBuilder().append("SELECT GROUP_CONCAT(BRANCH_ID) FROM sec_user_branch_dtl WHERE USER_ID='").append(CommonFunction.checkNull(vo.getReportingToUserId()).trim()).append("' AND REC_STATUS='A'").toString();
      branch = ConnectionDAO.singleReturn(branchMappedToUserQuery);
      logger.info(new StringBuilder().append("branchMappedToUserQuery: ").append(branchMappedToUserQuery).append("      branches maped to user:   ").append(branch).toString());
    }
    else
    {
      branch = vo.getBranchId();
    }

    if (CommonFunction.checkNull(branch).equalsIgnoreCase(""))
    {
      branch = vo.getBranchId();
    }

    try
    {
      logger.info("Inside queryResponseSearchDetail.....");

      CommonDealVo fetchVo = vo;
      boolean appendSQL = false;
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append(" select distinct d.DEAL_ID,DEAL_NO,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC from cr_deal_dtl d");
      bufInsSqlTempCount.append("SELECT COUNT(distinct d.DEAL_ID,DEAL_NO,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC) FROM cr_deal_dtl d ");

      bufInsSql.append(" inner join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
      bufInsSqlTempCount.append(" inner join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");

      bufInsSql.append(" inner join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
      bufInsSqlTempCount.append(" inner join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");

      bufInsSql.append(" inner join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
      bufInsSqlTempCount.append(" inner join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");

      bufInsSql.append(" inner join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
      bufInsSqlTempCount.append(" inner join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");

      bufInsSql.append(new StringBuilder().append(" inner join deal_query_dtl q on d.DEAL_ID=q.DEAL_ID AND q.RESOLUTION_STATUS='P' and q.USER_ID='").append(StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()).append("'  ").toString());
      bufInsSqlTempCount.append(new StringBuilder().append(" inner join deal_query_dtl q on d.DEAL_ID=q.DEAL_ID AND q.RESOLUTION_STATUS='P' and q.USER_ID='").append(StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()).append("'  ").toString());

      if ((!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase("")) && (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on")))
      {
        bufInsSql.append(new StringBuilder().append("WHERE D.REC_STATUS NOT IN ('A','X') AND  d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(") and d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE D.REC_STATUS NOT IN ('A','X') AND d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(") and d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
      }

      if ((vo.getLbxDealNo().equalsIgnoreCase("")) || (vo.getCustomername().equalsIgnoreCase("")) || (vo.getLbxProductID().equalsIgnoreCase("")) || (vo.getLbxscheme().equalsIgnoreCase("")) || (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on"))) {
        appendSQL = true;
      }

      if (appendSQL) {
        logger.info("In Where Clause");

        bufInsSql.append(new StringBuilder().append(" WHERE D.REC_STATUS NOT IN ('A','X') AND  d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(")").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE D.REC_STATUS NOT IN ('A','X') AND  d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(")").toString());
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' ").toString());
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' ").toString());
        appendSQL = true;
      }
      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("' ").toString());
        appendSQL = true;
      }
      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
        appendSQL = true;
      }
      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on")) {
        bufInsSql.append(new StringBuilder().append("AND d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(") ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(") ").toString());
        appendSQL = true;
      }
      LoggerMsg.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));

      if (((StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim() == null) && (StringEscapeUtils.escapeSql(vo.getCustomername()).trim() == null)) || ((StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim().equalsIgnoreCase("")) && (StringEscapeUtils.escapeSql(vo.getCustomername()).trim().equalsIgnoreCase(""))) || ((StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim() == null) && (StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim().equalsIgnoreCase(""))) || ((StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim() == null) && (StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim().equalsIgnoreCase(""))) || (vo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(vo.getCurrentPageLink()).toString());
        if (vo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (vo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());

      header = ConnectionDAO.sqlSelect(bufInsSql.toString());

      for (int i = 0; i < header.size(); i++)
      {
        logger.info(new StringBuilder().append("header: ").append(header.size()).toString());
        ArrayList header1 = (ArrayList)header.get(i);
        if ((header1 != null) && (header1.size() > 0))
        {
          logger.info(new StringBuilder().append("header list size .....................").append(header.size()).toString());
          fetchVo = new CommonDealVo();

          fetchVo.setLbxDealNo(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0))).trim());

          fetchVo.setDealNo(new StringBuilder().append("<a href=\"#\" onclick=\"searchDealAtQueryResponse('").append(CommonFunction.checkNull(header1.get(0)).toString()).append("');\">").append(CommonFunction.checkNull(header1.get(1)).toString()).append("</a>").toString());
          fetchVo.setCustomername(CommonFunction.checkNull(header1.get(2)).trim());
          fetchVo.setProduct(CommonFunction.checkNull(header1.get(3)).trim());
          fetchVo.setScheme(CommonFunction.checkNull(header1.get(4)).trim());
          fetchVo.setReportingToUserId(userName);
          fetchVo.setTotalRecordSize(count);
          list.add(fetchVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return list;
  }

  public boolean saveQueryResponseData(Object ob)
  {
    QueryProcessingVo vo = (QueryProcessingVo)ob;

    logger.info("In saveQueryResponseData....... mode ");

    this.qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = null;

    String[] dealQueryResponseId = vo.getDealQueryResponseId();
    logger.info(new StringBuilder().append("dealQueryResponseId: ").append(dealQueryResponseId).toString());
    for (int k = 0; k < dealQueryResponseId.length; k++)
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("update deal_query_dtl set resolution_status=?,resolution_remarks=?,resolution_datetime=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),user_id=? where DEAL_QUERY_ID=? ").toString());
      insertPrepStmtObject = new PrepStmtObject();

      insertPrepStmtObject.addString("R");

      if (CommonFunction.checkNull(vo.getResolutionRemarks()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getResolutionRemarks().trim());
      }
      if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerDate().trim());
      }

      if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getMakerDate().trim());
      }
      if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getUserId().trim());
      }
      if (CommonFunction.checkNull(dealQueryResponseId[k]).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(dealQueryResponseId[k].trim());
      }
      insertPrepStmtObject.setSql(query.toString());

      logger.info(new StringBuilder().append("IN updateUnderwritingQueryData() update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      this.qryList.add(insertPrepStmtObject);
    }

    boolean status = false;
    try {
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
    } catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList getQueryResponseData(String dealId, String userId, String queryStatus) {
    ArrayList list = new ArrayList();
    try {
      logger.info(new StringBuilder().append("In getQueryResponseData..........................DAOImpl").append(queryStatus).toString());
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select deal_id,DATE_FORMAT(query_date,'").append(this.dateFormatWithTime).append("'),query_remarks,if(resolution_status='P','Pending','Resolved') as resolution_status,DATE_FORMAT(resolution_datetime,'").append(this.dateFormatWithTime).append("'),resolution_remarks,u.USER_NAME,resolution_status,DEAL_QUERY_ID,m.USER_NAME, ").append(" CASE q.QUERY_TYPE WHEN 'CRT'  THEN 'CRITERIA RELATED' WHEN 'CLA'  THEN 'CLARIFICATION RELATED' WHEN 'BNK'  THEN 'BANK RELATED' WHEN 'DOC'  THEN 'DOCUMENTS RELATED' WHEN 'MJD'  THEN 'MAJOR DEBTOR' WHEN 'MAC'  THEN 'MAJOR CREDITOR' ELSE '' END AS QUERYTYPE").append(" from deal_query_dtl q left join sec_user_m u on u.user_id=q.user_id left join sec_user_m m on m.user_id=q.maker_id ").append("     where deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' ").toString());

      if (CommonFunction.checkNull(queryStatus).equalsIgnoreCase("Y"))
      {
        query.append(new StringBuilder().append(" and resolution_status='P' and q.user_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(userId)).trim()).append("'").toString());
      }

      logger.info(new StringBuilder().append("In getQueryResponseData...............query...........DAOImpl").append(query).toString());
      QueryProcessingVo vo = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());

      query = null;

      for (int i = 0; i < product.size(); i++)
      {
        ArrayList data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          vo = new QueryProcessingVo();
          vo.setDealId(CommonFunction.checkNull(data.get(0)).trim());
          vo.setQueryDate(CommonFunction.checkNull(data.get(1)).trim());
          vo.setQueryRemarks(CommonFunction.checkNull(data.get(2)).trim());
          vo.setResolution(CommonFunction.checkNull(data.get(3)).trim());
          vo.setResolutionDate(CommonFunction.checkNull(data.get(4)).trim());
          vo.setResolutionRemarks(CommonFunction.checkNull(data.get(5)).trim());
          vo.setUserId(CommonFunction.checkNull(data.get(6)).trim());
          vo.setResolutionStatus(CommonFunction.checkNull(data.get(7)).trim());
          vo.setDealQueryId(CommonFunction.checkNull(data.get(8)).trim());
          vo.setQueryRaised(CommonFunction.checkNull(data.get(9)).trim());
          vo.setQueryTypeDesc(CommonFunction.checkNull(data.get(10)).trim());
          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getNoOfDisbAtUnderWriter(String dealId)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select distinct DATE_FORMAT(LOAN_AGREEMENT_DATE,'").append(this.dateFormat).append("'),DATE_FORMAT(LOAN_REPAY_EFF_DATE,'").append(this.dateFormat).append("'),LOAN_NUMBER_DISBURSAL,DISBURSAL_NO,DISBURSAL_STAGE,").append(" PROPOSED_DISBURSAL_AMOUNT,DISBURSAL_DESCRIPTION,DATE_FORMAT(PROPOSED_DISBURSAL_DATE,'").append(this.dateFormat).append("'),LOAN_LOAN_AMOUNT").append(" from cr_deal_loan_dtl L").append(" left JOIN cr_loan_disbursalsch_dtl D on D.LOAN_ID=L.LOAN_ID").append(" where L.DEAL_ID=").append(dealId).toString());

      logger.info(new StringBuilder().append("getNoOfDisb Queryl: ").append(query).toString());

      NoOfDisbursalVo nVo = null;
      ArrayList disbdeatail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getNoOfDisb OUTER ARRAYLIST SIZE: ").append(disbdeatail.size()).toString());
      for (int i = 0; i < disbdeatail.size(); i++)
      {
        logger.info(new StringBuilder().append("getDocumentsDetail").append(disbdeatail.get(i).toString()).toString());
        ArrayList disbdeatail1 = (ArrayList)disbdeatail.get(i);
        logger.info(new StringBuilder().append("getNoOfDisb INNNER ARRAYLIST SIZE: ").append(disbdeatail1.size()).toString());
        if (disbdeatail1.size() > 0)
        {
          nVo = new NoOfDisbursalVo();
          nVo.setLoanAgrementDate(CommonFunction.checkNull(disbdeatail1.get(0)).trim());
          nVo.setRepayEffectiveDate(CommonFunction.checkNull(disbdeatail1.get(1)).trim());
          nVo.setDisbNoInLoan(CommonFunction.checkNull(disbdeatail1.get(2)).trim());
          nVo.setDisbNo(CommonFunction.checkNull(disbdeatail1.get(3)).trim());
          nVo.setSatge(CommonFunction.checkNull(disbdeatail1.get(4)).trim());

          if (!CommonFunction.checkNull(disbdeatail1.get(5)).equalsIgnoreCase(""))
          {
            Number Amount = this.myFormatter.parse(CommonFunction.checkNull(disbdeatail1.get(5)).trim());
            logger.info(new StringBuilder().append("LoanAmount: ").append(Amount).toString());
            nVo.setDisAmount(this.myFormatter.format(Amount));
          }
          else
          {
            nVo.setDisAmount("");
          }

          nVo.setDescDis(CommonFunction.checkNull(disbdeatail1.get(6)).trim());
          nVo.setDateDis(CommonFunction.checkNull(disbdeatail1.get(7)).trim());
          if (!CommonFunction.checkNull(disbdeatail1.get(8)).equalsIgnoreCase(""))
          {
            Number LoanAmount = this.myFormatter.parse(CommonFunction.checkNull(disbdeatail1.get(8)).trim());
            nVo.setLoanAmount(this.myFormatter.format(LoanAmount));
          }
          list.add(nVo);
        }
      }
      query = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getSecurityType()
  {
    ArrayList list = new ArrayList();
    try {
      logger.info("Enter getSecurityType()");
      String query = "select value,description from generic_master where GENERIC_KEY='SECURITY_TYPE' and rec_status ='A'";
      logger.info(new StringBuilder().append("Query :  ").append(query).toString());
      ArrayList securityList = ConnectionDAO.sqlSelect(query);
      logger.info(new StringBuilder().append("SecurityList Size : ").append(securityList.size()).toString());
      for (int i = 0; i < securityList.size(); i++) {
        logger.info(new StringBuilder().append("getNatureOfBusinessList ").append(securityList.get(i).toString()).toString());
        ArrayList subList = (ArrayList)securityList.get(i);
        if (subList.size() > 0)
        {
          logger.info(new StringBuilder().append("getNatureOfBusinessList ").append(subList.size()).toString());
          CollateralVo vo = new CollateralVo();
          vo.setSecurityCode(CommonFunction.checkNull(subList.get(0)).toString());
          vo.setSecurityDesc(CommonFunction.checkNull(subList.get(1)).toString());
          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public String saveSpecialCondition(SpecialConditionVo vo)
  {
    this.qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String res = "E";
    logger.info("In insert saveSpecialCondition");
    StringBuffer bufInsSql = new StringBuffer();
    bufInsSql.append("insert into cr_deal_special_condition_m(DEAL_ID,DEAL_LOAN_ID,DEAL_SPECIAL_CONDITION,DEAL_SPECIAL_CATEGORY,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)");
    bufInsSql.append(" values ( ");
    bufInsSql.append(" ?,");
    bufInsSql.append(" ?,");
    bufInsSql.append(" ?,");
    bufInsSql.append(" ?,");
    bufInsSql.append(" ?,");
    bufInsSql.append(" ?,");
    bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND), ").toString());
    bufInsSql.append(" ?,");
    bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

    if (CommonFunction.checkNull(vo.getDealId()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else
      insertPrepStmtObject.addString(vo.getDealId().trim());
    if (CommonFunction.checkNull(vo.getDealLoanId()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getDealLoanId().trim());
    }
    if (CommonFunction.checkNull(vo.getSpecialCondition()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getSpecialCondition().trim());
    }
    if (CommonFunction.checkNull(vo.getSpecialCategory()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getSpecialCategory().trim());
    }
    insertPrepStmtObject.addString("A");

    if (CommonFunction.checkNull(vo.getMakerId()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getMakerId().trim());
    }

    if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getMakerDate().trim());
    }
    if (CommonFunction.checkNull(vo.getMakerId()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getMakerId().trim());
    }

    if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getMakerDate().trim());
    }
    insertPrepStmtObject.setSql(bufInsSql.toString());
    logger.info(new StringBuilder().append("IN saveSpecialCondition() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

    bufInsSql = null;

    this.qryList.add(insertPrepStmtObject);
    boolean status = false;
    try {
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    logger.info(new StringBuilder().append("In saveSpecialCondition STATUS......................").append(status).toString());
    if (status)
    {
      res = "S";
    }

    return res;
  }

  public boolean deleteOtherChargesPlanInDeal(String id, String markedRow, String stage) {
    logger.info("In deleteOtherChargesPlanInDeal()");
    PrepStmtObject insertPrepStmtObject = null;
    StringBuilder qry = new StringBuilder();
    ArrayList list = new ArrayList();
    boolean status = false;
    try
    {
      insertPrepStmtObject = new PrepStmtObject();
      if (CommonFunction.checkNull(stage).trim().equalsIgnoreCase("LIM"))
        qry.append(new StringBuilder().append("DELETE FROM cr_loan_charge_plan_dtl WHERE LOAN_ID='").append(CommonFunction.checkNull(id).trim()).append("' and CHARGE_PLAN_ID in(").append(CommonFunction.checkNull(markedRow).trim()).append(")").toString());
      else
        qry.append(new StringBuilder().append("DELETE FROM cr_deal_charge_plan_dtl WHERE DEAL_ID='").append(CommonFunction.checkNull(id).trim()).append("' and CHARGE_PLAN_ID in(").append(CommonFunction.checkNull(markedRow).trim()).append(")").toString());
      logger.info(new StringBuilder().append("In deleteOtherChargesPlanInDeal() Delete Query  :  ").append(qry.toString()).toString());
      insertPrepStmtObject.setSql(qry.toString());
      list.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(list);
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      insertPrepStmtObject = null;
      qry = null;
    }
    return status;
  }

  public boolean saveOtherChargesPlanInDeal(OtherChargesPlanVo ipvo) {
    logger.info("In saveOtherChargesPlanInDeal");
    String[] FromInstallment = ipvo.getFromInstall();
    String[] ToInstallment = ipvo.getToInstall();
    String[] type = ipvo.getType();
    String InstallmentType = ipvo.getInstallmentType();
    String TotalInstallment = ipvo.getTotalInstallment();
    String toInstallment = ipvo.getToInstallment();
    String[] amount = ipvo.getAmount();
    String[] chargeCode = ipvo.getChargehiddenFld();
    String loanId = ipvo.getLoanId();
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = null;
    StringBuffer bufInsSql = new StringBuffer();
    StringBuilder checkQ = new StringBuilder();
    StringBuilder qry = new StringBuilder();
    boolean status = false;
    try
    {
      if (CommonFunction.checkNull(ipvo.getStage()).trim().equalsIgnoreCase("LIM"))
      {
        try
        {
          checkQ.append(new StringBuilder().append("select count(*) from cr_loan_charge_plan_dtl where LOAN_ID=").append(CommonFunction.checkNull(ipvo.getLoanId()).trim()).append("").toString());
          String count = ConnectionDAO.singleReturn(checkQ.toString());
          checkQ = null;
          if (Integer.parseInt(count) > 0)
          {
            insertPrepStmtObject = new PrepStmtObject();
            qry.append(new StringBuilder().append("DELETE FROM cr_loan_charge_plan_dtl WHERE LOAN_ID='").append(CommonFunction.checkNull(ipvo.getLoanId()).trim()).append("'").toString());
            insertPrepStmtObject.setSql(qry.toString());
            qryList.add(insertPrepStmtObject);
            qry = null;
          }
          if (!CommonFunction.checkNull(FromInstallment).trim().equalsIgnoreCase(""))
          {
            for (int k = 0; k < FromInstallment.length; k++)
            {
              bufInsSql = new StringBuffer();
              insertPrepStmtObject = new PrepStmtObject();
              insertPrepStmtObject = new PrepStmtObject();
              bufInsSql.append(new StringBuilder().append("insert into cr_loan_charge_plan_dtl (LOAN_ID,FROM_INSTL_NO,TO_INSTL_NO,CHARGE_TYPE,AMOUNT,CHARGE_CODE,REC_STATUS,MAKER_ID,MAKER_DATE) values(?,?,?,?,?,?,?,?,DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND))").toString());

              if (CommonFunction.checkNull(ipvo.getLoanId()).trim().equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else {
                insertPrepStmtObject.addString(ipvo.getLoanId().trim());
              }
              if (CommonFunction.checkNull(FromInstallment[k]).trim().equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else {
                insertPrepStmtObject.addString(FromInstallment[k].trim());
              }
              if (CommonFunction.checkNull(ToInstallment[k]).trim().equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else {
                insertPrepStmtObject.addString(ToInstallment[k].trim());
              }
              insertPrepStmtObject.addString("F");

              if (CommonFunction.checkNull(amount[k]).trim().equalsIgnoreCase(""))
                insertPrepStmtObject.addString("0.00");
              else {
                insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(amount[k]).trim()).toString());
              }
              if (CommonFunction.checkNull(chargeCode[k]).trim().equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else {
                insertPrepStmtObject.addString(chargeCode[k].trim());
              }
              insertPrepStmtObject.addString("P");

              if (CommonFunction.checkNull(ipvo.getMakerId()).equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else {
                insertPrepStmtObject.addString(CommonFunction.checkNull(ipvo.getMakerId()).trim());
              }
              if (CommonFunction.checkNull(ipvo.getMakerDate()).equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else
                insertPrepStmtObject.addString(CommonFunction.checkNull(ipvo.getMakerDate()).trim());
              insertPrepStmtObject.setSql(bufInsSql.toString());
              logger.info(new StringBuilder().append("IN saveOtherChargesPlanInDeal() LOAN insert query1 ### DAO IMPL ").append(insertPrepStmtObject.printQuery()).toString());
              qryList.add(insertPrepStmtObject);
              bufInsSql = null;
            }
          }

          status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
        }
        catch (Exception e) {
          e.printStackTrace();
        }
      }
      else
        try
        {
          checkQ.append(new StringBuilder().append("select count(*) from cr_deal_charge_plan_dtl where DEAL_ID=").append(CommonFunction.checkNull(ipvo.getDealId()).trim()).append("").toString());
          String count = ConnectionDAO.singleReturn(checkQ.toString());
          checkQ = null;
          if (!count.equalsIgnoreCase("0"))
          {
            insertPrepStmtObject = new PrepStmtObject();
            qry.append(new StringBuilder().append("DELETE FROM cr_deal_charge_plan_dtl WHERE DEAL_ID='").append(CommonFunction.checkNull(ipvo.getDealId()).trim()).append("'").toString());
            insertPrepStmtObject.setSql(qry.toString());
            qryList.add(insertPrepStmtObject);
            qry = null;
          }
          if (!CommonFunction.checkNull(FromInstallment).trim().equalsIgnoreCase(""))
          {
            for (int k = 0; k < FromInstallment.length; k++)
            {
              bufInsSql = new StringBuffer();
              insertPrepStmtObject = new PrepStmtObject();

              insertPrepStmtObject = new PrepStmtObject();
              bufInsSql.append(new StringBuilder().append("insert into cr_deal_charge_plan_dtl (DEAL_ID,DEAL_LOAN_ID,FROM_INSTL_NO,TO_INSTL_NO,CHARGE_TYPE,AMOUNT,CHARGE_CODE,REC_STATUS,MAKER_ID,MAKER_DATE) values(?,?,?,?,?,?,?,?,?,DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND))").toString());

              if (CommonFunction.checkNull(ipvo.getDealId()).trim().equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else {
                insertPrepStmtObject.addString(ipvo.getDealId().trim());
              }
              if (CommonFunction.checkNull(ipvo.getLoanId()).trim().equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else {
                insertPrepStmtObject.addString(ipvo.getLoanId().trim());
              }
              if (CommonFunction.checkNull(FromInstallment[k]).trim().equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else {
                insertPrepStmtObject.addString(FromInstallment[k].trim());
              }
              if (CommonFunction.checkNull(ToInstallment[k]).trim().equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else
                insertPrepStmtObject.addString(ToInstallment[k].trim());
              insertPrepStmtObject.addString("F");

              if (CommonFunction.checkNull(amount[k]).trim().equalsIgnoreCase(""))
                insertPrepStmtObject.addString("0.00");
              else {
                insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(amount[k]).trim()).toString());
              }
              if (CommonFunction.checkNull(chargeCode[k]).trim().equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else {
                insertPrepStmtObject.addString(chargeCode[k].trim());
              }
              insertPrepStmtObject.addString("P");

              if (CommonFunction.checkNull(ipvo.getMakerId()).equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else {
                insertPrepStmtObject.addString(CommonFunction.checkNull(ipvo.getMakerId()).trim());
              }
              if (CommonFunction.checkNull(ipvo.getMakerDate()).equalsIgnoreCase(""))
                insertPrepStmtObject.addNull();
              else {
                insertPrepStmtObject.addString(CommonFunction.checkNull(ipvo.getMakerDate()).trim());
              }
              insertPrepStmtObject.setSql(bufInsSql.toString());
              logger.info(new StringBuilder().append("IN saveOtherChargesPlanInDeal() DEAL insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
              qryList.add(insertPrepStmtObject);
              bufInsSql = null;
            }
          }

          status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
        }
        catch (Exception e) {
          e.printStackTrace();
        }
      logger.info(new StringBuilder().append("In saveOtherChargesPlanInDeal......................").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      FromInstallment = null;
      ToInstallment = null;
      type = null;
      InstallmentType = null;
      TotalInstallment = null;
      toInstallment = null;
      amount = null;
      chargeCode = null;
      loanId = null;
      qryList = null;
      insertPrepStmtObject = null;
      bufInsSql = null;
      checkQ = null;
      qry = null;
      ipvo = null;
    }
    return status;
  }

  public ArrayList getOtherPeriodicalChargeDetailInDeal(String id, String stage)
  {
    ArrayList list = new ArrayList();
    ArrayList mainList = new ArrayList();
    ArrayList subList = new ArrayList();
    StringBuilder query = new StringBuilder();
    OtherChargesPlanVo ipVo = null;
    try
    {
      if (stage.equalsIgnoreCase("D"))
      {
        query.append(new StringBuilder().append("select D.FROM_INSTL_NO,D.TO_INSTL_NO,D.CHARGE_TYPE,D.AMOUNT ,C.CHARGE_CODE,C.CHARGE_DESC, L.DEAL_INSTALLMENT_TYPE,L.DEAL_NO_OF_INSTALLMENT,L.DEAL_RATE_TYPE,L.DEAL_LOAN_AMOUNT,D.CHARGE_PLAN_ID  from cr_deal_loan_dtl L join cr_deal_charge_plan_dtl D on D.DEAL_ID=L.DEAL_ID  join com_charge_code_m C  on(C.CHARGE_CODE=D.CHARGE_CODE) where L.DEAL_ID=").append(id).append("").toString());
      }
      else if (stage.equalsIgnoreCase("L"))
      {
        query.append(new StringBuilder().append("select D.FROM_INSTL_NO,D.TO_INSTL_NO,D.CHARGE_TYPE,D.AMOUNT,C.CHARGE_CODE,C.CHARGE_DESC,L.LOAN_INSTALLMENT_TYPE, L.LOAN_NO_OF_INSTALLMENT,L.LOAN_RATE_TYPE,L.LOAN_LOAN_AMOUNT,D.CHARGE_PLAN_ID   from cr_loan_dtl L  JOIN cr_loan_charge_plan_dtl D on D.LOAN_ID=L.LOAN_ID  join com_charge_code_m C on(C.CHARGE_CODE=D.CHARGE_CODE)  where L.LOAN_ID=").append(id).append("").toString());
      }

      logger.info(new StringBuilder().append("getOtherPeriodicalChargeDetailInDeal Queryl: ").append(query).toString());
      mainList = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      for (int i = 0; i < mainList.size(); i++)
      {
        subList = (ArrayList)mainList.get(i);
        if (subList.size() > 0)
        {
          ipVo = new OtherChargesPlanVo();
          ipVo.setFromInstallment(CommonFunction.checkNull(subList.get(0)).trim());
          ipVo.setToInstallment(CommonFunction.checkNull(subList.get(1)).trim());
          ipVo.setChargeType("FLAT");
          if (!CommonFunction.checkNull(subList.get(3)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(3)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            ipVo.setChargeAmount(this.myFormatter.format(reconNum));
          }
          else
          {
            ipVo.setChargeAmount("0.00");
          }
          ipVo.setChargeCode(CommonFunction.checkNull(subList.get(4)).trim());
          ipVo.setChargeDesc(CommonFunction.checkNull(subList.get(5)).trim());
          ipVo.setInstallmentType(CommonFunction.checkNull(subList.get(6)).trim());
          ipVo.setTotalInstallment(CommonFunction.checkNull(subList.get(7)).trim());
          ipVo.setRateType(CommonFunction.checkNull(subList.get(8)).trim());
          if (!CommonFunction.checkNull(subList.get(9)).equalsIgnoreCase(""))
          {
            Number instam = this.myFormatter.parse(CommonFunction.checkNull(subList.get(9)).trim());
            ipVo.setLoanAmount(this.myFormatter.format(instam));
          }
          else
          {
            ipVo.setLoanAmount("0.00");
          }
          ipVo.setChargePlanId(CommonFunction.checkNull(subList.get(10)).trim());
          list.add(ipVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      mainList.clear();
      mainList = null;
      subList.clear();
      subList = null;
      query = null;
      ipVo = null;
    }
    return list;
  }

  public ArrayList getSpecialConditionList(String dealId)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      SpecialConditionVo vo = null;
      query.append(new StringBuilder().append(" SELECT DEAL_SPECIAL_CONDITION_ID,DEAL_SPECIAL_CONDITION,DEAL_SPECIAL_CATEGORY from cr_deal_special_condition_m d where deal_id= '").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("'").toString());

      logger.info(new StringBuilder().append("getSpecialConditionList Queryl: ").append(query).toString());

      ArrayList detail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getSpecialConditionList OUTER ARRAYLIST SIZE: ").append(detail.size()).toString());

      for (int i = 0; i < detail.size(); i++)
      {
        logger.info(new StringBuilder().append("getSpecialConditionList").append(detail.get(i).toString()).toString());
        ArrayList subDetail = (ArrayList)detail.get(i);
        if (subDetail.size() > 0)
        {
          logger.info(new StringBuilder().append("getSpecialConditionList INNNER ARRAYLIST SIZE: ").append(subDetail.size()).toString());
          vo = new SpecialConditionVo();
          vo.setSpecialDealId(CommonFunction.checkNull(subDetail.get(0)).trim());
          vo.setSpecialCondition(CommonFunction.checkNull(subDetail.get(1)).trim());
          vo.setSpecialCategory(CommonFunction.checkNull(subDetail.get(2)).trim());
          list.add(vo);
        }
        query = null;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList fecthConditionList(String specialConditionId)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      SpecialConditionVo vo = null;
      query.append(new StringBuilder().append(" SELECT DEAL_SPECIAL_CONDITION_ID,DEAL_SPECIAL_CONDITION,DEAL_SPECIAL_CATEGORY from cr_deal_special_condition_m d where DEAL_SPECIAL_CONDITION_ID= '").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(specialConditionId)).trim()).append("'").toString());

      logger.info(new StringBuilder().append("getSpecialConditionList Queryl: ").append(query).toString());

      ArrayList detail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getSpecialConditionList OUTER ARRAYLIST SIZE: ").append(detail.size()).toString());

      for (int i = 0; i < detail.size(); i++)
      {
        logger.info(new StringBuilder().append("getSpecialConditionList").append(detail.get(i).toString()).toString());
        ArrayList subDetail = (ArrayList)detail.get(i);
        if (subDetail.size() > 0)
        {
          logger.info(new StringBuilder().append("getSpecialConditionList INNNER ARRAYLIST SIZE: ").append(subDetail.size()).toString());
          vo = new SpecialConditionVo();
          vo.setSpecialDealId(CommonFunction.checkNull(subDetail.get(0)).trim());
          vo.setSpecialCondition(CommonFunction.checkNull(subDetail.get(1)).trim());
          vo.setSpecialCategory(CommonFunction.checkNull(subDetail.get(2)).trim());
          list.add(vo);
        }
        query = null;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public String updateSpecialCondition(SpecialConditionVo vo)
  {
    this.qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    String res = "E";
    logger.info("In updateSpecialCondition");
    StringBuffer bufInsSql = new StringBuffer();
    bufInsSql.append("update cr_deal_special_condition_m SET DEAL_SPECIAL_CONDITION=?,DEAL_SPECIAL_CATEGORY=? WHERE DEAL_SPECIAL_CONDITION_ID=?");

    if (CommonFunction.checkNull(vo.getSpecialCondition()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getSpecialCondition().trim());
    }
    if (CommonFunction.checkNull(vo.getSpecialCategory()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getSpecialCategory().trim());
    }
    if (CommonFunction.checkNull(vo.getSpecialDealId()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getSpecialDealId().trim());
    }

    insertPrepStmtObject.setSql(bufInsSql.toString());
    logger.info(new StringBuilder().append("IN updateSpecialCondition() update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

    bufInsSql = null;

    this.qryList.add(insertPrepStmtObject);
    boolean status = false;
    try {
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    logger.info(new StringBuilder().append("In updateSpecialCondition STATUS......................").append(status).toString());
    if (status)
    {
      res = "S";
    }

    return res;
  }

  public boolean deleteSpecialCondition(String[] specialId)
  {
    logger.info("deleteSpecialCondition...................................");
    boolean status = false;
    try
    {
      this.qryList = new ArrayList();
      this.bufInsUpdSql = new StringBuffer();

      for (int k = 0; k < specialId.length; k++)
      {
        StringBuilder query = new StringBuilder();
        query.append(new StringBuilder().append("Delete from cr_deal_special_condition_m where DEAL_SPECIAL_CONDITION_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(specialId[k])).trim()).append("'").toString());

        this.qryList.add(query);
        query = null;
      }

      logger.info(new StringBuilder().append("delete query: ").append(this.qryList.get(0)).toString());

      status = ConnectionDAO.sqlInsUpdDelete(this.qryList);
      logger.info(new StringBuilder().append("Status of Deletion is =").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return status;
  }

  public boolean saveDealDisb(DealDisbursalVo vo)
  {
    logger.info(new StringBuilder().append("In saveDealDisb mod").append(vo.getNoOfDisbursal().length).toString());
    String[] noDisb = vo.getNoOfDisbursal();
    String[] disbDate = vo.getDateOfDisbursal();
    String[] disbDesc = vo.getDescOfDisbursal();
    String[] amount = vo.getAmountOfDisbursal();
    logger.info(new StringBuilder().append("In .saveDealDisb mod").append(vo.getNoOfDisbursal().length).toString());

    ArrayList qryList = new ArrayList();
    ArrayList qryList1 = new ArrayList();
    boolean status = false;
    try {
      StringBuilder bufInsSql = null;

      StringBuilder checkQ = null;
      StringBuilder count = new StringBuilder();
      logger.info(new StringBuilder().append("Doc Id in saveDealDisb: ").append(noDisb.length).toString());
      int disLength = noDisb.length;
      for (int k = 0; k < disLength; k++)
      {
        checkQ = new StringBuilder();
        PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

        logger.info(new StringBuilder().append("Doc Id in saveDealDisb: ").append(noDisb[k]).toString());

        checkQ.append(new StringBuilder().append("select count(*) from cr_deal_disbursalsch_dtl where DEAL_ID=").append(vo.getDealId()).append(" and DISBURSAL_NO=").append(CommonFunction.checkNull(noDisb[k])).toString());
        count.append(ConnectionDAO.singleReturn(checkQ.toString()));

        if (!count.toString().equalsIgnoreCase("0"))
        {
          StringBuilder qry = new StringBuilder();
          qry.append(new StringBuilder().append("DELETE FROM cr_deal_disbursalsch_dtl WHERE DEAL_ID='").append(CommonFunction.checkNull(vo.getDealId()).trim()).append("'").toString());
          qryList1.add(qry);
          ConnectionDAO.sqlInsUpdDelete(qryList1);
          qry = null;
        }

        bufInsSql = new StringBuilder();
        bufInsSql.append(new StringBuilder().append("insert into cr_deal_disbursalsch_dtl(DEAL_ID,DISBURSAL_NO,DISBURSAL_STAGE,DISBURSAL_DESCRIPTION,PROPOSED_DISBURSAL_DATE,PROPOSED_DISBURSAL_AMOUNT,DISBURSAL_FLAG,REC_STATUS,AUTHOR_REMARKS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE) values(?,?,?,?,STR_TO_DATE(?,'").append(this.dateFormat).append("'),?,?,?,?,?,STR_TO_DATE(?,'").append(this.dateFormat).append("'),?,STR_TO_DATE(?,'").append(this.dateFormat).append("'))").toString());

        if (CommonFunction.checkNull(vo.getDealId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getDealId().trim());
        }
        if (CommonFunction.checkNull(noDisb[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(noDisb[k].trim());
        }

        insertPrepStmtObject.addString("MM");

        if (CommonFunction.checkNull(disbDesc[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(disbDesc[k].trim());
        }
        if (CommonFunction.checkNull(disbDate[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(disbDate[k].trim());
        }

        if (CommonFunction.checkNull(amount[k]).equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.00");
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(amount[k]).trim()).toString());
        }

        insertPrepStmtObject.addNull();

        insertPrepStmtObject.addString("A");

        insertPrepStmtObject.addNull();

        if (CommonFunction.checkNull(vo.getMakerId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerId());
        }
        if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerDate().trim());
        }

        if (CommonFunction.checkNull(vo.getMakerId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerId());
        }
        if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerDate().trim());
        }

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN saveNoOfDisb()del insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        checkQ = null;
        bufInsSql = null;
      }

      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);

      checkQ = null;
      bufInsSql = null;
      count = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    logger.info(new StringBuilder().append("In saveNoOfDisb......................").append(status).toString());
    return status;
  }

  public ArrayList getDealDisbScheduleList(String dealId) {
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select DISBURSAL_NO,PROPOSED_DISBURSAL_AMOUNT,DISBURSAL_DESCRIPTION,DATE_FORMAT(PROPOSED_DISBURSAL_DATE,'").append(this.dateFormat).append("')").append(" from cr_deal_disbursalsch_dtl  where DEAL_ID=").append(dealId).toString());

      logger.info(new StringBuilder().append("getDealDisbScheduleList Queryl: ").append(query.toString()).toString());

      DealDisbursalVo nVo = null;
      ArrayList disbdeatail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getDealDisbScheduleList OUTER ARRAYLIST SIZE: ").append(disbdeatail.size()).toString());
      for (int i = 0; i < disbdeatail.size(); i++)
      {
        logger.info(new StringBuilder().append("getDealDisbScheduleList").append(disbdeatail.get(i).toString()).toString());
        ArrayList disbdeatail1 = (ArrayList)disbdeatail.get(i);
        logger.info(new StringBuilder().append("getDealDisbScheduleList INNNER ARRAYLIST SIZE: ").append(disbdeatail1.size()).toString());
        if (disbdeatail1.size() > 0)
        {
          nVo = new DealDisbursalVo();

          nVo.setNoOfDisb(CommonFunction.checkNull(disbdeatail1.get(0)).trim());
          if (!CommonFunction.checkNull(disbdeatail1.get(1)).equalsIgnoreCase(""))
          {
            Number amountOfDisb = this.myFormatter.parse(CommonFunction.checkNull(disbdeatail1.get(1)).trim());
            nVo.setAmountOfDisb(this.myFormatter.format(amountOfDisb));
          }

          nVo.setDescOfDisb(CommonFunction.checkNull(disbdeatail1.get(2)).trim());
          nVo.setDateOfDisb(CommonFunction.checkNull(disbdeatail1.get(3)).trim());

          list.add(nVo);
        }
      }
      query = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public String updateSpecialConditionRemarks(SpecialConditionVo vo) {
    this.qryList = new ArrayList();
    this.qryList1 = new ArrayList();
    String[] specialDealId = vo.getChk();
    String remarks = vo.getSpecRemark();
    String specCondStatus = vo.getSpecConditionStatus();
    String[] remarksList = null;
    String[] specStatusList = null;

    remarksList = remarks.split("\\|");

    specStatusList = specCondStatus.split("\\|");

    String res = "E";
    PrepStmtObject insertPrepStmtObject = null;
    StringBuilder bufInsSql = null;
    boolean status = false;
    if (specialDealId.length > 0)
    {
      StringBuilder qry = new StringBuilder();
      qry.append(new StringBuilder().append("DELETE FROM cr_loan_special_condition_dtl WHERE LOAN_ID='").append(vo.getLoanId()).append("' AND (LOAN_DISBURSAL_ID='").append(CommonFunction.checkNull(vo.getLoanDisbursalId()).trim()).append("' OR LOAN_DISBURSAL_ID IS NULL)").toString());
      logger.info(new StringBuilder().append("delete query:").append(qry.toString()).toString());
      logger.info(new StringBuilder().append("No of clicks").append(specialDealId.toString()).toString());
      logger.info(new StringBuilder().append("VO value ").append(remarks.toString()).toString());
      logger.info(new StringBuilder().append("Special Condition before save  ").append(specCondStatus.toString()).toString());
      this.qryList1.add(qry.toString());
      try {
        ConnectionDAO.sqlInsUpdDelete(this.qryList1);
      } catch (SQLException e) {
        e.printStackTrace();
      }
      qry = null;
      for (int k = 0; k < specialDealId.length; k++)
      {
        insertPrepStmtObject = new PrepStmtObject();

        bufInsSql = new StringBuilder();
        bufInsSql.append(new StringBuilder().append("insert into cr_loan_special_condition_dtl(LOAN_ID,LOAN_DISBURSAL_ID,DEAL_SPECIAL_CONDITION_ID,SPECIAL_REMARKS,REC_STATUS,MAKER_ID,MAKER_DATE,SPECIAL_STATUS) values(?,?,?,?,?,?,STR_TO_DATE(?,'").append(this.dateFormat).append("'),?)").toString());

        if (CommonFunction.checkNull(vo.getLoanId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getLoanId().trim());
        }
        if (CommonFunction.checkNull(vo.getLoanDisbursalId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getLoanDisbursalId().trim());
        }
        if (CommonFunction.checkNull(specialDealId[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(specialDealId[k].trim());
        }

        if (CommonFunction.checkNull(remarksList[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(remarksList[k].trim());
        }

        insertPrepStmtObject.addString("P");

        if (CommonFunction.checkNull(vo.getMakerId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getMakerId().trim());
        if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerDate().trim());
        }
        if (CommonFunction.checkNull(specStatusList[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(specStatusList[k].trim());
        }

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN updateSpecialConditionRemarks ### ").append(insertPrepStmtObject.printQuery()).toString());
        this.qryList.add(insertPrepStmtObject);
      }
    }
    try
    {
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    logger.info(new StringBuilder().append("In updateSpecialCondition STATUS......................").append(status).toString());
    if (status)
    {
      res = "S";
    }

    return res;
  }

  public ArrayList getShowSpecialConditionList(String loanId)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder qry = new StringBuilder();
      StringBuilder query = new StringBuilder();
      SpecialConditionVo vo = null;

      query.append(" SELECT distinct D.DEAL_SPECIAL_CONDITION_ID,D.DEAL_SPECIAL_CONDITION,D.DEAL_SPECIAL_CATEGORY,L.SPECIAL_REMARKS,L.SPECIAL_STATUS from cr_deal_special_condition_m d ");
      query.append(" LEFT JOIN cr_loan_special_condition_dtl L ON L.DEAL_SPECIAL_CONDITION_ID=D.DEAL_SPECIAL_CONDITION_ID  and l.loan_id='"+loanId+"' ");
      query.append(new StringBuilder().append(" where deal_id=(select loan_deal_id from cr_loan_dtl where loan_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim()).append("')").toString());
      logger.info(new StringBuilder().append("getSpecialConditionList(Aman) Queryl: ").append(query).toString());

      ArrayList detail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getSpecialConditionList OUTER ARRAYLIST SIZE: ").append(detail.size()).toString());

      for (int i = 0; i < detail.size(); i++)
      {
        logger.info(new StringBuilder().append("getSpecialConditionList").append(detail.get(i).toString()).toString());
        ArrayList subDetail = (ArrayList)detail.get(i);
        if (subDetail.size() > 0)
        {
          logger.info(new StringBuilder().append("getSpecialConditionList INNNER ARRAYLIST SIZE: ").append(subDetail.size()).toString());
          vo = new SpecialConditionVo();
          vo.setSpecialDealId(CommonFunction.checkNull(subDetail.get(0)).trim());
          vo.setSpecialCondition(CommonFunction.checkNull(subDetail.get(1)).trim());
          vo.setSpecialCategory(CommonFunction.checkNull(subDetail.get(2)).trim());
          vo.setSpecialRemarks(CommonFunction.checkNull(subDetail.get(3)).trim());
          vo.setSpecConditionStatusCode(CommonFunction.checkNull(subDetail.get(4)).trim());
          list.add(vo);
        }
        query = null;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getUnderWriterDealDetail(String txnid, String userId)
  {
    ArrayList list = new ArrayList();
    CommonDealVo fetchVo = new CommonDealVo();
    try
    {
      ArrayList header = null;
      int count = 0;
      int startRecordIndex = 0;
      int endRecordIndex = this.no;

      boolean appendSQL = false;
      StringBuffer bufInsSql = new StringBuffer();

      bufInsSql.append(new StringBuilder().append(" SELECT USER_NAME,LEVEL,BRANCH_DESC,APPROVAL_BY,APPROVAL_DECISION,APPROVAL_REMARKS FROM UNDER_WRITER_USERS_TEMP_QUEUE WHERE USER_ID='").append(CommonFunction.checkNull(userId)).append("'").toString());
      logger.info(new StringBuilder().append("query : ").append(bufInsSql.toString()).toString());
      header = ConnectionDAO.sqlSelect(bufInsSql.toString());
      bufInsSql = null;

      int size = header.size();

      for (int i = 0; i < size; i++)
      {
        ArrayList header1 = (ArrayList)header.get(i);
        if ((header1 != null) && (header1.size() > 0))
        {
          fetchVo = new CommonDealVo();
          fetchVo.setUserName(CommonFunction.checkNull(header1.get(0)).trim());
          fetchVo.setLevel(CommonFunction.checkNull(header1.get(1)).trim());
          fetchVo.setBranchDesc(CommonFunction.checkNull(header1.get(2)).trim());
          fetchVo.setApprovalBy(CommonFunction.checkNull(header1.get(3)).trim());
          fetchVo.setApprovalDecision(CommonFunction.checkNull(header1.get(4)).trim());
          fetchVo.setApprovalRemark(CommonFunction.checkNull(header1.get(5)).trim());
          fetchVo.setTotalRecordSize(count);
          list.add(fetchVo);
        }
      }

      fetchVo = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getDeviationDealDetail(String txnid) {
    ArrayList list = new ArrayList();
    CommonDealVo fetchVo = new CommonDealVo();
    try
    {
      ArrayList header = null;
      int count = 0;
      boolean appendSQL = false;
      StringBuffer bufInsSql = new StringBuffer();

      bufInsSql.append(" select distinct t.USER_NAME,ua.LEVEL,B.BRANCH_DESC from cr_deal_dtl d ");
      bufInsSql.append(" INNER join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
      bufInsSql.append(" INNER join com_branch_m b on d.DEAL_BRANCH=b.BRANCH_ID     ");
      bufInsSql.append(" INNER join cr_policy_decision md  on d.DEAL_ID=md.DEAL_ID  and  md.REC_STATUS in('I','P')    ");
      bufInsSql.append(" INNER JOIN cr_user_approval_m ua ON ua.USER_ROLE='P' AND md.APPROVAL_LEVEL=ua.LEVEL AND ua.REC_STATUS='A'   ");
      bufInsSql.append(" INNER JOIN SEC_USER_M t on t.USER_ID=UA.USER_ID INNER JOIN CR_USER_PRODUCT_MAPPING_M UP ON UP.USER_ID=UA.USER_ID  AND UP.PRODUCT_ID=N.DEAL_PRODUCT  ");
      bufInsSql.append(" INNER JOIN sec_user_branch_dtl a ON a.USER_ID= UA.USER_ID AND a.BRANCH_ID=d.DEAL_BRANCH  ");
      bufInsSql.append(new StringBuilder().append(" WHERE  D.DEAL_ID='").append(CommonFunction.checkNull(txnid).trim()).append("'").toString());

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      header = ConnectionDAO.sqlSelect(bufInsSql.toString());

      bufInsSql = null;

      for (int i = 0; i < header.size(); i++)
      {
        ArrayList header1 = (ArrayList)header.get(i);
        if ((header1 != null) && (header1.size() > 0))
        {
          fetchVo = new CommonDealVo();
          fetchVo.setUserName(CommonFunction.checkNull(header1.get(0)).trim());
          fetchVo.setLevel(CommonFunction.checkNull(header1.get(1)).trim());
          fetchVo.setBranchDesc(CommonFunction.checkNull(header1.get(2)).trim());
          fetchVo.setTotalRecordSize(count);
          list.add(fetchVo);
        }
      }
      logger.info(new StringBuilder().append("getTotalRecordSize : ").append(fetchVo.getTotalRecordSize()).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    logger.info(new StringBuilder().append("Detail List when searchList is : ").append(list).toString());

    return list;
  }

  public String checkAssetVerifInit(String[] id, String dealId)
  {
    logger.info(new StringBuilder().append("checkAssetVerifInit for checkAssetVerifInit....assetid..").append(id).append(" dealId ").append(dealId).toString());
    String status = "";
    try
    {
      for (int k = 0; k < id.length; k++)
      {
        String checkVerifInitQuery = new StringBuilder().append("SELECT A.ASSET_COLLATERAL_DESC FROM cr_asset_collateral_m A  INNER JOIN cr_deal_verification_dtl  V ON V.DEAL_ID='").append(dealId).append("' AND V.ENTITY_TYPE=A.ASSET_COLLATERAL_CLASS AND V.ENTITY_SUB_TYPE=A.ASSET_TYPE AND A.ASSET_ID=V.ENTITY_ID").append(" WHERE A.ASSET_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()).append("' ").toString();

        logger.info(new StringBuilder().append("checkVerifInitQuery: ").append(checkVerifInitQuery).toString());
        status = ConnectionDAO.singleReturn(checkVerifInitQuery);
        logger.info(new StringBuilder().append("A.ASSET_COLLATERAL_DESC ").append(status).toString());
        if (!CommonFunction.checkNull(status).equalsIgnoreCase(""))
        {
          return status;
        }

      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return status;
  }

  public boolean deleteVerificationInitAsset(String commonId, String[] id, String type)
  {
    logger.info(new StringBuilder().append("deleteVerificationInitAsset for deleteVerificationInitAsset....roleId..").append(id).append(" dealId ").append(commonId).toString());
    boolean status = false;
    ArrayList qryList = null;
    StringBuffer bufInsUpdSql = null;
    try
    {
      qryList = new ArrayList();
      bufInsUpdSql = new StringBuffer();

      for (int k = 0; k < id.length; k++)
      {
        if (CommonFunction.checkNull(type).equalsIgnoreCase("D"))
        {
          String updateFVIMovementQuery = new StringBuilder().append("update cr_deal_movement_dtl m set DEAL_FORWARDED='0000-00-00 00:00:00',DEAL_FORWARD_USER='' where m.DEAL_STAGE_ID='FVI' AND M.REC_STATUS='A' and m.DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()).append("'").toString();
          logger.info(new StringBuilder().append("updateFVIMovementQuery q1 ").append(updateFVIMovementQuery).toString());
          qryList.add(updateFVIMovementQuery);

          String verifIdQuery = new StringBuilder().append("select VERIFICATION_ID from cr_deal_verification_dtl V  INNER JOIN cr_asset_collateral_m A ON A.ASSET_COLLATERAL_CLASS=V.ENTITY_TYPE AND A.ASSET_TYPE=V.ENTITY_SUB_TYPE AND A.ASSET_ID=V.ENTITY_ID WHERE  V.ENTITY_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()).append("' AND V.DEAL_ID= '").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()).append("'").toString();

          logger.info(new StringBuilder().append("verifIdQuery  ").append(verifIdQuery).toString());
          String verifId = ConnectionDAO.singleReturn(verifIdQuery);
          logger.info(new StringBuilder().append("verifId  ").append(verifId).toString());

          String deleteVerifCapturing = new StringBuilder().append("delete from cr_field_verification_dtl  where VERIFICATION_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(verifId)).trim()).append("' ").toString();
          logger.info(new StringBuilder().append("delete deleteVerifCapturing q2 ").append(deleteVerifCapturing).toString());
          qryList.add(deleteVerifCapturing);

          String deleteVerification = new StringBuilder().append("delete from cr_deal_verification_dtl where VERIFICATION_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(verifId)).trim()).append("' ").toString();
          logger.info(new StringBuilder().append("delete deleteVerification q3 ").append(deleteVerification).toString());
          qryList.add(deleteVerification);
        }
        else
        {
          String verifIdQuery = new StringBuilder().append("select VERIFICATION_ID from cr_deal_verification_dtl V  INNER JOIN cr_asset_collateral_m A ON A.ASSET_COLLATERAL_CLASS=V.ENTITY_TYPE AND A.ASSET_TYPE=V.ENTITY_SUB_TYPE AND A.ASSET_ID=V.ENTITY_ID WHERE  V.ENTITY_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()).append("' AND V.LOAN_ID= '").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()).append("'").toString();

          logger.info(new StringBuilder().append("verifIdQuery  ").append(verifIdQuery).toString());
          String verifId = ConnectionDAO.singleReturn(verifIdQuery);
          logger.info(new StringBuilder().append("verifId  ").append(verifId).toString());

          String deleteVerifCapturing = new StringBuilder().append("delete from cr_field_verification_dtl  where VERIFICATION_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(verifId)).trim()).append("' ").toString();
          logger.info(new StringBuilder().append("delete deleteVerifCapturing q2 ").append(deleteVerifCapturing).toString());
          qryList.add(deleteVerifCapturing);

          String deleteVerification = new StringBuilder().append("delete from cr_deal_verification_dtl where VERIFICATION_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(verifId)).trim()).append("' ").toString();
          logger.info(new StringBuilder().append("delete deleteVerification q3 ").append(deleteVerification).toString());
          qryList.add(deleteVerification);
        }

      }

      status = ConnectionDAO.sqlInsUpdDelete(qryList);
      logger.info(new StringBuilder().append("Status of Deletion is =").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return status;
  }

  public String checkBuyerVerifInit(String[] id, String dealId, String bptype)
  {
    logger.info(new StringBuilder().append("checkBuyerVerifInit for checkBuyerVerifInit....buyerid..").append(id).append(" dealId ").append(dealId).toString());
    String status = "";
    try
    {
      for (int k = 0; k < id.length; k++)
      {
        String checkVerifInitQuery = new StringBuilder().append("SELECT A.DEAL_BUYER_SUPPLIER_NAME FROM cr_deal_buyer_supplier_dtl A  INNER JOIN cr_deal_verification_dtl  V ON V.DEAL_ID=A.DEAL_ID AND V.ENTITY_TYPE='BUYER' AND A.DEAL_BUYER_SUPPLIER_ID=V.ENTITY_ID WHERE A.DEAL_BUYER_SUPPLIER_TYPE='").append(bptype).append("' AND A.DEAL_BUYER_SUPPLIER_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()).append("' AND A.DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' ").toString();

        logger.info(new StringBuilder().append("checkVerifInitQuery: ").append(checkVerifInitQuery).toString());
        status = ConnectionDAO.singleReturn(checkVerifInitQuery);
        logger.info(new StringBuilder().append("A.DEAL_BUYER_SUPPLIER_NAME ").append(status).toString());
        if (!CommonFunction.checkNull(status).equalsIgnoreCase(""))
        {
          return status;
        }

      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return status;
  }

  public boolean deleteVerificationInitBuyer(String dealId, String[] id, String bptype)
  {
    logger.info(new StringBuilder().append("deleteVerificationInitBuyer for deleteVerificationInitBuyer....roleId..").append(id).append(" dealId ").append(dealId).toString());
    boolean status = false;
    ArrayList qryList = null;
    StringBuffer bufInsUpdSql = null;
    try
    {
      qryList = new ArrayList();
      bufInsUpdSql = new StringBuffer();

      for (int k = 0; k < id.length; k++)
      {
        String updateFVIMovementQuery = new StringBuilder().append("update cr_deal_movement_dtl m set DEAL_FORWARDED='0000-00-00 00:00:00',DEAL_FORWARD_USER='' where m.DEAL_STAGE_ID='FVI' AND M.REC_STATUS='A' and m.DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("'").toString();
        logger.info(new StringBuilder().append("updateFVIMovementQuery q1 ").append(updateFVIMovementQuery).toString());
        qryList.add(updateFVIMovementQuery);

        String verifIdQuery = new StringBuilder().append("select VERIFICATION_ID from cr_deal_verification_dtl V  INNER JOIN cr_deal_buyer_supplier_dtl A ON V.ENTITY_TYPE='BUYER' AND A.DEAL_BUYER_SUPPLIER_ID=V.ENTITY_ID AND A.DEAL_ID=V.DEAL_ID AND A.DEAL_BUYER_SUPPLIER_TYPE='B' WHERE  V.ENTITY_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()).append("' AND V.DEAL_ID= '").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("'").toString();

        logger.info(new StringBuilder().append("verifIdQuery  ").append(verifIdQuery).toString());
        String verifId = ConnectionDAO.singleReturn(verifIdQuery);
        logger.info(new StringBuilder().append("verifId  ").append(verifId).toString());

        String deleteVerifCapturing = new StringBuilder().append("delete from cr_field_verification_dtl  where VERIFICATION_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(verifId)).trim()).append("' ").toString();
        logger.info(new StringBuilder().append("delete deleteVerifCapturing q2 ").append(deleteVerifCapturing).toString());
        qryList.add(deleteVerifCapturing);

        String deleteVerification = new StringBuilder().append("delete from cr_deal_verification_dtl where VERIFICATION_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(verifId)).trim()).append("' ").toString();
        logger.info(new StringBuilder().append("delete deleteVerification q3 ").append(deleteVerification).toString());
        qryList.add(deleteVerification);
      }

      status = ConnectionDAO.sqlInsUpdDelete(qryList);
      logger.info(new StringBuilder().append("Status of Deletion is =").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return status;
  }

  public String checkSupplierVerifInit(String[] id, String dealId, String bptype)
  {
    logger.info(new StringBuilder().append("checkSupplierVerifInit for checkSupplierVerifInit....buyerid..").append(id).append(" dealId ").append(dealId).toString());
    String status = "";
    try
    {
      for (int k = 0; k < id.length; k++)
      {
        String checkVerifInitQuery = new StringBuilder().append("SELECT A.DEAL_BUYER_SUPPLIER_NAME FROM cr_deal_buyer_supplier_dtl A  INNER JOIN cr_deal_verification_dtl  V ON V.DEAL_ID=A.DEAL_ID AND V.ENTITY_TYPE='SUPPLIER' AND A.DEAL_BUYER_SUPPLIER_ID=V.ENTITY_ID WHERE A.DEAL_BUYER_SUPPLIER_TYPE='S' AND A.DEAL_BUYER_SUPPLIER_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()).append("' AND A.DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' ").toString();

        logger.info(new StringBuilder().append("checkVerifInitQuery: ").append(checkVerifInitQuery).toString());
        status = ConnectionDAO.singleReturn(checkVerifInitQuery);
        logger.info(new StringBuilder().append("A.DEAL_BUYER_SUPPLIER_NAME ").append(status).toString());
        if (!CommonFunction.checkNull(status).equalsIgnoreCase(""))
        {
          return status;
        }

      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return status;
  }

  public boolean deleteVerificationInitSupplier(String dealId, String[] id, String bptype)
  {
    logger.info(new StringBuilder().append("deleteVerificationInitSupplier for deleteVerificationInitSupplier....roleId..").append(id).append(" dealId ").append(dealId).toString());
    boolean status = false;
    ArrayList qryList = null;
    StringBuffer bufInsUpdSql = null;
    try
    {
      qryList = new ArrayList();
      bufInsUpdSql = new StringBuffer();

      for (int k = 0; k < id.length; k++)
      {
        String updateFVIMovementQuery = new StringBuilder().append("update cr_deal_movement_dtl m set DEAL_FORWARDED='0000-00-00 00:00:00',DEAL_FORWARD_USER='' where m.DEAL_STAGE_ID='FVI' AND M.REC_STATUS='A' and m.DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("'").toString();
        logger.info(new StringBuilder().append("updateFVIMovementQuery q1 ").append(updateFVIMovementQuery).toString());
        qryList.add(updateFVIMovementQuery);

        String verifIdQuery = new StringBuilder().append("select VERIFICATION_ID from cr_deal_verification_dtl V  INNER JOIN cr_deal_buyer_supplier_dtl A ON V.ENTITY_TYPE='SUPPLIER' AND A.DEAL_BUYER_SUPPLIER_ID=V.ENTITY_ID AND A.DEAL_ID=V.DEAL_ID AND A.DEAL_BUYER_SUPPLIER_TYPE='S' WHERE  V.ENTITY_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()).append("' AND V.DEAL_ID= '").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("'").toString();

        logger.info(new StringBuilder().append("verifIdQuery  ").append(verifIdQuery).toString());
        String verifId = ConnectionDAO.singleReturn(verifIdQuery);
        logger.info(new StringBuilder().append("verifId  ").append(verifId).toString());

        String deleteVerifCapturing = new StringBuilder().append("delete from cr_field_verification_dtl  where VERIFICATION_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(verifId)).trim()).append("' ").toString();
        logger.info(new StringBuilder().append("delete deleteVerifCapturing q2 ").append(deleteVerifCapturing).toString());
        qryList.add(deleteVerifCapturing);

        String deleteVerification = new StringBuilder().append("delete from cr_deal_verification_dtl where VERIFICATION_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(verifId)).trim()).append("' ").toString();
        logger.info(new StringBuilder().append("delete deleteVerification q3 ").append(deleteVerification).toString());
        qryList.add(deleteVerification);
      }

      status = ConnectionDAO.sqlInsUpdDelete(qryList);
      logger.info(new StringBuilder().append("Status of Deletion is =").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return status;
  }

  public boolean deleteMarketVerif(String dealId)
  {
    boolean status = false;
    String countBuyerSupplierQuery = new StringBuilder().append("select count(1) from cr_deal_buyer_supplier_dtl where deal_id='").append(dealId).append("'").toString();
    logger.info(new StringBuilder().append("count countBuyerSupplierQuery q1 ").append(countBuyerSupplierQuery).toString());
    String countBuyerSupplier = ConnectionDAO.singleReturn(countBuyerSupplierQuery);
    logger.info(new StringBuilder().append("count countBuyerSupplier  ").append(countBuyerSupplier).toString());
    ArrayList qryList = new ArrayList();
    try
    {
      if (CommonFunction.checkNull(countBuyerSupplier).equalsIgnoreCase("0"))
      {
        String verifIdQuery = new StringBuilder().append("select VERIFICATION_ID from cr_deal_verification_dtl V  WHERE  V.ENTITY_TYPE='MARKET' AND V.DEAL_ID= '").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("'").toString();

        logger.info(new StringBuilder().append("verifIdQuery  ").append(verifIdQuery).toString());
        String verifId = ConnectionDAO.singleReturn(verifIdQuery);
        logger.info(new StringBuilder().append("verifId  ").append(verifId).toString());

        String deleteVerifCapturing = new StringBuilder().append("delete from cr_field_verification_dtl  where DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(verifId)).trim()).append("' ").toString();
        logger.info(new StringBuilder().append("delete deleteVerifCapturing q2 ").append(deleteVerifCapturing).toString());
        qryList.add(deleteVerifCapturing);

        String deleteVerification = new StringBuilder().append("delete from cr_deal_verification_dtl where DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(verifId)).trim()).append("' ").toString();
        logger.info(new StringBuilder().append("delete deleteVerification q3 ").append(deleteVerification).toString());
        qryList.add(deleteVerification);
      }
      status = ConnectionDAO.sqlInsUpdDelete(qryList);
      logger.info(new StringBuilder().append("Status of Deletion is =").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return status;
  }

  public boolean checkUploadFeasibilityCM(String dealId) {
    boolean status = false;
    Connection conn = null;
    Statement stmt = null;
    ResultSet rs = null;
    try
    {
      logger.info("In checkUploadFeasibilityCM()..........................DAOImpl");
      StringBuilder noOfDocument = new StringBuilder();
      int limitOfUploadDocument = 0;
      noOfDocument.append("select PARAMETER_VALUE from PARAMETER_MST  where PARAMETER_KEY='NUMBER_OF_DOCUMENT_UPLOAD'");
      String uploadDocument = ConnectionDAO.singleReturn(noOfDocument.toString());
      if (!CommonFunction.checkNull(uploadDocument).equalsIgnoreCase(""))
      {
        limitOfUploadDocument = Integer.parseInt(uploadDocument);
      }
      else
      {
        limitOfUploadDocument = 0;
      }
      noOfDocument = null;
      String strReturn = null;
      int count = 0;
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select count(txn_id) from cr_uploaded_documents where txn_id='").append(dealId).append("' and txn_type='LIM'").toString());
      logger.info(new StringBuilder().append("In check Upload Feasibility...............query...........DAOImpl ").append(query).toString());
      conn = ConnectionDAO.getConnection();
      stmt = conn.createStatement();
      rs = stmt.executeQuery(query.toString());
      if (rs.next()) {
        strReturn = rs.getString(1);
      }
      count = Integer.parseInt(strReturn);

      if (count < limitOfUploadDocument)
      {
        status = true;
      }
      else if (count >= limitOfUploadDocument)
      {
        status = false;
      }
      logger.info(new StringBuilder().append("Resultset value====  ").append(count).toString());

      query = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      try {
        rs.close();
        stmt.close();
        conn.close();
      } catch (Exception e) {
        e.printStackTrace();
      }
    }
    return status;
  }

  public ArrayList<ApplicantTypeVO> getCustRoleAtCMList()
  {
    ArrayList list = new ArrayList();
    ArrayList applicantList = null;
    ArrayList subList = null;
    try {
      StringBuffer query = new StringBuffer();
      query.append("SELECT VALUE,DESCRIPTION FROM generic_master  where GENERIC_KEY='CUST_ROLE' and REC_STATUS='A' AND VALUE<>'PRAPPL' order by DESCRIPTION  ");

      applicantList = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      for (int i = 0; i < applicantList.size(); i++) {
        subList = (ArrayList)applicantList.get(i);
        logger.info(new StringBuilder().append("In getApplicantList......sublist size: ").append(subList.size()).toString());
        if (subList.size() > 0) {
          ApplicantTypeVO av = new ApplicantTypeVO();
          av.setApplicant_code(CommonFunction.checkNull(subList.get(0)).trim());
          av.setApplicant_desc(CommonFunction.checkNull(subList.get(1)).trim());
          list.add(av);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList<Object> searchCustomerLinkAtCM(LinkCustomerVo vo)
  {
    logger.info("In searchCustomerLinkAtCM");

    ArrayList list = new ArrayList();
    ArrayList deatilList = new ArrayList();
    LinkCustomerVo appl = null;

    StringBuilder tableName = new StringBuilder();
    String loanNo = "";
    tableName.append("gcd_customer_m");
    try
    {
      boolean appendSQL = false;
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("select CUSTOMER_ID,CUSTOMER_NAME,CUSTOMER_CONSTITUTION,CUSTOMER_BUSINESS_SEGMENT,if(CUSTOMER_TYPE='I','INDIVIDUAL','CORPORATE'),LOAN_REFERENCE_NO,loan_no from gcd_customer_m left outer join cr_loan_dtl on(cr_loan_dtl.LOAN_CUSTOMER_ID=gcd_customer_m.CUSTOMER_ID) where CUSTOMER_STATUS='A'  ");

      if (!vo.getLbxcustomerId().trim().equalsIgnoreCase(""))
        bufInsSql.append(new StringBuilder().append(" and CUSTOMER_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxcustomerId()).trim()).append("'").toString());
      if (!vo.getCustomerName().trim().equalsIgnoreCase(""))
        bufInsSql.append(new StringBuilder().append(" and CUSTOMER_NAME like '%").append(StringEscapeUtils.escapeSql(vo.getCustomerName()).trim()).append("%'").toString());
      if (!vo.getPanNo().trim().equalsIgnoreCase(""))
        bufInsSql.append(new StringBuilder().append(" and CUSTMER_PAN='").append(StringEscapeUtils.escapeSql(vo.getPanNo()).trim()).append("'").toString());
      if (!vo.getAadhaar().trim().equalsIgnoreCase(""))
        bufInsSql.append(new StringBuilder().append(" and UID_NO='").append(StringEscapeUtils.escapeSql(vo.getAadhaar()).trim()).append("'").toString());
      if (!vo.getRegistrationNo().trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" and CUSTOMER_REGISTRATION_NO='").append(StringEscapeUtils.escapeSql(vo.getRegistrationNo()).trim()).append("'").toString());
      }
      if (!vo.getLoanNO().trim().equalsIgnoreCase(""))
        bufInsSql.append(new StringBuilder().append(" and cr_loan_dtl.loan_id ='").append(StringEscapeUtils.escapeSql(vo.getLoanID()).trim()).append("'").toString());
      if (!vo.getAppFormNo().trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append(" and LOAN_REFERENCE_NO ='").append(StringEscapeUtils.escapeSql(vo.getAppFormNo()).trim()).append("'").toString());
      }

      logger.info(new StringBuilder().append("searchApplicant() of CreditProcessingDAOImpl Query::: : ").append(bufInsSql.toString()).toString());
      deatilList = ConnectionDAO.sqlSelect(bufInsSql.toString());
      bufInsSql = null;
      if (deatilList.size() > 0) {
        for (int i = 0; i < deatilList.size(); i++)
        {
          ArrayList data = (ArrayList)deatilList.get(i);
          if (data.size() > 0) {
            appl = new LinkCustomerVo();

            appl.setCustomerId(CommonFunction.checkNull(data.get(0)).trim());

            appl.setCustomerName(CommonFunction.checkNull(data.get(1)).trim());

            appl.setConstitution(CommonFunction.checkNull(data.get(2)).trim());
            appl.setBusinessSegment(CommonFunction.checkNull(data.get(3)).trim());
            appl.setCustType(CommonFunction.checkNull(data.get(4)).trim());
            appl.setAppFormNo(CommonFunction.checkNull(data.get(5)).trim());
            appl.setLoanNO(CommonFunction.checkNull(data.get(6)).trim());
            list.add(appl);
          }
        }
      }
      bufInsSql = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally {
      tableName = null;
    }

    return list;
  }

  public boolean saveGuaranteeAmountAtCM(CreditProcessingCustomerEntryVo vo, String source)
  {
    CreditProcessingCustomerEntryVo creditVo = vo;

    boolean status = false;
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    StringBuilder queryUpdate = new StringBuilder();
    String table = "cr_loan_customer_role";
    if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
      table = "cr_loan_customer_role_edit";
    queryUpdate.append(new StringBuilder().append("update ").append(table).append(" set GUARANTEE_AMOUNT=? where LOAN_CUSTOMER_ROLE_ID=?").toString());
    PrepStmtObject prepStmt = new PrepStmtObject();

    if (CommonFunction.checkNull(creditVo.getGuaranteeAmount()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      try {
        insertPrepStmtObject.addString(this.myFormatter.parse(creditVo.getGuaranteeAmount().trim()).toString());
      }
      catch (ParseException e1) {
        e1.printStackTrace();
      }
    }
    if (CommonFunction.checkNull(creditVo.getId()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(creditVo.getId().trim());
    }
    insertPrepStmtObject.setSql(queryUpdate.toString());
    logger.info(new StringBuilder().append("IN saveGuaranteeAmount() update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
    qryList.add(insertPrepStmtObject);
    try
    {
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In saveGuaranteeAmount.........update status: ").append(status).toString());
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      queryUpdate = null;
    }
    logger.info(new StringBuilder().append("status in dao : ").append(status).toString());
    return status;
  }

  public ArrayList<CommonDealVo> fetchQualityCheckDetail(CommonDealVo vo)
  {
    ArrayList list = new ArrayList();
    try
    {
      logger.info(new StringBuilder().append("vo.getStage(): ").append(vo.getStage()).toString());

      logger.info(new StringBuilder().append("Date Format: ").append(this.dateFormat).toString());
      ArrayList header = null;
      int count = 0;
      int startRecordIndex = 0;
      int endRecordIndex = this.no;
      CommonDealVo fetchVo = vo;
      boolean appendSQL = false;
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();
      StringBuilder dealId = new StringBuilder();
      StringBuilder appNo = new StringBuilder();
      StringBuilder appDate = new StringBuilder();
      StringBuilder custName = new StringBuilder();
      StringBuilder productId = new StringBuilder();

      dealId.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim());
      appNo.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim());
      appDate.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationdate())).trim());
      custName.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim());
      productId.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim());

      if ((vo.getStage() != null) && (vo.getStage().equalsIgnoreCase("F")))
      {
          if (CommonFunction.checkNull(vo.getFunctionId()).equalsIgnoreCase("3000217")) {
              bufInsSql.append(" select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC, n.DEAL_SANCTION_VALID_TILL  from cr_deal_dtl d ");

              bufInsSqlTempCount.append(" select distinct count(1) FROM (select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,n.DEAL_SANCTION_VALID_TILL  from cr_deal_dtl d ");
            }
            else {
              bufInsSql.append(" select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,n.DEAL_SANCTION_VALID_TILL from cr_deal_colanding_approval_dtl cdcd join cr_deal_dtl d on d.deal_id=cdcd.deal_id and cdcd.rec_status='A' ");
              bufInsSqlTempCount.append(" select distinct count(1) FROM (select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,n.DEAL_SANCTION_VALID_TILL from cr_deal_colanding_approval_dtl cdcd join cr_deal_dtl d on d.deal_id=cdcd.deal_id and cdcd.rec_status='A' ");
            }

        bufInsSql.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
        bufInsSqlTempCount.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");

        bufInsSql.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
        bufInsSqlTempCount.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");

        bufInsSql.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
        bufInsSqlTempCount.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");

        bufInsSql.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
        bufInsSqlTempCount.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");

        bufInsSql.append("INNER JOIN cr_deal_movement_dtl M ON M.DEAL_ID=D.DEAL_ID AND M.DEAL_STAGE_ID='QC' AND M.DEAL_RECEIVED<>'0000-00-00 00:00:00' AND M.DEAL_FORWARDED='0000-00-00 00:00:00' AND M.REC_STATUS='A'");
        bufInsSqlTempCount.append("INNER JOIN cr_deal_movement_dtl M ON M.DEAL_ID=D.DEAL_ID AND M.DEAL_STAGE_ID='QC' AND M.DEAL_RECEIVED<>'0000-00-00 00:00:00' AND M.DEAL_FORWARDED='0000-00-00 00:00:00' AND M.REC_STATUS='A'");

        if ((!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase("")))
        {
          bufInsSql.append(new StringBuilder().append("WHERE d.MAKER_ID<>'").append(StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()).append("' AND   d.DEAL_BRANCH in (select branch_id from sec_user_branch_dtl b where b.BRANCH_ID=d.DEAL_BRANCH and b.REC_STATUS='A') and d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' AND d.DEAL_APPLICATION_FORM_NO='").append(StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()).append("' AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' AND d.Rec_status='").append(StringEscapeUtils.escapeSql(vo.getStage()).trim()).append("' and d.deal_id not in (select qc.txn_id from cr_quality_check_dtl qc where qc.TXN_TYPE='DC' and DECISION='A') AND D.DEAL_BRANCH='").append(StringEscapeUtils.escapeSql(vo.getBranchId()).trim()).append("' ").toString());
          bufInsSqlTempCount.append(new StringBuilder().append("WHERE d.MAKER_ID<>'").append(StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()).append("' AND   d.DEAL_BRANCH in (select branch_id from sec_user_branch_dtl b where b.BRANCH_ID=d.DEAL_BRANCH and b.REC_STATUS='A') and d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' AND d.DEAL_APPLICATION_FORM_NO='").append(StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()).append("' AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' AND d.Rec_status='").append(StringEscapeUtils.escapeSql(vo.getStage()).trim()).append("' and d.deal_id not in (select qc.txn_id from cr_quality_check_dtl qc where qc.TXN_TYPE='DC' and DECISION='A') AND D.DEAL_BRANCH='").append(StringEscapeUtils.escapeSql(vo.getBranchId()).trim()).append("' ").toString());
        }

        if ((vo.getLbxDealNo().equalsIgnoreCase("")) || (vo.getApplicationno().equalsIgnoreCase("")) || (vo.getCustomername().equalsIgnoreCase("")) || (vo.getLbxProductID().equalsIgnoreCase("")) || (vo.getLbxscheme().equalsIgnoreCase("")) || (vo.getStage().equalsIgnoreCase(""))) {
          appendSQL = true;
        }

        if (appendSQL) {
          logger.info("In Where Clause");
          bufInsSql.append(new StringBuilder().append(" WHERE d.MAKER_ID<>'").append(StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()).append("' AND   d.DEAL_BRANCH in (select branch_id from sec_user_branch_dtl b where b.BRANCH_ID=d.DEAL_BRANCH and b.REC_STATUS='A') and d.Rec_status='").append(StringEscapeUtils.escapeSql(vo.getStage()).trim()).append("' and d.deal_id not in (select qc.txn_id from cr_quality_check_dtl qc where qc.TXN_TYPE='DC' and DECISION='A') AND D.DEAL_BRANCH='").append(StringEscapeUtils.escapeSql(vo.getBranchId()).trim()).append("' ").toString());
          bufInsSqlTempCount.append(new StringBuilder().append(" WHERE d.MAKER_ID<>'").append(StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()).append("' AND d.DEAL_BRANCH in (select branch_id from sec_user_branch_dtl b where b.BRANCH_ID=d.DEAL_BRANCH and b.REC_STATUS='A') and d.Rec_status='").append(StringEscapeUtils.escapeSql(vo.getStage()).trim()).append("' and d.deal_id not in (select qc.txn_id from cr_quality_check_dtl qc where qc.TXN_TYPE='DC' and DECISION='A') AND D.DEAL_BRANCH='").append(StringEscapeUtils.escapeSql(vo.getBranchId()).trim()).append("' ").toString());
        }
        if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")) {
          bufInsSql.append(new StringBuilder().append("AND d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' ").toString());
          bufInsSqlTempCount.append(new StringBuilder().append("AND d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' ").toString());
          appendSQL = true;
        }

        if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")) {
          bufInsSql.append(new StringBuilder().append("AND d.DEAL_APPLICATION_FORM_NO='").append(StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()).append("' ").toString());
          bufInsSqlTempCount.append(new StringBuilder().append("AND d.DEAL_APPLICATION_FORM_NO='").append(StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()).append("' ").toString());
          appendSQL = true;
        }

        if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")) {
          bufInsSql.append(new StringBuilder().append("AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' ").toString());
          bufInsSqlTempCount.append(new StringBuilder().append("AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' ").toString());
          appendSQL = true;
        }
        if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")) {
          bufInsSql.append(new StringBuilder().append("AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("' ").toString());
          bufInsSqlTempCount.append(new StringBuilder().append("AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("' ").toString());
          appendSQL = true;
        }
        if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")) {
          bufInsSql.append(new StringBuilder().append("AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
          bufInsSqlTempCount.append(new StringBuilder().append("AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
          appendSQL = true;
        }

        if ((!vo.getLbxDealNo().equalsIgnoreCase("")) || (!vo.getApplicationno().equalsIgnoreCase("")) || (!vo.getApplicationdate().equalsIgnoreCase("")) || (!vo.getCustomername().equalsIgnoreCase("")) || (!vo.getLbxProductID().equalsIgnoreCase("")) || (!vo.getLbxscheme().equalsIgnoreCase("")) || (!vo.getStage().equalsIgnoreCase(""))) {
          bufInsSqlTempCount.append(") as b");
          appendSQL = true;
        }

        count = Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
        logger.info(new StringBuilder().append("bufInsSqlTempCount : ").append(bufInsSqlTempCount.toString()).toString());

        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(fetchVo.getCurrentPageLink()).toString());
        if (fetchVo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (fetchVo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());

        logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
        header = ConnectionDAO.sqlSelect(bufInsSql.toString());

        for (int i = 0; i < header.size(); i++)
        {
          ArrayList header1 = (ArrayList)header.get(i);
          if ((header1 != null) && (header1.size() > 0))
          {
            fetchVo = new CommonDealVo();
            if (CommonFunction.checkNull(vo.getQualityCheckStatus()).equalsIgnoreCase("N"))
            {
              fetchVo.setChk(new StringBuilder().append("<input type=\"checkbox\" id=\"chk").append(i).append("\" name=\"chk\" value=\"").append(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0))).trim()).append("\" />").toString());
              fetchVo.setLbxDealNo(new StringBuilder().append("<a href=dealCapturing.do?method=leadEntryCapturing&dealId=").append(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0))).trim()).append("&status=UWA>").append(CommonFunction.checkNull(header1.get(1))).append("</a>").toString());
              fetchVo.setDealNo(CommonFunction.checkNull(header1.get(1)).trim());
              fetchVo.setApplicationno(CommonFunction.checkNull(header1.get(2)).trim());
              fetchVo.setCustomername(CommonFunction.checkNull(header1.get(3)).trim());
              fetchVo.setProduct(CommonFunction.checkNull(header1.get(4)).trim());
              fetchVo.setScheme(CommonFunction.checkNull(header1.get(5)).trim());
              fetchVo.setRemarks(new StringBuilder().append("<input type=\"text\" id=\"remarks").append(i).append("\" name=\"remarks\" value=\"\" class=\"text3\" maxlength=\"500\" ").toString());
              fetchVo.setDecision(new StringBuilder().append("<select id=\"decision").append(i).append("\" name=\"decision\"><option value=\"A\">Approved</option><option value=\"X\">Send Back</option></select>").toString());
              fetchVo.setSanctionValidTill(new StringBuilder().append("<input type='text' readonly='true' id='sanctionValidTill").append(i).append("' name='sanctionValidTill' value='").append(CommonFunction.changeFormatJSP(CommonFunction.checkNull(header1.get(6)).trim())).append("' class='text3' maxlength='500' ").toString());
              fetchVo.setTotalRecordSize(count);
              list.add(fetchVo);
            }
            else
            {
              fetchVo.setChk(new StringBuilder().append("<input type=\"checkbox\" id=\"chk").append(i).append("\" name=\"chk\" value=\"").append(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0))).trim()).append("\" />").toString());
              fetchVo.setLbxDealNo(new StringBuilder().append("<a href=dealCapturing.do?method=leadEntryCapturing&dealId=").append(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0))).trim()).append(">").append(CommonFunction.checkNull(header1.get(1))).append("</a>").toString());
              fetchVo.setDealNo(CommonFunction.checkNull(header1.get(1)).trim());
              fetchVo.setApplicationno(CommonFunction.checkNull(header1.get(2)).trim());
              fetchVo.setCustomername(CommonFunction.checkNull(header1.get(3)).trim());
              fetchVo.setProduct(CommonFunction.checkNull(header1.get(4)).trim());
              fetchVo.setScheme(CommonFunction.checkNull(header1.get(5)).trim());
              fetchVo.setRemarks(new StringBuilder().append("<input type=\"text\" id=\"remarks").append(i).append("\" name=\"remarks\" value=\"\" class=\"text3\" maxlength=\"500\" ").toString());
              fetchVo.setDecision(new StringBuilder().append("<select id=\"decision").append(i).append("\" name=\"decision\"><option value=\"A\">Approved</option><option value=\"X\">Send Back</option></select>").toString());
              fetchVo.setSanctionValidTill(new StringBuilder().append("<input type='text' readonly='true'  id='sanctionValidTill").append(i).append("' name='sanctionValidTill' value='").append(CommonFunction.changeFormatJSP(CommonFunction.checkNull(header1.get(6)).trim())).append("' class='text3' maxlength='500' ").toString());
              fetchVo.setTotalRecordSize(count);
              list.add(fetchVo);
            }
          }
        }
      }
      else if ((vo.getStage() != null) && (vo.getStage().equalsIgnoreCase("A")))
      {
    	  bufInsSql.append(" select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,n.DEAL_SANCTION_VALID_TILL from cr_deal_colanding_approval_dtl cdcd join cr_deal_dtl d on d.deal_id=cdcd.deal_id and cdcd.rec_status='A' ");
          bufInsSqlTempCount.append(" select distinct count(1) FROM (select distinct d.DEAL_ID,DEAL_NO,DEAL_APPLICATION_FORM_NO,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC,n.DEAL_SANCTION_VALID_TILL from cr_deal_colanding_approval_dtl cdcd join cr_deal_dtl d on d.deal_id=cdcd.deal_id and cdcd.rec_status='A' ");

        bufInsSql.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
        bufInsSqlTempCount.append(" left join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");

        bufInsSql.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
        bufInsSqlTempCount.append(" left join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");

        bufInsSql.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
        bufInsSqlTempCount.append(" left join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");

        bufInsSql.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
        bufInsSqlTempCount.append(" left join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");

        if ((!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase("")))
        {
          bufInsSql.append(new StringBuilder().append("WHERE d.MAKER_ID<>'").append(StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()).append("' AND   d.DEAL_BRANCH in (select branch_id from sec_user_branch_dtl b where b.BRANCH_ID=d.DEAL_BRANCH and b.REC_STATUS='A') and d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' AND d.DEAL_APPLICATION_FORM_NO='").append(StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()).append("' AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' AND d.Rec_status='").append(StringEscapeUtils.escapeSql(vo.getStage()).trim()).append("' and d.deal_id not in (select qc.txn_id from cr_quality_check_dtl qc where qc.TXN_TYPE='LIM' and DECISION='A') AND D.DEAL_ID NOT IN (SELECT LOAN_DEAL_ID FROM CR_LOAN_DTL WHERE REC_STATUS IN ('P','F','A','C')) AND D.DEAL_BRANCH='").append(StringEscapeUtils.escapeSql(vo.getBranchId()).trim()).append("'").toString());
          bufInsSqlTempCount.append(new StringBuilder().append("WHERE d.MAKER_ID<>'").append(StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()).append("' AND   d.DEAL_BRANCH in (select branch_id from sec_user_branch_dtl b where b.BRANCH_ID=d.DEAL_BRANCH and b.REC_STATUS='A') and d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' AND d.DEAL_APPLICATION_FORM_NO='").append(StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()).append("' AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' AND d.Rec_status='").append(StringEscapeUtils.escapeSql(vo.getStage()).trim()).append("' and d.deal_id not in (select qc.txn_id from cr_quality_check_dtl qc where qc.TXN_TYPE='LIM' and DECISION='A') AND D.DEAL_ID NOT IN (SELECT LOAN_DEAL_ID FROM CR_LOAN_DTL WHERE REC_STATUS IN ('P','F','A','C')) AND D.DEAL_BRANCH='").append(StringEscapeUtils.escapeSql(vo.getBranchId()).trim()).append("'").toString());
        }

        if ((vo.getLbxDealNo().equalsIgnoreCase("")) || (vo.getApplicationno().equalsIgnoreCase("")) || (vo.getCustomername().equalsIgnoreCase("")) || (vo.getLbxProductID().equalsIgnoreCase("")) || (vo.getLbxscheme().equalsIgnoreCase("")) || (vo.getStage().equalsIgnoreCase(""))) {
          appendSQL = true;
        }

        if (appendSQL) {
          logger.info("In Where Clause");
          bufInsSql.append(new StringBuilder().append(" WHERE d.MAKER_ID<>'").append(StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()).append("' AND   d.DEAL_BRANCH in (select branch_id from sec_user_branch_dtl b where b.BRANCH_ID=d.DEAL_BRANCH and b.REC_STATUS='A') and d.Rec_status='").append(StringEscapeUtils.escapeSql(vo.getStage()).trim()).append("' and d.deal_id not in (select qc.txn_id from cr_quality_check_dtl qc where qc.TXN_TYPE='LIM'  and DECISION='A') AND D.DEAL_ID NOT IN (SELECT LOAN_DEAL_ID FROM CR_LOAN_DTL WHERE REC_STATUS IN ('P','F','A','C')) AND D.DEAL_BRANCH='").append(StringEscapeUtils.escapeSql(vo.getBranchId()).trim()).append("' ").toString());
          bufInsSqlTempCount.append(new StringBuilder().append(" WHERE d.MAKER_ID<>'").append(StringEscapeUtils.escapeSql(vo.getReportingToUserId()).trim()).append("' AND d.DEAL_BRANCH in (select branch_id from sec_user_branch_dtl b where b.BRANCH_ID=d.DEAL_BRANCH and b.REC_STATUS='A') and d.Rec_status='").append(StringEscapeUtils.escapeSql(vo.getStage()).trim()).append("' and d.deal_id not in (select qc.txn_id from cr_quality_check_dtl qc where qc.TXN_TYPE='LIM' and DECISION='A') AND D.DEAL_ID NOT IN (SELECT LOAN_DEAL_ID FROM CR_LOAN_DTL WHERE REC_STATUS IN ('P','F','A','C')) AND D.DEAL_BRANCH='").append(StringEscapeUtils.escapeSql(vo.getBranchId()).trim()).append("'").toString());
        }
        if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")) {
          bufInsSql.append(new StringBuilder().append("AND d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' ").toString());
          bufInsSqlTempCount.append(new StringBuilder().append("AND d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' ").toString());
          appendSQL = true;
        }

        if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getApplicationno())).trim().equalsIgnoreCase("")) {
          bufInsSql.append(new StringBuilder().append("AND d.DEAL_APPLICATION_FORM_NO='").append(StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()).append("' ").toString());
          bufInsSqlTempCount.append(new StringBuilder().append("AND d.DEAL_APPLICATION_FORM_NO='").append(StringEscapeUtils.escapeSql(vo.getApplicationno()).trim()).append("' ").toString());
          appendSQL = true;
        }

        if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")) {
          bufInsSql.append(new StringBuilder().append("AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' ").toString());
          bufInsSqlTempCount.append(new StringBuilder().append("AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' ").toString());
          appendSQL = true;
        }
        if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")) {
          bufInsSql.append(new StringBuilder().append("AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("' ").toString());
          bufInsSqlTempCount.append(new StringBuilder().append("AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("' ").toString());
          appendSQL = true;
        }
        if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")) {
          bufInsSql.append(new StringBuilder().append("AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
          bufInsSqlTempCount.append(new StringBuilder().append("AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
          appendSQL = true;
        }

        if ((!vo.getLbxDealNo().equalsIgnoreCase("")) || (!vo.getApplicationno().equalsIgnoreCase("")) || (!vo.getApplicationdate().equalsIgnoreCase("")) || (!vo.getCustomername().equalsIgnoreCase("")) || (!vo.getLbxProductID().equalsIgnoreCase("")) || (!vo.getLbxscheme().equalsIgnoreCase("")) || (!vo.getStage().equalsIgnoreCase(""))) {
          bufInsSqlTempCount.append(") as b");
          appendSQL = true;
        }

        count = Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
        logger.info(new StringBuilder().append("bufInsSqlTempCount : ").append(bufInsSqlTempCount.toString()).toString());
        if (((dealId.toString().trim() == null) && (appNo.toString().trim() == null) && (appDate.toString().trim() == null) && (custName.toString().trim() == null) && (productId.toString().trim() == null)) || ((dealId.toString().trim().equalsIgnoreCase("")) && (appNo.toString().trim().equalsIgnoreCase("")) && (appDate.toString().trim().equalsIgnoreCase("")) && (custName.toString().trim().equalsIgnoreCase("")) && (productId.toString().trim().equalsIgnoreCase(""))) || (fetchVo.getCurrentPageLink() > 1))
        {
          logger.info(new StringBuilder().append("current PAge Link no .................... ").append(fetchVo.getCurrentPageLink()).toString());
          if (fetchVo.getCurrentPageLink() > 1)
          {
            startRecordIndex = (fetchVo.getCurrentPageLink() - 1) * this.no;
            endRecordIndex = this.no;
            logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
            logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
          }

          bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
        }

        logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
        header = ConnectionDAO.sqlSelect(bufInsSql.toString());

        for (int i = 0; i < header.size(); i++)
        {
          ArrayList header1 = (ArrayList)header.get(i);
          if ((header1 != null) && (header1.size() > 0))
          {
            fetchVo = new CommonDealVo();
            if (CommonFunction.checkNull(vo.getQualityCheckStatus()).equalsIgnoreCase("N"))
            {
              fetchVo.setChk(new StringBuilder().append("<input type=\"checkbox\" id=\"chk").append(i).append("\" name=\"chk\" value=\"").append(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0))).trim()).append("\" />").toString());
              fetchVo.setLbxDealNo(new StringBuilder().append("<a href=dealCapturing.do?method=leadEntryCapturing&dealId=").append(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0))).trim()).append("&status=UWA>").append(CommonFunction.checkNull(header1.get(1))).append("</a>").toString());
              fetchVo.setDealNo(CommonFunction.checkNull(header1.get(1)).trim());
              fetchVo.setApplicationno(CommonFunction.checkNull(header1.get(2)).trim());
              fetchVo.setCustomername(CommonFunction.checkNull(header1.get(3)).trim());
              fetchVo.setProduct(CommonFunction.checkNull(header1.get(4)).trim());
              fetchVo.setScheme(CommonFunction.checkNull(header1.get(5)).trim());
              fetchVo.setRemarks(new StringBuilder().append("<input type=\"text\" id=\"remarks").append(i).append("\" name=\"remarks\" value=\"\" class=\"text3\" maxlength=\"500\" ").toString());
              fetchVo.setDecision(new StringBuilder().append("<select id=\"decision").append(i).append("\" name=\"decision\"><option value=\"A\">Approved</option><option value=\"X\">Send Back</option></select>").toString());
              fetchVo.setSanctionValidTill(new StringBuilder().append("<input type='text' readonly='true'  id='sanctionValidTill").append(i).append("' name='sanctionValidTill' value='").append(CommonFunction.changeFormatJSP(CommonFunction.checkNull(header1.get(6)).trim())).append("' class='text3' maxlength='500' ").toString());
              fetchVo.setTotalRecordSize(count);
              list.add(fetchVo);
            }
            else
            {
              fetchVo.setChk(new StringBuilder().append("<input type=\"checkbox\" id=\"chk").append(i).append("\" name=\"chk\" value=\"").append(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0))).trim()).append("\" />").toString());
              fetchVo.setLbxDealNo(new StringBuilder().append("<a href=dealCapturing.do?method=leadEntryCapturing&dealId=").append(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0))).trim()).append(">").append(CommonFunction.checkNull(header1.get(1))).append("</a>").toString());
              fetchVo.setDealNo(CommonFunction.checkNull(header1.get(1)).trim());
              fetchVo.setApplicationno(CommonFunction.checkNull(header1.get(2)).trim());
              fetchVo.setCustomername(CommonFunction.checkNull(header1.get(3)).trim());
              fetchVo.setProduct(CommonFunction.checkNull(header1.get(4)).trim());
              fetchVo.setScheme(CommonFunction.checkNull(header1.get(5)).trim());
              fetchVo.setRemarks(new StringBuilder().append("<input type=\"text\" id=\"remarks").append(i).append("\" name=\"remarks\" value=\"\" class=\"text3\" maxlength=\"500\" ").toString());
              fetchVo.setDecision(new StringBuilder().append("<select id=\"decision").append(i).append("\" name=\"decision\"><option value=\"A\">Approved</option><option value=\"X\">Send Back</option></select>").toString());
              fetchVo.setSanctionValidTill(new StringBuilder().append("<input type='text' readonly='true' id='sanctionValidTill").append(i).append("' name='sanctionValidTill' value='").append(CommonFunction.changeFormatJSP(CommonFunction.checkNull(header1.get(6)).trim())).append("' class='text3' maxlength='500' ").toString());
              fetchVo.setTotalRecordSize(count);
              list.add(fetchVo);
            }
          }
        }
      }

      logger.info(new StringBuilder().append("getTotalRecordSize : ").append(fetchVo.getTotalRecordSize()).toString());
      dealId = null;
      appNo = null;
      appDate = null;
      custName = null;
      productId = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    logger.info(new StringBuilder().append("Detail List when searchList is : ").append(list).toString());
    return list;
  }

  public boolean saveQualityCheckDetails(String[] remarksArr, String[] dealIdArr, String[] decisionArr, String txnType, CommonDealVo vo)
  {
    logger.info("Inside saveQualityCheckDealDetails method of CPDAOImpl");
    boolean flag = false;
    StringBuilder bufInsSql = null;
    PrepStmtObject insertPrepStmtObject = null;
    StringBuilder bufUpdSql = null;
    PrepStmtObject updPrepStmtObject = null;
    StringBuilder query1 = null;
    StringBuilder query2 = null;
    StringBuilder query3 = null;
    StringBuilder query4 = null;
    StringBuilder query5 = null;
    StringBuilder query6 = null;
    StringBuilder query7 = null;
    StringBuilder query8 = null;
    StringBuilder query9 = null;
    StringBuilder queryApp = null;
    PrepStmtObject updPrepStmtObject1 = null;
    PrepStmtObject updPrepStmtObject2 = null;
    PrepStmtObject updPrepStmtObject3 = null;
    PrepStmtObject updPrepStmtObject4 = null;
    PrepStmtObject updPrepStmtObject5 = null;
    PrepStmtObject updPrepStmtObject6 = null;
    PrepStmtObject updPrepStmtObject7 = null;
    PrepStmtObject updPrepStmtObject8 = null;
    PrepStmtObject updPrepStmtObject9 = null;
    PrepStmtObject updPrepStmtObjectApp = null;
    this.qryList = new ArrayList();
    try
    {
		String qry="SELECT IFNULL(PARAMETER_VALUE,'N') FROM PARAMETER_MST WHERE PARAMETER_KEY ='UNDERWRITER_FACILITY_DETAIL'";
		String res=ConnectionDAO.singleReturn(qry);
      for (int i = 0; i < dealIdArr.length; i++)
      {
        bufInsSql = new StringBuilder();
        insertPrepStmtObject = new PrepStmtObject();
        bufInsSql.append("insert into cr_quality_check_dtl(txn_id,txn_type,remarks,decision,maker_id,maker_date) ");
        bufInsSql.append("values(");
        bufInsSql.append("?,");
        bufInsSql.append("?,");
        bufInsSql.append("?,");
        bufInsSql.append("?,");
        bufInsSql.append("?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

        if (CommonFunction.checkNull(dealIdArr[i]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(dealIdArr[i]).trim());
        }
        if (CommonFunction.checkNull(txnType).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(txnType).trim());
        }
        if (CommonFunction.checkNull(remarksArr[i]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(remarksArr[i]).trim());
        }
        if (CommonFunction.checkNull(decisionArr[i]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(decisionArr[i]).trim());
        }
        if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getUserId()).trim());
        }
        if (CommonFunction.checkNull(vo.getBusinessdate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getBusinessdate()).trim());
        }
        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN saveQualityCheckDetails() insert query: ").append(insertPrepStmtObject.printQuery()).toString());
        this.qryList.add(insertPrepStmtObject);

        bufUpdSql = new StringBuilder();
        updPrepStmtObject = new PrepStmtObject();

        if (txnType.equalsIgnoreCase("DC"))
          bufUpdSql.append(new StringBuilder().append("update cr_deal_dtl set quality_check_dc_flag=?,quality_check_dc_date=STR_TO_DATE(?, '").append(this.dateFormat).append("'),QUALITY_CHECK_DC_MAKER_ID=? where deal_id=?").toString());
        if (txnType.equalsIgnoreCase("LIM")) {
          bufUpdSql.append(new StringBuilder().append("update cr_deal_dtl set quality_check_cm_flag=?,quality_check_cm_date=STR_TO_DATE(?, '").append(this.dateFormat).append("') where deal_id=?").toString());
        }
        if (CommonFunction.checkNull(decisionArr[i]).trim().equalsIgnoreCase(""))
          updPrepStmtObject.addNull();
        else {
          updPrepStmtObject.addString(CommonFunction.checkNull(decisionArr[i]).trim());
        }
        if (CommonFunction.checkNull(vo.getBusinessdate()).trim().equalsIgnoreCase(""))
          updPrepStmtObject.addNull();
        else {
          updPrepStmtObject.addString(CommonFunction.checkNull(vo.getBusinessdate()).trim());
        }
        if (txnType.equalsIgnoreCase("DC"))
        {
          if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
            updPrepStmtObject.addNull();
          else {
            updPrepStmtObject.addString(CommonFunction.checkNull(vo.getUserId()).trim());
          }
        }
        if (CommonFunction.checkNull(dealIdArr[i]).trim().equalsIgnoreCase(""))
          updPrepStmtObject.addNull();
        else {
          updPrepStmtObject.addString(CommonFunction.checkNull(dealIdArr[i]).trim());
        }
        updPrepStmtObject.setSql(bufUpdSql.toString());
        logger.info(new StringBuilder().append("IN saveQualityCheckDetails() update query: ").append(updPrepStmtObject.printQuery()).toString());
        this.qryList.add(updPrepStmtObject);
        if(CommonFunction.checkNull(decisionArr[i]).equalsIgnoreCase("A") && txnType.equalsIgnoreCase("DC"))
        {
          DedupeReferalDTO dto = new DedupeReferalDTO();
          dto.setTxnType("DC");
          dto.setTxnId(dealIdArr[i]);
          LMSMessagingClient lms = new LMSMessagingClient();

          String checkStageM = CommonFunction.stageMovement(vo.getCompanyId(), "DC", "F", dealIdArr[i], "QC", vo.getBusinessdate(), CommonFunction.checkNull(vo.getUserId()));
          logger.info(new StringBuilder().append("checkStageM[").append(i).append("]: ").append(checkStageM).toString());
        	
		}
		else if(CommonFunction.checkNull(decisionArr[i]).equalsIgnoreCase("A") && txnType.equalsIgnoreCase("LIM") && CommonFunction.checkNull(res).equalsIgnoreCase("N")){
			
			String checkStageM=CallFacilityDetailsProc(dealIdArr[i],"ALL");
			logger.info("checkStageM["+i+"]: "+checkStageM);
      	String QCatLoan = ConnectionDAO.singleReturn("SELECT IFNULL(PARAMETER_VALUE,'N') FROM PARAMETER_MST WHERE PARAMETER_KEY ='QUALITY_CHECK_AT_LOAN'");
		if(CommonFunction.checkNull(QCatLoan).equalsIgnoreCase("Y")){
			String QCatLoanStatus = CallAutoLoanProc(dealIdArr[i],vo.getUserId(),vo.getBusinessdate());
			logger.info("QCatLoanStatus[" + i + "]: " + QCatLoanStatus);
		}
        }
        else if ((CommonFunction.checkNull(decisionArr[i]).equalsIgnoreCase("A")) && (txnType.equalsIgnoreCase("LIM"))  && CommonFunction.checkNull(res).equalsIgnoreCase("N"))
        {
			String checkStageM=CallFacilityDetailsProc(dealIdArr[i],"ALL");
			logger.info("checkStageM["+i+"]: "+checkStageM);
          String QCatLoan = ConnectionDAO.singleReturn("SELECT IFNULL(PARAMETER_VALUE,'N') FROM PARAMETER_MST WHERE PARAMETER_KEY ='QUALITY_CHECK_AT_LOAN'");
          if (CommonFunction.checkNull(QCatLoan).equalsIgnoreCase("Y")) {
            String QCatLoanStatus = CallAutoLoanProc(dealIdArr[i], vo.getUserId(), vo.getBusinessdate());
            logger.info(new StringBuilder().append("QCatLoanStatus[").append(i).append("]: ").append(QCatLoanStatus).toString());
          }

        }
        else if ((CommonFunction.checkNull(decisionArr[i]).equalsIgnoreCase("X")) && (txnType.equalsIgnoreCase("DC")))        {
          query1 = new StringBuilder();
          query2 = new StringBuilder();
          query3 = new StringBuilder();
          query4 = new StringBuilder();
          query5 = new StringBuilder();
          query6 = new StringBuilder();

          updPrepStmtObject1 = new PrepStmtObject();
          updPrepStmtObject2 = new PrepStmtObject();
          updPrepStmtObject3 = new PrepStmtObject();
          updPrepStmtObject4 = new PrepStmtObject();
          updPrepStmtObject5 = new PrepStmtObject();
          updPrepStmtObject6 = new PrepStmtObject();

          query1.append(new StringBuilder().append("update cr_deal_dtl set DEAL_FORWARDED_DATE='0000-00-00 00:00:00',REC_STATUS='P' where DEAL_ID=").append(CommonFunction.checkNull(dealIdArr[i]).trim()).toString());
          query2.append(new StringBuilder().append("update cr_deal_customer_role set STATUS='P' where DEAL_ID=").append(CommonFunction.checkNull(dealIdArr[i]).trim()).toString());
          query3.append(new StringBuilder().append("update cr_deal_loan_dtl set REC_STATUS='P' where DEAL_ID=").append(CommonFunction.checkNull(dealIdArr[i]).trim()).toString());
          query4.append(new StringBuilder().append("update cr_deal_collateral_m set REC_STATUS='P' where DEAL_ID=").append(CommonFunction.checkNull(dealIdArr[i]).trim()).toString());
          query5.append(new StringBuilder().append("update cr_deal_txncharges_dtl set REC_STATUS='P' where DEAL_ID=").append(CommonFunction.checkNull(dealIdArr[i]).trim()).toString());
          query6.append(new StringBuilder().append("update cr_document_dtl set REC_STATUS='A' where TXNID=").append(CommonFunction.checkNull(dealIdArr[i]).trim()).toString());

          updPrepStmtObject1.setSql(query1.toString());
          updPrepStmtObject2.setSql(query2.toString());
          updPrepStmtObject3.setSql(query3.toString());
          updPrepStmtObject4.setSql(query4.toString());
          updPrepStmtObject5.setSql(query5.toString());
          updPrepStmtObject6.setSql(query6.toString());

          this.qryList.add(updPrepStmtObject1);
          this.qryList.add(updPrepStmtObject2);
          this.qryList.add(updPrepStmtObject3);
          this.qryList.add(updPrepStmtObject4);
          this.qryList.add(updPrepStmtObject5);
          this.qryList.add(updPrepStmtObject6);
          String checkStageM = CommonFunction.stageMovement(vo.getCompanyId(), "DC", "X", dealIdArr[i], "QC", vo.getBusinessdate(), CommonFunction.checkNull(vo.getUserId()));
          logger.info(new StringBuilder().append("checkStageM[").append(i).append("]: ").append(checkStageM).toString());
        }
        else if ((CommonFunction.checkNull(decisionArr[i]).equalsIgnoreCase("X")) && (txnType.equalsIgnoreCase("LIM")))
        {
          query7 = new StringBuilder();
          query8 = new StringBuilder();
          query9 = new StringBuilder();
          StringBuilder query10 = new StringBuilder();
            StringBuilder query11 = new StringBuilder();

          queryApp = new StringBuilder();
          updPrepStmtObject7 = new PrepStmtObject();
          updPrepStmtObject8 = new PrepStmtObject();
          updPrepStmtObject9 = new PrepStmtObject();
          PrepStmtObject updPrepStmtObject10 = new PrepStmtObject();
            PrepStmtObject updPrepStmtObject11 = new PrepStmtObject();
          updPrepStmtObjectApp = new PrepStmtObject();
          
          
       String qry1="   SELECT IFNULL(MIN(LEVEL),1)"
       		+ "  FROM cr_deal_dtl d"
       		+ "  INNER join cr_deal_loan_dtl n ON d.DEAL_ID=n.DEAL_ID "
       		+ "INNER JOIN cr_user_approval_m ua ON n.DEAL_LOAN_AMOUNT>=ua.AMOUNT_FROM"
       		+ " AND n.DEAL_LOAN_AMOUNT<=ua.AMOUNT_TO AND ua.USER_ROLE='U' AND ua.REC_STATUS='A'"
       		+ " INNER JOIN cr_user_product_mapping_m  L ON L.PRODUCT_ID = n.DEAL_PRODUCT"
       		+ " AND ua.USER_ID=L.USER_ID AND L.REC_STATUS = 'A'  WHERE d.deal_id='"+CommonFunction.checkNull(dealIdArr[i]).trim()+"'"
       		+ "  AND exists (SELECT 1 FROM SEC_USER_BRANCH_DTL subd WHERE subd.user_id=ua.user_id and subd.branch_id=d.DEAL_BRANCH AND subd.REC_STATUS='A') ";
       String minLevel=ConnectionDAO.singleReturn(qry1);
          
          query8.append(new StringBuilder().append("update cr_deal_dtl set REC_STATUS='F', DEAL_CURRENT_APPROVAL_LEVEL="+minLevel+" where DEAL_ID=").append(CommonFunction.checkNull(dealIdArr[i]).trim()).toString());
          query9.append(new StringBuilder().append("update cr_deal_loan_dtl set REC_STATUS='F' where DEAL_ID=").append(CommonFunction.checkNull(dealIdArr[i]).trim()).toString());
          query7.append(new StringBuilder().append("update cr_deal_movement_dtl set DEAL_FORWARDED='0000-00-00 00:00:00',DEAL_FORWARD_USER='' where deal_stage_id='UNC' and DEAL_ID=").append(CommonFunction.checkNull(dealIdArr[i]).trim()).toString());
          query10.append("DELETE FROM CR_DEAL_COLANDING_APPROVAL_DTL WHERE REC_STATUS='A' AND DEAL_ID='"+dealIdArr[i]+"'");
            query11.append(" UPDATE CR_DEAL_APPROVAL_DTL SET REC_STATUS='X' WHERE DEAL_ID='"+dealIdArr[i]+"' ");
          updPrepStmtObject7.setSql(query7.toString());
          updPrepStmtObject8.setSql(query8.toString());
          updPrepStmtObject9.setSql(query9.toString());
          updPrepStmtObject10.setSql(query10.toString());
            updPrepStmtObject11.setSql(query11.toString());
          this.qryList.add(updPrepStmtObject7);
          this.qryList.add(updPrepStmtObject8);
          this.qryList.add(updPrepStmtObject9);
          this.qryList.add(updPrepStmtObject10);
            this.qryList.add(updPrepStmtObject11);
        }
      }

      flag = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
      logger.info(new StringBuilder().append("In saveQualityCheckDetails...............flag: ").append(flag).toString());
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      bufInsSql = null;
      insertPrepStmtObject = null;
      bufUpdSql = null;
      updPrepStmtObject = null;
      query1 = null;
      query2 = null;
      query3 = null;
      query4 = null;
      query5 = null;
      query6 = null;
      query7 = null;
      query8 = null;
      query9 = null;
      queryApp = null;
      updPrepStmtObject1 = null;
      updPrepStmtObject2 = null;
      updPrepStmtObject3 = null;
      updPrepStmtObject4 = null;
      updPrepStmtObject5 = null;
      updPrepStmtObject6 = null;
      updPrepStmtObject7 = null;
      updPrepStmtObject8 = null;
      updPrepStmtObject9 = null;
      updPrepStmtObjectApp = null;
      this.qryList.clear();
      this.qryList = null;
    }
    return flag;
  }

  public String checkCustomerType(CommonPageSecVo vo)
  {
    String[] dealIdArr = vo.getDealId();
    logger.info(new StringBuilder().append("checkCustomerType deal Id: ").append(dealIdArr[0]).toString());
    String queryCustomerType = new StringBuilder().append("select count(1) from cr_deal_dtl where DEAL_CUSTOMER_TYPE='C' and DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealIdArr[0]))).append("'").toString();
    logger.info(new StringBuilder().append("queryCustomerType: ").append(queryCustomerType).toString());
    String customerTypeCount = ConnectionDAO.singleReturn(queryCustomerType);
    logger.info(new StringBuilder().append("customerTypeCount: ").append(customerTypeCount).toString());
    return customerTypeCount;
  }

  public ArrayList<CommonDealVo> getScoringDtlList(CommonDealVo vo)
  {
    ArrayList list = new ArrayList();
    StringBuilder query = new StringBuilder();
    ArrayList in = new ArrayList();
    ArrayList out = new ArrayList();
    ArrayList outMessages = new ArrayList();
    String s1 = "";
    String s2 = "";
    try {
      String checkQry = new StringBuilder().append("Select rec_status from cr_deal_dtl where deal_id='").append(vo.getDealNo()).append("'").toString();
      String recStatus = ConnectionDAO.singleReturn(checkQry);
      if (!CommonFunction.checkNull(recStatus).equalsIgnoreCase("A")) {
        in.add(vo.getDealNo());
        out.add(s1);
        out.add(s2);
        logger.info("scorecard_creation in getScoringDtlList");
        logger.info(new StringBuilder().append("scorecard_creation (").append(in.toString()).append(",").append(out.toString()).append(")").toString());
        outMessages = (ArrayList)ConnectionDAO.callSP("scorecard_creation", in, out);
        s1 = CommonFunction.checkNull(outMessages.get(0));
        s2 = CommonFunction.checkNull(outMessages.get(1));
        logger.info(new StringBuilder().append("s1  : ").append(s1).toString());
        logger.info(new StringBuilder().append("s2  : ").append(s2).toString());
        if (s1.equalsIgnoreCase("S"))
        {
          logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
        }
        else
        {
          logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
        }
      }

      query.append("Select b.SCORING_PARAM_NAME,APPLICANT_VALUE,SCORING_WEIGHTAGE,SCORE,WEIGHTAGE from cr_scoring_param  b  join  cr_applicant_scorecard_dtl a on ");
      query.append(new StringBuilder().append(" a.SCORING_PARAM_CODE=b.SCORING_PARAM_CODE where DEAL_ID='").append(CommonFunction.checkNull(vo.getDealNo())).append("'").toString());
      logger.info(new StringBuilder().append("query : ").append(query).toString());
      ArrayList paramDetail = ConnectionDAO.sqlSelect(query.toString());
      for (int i = 0; i < paramDetail.size(); i++)
      {
        ArrayList subParamDetail = (ArrayList)paramDetail.get(i);
        if (subParamDetail.size() > 0)
        {
          CommonDealVo nvo = new CommonDealVo();
          nvo.setScoringParamName(StringEscapeUtils.escapeSql(CommonFunction.checkNull(subParamDetail.get(0))).trim());
          nvo.setApplicationValue(StringEscapeUtils.escapeSql(CommonFunction.checkNull(subParamDetail.get(1))).trim());
          nvo.setScoringWeightage(StringEscapeUtils.escapeSql(CommonFunction.checkNull(subParamDetail.get(2))).trim());
          nvo.setScore(StringEscapeUtils.escapeSql(CommonFunction.checkNull(subParamDetail.get(3))).trim());
          nvo.setWeightage(StringEscapeUtils.escapeSql(CommonFunction.checkNull(subParamDetail.get(4))).trim());
          nvo.setTotalRecordSize(paramDetail.size());
          list.add(nvo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    logger.info(new StringBuilder().append("paramDetail size is ..................................").append(list.size()).toString());
    return list;
  }

  public String insertDealForEmiLoan(String userId, String bgDate)
  {
    logger.info("In insertDealForEmiLoan--------------------------------------");
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = null;
    boolean status = false;
    String dealId = null;
    StringBuffer bufInsSql = new StringBuffer();
    try {
      bufInsSql.append("insert into cr_deal_dtl_emi_calc (DEAL_BRANCH,REC_STATUS,MAKER_ID,MAKER_DATE)");
      bufInsSql.append(" values ( ");
      bufInsSql.append(" '0',");
      bufInsSql.append(" 'X',");
      bufInsSql.append(new StringBuilder().append(" '").append(userId).append("',").toString());
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE('").append(bgDate).append("', '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

      insertPrepStmtObject = new PrepStmtObject();
      insertPrepStmtObject.setSql(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN insertDealForEmiLoan() insert query1 ::::::::::::::::::::::").append(insertPrepStmtObject.printQuery()).toString());

      qryList.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);

      logger.info(new StringBuilder().append("status............................").append(status).toString());

      if (status)
      {
        StringBuilder query = new StringBuilder();
        query.append(new StringBuilder().append("SELECT max(deal_id) FROM cr_deal_dtl_emi_calc WHERE MAKER_ID='").append(userId).append("' for update ").toString());
        logger.info(new StringBuilder().append("query:::::::::::::::::::::::::::::::").append(query.toString()).toString());
        dealId = ConnectionDAO.singleReturn(query.toString());
        logger.info(new StringBuilder().append("dealId::::::::::::::::::::::::::::::::::::").append(dealId).toString());
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return dealId;
  }

  public boolean saveLoanForEmiCalc(Object ob)
  {
    LoanDetailVo loanVo = (LoanDetailVo)ob;
    boolean status = false;
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = null;
    String dealId = null;
    logger.info(new StringBuilder().append("In saveCustomer....saveLoanForEmiCalcu...").append(loanVo.getDealLoanId()).append("loanVo.getType() ").append(loanVo.getType()).toString());
    try {
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("insert into cr_deal_loan_dtl_emi_calc (DEAL_ID,DEAL_PRODUCT_CATEGORY,DEAL_PRODUCT, DEAL_SCHEME,DEAL_PRODUCT_TYPE,DEAL_DISBURSAL_DATE,DEAL_ASSET_COST,DEAL_MARGIN_RATE, DEAL_MARGIN_AMOUNT,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_REPAYMENT_FREQ, DEAL_RATE_TYPE,DEAL_RATE_METHOD,DEAL_BASE_RATE_TYPE,DEAL_BASE_RATE, DEAL_MARKUP,DEAL_FINAL_RATE,DEAL_REPAYMENT_TYPE,DEAL_INSTALLMENT_TYPE, DEAL_INSTALLMENT_MODE, DEAL_NO_OF_INSTALLMENT,  DEAL_REPAYMENT_MODE,DEAL_LOAN_PURPOSE,REC_STATUS,MAKER_ID,MAKER_DATE,DEAL_SECTOR_TYPE,DEAL_ADVANCE_INSTL,DEAL_REPAY_EFF_DATE,DEAL_MATURITY_DATE,DEAL_DUE_DAY,NEXT_DUE_DATE,DEAL_FLAT_RATE,DEAL_EFF_RATE,DEAL_INT_CALC_FROM,LOAN_TYPE,TENURE_IN_DAY)");

      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" 'F',");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND), ").toString());
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsSql.append(" ?, ");
      bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ? )");

      insertPrepStmtObject = new PrepStmtObject();

      if (CommonFunction.checkNull(loanVo.getDealId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getDealId().trim());
      }
      if (CommonFunction.checkNull(loanVo.getProductType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(loanVo.getProductType().trim());
      if (CommonFunction.checkNull(loanVo.getLbxProductID()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(loanVo.getLbxProductID().trim());
      if (CommonFunction.checkNull(loanVo.getLbxscheme()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getLbxscheme().trim());
      }
      if (CommonFunction.checkNull(loanVo.getProductTypeFlag()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getProductTypeFlag().trim());
      }
      if (CommonFunction.checkNull(loanVo.getDisbursalDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getDisbursalDate().trim());
      }
      if (loanVo.getAssetCost().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getAssetCost().trim()).toString());
      }
      if (loanVo.getMarginPerc().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getMarginPerc().trim()).toString());
      if (CommonFunction.checkNull(loanVo.getMarginAmount()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getMarginAmount().trim()).toString());
      if (CommonFunction.checkNull(loanVo.getRequestedLoanAmount()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getRequestedLoanAmount().trim()).toString());
      if (CommonFunction.checkNull(loanVo.getRequestedLoanTenure()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(loanVo.getRequestedLoanTenure().trim());
      if (CommonFunction.checkNull(loanVo.getFrequency()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getFrequency().trim());
      }
      if (CommonFunction.checkNull(loanVo.getRateType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getRateType().trim());
      }

      if (CommonFunction.checkNull(loanVo.getBaseRateType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getBaseRateType().trim());
      }
      if (CommonFunction.checkNull(loanVo.getBaseRate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getBaseRate().trim());
      }
      if (CommonFunction.checkNull(loanVo.getMarkUp()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getMarkUp().trim()).toString());
      }
      if (CommonFunction.checkNull(loanVo.getEffectiveRate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getEffectiveRate().trim()).toString());
      }
      if (CommonFunction.checkNull(loanVo.getRepaymentType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(loanVo.getRepaymentType().trim());
      if (CommonFunction.checkNull(loanVo.getInstallmentType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(loanVo.getInstallmentType().trim());
      if (CommonFunction.checkNull(loanVo.getInstMode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getInstMode().trim());
      }

      if (CommonFunction.checkNull(loanVo.getNoOfInstall()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getNoOfInstall().trim());
      }
      if (CommonFunction.checkNull(loanVo.getPaymentMode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(loanVo.getPaymentMode().trim());
      if (CommonFunction.checkNull(loanVo.getLoanPurpose()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getLoanPurpose().trim());
      }
      insertPrepStmtObject.addString("X");
      if (CommonFunction.checkNull(loanVo.getUserId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getUserId().trim());
      }
      if (CommonFunction.checkNull(loanVo.getBgDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getBgDate().trim());
      }

      if (CommonFunction.checkNull(loanVo.getSectorType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getSectorType().trim());
      }
      if (CommonFunction.checkNull(loanVo.getInstallments()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0");
      else {
        insertPrepStmtObject.addString(loanVo.getInstallments().trim());
      }
      if (CommonFunction.checkNull(loanVo.getRepayEffectiveDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getRepayEffectiveDate().trim());
      }
      if (CommonFunction.checkNull(loanVo.getMaturityDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getMaturityDate().trim());
      }
      if (CommonFunction.checkNull(loanVo.getCycleDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getCycleDate().trim());
      }
      if (CommonFunction.checkNull(loanVo.getNextDueDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getNextDueDate().trim());
      }
      if (CommonFunction.checkNull(loanVo.getRateType()).trim().equalsIgnoreCase("F"))
      {
        if (CommonFunction.checkNull(loanVo.getEffectiveRate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getEffectiveRate().trim()).toString());
        }
      }
      else {
        insertPrepStmtObject.addNull();
      }
      if (CommonFunction.checkNull(loanVo.getRateType()).trim().equalsIgnoreCase("E"))
      {
        if (CommonFunction.checkNull(loanVo.getEffectiveRate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getEffectiveRate().trim()).toString());
        }
      }
      else {
        insertPrepStmtObject.addNull();
      }

      if (CommonFunction.checkNull(loanVo.getInterestCalc()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getInterestCalc().trim());
      }
      if (CommonFunction.checkNull(loanVo.getLoanType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getLoanType().trim());
      }
      if (CommonFunction.checkNull(loanVo.getTenureInDay()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getTenureInDay().trim());
      }
      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN SaveLoan() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In saveCustomer......................").append(status).toString());

      bufInsSql = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return status;
  }

  public String getDealNumber(Object ob)
  {
    LoanDetailVo creditVo = (LoanDetailVo)ob;
    String maxId = null;
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

    long vCode = 0L;
    try
    {
      logger.info("In insert ::::");
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("insert into cr_deal_dtl(DEAL_BRANCH,REC_STATUS)");
      bufInsSql.append(" values ( ");
      bufInsSql.append(" '0',");
      bufInsSql.append(" 'X' )");

      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN getDealNumber() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

      bufInsSql = null;

      qryList.add(insertPrepStmtObject);
      boolean status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In getDealNumber......................").append(status).toString());

      if (status)
      {
        StringBuilder query = new StringBuilder();
        query.append("select max(DEAL_ID) from cr_deal_dtl for update");
        maxId = ConnectionDAO.singleReturn(query.toString());
        logger.info(new StringBuilder().append("In maxId......................").append(maxId).toString());
        query = null;
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      qryList = null;
      insertPrepStmtObject = null;
    }
    return maxId;
  }

  public boolean saveChargesForEmiCal(Object ob)
  {
    ChargeVo vo = (ChargeVo)ob;
    logger.info(new StringBuilder().append("In saveCharges....saveCharges...Update mod:  ").append(vo.getChargeIdDtl()).toString());
    this.qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = null;
    String[] dId = vo.getChargeIdDtl();
    String[] finalAmount = vo.getFinalAmount();
    String[] chargeAmount = vo.getChargeAmount();

    String[] taxAmount1 = vo.getDealChargeTaxAmountInConfig1();
    String[] taxAmount2 = vo.getDealChargeTaxAmountInConfig2();
    String[] tdsAmount = vo.getDealChargeTdsAmountInConfig();
    String[] netAmount = vo.getDealChargeNetAmountInConfig();
    boolean status = false;

    if (dId.length > 0)
    {
      for (int k = 0; k < vo.getChargeIdDtl().length; k++)
      {
        logger.info(new StringBuilder().append("Charge Id in saveCharges: ").append(dId[k]).toString());
        StringBuilder query = new StringBuilder();
        query.append(new StringBuilder().append("update cr_deal_txncharges_dtl_emi_calc set DEAL_CHARGE_FINAL_AMOUNT=?,DEAL_CHARGE_CALCULATED_AMOUNT=?,DEAL_CHARGE_TAX_AMOUNT1=?,DEAL_CHARGE_TAX_AMOUNT2=?,DEAL_CHARGE_TDS_AMOUNT=?,DEAL_CHARGE_NET_AMOUNT=?, REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) where DEAL_CHARGE_DTL_ID=?").toString());
        insertPrepStmtObject = new PrepStmtObject();

        if (CommonFunction.checkNull(finalAmount[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          try {
            insertPrepStmtObject.addString(this.myFormatter.parse(finalAmount[k].trim()).toString());
          } catch (ParseException e) {
            e.printStackTrace();
          }
        }
        if (CommonFunction.checkNull(chargeAmount[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          try {
            insertPrepStmtObject.addString(this.myFormatter.parse(chargeAmount[k].trim()).toString());
          } catch (ParseException e) {
            e.printStackTrace();
          }
        }
        if (CommonFunction.checkNull(taxAmount1[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          try {
            insertPrepStmtObject.addString(this.myFormatter.parse(taxAmount1[k].trim()).toString());
          } catch (ParseException e) {
            e.printStackTrace();
          }
        }
        if (CommonFunction.checkNull(taxAmount2[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          try {
            insertPrepStmtObject.addString(this.myFormatter.parse(taxAmount2[k].trim()).toString());
          } catch (ParseException e) {
            e.printStackTrace();
          }
        }
        if (CommonFunction.checkNull(tdsAmount[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          try {
            insertPrepStmtObject.addString(this.myFormatter.parse(tdsAmount[k].trim()).toString());
          } catch (ParseException e) {
            e.printStackTrace();
          }
        }
        if (CommonFunction.checkNull(netAmount[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          try {
            insertPrepStmtObject.addString(this.myFormatter.parse(netAmount[k].trim()).toString());
          } catch (ParseException e) {
            e.printStackTrace();
          }
        }
        insertPrepStmtObject.addString("P");

        if (CommonFunction.checkNull(vo.getUserId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getUserId());
        }
        if (CommonFunction.checkNull(vo.getBussinessDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getBussinessDate());
        }
        if (CommonFunction.checkNull(dId[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(dId[k].trim());
        }
        insertPrepStmtObject.setSql(query.toString());
        this.qryList.add(insertPrepStmtObject);
        query = null;
      }
      try
      {
        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
        logger.info(new StringBuilder().append("In saveCharges......................").append(status).toString());
      } catch (Exception e) {
        e.printStackTrace();
      }

    }

    return status;
  }

  public String getDealIdForEmiCalc(String userId)
  {
    StringBuilder query = new StringBuilder();
    query.append(new StringBuilder().append("SELECT max(deal_id) FROM cr_deal_dtl_emi_calc WHERE MAKER_ID='").append(userId).append("' for update").toString());
    logger.info(new StringBuilder().append("query::::").append(query.toString()).toString());
    String dealId = ConnectionDAO.singleReturn(query.toString());
    logger.info(new StringBuilder().append("dealId::::").append(dealId).toString());
    return dealId;
  }

  public ArrayList getAllLoanDetailsForEmiCalc(String dealLoanId)
  {
    logger.info(new StringBuilder().append("dealLoanId: ").append(dealLoanId).toString());
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT DEAL_PRODUCT,DEAL_SCHEME,DATE_FORMAT(DEAL_DISBURSAL_DATE,'").append(this.dateFormat).append("'),DEAL_ASSET_COST,").append(" DEAL_MARGIN_RATE,DEAL_MARGIN_AMOUNT,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_REPAYMENT_FREQ,DEAL_RATE_TYPE,").append(" DEAL_RATE_METHOD,DEAL_BASE_RATE_TYPE,DEAL_BASE_RATE,DEAL_MARKUP,DEAL_FINAL_RATE,DEAL_REPAYMENT_TYPE,DEAL_INSTALLMENT_TYPE,").append(" DEAL_INSTALLMENT_MODE,DEAL_REPAYMENT_MODE,DEAL_LOAN_PURPOSE,DEAL_LOAN_ID,p.PRODUCT_DESC,s.SCHEME_DESC,s.MIN_AMT_FIN,s.MAX_AMT_FIN,s.MIN_MARGIN_RATE,s.MAX_MARGIN_RATE,s.MIN_TENURE,s.MAX_TENURE,p.ASSET_FLAG,d.DEAL_NO_OF_INSTALLMENT,p.ASSET_FLAG,DEAL_SECTOR_TYPE,DEAL_ADVANCE_INSTL,DATE_FORMAT(DEAL_REPAY_EFF_DATE,'").append(this.dateFormat).append("') ,DATE_FORMAT(DEAL_MATURITY_DATE,'").append(this.dateFormat).append("'),DEAL_DUE_DAY,DATE_FORMAT(NEXT_DUE_DATE,'").append(this.dateFormat).append("'),g.value,S.RATE_METHOD,DEAL_INT_CALC_FROM,D.NET_LTV,d.TENURE_IN_DAY,p.DAYS_BASIS from cr_deal_loan_dtl_emi_calc d left join cr_product_m p on d.DEAL_PRODUCT=p.PRODUCT_ID left join cr_scheme_m s on d.DEAL_SCHEME=s.SCHEME_ID left join generic_master g on g.VALUE=d.LOAN_TYPE where d.DEAL_LOAN_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId)).trim()).toString());

      logger.info(new StringBuilder().append("getAllLoanDetails: ").append(query).toString());
      LoanDetailVo loanVo = null;
      ArrayList loandeatail = ConnectionDAO.sqlSelect(query.toString());
      query = null;

      if (loandeatail.size() > 0)
        for (int i = 0; i < loandeatail.size(); i++)
        {
          logger.info(new StringBuilder().append("getAllLoanDetails").append(loandeatail.get(i).toString()).toString());
          ArrayList loandeatail1 = (ArrayList)loandeatail.get(i);
          if (loandeatail1.size() > 0)
          {
            logger.info(new StringBuilder().append("getAllLoanDetails").append(loandeatail1.size()).toString());
            loanVo = new LoanDetailVo();
            loanVo.setLbxProductID(CommonFunction.checkNull(loandeatail1.get(0)).trim());
            loanVo.setLbxscheme(CommonFunction.checkNull(loandeatail1.get(1)).trim());
            loanVo.setDisbursalDate(CommonFunction.checkNull(loandeatail1.get(2)).trim());
            if (!CommonFunction.checkNull(loandeatail1.get(3)).equalsIgnoreCase(""))
            {
              Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(3)).trim());
              loanVo.setAssetCost(this.myFormatter.format(reconNum));
            }
            if (!CommonFunction.checkNull(loandeatail1.get(4)).equalsIgnoreCase(""))
            {
              Number reconNumP = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(4)).trim());
              loanVo.setMarginPerc(this.myFormatter.format(reconNumP));
              loanVo.setLtvPerc(this.myFormatter.format(100.0D - reconNumP.doubleValue()));
            }
            else
            {
              loanVo.setLtvPerc("100.00");
            }
            if (!CommonFunction.checkNull(loandeatail1.get(5)).equalsIgnoreCase(""))
            {
              Number reconNumA = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(5)).trim());
              loanVo.setMarginAmount(this.myFormatter.format(reconNumA));
            }
            if (!CommonFunction.checkNull(loandeatail1.get(6)).equalsIgnoreCase(""))
            {
              Number reconNumL = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(6)).trim());
              loanVo.setRequestedLoanAmount(this.myFormatter.format(reconNumL));
            }
            loanVo.setRequestedLoanTenure(CommonFunction.checkNull(loandeatail1.get(7)).trim());
            loanVo.setFrequency(CommonFunction.checkNull(loandeatail1.get(8)).trim());
            loanVo.setRateType(CommonFunction.checkNull(loandeatail1.get(9)).trim());
            loanVo.setType(CommonFunction.checkNull(loandeatail1.get(10)).trim());
            logger.info(new StringBuilder().append("base rate type............... ").append(CommonFunction.checkNull(loandeatail1.get(11)).trim()).toString());
            loanVo.setBaseRateType(CommonFunction.checkNull(loandeatail1.get(11)).trim());
            if (!CommonFunction.checkNull(loandeatail1.get(12)).equalsIgnoreCase(""))
            {
              Number reconNumb = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(12)).trim());
              loanVo.setBaseRate(this.myFormatter.format(reconNumb));
            }
            if (!CommonFunction.checkNull(loandeatail1.get(13)).equalsIgnoreCase(""))
            {
              Number reconNumU = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(13)).trim());
              loanVo.setMarkUp(this.myFormatter.format(reconNumU));
            }
            if (!CommonFunction.checkNull(loandeatail1.get(14)).equalsIgnoreCase(""))
            {
              Number reconNumE = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(14)).trim());
              loanVo.setEffectiveRate(this.myFormatter.format(reconNumE));
            }
            loanVo.setRepaymentType(CommonFunction.checkNull(loandeatail1.get(15)).trim());
            if (CommonFunction.checkNull(loandeatail1.get(15)).trim().equalsIgnoreCase("I"))
            {
              loanVo.setShowRepaymentType("INSTALLMENT");
            }
            else if (CommonFunction.checkNull(loandeatail1.get(15)).trim().equalsIgnoreCase("N"))
            {
              loanVo.setShowRepaymentType("NON-INSTALLMENT");
            }
            loanVo.setInstallmentType(CommonFunction.checkNull(loandeatail1.get(16)).trim());
            loanVo.setInstMode(CommonFunction.checkNull(loandeatail1.get(17)).trim());
            loanVo.setPaymentMode(CommonFunction.checkNull(loandeatail1.get(18)).trim());
            loanVo.setLoanPurpose(CommonFunction.checkNull(loandeatail1.get(19)).trim());
            loanVo.setDealLoanId(CommonFunction.checkNull(loandeatail1.get(20)).trim());
            loanVo.setProduct(CommonFunction.checkNull(loandeatail1.get(21)).trim());
            loanVo.setScheme(CommonFunction.checkNull(loandeatail1.get(22)).trim());
            if (!CommonFunction.checkNull(loandeatail1.get(23)).equalsIgnoreCase(""))
            {
              Number reconNumf = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(23)).trim());
              loanVo.setMinFinanceAmount(this.myFormatter.format(reconNumf));
            }
            if (!CommonFunction.checkNull(loandeatail1.get(24)).equalsIgnoreCase(""))
            {
              Number reconNummf = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(24)).trim());
              loanVo.setMaxFinanceAmount(this.myFormatter.format(reconNummf));
            }
            if (!CommonFunction.checkNull(loandeatail1.get(25)).equalsIgnoreCase(""))
            {
              Number reconNummr = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(25)).trim());
              loanVo.setMinMRate(this.myFormatter.format(reconNummr));
            }
            if (!CommonFunction.checkNull(loandeatail1.get(26)).equalsIgnoreCase(""))
            {
              Number reconNummm = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(26)).trim());
              loanVo.setMaxMRate(this.myFormatter.format(reconNummm));
            }
            loanVo.setMinTenure(CommonFunction.checkNull(loandeatail1.get(27)).trim());
            loanVo.setMaxTenure(CommonFunction.checkNull(loandeatail1.get(28)).trim());
            loanVo.setAssetFlag(CommonFunction.checkNull(loandeatail1.get(29)).trim());
            loanVo.setNoOfInstall(CommonFunction.checkNull(loandeatail1.get(30)).trim());
            loanVo.setProductTypeFlag(CommonFunction.checkNull(loandeatail1.get(31)).trim());
            loanVo.setSectorType(CommonFunction.checkNull(loandeatail1.get(32)).trim());
            loanVo.setInstallments(CommonFunction.checkNull(loandeatail1.get(33)).trim());
            loanVo.setRepayEffectiveDate(CommonFunction.checkNull(loandeatail1.get(34)).trim());
            loanVo.setMaturityDate(CommonFunction.checkNull(loandeatail1.get(35)).trim());
            loanVo.setCycleDate(CommonFunction.checkNull(loandeatail1.get(36)).trim());
            loanVo.setNextDueDate(CommonFunction.checkNull(loandeatail1.get(37)).trim());
            loanVo.setLoanType(CommonFunction.checkNull(loandeatail1.get(38)).trim());
            loanVo.setRateMethodType(CommonFunction.checkNull(loandeatail1.get(39)).trim());
            logger.info(new StringBuilder().append("getAllLoanDetails: Interest Calc From---").append(CommonFunction.checkNull(loandeatail1.get(40))).toString());
            loanVo.setInterestCalc(CommonFunction.checkNull(loandeatail1.get(40)).trim());
            loanVo.setNetLtv(CommonFunction.checkNull(loandeatail1.get(41)).trim());
            loanVo.setTenureInDay(CommonFunction.checkNull(loandeatail1.get(42)).trim());
            loanVo.setDaysBasis(CommonFunction.checkNull(loandeatail1.get(43)).trim());

            list.add(loanVo);
          }
        }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getLoanDetailListForEmiCalc(String dealId)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT DEAL_LOAN_ID,DEAL_PRODUCT,DEAL_SCHEME,p.PRODUCT_DESC,s.SCHEME_DESC,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_RATE_TYPE,DEAL_RATE_METHOD,DEAL_LOAN_PURPOSE from cr_deal_loan_dtl d left join cr_product_m p on d.DEAL_PRODUCT=p.PRODUCT_ID left join cr_scheme_m s on d.DEAL_SCHEME=s.SCHEME_ID where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
      logger.info(new StringBuilder().append("getLoanDetailList").append(query).toString());
      LoanDetailVo loanVo = null;
      ArrayList loandeatail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getProductTypeList").append(loandeatail.size()).toString());

      query = null;

      for (int i = 0; i < loandeatail.size(); i++)
      {
        logger.info(new StringBuilder().append("getProductTypeList").append(loandeatail.get(i).toString()).toString());
        ArrayList loandeatail1 = (ArrayList)loandeatail.get(i);
        if (loandeatail1.size() > 0)
        {
          loanVo = new LoanDetailVo();
          loanVo.setDealLoanId(CommonFunction.checkNull(loandeatail1.get(0)).trim());
          loanVo.setLbxProductID(CommonFunction.checkNull(loandeatail1.get(1)).trim());
          loanVo.setLbxscheme(CommonFunction.checkNull(loandeatail1.get(2)).trim());
          loanVo.setProduct(CommonFunction.checkNull(loandeatail1.get(3)).trim());
          loanVo.setScheme(CommonFunction.checkNull(loandeatail1.get(4)).trim());

          if (!CommonFunction.checkNull(loandeatail1.get(5)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(loandeatail1.get(5)).trim());
            loanVo.setRequestedLoanAmount(this.myFormatter.format(reconNum));
          }

          loanVo.setRequestedLoanTenure(CommonFunction.checkNull(loandeatail1.get(6)).trim());

          if (CommonFunction.checkNull(loandeatail1.get(7)).trim().equals("F"))
          {
            loanVo.setRateType("Flat Rate");
          }
          else if (CommonFunction.checkNull(loandeatail1.get(7)).trim().equals("E"))
          {
            loanVo.setRateType("Effective Rate");
          }

          if (CommonFunction.checkNull(loandeatail1.get(8)).trim().equals("F"))
          {
            loanVo.setType("Fixed");
          }
          else if (CommonFunction.checkNull(loandeatail1.get(8)).trim().equals("L"))
          {
            loanVo.setType("Floating");
          }
          else
          {
            loanVo.setType("");
          }

          loanVo.setLoanPurpose(CommonFunction.checkNull(loandeatail1.get(9)).trim());
          list.add(loanVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public boolean updateLoanForEmiCalc(Object ob)
  {
    LoanDetailVo loanVo = (LoanDetailVo)ob;
    boolean status = false;
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = null;
    logger.info("In updateLoanForEmiCalcu:::::::::::::::::::::::::::::::");
    try
    {
      StringBuilder instalQuery = new StringBuilder();
      instalQuery.append(new StringBuilder().append("select DEAL_ID from cr_deal_loan_dtl_emi_calc where  DEAL_ID='").append(CommonFunction.checkNull(loanVo.getDealId())).append("'").toString());
      logger.info(new StringBuilder().append("updateLoanForEmiCalcu:::::::::::::::::::::").append(instalQuery).toString());
      String instalStatus = ConnectionDAO.singleReturn(instalQuery.toString());
      logger.info(new StringBuilder().append("instalStatus::::::").append(instalStatus).toString());

      instalQuery = null;

      if (CommonFunction.checkNull(instalStatus.toString()).equalsIgnoreCase(""))
      {
        StringBuilder deleteInst = new StringBuilder();
        deleteInst.append(new StringBuilder().append("DELETE from cr_deal_installment_plan_emi_calc where DEAL_ID=").append(loanVo.getDealLoanId().trim()).append(" ").toString());
        logger.info(new StringBuilder().append("Deletion is Q :::::::::::::;").append(deleteInst).toString());
        ArrayList deleteArl = new ArrayList();
        deleteArl.add(deleteInst);
        status = ConnectionDAO.sqlInsUpdDelete(deleteArl);
        logger.info(new StringBuilder().append("Status of Deletion is :::::::::::::::::::::=").append(status).toString());

        instalStatus = null;
      }
      logger.info("In updateLoanForEmiCalcu::::::::::::::Update Mode");
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("update cr_deal_loan_dtl_emi_calc set DEAL_PRODUCT=?,DEAL_SCHEME=?,DEAL_DISBURSAL_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      query.append("DEAL_ASSET_COST=?,DEAL_MARGIN_RATE=?,DEAL_MARGIN_AMOUNT=?,DEAL_LOAN_AMOUNT=?,DEAL_TENURE=?,DEAL_REPAYMENT_FREQ=?,");
      query.append("DEAL_RATE_TYPE=?,DEAL_RATE_METHOD=?,DEAL_FINAL_RATE=?,DEAL_REPAYMENT_TYPE=?,DEAL_INSTALLMENT_TYPE=?,DEAL_INSTALLMENT_MODE=?,");
      query.append(new StringBuilder().append("DEAL_REPAYMENT_MODE=?,DEAL_NO_OF_INSTALLMENT=?,DEAL_LOAN_PURPOSE=?,DEAL_ADVANCE_INSTL=?,DEAL_REPAY_EFF_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      query.append(new StringBuilder().append("DEAL_MATURITY_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),DEAL_DUE_DAY=?,NEXT_DUE_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),MAKER_ID=?,").toString());
      query.append(new StringBuilder().append("MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),DEAL_INT_CALC_FROM=?,TENURE_IN_DAY=? ").toString());
      query.append(" where DEAL_ID=?");
      insertPrepStmtObject = new PrepStmtObject();

      if (CommonFunction.checkNull(loanVo.getLbxProductID()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getLbxProductID().trim());
      }
      if (CommonFunction.checkNull(loanVo.getLbxscheme()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getLbxscheme().trim());
      }
      if (CommonFunction.checkNull(loanVo.getDisbursalDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getDisbursalDate().trim());
      }
      if (CommonFunction.checkNull(loanVo.getAssetCost()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getAssetCost().trim()).toString());
      }
      if (CommonFunction.checkNull(loanVo.getMarginPerc()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getMarginPerc().trim()).toString());
      }
      if (CommonFunction.checkNull(loanVo.getMarginAmount()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getMarginAmount().trim()).toString());
      }
      if (CommonFunction.checkNull(loanVo.getRequestedLoanAmount()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(this.myFormatter.parse(loanVo.getRequestedLoanAmount().trim()).toString());
      }
      if (CommonFunction.checkNull(loanVo.getRequestedLoanTenure()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getRequestedLoanTenure().trim());
      }
      if (CommonFunction.checkNull(loanVo.getFrequency()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getFrequency().trim());
      }
      if (CommonFunction.checkNull(loanVo.getRateType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getRateType().trim());
      }
      insertPrepStmtObject.addString("F");

      if (CommonFunction.checkNull(loanVo.getEffectiveRate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getEffectiveRate().trim());
      }
      if (CommonFunction.checkNull(loanVo.getRepaymentType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getRepaymentType().trim());
      }
      if (CommonFunction.checkNull(loanVo.getInstallmentType()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getInstallmentType().trim());
      }
      if (CommonFunction.checkNull(loanVo.getInstMode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getInstMode().trim());
      }
      if (CommonFunction.checkNull(loanVo.getPaymentMode()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getPaymentMode().trim());
      }
      if (CommonFunction.checkNull(loanVo.getNoOfInstall()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getNoOfInstall().trim());
      }
      if (CommonFunction.checkNull(loanVo.getLoanPurpose()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getLoanPurpose().trim());
      }
      if (CommonFunction.checkNull(loanVo.getInstallments()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addString("0");
      else {
        insertPrepStmtObject.addString(loanVo.getInstallments().trim());
      }
      if (CommonFunction.checkNull(loanVo.getRepayEffectiveDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getRepayEffectiveDate().trim());
      }
      if (CommonFunction.checkNull(loanVo.getMaturityDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getMaturityDate().trim());
      }
      if (CommonFunction.checkNull(loanVo.getCycleDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getCycleDate().trim());
      }
      if (CommonFunction.checkNull(loanVo.getNextDueDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getNextDueDate().trim());
      }
      if (CommonFunction.checkNull(loanVo.getUserId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getUserId().trim());
      }
      if (CommonFunction.checkNull(loanVo.getBgDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getBgDate().trim());
      }
      if (CommonFunction.checkNull(loanVo.getInterestCalc()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getInterestCalc().trim());
      }

      if (CommonFunction.checkNull(loanVo.getTenureInDay()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(loanVo.getTenureInDay().trim());
      }
      if (CommonFunction.checkNull(loanVo.getDealId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(loanVo.getDealId()));
      }
      insertPrepStmtObject.setSql(query.toString());
      logger.info(new StringBuilder().append("IN updateLoanForEmiCalcu() update query1 :::::::::::::::::::::: ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In updateLoanForEmiCalcu......................").append(status).toString());
      logger.info(new StringBuilder().append("In updateLoanForEmiCalcu......................").append(status).toString());

      query = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return status;
  }

  public String callProcForEmiCalc(String dealCap, String dealId)
  {
    ArrayList list = new ArrayList();
    String message = "";
    try
    {
      int dId = Integer.parseInt(dealId);
      StringBuilder custId = new StringBuilder();
      custId.append("0");
      StringBuilder productQuery = new StringBuilder();
      productQuery.append(new StringBuilder().append("select DEAL_PRODUCT,DEAL_SCHEME,DEAL_LOAN_AMOUNT,DEAL_MARGIN_AMOUNT,DEAL_LOAN_ID from cr_deal_loan_dtl_emi_calc where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
      logger.info(new StringBuilder().append("In callProcForEmiCalcu for deal productQuery::::::::::::::::::").append(productQuery).toString());
      ArrayList productList = ConnectionDAO.sqlSelect(productQuery.toString());

      productQuery = null;
      StringBuilder checkQuery = new StringBuilder();
      checkQuery.append(new StringBuilder().append("select DEAL_CHARGE_DTL_ID from cr_deal_txncharges_dtl_emi_calc where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
      logger.info(new StringBuilder().append("checkQuery: ").append(checkQuery).toString());
      boolean status = ConnectionDAO.checkStatus(checkQuery.toString());

      checkQuery = null;
      if (!status)
      {
        for (int i = 0; i < productList.size(); i++)
        {
          ArrayList subproductList = (ArrayList)productList.get(i);
          if (subproductList.size() > 0)
          {
            StringBuffer chargeStr = new StringBuffer();
            if (!CommonFunction.checkNull(subproductList.get(2)).equalsIgnoreCase(""))
              chargeStr.append(new StringBuilder().append("2;").append(subproductList.get(2)).append("|").toString());
            if (!CommonFunction.checkNull(subproductList.get(3)).equalsIgnoreCase(""))
              chargeStr.append(new StringBuilder().append("3;").append(CommonFunction.checkNull(subproductList.get(3))).append("|").toString());
            String bpStr = new StringBuilder().append("CS;").append(custId).append("|").toString();
            String dealLoanId = CommonFunction.checkNull(subproductList.get(4));
            int loanDId = 0;
            if (!dealLoanId.equalsIgnoreCase(""))
              loanDId = Integer.parseInt(dealLoanId);
            logger.info(new StringBuilder().append(" STAGE INFO: ").append(dealCap).append("DealLoanId from crdealLoandtl: ").append(loanDId).append(" Total Charges: ").append(chargeStr).append(" bpStr:  ").append(bpStr).append(" Product: ").append(subproductList.get(0)).append(" Scheme: ").append(subproductList.get(1)).toString());
            ArrayList in = new ArrayList();
            ArrayList out = new ArrayList();
            ArrayList outMessages = new ArrayList();
            StringBuilder s1 = new StringBuilder();
            StringBuilder s2 = new StringBuilder();
            try
            {
              in.add(dealCap);
              in.add(Integer.valueOf(loanDId));
              in.add(CommonFunction.checkNull(subproductList.get(0)).toString());
              in.add(CommonFunction.checkNull(subproductList.get(1)).toString());
              in.add(chargeStr.toString());
              in.add(bpStr);
              out.add(s1);
              out.add(s2);
              outMessages = (ArrayList)ConnectionDAO.callSP("Get_charges_emi_calc", in, out);
              if ((outMessages != null) && (outMessages.size() > 0))
              {
                s1.append(CommonFunction.checkNull(outMessages.get(0)));

                if ((s1 != null) && (s1.toString().equalsIgnoreCase("S")))
                {
                  message = s1.toString();
                  logger.info(new StringBuilder().append("Procedure s1----").append(s1).toString());
                }
                else if ((s1 != null) && (s1.toString().equalsIgnoreCase("E")))
                {
                  s2.append(CommonFunction.checkNull(outMessages.get(1)));
                  logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
                  message = s2.toString();
                }
                logger.info(new StringBuilder().append("s1:::::::::::::::::::::::::::").append(s1).toString());
                logger.info(new StringBuilder().append("s2:::::::::::::::::::::::::::").append(s2).toString());

                s1 = null;
                s2 = null;
              }
            }
            catch (Exception e) {
              e.printStackTrace();
            }
            finally
            {
              in = null;
              out = null;
              outMessages = null;
            }
          }
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }return message;
  }

  public ArrayList getchargesDtlForEmiCalc(String dealCap, String dealId)
  {
    ArrayList list = new ArrayList();
    try
    {
      ChargeVo vo = null;
      StringBuilder query = new StringBuilder();
      query.append("select DEAL_CHARGE_DTL_ID,DEAL_CHARGE_TYPE,DEAL_CHARGE_CODE,CHARGE_DESC,");
      query.append("DEAL_CHARGE_CALCULATED_AMOUNT,");
      query.append("DEAL_CHARGE_FINAL_AMOUNT,p.DEAL_LOAN_AMOUNT,(IFNULL(P.DEAL_ASSET_COST,0)-IFNULL(P.DEAL_LOAN_AMOUNT,0)) AS 'MARGIN AMOUNT',");
      query.append("DEAL_CHARGE_CALCULATED_ON,if(DEAL_CHARGE_METHOD='P','PERCENTAGE','FLAT'),if(DEAL_CHARGE_TAX_INCLUSIVE='N','NO','YES'),");
      query.append("DEAL_CHARGE_TAX_RATE1,DEAL_CHARGE_TAX_RATE2,IF(DEAL_CHARGE_BP_TYPE='CS','CUSTOMER','CS'),if(DEAL_MIN_CHARGE_METHOD='P','PERCENTAGE','FLAT'),DEAL_CHARGE_MIN_CHARGE_AMOUNT,");
      query.append("DEAL_CHARGE_TAX_APPLICABLE,DEAL_CHARGE_TDS_APPLICABLE,DEAL_CHARGE_TAX_AMOUNT1,DEAL_CHARGE_TAX_AMOUNT2,DEAL_CHARGE_MIN_CHARGE_AMOUNT,DEAL_CHARGE_TDS_RATE,DEAL_CHARGE_TDS_AMOUNT,DEAL_CHARGE_NET_AMOUNT,DEAL_CHARGE_APPLICATION_STAGE,'NEW CUSTOMER' ");
      query.append("from cr_deal_txncharges_dtl_emi_calc t left join com_charge_code_m c on t.DEAL_CHARGE_CODE=c.CHARGE_CODE ");
      query.append("left join cr_deal_loan_dtl_emi_calc p on p.DEAL_ID=t.DEAL_ID ");
      query.append(new StringBuilder().append("where  t.DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append(" ").toString());
      logger.info(new StringBuilder().append("getchargesDtlForEmiCalcu in deal  query::::::::::::::::").append(query).toString());
      ArrayList charges = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getchargesDtlForEmiCalcu in deal  size::::::::::::::").append(charges.size()).toString());

      query = null;

      for (int i = 0; i < charges.size(); i++) {
        ArrayList subcharges = (ArrayList)charges.get(i);
        if (subcharges.size() > 0)
        {
          vo = new ChargeVo();
          vo.setChargeId(CommonFunction.checkNull(subcharges.get(0)).trim());
          if (CommonFunction.checkNull(subcharges.get(1)).trim().equals("R"))
          {
            vo.setChargeType("Receivable");
          }
          else if (CommonFunction.checkNull(subcharges.get(1)).trim().equals("P"))
          {
            vo.setChargeType("Payable");
          }
          vo.setChargeCode(CommonFunction.checkNull(subcharges.get(2)).trim());
          vo.setChargeDesc(CommonFunction.checkNull(subcharges.get(3)).trim());
          if (!CommonFunction.checkNull(subcharges.get(4)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(4)).trim());
            vo.setChargeCal(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(5)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(5)).trim());
            vo.setChargeFinal(this.myFormatter.format(reconNum));
          }

          vo.setLoanAmount(CommonFunction.checkNull(subcharges.get(6)).trim());
          vo.setMarginAmount(CommonFunction.checkNull(subcharges.get(7)).trim());
          vo.setChargeCalculatedOn(CommonFunction.checkNull(subcharges.get(8)).trim());
          vo.setChargeMethod(CommonFunction.checkNull(subcharges.get(9)).trim());
          vo.setTaxsInclusive(CommonFunction.checkNull(subcharges.get(10)).trim());
          if (!CommonFunction.checkNull(subcharges.get(11)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(11)).trim());
            vo.setTaxtRat1(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(12)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(12)).trim());
            logger.info(new StringBuilder().append("setTaxtRat2: ").append(reconNum).toString());
            vo.setTaxtRat2(this.myFormatter.format(reconNum));
          }

          vo.setChargeBPType(CommonFunction.checkNull(subcharges.get(13)).trim());
          vo.setMinChargeMethod(CommonFunction.checkNull(subcharges.get(14)).trim());
          vo.setMinChargeAmount(CommonFunction.checkNull(subcharges.get(15)).trim());
          vo.setDealChargeTaxApp(CommonFunction.checkNull(subcharges.get(16)).trim());
          vo.setDealChargeTdsApp(CommonFunction.checkNull(subcharges.get(17)).trim());
          if (!CommonFunction.checkNull(subcharges.get(18)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(18)).trim());
            vo.setDealChargeTaxAmount1(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(19)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(19)).trim());

            vo.setDealChargeTaxAmount2(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(20)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(20)).trim());
            vo.setDealChargeMinChargeAmount(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(21)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(21)).trim());

            vo.setDealChargeTdsRate(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(22)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(22)).trim());
            vo.setDealChargeTdsAmount(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(23)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(23)).trim());

            vo.setDealChargeNetAmount(this.myFormatter.format(reconNum));
          }
          vo.setApplStage(CommonFunction.checkNull(subcharges.get(24)));
          vo.setChargeBPId(CommonFunction.checkNull(subcharges.get(25)));
          list.add(vo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }return list;
  }

  public String callRefreshChargesDetailProForEmiCalc(String dealCap, String dealId)
  {
    String message = "";
    boolean status = false;
    int dId = Integer.parseInt(dealId);
    StringBuilder custId = new StringBuilder();
    ArrayList productList = null;
    try
    {
      StringBuilder productQuery = new StringBuilder();
      productQuery.append(new StringBuilder().append("select DEAL_PRODUCT,DEAL_SCHEME,DEAL_LOAN_AMOUNT,DEAL_MARGIN_AMOUNT,DEAL_LOAN_ID from cr_deal_loan_dtl_emi_calc where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
      logger.info(new StringBuilder().append("callRefreshChargesDetailPro in deal productQuery: ").append(productQuery).toString());
      productList = ConnectionDAO.sqlSelect(productQuery.toString());
      logger.info(new StringBuilder().append("callRefreshChargesDetailPro in deal productQuery: ").append(productList).toString());
      productQuery = null;

      for (int i = 0; i < productList.size(); i++)
      {
        ArrayList subproductList = (ArrayList)productList.get(i);
        if (subproductList.size() > 0)
        {
          StringBuffer chargeStr = new StringBuffer();
          if (!CommonFunction.checkNull(subproductList.get(2)).equalsIgnoreCase(""))
            chargeStr.append(new StringBuilder().append("2;").append(subproductList.get(2)).append("|").toString());
          if (!CommonFunction.checkNull(subproductList.get(3)).equalsIgnoreCase(""))
            chargeStr.append(new StringBuilder().append("3;").append(CommonFunction.checkNull(subproductList.get(3))).append("|").toString());
          String bpStr = new StringBuilder().append("CS;").append(custId).append("|").toString();
          String dealLoanId = CommonFunction.checkNull(subproductList.get(4));
          int loanDId = 0;
          if (!dealLoanId.equalsIgnoreCase(""))
            loanDId = Integer.parseInt(dealLoanId);
          ArrayList in = new ArrayList();
          ArrayList out = new ArrayList();
          ArrayList outMessages = new ArrayList();
          StringBuilder s1 = new StringBuilder();
          StringBuilder s2 = new StringBuilder();
          try
          {
            in.add(dealCap);
            in.add(Integer.valueOf(loanDId));
            in.add(CommonFunction.checkNull(subproductList.get(0)).toString());
            in.add(CommonFunction.checkNull(subproductList.get(1)).toString());
            in.add(chargeStr.toString());
            in.add(bpStr);
            out.add(s1);
            out.add(s2);
            logger.info(new StringBuilder().append(" STAGE INFO: ").append(dealCap).append("DealLoanId from crdealLoandtl: ").append(loanDId).append(" Total Charges: ").append(chargeStr).append(" customer Id:  ").append(bpStr).append(" Product: ").append(subproductList.get(0)).append(" Scheme: ").append(subproductList.get(1)).toString());
            logger.info("callRefreshChargesDetailPro in Get_charges_emi_calc");
            outMessages = (ArrayList)ConnectionDAO.callSP("Get_charges_emi_calc", in, out);
            if ((outMessages != null) && (outMessages.size() > 0))
            {
              s1.append(CommonFunction.checkNull(outMessages.get(0)));
              if ((s1 != null) && (s1.toString().equalsIgnoreCase("S")))
              {
                message = s1.toString();
                logger.info(new StringBuilder().append("Get_charges_emi_calc Procedure s1----").append(s1).toString());
              }
              else if ((s1 != null) && (s1.toString().equalsIgnoreCase("E")))
              {
                s2.append(CommonFunction.checkNull(outMessages.get(1)));
                logger.info(new StringBuilder().append("Get_charges_emi_calc Procedure Error Message----").append(s2).toString());
                message = s2.toString();
              }
            }
          }
          catch (Exception e) {
            e.printStackTrace();
          }
          finally {
            s1 = null;
            s2 = null;
            in = null;
            out = null;
            outMessages = null;
            chargeStr = null;
          }
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally {
      custId = null;
      productList = null;
    }
    return message;
  }

  public ArrayList refreshchargesDetailForEmiCalc(String dealCap, String dealId)
  {
    ArrayList list = new ArrayList();
    ChargeVo vo = null;
    StringBuilder query = new StringBuilder();
    ArrayList charges = null;
    ArrayList subcharges = null;
    try
    {
      query.append("select DEAL_CHARGE_DTL_ID,DEAL_CHARGE_TYPE,DEAL_CHARGE_CODE,CHARGE_DESC,");
      query.append("DEAL_CHARGE_CALCULATED_AMOUNT,");
      query.append("DEAL_CHARGE_FINAL_AMOUNT,p.DEAL_LOAN_AMOUNT,(IFNULL(P.DEAL_ASSET_COST,0)-IFNULL(P.DEAL_LOAN_AMOUNT,0)) AS 'MARGIN AMOUNT',");
      query.append("DEAL_CHARGE_CALCULATED_ON,if(DEAL_CHARGE_METHOD='P','PERCENTAGE','FLAT'),if(DEAL_CHARGE_TAX_INCLUSIVE='N','NO','YES'),");
      query.append("DEAL_CHARGE_TAX_RATE1,DEAL_CHARGE_TAX_RATE2,IF(DEAL_CHARGE_BP_TYPE='CS','CUSTOMER','CS'),if(DEAL_MIN_CHARGE_METHOD='P','PERCENTAGE','FLAT'),DEAL_CHARGE_MIN_CHARGE_AMOUNT,");
      query.append("DEAL_CHARGE_TAX_APPLICABLE,DEAL_CHARGE_TDS_APPLICABLE,DEAL_CHARGE_TAX_AMOUNT1,DEAL_CHARGE_TAX_AMOUNT2,DEAL_CHARGE_MIN_CHARGE_AMOUNT,DEAL_CHARGE_TDS_RATE,DEAL_CHARGE_TDS_AMOUNT,DEAL_CHARGE_NET_AMOUNT,DEAL_CHARGE_APPLICATION_STAGE,'NEW CUSTOMER' ");
      query.append("from cr_deal_txncharges_dtl_emi_calc t left join com_charge_code_m c on t.DEAL_CHARGE_CODE=c.CHARGE_CODE ");
      query.append("left join cr_deal_loan_dtl_emi_calc p on p.DEAL_ID=t.DEAL_ID ");
      query.append(new StringBuilder().append("where  t.DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append(" ").toString());

      logger.info(new StringBuilder().append("refreshchargesDetail for getting charges in deal query:::::::::::").append(query).toString());
      charges = ConnectionDAO.sqlSelect(query.toString());

      for (int i = 0; i < charges.size(); i++)
      {
        subcharges = (ArrayList)charges.get(i);
        if (subcharges.size() > 0)
        {
          vo = new ChargeVo();
          vo.setChargeId(CommonFunction.checkNull(subcharges.get(0)).trim());
          if (CommonFunction.checkNull(subcharges.get(1)).trim().equals("R"))
            vo.setChargeType("Receivable");
          else if (CommonFunction.checkNull(subcharges.get(1)).trim().equals("P"))
            vo.setChargeType("Payable");
          vo.setChargeCode(CommonFunction.checkNull(subcharges.get(2)).trim());
          vo.setChargeDesc(CommonFunction.checkNull(subcharges.get(3)).trim());
          if (!CommonFunction.checkNull(subcharges.get(4)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(4)).trim());
            vo.setChargeCal(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(5)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(5)).trim());
            vo.setChargeFinal(this.myFormatter.format(reconNum));
          }
          vo.setLoanAmount(CommonFunction.checkNull(subcharges.get(6)).trim());
          vo.setMarginAmount(CommonFunction.checkNull(subcharges.get(7)).trim());
          vo.setChargeCalculatedOn(CommonFunction.checkNull(subcharges.get(8)).trim());
          vo.setChargeMethod(CommonFunction.checkNull(subcharges.get(9)).trim());
          vo.setTaxsInclusive(CommonFunction.checkNull(subcharges.get(10)).trim());
          if (!CommonFunction.checkNull(subcharges.get(11)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(11)).trim());
            vo.setTaxtRat1(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(12)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(12)).trim());
            logger.info(new StringBuilder().append("setTaxtRat2: ").append(reconNum).toString());
            vo.setTaxtRat2(this.myFormatter.format(reconNum));
          }
          vo.setChargeBPType(CommonFunction.checkNull(subcharges.get(13)).trim());
          vo.setMinChargeMethod(CommonFunction.checkNull(subcharges.get(14)).trim());
          vo.setMinChargeCalculatedOn(CommonFunction.checkNull(subcharges.get(15)).trim());
          vo.setDealChargeTaxApp(CommonFunction.checkNull(subcharges.get(16)).trim());
          vo.setDealChargeTdsApp(CommonFunction.checkNull(subcharges.get(17)).trim());
          if (!CommonFunction.checkNull(subcharges.get(18)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(18)).trim());
            vo.setDealChargeTaxAmount1(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(19)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(19)).trim());
            vo.setDealChargeTaxAmount2(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(20)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(20)).trim());
            vo.setDealChargeMinChargeAmount(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(21)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(21)).trim());
            vo.setDealChargeTdsRate(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(22)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(22)).trim());
            vo.setDealChargeTdsAmount(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subcharges.get(23)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subcharges.get(23)).trim());
            vo.setDealChargeNetAmount(this.myFormatter.format(reconNum));
          }
          vo.setApplStage(CommonFunction.checkNull(subcharges.get(24)));
          vo.setChargeBPId(CommonFunction.checkNull(subcharges.get(25)));
          list.add(vo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      vo = null;
      query = null;
      charges = null;
      subcharges = null;
    }
    return list;
  }

  public boolean updatesecuritydepositForEmiCal(ChargeVo vo, String dealId)
  {
    StringBuffer bufInsSql = new StringBuffer();
    this.qryList = new ArrayList();
    boolean status = false;
    String amt = "";
    StringBuilder query = new StringBuilder();
    query.append(new StringBuilder().append("select DEAL_CHARGE_CALCULATED_AMOUNT from  cr_deal_txncharges_dtl_emi_calc where DEAL_ID='").append(dealId).append("' and DEAL_CHARGE_CODE=103 limit 1").toString());
    amt = CommonFunction.checkNull(ConnectionDAO.singleReturn(query.toString()));
    logger.info(new StringBuilder().append("In updatesecuritydepositForEmiCal() SD Amount to be--------------").append(amt).toString());

    query = null;

    if (amt == "") {
      amt = "0.00";
    }
    if (Double.parseDouble(CommonFunction.checkNull(amt).trim()) == 0.0D) {
      bufInsSql.append(new StringBuilder().append("update cr_deal_sd_emi_calc_m set SD_INTEREST_TYPE=?,SD_INTEREST_RATE=?,SD_INTEREST=? where DEAL_ID='").append(dealId).append("'").toString());
      PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

      insertPrepStmtObject.addString("N");
      try
      {
        insertPrepStmtObject.addString(this.myFormatter.parse("0.00").toString());
      }
      catch (ParseException e) {
        e.printStackTrace();
      }
      try
      {
        insertPrepStmtObject.addString(this.myFormatter.parse("0.00").toString());
      }
      catch (ParseException e) {
        e.printStackTrace();
      }
      finally
      {
        query = null;
      }

      logger.info(new StringBuilder().append("ibufInsUpdSql.toString()").append(bufInsSql.toString()).toString());
      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN updatesecuritydeposit query1------------------->").append(insertPrepStmtObject.printQuery()).toString());

      this.qryList.add(insertPrepStmtObject);
      try {
        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
      } catch (RemoteException e) {
        e.printStackTrace();
      }
      catch (SQLException e) {
        e.printStackTrace();
      }
    }
    return status;
  }

  public ArrayList getTenureAmountInDealForEmiCalc(String dealId)
  {
    ArrayList list = new ArrayList();
    try
    {
      ArrayList searchlist = new ArrayList();
      logger.info("In getTenureAmountInDealForEmiCalc....................");
      StringBuffer bufInsSql = new StringBuffer();

      bufInsSql.append(new StringBuilder().append("select DEAL_TENURE,DEAL_CHARGE_FINAL_AMOUNT from  cr_deal_loan_dtl_emi_calc L,cr_deal_txncharges_dtl_emi_calc C where L.DEAL_ID=").append(dealId).append(" and L.DEAL_ID=C.DEAL_ID and c.DEAL_CHARGE_CODE=103 limit 1").toString());

      logger.info(new StringBuilder().append("In getTenureAmountInDealForEmiCalc......... query...........").append(bufInsSql.toString()).toString());
      searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());

      bufInsSql = null;

      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("getTenureAmountInDealForEmiCalc  List:::::::").append(searchlist.get(i)).toString());
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0)
        {
          TenureAmountVo receiptvo = new TenureAmountVo();
          receiptvo.setTenure(CommonFunction.checkNull(data.get(0)).trim());
          receiptvo.setSecurityAmount(CommonFunction.checkNull(data.get(1)).trim());
          list.add(receiptvo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList<Object> getSecurityDetailAllInDealForEmiCalc(String dealId)
  {
    SecurityDepositVO appl = new SecurityDepositVO();
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select DEAL_LOAN_ID,DEAL_ID,SD_AMOUNT,SD_INTEREST_TYPE,SD_INTEREST_RATE,SD_COMPOUNDING_FREQ,SD_TENURE,SD_INTEREST,SD_ADJUSTMENT from cr_deal_sd_emi_calc_m S where DEAL_ID=").append(dealId).toString());

      ArrayList appdetails = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getSecurityDetailAllInDealForEmiCalc::::::::::::").append(appdetails.size()).toString());

      query = null;
      for (int i = 0; i < appdetails.size(); i++)
      {
        ArrayList adetails1 = (ArrayList)appdetails.get(i);
        for (int k = 0; k < adetails1.size(); k++)
        {
          appl = new SecurityDepositVO();
          appl.setTxnType(CommonFunction.checkNull(adetails1.get(0)).trim());
          appl.setTxnId(CommonFunction.checkNull(adetails1.get(1)).trim());

          if (!CommonFunction.checkNull(adetails1.get(2)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(adetails1.get(2)).trim());
            appl.setSecurityAmount(this.myFormatter.format(reconNum));
          }

          if (CommonFunction.checkNull(adetails1.get(3)).trim().equalsIgnoreCase("N"))
          {
            appl.setInterestType("NO");
          }
          else if (CommonFunction.checkNull(adetails1.get(3)).trim().equalsIgnoreCase("S"))
          {
            appl.setInterestType("SIMPLE");
          }
          else if (CommonFunction.checkNull(adetails1.get(3)).trim().equalsIgnoreCase("C"))
          {
            appl.setInterestType("COMPOUND");
          }

          if (!CommonFunction.checkNull(adetails1.get(4)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(adetails1.get(4)).trim());
            appl.setInterestRate(this.myFormatter.format(reconNum));
          }
          appl.setCompoundFrequency(CommonFunction.checkNull(adetails1.get(5)).trim());
          appl.setTenure(CommonFunction.checkNull(adetails1.get(6)).trim());
          if (!CommonFunction.checkNull(adetails1.get(7)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(adetails1.get(7)).trim());
            appl.setRelatedInterest(this.myFormatter.format(reconNum));
          }
          appl.setSdAdjust(CommonFunction.checkNull(adetails1.get(8)).trim());
        }

        list.add(appl);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    logger.info(new StringBuilder().append("Value of List is in dao is==").append(list).toString());
    return list;
  }

  public boolean saveSecurityDepositInDealForEmiCalc(SecurityDepositVO vo)
  {
    SecurityDepositVO cv = vo;
    ArrayList qryList = new ArrayList();
    StringBuffer bufInsSql = new StringBuffer();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    boolean status = false;
    try {
      StringBuilder loanDealQuery = new StringBuilder();
      loanDealQuery.append(new StringBuilder().append("select DEAL_LOAN_ID from cr_deal_loan_dtl_emi_calc where DEAL_ID=").append(vo.getDealId()).append(" limit 1").toString());
      logger.info(new StringBuilder().append("query:::::::::::::").append(loanDealQuery).toString());
      String loanDealId = ConnectionDAO.singleReturn(loanDealQuery.toString());

      logger.info(new StringBuilder().append("loanDealId:::::::::::").append(loanDealId).toString());
      loanDealQuery = null;

      StringBuilder q1 = new StringBuilder();
      q1.append(new StringBuilder().append("select count(*) from cr_deal_sd_emi_calc_m where DEAL_ID=").append(vo.getDealId()).toString());
      logger.info(new StringBuilder().append("query:::::::::::::::::::::::::::").append(q1).toString());
      String status1 = ConnectionDAO.singleReturn(q1.toString());

      q1 = null;

      if (status1.equalsIgnoreCase("0"))
      {
        bufInsSql.append("Insert into cr_deal_sd_emi_calc_m(DEAL_LOAN_ID,DEAL_ID,SD_AMOUNT,SD_INTEREST_TYPE,SD_INTEREST_RATE,SD_COMPOUNDING_FREQ,SD_TENURE,SD_INTEREST,SD_ADJUSTMENT,REC_STATUS,MAKER_ID,MAKER_DATE)");

        bufInsSql.append(" values ( ");
        bufInsSql.append(new StringBuilder().append(" '").append(loanDealId).append("',").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" 'P',");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

        if (CommonFunction.checkNull(cv.getDealId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getDealId()).trim());
        }

        if (CommonFunction.checkNull(cv.getSecurityAmount()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(cv.getSecurityAmount()).trim()).toString());
        }

        if (CommonFunction.checkNull(cv.getInterestType()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getInterestType()).trim());
        }
        if (CommonFunction.checkNull(cv.getInterestRate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(cv.getInterestRate()).trim()).toString());
        }
        logger.info(new StringBuilder().append("Compound Fre: ").append(cv.getCompoundFrequency()).toString());
        if (CommonFunction.checkNull(cv.getCompoundFrequency()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getCompoundFrequency()).trim());
        if (CommonFunction.checkNull(cv.getTenure()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getTenure()).trim());
        }

        if (CommonFunction.checkNull(cv.getRelatedInterest()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(cv.getRelatedInterest()).trim()).toString());
        }

        if (CommonFunction.checkNull(cv.getSdAdjust()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getSdAdjust()).trim());
        }

        if (CommonFunction.checkNull(cv.getUserId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getUserId()).trim());
        }
        if (CommonFunction.checkNull(cv.getBussinessDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getBussinessDate()).trim());
        }
        logger.info(new StringBuilder().append("ibufInsUpdSql.toString()").append(bufInsSql.toString()).toString());
        insertPrepStmtObject.setSql(bufInsSql.toString());

        logger.info(new StringBuilder().append("IN security deposit insert query1 ::::::::::::::::::::::::::").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In security deposit......................").append(status).toString());
      }
      else
      {
        bufInsSql.append(new StringBuilder().append("update cr_deal_sd_emi_calc_m set SD_INTEREST_TYPE=?,SD_INTEREST_RATE=?,SD_COMPOUNDING_FREQ=?,SD_INTEREST=?,SD_AMOUNT=?, SD_ADJUSTMENT=?,SD_TENURE=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) where DEAL_ID=?").toString());

        if (CommonFunction.checkNull(cv.getInterestType()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getInterestType()).trim());
        if (CommonFunction.checkNull(cv.getInterestRate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(cv.getInterestRate()).trim()).toString());
        if (CommonFunction.checkNull(cv.getCompoundFrequency()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getCompoundFrequency()).trim());
        }
        if (CommonFunction.checkNull(cv.getRelatedInterest()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(cv.getRelatedInterest()).trim()).toString());
        }
        if (CommonFunction.checkNull(cv.getSecurityAmount()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(cv.getSecurityAmount()).trim()).toString());
        }
        if (CommonFunction.checkNull(cv.getSdAdjust()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getSdAdjust()).trim());
        }

        if (CommonFunction.checkNull(cv.getTenure()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getTenure()).trim());
        }
        if (CommonFunction.checkNull(cv.getUserId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getUserId()).trim());
        }

        if (CommonFunction.checkNull(cv.getBussinessDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getBussinessDate()).trim());
        }

        if (CommonFunction.checkNull(cv.getDealId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(cv.getDealId()).trim());
        }

        logger.info(new StringBuilder().append("ibufInsUpdSql.toString()::::::::::::::::::").append(bufInsSql.toString()).toString());
        insertPrepStmtObject.setSql(bufInsSql.toString());

        logger.info(new StringBuilder().append("IN security Deposit update query1 ::::::::::").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);
        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In security Deposit......................").append(status).toString());

        bufInsSql = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return status;
  }

  public ArrayList getLoanDetailSchemeForEmiCal(String scheme, String bdate)
  {
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT DEFAULT_MARGIN_RATE,RATE_TYPE,RATE_METHOD,S.BASE_RATE_TYPE,B.BASE_RATE,DEF_FLAT_RATE, DEF_EFF_RATE,DEF_TENURE,REPAYMENT_FREQ,INSTALLMENT_TYPE,REPAYMENT_MODE,INSTALLMENT_MODE ,P.REPAYMENT_TYPE,P.REVOLVING_FLAG ,MIN_MARGIN_RATE,MAX_MARGIN_RATE,MIN_TENURE,MAX_TENURE,MIN_AMT_FIN,MAX_AMT_FIN,P.ASSET_FLAG from cr_scheme_m S LEFT JOIN cr_base_rate_m B ON S.BASE_RATE_TYPE=B.BASE_RATE_TYPE AND B.rec_status='A' and b.EFFECTIVE_FROM <= STR_TO_DATE('").append(bdate).append("','").append(this.dateFormat).append("') ").append(" LEFT JOIN cr_product_m P ON S.PRODUCT_ID=P.PRODUCT_ID").append(" where SCHEME_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(scheme)).trim()).append(" AND S.REC_STATUS='A' ").append(" order by b.EFFECTIVE_FROM desc limit 1").toString());

      logger.info(new StringBuilder().append("getLoanDetailScheme:::::::::::::::").append(query).toString());
      SchemeVo schemeVo = null;
      ArrayList schemedeatail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getLeadEntryList").append(schemedeatail.size()).toString());

      query = null;

      for (int i = 0; i < schemedeatail.size(); i++)
      {
        logger.info(new StringBuilder().append("getLeadEntryList").append(schemedeatail.get(i).toString()).toString());
        ArrayList schemedeatail1 = (ArrayList)schemedeatail.get(i);
        if (schemedeatail1.size() > 0)
        {
          logger.info(new StringBuilder().append("getLeadEntryList").append(schemedeatail1.size()).toString());
          schemeVo = new SchemeVo();
          if (!CommonFunction.checkNull(schemedeatail1.get(0)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(0)).trim());
            schemeVo.setDefMarginRate(this.myFormatter.format(reconNum));
          }
          schemeVo.setRateTYPE(CommonFunction.checkNull(schemedeatail1.get(1)).trim());
          schemeVo.setRateMethod(CommonFunction.checkNull(schemedeatail1.get(2)).trim());
          schemeVo.setBaseRateType(CommonFunction.checkNull(schemedeatail1.get(3)).trim());
          if (!CommonFunction.checkNull(schemedeatail1.get(4)).equalsIgnoreCase(""))
          {
            Number reconNumb = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(4)).trim());
            schemeVo.setBaseRate(this.myFormatter.format(reconNumb));
          }
          if (!CommonFunction.checkNull(schemedeatail1.get(5)).equalsIgnoreCase(""))
          {
            Number reconNumd = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(5)).trim());
            schemeVo.setDefFlatRate(this.myFormatter.format(reconNumd));
          }
          else
          {
            schemeVo.setDefFlatRate("0.0000000");
          }
          if (!CommonFunction.checkNull(schemedeatail1.get(6)).equalsIgnoreCase(""))
          {
            Number reconNume = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(6)).trim());
            schemeVo.setDefEffRate(this.myFormatter.format(reconNume));
          }
          else
          {
            schemeVo.setDefEffRate("0.0000000");
          }
          schemeVo.setDefTenure(CommonFunction.checkNull(schemedeatail1.get(7)).trim());
          schemeVo.setRepaymentFREQ(CommonFunction.checkNull(schemedeatail1.get(8)).trim());
          schemeVo.setInstallmentTYPE(CommonFunction.checkNull(schemedeatail1.get(9)).trim());
          schemeVo.setRepaymentMODE(CommonFunction.checkNull(schemedeatail1.get(10)).trim());
          schemeVo.setInstallmentMODE(CommonFunction.checkNull(schemedeatail1.get(11)).trim());
          schemeVo.setRepaymentType(CommonFunction.checkNull(schemedeatail1.get(12)).trim());
          schemeVo.setRevolvingFlag(CommonFunction.checkNull(schemedeatail1.get(13)).trim());
          if (!CommonFunction.checkNull(schemedeatail1.get(14)).equalsIgnoreCase(""))
          {
            Number reconNumm = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(14)).trim());
            schemeVo.setMinMarginRate(this.myFormatter.format(reconNumm));
          }
          if (!CommonFunction.checkNull(schemedeatail1.get(15)).equalsIgnoreCase(""))
          {
            Number reconNumR = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(15)).trim());
            schemeVo.setMaxMarginRate(this.myFormatter.format(reconNumR));
          }
          schemeVo.setMinTenure(CommonFunction.checkNull(schemedeatail1.get(16)).trim());
          schemeVo.setMaxTenure(CommonFunction.checkNull(schemedeatail1.get(17)).trim());

          if (!CommonFunction.checkNull(schemedeatail1.get(18)).equalsIgnoreCase(""))
          {
            Number reconNumf = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(18)).trim());
            schemeVo.setMinFinance(this.myFormatter.format(reconNumf));
          }
          if (!CommonFunction.checkNull(schemedeatail1.get(19)).equalsIgnoreCase(""))
          {
            Number reconNummF = this.myFormatter.parse(CommonFunction.checkNull(schemedeatail1.get(19)).trim());
            schemeVo.setMaxFinance(this.myFormatter.format(reconNummF));
          }
          schemeVo.setAssetFlag(CommonFunction.checkNull(schemedeatail1.get(20)).trim());
          list.add(schemeVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getInstallTypeForEmiCalc(String dealId)
  {
    ArrayList list = new ArrayList();
    ArrayList mainList = new ArrayList();
    ArrayList subList = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append(" select distinct FROM_INSTL_NO,TO_INSTL_NO,RECOVERY_PERCENT,DEAL_INSTALLMENT_TYPE,DEAL_NO_OF_INSTALLMENT,PRINCIPAL_AMOUNT,INSTALLMENT_AMOUNT,DEAL_RATE_TYPE,DEAL_LOAN_AMOUNT,RECOVERY_TYPE  from cr_deal_loan_dtl_emi_calc L left JOIN cr_deal_installment_plan_emi_calc D on D.DEAL_ID=L.DEAL_ID  where L.DEAL_ID=").append(dealId).toString());

      logger.info(new StringBuilder().append("getInstallType Queryl: ").append(query).toString());

      mainList = ConnectionDAO.sqlSelect(query.toString());

      query = null;

      for (int i = 0; i < mainList.size(); i++)
      {
        subList = (ArrayList)mainList.get(i);
        if (subList.size() > 0) {
          InstallmentPlanForCMVO ipVo = new InstallmentPlanForCMVO();
          ipVo = new InstallmentPlanForCMVO();
          if ((CommonFunction.checkNull(subList.get(3)).equalsIgnoreCase("E")) || (CommonFunction.checkNull(subList.get(3)).equalsIgnoreCase("P")))
          {
            ipVo.setFromInstallment("1");
            ipVo.setToInstallment(CommonFunction.checkNull(subList.get(4)).trim());
            if (!CommonFunction.checkNull(subList.get(2)).equalsIgnoreCase("")) {
              Number RecoveryPercen = this.myFormatter.parse(CommonFunction.checkNull(subList.get(2)).trim());

              logger.info(new StringBuilder().append("RecoveryPercen: ").append(RecoveryPercen).toString());
              ipVo.setRecoveryPercen(this.myFormatter.format(RecoveryPercen));
            } else {
              ipVo.setRecoveryPercen("0");
            }
            ipVo.setInstallmentType(CommonFunction.checkNull(subList.get(3)).trim());
            ipVo.setTotalInstallment(CommonFunction.checkNull(subList.get(4)).trim());
          }
          else
          {
            ipVo.setFromInstallment(CommonFunction.checkNull(subList.get(0)).trim());
            ipVo.setToInstallment(CommonFunction.checkNull(subList.get(1)).trim());
            if (!CommonFunction.checkNull(subList.get(2)).equalsIgnoreCase("")) {
              Number RecoveryPercen = this.myFormatter.parse(CommonFunction.checkNull(subList.get(2)).trim());

              logger.info(new StringBuilder().append("RecoveryPercen: ").append(RecoveryPercen).toString());
              ipVo.setRecoveryPercen(this.myFormatter.format(RecoveryPercen));
            } else {
              ipVo.setRecoveryPercen("0");
            }
            ipVo.setInstallmentType(CommonFunction.checkNull(subList.get(3)).trim());
            ipVo.setTotalInstallment(CommonFunction.checkNull(subList.get(4)).trim());
          }

          ipVo.setRateType(CommonFunction.checkNull(subList.get(7)).trim());
          if (!CommonFunction.checkNull(subList.get(5)).equalsIgnoreCase("")) {
            Number princam = this.myFormatter.parse(CommonFunction.checkNull(subList.get(5)).trim());

            logger.info(new StringBuilder().append("princ amount: ").append(princam).toString());
            ipVo.setPrinAm(this.myFormatter.format(princam));
          } else {
            ipVo.setPrinAm("0.00");
          }
          if (!CommonFunction.checkNull(subList.get(6)).equalsIgnoreCase("")) {
            Number instam = this.myFormatter.parse(CommonFunction.checkNull(subList.get(6)).trim());

            logger.info(new StringBuilder().append("inst amount: ").append(instam).toString());
            ipVo.setInstalAm(this.myFormatter.format(instam));
          } else {
            ipVo.setInstalAm("0.00");
          }
          if (!CommonFunction.checkNull(subList.get(8)).equalsIgnoreCase("")) {
            Number instam = this.myFormatter.parse(CommonFunction.checkNull(subList.get(8)).trim());

            logger.info(new StringBuilder().append("setLoanAmount: ").append(instam).toString());
            ipVo.setLoanAmount(this.myFormatter.format(instam));
          } else {
            ipVo.setLoanAmount("0.00");
          }
          ipVo.setRecoveryType(CommonFunction.checkNull(subList.get(9)).trim());
          list.add(ipVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public boolean updatesecuritydepositForEmiCalc(ChargeVo vo, String dealId)
  {
    StringBuffer bufInsSql = new StringBuffer();
    this.qryList = new ArrayList();
    boolean status = false;
    String amt = "";
    StringBuilder query = new StringBuilder();
    query.append(new StringBuilder().append("select DEAL_CHARGE_CALCULATED_AMOUNT from  cr_deal_txncharges_dtl_emi_calc where DEAL_ID='").append(dealId).append("' and DEAL_CHARGE_CODE=103 limit 1").toString());
    amt = CommonFunction.checkNull(ConnectionDAO.singleReturn(query.toString()));
    logger.info(new StringBuilder().append("In updatesecuritydepositForEmiCalc() SD Amount to be................").append(amt).toString());

    query = null;

    if (amt == "") {
      amt = "0.00";
    }
    if (Double.parseDouble(CommonFunction.checkNull(amt).trim()) == 0.0D) {
      bufInsSql.append(new StringBuilder().append("update cr_deal_sd_emi_calc_m set SD_INTEREST_TYPE=?,SD_INTEREST_RATE=?,SD_INTEREST=? where DEAL_ID='").append(dealId).append("'").toString());
      PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

      insertPrepStmtObject.addString("N");
      try
      {
        insertPrepStmtObject.addString(this.myFormatter.parse("0.00").toString());
      } catch (ParseException e) {
        e.printStackTrace();
      }
      try
      {
        insertPrepStmtObject.addString(this.myFormatter.parse("0.00").toString());
      } catch (ParseException e) {
        e.printStackTrace();
      }
      finally
      {
        query = null;
      }

      logger.info(new StringBuilder().append("ibufInsUpdSql.toString()::::::::::::::::").append(bufInsSql.toString()).toString());
      insertPrepStmtObject.setSql(bufInsSql.toString());
      this.qryList.add(insertPrepStmtObject);
      try {
        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
        logger.info(new StringBuilder().append("qryList:::::::::::::::::::::::::::").append(this.qryList.toString()).toString());
        logger.info(new StringBuilder().append("status:::::::::::::::::::::::::::").append(status).toString());
      } catch (RemoteException e) {
        e.printStackTrace();
      } catch (SQLException e) {
        e.printStackTrace();
      }
    }
    return status;
  }

  public boolean saveInstallPlanForEmiCalc(InstallmentPlanForCMVO ipvo)
  {
    logger.info("In saveInstallPlan");
    String[] FromInstallment = ipvo.getFromInstall();
    logger.info(new StringBuilder().append("In FromInstallment..................").append(ipvo.getFromInstall()).toString());
    logger.info(new StringBuilder().append("In FromInstallment.....").append(FromInstallment.length).toString());
    String[] ToInstallment = ipvo.getToInstall();
    logger.info(new StringBuilder().append("In ToInstallment..................").append(ToInstallment.length).toString());
    String[] RecoveryPercen = ipvo.getRecoveryPer();
    logger.info(new StringBuilder().append("In RecoveryPercen..................").append(RecoveryPercen.length).toString());
    String InstallmentType = ipvo.getInstallmentType();
    logger.info(new StringBuilder().append("In saveInstallPlan..................").append(ipvo.getInstallmentType()).toString());
    String TotalInstallment = ipvo.getTotalInstallment();
    logger.info(new StringBuilder().append("In saveInstallPlan..................").append(ipvo.getTotalInstallment()).toString());
    String toInstallment = ipvo.getToInstallment();
    logger.info(new StringBuilder().append("In toInstallment..................").append(toInstallment).toString());
    String[] prinAmount = ipvo.getPrincipalAmount();
    logger.info(new StringBuilder().append("In prinAmount..................").append(prinAmount.length).toString());
    String[] instalAmount = ipvo.getInstallmentAmount();
    logger.info(new StringBuilder().append("In instalAmount..................").append(instalAmount.length).toString());
    String loanId = ipvo.getLoanId();
    logger.info(new StringBuilder().append("loanId.........").append(loanId).toString());

    ArrayList qryList = new ArrayList();
    boolean status = false;
    try {
      PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
      StringBuffer bufInsSql = new StringBuffer();
      StringBuilder checkQ = new StringBuilder();
      checkQ.append(new StringBuilder().append("select count(*) from cr_deal_installment_plan_emi_calc where DEAL_ID=").append(CommonFunction.checkNull(ipvo.getDealId()).trim()).append("").toString());
      String count = ConnectionDAO.singleReturn(checkQ.toString());

      checkQ = null;

      if (!count.equalsIgnoreCase("0"))
      {
        insertPrepStmtObject = new PrepStmtObject();
        StringBuilder qry = new StringBuilder();
        qry.append(new StringBuilder().append("DELETE FROM cr_deal_installment_plan_emi_calc WHERE DEAL_ID='").append(CommonFunction.checkNull(ipvo.getDealId()).trim()).append("'").toString());

        insertPrepStmtObject.setSql(qry.toString());
        qryList.add(insertPrepStmtObject);

        qry = null;
      }

      for (int k = 0; k < FromInstallment.length; k++)
      {
        bufInsSql = new StringBuffer();
        insertPrepStmtObject = new PrepStmtObject();

        insertPrepStmtObject = new PrepStmtObject();
        bufInsSql.append(new StringBuilder().append("insert into cr_deal_installment_plan_emi_calc (DEAL_ID,DEAL_LOAN_ID,FROM_INSTL_NO,TO_INSTL_NO,RECOVERY_PERCENT,PRINCIPAL_AMOUNT,INSTALLMENT_AMOUNT,REC_STATUS,SEQ_NO,RECOVERY_TYPE,MAKER_ID,MAKER_DATE) values(?,?,?,?,?,?,?,?,?,?,?,DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND))").toString());

        if (CommonFunction.checkNull(ipvo.getDealId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(ipvo.getDealId().trim());
        }
        if (CommonFunction.checkNull(ipvo.getLoanId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(ipvo.getLoanId().trim());
        }
        if (CommonFunction.checkNull(FromInstallment[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(FromInstallment[k].trim());
        }
        if (CommonFunction.checkNull(ToInstallment[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(ToInstallment[k].trim());
        }
        if (CommonFunction.checkNull(RecoveryPercen[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.00");
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(RecoveryPercen[k]).trim()).toString());
        }
        if (CommonFunction.checkNull(prinAmount[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.00");
        else
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(prinAmount[k]).trim()).toString());
        if (CommonFunction.checkNull(instalAmount[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.00");
        else
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(instalAmount[k]).trim()).toString());
        insertPrepStmtObject.addString("P");

        insertPrepStmtObject.addString(new StringBuilder().append("").append(k + 1).toString());

        if (CommonFunction.checkNull(ipvo.getRecoveryType()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(ipvo.getRecoveryType().trim());
        }
        if (CommonFunction.checkNull(ipvo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(ipvo.getMakerId()).trim());
        }

        if (CommonFunction.checkNull(ipvo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(ipvo.getMakerDate()).trim());
        }

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN saveInstallPlan() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        bufInsSql = null;
      }

      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
    } catch (Exception e) {
      e.printStackTrace();
    }
    logger.info(new StringBuilder().append("In saveInstallPlan......................").append(status).toString());
    return status;
  }

  public String generateRepyScheduleForEmiCalc(String dealId, String makerId)
  {
    boolean status = false;
    CallableStatement cst = null;
    Connection con = ConnectionDAO.getConnection();
    logger.info(new StringBuilder().append("Deal id--------------------------------------->").append(dealId).toString());
    String procval = "Noresult";
    try {
      StringBuilder productQuery = new StringBuilder();
      productQuery.append(new StringBuilder().append("select DEAL_LOAN_ID from cr_deal_loan_dtl_emi_calc where DEAL_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).toString());
      logger.info(new StringBuilder().append("productQuery: ").append(productQuery).toString());
      ArrayList productList = ConnectionDAO.sqlSelect(productQuery.toString());

      productQuery = null;
      for (int i = 0; i < productList.size(); i++)
      {
        ArrayList subproductList = (ArrayList)productList.get(i);
        if (subproductList.size() > 0)
        {
          logger.info(new StringBuilder().append("loanDeal Id---Generate_Repayment_schedule-------------------------->").append(CommonFunction.checkNull(subproductList.get(0))).toString());
          con.setAutoCommit(false);
          cst = con.prepareCall("call Generate_Repayment_schedule(?,?,?,?)");
          cst.setString(1, "LCL");
          cst.setString(2, CommonFunction.checkNull(subproductList.get(0)));

          cst.registerOutParameter(3, 1);
          cst.registerOutParameter(4, 1);
          cst.executeUpdate();
          String s1 = cst.getString(3);
          String s2 = cst.getString(4);

          if ((s1 != null) && (s1.equalsIgnoreCase("S")))
          {
            status = true;
            con.commit();
            procval = s1;
          }
          else
          {
            procval = s2;
            con.rollback();
          }
          logger.info(new StringBuilder().append("status:::::::").append(status).toString());
          logger.info(new StringBuilder().append("s2::::::::::").append(s2).toString());
        }
      }
    } catch (Exception e) {
      try {
        con.rollback();
      } catch (SQLException e1) {
        logger.info(new StringBuilder().append("Roll back in generateRepySchedule: ").append(e1).toString());
        e1.printStackTrace();
      }
      e.printStackTrace();
    }
    finally
    {
      try {
        con.commit();
        cst = null;
        con.close();
      }
      catch (SQLException e) {
        e.printStackTrace();
      }
    }

    return procval;
  }

  public ArrayList getFromLoanDtlForEmiCalc(String dealId)
  {
    ArrayList list = new ArrayList();
    logger.info("In getFromLoanDtlForEmiCalc-------------------------------> ");
    ArrayList mainlist = new ArrayList();
    ArrayList subList = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select DEAL_RATE_METHOD,DEAL_FLAT_RATE,DEAL_EFF_RATE,DEAL_IRR1,DEAL_IRR2, UPFRONT_ROUNDING_AMOUNT from cr_deal_loan_dtl_emi_calc where DEAL_ID=").append(dealId).toString());
      logger.info(new StringBuilder().append("Query in getFromLoanDtlInDeal------------------------------->").append(query).toString());
      StringBuilder bussIrrQ = new StringBuilder();
      bussIrrQ.append(new StringBuilder().append("select DEAL_BUSINESS_IRR from cr_deal_loan_dtl_emi_calc where DEAL_ID=").append(dealId).append(" ").toString());
      logger.info(new StringBuilder().append("Query in getFromLoanDtlInDeal--DEAL_BUSINESS_IRR---").append(bussIrrQ).toString());
      String bussIrr = ConnectionDAO.singleReturn(bussIrrQ.toString());
      logger.info(new StringBuilder().append("Query in getFromLoanDtlInDeal--bussIrr---").append(bussIrr).toString());
      mainlist = ConnectionDAO.sqlSelect(query.toString());

      query = null;
      bussIrrQ = null;

      for (int i = 0; i < mainlist.size(); i++) {
        subList = (ArrayList)mainlist.get(i);
        RepayScheduleVo repvo = new RepayScheduleVo();
        if (subList.size() > 0) {
          repvo.setLoanRateMethod(CommonFunction.checkNull(subList.get(0)).trim());
          if (!CommonFunction.checkNull(subList.get(1)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(1)).trim());
            repvo.setFinalRate(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subList.get(2)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(2)).trim());
            repvo.setEffectiveRate(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subList.get(3)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(3)).trim());
            repvo.setMktIRR1(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subList.get(4)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(4)).trim());
            repvo.setMktIRR2(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(subList.get(5)).trim().equalsIgnoreCase(""))
          {
            Number UPFRONT_ROUNDING_AMOUNT = this.myFormatter.parse(CommonFunction.checkNull(subList.get(5)).trim());
            repvo.setUpfrontRoundingAmount(this.myFormatter.format(UPFRONT_ROUNDING_AMOUNT));
          }
          else {
            repvo.setUpfrontRoundingAmount("0.00");
          }
          if (CommonFunction.checkNull(subList.get(0)).trim().equalsIgnoreCase("E"))
          {
            repvo.setFinalRate("");
          }
          repvo.setBussIrr(bussIrr);
        }

        list.add(repvo);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public ArrayList getRepaySchedForEmiCalc(String dealId)
  {
    ArrayList list = new ArrayList();
    logger.info("In getRepaySchedForEmiCalc---------------------> ");
    ArrayList mainlist = new ArrayList();
    ArrayList subList = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select INSTL_NO,DATE_FORMAT(INSTL_DATE,'").append(this.dateFormat).append("'),INSTL_AMOUNT,PRIN_COMP,INT_COMP,EXCESS_INT,").append(" if(ADV_FLAG='Y','YES','NO'),PRIN_OS,OTHER_CHARGES from cr_deal_repaysch_dtl_emi_calc where DEAL_ID=").append(dealId).toString());

      logger.info(new StringBuilder().append("Query in getRepaySched------------------------------>").append(query).toString());
      mainlist = ConnectionDAO.sqlSelect(query.toString());

      query = null;

      for (int i = 0; i < mainlist.size(); i++) {
        subList = (ArrayList)mainlist.get(i);
        RepayScheduleVo repvo = new RepayScheduleVo();
        if (subList.size() > 0) {
          repvo.setInstNo(CommonFunction.checkNull(subList.get(0)).trim());
          repvo.setDueDate(CommonFunction.checkNull(subList.get(1)).trim());

          if (!CommonFunction.checkNull(subList.get(2)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(2)).trim());
            repvo.setInstAmount(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subList.get(3)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(3)).trim());
            repvo.setPrinciple(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subList.get(4)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(4)).trim());
            repvo.setInstCom(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subList.get(5)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(5)).trim());
            repvo.setExcess(this.myFormatter.format(reconNum));
          }
          repvo.setAdvFlag(CommonFunction.checkNull(subList.get(6)).trim());
          if (!CommonFunction.checkNull(subList.get(7)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(7)).trim());
            repvo.setPrinOS(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(subList.get(8)).trim().equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(8)).trim());
            repvo.setOtherCharges(this.myFormatter.format(reconNum));
          }
          else
          {
            repvo.setOtherCharges("0.00");
          }

        }

        list.add(repvo);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public ArrayList getOtherPeriodicalChargeDetailForEmiCalc(String dealId, String stage)
  {
    ArrayList list = new ArrayList();
    ArrayList mainList = new ArrayList();
    ArrayList subList = new ArrayList();
    logger.info("In getOtherPeriodicalChargeDetailForEmiCalc---------------------------------->");
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select distinct D.FROM_INSTL_NO,D.TO_INSTL_NO,D.CHARGE_TYPE,D.AMOUNT ,C.CHARGE_CODE,C.CHARGE_DESC,L.DEAL_INSTALLMENT_TYPE,L.DEAL_NO_OF_INSTALLMENT,L.DEAL_RATE_TYPE,L.DEAL_LOAN_AMOUNT     from cr_deal_loan_dtl_emi_calc L left JOIN cr_deal_charge_plan_dtl_emi_calc D on D.DEAL_ID=L.DEAL_ID ,com_charge_code_m C  where L.DEAL_ID=").append(dealId).append(" AND C.CHARGE_CODE=D.CHARGE_CODE").toString());

      logger.info(new StringBuilder().append("getOtherPeriodicalChargeDetailInDeal Queryl----------------------->").append(query).toString());
      mainList = ConnectionDAO.sqlSelect(query.toString());

      query = null;

      for (int i = 0; i < mainList.size(); i++)
      {
        subList = (ArrayList)mainList.get(i);
        if (subList.size() > 0) {
          OtherChargesPlanVo ipVo = null;
          ipVo = new OtherChargesPlanVo();
          ipVo.setFromInstallment(CommonFunction.checkNull(subList.get(0)).trim());
          ipVo.setToInstallment(CommonFunction.checkNull(subList.get(1)).trim());
          ipVo.setChargeType("FLAT");
          if (!CommonFunction.checkNull(subList.get(3)).equalsIgnoreCase(""))
          {
            Number reconNum = Double.valueOf(0.0D);
            try {
              reconNum = this.myFormatter.parse(CommonFunction.checkNull(subList.get(3)).trim());
            }
            catch (ParseException e) {
              e.printStackTrace();
            }
            ipVo.setChargeAmount(this.myFormatter.format(reconNum));
          }
          else
          {
            ipVo.setChargeAmount("0.00");
          }

          ipVo.setChargeCode(CommonFunction.checkNull(subList.get(4)).trim());
          ipVo.setChargeDesc(CommonFunction.checkNull(subList.get(5)).trim());

          ipVo.setInstallmentType(CommonFunction.checkNull(subList.get(6)).trim());
          ipVo.setTotalInstallment(CommonFunction.checkNull(subList.get(7)).trim());

          ipVo.setRateType(CommonFunction.checkNull(subList.get(8)).trim());

          if (!CommonFunction.checkNull(subList.get(9)).equalsIgnoreCase(""))
          {
            Number instam = this.myFormatter.parse(CommonFunction.checkNull(subList.get(9)).trim());

            logger.info(new StringBuilder().append("setLoanAmount: ").append(instam).toString());
            ipVo.setLoanAmount(this.myFormatter.format(instam));
          }
          else
          {
            ipVo.setLoanAmount("0.00");
          }

          list.add(ipVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public boolean saveOtherChargesPlanForEmiCalc(OtherChargesPlanVo ipvo)
  {
    logger.info("In saveOtherChargesPlanForEmiCalc");
    String[] FromInstallment = ipvo.getFromInstall();
    String[] ToInstallment = ipvo.getToInstall();
    String[] type = ipvo.getType();
    String InstallmentType = ipvo.getInstallmentType();
    String TotalInstallment = ipvo.getTotalInstallment();
    String toInstallment = ipvo.getToInstallment();
    String[] amount = ipvo.getAmount();
    String[] chargeCode = ipvo.getChargehiddenFld();
    ArrayList qryList = new ArrayList();
    boolean status = false;
    try {
      PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
      StringBuffer bufInsSql = new StringBuffer();
      StringBuilder checkQ = new StringBuilder();
      checkQ.append(new StringBuilder().append("select count(*) from cr_deal_charge_plan_dtl_emi_calc where DEAL_ID=").append(CommonFunction.checkNull(ipvo.getDealId()).trim()).append("").toString());
      String count = ConnectionDAO.singleReturn(checkQ.toString());

      checkQ = null;

      if (!count.equalsIgnoreCase("0"))
      {
        insertPrepStmtObject = new PrepStmtObject();
        StringBuilder qry = new StringBuilder();
        qry.append(new StringBuilder().append("DELETE FROM cr_deal_charge_plan_dtl_emi_calc WHERE DEAL_ID='").append(CommonFunction.checkNull(ipvo.getDealId()).trim()).append("'").toString());

        insertPrepStmtObject.setSql(qry.toString());
        qryList.add(insertPrepStmtObject);
        qry = null;
      }

      for (int k = 0; k < FromInstallment.length; k++)
      {
        bufInsSql = new StringBuffer();
        insertPrepStmtObject = new PrepStmtObject();

        insertPrepStmtObject = new PrepStmtObject();
        bufInsSql.append(new StringBuilder().append("insert into cr_deal_charge_plan_dtl_emi_calc (DEAL_ID,DEAL_LOAN_ID,FROM_INSTL_NO,TO_INSTL_NO,CHARGE_TYPE,AMOUNT,CHARGE_CODE,REC_STATUS,MAKER_ID,MAKER_DATE) values(?,?,?,?,?,?,?,?,?,DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND))").toString());

        if (CommonFunction.checkNull(ipvo.getDealId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(ipvo.getDealId().trim());
        }
        if (CommonFunction.checkNull(ipvo.getLoanId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(ipvo.getLoanId().trim());
        }
        if (CommonFunction.checkNull(FromInstallment[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(FromInstallment[k].trim());
        }
        if (CommonFunction.checkNull(ToInstallment[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(ToInstallment[k].trim());
        }
        insertPrepStmtObject.addString("F");

        if (CommonFunction.checkNull(amount[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.00");
        else {
          insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(amount[k]).trim()).toString());
        }
        if (CommonFunction.checkNull(chargeCode[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(chargeCode[k].trim());
        }
        insertPrepStmtObject.addString("P");

        if (CommonFunction.checkNull(ipvo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(ipvo.getMakerId()).trim());
        }
        if (CommonFunction.checkNull(ipvo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(ipvo.getMakerDate()).trim());
        }

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN saveOtherChargesPlanForEmiCalc() DEAL insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        bufInsSql = null;
      }

      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
    } catch (Exception e) {
      e.printStackTrace();
    }
    logger.info(new StringBuilder().append("In saveOtherChargesPlanForEmiCalc......................").append(status).toString());
    return status;
  }

  public ArrayList fetchDueDayNextDateForEmiCalc(String repayEffectiveDate)
  {
    ArrayList list = new ArrayList();
    try {
      String currDay = "0";
      if (!CommonFunction.checkNull(repayEffectiveDate).equalsIgnoreCase(""))
      {
        currDay = repayEffectiveDate.substring(0, 2);
      }

      logger.info(new StringBuilder().append("repayEffectiveDate: ").append(repayEffectiveDate).append(" currDay: ").append(CommonFunction.removePadding(currDay)).toString());
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select DUE_DAY,DATE_FORMAT(DATE_ADD(DATE_ADD(LAST_DAY(STR_TO_DATE('").append(repayEffectiveDate).append("', '").append(this.dateFormat).append("')), interval 1 day),INTERVAL DUE_DAY-1 day),'").append(this.dateFormat).append("') as 'NEXT_DUE_DATE' FROM com_next_due_date_m WHERE REC_STATUS='A' AND '").append(CommonFunction.removePadding(currDay)).append("' BETWEEN FROM_DATE AND TO_DATE").toString());
      logger.info(new StringBuilder().append("fetchDueDayNextDateForEmiCalc------------: ").append(query.toString()).toString());
      LoanDetailVo vo = null;
      ArrayList source = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("fetchDueDayNextDateForEmiCalc-----------: ").append(source.size()).toString());

      query = null;

      for (int i = 0; i < source.size(); i++) {
        logger.info(new StringBuilder().append("fetchDueDayNextDateForEmiCalc----------------: ").append(source.get(i).toString()).toString());
        ArrayList subsource = (ArrayList)source.get(i);
        if (subsource.size() > 0)
        {
          vo = new LoanDetailVo();
          vo.setCycleDate(CommonFunction.checkNull(subsource.get(0)).trim());
          vo.setNextDueDate(CommonFunction.checkNull(subsource.get(1)).trim());
          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList fetchDueDayForEmiCalc(String repayEffectiveDate, String cycleDate)
  {
    ArrayList list = new ArrayList();
    try
    {
      logger.info(new StringBuilder().append("repayEffectiveDate: ").append(repayEffectiveDate).append(" cycleDate: ").append(CommonFunction.removePadding(cycleDate)).toString());
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select DUE_DAY,DATE_FORMAT(DATE_ADD(DATE_ADD(LAST_DAY(STR_TO_DATE('").append(repayEffectiveDate).append("', '").append(this.dateFormat).append("')), interval 1 day),INTERVAL '").append(CommonFunction.removePadding(cycleDate)).append("'-1 day),'").append(this.dateFormat).append("') as 'NEXT_DUE_DATE' FROM com_next_due_date_m WHERE REC_STATUS='A' AND '").append(CommonFunction.removePadding(cycleDate)).append("' BETWEEN FROM_DATE AND TO_DATE").toString());
      logger.info(new StringBuilder().append("fetchDueDayForEmiCalc----------").append(query.toString()).toString());
      LoanDetailVo vo = null;
      ArrayList source = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("fetchDueDayForEmiCalc-----------------").append(source.size()).toString());

      query = null;

      for (int i = 0; i < source.size(); i++)
      {
        logger.info(new StringBuilder().append("fetchDueDayForEmiCalc----------------").append(source.get(i).toString()).toString());
        ArrayList subsource = (ArrayList)source.get(i);
        if (subsource.size() > 0)
        {
          logger.info(new StringBuilder().append("fetchDueDayNextDate: ").append(subsource.size()).toString());
          vo = new LoanDetailVo();
          vo.setCycleDate(CommonFunction.checkNull(subsource.get(0)).trim());
          vo.setNextDueDate(CommonFunction.checkNull(subsource.get(1)).trim());
          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList<Object> getTermSheet(String dealId)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append("select max( DATE_FORMAT(a.APPROVAL_DATE,'%d-%m-%Y %H:%i')),b.BRANCH_DESC,n.deal_loan_amount,n.DEAL_SECTOR_TYPE,");
      query.append(new StringBuilder().append("(select sum(ASSET_COLLATERAL_VALUE) from  cr_deal_collateral_m  dc JOIN cr_asset_collateral_m ac on ac.ASSET_ID=dc.ASSETID where dc.DEAL_ID='").append(dealId.trim()).append("')ASSET_COLLATERAL_VALUE, ").toString());
      query.append(" td.ROI,td.MANAGEMENT_FEE,td.TENURE,td.SD_AMOUNT,td.GUARANTEES_P,td.GUARANTEES_C,td.ROC_CHARGES,td.HYPOTHECATION,td.INSURANCE,td.OTHER_CONDITION,td.ROC_APPLICABLE,td.LOAN_GROSS_AMOUNT,td.PSL_OPTION,td.ADDITIONAL_COMMITEE,cim.INDUSTRY_DESC ,sub.SUB_INDUSTRY_DESC,sc.SCHEME_DESC,(select DESCRIPTION from generic_master where GENERIC_KEY='DEAL_CATEGORY' and value=d.DEAL_CATEGORY)DEAL_CATEGORY,CREDIT_COMMITTEE");

      query.append(" from cr_deal_dtl d LEFT JOIN  cr_deal_approval_dtl a ON a.DEAL_ID=d.DEAL_ID LEFT JOIN cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID LEFT JOIN com_branch_m b on d.DEAL_BRANCH=b.BRANCH_ID ");

      query.append(new StringBuilder().append("LEFT JOIN cr_termsheet_dtl td on td.TXN_ID=d.DEAL_ID  left join cr_deal_customer_m cdcm on cdcm.CUSTOMER_ID=d.DEAL_CUSTOMER_ID  left join com_industry_m cim on cim.INDUSTRY_ID= cdcm.CUSTOMER_INDUSTRY  left join com_sub_industry_m sub on sub_industry_id= cdcm.CUSTOMER_SUB_INDUSTRY  left join cr_scheme_m sc on(sc.SCHEME_ID=n.DEAL_SCHEME) where d.DEAL_ID='").append(dealId.trim()).append("'").toString());

      logger.info(new StringBuilder().append("getTermSheetDataQuery: ").append(query.toString()).toString());
      ArrayList getTermSheetDataDetail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getTermSheetDataList ").append(getTermSheetDataDetail.size()).toString());

      query = null;

      for (int i = 0; i < getTermSheetDataDetail.size(); i++) {
        logger.info(new StringBuilder().append("getTermSheet...Outer FOR loop ").append(CommonFunction.checkNull(getTermSheetDataDetail.get(i)).toString()).toString());
        ArrayList data = (ArrayList)getTermSheetDataDetail.get(i);
        if (data.size() > 0) {
          TermSheetVo termsVo = new TermSheetVo();

          termsVo.setDateOfCC(CommonFunction.checkNull(data.get(0)).trim());
          termsVo.setNameOfBranch(CommonFunction.checkNull(data.get(1)).trim());
          termsVo.setDefaultLoanAmount(CommonFunction.checkNull(data.get(2)).trim());
          if (CommonFunction.checkNull(data.get(16)).equalsIgnoreCase(""))
            termsVo.setGrossAmountLoan(CommonFunction.checkNull(data.get(2)).trim());
          else
            termsVo.setGrossAmountLoan(CommonFunction.checkNull(data.get(16)).trim());
          if (CommonFunction.checkNull(data.get(17)).equalsIgnoreCase(""))
          {
            logger.info(new StringBuilder().append("PSL not exists in cr_termsheet_dtl : ").append(data.get(3)).toString());
            if (CommonFunction.checkNull(data.get(3)).trim().equalsIgnoreCase("PSL"))
              termsVo.setPslOption("Y");
            else
              termsVo.setPslOption("N");
          }
          else
          {
            logger.info(new StringBuilder().append("PSL exists in cr_termsheet_dtl : ").append(data.get(17)).toString());
            termsVo.setPslOption(CommonFunction.checkNull(data.get(17)).trim());
          }
          termsVo.setGrossAmountProduct(CommonFunction.checkNull(data.get(4)).trim());
          termsVo.setRoi(CommonFunction.checkNull(data.get(5)).trim());
          termsVo.setManagementFee(CommonFunction.checkNull(data.get(6)).trim());
          termsVo.setTenure(CommonFunction.checkNull(data.get(7)).trim());
          termsVo.setSdAmount(CommonFunction.checkNull(data.get(8)).trim());
          termsVo.setGuaranteesPrsnl(CommonFunction.checkNull(data.get(9)).trim());
          termsVo.setGuaranteesCorp(CommonFunction.checkNull(data.get(10)).trim());
          termsVo.setRocCharges(CommonFunction.checkNull(data.get(11)).trim());
          termsVo.setHypothecation(CommonFunction.checkNull(data.get(12)).trim());
          termsVo.setInsurance(CommonFunction.checkNull(data.get(13)).trim());
          termsVo.setOtherCondition(CommonFunction.checkNull(data.get(14)).trim());
          termsVo.setRocApplicable(CommonFunction.checkNull(data.get(15)).trim());
          termsVo.setAdditionalCommitee(CommonFunction.checkNull(data.get(18)).trim());
          termsVo.setTypeOfIndustry(CommonFunction.checkNull(data.get(19)).trim());
          termsVo.setSubIndustry(CommonFunction.checkNull(data.get(20)).trim());
          termsVo.setDealScheme(CommonFunction.checkNull(data.get(21)).trim());
          termsVo.setDealCategory(CommonFunction.checkNull(data.get(22)).trim());
          termsVo.setCreditcommittee(CommonFunction.checkNull(data.get(23)).trim());
          list.add(termsVo);
        }

      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList<Object> getMachineDetails(String dealId) {
    TermSheetVo vo = null;
    ArrayList list = new ArrayList();
    try
    {
      logger.info(new StringBuilder().append("Value of Assets Id in dao is....................").append(dealId).toString());
      StringBuilder query = new StringBuilder();
      query.append("SELECT ASSET_TYPE,ASSET_COLLATERAL_DESC,ASSET_SUPPLIER_DESC,ASSET_COLLATERAL_VALUE ");
      query.append("from cr_asset_collateral_m c left join cr_deal_collateral_m d on c.ASSET_ID=d.ASSETID ");
      query.append(new StringBuilder().append("where d.DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' AND ASSET_COLLATERAL_CLASS='MACHINE' ").toString());

      logger.info(new StringBuilder().append("getMachineDetails  query     :  ").append(query).toString());
      ArrayList bdetails = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("MachineDetails").append(bdetails.size()).toString());

      query = null;
      for (int i = 0; i < bdetails.size(); i++)
      {
        ArrayList bdetails1 = (ArrayList)bdetails.get(i);
        if (bdetails1.size() > 0)
        {
          vo = new TermSheetVo();
          vo.setAssetsType(CommonFunction.checkNull(bdetails1.get(0)).trim());
          vo.setAssetsDetails(CommonFunction.checkNull(bdetails1.get(1)).trim());
          vo.setAssetsSupplier(CommonFunction.checkNull(bdetails1.get(2)).trim());
          vo.setAssetsAmount(CommonFunction.checkNull(bdetails1.get(3)).trim());
        }

        list.add(vo);
      }

      logger.info(new StringBuilder().append("list").append(list.size()).toString());
    } catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public ArrayList<Object> getApprovalCommitteeList(String dealId)
  {
    logger.info("in getApprovalCommitteeList() CreditProcessingDAOImpl. ");
    TermSheetVo vo = null;
    ArrayList list = new ArrayList();
    ArrayList bdetails = new ArrayList();
    StringBuilder query = new StringBuilder();
    try
    {
      query.append("select b.USER_NAME,a.APPROVAL_LEVEL from cr_deal_approval_dtl a join SEC_USER_M b on(a.approval_by=b.USER_ID) ");
      query.append(new StringBuilder().append(" WHERE a.DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' order by a.DEAL_APPROVAL_ID").toString());
      logger.info(new StringBuilder().append("getApprovalCommitteeList  list of approval committee  query   :   ").append(query).toString());
      bdetails = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      for (int i = 0; i < bdetails.size(); i++)
      {
        ArrayList bdetails1 = (ArrayList)bdetails.get(i);
        if (bdetails1.size() > 0)
        {
          vo = new TermSheetVo();
          vo.setUserName(CommonFunction.checkNull(bdetails1.get(0)).trim());
          vo.setLevel(CommonFunction.checkNull(bdetails1.get(1)).trim());
        }
        list.add(vo);
      }
      logger.info(new StringBuilder().append("list").append(list.size()).toString());
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      dealId = null;
      vo = null;
      bdetails.clear();
      bdetails = null;
      query = null;
    }
    return list;
  }

  public String saveTermSheetDetails(TermSheetVo termsVo)
  {
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    ArrayList qryList = new ArrayList();
    String status = "X";
    StringBuilder updateDeal = new StringBuilder();
    String sanAmt = CommonFunction.checkNull(termsVo.getGrossAmountLoan()).trim();
    if (CommonFunction.checkNull(sanAmt).trim().equalsIgnoreCase(""))
      sanAmt = "0.00";
    String deal = "";
    deal = ConnectionDAO.singleReturn(new StringBuilder().append("select TXN_ID from CR_TERMSHEET_DTL WHERE TXN_ID='").append(CommonFunction.checkNull(termsVo.getDealId()).trim()).append("'").toString());
    if (!CommonFunction.checkNull(termsVo.getAction()).trim().equalsIgnoreCase("I"))
    {
      updateDeal.append(new StringBuilder().append("UPDATE CR_DEAL_LOAN_DTL SET DEAL_SANCTION_AMOUNT=").append(CommonFunction.checkNull(sanAmt).trim()).append(",REDY_TO_AUTHOR='N' WHERE DEAL_ID='").append(CommonFunction.checkNull(termsVo.getDealId()).trim()).append("'").toString());
      PrepStmtObject prtStmt = new PrepStmtObject();
      prtStmt.setSql(updateDeal.toString());
      logger.info(new StringBuilder().append("IN saveTermSheetDetails() update deal table query :  ").append(prtStmt.printQuery()).toString());
      qryList.add(prtStmt);
      if ((deal != null) && (!deal.equalsIgnoreCase("")))
      {
        logger.info("In update saveTermSheetDetails");
        StringBuilder queryUpdate = new StringBuilder();
        queryUpdate.append("UPDATE CR_TERMSHEET_DTL SET ROI=?,MANAGEMENT_FEE=?, TENURE=?, SD_AMOUNT=?, GUARANTEES_P=?, GUARANTEES_C=?,");
        queryUpdate.append(new StringBuilder().append(" ROC_CHARGES=?, HYPOTHECATION=?, INSURANCE=?, OTHER_CONDITION=?, MAKER_ID=?, MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),ROC_APPLICABLE=?,LOAN_GROSS_AMOUNT=?,PSL_OPTION=?,ADDITIONAL_COMMITEE=?,CREDIT_COMMITTEE=? WHERE TXN_ID=? ").toString());

        if (CommonFunction.checkNull(termsVo.getRoi()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getRoi().trim());
        }
        if (CommonFunction.checkNull(termsVo.getManagementFee()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          try {
            insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(termsVo.getManagementFee().trim())).toString());
          }
          catch (ParseException e1) {
            e1.printStackTrace();
          }
        }
        if (CommonFunction.checkNull(termsVo.getTenure()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getTenure().trim());
        }
        if (CommonFunction.checkNull(termsVo.getSdAmount()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          try {
            insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(termsVo.getSdAmount().trim())).toString());
          }
          catch (ParseException e1) {
            e1.printStackTrace();
          }
        }
        if (CommonFunction.checkNull(termsVo.getGuaranteesPrsnl()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getGuaranteesPrsnl().trim());
        }
        if (CommonFunction.checkNull(termsVo.getGuaranteesCorp()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getGuaranteesCorp().trim());
        }

        if (CommonFunction.checkNull(termsVo.getRocCharges()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getRocCharges().trim());
        }
        if (CommonFunction.checkNull(termsVo.getHypothecation()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getHypothecation().trim());
        }
        if (CommonFunction.checkNull(termsVo.getInsurance()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getInsurance().trim());
        }
        if (CommonFunction.checkNull(termsVo.getOtherCondition()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getOtherCondition().trim());
        }
        if (CommonFunction.checkNull(termsVo.getMakerId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getMakerId().trim());
        }
        if (CommonFunction.checkNull(termsVo.getMakerDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getMakerDate().trim());
        }
        if (CommonFunction.checkNull(termsVo.getRocApplicable()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getRocApplicable().trim());
        }
        if (CommonFunction.checkNull(termsVo.getGrossAmountLoan()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getGrossAmountLoan().trim());
        }
        if (CommonFunction.checkNull(termsVo.getPslOption()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getPslOption().trim());
        }
        if (CommonFunction.checkNull(termsVo.getAdditionalCommitee()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getAdditionalCommitee().trim());
        }
        if (CommonFunction.checkNull(termsVo.getCreditcommittee()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getCreditcommittee().trim());
        }
        if (CommonFunction.checkNull(termsVo.getDealId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getDealId().trim());
        }
        insertPrepStmtObject.setSql(queryUpdate.toString());
        logger.info(new StringBuilder().append("IN saveTermSheetDetails() update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        logger.info(new StringBuilder().append("In saveTermSheetDetails ........ update query: ").append(queryUpdate).toString());

        queryUpdate = null;
        try
        {
          boolean st = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
          if (st)
          {
            status = "S";
          }
          logger.info(new StringBuilder().append("In saveTermSheetDetails.........update status: ").append(status).toString());
        }
        catch (Exception e) {
          e.printStackTrace();
        }
      }
      else
      {
        logger.info("In insert saveTermSheetDetails");
        StringBuilder queryUpdate = new StringBuilder();
        queryUpdate.append("INSERT INTO CR_TERMSHEET_DTL(TXN_ID, ROI, MANAGEMENT_FEE, TENURE, SD_AMOUNT, GUARANTEES_P, GUARANTEES_C,");
        queryUpdate.append(" ROC_CHARGES, HYPOTHECATION, INSURANCE, OTHER_CONDITION, MAKER_ID, MAKER_DATE,ROC_APPLICABLE,LOAN_GROSS_AMOUNT,PSL_OPTION,ADDITIONAL_COMMITEE,CREDIT_COMMITTEE )");
        queryUpdate.append(" values ( ");
        queryUpdate.append(" ?,");
        queryUpdate.append(" ?,");
        queryUpdate.append(" ?,");
        queryUpdate.append(" ?,");
        queryUpdate.append(" ?,");
        queryUpdate.append(" ?,");
        queryUpdate.append(" ?,");
        queryUpdate.append(" ?,");
        queryUpdate.append(" ?,");
        queryUpdate.append(" ?,");
        queryUpdate.append(" ?,");
        queryUpdate.append(" ?,");
        queryUpdate.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND),").toString());
        queryUpdate.append(" ?,");
        queryUpdate.append(" ?,");
        queryUpdate.append(" ?,");
        queryUpdate.append(" ?,");
        queryUpdate.append(" ?");
        queryUpdate.append(" )");
        if (CommonFunction.checkNull(termsVo.getDealId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getDealId().trim());
        }
        if (CommonFunction.checkNull(termsVo.getRoi()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getRoi().trim());
        }
        if (CommonFunction.checkNull(termsVo.getManagementFee()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          try {
            insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(termsVo.getManagementFee().trim())).toString());
          }
          catch (ParseException e1) {
            e1.printStackTrace();
          }
        }
        if (CommonFunction.checkNull(termsVo.getTenure()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getTenure().trim());
        }
        if (CommonFunction.checkNull(termsVo.getSdAmount()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          try {
            insertPrepStmtObject.addString(this.myFormatter.parse(CommonFunction.checkNull(termsVo.getSdAmount().trim())).toString());
          }
          catch (ParseException e1) {
            e1.printStackTrace();
          }
        }
        if (CommonFunction.checkNull(termsVo.getGuaranteesPrsnl()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getGuaranteesPrsnl().trim());
        }
        if (CommonFunction.checkNull(termsVo.getGuaranteesCorp()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getGuaranteesCorp().trim());
        }

        if (CommonFunction.checkNull(termsVo.getRocCharges()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getRocCharges().trim());
        }
        if (CommonFunction.checkNull(termsVo.getHypothecation()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getHypothecation().trim());
        }
        if (CommonFunction.checkNull(termsVo.getInsurance()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getInsurance().trim());
        }
        if (CommonFunction.checkNull(termsVo.getOtherCondition()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getOtherCondition().trim());
        }
        if (CommonFunction.checkNull(termsVo.getMakerId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getMakerId().trim());
        }
        if (CommonFunction.checkNull(termsVo.getMakerDate()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getMakerDate().trim());
        }
        if (CommonFunction.checkNull(termsVo.getRocApplicable()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getRocApplicable().trim());
        }
        if (CommonFunction.checkNull(termsVo.getGrossAmountLoan()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getGrossAmountLoan().trim());
        }
        if (CommonFunction.checkNull(termsVo.getPslOption()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getPslOption().trim());
        }
        if (CommonFunction.checkNull(termsVo.getAdditionalCommitee()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getAdditionalCommitee().trim());
        }
        if (CommonFunction.checkNull(termsVo.getCreditcommittee()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getCreditcommittee().trim());
        }
        insertPrepStmtObject.setSql(queryUpdate.toString());
        logger.info(new StringBuilder().append("IN saveTermSheetDetails() insert query1 ###").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        logger.info(new StringBuilder().append("In saveTermSheetDetails ........ insert query: ").append(queryUpdate).toString());

        queryUpdate = null;
        try
        {
          boolean st = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
          if (st)
          {
            status = "S";
          }
          logger.info(new StringBuilder().append("In saveTermSheetDetails.........insert status:").append(status).toString());
        }
        catch (Exception e) {
          e.printStackTrace();
        }
      }
    }
    else
    {
      if ((deal != null) && (!deal.equalsIgnoreCase("")))
      {
        logger.info("In update saveTermSheetDetails");
        StringBuilder queryUpdate = new StringBuilder();
        queryUpdate.append("UPDATE CR_TERMSHEET_DTL SET LOAN_GROSS_AMOUNT=? WHERE TXN_ID=? ");

        if (CommonFunction.checkNull(termsVo.getGrossAmountLoan()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getGrossAmountLoan().trim());
        }
        if (CommonFunction.checkNull(termsVo.getDealId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getDealId().trim());
        }
        insertPrepStmtObject.setSql(queryUpdate.toString());
        logger.info(new StringBuilder().append("IN saveTermSheetDetails() update query2 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
      }
      else
      {
        StringBuilder queryUpdate = new StringBuilder();
        queryUpdate.append("INSERT INTO CR_TERMSHEET_DTL(TXN_ID,LOAN_GROSS_AMOUNT)");
        queryUpdate.append(" values ( ");
        queryUpdate.append(" ?,");
        queryUpdate.append("?)");
        if (CommonFunction.checkNull(termsVo.getDealId()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getDealId().trim());
        }
        if (CommonFunction.checkNull(termsVo.getGrossAmountLoan()).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(termsVo.getGrossAmountLoan().trim());
        }
        insertPrepStmtObject.setSql(queryUpdate.toString());
        logger.info(new StringBuilder().append("IN saveTermSheetDetails() update query2 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
      }
      try
      {
        boolean st = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveTermSheetDetails.........insert status:").append(status).toString());
      }
      catch (Exception e)
      {
        e.printStackTrace();
      }
    }

    return status;
  }

  public String getDealIdInCm(String loanId) {
    logger.info("In getDealId...");
    StringBuilder query = new StringBuilder();
    query.append(new StringBuilder().append("select b.DEAL_ID from cr_loan_dtl a LEFT JOIN cr_deal_dtl b on b.DEAL_ID=a.LOAN_DEAL_ID where loan_id='").append(loanId).append("'").toString());
    return ConnectionDAO.singleReturn(query.toString());
  }

  public String checkApprovalLevel(String userId)
  {
    String approvalLevel = "";
    String approvalFlag = "";
    try
    {
      logger.info("In checkApprovalLevel..........................DAOImpl");
      StringBuilder query1 = new StringBuilder();
      StringBuilder query = new StringBuilder();
      query1.append("SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE parameter_key='TERMSHEET_FLAG'");
      logger.info(new StringBuilder().append("In checkApprovalLevel Flag from parameter_mst ...............query...........DAOImpl ").append(query1).toString());
      approvalFlag = ConnectionDAO.singleReturn(query1.toString());
      logger.info(new StringBuilder().append("Resultset value approvalFlag====  ").append(approvalFlag).toString());
      if (CommonFunction.checkNull(approvalFlag).trim().equalsIgnoreCase("Y"))
      {
        query.append(new StringBuilder().append("SELECT COUNT(1) FROM CR_USER_APPROVAL_M WHERE USER_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(userId)).trim()).append("'AND LEVEL='1' AND USER_ROLE='U' ").toString());
        logger.info(new StringBuilder().append("In checkApprovalLevel...............query...........DAOImpl ").append(query).toString());
        approvalLevel = ConnectionDAO.singleReturn(query.toString());
        logger.info(new StringBuilder().append("Resultset value approvalLevel====  ").append(approvalLevel).toString());
      }
      query = null;
      query1 = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    return approvalLevel;
  }

  public ArrayList getPropertyType()
  {
    ArrayList list = new ArrayList();
    try {
      logger.info("Enter getPropertyType()");
      String query = "select value,description from generic_master where GENERIC_KEY='PROPERTY_TYPE' and rec_status ='A'";
      logger.info(new StringBuilder().append("Query :  ").append(query).toString());
      ArrayList propertyList = ConnectionDAO.sqlSelect(query);
      logger.info(new StringBuilder().append("propertyList Size : ").append(propertyList.size()).toString());
      for (int i = 0; i < propertyList.size(); i++) {
        logger.info(new StringBuilder().append("getPropertyTypeList ").append(propertyList.get(i).toString()).toString());
        ArrayList subList = (ArrayList)propertyList.get(i);
        if (subList.size() > 0)
        {
          logger.info(new StringBuilder().append("getNatureOfBusinessList ").append(subList.size()).toString());
          CollateralVo vo = new CollateralVo();
          vo.setPropertyTypeCode(CommonFunction.checkNull(subList.get(0)).toString());
          vo.setPropertyTypeDesc(CommonFunction.checkNull(subList.get(1)).toString());
          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList<Object> getPropertyStatus()
  {
    ArrayList list = new ArrayList();
    try {
      StringBuffer query = new StringBuffer();
      query.append("SELECT VALUE,DESCRIPTION FROM generic_master  where GENERIC_KEY='PROPERTY_STATUS' and REC_STATUS='A'");

      logger.info(new StringBuilder().append("In creditProcessingDaoI getPropertyStatus").append(query).toString());

      ArrayList collateralsAll = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      for (int i = 0; i < collateralsAll.size(); i++) {
        ArrayList sublist = (ArrayList)collateralsAll.get(i);
        if (sublist.size() > 0) {
          CodeDescVo av = new CodeDescVo();
          av.setId(CommonFunction.checkNull(sublist.get(0)).trim());
          av.setName(CommonFunction.checkNull(sublist.get(1)).trim());
          list.add(av);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList<Object> getPropertytTitle()
  {
    ArrayList list = new ArrayList();
    try {
      StringBuffer query = new StringBuffer();
      query.append("SELECT VALUE,DESCRIPTION FROM generic_master  where GENERIC_KEY='PROPERTY_TITLE' and REC_STATUS='A'");

      logger.info(new StringBuilder().append("In creditProcessingDaoI getPropertytTitle").append(query).toString());

      ArrayList collateralsAll = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      for (int i = 0; i < collateralsAll.size(); i++) {
        ArrayList sublist = (ArrayList)collateralsAll.get(i);
        if (sublist.size() > 0) {
          CodeDescVo av = new CodeDescVo();
          av.setId(CommonFunction.checkNull(sublist.get(0)).trim());
          av.setName(CommonFunction.checkNull(sublist.get(1)).trim());
          list.add(av);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList<Object> getPropertyOwnerForDeal(String propOwner, String dealId) {
    ArrayList list = new ArrayList();
    try {
      StringBuffer query = new StringBuffer();
      query.append(new StringBuilder().append("select  c.CUSTOMER_NAME,concat(c.CUSTOMER_NAME,'/',case B.DEAL_CUSTOMER_ROLE_TYPE when 'PRAPPL' then 'APPLICANT' WHEN 'COAPPL' THEN 'COAPPLICANT' WHEN 'GUARANTOR' THEN  'GUARANTOR ' END) customer  from cr_deal_customer_m c  join cr_deal_customer_role b on c.customer_id=b.deal_customer_id  join cr_deal_dtl a on a.deal_id=b.deal_id  where b.deal_id=").append(dealId).append(" and c.customer_name in(").append(propOwner).append(")").toString());

      logger.info(new StringBuilder().append("In creditProcessingDaoI getPropertyOwnerForDeal  :  ").append(query).toString());

      ArrayList collateralsAll = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      for (int i = 0; i < collateralsAll.size(); i++) {
        ArrayList sublist = (ArrayList)collateralsAll.get(i);
        if (sublist.size() > 0) {
          CollateralVo av = new CollateralVo();
          av.setPropertyOwnerId(CommonFunction.checkNull(sublist.get(0)).trim());
          av.setPropertyOwnerDesc(CommonFunction.checkNull(sublist.get(1)).trim());
          list.add(av);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList<Object> getPropertyOwnerForLoan(String propOwner, String loanId)
  {
    ArrayList list = new ArrayList();
    try {
      StringBuffer query = new StringBuffer();
      query.append(new StringBuilder().append("select distinct c.CUSTOMER_NAME,concat(c.CUSTOMER_NAME,'/',case b.loan_customer_role_type when 'PRAPPL' then 'APPLICANT' WHEN 'COAPPL' THEN 'COAPPLICANT' WHEN 'GUARANTOR'  THEN  'GUARANTOR ' END)customer from gcd_customer_m c  join cr_loan_customer_role b on c.customer_id=b.gcd_id  join cr_loan_dtl a on a.loan_id=b.loan_id  where b.loan_id=").append(loanId).append(" and c.CUSTOMER_NAME in(").append(propOwner).append(") ").toString());

      logger.info(new StringBuilder().append("In getPropertyOwnerForLoan  :  ").append(query).toString());

      ArrayList collateralsAll = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      for (int i = 0; i < collateralsAll.size(); i++) {
        ArrayList sublist = (ArrayList)collateralsAll.get(i);
        if (sublist.size() > 0) {
          CollateralVo av = new CollateralVo();
          av.setPropertyOwnerId(CommonFunction.checkNull(sublist.get(0)).trim());
          av.setPropertyOwnerDesc(CommonFunction.checkNull(sublist.get(1)).trim());
          list.add(av);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public String getPropertyOwnerGcdId(String propOwner)
  {
    String propertyOwnerList = "";
    try
    {
      logger.info("In getPropertyOwnerGcdId..........................DAOImpl");
      StringBuilder query1 = new StringBuilder();
      query1.append(new StringBuilder().append("SELECT GROUP_CONCAT(gcd_customer_id) from cr_deal_customer_m WHERE customer_id in(").append(propOwner).append(")").toString());
      logger.info(new StringBuilder().append("In checkApprovalLevel Flag from parameter_mst ...............query...........DAOImpl ").append(query1).toString());
      propertyOwnerList = ConnectionDAO.singleReturn(query1.toString());
      logger.info(new StringBuilder().append("Resultset value approvalFlag====  ").append(propertyOwnerList).toString());
      query1 = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    return propertyOwnerList;
  }

  public boolean checkUploadFeasibilityFVC(String dealId, String stage)
  {
    boolean status = false;
    Connection conn = null;
    Statement stmt = null;
    ResultSet rs = null;
    try
    {
      String strReturn = null;
      int count = 0;
      logger.info("In check Upload Feasibility..........................DAOImpl");
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select count(txn_id) from cr_uploaded_documents where txn_id='").append(dealId).append("' and txn_type='FVC'").toString());
      logger.info(new StringBuilder().append("In check Upload Feasibility...............query...........DAOImpl ").append(query).toString());
      conn = ConnectionDAO.getConnection();
      stmt = conn.createStatement();
      rs = stmt.executeQuery(query.toString());
      if (rs.next()) {
        strReturn = rs.getString(1);
      }
      count = Integer.parseInt(strReturn);
      conn.close();
      if (count < 5)
      {
        status = true;
      }
      else if (count >= 5)
      {
        status = false;
      }
      logger.info(new StringBuilder().append("Resultset value====  ").append(count).toString());

      query = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      try {
        rs.close();
        stmt.close();
        conn.close();
      } catch (Exception e) {
        e.printStackTrace();
      }
    }
    return status;
  }

  public boolean uploadDocumentDataForFVC(Object ob, String stage)
  {
    UnderwritingDocUploadVo uwDocVo = (UnderwritingDocUploadVo)ob;
    boolean status = false;
    logger.info(new StringBuilder().append("Inside DAO Impl: File= ").append(uwDocVo.getDocFile()).toString());
    logger.info(new StringBuilder().append("Inside DAO Impl: getFieldVerificationUniqueId= ").append(uwDocVo.getFieldVerificationUniqueId()).toString());

    logger.info("Document Uploaded Successfully");
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    try {
      logger.info("In insert part of uploadDocumentDataForFVC....");
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("insert into cr_uploaded_documents(txn_type,txn_id,document_desc,file_name,document_path,uploaded_by,uploaded_date)");
      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append("now())");

      insertPrepStmtObject.addString(stage);

      if (CommonFunction.checkNull(uwDocVo.getFieldVerificationUniqueId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(uwDocVo.getFieldVerificationUniqueId().trim());
      if (CommonFunction.checkNull(uwDocVo.getDocDescription()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(uwDocVo.getDocDescription().trim());
      if (CommonFunction.checkNull(uwDocVo.getFileName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(CommonFunction.checkNull(uwDocVo.getFileName()).trim());
      if (CommonFunction.checkNull(uwDocVo.getDocPath()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(uwDocVo.getDocPath().trim());
      if (CommonFunction.checkNull(uwDocVo.getUserName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(uwDocVo.getUserName().trim());
      }
      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN uploadDocumentDataForFVC() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In uploadDocumentDataForFVC.................query status..... ").append(status).toString());
      bufInsSql = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    return status;
  }

  public ArrayList getUploadDocForFVC(String fieldVerificationUniqueId, String stage)
  {
    ArrayList list = new ArrayList();
    try {
      logger.info(new StringBuilder().append("In getUploadUnderwritingData..........................DAOImpl").append(fieldVerificationUniqueId).toString());
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select a.txn_id, a.file_name, a.document_desc, b.USER_NAME from cr_uploaded_documents a left join sec_user_m b on a.UPLOADED_BY=b.USER_ID where txn_id='").append(fieldVerificationUniqueId).append("' and TXN_TYPE='").append(stage).append("'").toString());
      logger.info(new StringBuilder().append("In getUploadUnderwritingData...............query...........DAOImpl").append(query.toString()).toString());
      UnderwritingDocUploadVo uwDocVo = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getUploadUnderwritingData size of list Product ").append(product.size()).toString());
      query = null;
      for (int i = 0; i < product.size(); i++) {
        logger.info(new StringBuilder().append("getUploadUnderwritingData... FOR loop ").append(CommonFunction.checkNull(product.get(i)).toString()).toString());
        ArrayList data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          uwDocVo = new UnderwritingDocUploadVo();
          uwDocVo.setFieldVerificationUniqueId(CommonFunction.checkNull(data.get(0)).trim());
          uwDocVo.setFileName(CommonFunction.checkNull(data.get(1)).trim());
          uwDocVo.setDocDescription(CommonFunction.checkNull(data.get(2)).trim());
          uwDocVo.setUserName(CommonFunction.checkNull(data.get(3)).trim());
          list.add(uwDocVo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public boolean deleteDocumentUploadedForFVI(String documentName, String fieldVerificationUniqueId, String stage)
  {
    logger.info(new StringBuilder().append("In deleteDocumentUploadEntry .......DAOImpl..").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(documentName).trim())).toString());
    boolean status = false;
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("delete from cr_uploaded_documents where file_name='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(documentName).trim())).append("' and txn_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(fieldVerificationUniqueId)).trim()).append("' and txn_type='").append(stage).append("'").toString());
      logger.info(new StringBuilder().append("In.....deleteDocumentUploadEntry").append(query.toString()).toString());
      this.qryList = new ArrayList();
      this.qryList.add(query);
      status = ConnectionDAO.sqlInsUpdDelete(this.qryList);
      logger.info(new StringBuilder().append("Deletion Status :").append(status).toString());
      query = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    return status;
  }

  public String getFVIFileInfo(String fieldVerificationUniqueId, String fileName, String stage)
  {
    String filePath = "";
    try
    {
      logger.info("In getFileInfo..........................DAOImpl");
      StringBuffer query = new StringBuffer();
      query.append(new StringBuilder().append("select document_path from cr_uploaded_documents where txn_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(fieldVerificationUniqueId)).trim()).append("' and file_name='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(fileName)).trim()).append("' AND TXN_TYPE='").append(stage).append("'").toString());
      logger.info(new StringBuilder().append("In getFileInfo...............query...........DAOImpl ").append(query.toString()).toString());
      filePath = ConnectionDAO.singleReturn(query.toString());
      logger.info(new StringBuilder().append("Resultset value====  ").append(filePath).toString());
      query = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return filePath;
  }

  public ArrayList<Object> showInsuranceRelWithNominee()
  {
    ArrayList list = new ArrayList();
    try {
      StringBuffer query = new StringBuffer();
      query.append("SELECT VALUE,DESCRIPTION FROM generic_master  where GENERIC_KEY='RELATION_TYPE' and REC_STATUS='A'");

      logger.info(new StringBuilder().append("In creditProcessingDaoI getPropertytTitle").append(query).toString());

      ArrayList collateralsAll = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      for (int i = 0; i < collateralsAll.size(); i++) {
        ArrayList sublist = (ArrayList)collateralsAll.get(i);
        if (sublist.size() > 0) {
          CodeDescVo av = new CodeDescVo();
          av.setId(CommonFunction.checkNull(sublist.get(0)).trim());
          av.setName(CommonFunction.checkNull(sublist.get(1)).trim());
          list.add(av);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList<CommonDealVo> querySearchDetail(CommonDealVo vo)
  {
    ArrayList list = new ArrayList();
    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;

    logger.info(new StringBuilder().append("here userid++++++++++++++++++++++++++++++++++++++++++++++++++++++++ ").append(vo.getReportingToUserId()).toString());
    String userNameQ = new StringBuilder().append("select USER_NAME from sec_user_m where REC_STATUS='A' and USER_ID='").append(vo.getReportingToUserId()).append("'").toString();
    String userName = ConnectionDAO.singleReturn(userNameQ);
    logger.info(new StringBuilder().append("userNameQ: ").append(userNameQ).append(" userName: ").append(userName).toString());
    ArrayList header = new ArrayList();

    String branch = "";
    if (vo.getAllBranches().equalsIgnoreCase("on"))
    {
      String branchMappedToUserQuery = new StringBuilder().append("SELECT GROUP_CONCAT(BRANCH_ID) FROM sec_user_branch_dtl WHERE USER_ID='").append(CommonFunction.checkNull(vo.getReportingToUserId()).trim()).append("' AND REC_STATUS='A'").toString();
      branch = ConnectionDAO.singleReturn(branchMappedToUserQuery);
      logger.info(new StringBuilder().append("branchMappedToUserQuery: ").append(branchMappedToUserQuery).append("      branches maped to user:   ").append(branch).toString());
    }
    else
    {
      branch = vo.getBranchId();
    }

    if (CommonFunction.checkNull(branch).equalsIgnoreCase(""))
    {
      branch = vo.getBranchId();
    }

    try
    {
      logger.info("Inside querySearchDetail.....");

      CommonDealVo fetchVo = vo;
      boolean appendSQL = false;
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();

      bufInsSql.append(" select distinct d.DEAL_ID,DEAL_NO,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC from cr_deal_dtl d");
      bufInsSqlTempCount.append("SELECT COUNT(distinct d.DEAL_ID,DEAL_NO,deal.CUSTOMER_NAME,p.PRODUCT_DESC,s.SCHEME_DESC) FROM cr_deal_dtl d ");

      bufInsSql.append(" inner join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");
      bufInsSqlTempCount.append(" inner join cr_deal_loan_dtl n on d.DEAL_ID=n.DEAL_ID  ");

      bufInsSql.append(" inner join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");
      bufInsSqlTempCount.append(" inner join cr_product_m p on n.DEAL_PRODUCT=p.PRODUCT_ID  ");

      bufInsSql.append(" inner join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");
      bufInsSqlTempCount.append(" inner join cr_deal_customer_m deal on deal.CUSTOMER_ID=d.DEAL_CUSTOMER_ID ");

      bufInsSql.append(" inner join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");
      bufInsSqlTempCount.append(" inner join cr_scheme_m s on n.DEAL_SCHEME=s.SCHEME_ID ");

      if ((!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID()).trim()).equalsIgnoreCase("")) && (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme()).trim()).equalsIgnoreCase("")) && (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on")))
      {
        bufInsSql.append(new StringBuilder().append("WHERE D.REC_STATUS = 'F' AND  d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(") and d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("WHERE D.REC_STATUS = 'F' AND d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(") and d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("'AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
      }

      if ((vo.getLbxDealNo().equalsIgnoreCase("")) || (vo.getCustomername().equalsIgnoreCase("")) || (vo.getLbxProductID().equalsIgnoreCase("")) || (vo.getLbxscheme().equalsIgnoreCase("")) || (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on"))) {
        appendSQL = true;
      }

      if (appendSQL) {
        logger.info("In Where Clause");

        bufInsSql.append(new StringBuilder().append(" WHERE D.REC_STATUS = 'F' AND  d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(")").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" WHERE D.REC_STATUS = 'F' AND  d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(")").toString());
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND d.DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()).append("' ").toString());
        appendSQL = true;
      }

      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomername())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND deal.CUSTOMER_NAME like'%").append(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()).append("%' ").toString());
        appendSQL = true;
      }
      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxProductID())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND n.DEAL_PRODUCT='").append(StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim()).append("' ").toString());
        appendSQL = true;
      }
      if (!StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxscheme())).trim().equalsIgnoreCase("")) {
        bufInsSql.append(new StringBuilder().append("AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND n.DEAL_SCHEME='").append(StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim()).append("' ").toString());
        appendSQL = true;
      }
      if (StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getAllBranches()).trim()).equalsIgnoreCase("on")) {
        bufInsSql.append(new StringBuilder().append("AND d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(") ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append("AND d.DEAL_BRANCH IN (").append(StringEscapeUtils.escapeSql(branch).trim()).append(") ").toString());
        appendSQL = true;
      }
      LoggerMsg.info(new StringBuilder().append("query : ").append(bufInsSql).toString());
      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));

      if (((StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim() == null) && (StringEscapeUtils.escapeSql(vo.getCustomername()).trim() == null)) || ((StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim().equalsIgnoreCase("")) && (StringEscapeUtils.escapeSql(vo.getCustomername()).trim().equalsIgnoreCase(""))) || ((StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim() == null) && (StringEscapeUtils.escapeSql(vo.getLbxProductID()).trim().equalsIgnoreCase(""))) || ((StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim() == null) && (StringEscapeUtils.escapeSql(vo.getLbxscheme()).trim().equalsIgnoreCase(""))) || (vo.getCurrentPageLink() > 1))
      {
        logger.info(new StringBuilder().append("current PAge Link no .................... ").append(vo.getCurrentPageLink()).toString());
        if (vo.getCurrentPageLink() > 1)
        {
          startRecordIndex = (vo.getCurrentPageLink() - 1) * this.no;
          endRecordIndex = this.no;
          logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
          logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
        }

        bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
      }

      logger.info(new StringBuilder().append("query : ").append(bufInsSql).toString());

      header = ConnectionDAO.sqlSelect(bufInsSql.toString());

      for (int i = 0; i < header.size(); i++)
      {
        logger.info(new StringBuilder().append("header: ").append(header.size()).toString());
        ArrayList header1 = (ArrayList)header.get(i);
        if ((header1 != null) && (header1.size() > 0))
        {
          logger.info(new StringBuilder().append("header list size .....................").append(header.size()).toString());
          fetchVo = new CommonDealVo();

          fetchVo.setLbxDealNo(CommonFunction.checkNull(CommonFunction.checkNull(header1.get(0))).trim());

          fetchVo.setDealNo(new StringBuilder().append("<a href=queryBehind.do?method=showQueryDataFirst&dealId=").append(CommonFunction.checkNull(header1.get(0)).toString()).append(">").append(CommonFunction.checkNull(header1.get(1)).toString()).append("</a>").toString());
          fetchVo.setCustomername(CommonFunction.checkNull(header1.get(2)).trim());
          fetchVo.setProduct(CommonFunction.checkNull(header1.get(3)).trim());
          fetchVo.setScheme(CommonFunction.checkNull(header1.get(4)).trim());
          fetchVo.setReportingToUserId(userName);
          fetchVo.setTotalRecordSize(count);
          list.add(fetchVo);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getQueryInitiationData(String dealId, String userId) {
    ArrayList list = new ArrayList();
    try {
      logger.info("In getQueryInitiationData..........................DAOImpl");
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select deal_id,DATE_FORMAT(query_date,'").append(this.dateFormatWithTime).append("'),query_remarks,if(resolution_status='P','Pending','Resolved') as resolution_status,DATE_FORMAT(resolution_datetime,'").append(this.dateFormatWithTime).append("'),resolution_remarks,u.USER_NAME,resolution_status,DEAL_QUERY_ID,").append("(select USER_NAME from sec_user_m where USER_ID=q.MAKER_ID)MAKER_ID,QUERY_TYPE,case when QUERY_TYPE='CRT' then 'CRITERIA RELATED' when QUERY_TYPE='CLA' then 'CLARIFICATION RELATED'  when QUERY_TYPE='BNK' then 'BANK RELATED'  when QUERY_TYPE='DOC' then 'DOCUMENTS RELATED'  when QUERY_TYPE='MJD' then 'MAJOR DEBTOR'  when QUERY_TYPE='MAC' then 'MAJOR CREDITOR'   end as QUERY_TYPE_DESC from deal_query_dtl q left join sec_user_m u on u.user_id=q.user_id ").append(" where deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' and q.maker_id='").append(userId).append("' ").toString());

      logger.info(new StringBuilder().append("In getQueryInitiationData...............query...........DAOImpl").append(query).toString());
      QueryProcessingVo vo = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());

      query = null;

      for (int i = 0; i < product.size(); i++)
      {
        ArrayList data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          vo = new QueryProcessingVo();
          vo.setDealId(CommonFunction.checkNull(data.get(0)).trim());
          vo.setQueryDate(CommonFunction.checkNull(data.get(1)).trim());
          vo.setQueryRemarks(CommonFunction.checkNull(data.get(2)).trim());
          vo.setResolution(CommonFunction.checkNull(data.get(3)).trim());
          vo.setResolutionDate(CommonFunction.checkNull(data.get(4)).trim());
          vo.setResolutionRemarks(CommonFunction.checkNull(data.get(5)).trim());
          vo.setUserId(CommonFunction.checkNull(data.get(6)).trim());
          vo.setResolutionStatus(CommonFunction.checkNull(data.get(7)).trim());
          vo.setDealQueryId(CommonFunction.checkNull(data.get(8)).trim());
          vo.setInitiatedBy(CommonFunction.checkNull(data.get(9)).trim());
          vo.setQueryType(CommonFunction.checkNull(data.get(10)).trim());
          vo.setQueryTypeDesc(CommonFunction.checkNull(data.get(11)).trim());
          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public String getAppraiserTypeAtCM(String loanId, String verificationId)
  {
    String flag = "";
    StringBuilder query = new StringBuilder();
    query.append(new StringBuilder().append("SELECT APPRAISER_TYPE FROM cr_deal_verification_dtl WHERE STAGE='LIM' AND LOAN_ID= '").append(loanId).append("' and VERIFICATION_ID=").append(verificationId).append("").toString());
    logger.info(new StringBuilder().append("APPRAISER_TYPE:::::::::::::::::").append(query.toString()).toString());
    try
    {
      flag = ConnectionDAO.singleReturn(query.toString());
    } catch (Exception e) {
      e.printStackTrace();
    }

    return flag;
  }

  public ArrayList<Object> fetchCollateralDetailsAllAtCM(String primaryId, String propValue)
  {
    logger.info("in fetchCollateralDetailsAll()");
    CollateralVo vo = null;

    ArrayList list = new ArrayList();
    try
    {
      logger.info(new StringBuilder().append("Value of Assets Id in dao is....................").append(primaryId).toString());
      logger.info(new StringBuilder().append("Value of Property in dao is....................").append(propValue).toString());
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("Select c.ASSET_ID, c.ASSET_TYPE, c.ASSET_NEW_OLD, c.ASSET_COLLATERAL_DESC, c.ASSET_COLLATERAL_VALUE,  c.COLLATERAL_SECURITY_MARGIN, c.FD_AMOUNT, c.FD_TENURE, c.FD_RATE,DATE_FORMAT(c.FD_BOOK_DATE,'").append(this.dateFormat).append("'), DATE_FORMAT(c.FD_MATURITY_DATE,'").append(this.dateFormat).append("'), c.FD_AGENCY_NAME, ").append(" c.FD_AGENCY_RATING, c.FD_APPLICANT, c.SBLC_AMOUNT, DATE_FORMAT(c.SBLC_VALIDITY,'").append(this.dateFormat).append("'), DATE_FORMAT(c.SBLC_ISSUING_DATE,'").append(this.dateFormat).append("'), c.SBLC_PARENT_COMPANY, ").append(" c.SECURITY_TYPE, c.SECURITY_CATEGORY, c.SECURITY_MARKET_VALUE, c.MACHINE_MAKE, c.MACHINE_MODEL, c.MACHINE_TYPE, ").append(" c.MACHINE_OWNER, DATE_FORMAT(c.MACHINE_MANUFACTURING_YEAR,'").append(this.dateFormat).append("'), c.MACHINE_IDENTIFICATION_NO, c.ASSET_SUPPLIER, c.MACHINE_COLLATERAL_COST, ").append(" c.MACHINE_MARGIN, c.PROPERTY_TYPE, c.PROPERTY_ADDRESS, c.PROPERTY_AREA, c.PROPERTY_CONSTRUCTION,c.PROPERTY_OWNER, ").append(" c.VEHICLE_MAKE, c.VEHICLE_MODEL, c.VEHICLE_TYPE, c.VEHICLE_OWNER, c.VEHICLE_MANUFACTURING_YEAR, ").append(" c.VEHICLE_REGISTRATION_NO, DATE_FORMAT(c.VEHICLE_REGISTRATION_DATE,'").append(this.dateFormat).append("'), c.VEHICLE_CHASIS_NUMBER, c.VEHICLE_Insurer, DATE_FORMAT(c.VEHICLE_INSURED_DATE,'").append(this.dateFormat).append("'), ").append(" c.VEHICLE_COLLATERAL_COST, c.VEHICLE_MARGIN, c.STOCK_TYPE, c.STOCK_NATURE, c.STOCK_GODOWN_ADDRESS, ").append(" c.STOCK_INVENTORY_CYCLE, c.DEBTOR_TYPE, c.DEBTOR_TOTAL_OUTSTANDING,c.ASSET_COLLATERAL_CLASS, c.BG_TYPE,DATE_FORMAT(c.BG_ISSUE_DATE,'").append(this.dateFormat).append("'), DATE_FORMAT(c.BG_VALIDITY_DATE,'").append(this.dateFormat).append("'), BG_ISSUING_BANK ,ds.DEALER_DESC,c.ASSET_MANUFATURER,c.ASSET_MANUFATURER_DESC,c.ASSET_SUPPLIER_DESC,DATE_FORMAT(c.INVOICE_DATE,'").append(this.dateFormat).append("'),").append("c.MACHINE_VALUE,c.MACHINE_DISCOUNT,C.VEHICLE_VALUE,C.VEHICLE_DISCOUNT ,c.LOAN_AMOUNT,c.SECURITY,c.VEHICLE_ASSET_STATE,st.STATE_DESC,c.VEHICLE_ASSET_USES_TYPE,c.DEFAULT_LTV, ").append("c.VILLAGE_NAME_LANDMARK,c.BUILT_UP_AREA,c.TXN_VALUE,c.TECH_VERIFICATION,c.DOCUMENT_VALUE,c.ADDITIONAL_CONSTRUCTION,c.ASSET_LEVEL,").append("c.ADDRESS_LINE2,c.ADDRESS_LINE3,ccm.COUNTRY_DESC,csm.STATE_DESC,cdm.DISTRICT_DESC,c.TEHSIL,c.PINCODE,c.COUNTRY,c.STATE,c.DISTRICT,c.ASSET_STANDARD,c.LAWYER_NAME,c.VALUER_NAME,c.PROPERTY_DIRECTION,c.ENGINE_NUMBER,c.PROPERTY_STATUS,c.PROPERTY_TITLE,c.CARPET_AREA,c.TECHNICAL_VAL1,c.TECHNICAL_VAL2,c.BUILDUPAREASQMTR,c.ISSUEING_BANK_ID,(SELECT BANK_NAME FROM com_bank_m where BANK_ID=c.ISSUEING_BANK_ID)BANK_NAME,c.ISSUEING_BRANCH_ID").append("  ,(SELECT BANK_BRANCH_NAME FROM com_bankbranch_m where BANK_BRANCH_ID=c.ISSUEING_BRANCH_ID)BRANCHNAME,c.SUPER_BUILDUP_AREA,c.PROPERTY_OWNER_GCD_ID,C.VALUATION_METHOD_ID,(SELECT  DESCRIPTION FROM GENERIC_MASTER WHERE GENERIC_KEY='VALUATION_METHOD' AND VALUE=C.VALUATION_METHOD_ID )AS VALUATION_DESC,C.VALUATION_AMOUNT,C.INSURANCE_POLICY_NO,C.INSURANCE_PREMIUM_AMOUNT,DATE_FORMAT(C.INSURANCE_POLICY_START_DATE,'").append(this.dateFormat).append("'),DATE_FORMAT(C.INSURANCE_MATURITY_DATE,'").append(this.dateFormat).append("'),C.INSURANCE_PREMIUM_FREQUENCY,C.INSURANCE_NOMINEE,C.INSURANCE_RELATION_WITH_NOMINEE,C.INSURANCE_TENURE,").append("C.INSURANCE_AGENCY,(select AGENCY_NAME from com_agency_m where agency_type='INS' and REC_STATUS='A' AND agency_code=C.INSURANCE_AGENCY)INSURANCE_AGENCY_NAME,C.COVER_NOTE,C.SUM_ASSURED,c.MAKE_MODEL_ID, c.LAWYER_NAME2,c.VALUER_NAME2,c.LAWYER_NAME3,c.VALUER_NAME3,C.AMOUNT_FUNDED,C.TOTAL_AMOUNT_FUNDED,C.Sibdi ").append(" from cr_asset_collateral_m c left join cr_loan_collateral_m d on c.ASSET_ID=d.ASSETID left join cr_dsa_dealer_m ds on c.ASSET_SUPPLIER=ds.DEALER_ID left join com_state_m st on c.VEHICLE_ASSET_STATE=st.STATE_ID ").append(" left join com_country_m ccm on c.COUNTRY=ccm.COUNTRY_ID left join com_state_m csm on c.STATE=csm.STATE_ID left join com_district_m cdm on c.DISTRICT=cdm.DISTRICT_ID ").append(" where c.ASSET_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(primaryId)).trim()).append(" and c.ASSET_COLLATERAL_CLASS='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(propValue)).trim()).append("' limit 1").toString());

      logger.info(new StringBuilder().append("in fetchCollateralDetailsAll()   Query  :  ").append(query).toString());
      ArrayList bdetails = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("CollateralDetailsFetchAll").append(bdetails.size()).toString());

      query = null;
      int size = bdetails.size();
      for (int i = 0; i < bdetails.size(); i++)
      {
        ArrayList bdetails1 = (ArrayList)bdetails.get(i);
        if (bdetails1.size() > 0)
        {
          vo = new CollateralVo();
          vo.setAssetsId(CommonFunction.checkNull(bdetails1.get(0)).trim());
          vo.setColltype2(CommonFunction.checkNull(bdetails1.get(1)).trim());
          vo.setAssetNature(CommonFunction.checkNull(bdetails1.get(2)).trim());
          vo.setAssetsCollateralDesc(CommonFunction.checkNull(bdetails1.get(3)).trim());

          if (!CommonFunction.checkNull(bdetails1.get(4)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(4)).trim());
            vo.setAssetsCollateralValue(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(bdetails1.get(5)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(5)).trim());
            vo.setCollateralSecurityMargin(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(bdetails1.get(6)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(6)).trim());
            vo.setFdAmount(this.myFormatter.format(reconNum));
          }

          vo.setFdTenure(CommonFunction.checkNull(bdetails1.get(7)).trim());

          if (!CommonFunction.checkNull(bdetails1.get(8)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(8)).trim());
            vo.setFdRate(this.myFormatter.format(reconNum));
          }

          vo.setFdBookDate(CommonFunction.checkNull(bdetails1.get(9)).trim());
          vo.setFdMatureDate(CommonFunction.checkNull(bdetails1.get(10)).trim());
          vo.setFdAgencyName(CommonFunction.checkNull(bdetails1.get(11)).trim());
          vo.setFdAgencyRating(CommonFunction.checkNull(bdetails1.get(12)).trim());
          vo.setFdApplicants(CommonFunction.checkNull(bdetails1.get(13)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(14)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(14)).trim());
            vo.setSblcAmount(this.myFormatter.format(reconNum));
          }

          vo.setSblcValidity(CommonFunction.checkNull(bdetails1.get(15)).trim());
          vo.setSblcIssuingDate(CommonFunction.checkNull(bdetails1.get(16)).trim());
          vo.setSblcParentCompany(CommonFunction.checkNull(bdetails1.get(17)).trim());
          vo.setSecurityType(CommonFunction.checkNull(bdetails1.get(18)).trim());
          vo.setSecurityCategory(CommonFunction.checkNull(bdetails1.get(19)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(20)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(20)).trim());
            vo.setSecurityMarketValue(this.myFormatter.format(reconNum));
          }

          vo.setMachineMake(CommonFunction.checkNull(bdetails1.get(21)).trim());
          vo.setMachineModel(CommonFunction.checkNull(bdetails1.get(22)).trim());
          vo.setMachineType(CommonFunction.checkNull(bdetails1.get(23)).trim());
          vo.setMachineOwner(CommonFunction.checkNull(bdetails1.get(24)).trim());
          vo.setMachineYearOfManufact(CommonFunction.checkNull(bdetails1.get(25)).trim());
          vo.setMachineIdNo(CommonFunction.checkNull(bdetails1.get(26)).trim());
          vo.setLbxmachineSupplier(CommonFunction.checkNull(bdetails1.get(27)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(28)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(28)).trim());
            vo.setMachineCollateralCost(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(bdetails1.get(29)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(29)).trim());
            vo.setMachineMargin(this.myFormatter.format(reconNum));
          }

          vo.setPropertyType(CommonFunction.checkNull(bdetails1.get(30)).trim());
          vo.setPropertyAddress(CommonFunction.checkNull(bdetails1.get(31)).trim());
          vo.setPropertyArea(CommonFunction.checkNull(bdetails1.get(32)).trim());
          vo.setPropertyConstruct(CommonFunction.checkNull(bdetails1.get(33)).trim());
          vo.setPropertyOwner(CommonFunction.checkNull(bdetails1.get(34)).trim());
          vo.setVehicleMake(CommonFunction.checkNull(bdetails1.get(35)).trim());
          vo.setVehicleModel(CommonFunction.checkNull(bdetails1.get(36)).trim());
          vo.setVehicleType(CommonFunction.checkNull(bdetails1.get(37)).trim());
          vo.setVehicleOwner(CommonFunction.checkNull(bdetails1.get(38)).trim());
          vo.setVehicleYearOfManufact(CommonFunction.checkNull(bdetails1.get(39)).trim());
          vo.setVehicleRegNo(CommonFunction.checkNull(bdetails1.get(40)).trim());
          vo.setVehicleRegDate(CommonFunction.checkNull(bdetails1.get(41)).trim());
          vo.setVehicleChesisNo(CommonFunction.checkNull(bdetails1.get(42)).trim());
          vo.setVehicleInsurer(CommonFunction.checkNull(bdetails1.get(43)).trim());
          vo.setVehicleInsureDate(CommonFunction.checkNull(bdetails1.get(44)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(45)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(45)).trim());
            vo.setVehicleCollateralCost(this.myFormatter.format(reconNum));
          }
          if (!CommonFunction.checkNull(bdetails1.get(46)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(46)).trim());
            vo.setVehicleMargin(this.myFormatter.format(reconNum));
          }

          vo.setStockType(CommonFunction.checkNull(bdetails1.get(47)).trim());
          vo.setStockNature(CommonFunction.checkNull(bdetails1.get(48)).trim());
          vo.setStockAddress(CommonFunction.checkNull(bdetails1.get(49)).trim());
          vo.setStockCycle(CommonFunction.checkNull(bdetails1.get(50)).trim());
          vo.setDebtorType(CommonFunction.checkNull(bdetails1.get(51)).trim());
          vo.setDebtorTotal(CommonFunction.checkNull(bdetails1.get(52)).trim());
          vo.setColltype1(CommonFunction.checkNull(bdetails1.get(53)).trim());
          vo.setBgType(CommonFunction.checkNull(bdetails1.get(54)).trim());
          vo.setBgInDate(CommonFunction.checkNull(bdetails1.get(55)).trim());
          vo.setBgValidity(CommonFunction.checkNull(bdetails1.get(56)).trim());

          vo.setBgIssuing(CommonFunction.checkNull(bdetails1.get(57)).trim());

          vo.setMachineSupplier(CommonFunction.checkNull(bdetails1.get(58)).toString());
          logger.info(new StringBuilder().append("setMachineSupplier:::::::").append(bdetails1.get(58)).toString());
          vo.setLbxmachineManufact(CommonFunction.checkNull(bdetails1.get(59)).trim());
          logger.info(new StringBuilder().append("setLbxmachineManufact:::::::").append(bdetails1.get(59)).toString());
          if (CommonFunction.checkNull(propValue).equalsIgnoreCase("vehicle"))
          {
            vo.setAssetManufact(CommonFunction.checkNull(bdetails1.get(60)).trim());
          }
          else
          {
            vo.setAssetManufactDesc(CommonFunction.checkNull(bdetails1.get(60)).trim());
          }
          logger.info(new StringBuilder().append("setAssetManufactDesc:::::::::::").append(bdetails1.get(60)).toString());
          vo.setSupplierDesc(CommonFunction.checkNull(bdetails1.get(61)).trim());
          logger.info(new StringBuilder().append("setSupplierDesc:::::::::::").append(bdetails1.get(61)).toString());
          vo.setInvoiceDate(CommonFunction.checkNull(bdetails1.get(62)).trim());
          logger.info(new StringBuilder().append("setInvoiceDate::::::::::").append(bdetails1.get(62)).toString());
          logger.info(new StringBuilder().append("vo.setMake_model_id").append(vo.getMake_model_id()).toString());
          if (!CommonFunction.checkNull(bdetails1.get(63)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(63)).trim());
            vo.setAssetsCost(this.myFormatter.format(reconNum));
          }
          else
          {
            vo.setAssetsCost("0.00");
          }

          if (!CommonFunction.checkNull(bdetails1.get(64)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(64)).trim());
            vo.setAssetsDiscount(this.myFormatter.format(reconNum));
          }
          else
          {
            vo.setAssetsDiscount("0.00");
          }

          if (!CommonFunction.checkNull(bdetails1.get(65)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(65)).trim());
            vo.setVehicleCost(this.myFormatter.format(reconNum));
          }
          else
          {
            vo.setVehicleCost("0.00");
          }

          if (!CommonFunction.checkNull(bdetails1.get(66)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(66)).trim());
            vo.setVehicleDiscount(this.myFormatter.format(reconNum));
          }
          else
          {
            vo.setVehicleDiscount("0.00");
          }
          if (!CommonFunction.checkNull(bdetails1.get(67)).equalsIgnoreCase(""))
          {
            Number reconNum1 = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(67)).trim());
            vo.setLoanAmount(this.myFormatter.format(reconNum1));
          }
          else
          {
            vo.setLoanAmount("0.00");
          }
          vo.setSecurityTypes(CommonFunction.checkNull(bdetails1.get(68)).trim());

          vo.setTxtStateCode(CommonFunction.checkNull(bdetails1.get(69)).trim());
          vo.setAssetState(CommonFunction.checkNull(bdetails1.get(70)).trim());

          vo.setUsageType(CommonFunction.checkNull(bdetails1.get(71)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(72)).equalsIgnoreCase(""))
          {
            Number reconNum1 = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(72)).trim());
            vo.setCollateralSecurityMarginDF(this.myFormatter.format(reconNum1));
          }

          vo.setVillageLandmark(CommonFunction.checkNull(bdetails1.get(73)).trim());
          vo.setBuildUpArea(CommonFunction.checkNull(bdetails1.get(74)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(75)).trim().equalsIgnoreCase(""))
          {
            Number num = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(75)).trim());
            vo.setTxnValue(this.myFormatter.format(num));
          }
          if (!CommonFunction.checkNull(bdetails1.get(76)).trim().equalsIgnoreCase(""))
          {
            Number num = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(76)).trim());
            vo.setTechValuation(this.myFormatter.format(num));
          }
          if (!CommonFunction.checkNull(bdetails1.get(77)).trim().equalsIgnoreCase(""))
          {
            Number num = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(77)).trim());
            vo.setDocValue(this.myFormatter.format(num));
          }
          if (!CommonFunction.checkNull(bdetails1.get(78)).trim().equalsIgnoreCase(""))
          {
            Number num = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(78)).trim());
            vo.setAddConstruction(this.myFormatter.format(num));
          }
          vo.setAssetLevel(CommonFunction.checkNull(bdetails1.get(79)).trim());
          vo.setAddr2(CommonFunction.checkNull(bdetails1.get(80)).trim());
          vo.setAddr3(CommonFunction.checkNull(bdetails1.get(81)).trim());
          vo.setCountry(CommonFunction.checkNull(bdetails1.get(82)).trim());
          vo.setState(CommonFunction.checkNull(bdetails1.get(83)).trim());
          vo.setDist(CommonFunction.checkNull(bdetails1.get(84)).trim());
          vo.setTahsil(CommonFunction.checkNull(bdetails1.get(85)).trim());
          vo.setPincode(CommonFunction.checkNull(bdetails1.get(86)).trim());
          vo.setTxtCountryCode(CommonFunction.checkNull(bdetails1.get(87)).trim());
          vo.setTxtStateCode(CommonFunction.checkNull(bdetails1.get(88)).trim());
          vo.setTxtDistCode(CommonFunction.checkNull(bdetails1.get(89)).trim());
          vo.setAssetStandard(CommonFunction.checkNull(bdetails1.get(90)).trim());
          vo.setLawyerName(CommonFunction.checkNull(bdetails1.get(91)).trim());
          vo.setValuerName(CommonFunction.checkNull(bdetails1.get(92)).trim());
          vo.setPropertyDirection(CommonFunction.checkNull(bdetails1.get(93)).trim());
          vo.setEngineNumber(CommonFunction.checkNull(bdetails1.get(94)).trim());
          vo.setPropertyStatus(CommonFunction.checkNull(bdetails1.get(95)).trim());
          vo.setPropertyTitle(CommonFunction.checkNull(bdetails1.get(96)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(97)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(97)).trim());
            vo.setCarpetArea(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(bdetails1.get(98)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(98)).trim());
            vo.setTechnicalValuation1(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(bdetails1.get(99)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(99)).trim());
            vo.setTechnicalValuation2(this.myFormatter.format(reconNum));
          }

          if (!CommonFunction.checkNull(bdetails1.get(100)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(100)).trim());
            vo.setBuildUpAreaSQMTR(this.myFormatter.format(reconNum));
          }

          vo.setLbxBankID(CommonFunction.checkNull(bdetails1.get(101)).trim());
          vo.setBank(CommonFunction.checkNull(bdetails1.get(102)).trim());
          vo.setLbxBranchID(CommonFunction.checkNull(bdetails1.get(103)).trim());
          vo.setBranch(CommonFunction.checkNull(bdetails1.get(104)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(105)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(105)).trim());
            vo.setSuperBuildUpArea(this.myFormatter.format(reconNum));
          }
          vo.setPropertyOwnerGcdId(CommonFunction.checkNull(bdetails1.get(106)).trim());
          vo.setValuationMethodId(CommonFunction.checkNull(bdetails1.get(107)).trim());
          vo.setValuationMethod(CommonFunction.checkNull(bdetails1.get(108)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(109)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(109)).trim());
            vo.setValuationAmount(this.myFormatter.format(reconNum));
          }
          vo.setPolicyNo(CommonFunction.checkNull(bdetails1.get(110)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(111)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(111)).trim());
            vo.setPremiumAmount(this.myFormatter.format(reconNum));
          }
          vo.setPolicyStartDate(CommonFunction.checkNull(bdetails1.get(112)).trim());
          vo.setInsMatureDate(CommonFunction.checkNull(bdetails1.get(113)).trim());
          vo.setPremiumFrequency(CommonFunction.checkNull(bdetails1.get(114)).trim());
          vo.setNominee(CommonFunction.checkNull(bdetails1.get(115)).trim());
          vo.setRelWithNominee(CommonFunction.checkNull(bdetails1.get(116)).trim());

          vo.setTenureYear(CommonFunction.checkNull(bdetails1.get(117)).trim());

          vo.setLbxInsuranceAgency(CommonFunction.checkNull(bdetails1.get(118)).trim());
          vo.setInsuranceAgency(CommonFunction.checkNull(bdetails1.get(119)).trim());
          vo.setCoverNoteNo(CommonFunction.checkNull(bdetails1.get(120)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(121)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(121)).trim());
            vo.setSumAssured(this.myFormatter.format(reconNum));
          }
          vo.setMake_model_id(CommonFunction.checkNull(bdetails1.get(122)).trim());
          vo.setLawyerName2(CommonFunction.checkNull(bdetails1.get(123)).trim());
          vo.setValuerName2(CommonFunction.checkNull(bdetails1.get(124)).trim());
          vo.setLawyerName3(CommonFunction.checkNull(bdetails1.get(125)).trim());
          vo.setValuerName3(CommonFunction.checkNull(bdetails1.get(126)).trim());
          vo.setAmountFunded(CommonFunction.checkNull(bdetails1.get(127)).trim());
          vo.setTotalAmountFunded(CommonFunction.checkNull(bdetails1.get(128)).trim());
          if (!CommonFunction.checkNull(bdetails1.get(129)).equalsIgnoreCase(""))
          {
            Number reconNum = this.myFormatter.parse(CommonFunction.checkNull(bdetails1.get(129)).trim());
            vo.setSibdi(this.myFormatter.format(reconNum));
        }
        }

        list.add(vo);
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public ArrayList getLoginUserLevel(String userId, String userName)
  {
    ArrayList list = new ArrayList();
    boolean status = false;
    String roleName = "";
    CreditProcessingLeadEntryVo cpLeadEntryVO = new CreditProcessingLeadEntryVo();
    try {
      logger.info(new StringBuilder().append("In getLoginUserLevel..................userId........").append(userId).toString());

      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select * from sec_user_level_dtl where USER_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(userId)).trim()).append("' AND LEVEL_ID='RM' ").toString());

      logger.info(new StringBuilder().append("In getLoginUserLevel...............query.....................").append(query).toString());

      status = ConnectionDAO.checkStatus(query.toString());
      if (!status) {
        StringBuilder query1 = new StringBuilder();
        query1.append(new StringBuilder().append("select * from sec_user_level_dtl where USER_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(userId)).trim()).append("' AND LEVEL_ID='RO' ").toString());

        logger.info(new StringBuilder().append("In getLoginUserLevel...............query.....................").append(query1).toString());

        boolean status1 = ConnectionDAO.checkStatus(query1.toString());
        if (status1) {
          StringBuilder query2 = new StringBuilder();
          cpLeadEntryVO = new CreditProcessingLeadEntryVo();
          query2.append("SELECT DISTINCT V.USER_NAME,V.USER_ID FROM SEC_USER_M V WHERE V.USER_ID=(SELECT DISTINCT U.USER_REPORTING_TO FROM SEC_USER_M U ");

          query2.append(new StringBuilder().append(" inner join sec_user_level_dtl D on D.USER_ID=U.USER_REPORTING_TO AND U.REC_STATUS='A' AND U.USER_ID='").append(userId).append("' AND D.LEVEL_ID='RM')").toString());

          logger.info(new StringBuilder().append("query2...............").append(query2.toString()).toString());
          ArrayList relationshipManager = ConnectionDAO.sqlSelect(query2.toString());

          for (int i = 0; i < relationshipManager.size(); i++) {
            ArrayList data = (ArrayList)relationshipManager.get(i);
            if (data.size() > 0) {
              cpLeadEntryVO.setRelationshipManager(CommonFunction.checkNull(data.get(0)).trim());

              cpLeadEntryVO.setLbxRelationship(CommonFunction.checkNull(data.get(1)).trim());
            }
          }

          cpLeadEntryVO.setLbxUserSearchId(CommonFunction.checkNull(userId));

          cpLeadEntryVO.setGeneratedUser(CommonFunction.checkNull(userName));
        }
      }
      else {
        cpLeadEntryVO.setLbxRelationship(CommonFunction.checkNull(userId));

        cpLeadEntryVO.setRelationshipManager(CommonFunction.checkNull(userName));
      }

      list.add(cpLeadEntryVO);
      query = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getRelationshipManager(String relationManager, String relationOfficer)
  {
    ArrayList list = new ArrayList();
    String lbxRelationManager = null;
    String roleName = "";
    CreditProcessingLeadEntryVo cpLeadEntryVO = new CreditProcessingLeadEntryVo();
    try {
      logger.info(new StringBuilder().append("In getcheckRelationshipManage..................userId........").append(relationManager).toString());

      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select D.USER_ID FROM sec_user_level_dtl D where D.LEVEL_ID='RM' and D.USER_ID=(SELECT USER_ID FROM sec_user_m M WHERE M.USER_ID=(SELECT USER_REPORTING_TO FROM sec_user_m M WHERE M.USER_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(relationOfficer)).trim()).append("'))").toString());

      logger.info(new StringBuilder().append("In getcheckRelationshipManage...............query.....................").append(query).toString());

      lbxRelationManager = ConnectionDAO.singleReturn(query.toString());
      if ((!CommonFunction.checkNull(lbxRelationManager).equalsIgnoreCase("")) && (!CommonFunction.checkNull(lbxRelationManager).equalsIgnoreCase(null)))
      {
        cpLeadEntryVO.setLbxRelationship(CommonFunction.checkNull(lbxRelationManager));

        cpLeadEntryVO.setRelationshipManager(CommonFunction.checkNull(relationManager));
      }

      list.add(cpLeadEntryVO);
      query = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList<Object> getInstallmentTypeList()
  {
    ArrayList list = new ArrayList();
    try {
      StringBuffer query = new StringBuffer();
      query.append("SELECT VALUE,DESCRIPTION FROM generic_master  where GENERIC_KEY='INSTALLMENT_TYPE' and REC_STATUS='A'");

      logger.info(new StringBuilder().append("In creditProcessingDaoI getInstallmentTypeList").append(query).toString());

      ArrayList collateralsAll = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      for (int i = 0; i < collateralsAll.size(); i++) {
        ArrayList sublist = (ArrayList)collateralsAll.get(i);
        if (sublist.size() > 0) {
          CodeDescVo av = new CodeDescVo();
          av.setId(CommonFunction.checkNull(sublist.get(0)).trim());
          av.setName(CommonFunction.checkNull(sublist.get(1)).trim());
          list.add(av);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList<DisbursalSearchVO> searchDealMovement(DisbursalSearchVO vo)
  {
	    StringBuilder dealNo = new StringBuilder();
	    StringBuilder customerName = new StringBuilder();

	    ArrayList detailListGrid = new ArrayList();
	    try {
	      ArrayList searchlist = new ArrayList();
	      logger.info("In searchDealMovement..........asesh..........");
	      boolean appendSQL = false;
	      StringBuffer bufInsSql = new StringBuffer();

	      dealNo.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxDealNo()).trim()));
	      logger.info(new StringBuilder().append("In searchDealMovement......dealNo-  ").append(dealNo).toString());
	      customerName.append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getCustomerName()).trim()));

	      bufInsSql.append(new StringBuilder().append(" select A.DEAL_ID,A.DEAL_NO,C.CUSTOMER_NAME,B.DEAL_PRODUCT,P.product_desc,B.DEAL_SCHEME, S.scheme_desc,case A.REC_STATUS when 'A' then 'APPROVED '  when 'X' then if((select count(1) from cr_deal_movement_dtl where REC_STATUS='A' and deal_id=A.DEAL_ID)>0,'REJECTED ','CANCELLED ')when'P' then 'PENDING 'when 'F' then IF((SELECT COUNT(1) FROM CR_LEAD_DTL L JOIN CR_DEAL_DTL D ON D.LEAD_ID=L.LEAD_ID WHERE D.DEAL_ID=A.DEAL_ID AND L.REC_STATUS='X' )>0,'Rejected from SINGLE PAGE BUREAU','FORWARDED') end as deal_status,br.BRANCH_DESC,su.USER_NAME as maker,author.author_name,max(cda.APPROVAL_DATE)    from cr_deal_dtl A  left outer join cr_deal_loan_dtl B on(A.DEAL_ID = B.DEAL_ID) left outer join cr_deal_customer_m C  on(A.DEAL_CUSTOMER_ID =C.CUSTOMER_ID) left outer join cr_product_m P on(P.product_id = B.DEAL_PRODUCT) left outer join cr_scheme_m S on(S.scheme_id = B.DEAL_SCHEME) left outer join com_branch_m br on(br.BRANCH_ID=a.DEAL_BRANCH)left outer join sec_user_m su on (su.USER_ID=a.MAKER_ID)left outer join (select da.deal_id,u.user_name as author_name from cr_deal_approval_dtl da join sec_user_m u on (u.USER_ID=da.approval_by)) author on(author.deal_id=a.deal_id)  left outer join cr_deal_approval_dtl cda on (cda.DEAL_ID=a.DEAL_ID) WHERE A.DEAL_ID=").append(dealNo).append(" ").toString());

	      logger.info(new StringBuilder().append("query ::::::::::::::::::::::::::::::: ").append(bufInsSql).toString());
	      searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());

	      logger.info(new StringBuilder().append("IN searchDealMovement() search query1 ### ").append(bufInsSql.toString()).toString());
	      logger.info(new StringBuilder().append("searchDealMovement ").append(searchlist.size()).toString());

	      logger.info(new StringBuilder().append("searchDealMovement SIZE---").append(searchlist.size()).toString());
	      logger.info(new StringBuilder().append("searchDealMovement    ........").append(bufInsSql.toString()).toString());

	      bufInsSql = null;
	      for (int i = 0; i < searchlist.size(); i++) {
	        logger.info(new StringBuilder().append("searchDealMovement search List ").append(searchlist.get(i).toString()).toString());
	        ArrayList data = (ArrayList)searchlist.get(i);
	        logger.info("dealMovementDispatchAction.do ----------------------------------------------------------");
	        if (data.size() > 0) {
	          DisbursalSearchVO disVO = new DisbursalSearchVO();
	          disVO.setDealNo(new StringBuilder().append("<a href=dealMovementDispatchAction.do?method=trackDealStages&dealId=").append(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(data.get(0)))).append(">").append(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(data.get(1)))).append("</a>").toString());
	          disVO.setLbxDealNo(CommonFunction.checkNull(data.get(0)).trim());
	          logger.info(new StringBuilder().append("setCustomerName:-------------").append(data.get(2)).toString());
	          disVO.setCustomerName(CommonFunction.checkNull(data.get(2)).trim());
	          disVO.setLbxProductID(CommonFunction.checkNull(data.get(3)).trim());
	          disVO.setProduct(CommonFunction.checkNull(data.get(4)).trim());
	          logger.info(new StringBuilder().append("setProduct:-------------").append(data.get(4)).toString());
	          disVO.setLbxscheme(CommonFunction.checkNull(data.get(5)).trim());
	          disVO.setScheme(CommonFunction.checkNull(data.get(6)).trim());
	          disVO.setCurrentStatus(CommonFunction.checkNull(data.get(7)).trim());

	          disVO.setDealBranch(CommonFunction.checkNull(data.get(8)).trim());
	          disVO.setMaker(CommonFunction.checkNull(data.get(9)).trim());
	          disVO.setAuthor(CommonFunction.checkNull(data.get(10)).trim());

	          detailListGrid.add(disVO);
	        }
	      }
	    }
	    catch (Exception e)
	    {
	      e.printStackTrace();
	    }
	    finally
	    {
	      dealNo = null;
	      customerName = null;
	    }
	    return detailListGrid;
	  }

  public ArrayList<Object> getOtherRelationList()
  {
    ArrayList mainList = new ArrayList();
    try
    {
      String query = "select VALUE,DESCRIPTION FROM generic_master  WHERE GENERIC_KEY='BUYER_OTHER_TYPE'  AND REC_STATUS='A'";
      logger.info(new StringBuilder().append("In getOtherRelationList query for the BUYER_SUPPLIER_OTHER_TYPE *****").append(query).toString());
      ArrayList list = ConnectionDAO.sqlSelect(query);
      query = null;
      int size = list.size();
      logger.info(new StringBuilder().append("size of tyhe list********").append(size).toString());

      for (int i = 0; i < size; i++) {
        ArrayList data = (ArrayList)list.get(i);
        if (data.size() > 0) {
          CustomerSaveVo relatVO = new CustomerSaveVo();
          relatVO.setRelationCode(CommonFunction.checkNull(data.get(0)));
          relatVO.setRelationshipS(CommonFunction.checkNull(data.get(1)));
          mainList.add(relatVO);
          relatVO = null;
        }
        data.clear();
        data = null;
      }
      list.clear();
      list = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return mainList;
  }

  public boolean saveOtherRelation(BuyerSupplierOtherVo vo)
  {
    boolean status = false;
    logger.info("In saveOtherRelation: ");
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    try
    {
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append("insert into cr_deal_other_relation_dtl(DEAL_ID,OTHER_NAME, OTHER_RELATION, OTHER_MOBILE_NO, LAND_LINE_NO, KNOWING_SINCE, OTHER_ADDRESS,REC_STATUS,MAKER_ID,MAKER_DATE)");
      bufInsSql.append(" values ( ");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) ").toString());
      bufInsSql.append(" )");

      if (CommonFunction.checkNull(vo.getDealId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getDealId().trim());
      }

      if (CommonFunction.checkNull(vo.getOtherName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getOtherName().trim());
      }

      if (CommonFunction.checkNull(vo.getRelationships()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getRelationships().trim());
      }

      if (CommonFunction.checkNull(vo.getPrimaryOtherMbNo()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPrimaryOtherMbNo().trim());
      }
      if (CommonFunction.checkNull(vo.getAlternateOtherPhNo()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAlternateOtherPhNo().trim());
      }
      if (CommonFunction.checkNull(vo.getKnowingSince()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getKnowingSince().trim());
      }

      if (CommonFunction.checkNull(vo.getAddRef()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAddRef().trim());
      }
      insertPrepStmtObject.addString("P");

      if (CommonFunction.checkNull(vo.getMakerId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getMakerId().trim());
      if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getMakerDate()).trim());
      }

      insertPrepStmtObject.setSql(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN saveOtherRelation() of  insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In saveOtherRelation......................").append(status).toString());
    }
    catch (Exception e)
    {
      logger.info(new StringBuilder().append("Execption: ").append(e).toString());
    }

    return status;
  }

  public ArrayList getOtherDetail(String otherUniqueId)
  {
    logger.info(new StringBuilder().append("In getOtherDetail(String otherUniqueId) ..").append(otherUniqueId).toString());
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append("select R.OTHER_ID,R.DEAL_ID,R.OTHER_NAME, R.OTHER_RELATION, R.OTHER_MOBILE_NO, R.LAND_LINE_NO, R.KNOWING_SINCE, R.OTHER_ADDRESS FROM cr_deal_other_relation_dtl R ");

      query.append(new StringBuilder().append("WHERE  OTHER_ID='").append(otherUniqueId).append("' ").toString());
      logger.info(new StringBuilder().append("getIndReferenceDetail query................. ").append(query.toString()).toString());
      ArrayList otherDetail = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      int size = otherDetail.size();
      logger.info(new StringBuilder().append("In getOtherDetail(String otherUniqueId) list size... ").append(size).toString());
      for (int i = 0; i < size; i++)
      {
        ArrayList data = (ArrayList)otherDetail.get(i);
        if (data.size() > 0)
        {
          BuyerSupplierOtherVo otherVo = new BuyerSupplierOtherVo();
          otherVo.setOtherUniqueId(CommonFunction.checkNull(data.get(0)));
          otherVo.setDealId(CommonFunction.checkNull(data.get(1)));
          otherVo.setOtherName(CommonFunction.checkNull(data.get(2)));
          otherVo.setRelationships(CommonFunction.checkNull(data.get(3)));
          otherVo.setPrimaryOtherMbNo(CommonFunction.checkNull(data.get(4)));
          otherVo.setAlternateOtherPhNo(CommonFunction.checkNull(data.get(5)));
          otherVo.setKnowingSince(CommonFunction.checkNull(data.get(6)));
          otherVo.setAddRef(CommonFunction.checkNull(data.get(7)));
          list.add(otherVo);
          otherVo = null;
        }
        data.clear();
        data = null;
      }

      otherDetail.clear();
      otherDetail = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getOtherGridList(String dealId)
  {
    logger.info(new StringBuilder().append("In getOtherGridList(String dealId) ..").append(dealId).toString());
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append("select R.OTHER_ID,R.DEAL_ID,R.OTHER_NAME, G.DESCRIPTION, R.OTHER_MOBILE_NO, R.LAND_LINE_NO, R.KNOWING_SINCE, R.OTHER_ADDRESS FROM cr_deal_other_relation_dtl R ");
      query.append("INNER JOIN generic_master G ON GENERIC_KEY='BUYER_OTHER_TYPE' AND G.VALUE=R.OTHER_RELATION ");
      query.append(new StringBuilder().append("WHERE  DEAL_ID='").append(dealId).append("' ").toString());
      logger.info(new StringBuilder().append("getIndReferenceDetail query................. ").append(query.toString()).toString());
      ArrayList otherDetail = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      int size = otherDetail.size();
      logger.info(new StringBuilder().append("In getOtherDetail(String otherUniqueId) list size... ").append(size).toString());
      for (int i = 0; i < size; i++)
      {
        ArrayList data = (ArrayList)otherDetail.get(i);
        if (data.size() > 0)
        {
          BuyerSupplierOtherVo otherVo = new BuyerSupplierOtherVo();
          otherVo.setOtherUniqueId(CommonFunction.checkNull(data.get(0)));
          otherVo.setDealId(CommonFunction.checkNull(data.get(1)));
          otherVo.setOtherName(CommonFunction.checkNull(data.get(2)));
          otherVo.setRelationships(CommonFunction.checkNull(data.get(3)));
          otherVo.setPrimaryOtherMbNo(CommonFunction.checkNull(data.get(4)));
          otherVo.setAlternateOtherPhNo(CommonFunction.checkNull(data.get(5)));
          otherVo.setKnowingSince(CommonFunction.checkNull(data.get(6)));
          otherVo.setAddRef(CommonFunction.checkNull(data.get(7)));
          list.add(otherVo);
          otherVo = null;
        }
        data.clear();
        data = null;
      }

      otherDetail.clear();
      otherDetail = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public boolean updateOtherRelation(BuyerSupplierOtherVo vo)
  {
    logger.info("In updateOtherRelation");
    boolean status = false;
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    try
    {
      StringBuilder queryUpdate = new StringBuilder();
      queryUpdate.append(new StringBuilder().append("update cr_deal_other_relation_dtl set OTHER_NAME=?, OTHER_RELATION=?, OTHER_MOBILE_NO=?, LAND_LINE_NO=?, KNOWING_SINCE=?, OTHER_ADDRESS=?,REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) where  DEAL_ID=? and OTHER_ID=?").toString());

      if (CommonFunction.checkNull(vo.getOtherName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getOtherName().trim());
      }

      if (CommonFunction.checkNull(vo.getRelationships()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getRelationships().trim());
      }

      if (CommonFunction.checkNull(vo.getPrimaryOtherMbNo()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getPrimaryOtherMbNo().trim());
      }
      if (CommonFunction.checkNull(vo.getAlternateOtherPhNo()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAlternateOtherPhNo().trim());
      }
      if (CommonFunction.checkNull(vo.getKnowingSince()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getKnowingSince().trim());
      }

      if (CommonFunction.checkNull(vo.getAddRef()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getAddRef().trim());
      }
      insertPrepStmtObject.addString("P");

      if (CommonFunction.checkNull(vo.getMakerId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getMakerId().trim());
      if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getMakerDate()).trim());
      }
      if (CommonFunction.checkNull(vo.getDealId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getDealId().trim());
      }
      if (CommonFunction.checkNull(vo.getOtherUniqueId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(CommonFunction.checkNull(vo.getOtherUniqueId()).trim());
      }
      insertPrepStmtObject.setSql(queryUpdate.toString());
      logger.info(new StringBuilder().append("IN updateOtherRelation() update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In updateOtherRelation......................").append(status).toString());
    }
    catch (Exception e)
    {
      logger.info(new StringBuilder().append("In updateOtherRelation exception ").append(e).toString());
    }

    return status;
  }

  public boolean deleteOtherDetail(String[] otherUniqueId)
  {
    logger.info("In deleteOtherDetail(String[] otherUniqueId)");
    boolean status = false;
    try
    {
      ArrayList qryList = new ArrayList();
      for (int k = 0; k < otherUniqueId.length; k++)
      {
        String query2 = "delete from cr_deal_other_relation_dtl where OTHER_ID=?";
        PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
        if (CommonFunction.checkNull(otherUniqueId[k]).trim().equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(CommonFunction.checkNull(otherUniqueId[k]).trim());
        }
        insertPrepStmtObject.setSql(query2.toString());
        query2 = null;
        logger.info(new StringBuilder().append("deleteroleList() OF CorpotateDAOImpl query   :   ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        insertPrepStmtObject = null;
      }

      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      qryList.clear();
      qryList = null;
      logger.info(new StringBuilder().append("Status of Updation is   ::  ").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return status;
  }

  public boolean updateConfirmDeal(String dealId)
  {
    logger.info(new StringBuilder().append("In updateConfirmDeal.......Update mode ").append(dealId).toString());
    this.qryList = new ArrayList();
    StringBuilder query1 = new StringBuilder();

    query1.append(new StringBuilder().append("update cr_deal_dtl set QUALITY_CHECK_DC_CONFIRM='Y' WHERE DEAL_ID='").append(dealId).append("' ").toString());

    this.qryList.add(query1);

    boolean status = false;
    try
    {
      status = ConnectionDAO.sqlInsUpdDelete(this.qryList);
      logger.info(new StringBuilder().append("In updateConfirmDeal......................status= ").append(status).toString());
    } catch (SQLException e) {
      e.printStackTrace();
    }
    finally
    {
      query1 = null;
    }

    return status;
  }

  public ArrayList<Object> getCreditcommitteeList()
  {
    logger.info("In getCreditcommitteeList() of CreditProcessingDAOImpl ");
    ArrayList creditcommitteeList = new ArrayList();
    TermSheetVo vo = null;
    ArrayList formatlist = new ArrayList();
    ArrayList data = null;
    String query = null;
    try
    {
      query = "SELECT VALUE,DESCRIPTION FROM generic_master WHERE GENERIC_KEY='CREDIT_COMMITTEE' AND REC_STATUS='A'";
      logger.info(new StringBuilder().append("In getCreditcommitteeList() of CreditProcessingDAOImpl   query      :   ").append(query).toString());
      formatlist = ConnectionDAO.sqlSelect(query.toString());
      for (int i = 0; i < formatlist.size(); i++)
      {
        data = (ArrayList)formatlist.get(i);
        vo = new TermSheetVo();
        vo.setValue(CommonFunction.checkNull(data.get(0)).trim());
        vo.setDescription(CommonFunction.checkNull(data.get(1)).trim());
        creditcommitteeList.add(vo);
        data.clear();
        data = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return creditcommitteeList;
  }

  public String getDealId(String loanId)
  {
    String deaId = "";
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select LOAN_DEAL_ID from cr_loan_dtl where LOAN_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId))).append("'").toString());
      logger.info(new StringBuilder().append("getBaseRate").append(query).toString());
      deaId = ConnectionDAO.singleReturn(query.toString());
      logger.info(new StringBuilder().append("getBaseRate").append(deaId).toString());

      query = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return deaId;
  }

  public String checkAssetVerifInitAtCM(String[] id, String loanId)
  {
    logger.info(new StringBuilder().append("checkAssetVerifInitAtCM for checkAssetVerifInit....assetid..").append(id).append(" loanId ").append(loanId).toString());
    String status = "";
    try
    {
      for (int k = 0; k < id.length; k++)
      {
        String checkVerifInitQuery = new StringBuilder().append("SELECT A.ASSET_COLLATERAL_DESC FROM cr_asset_collateral_m A  INNER JOIN cr_deal_verification_dtl  V ON V.LOAN_ID='").append(loanId).append("' AND V.ENTITY_TYPE=A.ASSET_COLLATERAL_CLASS AND V.ENTITY_SUB_TYPE=A.ASSET_TYPE AND A.ASSET_ID=V.ENTITY_ID").append(" WHERE A.ASSET_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id[k])).trim()).append("' ").toString();

        logger.info(new StringBuilder().append("checkVerifInitQuery: ").append(checkVerifInitQuery).toString());
        status = ConnectionDAO.singleReturn(checkVerifInitQuery);
        logger.info(new StringBuilder().append("A.ASSET_COLLATERAL_DESC ").append(status).toString());
        if (!CommonFunction.checkNull(status).equalsIgnoreCase(""))
        {
          return status;
        }

      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return status;
  }

  public ArrayList<Object> getMortageList()
  {
    ArrayList list = new ArrayList();
    try {
      StringBuffer query = new StringBuffer();
      query.append("SELECT VALUE,DESCRIPTION FROM generic_master  where GENERIC_KEY='MORTAGE_TYPE' and REC_STATUS='A'");

      logger.info(new StringBuilder().append("In creditProcessingDaoI getMortageList").append(query.toString()).toString());

      ArrayList mortage = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      for (int i = 0; i < mortage.size(); i++) {
        ArrayList sublist = (ArrayList)mortage.get(i);
        if (sublist.size() > 0) {
          CodeDescVo av = new CodeDescVo();
          av.setId(CommonFunction.checkNull(sublist.get(0)).trim());

          av.setName(CommonFunction.checkNull(sublist.get(1)).trim());

          list.add(av);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public String getDealIdforTerm(String loanId)
  {
    String dealId = "";
    logger.info("In getDealIdforTerm  --->>");
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select LOAN_DEAL_ID from cr_loan_dtl where LOAN_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId))).append("'").toString());
      logger.info(new StringBuilder().append("getDealIdforTerm  --->>").append(query).toString());
      dealId = ConnectionDAO.singleReturn(query.toString());
      logger.info(new StringBuilder().append("getDealIdforTerm   --->>>").append(dealId).toString());

      query = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return dealId;
  }

  public String callProcUnderWriterSerachData(Object ob)
  {
    logger.info("In callProcUnderWriterSerachData");
    CommonDealVo vo = null;
    String statusProc = null;
    boolean status = false;
    ArrayList in = new ArrayList();
    ArrayList out = new ArrayList();
    ArrayList outMessages = new ArrayList();
    try
    {
      vo = (CommonDealVo)ob;
      logger.info(new StringBuilder().append("In callProcUnderWriterSerachData......DealId:  ").append(vo.getLbxDealNo()).append("UserId:  ").append(vo.getReportingToUserId()).toString());
      statusProc = "";
      try
      {
        String s1 = "";
      String  s2 = "";
        if (CommonFunction.checkNull(vo.getLbxDealNo()).equalsIgnoreCase(""))
        {
          in.add("0");
        }
        else
        {
          in.add(vo.getLbxDealNo());
        }

        in.add(vo.getUserId());
        in.add(vo.getReportingToUserId());

        String date = CommonFunction.changeFormat(vo.getBusinessdate());
        in.add(date);
        out.add(s1);
        out.add(s2);

        logger.info(new StringBuilder().append("callProcUnderWriterSerachData UNDERWRITER_SEARCH_DATA (").append(in.toString()).append(",").append(out.toString()).append(")").toString());
        outMessages = (ArrayList)ConnectionDAO.callSP("UNDERWRITER_SEARCH_DATA", in, out);
        s1 = CommonFunction.checkNull(outMessages.get(0));
        s2 = CommonFunction.checkNull(outMessages.get(1));
        logger.info(new StringBuilder().append("s1  : ").append(s1).toString());
        logger.info(new StringBuilder().append("s2  : ").append(s2).toString());
        if (s1.equalsIgnoreCase("S"))
        {
          statusProc = s1;
          status = true;
          logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
        }
        else
        {
          statusProc = s2;
          logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
        }
      }
      catch (Exception e) {
        e.printStackTrace();
      }return statusProc;
    }
    catch (Exception e)
    {
      String s2;
      e.printStackTrace();
      return null;
    }
    finally
    {
      vo = null;
      statusProc = null;
      in.clear();
      in = null;
      out.clear();
      out = null;
      outMessages.clear();
      outMessages = null;
    }
  }

  public boolean startDealNumberGenerator(String dealId)
  {
    logger.info("In startDealNumberGenerator  --->>");
    try {
      String generator = new StringBuilder().append(" select DEAL_NUMBER_GENERATOR(").append(CommonFunction.checkNull(dealId)).append(")").toString();
      ConnectionDAO.singleReturn(generator);
      logger.info(new StringBuilder().append("startDealNumberGenerator  --->>").append(generator).toString());
      generator = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return false;
  }

  public String callProcUnderWriterUsersQueue(String dealId, String userId, String bDate, String branchId)
  {
    logger.info(new StringBuilder().append("In callProcUnderWriterUsersQueue......DealId:  ").append(dealId).append("UserId:  ").append(userId).toString());
    String statusProc = null;
    boolean status = false;
    try
    {
      ArrayList in = new ArrayList();
      ArrayList out = new ArrayList();
      ArrayList outMessages = new ArrayList();
      String s1 = null;
      String s2 = null;
      if (CommonFunction.checkNull(dealId).equalsIgnoreCase(""))
      {
        in.add("0");
      }
      else
      {
        in.add(dealId);
      }

      in.add(userId);
      String date = CommonFunction.changeFormat(bDate);
      in.add(date);
      out.add(s1);
      out.add(s2);

      logger.info(new StringBuilder().append("callProcUnderWriterUsersQueue UNDERWRITER_USERS_QUEUE (").append(in.toString()).append(",").append(out.toString()).append(")").toString());
      outMessages = (ArrayList)ConnectionDAO.callSP("UNDERWRITER_USERS_QUEUE", in, out);
      s1 = CommonFunction.checkNull(outMessages.get(0));
      s2 = CommonFunction.checkNull(outMessages.get(1));
      in.clear();
      in = null;
      out.clear();
      out = null;
      outMessages.clear();
      outMessages = null;
      if (s1.equalsIgnoreCase("S"))
      {
        statusProc = s1;
        status = true;
        logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
      }
      else
      {
        statusProc = s2;
        logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
      }
      s1 = null;
      s2 = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }return statusProc;
  }

  public int getLimitOfDocumentUpload()
  {
    logger.info("In getLimitOfDocumentUpload()..........................DAOImpl");
    StringBuilder noOfDocument = new StringBuilder();
    int limitOfUploadDocument = 0;
    noOfDocument.append("select PARAMETER_VALUE from PARAMETER_MST  where PARAMETER_KEY='NUMBER_OF_DOCUMENT_UPLOAD'");
    logger.info(new StringBuilder().append("query::::::::  ").append(noOfDocument.toString()).toString());
    String uploadDocument = ConnectionDAO.singleReturn(noOfDocument.toString());
    if (!CommonFunction.checkNull(uploadDocument).equalsIgnoreCase(""))
    {
      limitOfUploadDocument = Integer.parseInt(uploadDocument);
    }
    else
    {
      limitOfUploadDocument = 0;
    }
    noOfDocument = null;
    return limitOfUploadDocument;
  }

  public ArrayList<UnderwriterApprovalVo> getApprovalRecommend(String dealId, UnderwriterApprovalVo vo)
  {
    ArrayList list = new ArrayList();
    try
    {
      logger.info(new StringBuilder().append("In getApprovalRecommend..........................DAOImpl").append(dealId).toString());

      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT DISTINCT A.DEAL_CURRENT_APPROVAL_LEVEL,B.DEAL_PRODUCT,B.DEAL_SCHEME,B.DEAL_LOAN_AMOUNT FROM CR_DEAL_DTL A JOIN CR_DEAL_LOAN_DTL B ON A.DEAL_ID=B.DEAL_ID  where A.deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("'").toString());
      logger.info(new StringBuilder().append("In getApprovalRecommend...............query...........DAOImpl").append(query).toString());
      UnderwriterApprovalVo noteVO = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());

      query = null;
      int size = product.size();
      for (int i = 0; i < size; i++) {
        ArrayList data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          noteVO = new UnderwriterApprovalVo();
          noteVO.setApprovalLevel(CommonFunction.checkNull(data.get(0)).trim());

          noteVO.setLbxProductID(CommonFunction.checkNull(data.get(1)).trim());
          noteVO.setLbxscheme(CommonFunction.checkNull(data.get(2)).trim());
          noteVO.setLoanAmount(CommonFunction.checkNull(data.get(3)).trim());
          list.add(noteVO);
        }
        noteVO = null;
        data = null;
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally {
      dealId = null;
      vo = null;
    }
    return list;
  }

  public String getApprovalLevel(UnderwriterApprovalVo docVo)
  {
    String approvalLevel = null;
    ArrayList list1 = new ArrayList();
    try
    {
      logger.info(new StringBuilder().append("In getApprovalLevel..........................DAOImpl").append(docVo.getDealId()).toString());
      String product = docVo.getLbxProductID();
      String scheme = docVo.getLbxscheme();
      String amount = docVo.getLoanAmount();
      

      String query = "";
      query = new StringBuilder().append("SELECT FINAL_APPROVAL_LEVEL FROM CR_APPROVAL_LEVEL_M WHERE PRODUCT_ID='").append(product).append("' AND SCHEME_ID='").append(scheme).append("' AND AMOUNT_FROM<='").append(amount).append("'AND '").append(amount).append("'<=AMOUNT_TO  AND REC_STATUS='A' limit 1").toString();
      logger.info(new StringBuilder().append("In getApprovalLevel...............query...........DAOImpl").append(query).toString());
      approvalLevel = ConnectionDAO.singleReturn(query);
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally {
      docVo = null;
    }

    return approvalLevel;
  }

  public ArrayList<Object> getFinancialInstList()
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append("SELECT VALUE,DESCRIPTION FROM generic_master  where GENERIC_KEY='FLEET_FI' and REC_STATUS='A'");
      logger.info(new StringBuilder().append("getFinancialInstList : ").append(query).toString());
      CodeDescVo vo = null;
      ArrayList source = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getFinancialInstList : ").append(source.size()).toString());

      query = null;

      for (int i = 0; i < source.size(); i++)
      {
        ArrayList subsource = (ArrayList)source.get(i);
        if (subsource.size() > 0)
        {
          vo = new CodeDescVo();
          vo.setId(CommonFunction.checkNull(subsource.get(0)).trim());
          vo.setName(CommonFunction.checkNull(subsource.get(1)).trim());
          list.add(vo);
        }
        vo = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getresultForDeal(String dealId)
  {
    ArrayList searchlist = new ArrayList();

    ArrayList resultList = new ArrayList();
    try
    {
      logger.info(new StringBuilder().append("In getresultForDeal().....................................Dao Impl.....").append(dealId).toString());

      StringBuilder bufInsSql = new StringBuilder();
      LoanDetailVo vo = null;

      bufInsSql.append(new StringBuilder().append(" select  VALUE,DESCRIPTION  from generic_master a join cr_deal_loan_dtl b  on( (instr(concat('|',LOAN_CLASSIFICATION,'|'),concat('|',a.VALUE,'|'))>0)) where generic_key='LOAN_CLASSIFICATION' and DEAL_id ='").append(dealId).append("' ").toString());
      searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN getresultForDeal() search query1 ### ").append(bufInsSql.toString()).toString());
      int size = searchlist.size();
      for (int i = 0; i < size; i++) {
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          vo = new LoanDetailVo();
          vo.setLoanClassificationId(CommonFunction.checkNull(data.get(0)));
          vo.setLoanClassificationLabel(CommonFunction.checkNull(data.get(1)));

          resultList.add(vo);
          vo = null;
        }
        data = null;
      }
      bufInsSql = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      searchlist.clear();
      searchlist = null;
    }
    return resultList;
  }

  public ArrayList fetchFinancialInstName(String financialInst)
  {
    ArrayList list = new ArrayList();
    try
    {
      logger.info(new StringBuilder().append("financialInst: ").append(financialInst).toString());
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT COMPANY_DESC FROM COM_COMPANY_M WHERE COMPANY_SHORT_CODE='").append(CommonFunction.checkNull(financialInst)).append("'").toString());
      logger.info(new StringBuilder().append("fetchFinancialInstName: ").append(query.toString()).toString());
      FleetDetailsVo vo = null;
      ArrayList source = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("fetchFinancialInstName: ").append(source.size()).toString());

      query = null;

      for (int i = 0; i < source.size(); i++)
      {
        ArrayList subsource = (ArrayList)source.get(i);
        if (subsource.size() > 0)
        {
          vo = new FleetDetailsVo();
          vo.setFinancialInstName(CommonFunction.checkNull(subsource.get(0)).trim());
          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList<Object> getExposure(String dealId, String userId)
  {
    logger.info(new StringBuilder().append("In getExposure  dealId  :  ").append(dealId).toString());
    ArrayList list = new ArrayList();
    StringBuilder query = new StringBuilder();
    ArrayList product = null;
    ArrayList data = null;
    try
    {
      query.append(new StringBuilder().append("SELECT EXPOSURE_AMOUNT,AMOUNT_FROM,AMOUNT_TO,INCLUDE_EXPOSURE,EXPOSURE_WITH_SD FROM under_writer_search_temp_data WHERE DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' and USER_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(userId)).trim()).append("' ").toString());
      logger.info(new StringBuilder().append("In getExposure...............query  :   ").append(query).toString());
      UnderwriterApprovalVo noteVO = null;
      product = ConnectionDAO.sqlSelect(query.toString());
      int size = product.size();
      for (int i = 0; i < size; i++)
      {
        data = (ArrayList)product.get(i);
        if (data.size() > 0)
        {
          noteVO = new UnderwriterApprovalVo();
          noteVO.setExpAmt(CommonFunction.checkNull(data.get(0)).trim());
          noteVO.setAmountFrom(CommonFunction.checkNull(data.get(1)).trim());
          noteVO.setAmountTo(CommonFunction.checkNull(data.get(2)).trim());
          noteVO.setIncludeExposure(CommonFunction.checkNull(data.get(3)).trim());
          noteVO.setExposureWithSd(CommonFunction.checkNull(data.get(4)).trim());
          list.add(noteVO);
        }
        noteVO = null;
        data = null;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      dealId = null;
      query = null;
      product = null;
      data = null;
    }
    return list;
  }

  public ArrayList fetchFleetDataList(String lbxLoanNoHid, String bDate) {
    ArrayList list = new ArrayList();
    try
    {
      logger.info(new StringBuilder().append("lbxLoanNoHid: ").append(lbxLoanNoHid).toString());
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select period_diff(date_format(STR_TO_DATE('").append(bDate).append("','%d-%m-%Y %H:%i') , '%Y%m' ) , date_format( cld.LOAN_APPROVAL_DATE, '%Y%m' ) )as SEASONING,cld.LOAN_BALANCE_PRINCIPAL,").toString());
      query.append("cacm.VEHICLE_OWNER,c.RELATIONSHIP,cacm.VEHICLE_REGISTRATION_NO,cacm.VEHICLE_MODEL,cacm.VEHICLE_MANUFACTURING_YEAR ");
      query.append(" from cr_loan_dtl cld ");
      query.append(" left join cr_loan_collateral_m a on a.LOAN_ID=cld.LOAN_ID left join cr_asset_collateral_m cacm on cacm.ASSET_ID=a.ASSETID ");
      query.append(" left join cr_deal_customer_role b on cld.LOAN_DEAL_ID=b.DEAL_ID left join cr_deal_customer_m c on c.CUSTOMER_ID=b.DEAL_CUSTOMER_ID ");
      query.append(new StringBuilder().append(" where cld.LOAN_ID = '").append(lbxLoanNoHid).append("' limit 1").toString());
      logger.info(new StringBuilder().append("fetchFinancialInstName: ").append(query.toString()).toString());
      FleetDetailsVo vo = null;
      ArrayList source = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("fetchFleetDataList : ").append(source.size()).toString());

      query = null;

      for (int i = 0; i < source.size(); i++)
      {
        ArrayList subsource = (ArrayList)source.get(i);
        if (subsource.size() > 0)
        {
          vo = new FleetDetailsVo();
          vo.setSeasoning(CommonFunction.checkNull(subsource.get(0)).trim());
          vo.setCurrentPos(CommonFunction.checkNull(subsource.get(1)).trim());
          vo.setVehicleOwner(CommonFunction.checkNull(subsource.get(2)).trim());
          vo.setRelationship(CommonFunction.checkNull(subsource.get(3)).trim());
          vo.setVehicleNo(CommonFunction.checkNull(subsource.get(4)).trim());
          vo.setVehicleModel(CommonFunction.checkNull(subsource.get(5)).trim());
          vo.setMfgYear(CommonFunction.checkNull(subsource.get(6)).trim());
          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getFleetDetailsList(String loanId) {
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select DEAL_FLEET_ID,VEHICLE_OWNER,RELATIONSHIP,VEHICLE_NO,VEHICLE_MODEL,MFG_YEAR,DOC_COLLECTED  from cr_deal_fleet_dtl left join cr_loan_dtl a on a.LOAN_DEAL_ID=cr_deal_fleet_dtl.DEAL_ID  where a.LOAN_ID=").append(CommonFunction.checkNull(loanId)).toString());

      logger.info(new StringBuilder().append("getFleetDetailsList Queryl: ").append(query.toString()).toString());

      FleetDetailsVo fleetVo = null;
      ArrayList fleetdeatail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getDealDisbScheduleList OUTER ARRAYLIST SIZE: ").append(fleetdeatail.size()).toString());
      for (int i = 0; i < fleetdeatail.size(); i++)
      {
        ArrayList data = (ArrayList)fleetdeatail.get(i);
        if (data.size() > 0)
        {
          fleetVo = new FleetDetailsVo();

          fleetVo.setDealFleetId(CommonFunction.checkNull(data.get(0)).trim());
          fleetVo.setVehicleOwner(CommonFunction.checkNull(data.get(1)).trim());
          fleetVo.setRelationship(CommonFunction.checkNull(data.get(2)).trim());
          fleetVo.setVehicleNo(CommonFunction.checkNull(data.get(3)).trim());
          fleetVo.setVehicleModel(CommonFunction.checkNull(data.get(4)).trim());
          fleetVo.setMfgYear(CommonFunction.checkNull(data.get(5)).trim());
          fleetVo.setDocCollected(CommonFunction.checkNull(data.get(6)).trim());

          list.add(fleetVo);
        }
      }
      fleetVo = null;
      query = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public String checkChesisNoVehicle(CollateralVo sh, String source) {
    String list = null;

    logger.info(new StringBuilder().append("In checkChesisNoVehicle..........................DAOImpl").append(sh.getAssetsId()).toString());
    String table = "cr_asset_collateral_m";
    if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
      table = "cr_asset_collateral_m_edit";
    StringBuilder query = new StringBuilder();
    try
    {
      if (!CommonFunction.checkNull(sh.getAssetsId()).equalsIgnoreCase(""))
      {
        query.append(new StringBuilder().append("SELECT COUNT(1) FROM ").append(table).append("  where asset_id!='").append(sh.getAssetsId()).append("' and VEHICLE_CHASIS_NUMBER='").append(CommonFunction.checkNull(sh.getVehicleChesisNo()).trim()).append("'").toString());
      }
      else
      {
        query.append(new StringBuilder().append("SELECT COUNT(1) FROM ").append(table).append(" where  VEHICLE_CHASIS_NUMBER='").append(CommonFunction.checkNull(sh.getVehicleChesisNo()).trim()).append("'").toString());
      }

      logger.info(new StringBuilder().append("In getApprovalRecommend...............query...........DAOImpl").append(query).toString());
      CollateralVo noteVO = null;
      list = ConnectionDAO.singleReturn(query.toString());
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      query = null;
    }

    return list;
  }

  public String checkEnginNoVehicle(CollateralVo sh, String source) {
    String list = null;

    logger.info(new StringBuilder().append("In checkEnginNoVehicle..........................DAOImpl").append(sh.getAssetsId()).toString());
    String table = "cr_asset_collateral_m";
    if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
      table = "cr_asset_collateral_m_edit";
    StringBuilder query = new StringBuilder();
    try
    {
      if (!CommonFunction.checkNull(sh.getAssetsId()).equalsIgnoreCase(""))
      {
        query.append(new StringBuilder().append("SELECT COUNT(1) FROM ").append(table).append("  where asset_id!='").append(sh.getAssetsId()).append("' and ENGINE_NUMBER='").append(CommonFunction.checkNull(sh.getEngineNumber()).trim()).append("'").toString());
      }
      else
      {
        query.append(new StringBuilder().append("SELECT COUNT(1) FROM ").append(table).append(" where  ENGINE_NUMBER='").append(CommonFunction.checkNull(sh.getEngineNumber()).trim()).append("'").toString());
      }

      logger.info(new StringBuilder().append("In getApprovalRecommend...............query...........DAOImpl").append(query).toString());
      CollateralVo noteVO = null;
      list = ConnectionDAO.singleReturn(query.toString());
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      query = null;
    }

    return list;
  }

  public String checkRegNoVehicle(CollateralVo sh, String source) {
    String list = null;

    logger.info(new StringBuilder().append("In checkRegNoVehicle..........................DAOImpl").append(sh.getAssetsId()).toString());
    String table = "cr_asset_collateral_m";
    if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
      table = "cr_asset_collateral_m_edit";
    StringBuilder query = new StringBuilder();
    try
    {
      if (!CommonFunction.checkNull(sh.getAssetsId()).equalsIgnoreCase(""))
      {
        query.append(new StringBuilder().append("SELECT COUNT(1) FROM ").append(table).append("  where asset_id!='").append(sh.getAssetsId()).append("' and VEHICLE_REGISTRATION_NO='").append(CommonFunction.checkNull(sh.getVehicleRegNo()).trim()).append("'").toString());
      }
      else
      {
        query.append(new StringBuilder().append("SELECT COUNT(1) FROM ").append(table).append(" where  VEHICLE_REGISTRATION_NO='").append(CommonFunction.checkNull(sh.getVehicleRegNo()).trim()).append("'").toString());
      }

      logger.info(new StringBuilder().append("In getApprovalRecommend...............query...........DAOImpl").append(query).toString());
      CollateralVo noteVO = null;
      list = ConnectionDAO.singleReturn(query.toString());
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      query = null;
    }

    return list;
  }

  public String getDownLoadFileInfoOmniFin(String txnId, String txnType, String fileName)
  {
    logger.info("In getDownLoadFileInfoOmniFin..........................DAOImpl");
    String filePath = "";
    try
    {
      StringBuffer query = new StringBuffer();
      query.append(new StringBuilder().append("select document_path from cr_uploaded_documents where txn_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnId)).trim()).append("' and file_name='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(fileName)).trim()).append("' AND TXN_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()).append("'").toString());
      logger.info(new StringBuilder().append("In getFileInfo...............query...........DAOImpl ").append(query.toString()).toString());
      filePath = ConnectionDAO.singleReturn(query.toString());
      query = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      txnId = null;
      fileName = null;
      txnType = null;
    }

    return filePath;
  }
  public ArrayList<Object> getPaymentModes() {
    logger.info("in getPaymentModes()  ");
    ArrayList list = new ArrayList();
    try
    {
      String query = "select value,description from generic_master where generic_key='repayment_mode' and rec_status='A'";
      logger.info(new StringBuilder().append("in getPaymentModes() of CreditProcessingDAOImpl Query :  ").append(query).toString());
      LoanDetailVo loanVo = null;
      ArrayList source = ConnectionDAO.sqlSelect(query);
      int size = source.size();
      logger.info(new StringBuilder().append("getPaymentModes").append(source.size()).toString());

      for (int i = 0; i < size; i++)
      {
        ArrayList subEduDetail = (ArrayList)source.get(i);
        if (subEduDetail.size() > 0)
        {
          loanVo = new LoanDetailVo();
          loanVo.setPaymentModeId(CommonFunction.checkNull(subEduDetail.get(0)).toString());
          loanVo.setPaymentMode(CommonFunction.checkNull(subEduDetail.get(1)).toString());

          list.add(loanVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public boolean saveSectorTypeDetails(Object ob, String dealId)
  {
    LoanDetailVo vo = (LoanDetailVo)ob;
    boolean status = false;

    logger.info("In saveSectorTypeDetails.........inside ejb server file...........Dao Impl");
    ArrayList qryList = new ArrayList();
    String stat = "X";
    int exist_loan_id = 0;
    PrepStmtObject insertPrepStmtObject = null;
    StringBuilder bufInsSql = null;
    try
    {
      exist_loan_id = Integer.parseInt(ConnectionDAO.singleReturn(new StringBuilder().append("select count(1) from cr_loan_sector_type_dtl where DEAL_ID='").append(vo.getDealId()).append("'").toString()));
      logger.info(new StringBuilder().append("userNameQ1::::").append(exist_loan_id).toString());
      logger.info(new StringBuilder().append("vo.getRecStatus()::::").append(vo.getRecStatus()).toString());
      if ((vo.getRecStatus() != null) && (vo.getRecStatus().equals("on")))
        stat = "A";
      else {
        stat = "X";
      }

      logger.info(new StringBuilder().append("In insert Case Type master").append(stat).toString());
      if (exist_loan_id == 0) {
        bufInsSql = new StringBuilder();
        insertPrepStmtObject = new PrepStmtObject();
        bufInsSql.append("insert into cr_loan_sector_type_dtl(deal_id,agri_doc,agri_land,name_on_agri_doc,relation_with_hirer,REC_STATUS,MAKER_ID,MAKER_DATE)");
        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND)) ").toString());

        if (CommonFunction.checkNull(dealId).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(dealId);
        }
        if (CommonFunction.checkNull(vo.getAgriDocs()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getAgriDocs().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getAgriLand()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getAgriLand().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getNameAgriDoc()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getNameAgriDoc().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getRelationWithHirer()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getRelationWithHirer().toUpperCase().trim());
        }

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerId());
        }

        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerDate());
        }

        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN insertCaseTypeMaster() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      }
      else
      {
        insertPrepStmtObject = new PrepStmtObject();
        bufInsSql = new StringBuilder();

        bufInsSql.append(new StringBuilder().append("UPDATE cr_loan_sector_type_dtl SET agri_doc=?,agri_land=?,name_on_agri_doc=?,relation_with_hirer=?,REC_STATUS=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND)").toString());
        bufInsSql.append(" where DEAL_ID=?");

        if (CommonFunction.checkNull(vo.getAgriDocs()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getAgriDocs().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getAgriLand()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getAgriLand().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getNameAgriDoc()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getNameAgriDoc().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getRelationWithHirer()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getRelationWithHirer().toUpperCase().trim());
        }

        if (CommonFunction.checkNull(stat).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(stat);
        }

        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerId());
        }

        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getMakerDate());
        if (CommonFunction.checkNull(dealId).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(dealId);
        }
        insertPrepStmtObject.setSql(bufInsSql.toString());

        logger.info(new StringBuilder().append("IN updateCaseMarkingMaker() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);

        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      }

      logger.info(new StringBuilder().append("In saveCountryData......................").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally {
      qryList.clear();
      qryList = null;
    }

    return status;
  }

  public ArrayList editSectorTypeDetails(Object ob)
  {
    ArrayList searchlist = new ArrayList();
    LoanDetailVo vo = (LoanDetailVo)ob;
    ArrayList sectorTypeList = new ArrayList();
    logger.info(new StringBuilder().append("ratioid in searchBenchMarkRatioEdit &***************************** = ").append(vo.getDealId()).toString());
    try
    {
      StringBuilder bufInsSql = new StringBuilder();
      bufInsSql.append(" select  DEAL_ID,AGRI_DOC,AGRI_LAND,NAME_ON_AGRI_DOC,RELATION_WITH_HIRER,REC_STATUS  from cr_loan_sector_type_dtl ");

      bufInsSql.append(new StringBuilder().append("  WHERE DEAL_ID='").append(StringEscapeUtils.escapeSql(vo.getDealId())).append("'").toString());
      logger.info(new StringBuilder().append("search Query....").append(bufInsSql).toString());

      searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());
      logger.info(new StringBuilder().append("IN editSectorTypeDetails() search query1 ### ").append(bufInsSql.toString()).toString());
      logger.info(new StringBuilder().append("editSectorTypeDetails ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("editSectorTypeDetails ").append(searchlist.get(i).toString()).toString());
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          LoanDetailVo caseTypeDataVo = new LoanDetailVo();

          caseTypeDataVo.setDealId(CommonFunction.checkNull(data.get(0)).toString());
          caseTypeDataVo.setAgriDocs(CommonFunction.checkNull(data.get(1)).toString());
          caseTypeDataVo.setAgriLand(CommonFunction.checkNull(data.get(2)).toString());
          caseTypeDataVo.setNameAgriDoc(CommonFunction.checkNull(data.get(3)).toString());
          caseTypeDataVo.setRelationWithHirer(CommonFunction.checkNull(data.get(4)).toString());
          caseTypeDataVo.setRecStatus(CommonFunction.checkNull(data.get(5)).toString());
          sectorTypeList.add(caseTypeDataVo);
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally {
      searchlist.clear();
      searchlist = null;
    }

    return sectorTypeList;
  }

  public ArrayList<Object> getAgriDocsList()
  {
    ArrayList list = new ArrayList();
    try {
      StringBuffer query = new StringBuffer();
      query.append("SELECT VALUE,DESCRIPTION FROM generic_master  where GENERIC_KEY='AGRI_DOC' and REC_STATUS='A'");

      logger.info(new StringBuilder().append("In creditProcessingDaoI getMortageList").append(query.toString()).toString());

      ArrayList agriDoc = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      for (int i = 0; i < agriDoc.size(); i++) {
        ArrayList sublist = (ArrayList)agriDoc.get(i);
        if (sublist.size() > 0) {
          CodeDescVo av = new CodeDescVo();
          av.setId(CommonFunction.checkNull(sublist.get(0)).trim());

          av.setName(CommonFunction.checkNull(sublist.get(1)).trim());

          list.add(av);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public String checkRefinaceReqInfo()
  {
    logger.info("In checkRefinaceReqInfo..........................DAOImpl");
    String val = "";
    try
    {
      StringBuffer query = new StringBuffer();
      query.append("select parameter_value from parameter_mst where PARAMETER_KEY='REFINANCE_VEHICLE_INFO_REQUIRED' ");
      logger.info(new StringBuilder().append("In checkRefinaceReqInfo...............query...........DAOImpl ").append(query.toString()).toString());
      val = ConnectionDAO.singleReturn(query.toString());
      query = null;
    } catch (Exception e) {
      e = 
        e;

      e.printStackTrace();
    }
    finally
    {
    }

    return val;
  }
  public String getVatValueStateWise(String supplierId)
  {
    logger.info("in getVatValueStateWise");
    String query = new StringBuilder().append("select vat_percent from com_state_m s left join cr_dsa_dealer_m d on s.state_id=d.state where d.dealer_id ='").append(supplierId).append("' ").toString();
    logger.info(new StringBuilder().append("Select Query-----").append(query).toString());
    String value = CommonFunction.checkNull(ConnectionDAO.singleReturn(query));
    logger.info(new StringBuilder().append("Vat value in percent-----").append(value).toString());
    return value;
  }

  public String getServiceTaxStateWise(String supplierId)
  {
    logger.info("in getServiceTaxStateWise");
    String query = new StringBuilder().append("select service_tax from com_state_m s left join cr_dsa_dealer_m d on s.state_id=d.state where d.dealer_id ='").append(supplierId).append("' ").toString();
    logger.info(new StringBuilder().append("Select Query-----").append(query).toString());
    String value = CommonFunction.checkNull(ConnectionDAO.singleReturn(query));
    logger.info(new StringBuilder().append("Vat value in percent-----").append(value).toString());
    return value;
  }

  public boolean vatDetail(CollateralVo vo)
  {
    logger.info("in vatDetail----------------");

    boolean status = false;
    String vatPercent = "";
    String vatamount = "";
    String dealAssetCost = "";
    String serviceTax = "";
    String assetID = "";
    String tableName = "";
    if (CommonFunction.checkNull(vo.getType()).equalsIgnoreCase("D"))
      tableName = "cr_deal_loan_dtl";
    if (CommonFunction.checkNull(vo.getType()).equalsIgnoreCase("L"))
      tableName = "cr_loan_dtl";
    if (CommonFunction.checkNull(vo.getSource()).equalsIgnoreCase("ED"))
    {
      tableName = "CR_loan_dtl_edit";
    }
    if ((vo.getLoanId() != null) && (!vo.getLoanId().equalsIgnoreCase("")))
    {
      String query = new StringBuilder().append("SELECT sum(cacm.vat_amount) vat_amount, sum(cacm.asset_collateral_value)asset_collateral_value, cacm.service_tax  FROM CR_loan_COLLATERAL_M cdcm left join CR_asset_COLLATERAL_M cacm  on cdcm.assetid=cacm.asset_id left join cr_loan_dtl cd on cd.loan_id= cdcm.loan_id    WHERE cdcm.loan_id = '").append(vo.getLoanId()).append("' ").toString();
      logger.info(new StringBuilder().append("select query ").append(query).toString());
      try
      {
        ArrayList searchlist = ConnectionDAO.sqlSelect(query);
        ArrayList qryList = new ArrayList();
        for (int i = 0; i < searchlist.size(); i++) {
          logger.info(new StringBuilder().append("vatDetail ").append(searchlist.get(i).toString()).toString());
          ArrayList data = (ArrayList)searchlist.get(i);
          if (data.size() > 0)
          {
            vatamount = CommonFunction.checkNull(data.get(0));
            dealAssetCost = CommonFunction.checkNull(data.get(1));
            serviceTax = CommonFunction.checkNull(data.get(2));
          }
        }

        if (CommonFunction.checkNull(vatamount).equalsIgnoreCase(""))
          vatamount = "0.00";
        if (CommonFunction.checkNull(serviceTax).equalsIgnoreCase(""))
          serviceTax = "0.00";
        if (CommonFunction.checkNull(dealAssetCost).equalsIgnoreCase(""))
          dealAssetCost = "0.00";
        double vamount = Double.parseDouble(vatamount);
        double assetCost = Double.parseDouble(dealAssetCost);
        double vPercent = 0.0D;
        if (!dealAssetCost.equalsIgnoreCase("0.00"))
        {
          vPercent = vamount * 100.0D / assetCost;
        }
        double vServiceTax = Double.parseDouble(serviceTax);
        logger.info(new StringBuilder().append("assetID -----").append(assetID).append("--vatamount--").append(vatamount).append("--dealAssetCost--").append(dealAssetCost).append("---vPercent ---").append(vPercent).toString());
        PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
        String updateQuery = "update cr_loan_dtl set vat_percent = ? , vat_amount = ?, service_tax = ? where  loan_id=?";
        if (CommonFunction.checkNull(Double.valueOf(vPercent)).equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.00");
        else
          insertPrepStmtObject.addString(new StringBuilder().append(vPercent).append("").toString());
        if (CommonFunction.checkNull(Double.valueOf(vamount)).equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.00");
        else
          insertPrepStmtObject.addString(new StringBuilder().append(vamount).append("").toString());
        if (CommonFunction.checkNull(Double.valueOf(vServiceTax)).equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.00");
        else
          insertPrepStmtObject.addString(new StringBuilder().append(vServiceTax).append("").toString());
        if (CommonFunction.checkNull(vo.getLoanId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.00");
        else {
          insertPrepStmtObject.addString(vo.getLoanId());
        }

        insertPrepStmtObject.setSql(updateQuery.toString());
        logger.info(new StringBuilder().append("IN update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        logger.info(new StringBuilder().append("In saveViability ........ update query: ").append(updateQuery).toString());

        insertPrepStmtObject = null;
        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveViability.........update status: ").append(status).toString());
      } catch (Exception e) {
        e.printStackTrace();
      }

    }
    else
    {
      String query = new StringBuilder().append("SELECT sum(cacm.vat_amount) vat_amount, sum(cacm.asset_collateral_value)asset_collateral_value, cacm.service_Tax  FROM CR_DEAL_COLLATERAL_M cdcm left join CR_asset_COLLATERAL_M cacm  on cdcm.assetid=cacm.asset_id left join cr_deal_loan_dtl cd on cd.deal_id= cdcm.deal_id    WHERE cdcm.DEAL_ID = '").append(vo.getDealId()).append("'").toString();
      logger.info(new StringBuilder().append("select query ").append(query).toString());
      try
      {
        ArrayList searchlist = ConnectionDAO.sqlSelect(query);
        ArrayList qryList = new ArrayList();
        for (int i = 0; i < searchlist.size(); i++) {
          logger.info(new StringBuilder().append("vatDetail ").append(searchlist.get(i).toString()).toString());
          ArrayList data = (ArrayList)searchlist.get(i);
          if (data.size() > 0)
          {
            vatamount = CommonFunction.checkNull(data.get(0));
            dealAssetCost = CommonFunction.checkNull(data.get(1));
            serviceTax = CommonFunction.checkNull(data.get(2));
          }
        }

        if (CommonFunction.checkNull(vatamount).equalsIgnoreCase(""))
          vatamount = "0.00";
        if (CommonFunction.checkNull(serviceTax).equalsIgnoreCase(""))
          serviceTax = "0.00";
        if (CommonFunction.checkNull(dealAssetCost).equalsIgnoreCase(""))
          dealAssetCost = "0.00";
        double vamount = Double.parseDouble(vatamount);
        double assetCost = Double.parseDouble(dealAssetCost);
        double vPercent = 0.0D;
        if (!dealAssetCost.equalsIgnoreCase("0.00"))
        {
          vPercent = vamount * 100.0D / assetCost;
        }
        double vServiceTax = Double.parseDouble(serviceTax);
        logger.info(new StringBuilder().append("assetID -----").append(assetID).append("--vatamount--").append(vatamount).append("--dealAssetCost--").append(dealAssetCost).append("---vPercent ---").append(vPercent).toString());
        PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
        String updateQuery = "update cr_deal_loan_dtl set vat_percent = ? , vat_amount = ?,service_tax=? where  deal_id=?";
        if (CommonFunction.checkNull(Double.valueOf(vPercent)).equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.00");
        else
          insertPrepStmtObject.addString(new StringBuilder().append(vPercent).append("").toString());
        if (CommonFunction.checkNull(Double.valueOf(vamount)).equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.00");
        else
          insertPrepStmtObject.addString(new StringBuilder().append(vamount).append("").toString());
        if (CommonFunction.checkNull(Double.valueOf(vServiceTax)).equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.00");
        else
          insertPrepStmtObject.addString(new StringBuilder().append(vServiceTax).append("").toString());
        if (CommonFunction.checkNull(vo.getDealId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addString("0.00");
        else {
          insertPrepStmtObject.addString(vo.getDealId());
        }
        insertPrepStmtObject.setSql(updateQuery.toString());
        logger.info(new StringBuilder().append("IN update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
        qryList.add(insertPrepStmtObject);
        logger.info(new StringBuilder().append("In saveViability ........ update query: ").append(updateQuery).toString());

        insertPrepStmtObject = null;
        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
        logger.info(new StringBuilder().append("In saveViability.........update status: ").append(status).toString());
      } catch (Exception e) {
        e.printStackTrace();
      }
    }

    return status;
  }

  public String getProductLoanType(String productId) {
    logger.info("in getProductLoanType");
    String query = new StringBuilder().append("select product_loan_type from cr_product_m s where product_id ='").append(productId).append("' ").toString();
    logger.info(new StringBuilder().append("Select Query-----").append(query).toString());
    String value = CommonFunction.checkNull(ConnectionDAO.singleReturn(query));
    logger.info(new StringBuilder().append("product_loan_type value -----").append(value).toString());
    return value;
  }

  public String saveAssetInvoiceDetails(Object ob)
  {
    int maxId = 0;
    CollateralVo vo = (CollateralVo)ob;
    this.qryList = new ArrayList();
    this.qryList1 = new ArrayList();
    String assetId = vo.getAssetsId();
    String result = "";
    String recordId = vo.getRecordId();
    boolean status = false;
    int count = 0; int count2 = 0;
    StringBuffer bufInsUpdSql = new StringBuffer();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    StringBuffer bufInsUpdSql1 = new StringBuffer();
    PrepStmtObject insertPrepStmtObject1 = new PrepStmtObject();
    StringBuffer bufInsSql = new StringBuffer();
    StringBuilder query = null;
    StringBuilder query2 = null;
    String table = "CR_ASSET_INVOICE_DTL";
    if (CommonFunction.checkNull(vo.getSource()).trim().equalsIgnoreCase("ED"))
      table = "CR_ASSET_INVOICE_DTL_EDIT";
    try
    {
      if (!CommonFunction.checkNull(vo.getAssetsId()).equalsIgnoreCase(""))
      {
        query = new StringBuilder();
        query.append(new StringBuilder().append("select count(PRODUCT_TYPE) from ").append(table).append(" ").toString());
        query.append(new StringBuilder().append(" where PRODUCT_TYPE='").append(CommonFunction.checkNull(vo.getInvoiceProductType()).trim()).append("' ").toString());
        query.append(new StringBuilder().append(" AND  ASSET_ID='").append(vo.getAssetsId()).append("'").toString());
        if (!CommonFunction.checkNull(recordId).equalsIgnoreCase(""))
        {
          query.append(new StringBuilder().append(" AND  record_Id<>'").append(recordId).append("'").toString());
        }
        String val = ConnectionDAO.singleReturn(query.toString());
        count = Integer.parseInt(val);
        if (count > 0)
        {
          result = "dupProd";
        }
        query = null;
      }

      if ((!CommonFunction.checkNull(vo.getAssetsId()).equalsIgnoreCase("")) && (count < 1))
      {
        query = new StringBuilder();
        query2 = new StringBuilder();
        query.append("select count(INVOICE_NO) from CR_ASSET_INVOICE_DTL ");
        query.append(new StringBuilder().append(" where INVOICE_NO='").append(CommonFunction.checkNull(vo.getInvoiceNo()).trim()).append("' ").toString());
        query.append(new StringBuilder().append(" AND  ASSET_ID<>'").append(vo.getAssetsId()).append("'").toString());

        query2.append("select count(INVOICE_NO) from CR_ASSET_INVOICE_DTL_EDIT ");
        query2.append(new StringBuilder().append(" where INVOICE_NO='").append(CommonFunction.checkNull(vo.getInvoiceNo()).trim()).append("' ").toString());
        query2.append(new StringBuilder().append(" AND  ASSET_ID<>'").append(vo.getAssetsId()).append("'").toString());

        String val = ConnectionDAO.singleReturn(query.toString());
        String val2 = ConnectionDAO.singleReturn(query2.toString());
        count = Integer.parseInt(val);
        count2 = Integer.parseInt(val2);
        if ((count > 0) || (count2 > 0))
        {
          result = "dupInvoice";
        }
        query = null;
        query2 = null;
      }

      if ((!CommonFunction.checkNull(vo.getAssetsId()).equalsIgnoreCase("")) && (count < 1) && (count2 < 1))
      {
        StringBuilder query1 = new StringBuilder();
        query1.append(new StringBuilder().append("select count(INVOICE_NO) from ").append(table).append(" ").toString());
        query1.append(new StringBuilder().append(" where  ASSET_ID='").append(vo.getAssetsId()).append("'").toString());
        String value = ConnectionDAO.singleReturn(query1.toString());
        int countResult = Integer.parseInt(value);

        if (countResult > 0)
        {
          query = new StringBuilder();
          query.append(new StringBuilder().append("select count(INVOICE_NO) from ").append(table).append(" ").toString());
          query.append(new StringBuilder().append(" where INVOICE_NO='").append(CommonFunction.checkNull(vo.getInvoiceNo()).trim()).append("' ").toString());
          query.append(new StringBuilder().append(" AND  ASSET_ID='").append(vo.getAssetsId()).append("'").toString());

          String val = ConnectionDAO.singleReturn(query.toString());
          count = Integer.parseInt(val);
          if (count == 0)
          {
            result = "notAllowInvoice";
          }
          query = null;
        }
      }

      if (CommonFunction.checkNull(result).equalsIgnoreCase(""))
      {
        if ((recordId == null) || (recordId.trim().equalsIgnoreCase("")))
        {
          logger.info("In insert saveAssetInvoiceDetails");
          bufInsSql.append(new StringBuilder().append("insert into ").append(table).append(" (ASSET_ID,PRODUCT_TYPE,QUANTITY,PRICE,DISCOUNT_AMT,TAX_AMT,INVOICE_AMT,INVOICE_NO,INVOICE_DATE,INVOICE_LOCATION,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE)").toString());
          bufInsSql.append("values(");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
          bufInsSql.append(" ?,");
          bufInsSql.append(" ?,");
          bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
          bufInsSql.append(" ?,");
          bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'))").toString());

          if (CommonFunction.checkNull(vo.getAssetsId()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getAssetsId().trim());
          if (CommonFunction.checkNull(vo.getInvoiceProductType()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getInvoiceProductType().trim());
          if (CommonFunction.checkNull(vo.getInvoiceQuantity()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getInvoiceQuantity().trim());
          if (CommonFunction.checkNull(vo.getInvoicePrice()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getInvoicePrice().trim());
          if (CommonFunction.checkNull(vo.getInvoiceDiscount()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getInvoiceDiscount().trim());
          if (CommonFunction.checkNull(vo.getTaxAmount()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getTaxAmount().trim());
          if (CommonFunction.checkNull(vo.getInvoiceAmount()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getInvoiceAmount().trim());
          if (CommonFunction.checkNull(vo.getInvoiceNo()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getInvoiceNo().trim());
          if (CommonFunction.checkNull(vo.getInvoiceDate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getInvoiceDate().trim());
          if (CommonFunction.checkNull(vo.getInvoicelocation()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getInvoicelocation().trim());
          if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getUserId().trim());
          if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getMakerDate().trim());
          if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getUserId().trim());
          if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getMakerDate().trim());
        }
        else
        {
          logger.info("In Modify saveAssetInvoiceDetails");
          bufInsSql.append(new StringBuilder().append("update ").append(table).append(" set PRODUCT_TYPE=?,QUANTITY=?,PRICE=?,DISCOUNT_AMT=?,TAX_AMT=?,INVOICE_AMT=?,INVOICE_NO=?,INVOICE_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),INVOICE_LOCATION=?,MAKER_ID=?,MAKER_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),AUTHOR_ID=?,AUTHOR_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("') where ASSET_ID=? and RECORD_ID=?").toString());

          if (CommonFunction.checkNull(vo.getInvoiceProductType()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getInvoiceProductType().trim());
          if (CommonFunction.checkNull(vo.getInvoiceQuantity()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getInvoiceQuantity().trim());
          if (CommonFunction.checkNull(vo.getInvoicePrice()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getInvoicePrice().trim());
          if (CommonFunction.checkNull(vo.getInvoiceDiscount()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getInvoiceDiscount().trim());
          if (CommonFunction.checkNull(vo.getTaxAmount()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getTaxAmount().trim());
          if (CommonFunction.checkNull(vo.getInvoiceAmount()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getInvoiceAmount().trim());
          if (CommonFunction.checkNull(vo.getInvoiceNo()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getInvoiceNo().trim());
          if (CommonFunction.checkNull(vo.getInvoiceDate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getInvoiceDate().trim());
          if (CommonFunction.checkNull(vo.getInvoicelocation()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getInvoicelocation().trim());
          if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getUserId().trim());
          if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getMakerDate().trim());
          if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getUserId().trim());
          if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getMakerDate().trim());
          if (CommonFunction.checkNull(vo.getAssetsId()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else
            insertPrepStmtObject.addString(vo.getAssetsId().trim());
          if (CommonFunction.checkNull(vo.getRecordId()).trim().equalsIgnoreCase(""))
            insertPrepStmtObject.addNull();
          else {
            insertPrepStmtObject.addString(vo.getRecordId().trim());
          }
        }
        insertPrepStmtObject.setSql(bufInsSql.toString());
        logger.info(new StringBuilder().append("IN saveAssetInvoiceDetails() insert or update query ### ").append(insertPrepStmtObject.printQuery()).toString());
        this.qryList.add(insertPrepStmtObject);
        bufInsSql = null;
        insertPrepStmtObject = null;

        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
        logger.info(new StringBuilder().append("In saveAssetInvoiceDetails.........insert or update status: ").append(status).toString());
        if (status)
        {
          result = "Saved";
        }
        else
          result = "notSaved";
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return result;
  }

  public String saveAssetDispatchDetails(Object ob)
  {
    int maxId = 0;
    CollateralVo vo = (CollateralVo)ob;
    this.qryList = new ArrayList();
    this.qryList1 = new ArrayList();
    String assetId = vo.getAssetsId();
    String recordId = vo.getRecordId();
    boolean status = false;
    StringBuffer bufInsUpdSql = new StringBuffer();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    StringBuffer bufInsUpdSql1 = new StringBuffer();
    PrepStmtObject insertPrepStmtObject1 = new PrepStmtObject();
    StringBuffer bufInsSql = new StringBuffer();
    String table = "";
    if (CommonFunction.checkNull(vo.getSource()).trim().equalsIgnoreCase("ED"))
      table = "CR_ASSET_INVOICE_DISPATCH_DTL_EDIT";
    else {
      table = "CR_ASSET_INVOICE_DISPATCH_DTL";
    }
    if ((recordId == null) || (recordId.trim().equalsIgnoreCase("")))
    {
      logger.info("In insert saveAssetDispatchDetails");
      bufInsSql.append(new StringBuilder().append("insert into ").append(table).append(" (ASSET_ID,DISPATCH_LOCATION,PRODUCT_TYPE,DISPATCH_QUANTITY,CONSIGNEE_SHIPPING_ADDRESS,LOGISTICS_PROVIDER,CONSIGNEE_NAME,CONSIGNMENT_NO,DELIEVERY_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,DELIEVERY_LOCATION,CONSIGNMENT_VALUE,DISPATCH_DATE,DELIEVERY_DATE)").toString());
      bufInsSql.append("values(");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsSql.append(" ?,");
      bufInsSql.append(" ?,");
      bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
      bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'))").toString());

      if (CommonFunction.checkNull(vo.getAssetsId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getAssetsId().trim());
      if (CommonFunction.checkNull(vo.getInvoiceDispatchLocation()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getInvoiceDispatchLocation().trim());
      if (CommonFunction.checkNull(vo.getInvoiceProductTypeDesc()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getInvoiceProductTypeDesc().trim());
      if (CommonFunction.checkNull(vo.getInvoiceDispatchQuantity()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getInvoiceDispatchQuantity().trim());
      if (CommonFunction.checkNull(vo.getInvoiceConsigneeShippingAddress()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getInvoiceConsigneeShippingAddress().trim());
      if (CommonFunction.checkNull(vo.getInvoiceLogisticsProvider()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getInvoiceLogisticsProvider().trim());
      if (CommonFunction.checkNull(vo.getInvoiceConsigneeName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getInvoiceConsigneeName().trim());
      if (CommonFunction.checkNull(vo.getInvoiceConsignmentNo()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getInvoiceConsignmentNo().trim());
      if (CommonFunction.checkNull(vo.getInvoiceDeliveryStatus()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getInvoiceDeliveryStatus().trim());
      if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getUserId().trim());
      if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getMakerDate().trim());
      if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getUserId().trim());
      if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getMakerDate().trim());
      if (CommonFunction.checkNull(vo.getDelieveryLocation()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getDelieveryLocation().trim());
      if (CommonFunction.checkNull(vo.getConsignmentValue()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getConsignmentValue().trim());
      if (CommonFunction.checkNull(vo.getDispatchDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getDispatchDate().trim());
      if (CommonFunction.checkNull(vo.getDelieveryDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getDelieveryDate().trim());
    }
    else
    {
      logger.info("In update saveAssetDispatchDetails");
      bufInsSql.append(new StringBuilder().append("update ").append(table).append(" set DISPATCH_LOCATION=?,PRODUCT_TYPE=?,DISPATCH_QUANTITY=?,CONSIGNEE_SHIPPING_ADDRESS=?,LOGISTICS_PROVIDER=?,CONSIGNEE_NAME=?,CONSIGNMENT_NO=?,DELIEVERY_STATUS=?,MAKER_ID=?,MAKER_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),AUTHOR_ID=?,AUTHOR_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),DELIEVERY_LOCATION=?,CONSIGNMENT_VALUE=?,DISPATCH_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),DELIEVERY_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("') where ASSET_ID=? and RECORD_ID=?").toString());

      if (CommonFunction.checkNull(vo.getInvoiceDispatchLocation()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getInvoiceDispatchLocation().trim());
      if (CommonFunction.checkNull(vo.getInvoiceProductTypeDesc()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getInvoiceProductTypeDesc().trim());
      if (CommonFunction.checkNull(vo.getInvoiceDispatchQuantity()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getInvoiceDispatchQuantity().trim());
      if (CommonFunction.checkNull(vo.getInvoiceConsigneeShippingAddress()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getInvoiceConsigneeShippingAddress().trim());
      if (CommonFunction.checkNull(vo.getInvoiceLogisticsProvider()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getInvoiceLogisticsProvider().trim());
      if (CommonFunction.checkNull(vo.getInvoiceConsigneeName()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getInvoiceConsigneeName().trim());
      if (CommonFunction.checkNull(vo.getInvoiceConsignmentNo()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getInvoiceConsignmentNo().trim());
      if (CommonFunction.checkNull(vo.getInvoiceDeliveryStatus()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getInvoiceDeliveryStatus().trim());
      if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getUserId().trim());
      if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getMakerDate().trim());
      if (CommonFunction.checkNull(vo.getUserId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getUserId().trim());
      if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getMakerDate().trim());
      if (CommonFunction.checkNull(vo.getDelieveryLocation()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getDelieveryLocation().trim());
      if (CommonFunction.checkNull(vo.getConsignmentValue()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getConsignmentValue().trim());
      if (CommonFunction.checkNull(vo.getDispatchDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getDispatchDate().trim());
      if (CommonFunction.checkNull(vo.getDelieveryDate()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getDelieveryDate().trim());
      if (CommonFunction.checkNull(vo.getAssetsId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(vo.getAssetsId().trim());
      if (CommonFunction.checkNull(vo.getRecordId()).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(vo.getRecordId().trim());
      }
    }

    insertPrepStmtObject.setSql(bufInsSql.toString());
    logger.info(new StringBuilder().append("IN saveAssetDispatchDetails() insert or update query ### ").append(insertPrepStmtObject.printQuery()).toString());
    this.qryList.add(insertPrepStmtObject);
    bufInsSql = null;
    insertPrepStmtObject = null;
    try
    {
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(this.qryList);
      logger.info(new StringBuilder().append("In saveAssetDispatchDetails.........insert or update status: ").append(status).toString());
      if (status)
      {
        assetId = vo.getAssetsId().trim();
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return assetId;
  }

  public String getInvoiceAssetId() {
    logger.info("getInvoiceAssetId");

    StringBuilder query = new StringBuilder();
    query.append("Select distinct max(ASSET_ID) from cr_asset_collateral_m");
    String id = "";
    id = ConnectionDAO.singleReturn(query.toString());
    logger.info(new StringBuilder().append("assetId : ").append(id).toString());
    query = null;
    return id;
  }

  public ArrayList<CollateralVo> getAssetInvoiceDetailList(String assetId, String source) {
    ArrayList list = new ArrayList();
    String table = "";
    if (source.trim().equalsIgnoreCase("ED"))
      table = "CR_ASSET_INVOICE_DTL_EDIT";
    else
      table = "CR_ASSET_INVOICE_DTL";
    try {
      StringBuilder query = new StringBuilder();
      StringBuilder query1 = new StringBuilder();
      StringBuilder query2 = new StringBuilder();
      query.append(new StringBuilder().append("SELECT CAID.RECORD_ID,CAID.ASSET_ID,CAID.PRODUCT_TYPE,CAID.QUANTITY,ROUND(CAID.PRICE,2),ROUND(CAID.DISCOUNT_AMT,2),ROUND(CAID.INVOICE_AMT,2),CACM.ASSET_SUPPLIER,CACM.ASSET_SUPPLIER_DESC,CACM.ASSET_MANUFATURER,CACM.ASSET_MANUFATURER_DESC,CACM.INVOICE_SI_RD_NAME,CIPM.PRODUCT_DESC from  ").append(table).append("  CAID left join cr_asset_collateral_m CACM on CAID.ASSET_ID=CACM.ASSET_ID left join CR_INVOICE_PRODUCT_M CIPM ON CAID.PRODUCT_TYPE=CIPM.RECORD_ID where CAID.ASSET_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(assetId)).trim()).toString());
      query1.append(new StringBuilder().append("SELECT ASSET_ID,ASSET_SUPPLIER,ASSET_SUPPLIER_DESC,ASSET_MANUFATURER,ASSET_MANUFATURER_DESC,INVOICE_SI_RD_NAME from cr_asset_collateral_m where ASSET_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(assetId)).trim()).toString());
      query2.append(new StringBuilder().append("SELECT ROUND(sum(INVOICE_AMT),2) from  ").append(table).append("   where ASSET_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(assetId)).trim()).toString());
      logger.info(new StringBuilder().append("getAssetInvoiceDetailList :").append(query).toString());
      CollateralVo invoiceVo = null;
      ArrayList invoiceDtl = ConnectionDAO.sqlSelect(query.toString());
      ArrayList invoiceTotalAmount = ConnectionDAO.sqlSelect(query2.toString());
      ArrayList invoiceDtl2 = (ArrayList)invoiceTotalAmount.get(0);
      String totalAmount = CommonFunction.checkNull(invoiceDtl2.get(0)).trim();
      logger.info(new StringBuilder().append("getInvoiceList").append(invoiceDtl.size()).toString());
      query = null;
      if (invoiceDtl.size() != 0)
      {
        for (int i = 0; i < invoiceDtl.size(); i++)
        {
          ArrayList invoiceDtl1 = (ArrayList)invoiceDtl.get(i);
          if (invoiceDtl1.size() > 0)
          {
            invoiceVo = new CollateralVo();
            invoiceVo.setRecordId(CommonFunction.checkNull(invoiceDtl1.get(0)).trim());
            invoiceVo.setAssetsId(CommonFunction.checkNull(invoiceDtl1.get(1)).trim());
            invoiceVo.setInvoiceProductType(CommonFunction.checkNull(invoiceDtl1.get(2)).trim());
            invoiceVo.setInvoiceQuantity(CommonFunction.checkNull(invoiceDtl1.get(3)).trim());
            invoiceVo.setInvoicePrice(CommonFunction.checkNull(invoiceDtl1.get(4)).trim());
            invoiceVo.setInvoiceDiscount(CommonFunction.checkNull(invoiceDtl1.get(5)).trim());
            invoiceVo.setInvoiceAmount(CommonFunction.checkNull(invoiceDtl1.get(6)).trim());
            invoiceVo.setLbxmachineSupplier(CommonFunction.checkNull(invoiceDtl1.get(7)).trim());
            invoiceVo.setMachineSupplier(CommonFunction.checkNull(invoiceDtl1.get(8)).trim());
            invoiceVo.setLbxmachineManufact(CommonFunction.checkNull(invoiceDtl1.get(9)).trim());
            invoiceVo.setAssetManufact(CommonFunction.checkNull(invoiceDtl1.get(10)).trim());
            invoiceVo.setSiRdName(CommonFunction.checkNull(invoiceDtl1.get(11)).trim());
            invoiceVo.setProductDesc(CommonFunction.checkNull(invoiceDtl1.get(12)).trim());
            invoiceVo.setInvoiceTotalAmount(totalAmount);
            invoiceVo.setInvoiceNumber("TRUE");
            list.add(invoiceVo);
          }
          invoiceVo = null;
          invoiceDtl1.clear();
          invoiceDtl1 = null;
        }
        invoiceDtl = null;
      }
      else {
        invoiceDtl = ConnectionDAO.sqlSelect(query1.toString());
        for (int i = 0; i < invoiceDtl.size(); i++)
        {
          ArrayList invoiceDtl1 = (ArrayList)invoiceDtl.get(i);
          if (invoiceDtl1.size() > 0)
          {
            invoiceVo = new CollateralVo();
            invoiceVo.setInvoiceNumber("FALSE");
            invoiceVo.setAssetsId(CommonFunction.checkNull(invoiceDtl1.get(0)).trim());
            invoiceVo.setLbxmachineSupplier(CommonFunction.checkNull(invoiceDtl1.get(1)).trim());
            invoiceVo.setMachineSupplier(CommonFunction.checkNull(invoiceDtl1.get(2)).trim());
            invoiceVo.setLbxmachineManufact(CommonFunction.checkNull(invoiceDtl1.get(3)).trim());
            invoiceVo.setAssetManufact(CommonFunction.checkNull(invoiceDtl1.get(4)).trim());
            invoiceVo.setSiRdName(CommonFunction.checkNull(invoiceDtl1.get(5)).trim());
            list.add(invoiceVo);
          }
          invoiceVo = null;
          invoiceDtl1.clear();
          invoiceDtl1 = null;
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      assetId = null;
    }

    return list;
  }

  public ArrayList<CollateralVo> getAssetDispatchDetailList(String assetId, String source) {
    ArrayList list = new ArrayList();
    String table = "";
    if (source.trim().equalsIgnoreCase("ED"))
      table = "CR_ASSET_INVOICE_DISPATCH_DTL_EDIT";
    else
      table = "CR_ASSET_INVOICE_DISPATCH_DTL";
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT A.RECORD_ID,ASSET_ID,CONSIGNMENT_NO,CONSIGNEE_NAME,LOGISTICS_PROVIDER,PRODUCT_TYPE,CASE DELIEVERY_STATUS WHEN 'D' THEN 'Delivered' WHEN 'P' THEN 'Pending' ELSE '' END AS DELIEVERY_STATUS,B.PRODUCT_DESC from ").append(table).append(" A left join CR_INVOICE_PRODUCT_M B on A.PRODUCT_TYPE=B.RECORD_ID where ASSET_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(assetId)).trim()).toString());
      logger.info(new StringBuilder().append("getAssetDispatchDetailList :").append(query).toString());
      CollateralVo dispatchVo = null;
      ArrayList dispatchdetail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getDispatchList").append(dispatchdetail.size()).toString());
      query = null;
      for (int i = 0; i < dispatchdetail.size(); i++)
      {
        ArrayList dispatchdetail1 = (ArrayList)dispatchdetail.get(i);
        if (dispatchdetail1.size() > 0)
        {
          dispatchVo = new CollateralVo();
          dispatchVo.setRecordId(CommonFunction.checkNull(dispatchdetail1.get(0)).trim());
          dispatchVo.setAssetsId(CommonFunction.checkNull(dispatchdetail1.get(1)).trim());
          dispatchVo.setInvoiceConsignmentNo(CommonFunction.checkNull(dispatchdetail1.get(2)).trim());
          dispatchVo.setInvoiceConsigneeName(CommonFunction.checkNull(dispatchdetail1.get(3)).trim());
          dispatchVo.setInvoiceLogisticsProvider(CommonFunction.checkNull(dispatchdetail1.get(4)).trim());
          dispatchVo.setInvoiceProductType(CommonFunction.checkNull(dispatchdetail1.get(5)).trim());
          dispatchVo.setInvoiceDeliveryStatus(CommonFunction.checkNull(dispatchdetail1.get(6)).trim());
          dispatchVo.setInvoiceProductTypeDesc(CommonFunction.checkNull(dispatchdetail1.get(7)).trim());
          list.add(dispatchVo);
        }
        dispatchVo = null;
        dispatchdetail1.clear();
        dispatchdetail1 = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      assetId = null;
    }

    return list;
  }

  public ArrayList<CollateralVo> getInvoiceDetail(String recordId, String source) {
    ArrayList list = new ArrayList();
    String table = "";
    if (source.trim().equalsIgnoreCase("ED"))
      table = "CR_ASSET_INVOICE_DTL_EDIT";
    else
      table = "CR_ASSET_INVOICE_DTL";
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT CAID.RECORD_ID,CAID.ASSET_ID,CAID.PRODUCT_TYPE,CIPM.PRODUCT_DESC,CAID.QUANTITY,ROUND(CAID.PRICE,2),ROUND(CAID.DISCOUNT_AMT,2),ROUND(CAID.TAX_AMT,2),ROUND(CAID.INVOICE_AMT,2),CAID.INVOICE_NO,date_format(CAID.INVOICE_DATE,'%d-%m-%Y'),CAID.INVOICE_LOCATION,CACM.ASSET_TYPE,CACM.ASSET_COLLATERAL_CLASS,(SELECT PRODUCT_DESC FROM CR_INVOICE_PRODUCT_M WHERE RECORD_ID=CAID.PRODUCT_TYPE) from ").append(table).append(" CAID left join cr_asset_collateral_m CACM on CAID.ASSET_ID=CACM.ASSET_ID left join CR_INVOICE_PRODUCT_M CIPM ON CAID.PRODUCT_TYPE=CIPM.RECORD_ID where CAID.RECORD_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(recordId)).trim()).toString());
      logger.info(new StringBuilder().append("getAssetInvoiceDetail :").append(query).toString());
      CollateralVo invoiceVo = null;
      ArrayList invoiceDtl = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getInvoiceList").append(invoiceDtl.size()).toString());
      query = null;
      for (int i = 0; i < invoiceDtl.size(); i++)
      {
        ArrayList invoiceDtl1 = (ArrayList)invoiceDtl.get(i);
        if (invoiceDtl1.size() > 0)
        {
          invoiceVo = new CollateralVo();
          invoiceVo.setRecordId(CommonFunction.checkNull(invoiceDtl1.get(0)).trim());
          invoiceVo.setAssetsId(CommonFunction.checkNull(invoiceDtl1.get(1)).trim());
          invoiceVo.setInvoiceProductType(CommonFunction.checkNull(invoiceDtl1.get(2)).trim());
          invoiceVo.setProductDesc(CommonFunction.checkNull(invoiceDtl1.get(3)).trim());
          invoiceVo.setInvoiceQuantity(CommonFunction.checkNull(invoiceDtl1.get(4)).trim());
          invoiceVo.setInvoicePrice(CommonFunction.checkNull(invoiceDtl1.get(5)).trim());
          invoiceVo.setInvoiceDiscount(CommonFunction.checkNull(invoiceDtl1.get(6)).trim());
          invoiceVo.setTaxAmount(CommonFunction.checkNull(invoiceDtl1.get(7)).trim());
          invoiceVo.setInvoiceAmount(CommonFunction.checkNull(invoiceDtl1.get(8)).trim());
          invoiceVo.setInvoiceNo(CommonFunction.checkNull(invoiceDtl1.get(9)).trim());
          invoiceVo.setInvoiceDate(CommonFunction.checkNull(invoiceDtl1.get(10)).trim());
          invoiceVo.setInvoicelocation(CommonFunction.checkNull(invoiceDtl1.get(11)).trim());
          invoiceVo.setColltype2(CommonFunction.checkNull(invoiceDtl1.get(12)).trim());
          invoiceVo.setColltype1(CommonFunction.checkNull(invoiceDtl1.get(13)).trim());
          invoiceVo.setProductDesc(CommonFunction.checkNull(invoiceDtl1.get(14)).trim());
          list.add(invoiceVo);
        }
        invoiceVo = null;
        invoiceDtl1.clear();
        invoiceDtl1 = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      recordId = null;
    }

    return list;
  }

  public ArrayList<CollateralVo> getDispatchDetail(String recordId, String source) {
    ArrayList list = new ArrayList();
    String table = "";
    if (source.trim().equalsIgnoreCase("ED"))
      table = "CR_ASSET_INVOICE_DISPATCH_DTL_EDIT";
    else
      table = "CR_ASSET_INVOICE_DISPATCH_DTL";
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT A.RECORD_ID,ASSET_ID,CONSIGNMENT_NO,CONSIGNEE_NAME,LOGISTICS_PROVIDER,PRODUCT_TYPE,ifnull(DELIEVERY_STATUS,''),DISPATCH_LOCATION,DISPATCH_QUANTITY,CONSIGNEE_SHIPPING_ADDRESS,DELIEVERY_LOCATION,CONSIGNMENT_VALUE,date_format(DISPATCH_DATE,'%d-%m-%Y'),date_format(DELIEVERY_DATE,'%d-%m-%Y') from ").append(table).append(" A left join CR_INVOICE_PRODUCT_M B on A.PRODUCT_TYPE=B.RECORD_ID where A.RECORD_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(recordId)).trim()).toString());
      logger.info(new StringBuilder().append("getDispatchDetail :").append(query).toString());
      CollateralVo dispatchVo = null;
      ArrayList dispatchdetail = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getDispatchDetail").append(dispatchdetail.size()).toString());
      query = null;

      for (int i = 0; i < dispatchdetail.size(); i++)
      {
        ArrayList dispatchdetail1 = (ArrayList)dispatchdetail.get(i);
        if (dispatchdetail1.size() > 0)
        {
          dispatchVo = new CollateralVo();
          dispatchVo.setRecordId(CommonFunction.checkNull(dispatchdetail1.get(0)).trim());
          dispatchVo.setAssetsId(CommonFunction.checkNull(dispatchdetail1.get(1)).trim());
          dispatchVo.setInvoiceConsignmentNo(CommonFunction.checkNull(dispatchdetail1.get(2)).trim());
          dispatchVo.setInvoiceConsigneeName(CommonFunction.checkNull(dispatchdetail1.get(3)).trim());
          dispatchVo.setInvoiceLogisticsProvider(CommonFunction.checkNull(dispatchdetail1.get(4)).trim());
          dispatchVo.setInvoiceProductTypeDesc(CommonFunction.checkNull(dispatchdetail1.get(5)).trim());
          dispatchVo.setInvoiceDeliveryStatus(CommonFunction.checkNull(dispatchdetail1.get(6)).trim());
          dispatchVo.setInvoiceDispatchLocation(CommonFunction.checkNull(dispatchdetail1.get(7)).trim());
          dispatchVo.setInvoiceDispatchQuantity(CommonFunction.checkNull(dispatchdetail1.get(8)).trim());
          dispatchVo.setInvoiceConsigneeShippingAddress(CommonFunction.checkNull(dispatchdetail1.get(9)).trim());
          dispatchVo.setDelieveryLocation(CommonFunction.checkNull(dispatchdetail1.get(10)).trim());
          dispatchVo.setConsignmentValue(CommonFunction.checkNull(dispatchdetail1.get(11)).trim());
          dispatchVo.setDispatchDate(CommonFunction.checkNull(dispatchdetail1.get(12)).trim());
          dispatchVo.setDelieveryDate(CommonFunction.checkNull(dispatchdetail1.get(13)).trim());
          list.add(dispatchVo);
        }
        dispatchVo = null;
        dispatchdetail1.clear();
        dispatchdetail1 = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      recordId = null;
    }

    return list;
  }

  public boolean deleteInvoiceDetail(String recordId, String source) {
    boolean status = false;
    logger.info("deleteInvoiceDetail");
    StringBuilder query = new StringBuilder();
    String invoiceTable = "CR_ASSET_INVOICE_DTL";
    String dispatchTable = "CR_ASSET_INVOICE_DISPATCH_DTL";
    String asstId = ""; String product = "";
    if (source.trim().equalsIgnoreCase("ED"))
    {
      invoiceTable = "CR_ASSET_INVOICE_DTL_EDIT";
      dispatchTable = "CR_ASSET_INVOICE_DISPATCH_DTL_EDIT";
    }
    query.append(new StringBuilder().append("SELECT ASSET_ID,PRODUCT_TYPE FROM ").append(invoiceTable).append(" WHERE RECORD_ID='").append(recordId).append("'").toString());
    try {
      ArrayList productList = ConnectionDAO.sqlSelect(query.toString());

      for (int i = 0; i < productList.size(); i++)
      {
        StringBuilder query1 = new StringBuilder();
        ArrayList list1 = new ArrayList();

        ArrayList productList1 = (ArrayList)productList.get(i);
        if (productList1.size() > 0)
        {
          asstId = CommonFunction.checkNull(productList1.get(0)).trim().toString();
          product = CommonFunction.checkNull(productList1.get(1)).trim().toString();
          query1.append(new StringBuilder().append("delete from ").append(dispatchTable).append(" where ASSET_ID='").append(asstId).append("' and PRODUCT_TYPE='").append(product).append("'").toString());
          list1.add(query1);
          status = ConnectionDAO.sqlInsUpdDelete(list1);
        }
        list1 = null;
      }
      query = null;
    }
    catch (SQLException e) {
      e.printStackTrace();
      e = null;
    }
    query = new StringBuilder();
    query.append(new StringBuilder().append("delete from ").append(invoiceTable).append(" where RECORD_ID='").append(recordId).append("'").toString());
    ArrayList list = new ArrayList();
    list.add(query);
    try {
      status = ConnectionDAO.sqlInsUpdDelete(list);
    }
    catch (SQLException e) {
      e.printStackTrace();
      e = null;
    }
    finally
    {
      query = null;
      list.clear();
      list = null;
    }
    return status;
  }

  public boolean deleteDispatchDetail(String recordId, String source) {
    boolean status = false;
    logger.info("deleteDispatchDetail");
    StringBuilder query = new StringBuilder();
    String table = "";
    if (source.trim().equalsIgnoreCase("ED"))
      table = "CR_ASSET_INVOICE_DISPATCH_DTL_EDIT";
    else
      table = "CR_ASSET_INVOICE_DISPATCH_DTL";
    query.append(new StringBuilder().append("delete from ").append(table).append(" where RECORD_ID='").append(recordId).append("'").toString());
    ArrayList list = new ArrayList();
    list.add(query);
    try {
      status = ConnectionDAO.sqlInsUpdDelete(list);
    }
    catch (SQLException e) {
      e.printStackTrace();
      e = null;
    }
    finally
    {
      query = null;
      list.clear();
      list = null;
    }
    return status;
  }
  public ArrayList getInvoiceProductList(String assetId, String source) {
    ArrayList list = new ArrayList();
    String table = "";
    if (source.trim().equalsIgnoreCase("ED"))
      table = "CR_ASSET_INVOICE_DTL_EDIT";
    else
      table = "CR_ASSET_INVOICE_DTL";
    try {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select a.PRODUCT_TYPE,b.PRODUCT_DESC from ").append(table).append(" a join CR_INVOICE_PRODUCT_M b on a.PRODUCT_TYPE=b.record_id WHERE a.PRODUCT_TYPE is not null and a.ASSET_ID=").append(CommonFunction.checkNull(assetId).trim()).toString());
      logger.info(new StringBuilder().append("query for invoice product type").append(query).toString());
      ArrayList productList = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getProductList ").append(productList.size()).toString());

      query = null;

      for (int i = 0; i < productList.size(); i++)
      {
        ArrayList data = (ArrayList)productList.get(i);
        if (data.size() > 0) {
          CollateralVo vo = new CollateralVo();
          vo.setInvoiceProductTypeCode(CommonFunction.checkNull(data.get(0)).trim());
          vo.setInvoiceProductTypeDesc(CommonFunction.checkNull(data.get(1)).trim());
          list.add(vo);
        }
        data.clear();
        data = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public ArrayList getSiRdName()
  {
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append("SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='INVOICE_SI_RD_NAME'");
      ArrayList addressList = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getAddressList ").append(addressList.size()).toString());

      query = null;

      for (int i = 0; i < addressList.size(); i++) {
        ArrayList data = (ArrayList)addressList.get(i);
        if (data.size() > 0) {
          CollateralVo siRdName = new CollateralVo();
          siRdName.setSiRdName(CommonFunction.checkNull(data.get(0)).trim());

          list.add(siRdName);
        }
        data.clear();
        data = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public String getSchemeForGoldList(String dealId)
  {
    logger.info("getSchemeForGoldOrnament");
    StringBuilder query = new StringBuilder();
    query.append(new StringBuilder().append("select DEAL_SCHEME from cr_deal_loan_dtl where  deal_id='").append(dealId).append("'").toString());
    logger.info(new StringBuilder().append("Query :  ").append(query).toString());
    return ConnectionDAO.singleReturn(query.toString());
  }

  public String getloanAmountForGoldOrnament(String dealId)
  {
    logger.info("getloanAmountForGoldOrnament");
    StringBuilder query = new StringBuilder();
    query.append(new StringBuilder().append("select DEAL_LOAN_AMOUNT from cr_deal_loan_dtl where  deal_id='").append(dealId).append("'").toString());
    logger.info(new StringBuilder().append("Query :  ").append(query).toString());
    return ConnectionDAO.singleReturn(query.toString());
  }

  public String getSchemeForGoldForLoan(String loanId)
  {
    logger.info("getSchemeForGoldOrnament");
    StringBuilder query = new StringBuilder();
    query.append(new StringBuilder().append("select LOAN_SCHEME from cr_loan_dtl where  loan_id='").append(loanId).append("'").toString());
    logger.info(new StringBuilder().append("Query :  ").append(query).toString());
    return ConnectionDAO.singleReturn(query.toString());
  }

  public String getloanAmountForGoldOrnamentLoan(String loanId)
  {
    logger.info("getSchemeForGoldOrnament");
    StringBuilder query = new StringBuilder();
    query.append(new StringBuilder().append("select LOAN_Loan_amount from cr_loan_dtl where  loan_id='").append(loanId).append("'").toString());
    logger.info(new StringBuilder().append("Query :  ").append(query).toString());
    return ConnectionDAO.singleReturn(query.toString());
  }

  public String checkDuplicateGoldOrnament(String dealId, String ornamentType, String ornamentStandard)
  {
    logger.info("checkDuplicateGoldOrnament");
    StringBuilder query = new StringBuilder();
    query.append(new StringBuilder().append("select count(1) from cr_asset_collateral_m a left join cr_deal_collateral_m b on a.asset_id=b.assetid where b.deal_id='").append(dealId).append("' and a.Ornament_type='").append(ornamentType).append("' and a.ornament_standard='").append(ornamentStandard).append("' and asset_collateral_class='GOLd'").toString());

    logger.info(new StringBuilder().append("Query :  ").append(query).toString());
    return ConnectionDAO.singleReturn(query.toString());
  }

  public String checkDuplicateGoldOrnamentForLoan(String loanId, String ornamentType, String ornamentStandard)
  {
    logger.info("checkDuplicateGoldOrnamentForLoan");
    StringBuilder query = new StringBuilder();
    query.append(new StringBuilder().append("select count(1) from cr_asset_collateral_m a left join cr_loan_collateral_m b on a.asset_id=b.assetid where b.loan_id='").append(loanId).append("' and a.Ornament_type='").append(ornamentType).append("' and a.ornament_standard='").append(ornamentStandard).append("' and asset_collateral_class='GOLd'").toString());

    logger.info(new StringBuilder().append("Query :  ").append(query).toString());
    return ConnectionDAO.singleReturn(query.toString());
  }

  public String checkDuplicateGoldOrnamentForUpdateLoan(String loanId, String ornamentType, String ornamentStandard, String assetId)
  {
    logger.info("checkDuplicateGoldOrnamentForLoan");
    StringBuilder query = new StringBuilder();
    query.append(new StringBuilder().append("select count(1) from cr_asset_collateral_m a left join cr_loan_collateral_m b on a.asset_id=b.assetid where b.loan_id='").append(loanId).append("' and a.Ornament_type='").append(ornamentType).append("' and a.ornament_standard='").append(ornamentStandard).append("' and asset_collateral_class='GOLd'").toString());

    if (!assetId.equalsIgnoreCase("")) {
      query.append(new StringBuilder().append("and a.asset_id != '").append(assetId).append("' ").toString());
    }

    logger.info(new StringBuilder().append("Query :  ").append(query).toString());
    return ConnectionDAO.singleReturn(query.toString());
  }

  public String checkDuplicateGoldOrnamentUpdateDeal(String dealId, String ornamentType, String ornamentStandard, String assetId)
  {
    logger.info("checkDuplicateGoldOrnament");
    StringBuilder query = new StringBuilder();
    query.append(new StringBuilder().append("select count(1) from cr_asset_collateral_m a left join cr_deal_collateral_m b on a.asset_id=b.assetid where b.deal_id='").append(dealId).append("' and a.Ornament_type='").append(ornamentType).append("' and a.ornament_standard='").append(ornamentStandard).append("' and asset_collateral_class='GOLd'").toString());

    if (!assetId.equalsIgnoreCase("")) {
      query.append(new StringBuilder().append(" and a.asset_id != '").append(assetId).append("' ").toString());
    }

    logger.info(new StringBuilder().append("Query :  ").append(query).toString());
    return ConnectionDAO.singleReturn(query.toString());
  }

  public boolean saveUploadPath(String txnType, String customerId, String path, String fileName) {
    boolean status = false;

    logger.info("IN saveUploadPath()");
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    try {
      logger.info("In insert part of uploadUnderwritingData....");
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append(new StringBuilder().append("UPDATE ").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()).append(" SET DOCUMENT_PATH=?, DOCUMENT_NAME=? WHERE CUSTOMER_ID=?").toString());

      if (CommonFunction.checkNull(path).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else
        insertPrepStmtObject.addString(path.trim());
      if (CommonFunction.checkNull(fileName).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(fileName.trim());
      }
      if (CommonFunction.checkNull(customerId).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(customerId.trim());
      }

      insertPrepStmtObject.setSql(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN saveUploadPath() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In uploadUnderwritingData.................query status..... ").append(status).toString());
      bufInsSql = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      qryList.clear();
      qryList = null;
    }
    return status;
  }

  public ArrayList getUploadCustomerPicData(String customerId, String source) {
    ArrayList list = new ArrayList();
    ArrayList data = null;
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("SELECT CUSTOMER_ID,DOCUMENT_NAME,'CUSTOMER PHOTO',IF('").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(source)).trim()).append("'='cr_deal_customer_m','DEAL','LOAN')AS SOURCE FROM ").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(source)).trim()).append(" WHERE CUSTOMER_ID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(customerId)).trim()).append(" AND IFNULL(DOCUMENT_NAME,'')<>'' ;").toString());

      UnderwritingDocUploadVo uwDocVo = null;
      ArrayList product = ConnectionDAO.sqlSelect(query.toString());

      query = null;
      for (int i = 0; i < product.size(); i++)
      {
        data = (ArrayList)product.get(i);
        if (data.size() > 0) {
          uwDocVo = new UnderwritingDocUploadVo();
          uwDocVo.setCustomerId(CommonFunction.checkNull(data.get(0)).trim());
          uwDocVo.setFileName(CommonFunction.checkNull(data.get(1)).trim());
          uwDocVo.setDocDescription(CommonFunction.checkNull(data.get(2)).trim());
          uwDocVo.setUploadedState(CommonFunction.checkNull(data.get(3)).trim());
          list.add(uwDocVo);
          uwDocVo = null;
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally
    {
      data = null;
    }

    return list;
  }

  public boolean deleteDocumentForCustomer(String docName, String customerId, String source)
  {
    logger.info("IN saveUploadPath()");
    boolean status = false;
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
    try {
      logger.info("In insert part of uploadUnderwritingData....");
      StringBuffer bufInsSql = new StringBuffer();
      bufInsSql.append(new StringBuilder().append("UPDATE ").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(source)).trim()).append(" SET DOCUMENT_PATH=?, DOCUMENT_NAME=? WHERE CUSTOMER_ID=?").toString());

      insertPrepStmtObject.addNull();
      insertPrepStmtObject.addNull();
      if (CommonFunction.checkNull(customerId).trim().equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(customerId.trim());
      }

      insertPrepStmtObject.setSql(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN saveUploadPath() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
      qryList.add(insertPrepStmtObject);
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In uploadUnderwritingData.................query status..... ").append(status).toString());
      bufInsSql = null;
    } catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      qryList.clear();
      qryList = null;
    }
    return status;
  }

  public String getDownLoadFilePathForCustomerDoc(String customerId, String source)
  {
    logger.info("In getDownLoadFilePathForCustomerDoc..........................DAOImpl");
    String filePath = "";
    try
    {
      StringBuffer query = new StringBuffer();
      query.append(new StringBuilder().append("select DOCUMENT_PATH from ").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(source)).trim()).append(" where customer_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(customerId)).trim()).append("'").toString());
      logger.info(new StringBuilder().append("In getFileInfo...............query...........DAOImpl ").append(query.toString()).toString());
      filePath = ConnectionDAO.singleReturn(query.toString());
      query = null;
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    finally {
      customerId = null;
      source = null;
    }

    return filePath;
  }

  public ArrayList<Object> getDocTypeList() {
    ArrayList list = new ArrayList();
    try {
      StringBuffer query = new StringBuffer();
      query.append("SELECT VALUE,DESCRIPTION FROM generic_master  where GENERIC_KEY='DOC_TYPE' and REC_STATUS='A'");

      logger.info(new StringBuilder().append("In creditProcessingDaoI getDocTypeList").append(query.toString()).toString());

      ArrayList agriDoc = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      for (int i = 0; i < agriDoc.size(); i++) {
        ArrayList sublist = (ArrayList)agriDoc.get(i);
        if (sublist.size() > 0) {
          CommonDealVo dcType = new CommonDealVo();
          dcType.setDocTypeId(CommonFunction.checkNull(sublist.get(0)).trim());
          dcType.setDocTypeDesc(CommonFunction.checkNull(sublist.get(1)).trim());
          list.add(dcType);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getbusinessList()
  {
	  logger.info("getbusinessList======================================>>>>>>>>>>>>>>>");
    ArrayList list = new ArrayList();
    try {
      StringBuilder query = new StringBuilder();
      query.append("select DESCRIPTION,VALUE from generic_master WHERE GENERIC_KEY='BUSINESS_TYPE' ");
      logger.info(new StringBuilder().append("query : ").append(query).toString());
      LoanDetailForCMVO vo = null;
      ArrayList businessList = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("query : ").append(query).toString());

      query = null;

      for (int i = 0; i < businessList.size(); i++)
      {
    	  ArrayList businessList1=(ArrayList)businessList.get(i);
        if (businessList1.size() > 0)
        {
          vo = new LoanDetailForCMVO();

          vo.setBusinessdesc(CommonFunction.checkNull(businessList1.get(0)).trim());
          vo.setBusinessId(CommonFunction.checkNull(businessList1.get(1)).trim());
          logger.info(new StringBuilder().append("id1.................................. ").append(CommonFunction.checkNull(businessList1.get(0)).trim()).toString());
          logger.info(new StringBuilder().append("id2.................................. ").append(CommonFunction.checkNull(businessList1.get(1)).trim()).toString());
          list.add(vo);
        }
        businessList1.clear();
        businessList1 = null;
      }
    } catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public ArrayList<CodeDescVo> getGenericMasterList(String genericKey)
  {
    logger.info("in getGenericMasterList()");
    ArrayList list = new ArrayList();
    ArrayList resultList = new ArrayList();
    ArrayList sublist = new ArrayList();
    StringBuilder query = new StringBuilder();
    query.append(new StringBuilder().append("select value,description from generic_master where GENERIC_KEY ='").append(genericKey).append("' and rec_status='A' ").toString());

    logger.info(new StringBuilder().append("getGenericMasterList  Query  :  ").append(query.toString()).toString());
    try
    {
      list = ConnectionDAO.sqlSelect(query.toString());
      int size = list.size();
      CodeDescVo codeDescVo = null;
      for (int i = 0; i < size; i++) {
        sublist = (ArrayList)list.get(i);
        if ((sublist != null) && (sublist.size() > 0))
        {
          codeDescVo = new CodeDescVo();
          codeDescVo.setId(CommonFunction.checkNull(sublist.get(0)));
          codeDescVo.setName(CommonFunction.checkNull(sublist.get(1)));
        }

        resultList.add(codeDescVo);
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }return resultList;
  }

  public ArrayList<CommonDealVo> searchDealReassignment(CommonDealVo vo, String type) {
    logger.info("In searchDealReassignment() method of CreditProcessingDAOImpl");

    StringBuilder dealId = new StringBuilder();
    StringBuilder customerName = new StringBuilder();

    int count = 0;
    int startRecordIndex = 0;
    int endRecordIndex = this.no;
    ArrayList searchlist = new ArrayList();
    ArrayList detailList = new ArrayList();
    try
    {
      logger.info("In searchDealReassignment().....................................Dao Impl");

      dealId.append(CommonFunction.checkNull(StringEscapeUtils.escapeSql(vo.getLbxDealNo()).trim()));
      customerName.append(CommonFunction.checkNull(StringEscapeUtils.escapeSql(vo.getCustomername()).trim()));

      boolean appendSQL = false;
      StringBuffer bufInsSql = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();
      bufInsSql.append(new StringBuilder().append("select distinct ifnull(deal.deal_no,''), ifnull(b.customer_name,''), ifnull(c.product_desc,''), ifnull(d.scheme_desc,''), a.deal_id, (SELECT USER_NAME FROM SEC_USER_M WHERE USER_ID=a.MAKER_ID) MAKER_ID  from cr_deal_movement_dtl_edit a left join cr_deal_dtl deal on deal.deal_id = a.deal_id AND deal.REC_STATUS<>'A'  left join cr_deal_loan_dtl dl on dl.deal_id = a.deal_id left join cr_deal_customer_m b on b.customer_id = deal.deal_customer_id left join cr_product_m c on c.product_id = dl.deal_product  left join cr_scheme_m d on d.scheme_id = dl.deal_scheme where a.rec_status='").append(type).append("' AND deal.DEAL_BRANCH='").append(vo.getBranchId()).append("' ").toString());

      bufInsSqlTempCount.append(new StringBuilder().append("select count(distinct deal.deal_no) from cr_deal_movement_dtl_edit a left join cr_deal_dtl deal on deal.deal_id = a.deal_id AND deal.REC_STATUS<>'A'  left join cr_deal_loan_dtl dl on dl.deal_id = a.deal_id left join cr_deal_customer_m b on b.customer_id = deal.deal_customer_id left join cr_product_m c on c.product_id = dl.deal_product  left join cr_scheme_m d on d.scheme_id = dl.deal_scheme where a.rec_status='").append(type).append("' AND deal.DEAL_BRANCH='").append(vo.getBranchId()).append("' ").toString());

      if ((vo.getStage() != null) && (!vo.getStage().equalsIgnoreCase("F")))
      {
        bufInsSql.append(new StringBuilder().append(" AND a.MAKER_ID='").append(vo.getUserId()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND a.MAKER_ID='").append(vo.getUserId()).append("' ").toString());
      }
      if ((vo.getStage() != null) && (vo.getStage().equalsIgnoreCase("F")))
      {
        bufInsSql.append(new StringBuilder().append(" AND a.MAKER_ID!='").append(vo.getUserId()).append("' ").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND a.MAKER_ID!='").append(vo.getUserId()).append("' ").toString());
      }
      if ((!dealId.toString().equalsIgnoreCase("")) && (!customerName.toString().equalsIgnoreCase("")))
      {
        bufInsSql.append(new StringBuilder().append(" AND a.deal_Id ='").append(dealId).append("' AND b.customer_name like'%").append(customerName).append("%'").toString());
        bufInsSqlTempCount.append(new StringBuilder().append(" AND a.deal_Id ='").append(dealId).append("' AND b.customer_name like'%").append(customerName).append("%'").toString());
      }
      if ((!dealId.toString().equalsIgnoreCase("")) || (!customerName.toString().equalsIgnoreCase("")))
      {
        appendSQL = true;
      }
      if (appendSQL) {
        bufInsSql.append(" AND");
        bufInsSqlTempCount.append(" AND");
        if (!dealId.toString().equalsIgnoreCase("")) {
          bufInsSql.append(new StringBuilder().append(" a.deal_Id ='").append(dealId).append("' AND").toString());
          bufInsSqlTempCount.append(new StringBuilder().append(" a.deal_Id ='").append(dealId).append("' AND").toString());
          appendSQL = true;
        }

        if (!customerName.toString().equalsIgnoreCase("")) {
          bufInsSql.append(new StringBuilder().append(" b.customer_name like'%").append(customerName).append("%' AND").toString());
          bufInsSqlTempCount.append(new StringBuilder().append(" b.customer_name like'%").append(customerName).append("%' AND").toString());
          appendSQL = true;
        }
        if ((!vo.getLbxUserId().equalsIgnoreCase("")) && (vo.getStage().equalsIgnoreCase("F"))) {
          bufInsSql.append(new StringBuilder().append("a.MAKER_ID ='").append(vo.getUserId()).append("' AND").toString());
          bufInsSqlTempCount.append(new StringBuilder().append("a.MAKER_ID ='").append(vo.getUserId()).append("' AND").toString());
          appendSQL = true;
        }
      }

      logger.info(new StringBuilder().append("In appendSQL true---- ").append(appendSQL).toString());

      if (appendSQL)
      {
        String tmp = bufInsSql.toString();
        String tmp1 = bufInsSqlTempCount.toString();
        logger.info(new StringBuilder().append("In searchDealReassignment() ## tmp ## ").append(tmp).toString());
        logger.info(new StringBuilder().append("In searchDealReassignment() ## tmp1 ## ").append(tmp1).toString());
        logger.info(new StringBuilder().append("In appendSQL true----  in check index Of tmp").append(tmp.lastIndexOf("AND")).append("------").append(tmp.length() - 3).toString());
        logger.info(new StringBuilder().append("In appendSQL true----  in check index Of tmp1").append(tmp1.lastIndexOf("AND")).append("------").append(tmp1.length() - 3).toString());
        if ((tmp.lastIndexOf("AND") == tmp.length() - 3) && (tmp1.lastIndexOf("AND") == tmp1.length() - 3))
        {
          logger.info("In appendSQL true----  in check index Of");
          tmp = tmp.substring(0, tmp.length() - 4).trim();
          tmp1 = tmp1.substring(0, tmp1.length() - 4).trim();
          logger.info(new StringBuilder().append("search Query...tmp. ").append(tmp).toString());
          searchlist = ConnectionDAO.sqlSelect(tmp);
          count = Integer.parseInt(ConnectionDAO.singleReturn(tmp1.toString()));
        }
        else
        {
          logger.info(new StringBuilder().append("search Query...tmp.").append(tmp).toString());
          searchlist = ConnectionDAO.sqlSelect(tmp);
        }
      }
      else
      {
        count = Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
        if (((dealId == null) && (customerName == null)) || ((dealId.toString().equalsIgnoreCase("")) && (customerName.toString().equalsIgnoreCase(""))) || (vo.getCurrentPageLink() > 1))
        {
          logger.info(new StringBuilder().append("current PAge Link no .................... ").append(vo.getCurrentPageLink()).toString());
          if (vo.getCurrentPageLink() > 1)
          {
            startRecordIndex = (vo.getCurrentPageLink() - 1) * this.no;
            endRecordIndex = this.no;
            logger.info(new StringBuilder().append("startRecordIndex .................... ").append(startRecordIndex).toString());
            logger.info(new StringBuilder().append("endRecordIndex .................... ").append(endRecordIndex).toString());
          }
          bufInsSql.append(new StringBuilder().append(" limit ").append(startRecordIndex).append(",").append(endRecordIndex).toString());
        }
        logger.info(new StringBuilder().append("search Query...else-------.").append(bufInsSql).toString());
        searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());
      }
      logger.info(new StringBuilder().append("searchDealReassignment: ").append(searchlist.size()).toString());
      for (int i = 0; i < searchlist.size(); i++) {
        logger.info(new StringBuilder().append("searchDealReassignment: ").append(searchlist.get(i).toString()).toString());
        ArrayList data = (ArrayList)searchlist.get(i);
        if (data.size() > 0) {
          CommonDealVo vo1 = new CommonDealVo();
          if (type.equalsIgnoreCase("P"))
          {
            vo1.setDealNo(new StringBuilder().append("<a href=dealReassignmentMaker.do?method=searchDealForReassignmentMaker&dealId=").append(CommonFunction.checkNull(data.get(4)).trim()).append("&dealNo=").append(CommonFunction.checkNull(data.get(0)).trim()).append("&customerName=").append(CommonFunction.checkNull(data.get(1)).trim()).append(">").append(CommonFunction.checkNull(data.get(0)).trim()).append("</a>").toString());
          }

          if (type.equalsIgnoreCase("F"))
          {
            vo1.setDealNo(new StringBuilder().append("<a href=dealReassignmentAuthor.do?method=showEditDealDataAuthor&dealId=").append(CommonFunction.checkNull(data.get(4)).trim()).append("&dealNo=").append(CommonFunction.checkNull(data.get(0)).trim()).append("&customerName=").append(CommonFunction.checkNull(data.get(1)).trim()).append(">").append(CommonFunction.checkNull(data.get(0)).trim()).append("</a>").toString());
          }

          vo1.setCustomername(CommonFunction.checkNull(data.get(1)).trim());
          vo1.setProduct(CommonFunction.checkNull(data.get(2)).trim());
          vo1.setScheme(CommonFunction.checkNull(data.get(3)).trim());
          vo1.setLbxDealNo(CommonFunction.checkNull(data.get(4)).trim());
          vo1.setTotalRecordSize(count);
          vo1.setUserId(CommonFunction.checkNull(data.get(5)).trim());
          detailList.add(vo1);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      dealId = null;
      customerName = null;
    }

    return detailList;
  }

  public ArrayList getOldDealMovementDetail(String txnid)
  {
    logger.info(new StringBuilder().append("In getOldDealMovementDetail......Dao Impl").append(txnid).toString());
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(" select s.STAGE_DESC,case when b.DEAL_FORWARDED<>'00-00-0000 00:00' and ifnull(b.DEAL_FORWARD_USER,'')<>'' THEN 'COMPLETED'");
      query.append(" when b.DEAL_FORWARDED='00-00-0000 00:00' and ifnull(b.DEAL_FORWARD_USER,'')='' then 'INITIATED' when b.DEAL_ACTION is null then 'PENDING' end as 'Deal Action',");
      query.append(new StringBuilder().append(" DATE_FORMAT(b.DEAL_RECEIVED,'").append(this.dateFormatWithTime).append("'),DATE_FORMAT(b.DEAL_FORWARDED,'").append(this.dateFormatWithTime).append("'), b.DEAL_FORWARD_USER,b.DEAL_RECEIVED_USER,b.DEAL_MOVEMENT_ID STAGE_SEQ_NO,").toString());
      query.append(" ifnull(if(b.DEAL_STAGE_ID='DC', deal.maker_id,if(b.DEAL_STAGE_ID='BSA', bsa.maker_id, if(b.DEAL_STAGE_ID='FAC', fac.maker_id,");
      query.append(" if(b.DEAL_STAGE_ID='FFC', ffc.maker_id, if(b.DEAL_STAGE_ID='QC', qc.maker_id,if(b.DEAL_STAGE_ID='FVI', 'Please Check through Deal Movement','')))))),'')pending_with ");
      query.append(" from cr_deal_movement_dtl b");
      query.append(" join cr_stage_m s on s.STAGE_ID=b.DEAL_STAGE_ID ");
      query.append(new StringBuilder().append(" left join(select deal_id,'DC' stage, maker_id from cr_deal_dtl where deal_id=").append(CommonFunction.checkNull(txnid).trim()).append(" and rec_status='P') deal on deal.deal_id = b.deal_id and deal.stage = b.DEAL_STAGE_ID").toString());
      query.append(new StringBuilder().append(" left join(select deal_id,'BSA' stage, maker_id from CR_DEAL_BUYER_SUPPLIER_DTL where deal_id=").append(CommonFunction.checkNull(txnid).trim()).append(" and rec_status='P') bsa on bsa.deal_id = b.deal_id and bsa.stage = b.DEAL_STAGE_ID").toString());
      query.append(new StringBuilder().append(" left join(select deal_id,'FAC' stage, maker_id from CR_FINANCIAL_DATA_DTL where deal_id=").append(CommonFunction.checkNull(txnid).trim()).append(" and rec_status='P') fac on fac.deal_id = b.deal_id and fac.stage = b.DEAL_STAGE_ID").toString());
      query.append(new StringBuilder().append(" left join(select deal_id,'FFC' stage, maker_id from CR_BANK_ANALYSIS_DTL where deal_id=").append(CommonFunction.checkNull(txnid).trim()).append(" and rec_status='P') ffc on ffc.deal_id = b.deal_id and ffc.stage = b.DEAL_STAGE_ID").toString());
      query.append(new StringBuilder().append(" left join(select txn_id,'QC' stage, maker_id from cr_quality_check_dtl where txn_id=").append(CommonFunction.checkNull(txnid).trim()).append(" and TXN_TYPE='DC' and DECISION='P') qc on qc.txn_id = b.deal_id and qc.stage = b.DEAL_STAGE_ID").toString());
      query.append(new StringBuilder().append(" WHERE b.deal_id='").append(CommonFunction.checkNull(txnid).trim()).append("' and b.rec_status='A'").toString());
      query.append(" ORDER BY b.DEAL_MOVEMENT_ID");

      logger.info(new StringBuilder().append("In getOldDealMovementDetail   :  ").append(query).toString());
      DealMovementVo vo = null;
      ArrayList dealMovement = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getOldDealMovementDetail ").append(dealMovement.size()).toString());
      query = null;
      for (int i = 0; i < dealMovement.size(); i++)
      {
        ArrayList data = (ArrayList)dealMovement.get(i);
        if (data.size() > 0)
        {
          vo = new DealMovementVo();
          vo.setSeqNo(new StringBuilder().append(i + 1).append("").toString());
          vo.setStage(CommonFunction.checkNull(data.get(0)).trim());
          vo.setAction(CommonFunction.checkNull(data.get(1)));
          vo.setDealReceived(CommonFunction.checkNull(data.get(2)).trim());
          vo.setDealForwarded(CommonFunction.checkNull(data.get(3)).trim());
          vo.setDealForwardedUser(CommonFunction.checkNull(data.get(4)).trim());
          vo.setPendingWith(CommonFunction.checkNull(data.get(7)).trim());
          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public String insertDealMovementEdit(DealMovementVo vo)
  {
    logger.info("In insertDealMovementEdit() method of CreditProcessingDAOImpl");
    String status = "";

    ArrayList in = new ArrayList();
    ArrayList out = new ArrayList();
    ArrayList outMessages = new ArrayList();

    StringBuilder s1 = new StringBuilder();
    StringBuilder s2 = new StringBuilder();
    try
    {
      in.add(CommonFunction.checkNull(vo.getLbxDealNo()).trim());
      String date = CommonFunction.changeFormat(CommonFunction.checkNull(vo.getMakerDate()).trim());
      if (date.trim().equalsIgnoreCase(""))
        date = "0000-00-00";
      in.add(date);
      in.add(CommonFunction.checkNull(vo.getMakerId()).trim());

      logger.info(CommonFunction.checkNull(vo.getLbxDealNo()).trim());
      logger.info(CommonFunction.checkNull(vo.getMakerId()).trim());

      out.add(s1);
      out.add(s2);

      outMessages = (ArrayList)ConnectionDAO.callSP("DEAL_REASSIGNMENT_MAKER", in, out);
      s1.append(CommonFunction.checkNull(outMessages.get(0)));
      s2.append(CommonFunction.checkNull(outMessages.get(1)));

      logger.info(new StringBuilder().append("s1: ").append(s1).toString());
      logger.info(new StringBuilder().append("s2: ").append(s2).toString());
      if (s1.toString().equalsIgnoreCase("S"))
      {
        status = s1.toString();
      }
      else if (s1.toString().equalsIgnoreCase("E"))
      {
        status = s2.toString();
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      s1 = null;
      s2 = null;
    }
    return status;
  }

  public ArrayList getNewDealMovementDetail(String txnid, String type)
  {
    logger.info(new StringBuilder().append("In getNewDealMovementDetail......Dao Impl").append(txnid).toString());
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(" select s.STAGE_DESC,case when b.DEAL_FORWARDED<>'00-00-0000 00:00' and ifnull(b.DEAL_FORWARD_USER,'')<>'' THEN 'COMPLETED'");
      query.append(" when b.DEAL_FORWARDED='00-00-0000 00:00' and ifnull(b.DEAL_FORWARD_USER,'')='' then 'INITIATED' when b.DEAL_ACTION is null then 'PENDING' end as 'Deal Action',");
      query.append(new StringBuilder().append(" DATE_FORMAT(b.DEAL_RECEIVED,'").append(this.dateFormatWithTime).append("'),DATE_FORMAT(b.DEAL_FORWARDED,'").append(this.dateFormatWithTime).append("'), b.DEAL_FORWARD_USER,b.DEAL_RECEIVED_USER,b.DEAL_MOVEMENT_ID STAGE_SEQ_NO").toString());
      query.append(" from cr_deal_movement_dtl_edit b");
      query.append(" join cr_stage_m s on s.STAGE_ID=b.DEAL_STAGE_ID ");
      query.append(new StringBuilder().append(" WHERE b.deal_id='").append(CommonFunction.checkNull(txnid).trim()).append("' and b.rec_status='").append(type).append("'").toString());
      query.append(" ORDER BY b.DEAL_MOVEMENT_ID");

      logger.info(new StringBuilder().append("In getNewDealMovementDetail   :  ").append(query).toString());
      DealMovementVo vo = null;
      ArrayList dealMovement = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getNewDealMovementDetail ").append(dealMovement.size()).toString());
      query = null;
      for (int i = 0; i < dealMovement.size(); i++)
      {
        ArrayList data = (ArrayList)dealMovement.get(i);
        if (data.size() > 0)
        {
          vo = new DealMovementVo();
          vo.setStage(CommonFunction.checkNull(data.get(0)).trim());
          vo.setAction(CommonFunction.checkNull(data.get(1)));
          vo.setDealReceived(CommonFunction.checkNull(data.get(2)).trim());
          vo.setDealForwarded(CommonFunction.checkNull(data.get(3)).trim());
          vo.setDealForwardedUser(CommonFunction.checkNull(data.get(4)).trim());
          vo.setDealMovementId(CommonFunction.checkNull(data.get(6)).trim());
          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList<DealMovementVo> selectEditDealReassignmentData(String dealId, String checkId)
  {
    logger.info("In selectEditDealReassignmentData......Dao Impl");
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(" select b.DEAL_STAGE_ID,b.status,b.deal_movement_id, b.deal_id");
      query.append(" from cr_deal_movement_dtl_edit b");
      query.append(new StringBuilder().append(" WHERE b.deal_id='").append(CommonFunction.checkNull(dealId).trim()).append("'").toString());
      query.append(" and b.rec_status='P'");
      query.append(new StringBuilder().append(" and b.deal_MOVEMENT_ID='").append(CommonFunction.checkNull(checkId).trim()).append("'").toString());

      logger.info(new StringBuilder().append("In selectEditDealReassignmentData   :  ").append(query).toString());
      DealMovementVo vo = null;
      ArrayList dealMovement = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("selectEditDealReassignmentData ").append(dealMovement.size()).toString());
      query = null;
      for (int i = 0; i < dealMovement.size(); i++)
      {
        ArrayList data = (ArrayList)dealMovement.get(i);
        if (data.size() > 0)
        {
          vo = new DealMovementVo();
          vo.setStage(CommonFunction.checkNull(data.get(0)).trim());
          vo.setRecStatus(CommonFunction.checkNull(data.get(1)));
          vo.setDealMovementId(CommonFunction.checkNull(data.get(2)));
          vo.setLbxDealNo(CommonFunction.checkNull(data.get(3)));
          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public boolean saveDealReassignmentEdit(DealMovementVo vo)
  {
    boolean status = false;
    StringBuilder queryUpdate = new StringBuilder();
    ArrayList qryList = new ArrayList();
    queryUpdate.append(new StringBuilder().append("update cr_deal_movement_dtl_edit set REC_STATUS=?,STAGE_ACTION=?,REPLACE_USER_ID=?,ACTION_STAGE_ID=?,MAKER_ID=?,MAKER_DATE=DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) where DEAL_ID=?  AND DEAL_STAGE_ID=?  AND REC_STATUS='P'").toString());

    PrepStmtObject insertPrepStmtObject = new PrepStmtObject();

    insertPrepStmtObject.addString("P");

    if (CommonFunction.checkNull(vo.getStageAction()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getStageAction().toString());
    }
    if (CommonFunction.checkNull(vo.getLbxUserId()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getLbxUserId().toString());
    }
    if (CommonFunction.checkNull(vo.getInitiateStage()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getInitiateStage().toString());
    }
    if (CommonFunction.checkNull(vo.getMakerId()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getMakerId().toString());
    }

    if (CommonFunction.checkNull(vo.getMakerDate()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getMakerDate().toString());
    }

    if (CommonFunction.checkNull(vo.getLbxDealNo()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else {
      insertPrepStmtObject.addString(vo.getLbxDealNo().toString());
    }
    if (CommonFunction.checkNull(vo.getInitiateStage()).trim().equalsIgnoreCase(""))
      insertPrepStmtObject.addNull();
    else if (CommonFunction.checkNull(vo.getInitiateStage()).trim().equalsIgnoreCase("MDV"))
      insertPrepStmtObject.addString("POC");
    else if (CommonFunction.checkNull(vo.getInitiateStage()).trim().equalsIgnoreCase("POC"))
      insertPrepStmtObject.addString("POC");
    else {
      insertPrepStmtObject.addString(vo.getInitiateStage().toString());
    }

    insertPrepStmtObject.setSql(queryUpdate.toString());
    logger.info(new StringBuilder().append("IN saveDealReassignmentEdit() update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
    qryList.add(insertPrepStmtObject);
    logger.info(new StringBuilder().append("In saveDealReassignmentEdit ........ update query: ").append(queryUpdate).toString());
    try
    {
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      logger.info(new StringBuilder().append("In saveDealReassignmentEdit.........update status: ").append(status).toString());
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }

  public ArrayList getAllInitiateWorkFlowStage(String dealId)
  {
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();

      query.append("select DISTINCT W.deal_stage_id,S.STAGE_DESC from cr_deal_movement_dtl w ");
      query.append("join cr_stage_m S on  W.deal_stage_id=S.STAGE_ID AND W.deal_stage_id NOT IN('UNC','DD','CBL','QC') and w.DEAL_FORWARDED='0000-00-00 00:00:00' ");
      query.append(new StringBuilder().append(" and  DEAL_FORWARD_USER='' and  w.deal_id='").append(CommonFunction.checkNull(dealId).trim()).append("' and w.rec_status='A' ").toString());

      logger.info(new StringBuilder().append("query in getAllInitiateWorkFlowStage:--").append(query.toString()).toString());
      ArrayList getworkFlowStage = ConnectionDAO.sqlSelect(query.toString());

      query = null;

      for (int i = 0; i < getworkFlowStage.size(); i++)
      {
        ArrayList data = (ArrayList)getworkFlowStage.get(i);
        if (data.size() > 0) {
          CodeDescVo branchVo = new CodeDescVo();
          branchVo.setId(CommonFunction.checkNull(data.get(0)).trim());
          branchVo.setName(CommonFunction.checkNull(data.get(1)).trim());
          list.add(branchVo);
          if (CommonFunction.checkNull(data.get(0)).trim().equalsIgnoreCase("POC"))
          {
            branchVo = new CodeDescVo();
            branchVo.setId("MDV");
            branchVo.setName("MANUAL DEVIATION");
            list.add(branchVo);
          }
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getStageDetails(String dealId)
  {
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();

      query.append("select deal_stage_id,Stage_action,csm.stage_desc,case Stage_action when 'UR' then 'User ReAssignment' when 'SC' then 'Stage Correction' else '' end as Stage_action,w.replace_user_id,sec.user_name from cr_deal_movement_dtl_edit w join cr_stage_m csm on csm.stage_id=w.deal_stage_id ");
      query.append(" left join sec_user_m sec on w.replace_user_id=sec.user_id ");
      query.append(new StringBuilder().append(" where  deal_id='").append(CommonFunction.checkNull(dealId).trim()).append("' and w.rec_status='F' ").toString());

      logger.info(new StringBuilder().append("query in getStageDetails:--").append(query.toString()).toString());
      ArrayList getworkFlowStage = ConnectionDAO.sqlSelect(query.toString());

      query = null;

      for (int i = 0; i < getworkFlowStage.size(); i++)
      {
        ArrayList data = (ArrayList)getworkFlowStage.get(i);
        if (data.size() > 0) {
          DealMovementVo branchVo = new DealMovementVo();
          branchVo.setInitiateStage(CommonFunction.checkNull(data.get(0)).trim());
          branchVo.setStageAction(CommonFunction.checkNull(data.get(1)).trim());
          logger.info(new StringBuilder().append("StageAction Value--->>>").append(branchVo.getStageAction()).toString());
          branchVo.setInitiateStageDesc(CommonFunction.checkNull(data.get(2)).trim());
          branchVo.setStageActionDesc(CommonFunction.checkNull(data.get(3)).trim());
          branchVo.setLbxUserId(CommonFunction.checkNull(data.get(4)).trim());
          branchVo.setUserName(CommonFunction.checkNull(data.get(5)).trim());
          list.add(branchVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public String saveReassignDealAuthor(DealMovementVo vo, String dealId)
  {
    String status = "";
    ArrayList in = new ArrayList();
    ArrayList out = new ArrayList();
    ArrayList outMessages = new ArrayList();

    StringBuilder s1 = new StringBuilder();
    StringBuilder s2 = new StringBuilder();
    String decision = CommonFunction.checkNull(vo.getDecision());
    String authorRemarks = CommonFunction.checkNull(vo.getAuthorRemarks());
    logger.info(new StringBuilder().append("decision ------->>>").append(decision).toString());
    logger.info(new StringBuilder().append("authorRemarks---->>on daoImp method").append(authorRemarks).toString());
    try
    {
      logger.info("In collectDocuments proc( saveReassignDealAuthor )");
      logger.info(new StringBuilder().append("In saveReassignDealAuthor  dealId: ").append(dealId).toString());
      in.add(dealId);

      String date = CommonFunction.changeFormat(CommonFunction.checkNull(vo.getAuthorDate()).trim());
      if (date.trim().equalsIgnoreCase(""))
        date = "0000-00-00";
      in.add(date);
      in.add(CommonFunction.checkNull(vo.getAuthorId()).trim());
      in.add(decision);
      in.add(authorRemarks);

      out.add(s1);
      out.add(s2);
      outMessages = (ArrayList)ConnectionDAO.callSP("REASSIGNMENT_AUTHOR", in, out);
      if ((outMessages != null) && (outMessages.size() > 0))
      {
        s1.append(CommonFunction.checkNull(outMessages.get(0)));

        if ((s1 != null) && (s1.toString().equalsIgnoreCase("S")))
        {
          status = s1.toString();
          logger.info(new StringBuilder().append("Procedure s1----").append(s1).toString());
        }
        else if ((s1 != null) && (s1.toString().equalsIgnoreCase("E")))
        {
          s2.append(CommonFunction.checkNull(outMessages.get(1)));
          logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
          status = s2.toString();
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      s1 = null;
      s2 = null;
      in = null;
      out = null;
      outMessages = null;

      dealId = null;
    }

    return status;
  }

  public String validateSaveReassignDeal(String dealId)
  {
    String status = "";
    ArrayList in = new ArrayList();
    ArrayList out = new ArrayList();
    ArrayList outMessages = new ArrayList();

    StringBuilder s1 = new StringBuilder();
    StringBuilder s2 = new StringBuilder();
    try
    {
      logger.info("In validateSaveReassignDeal");
      logger.info(new StringBuilder().append("In validateSaveReassignDeal  dealId: ").append(dealId).toString());
      in.add(dealId);

      out.add(s1);
      out.add(s2);
      outMessages = (ArrayList)ConnectionDAO.callSP("VALIDATION_REASSIGNMENT_MAKER", in, out);
      if ((outMessages != null) && (outMessages.size() > 0))
      {
        s1.append(CommonFunction.checkNull(outMessages.get(0)));

        if ((s1 != null) && (s1.toString().equalsIgnoreCase("S")))
        {
          status = s1.toString();
          logger.info(new StringBuilder().append("Procedure s1----").append(s1).toString());
        }
        else if ((s1 != null) && (s1.toString().equalsIgnoreCase("E")))
        {
          s2.append(CommonFunction.checkNull(outMessages.get(1)));
          logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
          status = s2.toString();
        }
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      s1 = null;
      s2 = null;
      in = null;
      out = null;
      outMessages = null;

      dealId = null;
    }

    return status;
  }

  public boolean getDesionfromMaker(String dealId)
  {
    boolean status = false;
    logger.info(new StringBuilder().append("Deal No In creditProcessingDaoImpl getDesion :-").append(dealId).toString());
    StringBuffer query = new StringBuffer();
    query.append(new StringBuilder().append("Update CR_DEAL_REPROCESSING_DTL set REC_STATUS='F' where DEAL_ID ='").append(dealId).append("'  ").toString());
    ArrayList list = new ArrayList();
    list.add(query);
    try
    {
      status = ConnectionDAO.sqlInsUpdDelete(list);
      logger.info(new StringBuilder().append("In creditProcessingDaoImpl getRejectedDealNo").append(query.toString()).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      query = null;
      list.clear();
      list = null;
    }
    return status;
  }

  public ArrayList getRejectedDealNo(String dealId, String makerId, String businessDate)
  {
    logger.info(new StringBuilder().append("Deal No In creditProcessingDaoImpl getRejectedDealNo :-").append(dealId).toString());
    ArrayList list = new ArrayList();
    int count = 0;
    int count1 = 0;
    try
    {
      StringBuffer query = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();
      StringBuffer bufInsSqlTempCount1 = new StringBuffer();

      bufInsSqlTempCount1.append(new StringBuilder().append("SELECT count('DEAL_ID') FROM CR_DEAL_REPROCESSING_DTL  WHERE  DEAL_ID ='").append(dealId).append("'").toString());

      count1 = Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount1.toString()));
      logger.info(new StringBuilder().append("Count1 =================").append(count1).toString());
      logger.info(new StringBuilder().append("In bufInsSqlTempCount1 ====").append(bufInsSqlTempCount1.toString()).toString());

      query.append(new StringBuilder().append("SELECT DISTINCT D.DEAL_NO, C.CUSTOMER_NAME, D.MAKER_ID, D.Deal_ID FROM CR_DEAL_DTL D LEFT JOIN CR_DEAL_CUSTOMER_M C ON D.DEAL_CUSTOMER_ID = C.CUSTOMER_ID LEFT JOIN CR_DEAL_REPROCESSING_DTL A ON D.DEAL_ID = A.DEAL_ID WHERE D.REC_STATUS = 'X' AND D.DEAL_ID ='").append(dealId).append("' ").toString());

      if (count1 > 0)
      {
        query.append(" AND A.REC_STATUS NOT IN ('X','F')");
      }

      logger.info(new StringBuilder().append("In query =========").append(query.toString()).toString());

      bufInsSqlTempCount.append(new StringBuilder().append("SELECT count('D.DEAL_NO') FROM CR_DEAL_DTL D LEFT JOIN CR_DEAL_CUSTOMER_M C ON D.DEAL_CUSTOMER_ID = C.CUSTOMER_ID LEFT JOIN CR_DEAL_REPROCESSING_DTL A ON D.DEAL_ID = A.DEAL_ID WHERE D.REC_STATUS = 'X' AND D.DEAL_ID ='").append(dealId).append("' ").toString());

      if (count1 > 0)
      {
        bufInsSqlTempCount.append(" AND A.REC_STATUS NOT IN ('X','F')");
      }

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
      logger.info(new StringBuilder().append("Count*******************").append(count).toString());

      ArrayList rejectedDealList = ConnectionDAO.sqlSelect(query.toString());
      query = null;
      ReprocessingDealVo dcType = new ReprocessingDealVo();

      for (int i = 0; i < rejectedDealList.size(); i++)
      {
        ArrayList sublist = (ArrayList)rejectedDealList.get(i);
        if (sublist.size() > 0)
        {
          dcType.setDealId(CommonFunction.checkNull(sublist.get(3)).trim());
          dcType.setDealNo1(CommonFunction.checkNull(sublist.get(0)).trim());
          dcType.setDealNo(new StringBuilder().append("<a href=# onclick=showPopUp(").append(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(CommonFunction.checkNull(sublist.get(3)))).trim()).append(")").append(" >").append(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(sublist.get(0)))).append("</a>").toString());
          dcType.setCustomername(CommonFunction.checkNull(sublist.get(1)).trim());
          dcType.setUserName(CommonFunction.checkNull(sublist.get(2)).trim());
          dcType.setTotalRecordSize(count);
          list.add(dcType);
        }
      }

      logger.info(new StringBuilder().append("Deal ID ========").append(dcType.getDealId()).toString());
      logger.info(new StringBuilder().append("Deal NO ========").append(dcType.getDealNo1()).toString());

      if (count1 == 0)
      {
        boolean status = false;
        ArrayList qryList = new ArrayList();
        StringBuffer bufInsUpdSql = new StringBuffer();
        PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
        logger.info(new StringBuilder().append("Deal ID1 ========").append(dcType.getDealId()).toString());
        logger.info(new StringBuilder().append("Deal NO1 ========").append(dcType.getDealNo1()).toString());

        bufInsUpdSql.append("insert into CR_DEAL_REPROCESSING_DTL(DEAL_ID,deal_no,MAKER_ID,rec_status,MAKER_DATE)");
        bufInsUpdSql.append(" values( ");
        bufInsUpdSql.append(" ?,");
        bufInsUpdSql.append(" ?,");
        bufInsUpdSql.append(" ?,");
        bufInsUpdSql.append(" ?,");
        bufInsUpdSql.append(new StringBuilder().append(" DATE_ADD(STR_TO_DATE(?, '").append(this.dateFormatWithTime).append("'),INTERVAL CURTIME() HOUR_SECOND) )").toString());

        if (CommonFunction.checkNull(dcType.getDealId().trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(dcType.getDealId().trim());
        }
        if (CommonFunction.checkNull(dcType.getDealNo1().trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(dcType.getDealNo1().trim());
        }
        if (CommonFunction.checkNull(makerId.trim()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(makerId.trim());
        }
        insertPrepStmtObject.addString("P");
        insertPrepStmtObject.addString(businessDate.trim());
        logger.info(new StringBuilder().append("currenctdate-----").append(businessDate.trim()).toString());
        insertPrepStmtObject.setSql(bufInsUpdSql.toString());
        qryList.add(insertPrepStmtObject);
        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);

        logger.info(new StringBuilder().append("bufInsUpdSql **************************** : ").append(bufInsUpdSql.toString()).toString());
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getRejectedDealNoAuthor(String dealId)
  {
    logger.info(new StringBuilder().append("Deal No In creditProcessingDaoImpl getRejectedDealNoAuthor :-").append(dealId).toString());
    ArrayList list = new ArrayList();
    int count = 0;
    try
    {
      StringBuffer query = new StringBuffer();
      StringBuffer bufInsSqlTempCount = new StringBuffer();
      query.append(new StringBuilder().append("SELECT DISTINCT D.DEAL_NO, C.CUSTOMER_NAME, D.MAKER_ID, D.Deal_ID FROM CR_DEAL_DTL D LEFT JOIN CR_DEAL_CUSTOMER_M C ON D.DEAL_CUSTOMER_ID = C.CUSTOMER_ID LEFT JOIN CR_DEAL_REPROCESSING_DTL A ON D.DEAL_ID = A.DEAL_ID WHERE D.REC_STATUS = 'X' AND A.REC_STATUS = 'F' AND D.DEAL_ID ='").append(dealId).append("' ").toString());

      bufInsSqlTempCount.append(new StringBuilder().append("SELECT count('D.DEAL_NO') FROM CR_DEAL_DTL D LEFT JOIN CR_DEAL_CUSTOMER_M C ON D.DEAL_CUSTOMER_ID = C.CUSTOMER_ID LEFT JOIN CR_DEAL_REPROCESSING_DTL A ON D.DEAL_ID = A.DEAL_ID WHERE D.REC_STATUS = 'X' AND A.REC_STATUS = 'F' AND D.DEAL_ID ='").append(dealId).append("' ").toString());

      logger.info(new StringBuilder().append("bufInsSqlTempCount **************************** : ").append(bufInsSqlTempCount.toString()).toString());
      count = Integer.parseInt(ConnectionDAO.singleReturn(bufInsSqlTempCount.toString()));
      logger.info(new StringBuilder().append("In creditProcessingDaoImpl getRejectedDealNo").append(query.toString()).toString());
      logger.info(new StringBuilder().append("Count*******************").append(count).toString());
      ArrayList rejectedDealList = ConnectionDAO.sqlSelect(query.toString());
      query = null;

      for (int i = 0; i < rejectedDealList.size(); i++)
      {
        ArrayList sublist = (ArrayList)rejectedDealList.get(i);
        if (sublist.size() > 0)
        {
          ReprocessingDealVo dcType = new ReprocessingDealVo();
          dcType.setDealId(CommonFunction.checkNull(sublist.get(0)).trim());
          dcType.setDealNo(new StringBuilder().append("<a href=# onclick=showPopUp(").append(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(CommonFunction.checkNull(sublist.get(3)))).trim()).append(")").append(" >").append(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(sublist.get(0)))).append("</a>").toString());
          dcType.setCustomername(CommonFunction.checkNull(sublist.get(1)).trim());
          dcType.setUserName(CommonFunction.checkNull(sublist.get(2)).trim());
          dcType.setTotalRecordSize(count);
          list.add(dcType);
        }
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return list;
  }

  public String getDesionfromAuthor(ReprocessingDealVo vo, String dealId, String decision)
  {
    boolean status = false;
    logger.info("in getDesionfromAuthor ");
    logger.info(new StringBuilder().append("Deal No In creditProcessingDaoImpl getDesion :-").append(dealId).toString());
    logger.info(new StringBuilder().append("Decision  In creditProcessingDaoImpl getDesion :-").append(decision).toString());
    logger.info("In collectDocuments proc( saveReassignDealAuthor )");
    logger.info(new StringBuilder().append("In saveReassignDealAuthor  dealId: ").append(dealId).toString());

    String statusProc = "";
    String s1 = "";
    String s2 = "";
    ArrayList in = new ArrayList();
    ArrayList out = new ArrayList();
    ArrayList outMessages = new ArrayList();
    in.add(dealId);
    in.add(CommonFunction.checkNull(vo.getUserId()).trim());
    String date = CommonFunction.changeFormat(CommonFunction.checkNull(vo.getCurrentDate()).trim());
    logger.info(new StringBuilder().append("date in daoImp metho").append(date).toString());
    if (date.trim().equalsIgnoreCase(""))
      date = "0000-00-00";
    in.add(date);

    in.add(decision);

    out.add(s1);
    out.add(s2);
    try {
      outMessages = (ArrayList)ConnectionDAO.callSP("DEAL_REPROCESS", in, out);
      s1 = CommonFunction.checkNull(outMessages.get(0));
      s2 = CommonFunction.checkNull(outMessages.get(1));
      logger.info(new StringBuilder().append("s1  : ").append(s1).toString());
      logger.info(new StringBuilder().append("s2  : ").append(s2).toString());
      if (s1.equalsIgnoreCase("S"))
      {
        statusProc = s1;
        status = true;
        logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
      }
      else
      {
        statusProc = s2;
        logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally
    {
      s1 = null;
      s2 = null;
      in = null;
      out = null;
      outMessages = null;

      dealId = null;
    }

    return statusProc;
  }

  public ArrayList getworkFlowStages(String dealIdfromCM, String funId) {
    ArrayList list = new ArrayList();
    try {
      int Id = 0;
      String qualityCheckStatus = "N";
      funId = CommonFunction.checkNull(funId).trim();
      if (CommonFunction.checkNull(funId).trim().equalsIgnoreCase(""))
        funId = "0";
      Id = Integer.parseInt(funId);
      if (Id != 4000103)
      {
        String qualityCheckStatusQuery = "SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='EDITABLE_QUALITY_CHECK_DEAL'";
        logger.info(new StringBuilder().append("In searchDealForQualityCheck()  :  ").append(qualityCheckStatusQuery).toString());
        qualityCheckStatus = ConnectionDAO.singleReturn(qualityCheckStatusQuery);
      }
      StringBuilder query = new StringBuilder();
      if ((CommonFunction.checkNull(qualityCheckStatus).equalsIgnoreCase("")) || (CommonFunction.checkNull(qualityCheckStatus).equalsIgnoreCase("N")))
      {
        query.append(new StringBuilder().append("SELECT DISTINCT W.STAGE_ID,S.STAGE_DESC FROM cr_stage_workflow_m W join cr_stage_m S on W.STAGE_ID=S.STAGE_ID left join cr_deal_movement_dtl cdmd on W.stage_ID=cdmd.deal_stage_id  WHERE cdmd.DEAL_FORWARDED<>'00-00-0000 00:00' and ifnull(cdmd.DEAL_FORWARD_USER,'')<>'' and cdmd.rec_status<>'X' AND W.PRODUCT_ID=(select DEAL_PRODUCT_CATEGORY from cr_deal_loan_dtl where DEAL_ID='").append(dealIdfromCM).append("')  AND S.REC_STATUS='A' AND W.STAGE_ID NOT IN('DD','UNC') and cdmd.DEAL_ID='").append(dealIdfromCM).append("' ").toString());
      }
      else
      {
        query.append(new StringBuilder().append("SELECT DISTINCT W.STAGE_ID,S.STAGE_DESC FROM cr_stage_workflow_m W join cr_stage_m S on W.STAGE_ID=S.STAGE_ID left join cr_deal_movement_dtl cdmd on W.stage_ID=cdmd.deal_stage_id  WHERE cdmd.DEAL_FORWARDED<>'00-00-0000 00:00' and ifnull(cdmd.DEAL_FORWARD_USER,'')<>'' AND W.PRODUCT_ID=(select DEAL_PRODUCT_CATEGORY from cr_deal_loan_dtl where DEAL_ID='").append(dealIdfromCM).append("')  AND S.REC_STATUS='A' AND W.STAGE_ID NOT IN('DD','UNC','DC')").toString());
      }
      logger.info(new StringBuilder().append("query in getworkFlowStage:--").append(query.toString()).toString());
      ArrayList getworkFlowStage = ConnectionDAO.sqlSelect(query.toString());

      query = null;

      for (int i = 0; i < getworkFlowStage.size(); i++)
      {
        ArrayList data = (ArrayList)getworkFlowStage.get(i);
        if (data.size() > 0) {
          CodeDescVo branchVo = new CodeDescVo();
          branchVo.setId(CommonFunction.checkNull(data.get(0)).trim());
          branchVo.setName(CommonFunction.checkNull(data.get(1)).trim());
          list.add(branchVo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public String saveDealSendBackDetails(Object ob)
  {
    DealMovementVo vo = (DealMovementVo)ob;

    logger.info(new StringBuilder().append("In save & update Deal Send back Status......DealId:  ").append(vo.getLbxDealNo()).append("CURRENT_STAGE:  ").append(vo.getStage()).append("SEND_BACK_STAGE:  ").append(vo.getSendBackStage()).append("Reprocessing flag:  ").append(vo.getRpStageFlag()).append("Remarks:  ").append(vo.getRemarks()).append("UserId:  ").append(vo.getUserId()).append(" Send Back Date: ").append(vo.getSendBackDate()).toString());
    CallableStatement cst = null;
    String statusProc = "";
    String[] sendBackStageList = CommonFunction.checkNull(vo.getSendBackStage()).toString().trim().split("\\|");

    boolean status = false;
    try
    {
      for (int i = 0; i < sendBackStageList.length; i++)
      {
        vo.setSendBackStage(sendBackStageList[i]);
        logger.info(new StringBuilder().append("sendBackStageList::::::").append(sendBackStageList[i]).toString());
        ArrayList in = new ArrayList();
        ArrayList out = new ArrayList();
        ArrayList outMessages = new ArrayList();
        String s1 = "";
        String s2 = "";
        in.add(vo.getLbxDealNo());
        in.add(CommonFunction.checkNull(vo.getStage()));

        in.add(vo.getSendBackStage());
        in.add(vo.getRpStageFlag());
        in.add(vo.getRemarks());
        in.add(vo.getUserId());

        String date = CommonFunction.changeFormat(vo.getSendBackDate());
        in.add(date);
        out.add(s1);
        out.add(s2);

        logger.info(new StringBuilder().append("DEAL_SEND_BACK (").append(in.toString()).append(",").append(out.toString()).append(")").toString());
        outMessages = (ArrayList)ConnectionDAO.callSP("DEAL_SEND_BACK", in, out);
        s1 = CommonFunction.checkNull(outMessages.get(0));
        s2 = CommonFunction.checkNull(outMessages.get(1));
        logger.info(new StringBuilder().append("s1  : ").append(s1).toString());
        logger.info(new StringBuilder().append("s2  : ").append(s2).toString());
        if (s1.equalsIgnoreCase("S"))
        {
          statusProc = s1;
          status = true;
          logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
        }
        else
        {
          statusProc = s2;
          logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
        }
        in.clear();
        in = null;
        out.clear();
        out = null;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    } finally {
      vo = null;
      ob = null;
    }
    return statusProc;
  }

  public String getAssetCost(String dealId) {
    String dealAssetAmount = "";
    try {
      String dealasstAmt = new StringBuilder().append(" select round(DEAL_ASSET_COST) from cr_deal_loan_dtl where deal_id='").append(dealId).append("'  ").toString();
      String dealasstAmtValue = ConnectionDAO.singleReturn(dealasstAmt);
      logger.info(new StringBuilder().append("dealasstAmtValue:::").append(dealasstAmtValue).toString());
      if (dealasstAmtValue != "")
      {
        dealAssetAmount = dealasstAmtValue;
      }
      else
        dealAssetAmount = "0";
    } catch (Exception e) {
      e.printStackTrace();
    }
    return dealAssetAmount;
  }

  public String getAssetCollateralPropertyPincodeFlag()
  {
    logger.info("In getAssetCollateralPropertyPincodeFlag()");
    String ediFlag = "";
    try
    {
      StringBuilder query = new StringBuilder();
      query.append("select parameter_value from parameter_mst where parameter_key='ASSET_COLLATERAL_PROPERTY_PINCODE'");
      logger.info(new StringBuilder().append("In getAssetCollateralPropertyPincodeFlag() query  :  ").append(query.toString()).toString());
      ediFlag = ConnectionDAO.singleReturn(query.toString());
      logger.info(new StringBuilder().append("In getAssetCollateralPropertyPincodeFlag() ediFlag  :  ").append(ediFlag).toString());
    }
    catch (Exception e) {
      e.printStackTrace();
    }return ediFlag;
  }

  public ArrayList getCountryStateDistrictTahsilValue(String pincode)
  {
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(" SELECT A.PINCODE,E.ID,E.DESCRIPTION,E.DISTRICT_ID,B.DISTRICT_DESC,C.STATE_ID,C.STATE_DESC,D.COUNTRY_ID,D.COUNTRY_DESC FROM  com_pincode_m A  ");
      query.append(" left JOIN com_tehsil_m E ON A.TEHSIL_ID=E.ID ");
      query.append(" left JOIN COM_DISTRICT_M B ON E.DISTRICT_ID=B.DISTRICT_ID AND E.STATUS='A' AND B.REC_STATUS='A' ");
      query.append(" left JOIN com_state_m C ON B.STATE_ID=C.STATE_ID AND C.REC_STATUS='A' ");
      query.append(" left JOIN com_country_m D ON D.COUNTRY_ID=C.COUNTRY_ID AND D.REC_STATUS='A' ");
      query.append(new StringBuilder().append(" WHERE A.id= '").append(pincode).append("'").toString());
      logger.info(new StringBuilder().append("getCountryStateDistrictTahsilValue: ").append(query.toString()).toString());
      CollateralVo vo = null;
      ArrayList source = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("getCountryStateDistrictTahsilValue : ").append(source.size()).toString());

      query = null;

      for (int i = 0; i < source.size(); i++)
      {
        ArrayList subsource = (ArrayList)source.get(i);
        if (subsource.size() > 0)
        {
          vo = new CollateralVo();
          vo.setPincode(CommonFunction.checkNull(subsource.get(0)).trim());
          vo.setTxnTahsilHID(CommonFunction.checkNull(subsource.get(1)).trim());
          vo.setTahsil(CommonFunction.checkNull(subsource.get(2)).trim());
          vo.setTxtDistCode(CommonFunction.checkNull(subsource.get(3)).trim());
          vo.setDist(CommonFunction.checkNull(subsource.get(4)).trim());
          vo.setTxtStateCode(CommonFunction.checkNull(subsource.get(5)).trim());
          vo.setState(CommonFunction.checkNull(subsource.get(6)).trim());
          vo.setTxtCountryCode(CommonFunction.checkNull(subsource.get(7)).trim());
          vo.setCountry(CommonFunction.checkNull(subsource.get(8)).trim());
          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }
  public ArrayList getdefaultcountry() {
    ArrayList list = new ArrayList();
    try {
      logger.info("In getdefaultcountry()........");
      StringBuilder query = new StringBuilder();

      query.append("SELECT PARAMETER_VALUE,PARAMETER_DESC FROM parameter_mst WHERE PARAMETER_KEY='DEFAULT_COUNTRY'");
      logger.info(new StringBuilder().append("In getdefaultcountry...............query...........DAOImpl").append(query.toString()).toString());
      CollateralVo vo = new CollateralVo();
      ArrayList country = ConnectionDAO.sqlSelect(query.toString());

      query = null;
      int size = country.size();

      for (int i = 0; i < size; i++) {
        ArrayList data = (ArrayList)country.get(i);
        if (data.size() > 0) {
          vo.setCountry(CommonFunction.checkNull(data.get(1)).trim());
          vo.setTxtCountryCode(CommonFunction.checkNull(data.get(0)).trim());

          list.add(vo);
        }
        data = null;
        vo = null;
      }
      country = null;
    } catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public ArrayList<Object> getInsuranceProviders() {
    logger.info("in getInsuranceProviders() of insurance provider. ");
    ArrayList list = new ArrayList();
    try
    {
      String query = "select a.CHARGE_id,b.charge_desc from cr_insurance_grid_m a join com_charge_code_m b on a.CHARGE_id=b.CHARGE_CODE group by b.charge_desc";
      logger.info(new StringBuilder().append("in getInsuranceProviders() of CreditProcessingDAOImpl Query :  ").append(query).toString());
      CpInsuranceVo vo = null;
      ArrayList source = ConnectionDAO.sqlSelect(query);
      int size = source.size();
      for (int i = 0; i < size; i++)
      {
        ArrayList subEduDetail = (ArrayList)source.get(i);
        if (subEduDetail.size() > 0)
        {
          vo = new CpInsuranceVo();
          vo.setChargeId(CommonFunction.checkNull(subEduDetail.get(0)).toString());
          vo.setInsuranceProvider(CommonFunction.checkNull(subEduDetail.get(1)).toString());

          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getInsuranceData(String id) {
    ArrayList list = new ArrayList();
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append(" select round(A.deal_loan_amount_new),TENURE_IN_MONTH_TO_YEAR(A.deal_tenure/12),floor (datediff(m.parameter_value,C.CUSTOMER_DOB)/365) as age,round(A.deal_loan_amount_new),TENURE_IN_MONTH_TO_YEAR(A.deal_tenure/12)  from cr_deal_loan_dtl A join cr_deal_customer_role B  on A.deal_id=B.DEAL_ID  join cr_deal_customer_m C on B.deal_customer_id=C.customer_id  left join parameter_mst m on (1=1 and m.parameter_key='BUSINESS_DATE')   where A.DEAL_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(id)).trim()).append("' limit 1").toString());

      CpInsuranceVo vo = null;
      ArrayList insurance = ConnectionDAO.sqlSelect(query.toString());

      query = null;
      int size = insurance.size();
      for (int i = 0; i < size; i++)
      {
        ArrayList header1 = (ArrayList)insurance.get(i);
        if ((header1 != null) && (header1.size() > 0))
        {
          vo = new CpInsuranceVo();
          vo.setSumAssured(CommonFunction.checkNull(header1.get(0)).trim());
          vo.setTenure(CommonFunction.checkNull(header1.get(1)).trim());
          vo.setAge(CommonFunction.checkNull(header1.get(2)).trim());
          vo.setSum(CommonFunction.checkNull(header1.get(3)).trim());
          vo.setPolicyTenure(CommonFunction.checkNull(header1.get(4)).trim());
          list.add(vo);
          logger.info(new StringBuilder().append("to check..:::").append(list).toString());
          vo = null;
        }
        header1.clear();
        header1 = null;
      }
      insurance.clear();
      insurance = null;
      id = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return list;
  }

  public ArrayList vehicleApprovalGridDetails(String dealId)
  {
    logger.info("Inside Vehicle Approval Grid Details to fetch vehicle details:");
    logger.info(new StringBuilder().append("dealId is ").append(dealId).toString());

    ArrayList list = new ArrayList();
    LoanDetailForCMVO vo = null;
    try
    {
      StringBuilder query = new StringBuilder();

      query.append("SELECT ASSET_NEW_OLD,ASSET_MANUFATURER,VEHICLE_MODEL from cr_deal_dtl A ");
      query.append("JOIN cr_deal_collateral_m B ON A.deal_id = B.deal_id ");
      query.append("JOIN cr_asset_collateral_m C ON C.asset_id = B.assetid ");
      query.append(new StringBuilder().append("where A.deal_id ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("'").toString());
      logger.info(new StringBuilder().append("query in vehicleApprovalGridDetails : ").append(query).toString());

      ArrayList dataList = ConnectionDAOforEJB.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("vehicleApprovalGridDetails... ").append(dataList.size()).toString());

      query = null;

      for (int i = 0; i < dataList.size(); i++)
      {
        ArrayList data = (ArrayList)dataList.get(i);

        if (data.size() > 0)
        {
          vo = new LoanDetailForCMVO();
          vo.setVehicleType(CommonFunction.checkNull(data.get(0)));
          vo.setManufactId(CommonFunction.checkNull(data.get(1)));
          vo.setModelDescId(CommonFunction.checkNull(data.get(2)));
          list.add(vo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return list;
  }

  public String checkLTV(String dealId, String vehicleType, String manufacturer, String vehicleModel)
  {
    String value = "";
    String approvedBy = "";
    boolean status = false;
    Float LTV = Float.valueOf(0.0F);
    Float chkLTV = Float.valueOf(0.0F);
    Float chkBranchLTV = Float.valueOf(0.0F);
    Float chkNationalLTV = Float.valueOf(0.0F);
    Float chkHOLTV = Float.valueOf(0.0F);
    Float gridAmt = Float.valueOf(0.0F);
    Float chkBranchAmt = Float.valueOf(0.0F);
    Float chkNationalAmt = Float.valueOf(0.0F);
    Float chkHOAmt = Float.valueOf(0.0F);

    ArrayList list = new ArrayList();
    LoanDetailForCMVO vo = null;
    try
    {
      StringBuilder query = new StringBuilder();
      StringBuffer bufInsSql = null;
      PrepStmtObject insertPrepStmtObject = null;
      ArrayList qryList = new ArrayList();
      ArrayList delQryList = new ArrayList();

      String queryScheme = new StringBuilder().append("select deal_scheme from cr_deal_loan_dtl where deal_id=").append(dealId).toString();
      String scheme = ConnectionDAO.singleReturn(queryScheme);
      String queryProduct = new StringBuilder().append("select deal_product from cr_deal_loan_dtl where deal_id=").append(dealId).toString();
      String product = ConnectionDAO.singleReturn(queryProduct);

      if (vehicleType.equalsIgnoreCase("N"))
      {
        ArrayList checkList = new ArrayList();

        String queryLTV = new StringBuilder().append("select DEAL_MARGIN_RATE from cr_deal_loan_dtl where deal_id=").append(dealId).toString();
        chkLTV = Float.valueOf(Float.parseFloat(ConnectionDAO.singleReturn(queryLTV)));

        LTV = Float.valueOf(100.0F - chkLTV.floatValue());

        query.append(new StringBuilder().append("select ifnull(BRANCH_AMT,0),ifnull(NATIONAL_HEAD_AMT,0),ifnull(HEAD_OFFICE_AMT,0) from com_vehicle_approval_grid A LEFT JOIN CR_MAKE_MODEL_MASTER B ON A.MODEL=B.MAKE_MODEL_ID where A.PRODUCT_ID='").append(CommonFunction.checkNull(product)).append("' AND A.SCHEME_ID='").append(CommonFunction.checkNull(scheme)).append("' AND A.VEHICLE_TYPE='").append(CommonFunction.checkNull(vehicleType)).append("' AND B.MODEL='").append(CommonFunction.checkNull(vehicleModel)).append("' AND A.MANUFACTURER='").append(CommonFunction.checkNull(manufacturer)).append("'").toString());
        logger.info(new StringBuilder().append("query in checkLTV : ").append(query).toString());

        checkList = ConnectionDAOforEJB.sqlSelect(query.toString());
        logger.info(new StringBuilder().append("In checkLTV : ").append(checkList.size()).toString());

        if (checkList.size() > 0)
        {
          for (int i = 0; i < checkList.size(); i++)
          {
            ArrayList data = (ArrayList)checkList.get(i);

            if (data.size() > 0)
            {
              vo = new LoanDetailForCMVO();
              vo.setBranchAmt(CommonFunction.checkNull(data.get(0)));
              vo.setNationalAmt(CommonFunction.checkNull(data.get(1)));
              vo.setHoAmt(CommonFunction.checkNull(data.get(2)));

              list.add(vo);
            }
          }

          chkBranchLTV = Float.valueOf(Float.parseFloat(CommonFunction.checkNull(vo.getBranchAmt())));
          chkNationalLTV = Float.valueOf(Float.parseFloat(CommonFunction.checkNull(vo.getNationalAmt())));
          chkHOLTV = Float.valueOf(Float.parseFloat(CommonFunction.checkNull(vo.getHoAmt())));

          logger.info(new StringBuilder().append("LTV...... : ").append(LTV).toString());
          logger.info(new StringBuilder().append("BranchLTV...... : ").append(chkBranchLTV).toString());
          logger.info(new StringBuilder().append("NationalLTV.... : ").append(chkNationalLTV).toString());
          logger.info(new StringBuilder().append("HeadOfficeLTV.. : ").append(chkHOLTV).toString());
        }

        if ((LTV.floatValue() >= 0.0F) && (LTV.floatValue() <= chkBranchLTV.floatValue()))
        {
          logger.info("BranchAmount LTV to be forwarded.");
          approvedBy = "BALTV";
        }
        else if ((LTV.floatValue() > chkBranchLTV.floatValue()) && (LTV.floatValue() <= chkNationalLTV.floatValue()))
        {
          logger.info("NationalAmount LTV to be forwarded.");
          approvedBy = "NALTV";
        }
        else if ((LTV.floatValue() > chkNationalLTV.floatValue()) && (chkNationalLTV.floatValue() != 0.0F))
        {
          approvedBy = "HOALTV";
        }
        else
        {
          approvedBy = "NOLTV";
        }

      }
      else
      {
        ArrayList checkList = new ArrayList();
        String queryAmount = new StringBuilder().append("select DEAL_LOAN_AMOUNT from cr_deal_loan_dtl where deal_id=").append(dealId).toString();
        gridAmt = Float.valueOf(Float.parseFloat(ConnectionDAO.singleReturn(queryAmount)));
        String queryYear = new StringBuilder().append("select VEHICLE_MANUFACTURING_YEAR from cr_deal_dtl A JOIN cr_deal_collateral_m B ON A.deal_id = B.DEAL_ID JOIN cr_asset_collateral_m C ON B.ASSETID = C.ASSET_ID where A.deal_id =").append(dealId).toString();
        String manufacturYear = ConnectionDAO.singleReturn(queryYear);

        query.append(new StringBuilder().append("select ifnull(GRID_BRANCH_AMT,0),ifnull(GRID_NATIONAL_HEAD_AMT,0),ifnull(GRID_HEAD_OFFICE_AMT,0) from com_old_vehicle_approval_grid A LEFT JOIN com_vehicle_approval_grid B ON A.VEHICLE_APPROVAL_ID=B.VEHICLE_APPROVAL_ID LEFT JOIN CR_MAKE_MODEL_MASTER C ON B.MODEL=C.MAKE_MODEL_ID where B.PRODUCT_ID='").append(CommonFunction.checkNull(product)).append("' and B.SCHEME_ID='").append(CommonFunction.checkNull(scheme)).append("' and B.VEHICLE_TYPE='").append(CommonFunction.checkNull(vehicleType)).append("' and C.MODEL='").append(CommonFunction.checkNull(vehicleModel)).append("'   and B.MANUFACTURER='").append(CommonFunction.checkNull(manufacturer)).append("' and A.MANUFACTURING_YEAR='").append(CommonFunction.checkNull(manufacturYear)).append("'").toString());
        logger.info(new StringBuilder().append("query in checkLTV : ").append(query).toString());

        checkList = ConnectionDAOforEJB.sqlSelect(query.toString());
        logger.info(new StringBuilder().append("In checkLTV : ").append(checkList.size()).toString());

        if (checkList.size() > 0)
        {
          for (int i = 0; i < checkList.size(); i++)
          {
            ArrayList data = (ArrayList)checkList.get(i);

            if (data.size() > 0)
            {
              vo = new LoanDetailForCMVO();
              vo.setGridBranchAmt(CommonFunction.checkNull(data.get(0)));
              vo.setGridNationalAmt(CommonFunction.checkNull(data.get(1)));
              vo.setGridHOAmt(CommonFunction.checkNull(data.get(2)));
              list.add(vo);
            }
          }

          chkBranchAmt = Float.valueOf(Float.parseFloat(CommonFunction.checkNull(vo.getGridBranchAmt())));
          chkNationalAmt = Float.valueOf(Float.parseFloat(CommonFunction.checkNull(vo.getGridNationalAmt())));
          chkHOAmt = Float.valueOf(Float.parseFloat(CommonFunction.checkNull(vo.getGridHOAmt())));

          logger.info(new StringBuilder().append("Loan Amount...... : ").append(gridAmt).toString());
          logger.info(new StringBuilder().append("Branch Amount...... : ").append(chkBranchAmt).toString());
          logger.info(new StringBuilder().append("National Amount.... : ").append(chkNationalAmt).toString());
          logger.info(new StringBuilder().append("Head Office Amount.. : ").append(chkHOAmt).toString());
        }

        if ((gridAmt.floatValue() >= 0.0F) && (gridAmt.floatValue() <= chkBranchAmt.floatValue()))
        {
          logger.info("BranchAmount to be forwarded.");
          approvedBy = "BA";
        }
        else if ((gridAmt.floatValue() > chkBranchAmt.floatValue()) && (gridAmt.floatValue() <= chkNationalAmt.floatValue()))
        {
          logger.info("NationalAmount to be forwarded.");
          approvedBy = "NA";
        }
        else if ((gridAmt.floatValue() > chkNationalAmt.floatValue()) && (chkNationalAmt.floatValue() != 0.0F))
        {
          approvedBy = "HOA";
        }
        else
        {
          approvedBy = "NOLTV";
        }
      }

      logger.info(new StringBuilder().append("ApprovedBy..... : ").append(approvedBy).toString());

      bufInsSql = new StringBuffer();
      bufInsSql.append(new StringBuilder().append("delete from CR_DEAL_APPROVEDBY_DTL where DEAL_ID='").append(dealId).append("'").toString());
      delQryList.add(bufInsSql.toString());
      status = ConnectionDAO.sqlInsUpdDelete(delQryList);

      logger.info("Insertion for cr_deal_approvedBy_dtl ");
      bufInsSql = new StringBuffer();
      insertPrepStmtObject = new PrepStmtObject();
      bufInsSql.append("insert into CR_DEAL_APPROVEDBY_DTL (DEAL_ID,APPROVED_BY)");
      bufInsSql.append("values(");
      bufInsSql.append("?,");
      bufInsSql.append("?)");

      if (CommonFunction.checkNull(dealId).equalsIgnoreCase("")) {
        insertPrepStmtObject.addNull();
      }
      else {
        insertPrepStmtObject.addString(dealId);
      }
      if (CommonFunction.checkNull(approvedBy).equalsIgnoreCase("")) {
        insertPrepStmtObject.addNull();
      }
      else {
        insertPrepStmtObject.addString(approvedBy);
      }

      insertPrepStmtObject.setSql(bufInsSql.toString());
      qryList.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("Insert query : ").append(insertPrepStmtObject.printQuery()).toString());

      status = ConnectionDAOforEJB.sqlInsUpdDeletePrepStmt(qryList);
    } catch (Exception e) {
      e = 
        e;

      e.printStackTrace();
    }
    finally
    {
    }
    return approvedBy;
  }

  public boolean insertCpInsurance(CpInsuranceVo vo, String dealId)
  {
    boolean status = false;
    boolean status1 = false;
    String sum_assure = "";
    String sum_assure_deal_loan = "";
    int sum_assure1 = 0;
    int sum_assure_deal_loan1 = 0;
    String insuranceProvider = vo.getInsuranceProvider();
    String nomineeName = vo.getNomineeName();
    String dateOfbirth = vo.getDateOfbirth();
    String gender = vo.getGender();
    String relationshp = vo.getInsuranceProvider();
    String sumAssured = vo.getSumAssured();
    String tenure = vo.getTenure();
    String cust = vo.getCustId();
    String sumAssuPer = vo.getSumAssuPer();
    String custList = "";
    String insuranceProduct = vo.getInsuranceProduct();
    if (insuranceProduct.contains("|"))
    {
      insuranceProduct = insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
      vo.setInsuranceProduct(insuranceProduct);
    }
    String propertyType = vo.getPropertyType();
    custList = cust.replace("|", ",");
    String insId = "";
    char[] chars = custList.toCharArray();
    String s1 = "";
    for (int i = 0; i < chars.length - 1; i++)
    {
      s1 = new StringBuilder().append(s1).append(chars[i]).toString();
    }
    logger.info(new StringBuilder().append("s1::::::").append(s1).toString());
    String newCust = s1.replace(",", "|");
    logger.info(new StringBuilder().append("newCust::::::").append(newCust).toString());
    String customerConstitution = "";
    String customerConstitutionValue = "";
    String insurancePremium = vo.getInsurancePremium();
    String chargesOnInsurance = vo.getChargesOnInsurance();
    String makerId = vo.getMakerId();
    String makerDate = vo.getMakerDate();
    String age1 = vo.getAge1();
    String qry1 = new StringBuilder().append("select deal_loan_id from cr_deal_loan_dtl where deal_id='").append(dealId).append("'").toString();
    String dealLoanId = ConnectionDAO.singleReturn(qry1);

    String qry2 = new StringBuilder().append("select replace(group_concat(round (datediff(sysdate(),CUSTOMER_DOB)/365)),',','|') from cr_deal_customer_m  where customer_id in (").append(s1).append(")").toString();
    String ageList = ConnectionDAO.singleReturn(qry2);
    vo.setAge1(ageList);
    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = null;
    PrepStmtObject insertPrepStmt = null;
    StringBuilder bufInsSql = null;

    customerConstitution = new StringBuilder().append("SELECT replace(group_concat(CUSTOMER_CONSTITUTION),',','|') FROM cr_deal_customer_m WHERE customer_id in (").append(s1).append(")").toString();
    customerConstitutionValue = ConnectionDAO.singleReturn(customerConstitution);

    logger.info(new StringBuilder().append("customerConstitutionValue:::").append(customerConstitutionValue).toString());
    try
    {
      String sqlquery21 = new StringBuilder().append("select insurance_id from cr_insurance_dtl where deal_id='").append(dealId).append("' and charge_id= '").append(insuranceProvider).append("'  and product_id='").append(insuranceProduct).append("' and customer_id ='").append(newCust).append("'  ").toString();
      insId = ConnectionDAO.singleReturn(sqlquery21);

      String sqlquery1 = new StringBuilder().append("select insurance_id from cr_insurance_dtl where deal_id='").append(dealId).append("' and charge_id= '").append(insuranceProvider).append("'  and product_id='").append(insuranceProduct).append("' and customer_id ='").append(newCust).append("'  ").toString();
      status = ConnectionDAO.checkStatus(sqlquery1);
      if (status)
      {
        insertPrepStmtObject = new PrepStmtObject();
        bufInsSql = new StringBuilder();
        RefreshFlagVo vo1 = new RefreshFlagVo();
        if ((dealId != null) && (!dealId.trim().equalsIgnoreCase("")))
          vo1.setRecordId(Integer.parseInt(dealId.trim()));
        vo1.setTabIndex(16);
        vo1.setModuleName("CP");
        RefreshFlagValueInsert.updateRefreshFlag(vo1);

        bufInsSql.append(new StringBuilder().append("UPDATE CR_INSURANCE_DTL SET DEAL_ID=?,DEAL_LOAN_ID=?, CHARGE_ID=?,SUM_ASSURED=?,loan_TENURE=?,AGE=?,INSURANCE_PREMIUM=?,CHARGES_ON_PREMIUM=?,OTHER_CHARGE_ID=?,MAKER_ID=?,MAKER_DATE=STR_TO_DATE(?,'").append(this.dateFormat).append("'),CUSTOMER_ID=?,AMOUNT_TO_BE_FINANCED=?,PRODUCT_ID=?,POLICY_TYPE=?,NOMINEE_NAME=?,NOMINEE_DOB=STR_TO_DATE(?,'").append(this.dateFormat).append("'),NOMINEE_RELATION=?,GENDER=?,policy_tenure=?,SUM_ASSURED_PERCENTAGE=?,property_type=?,customer_constitution=?, ").append(" NOMINEE_NAME1=?,GENDER1=?,NOMINEE_DOB1=STR_TO_DATE(?,'").append(this.dateFormat).append("'),NOMINEE_RELATION1=?,NOMINEE_NAME2=?,GENDER2=?,NOMINEE_DOB2=STR_TO_DATE(?,'").append(this.dateFormat).append("'),NOMINEE_RELATION2=?,NOMINEE_NAME3=?,GENDER3=?,NOMINEE_DOB3=STR_TO_DATE(?,'").append(this.dateFormat).append("'),NOMINEE_RELATION3=?,NOMINEE_NAME4=?,GENDER4=?,NOMINEE_DOB4=STR_TO_DATE(?,'").append(this.dateFormat).append("'),NOMINEE_RELATION4=?,NOMINEE_PERCENTAGE=?,NOMINEE_PERCENTAGE1=?,NOMINEE_PERCENTAGE2=?,NOMINEE_PERCENTAGE3=?,NOMINEE_PERCENTAGE4=?,ADDR=?,ADDR1=?,ADDR2=?,ADDR3=?,ADDR4=?, ").append(" NOMINEE_PREFIX=?,NOMINEE_MNAME=?,NOMINEE_LNAME=?,MARITAL_STATUS=?,NOMINEE_AREA=?,NOMINEE_CITY=?,NOMINEE_STATE=?,NOMINEE_PIN=?,NOMINEE_PREFIX1=?,NOMINEE_MNAME1=?,NOMINEE_LNAME1=?,MARITAL_STATUS1=?,NOMINEE_AREA1=?,NOMINEE_CITY1=?,NOMINEE_STATE1=?,NOMINEE_PIN1=?,NOMINEE_PREFIX2=?,NOMINEE_MNAME2=?,NOMINEE_LNAME2=?,MARITAL_STATUS2=?,NOMINEE_AREA2=?,NOMINEE_CITY2=?,NOMINEE_STATE2=?,NOMINEE_PIN2=?, ").append(" NOMINEE_PREFIX3=?,NOMINEE_MNAME3=?,NOMINEE_LNAME3=?,MARITAL_STATUS3=?,NOMINEE_AREA3=?,NOMINEE_CITY3=?,NOMINEE_STATE3=?,NOMINEE_PIN3=?,NOMINEE_PREFIX4=?,NOMINEE_MNAME4=?,NOMINEE_LNAME4=?,MARITAL_STATUS4=?,NOMINEE_AREA4=?,NOMINEE_CITY4=?,NOMINEE_STATE4=?,NOMINEE_PIN4=?,NOMINEE_ADDRESS_TYPE=?,NOMINEE_STREET=?,NOMINEE_ADDRESS_TYPE1=?,NOMINEE_STREET1=?,NOMINEE_ADDRESS_TYPE2=?,NOMINEE_STREET2=?, NOMINEE_ADDRESS_TYPE3=?,NOMINEE_STREET3=?,NOMINEE_ADDRESS_TYPE4=?,NOMINEE_STREET4=?").toString());

        bufInsSql.append(" where DEAL_ID=? and CUSTOMER_ID=? and insurance_id=? ");

        if (CommonFunction.checkNull(dealId).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(dealId.toUpperCase().trim());
        }

        if (CommonFunction.checkNull(dealLoanId).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(dealLoanId.toUpperCase().trim());
        }
        if (CommonFunction.checkNull(insuranceProvider).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(insuranceProvider.toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getSumAssured()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getSumAssured());
        }
        if (CommonFunction.checkNull(vo.getTenure()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getTenure());
        }
        if (CommonFunction.checkNull(vo.getAge1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getAge1());
        }
        if (CommonFunction.checkNull(vo.getInsurancePremium()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getInsurancePremium());
        }
        if (CommonFunction.checkNull(vo.getChargesOnInsurance()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getChargesOnInsurance());
        }
        if (CommonFunction.checkNull(vo.getLbxOtherChargeId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getLbxOtherChargeId());
        }
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerId());
        }
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getMakerDate());
        }

        if (CommonFunction.checkNull(newCust).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(newCust);
        }
        if (CommonFunction.checkNull(vo.getPremiumFinanced()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getPremiumFinanced());
        }
        if (CommonFunction.checkNull(vo.getInsuranceProduct()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getInsuranceProduct());
        }
        if (CommonFunction.checkNull(vo.getPolicyType()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getPolicyType());
        }
        if (CommonFunction.checkNull(vo.getNomineeName()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getNomineeName());
        }
        if (CommonFunction.checkNull(vo.getDateOfbirth()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getDateOfbirth());
        }
        if (CommonFunction.checkNull(vo.getRelationshp()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getRelationshp());
        }
        if (CommonFunction.checkNull(vo.getGender()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getGender());
        }

        if (CommonFunction.checkNull(vo.getPolicyTenure()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getPolicyTenure());
        }

        if (CommonFunction.checkNull(vo.getSumAssuPer()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getSumAssuPer());
        }
        if (CommonFunction.checkNull(vo.getPropertyType()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getPropertyType());
        }

        if (CommonFunction.checkNull(customerConstitutionValue).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(customerConstitutionValue);
        }
        if (CommonFunction.checkNull(vo.getNomineeName1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getNomineeName1());
        }
        if (CommonFunction.checkNull(vo.getGender1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getGender1());
        }
        if (CommonFunction.checkNull(vo.getDateOfbirth1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getDateOfbirth1());
        }
        if (CommonFunction.checkNull(vo.getRelationshp1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getRelationshp1());
        }
        if (CommonFunction.checkNull(vo.getNomineeName2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getNomineeName2());
        }
        if (CommonFunction.checkNull(vo.getGender2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getGender2());
        }
        if (CommonFunction.checkNull(vo.getDateOfbirth2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getDateOfbirth2());
        }
        if (CommonFunction.checkNull(vo.getRelationshp2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getRelationshp2());
        }
        if (CommonFunction.checkNull(vo.getNomineeName3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getNomineeName3());
        }
        if (CommonFunction.checkNull(vo.getGender3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getGender3());
        }
        if (CommonFunction.checkNull(vo.getDateOfbirth3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getDateOfbirth3());
        }
        if (CommonFunction.checkNull(vo.getRelationshp3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getRelationshp3());
        }
        if (CommonFunction.checkNull(vo.getNomineeName4()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getNomineeName4());
        }
        if (CommonFunction.checkNull(vo.getGender4()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getGender4());
        }
        if (CommonFunction.checkNull(vo.getDateOfbirth4()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getDateOfbirth4());
        }
        if (CommonFunction.checkNull(vo.getRelationshp4()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getRelationshp4());
        }
        if (CommonFunction.checkNull(vo.getPercentage()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getPercentage());
        }
        if (CommonFunction.checkNull(vo.getPercentage1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getPercentage1());
        }
        if (CommonFunction.checkNull(vo.getPercentage2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getPercentage2());
        }
        if (CommonFunction.checkNull(vo.getPercentage3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getPercentage3());
        }
        if (CommonFunction.checkNull(vo.getPercentage4()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getPercentage4());
        }
        if (CommonFunction.checkNull(vo.getAddr()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getAddr());
        }
        if (CommonFunction.checkNull(vo.getAddr1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getAddr1());
        }
        if (CommonFunction.checkNull(vo.getAddr2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getAddr2());
        }
        if (CommonFunction.checkNull(vo.getAddr3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getAddr3());
        }
        if (CommonFunction.checkNull(vo.getAddr4()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getAddr4());
        }

        if (CommonFunction.checkNull(vo.getsPrefix()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getsPrefix());
        if (CommonFunction.checkNull(vo.getNomineeMName()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getNomineeMName());
        if (CommonFunction.checkNull(vo.getNomineeLName()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getNomineeLName());
        if (CommonFunction.checkNull(vo.getSmaritalStatus()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getSmaritalStatus());
        if (CommonFunction.checkNull(vo.getSnomineeArea()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getSnomineeArea());
        if (CommonFunction.checkNull(vo.getSnomineeCity()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getSnomineeCity());
        if (CommonFunction.checkNull(vo.getTxtStateCode()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getTxtStateCode());
        if (CommonFunction.checkNull(vo.getSnomineePin()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getSnomineePin());
        if (CommonFunction.checkNull(vo.getsPrefix1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getsPrefix1());
        if (CommonFunction.checkNull(vo.getNomineeMName1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getNomineeMName1());
        if (CommonFunction.checkNull(vo.getNomineeLName1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getNomineeLName1());
        if (CommonFunction.checkNull(vo.getSmaritalstatus1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getSmaritalstatus1());
        if (CommonFunction.checkNull(vo.getsNomineeArea1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getsNomineeArea1());
        if (CommonFunction.checkNull(vo.getsNomineeCity1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getsNomineeCity1());
        if (CommonFunction.checkNull(vo.getTxtStateCode1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getTxtStateCode1());
        if (CommonFunction.checkNull(vo.getsNomineePin1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getsNomineePin1());
        if (CommonFunction.checkNull(vo.getsPrefix2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getsPrefix2());
        if (CommonFunction.checkNull(vo.getNomineeMName2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getNomineeMName2());
        if (CommonFunction.checkNull(vo.getNomineeLName2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getNomineeLName2());
        if (CommonFunction.checkNull(vo.getSmaritalStatus2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getSmaritalStatus2());
        if (CommonFunction.checkNull(vo.getsNomineeArea2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getsNomineeArea2());
        if (CommonFunction.checkNull(vo.getsNomineeCity2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getsNomineeCity2());
        if (CommonFunction.checkNull(vo.getTxtStateCode2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getTxtStateCode2());
        if (CommonFunction.checkNull(vo.getsNomineePin2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getsNomineePin2());
        if (CommonFunction.checkNull(vo.getsPrefix3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getsPrefix3());
        if (CommonFunction.checkNull(vo.getNomineeMName3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getNomineeMName3());
        if (CommonFunction.checkNull(vo.getNomineeLName3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getNomineeLName3());
        if (CommonFunction.checkNull(vo.getSmaritalStatus3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getSmaritalStatus3());
        if (CommonFunction.checkNull(vo.getsNomineeArea3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getsNomineeArea3());
        if (CommonFunction.checkNull(vo.getsNomineeCity3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getsNomineeCity3());
        if (CommonFunction.checkNull(vo.getTxtStateCode3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getTxtStateCode3());
        if (CommonFunction.checkNull(vo.getsNomineePin3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getsNomineePin3());
        if (CommonFunction.checkNull(vo.getsPrefix4()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getsPrefix4());
        if (CommonFunction.checkNull(vo.getNomineeMName4()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getNomineeMName4());
        if (CommonFunction.checkNull(vo.getNomineeLName4()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getNomineeLName4());
        if (CommonFunction.checkNull(vo.getSmaritalStatus4()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getSmaritalStatus4());
        if (CommonFunction.checkNull(vo.getsNomineeArea4()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getsNomineeArea4());
        if (CommonFunction.checkNull(vo.getsNomineeCity4()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getsNomineeCity4());
        if (CommonFunction.checkNull(vo.getTxtStateCode4()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getTxtStateCode4());
        if (CommonFunction.checkNull(vo.getsNomineePin4()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getsNomineePin4());
        }
        if (CommonFunction.checkNull(vo.getSaddressType()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getSaddressType());
        if (CommonFunction.checkNull(vo.getSinsuranceStreet()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getSinsuranceStreet());
        }
        if (CommonFunction.checkNull(vo.getSaddressType1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getSaddressType1());
        if (CommonFunction.checkNull(vo.getSinsuranceStreet1()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getSinsuranceStreet1());
        if (CommonFunction.checkNull(vo.getSaddressType2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getSaddressType2());
        if (CommonFunction.checkNull(vo.getSinsuranceStreet2()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getSinsuranceStreet2());
        if (CommonFunction.checkNull(vo.getSaddressType3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getSaddressType3());
        if (CommonFunction.checkNull(vo.getSinsuranceStreet3()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getSinsuranceStreet3());
        if (CommonFunction.checkNull(vo.getSaddressType4()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else
          insertPrepStmtObject.addString(vo.getSaddressType4());
        if (CommonFunction.checkNull(vo.getSinsuranceStreet4()).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(vo.getSinsuranceStreet4());
        }

        if (CommonFunction.checkNull(dealId).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(dealId.toUpperCase().trim());
        }
        if (CommonFunction.checkNull(newCust).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(newCust);
        }
        if (CommonFunction.checkNull(insId).equalsIgnoreCase(""))
          insertPrepStmtObject.addNull();
        else {
          insertPrepStmtObject.addString(insId);
        }
        insertPrepStmtObject.setSql(bufInsSql.toString());

        logger.info(new StringBuilder().append("IN insertCpInsurance() update query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

        qryList.add(insertPrepStmtObject);

        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      }
      else
      {
        insertPrepStmt = new PrepStmtObject();
        bufInsSql = new StringBuilder();

        RefreshFlagVo vo1 = new RefreshFlagVo();
        if ((dealId != null) && (!dealId.trim().equalsIgnoreCase("")))
          vo1.setRecordId(Integer.parseInt(dealId.trim()));
        vo1.setTabIndex(16);
        vo1.setModuleName("CP");
        RefreshFlagValueInsert.updateRefreshFlag(vo1);

        bufInsSql.append("INSERT INTO CR_INSURANCE_DTL(DEAL_ID,DEAL_LOAN_ID,CHARGE_ID,SUM_ASSURED,loan_TENURE,AGE,INSURANCE_PREMIUM,CHARGES_ON_PREMIUM,OTHER_CHARGE_ID,POLICY_TYPE,AMOUNT_TO_BE_FINANCED,PRODUCT_ID,CUSTOMER_ID,nominee_name,nominee_relation,gender,property_type,policy_tenure,SUM_ASSURED_PERCENTAGE,nominee_dob,customer_constitution,MAKER_ID,MAKER_DATE, NOMINEE_NAME1,GENDER1,NOMINEE_DOB1,NOMINEE_RELATION1,NOMINEE_NAME2,GENDER2,NOMINEE_DOB2,NOMINEE_RELATION2,NOMINEE_NAME3,GENDER3,NOMINEE_DOB3,NOMINEE_RELATION3,NOMINEE_NAME4,GENDER4,NOMINEE_DOB4,NOMINEE_RELATION4,NOMINEE_PERCENTAGE,NOMINEE_PERCENTAGE1,NOMINEE_PERCENTAGE2,NOMINEE_PERCENTAGE3,NOMINEE_PERCENTAGE4,ADDR,ADDR1,ADDR2,ADDR3,ADDR4, NOMINEE_PREFIX,NOMINEE_MNAME,NOMINEE_LNAME,MARITAL_STATUS,NOMINEE_AREA,NOMINEE_CITY,NOMINEE_STATE,NOMINEE_PIN,NOMINEE_PREFIX1,NOMINEE_MNAME1,NOMINEE_LNAME1,MARITAL_STATUS1,NOMINEE_AREA1,NOMINEE_CITY1,NOMINEE_STATE1,NOMINEE_PIN1,NOMINEE_PREFIX2,NOMINEE_MNAME2,NOMINEE_LNAME2,MARITAL_STATUS2,NOMINEE_AREA2,NOMINEE_CITY2,NOMINEE_STATE2,NOMINEE_PIN2, NOMINEE_PREFIX3,NOMINEE_MNAME3,NOMINEE_LNAME3,MARITAL_STATUS3,NOMINEE_AREA3,NOMINEE_CITY3,NOMINEE_STATE3,NOMINEE_PIN3,NOMINEE_PREFIX4,NOMINEE_MNAME4,NOMINEE_LNAME4,MARITAL_STATUS4,NOMINEE_AREA4,NOMINEE_CITY4,NOMINEE_STATE4,NOMINEE_PIN4,NOMINEE_ADDRESS_TYPE,NOMINEE_STREET,NOMINEE_ADDRESS_TYPE1,NOMINEE_STREET1,NOMINEE_ADDRESS_TYPE2,NOMINEE_STREET2,NOMINEE_ADDRESS_TYPE3,NOMINEE_STREET3,NOMINEE_ADDRESS_TYPE4,NOMINEE_STREET4)");

        bufInsSql.append(" values ( ");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?,");
        bufInsSql.append(" ?)");

        if (CommonFunction.checkNull(dealId).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(dealId.toUpperCase().trim());
        }
        if (CommonFunction.checkNull(dealLoanId).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(dealLoanId.toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getInsuranceProvider()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getInsuranceProvider().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getSumAssured()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getSumAssured());
        }
        if (CommonFunction.checkNull(vo.getTenure()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getTenure());
        }
        if (CommonFunction.checkNull(vo.getAge1()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getAge1());
        }
        if (CommonFunction.checkNull(vo.getInsurancePremium()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getInsurancePremium());
        }
        if (CommonFunction.checkNull(vo.getChargesOnInsurance()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getChargesOnInsurance());
        }
        if (CommonFunction.checkNull(vo.getLbxOtherChargeId()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getLbxOtherChargeId());
        }
        if (CommonFunction.checkNull(vo.getPolicyType()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getPolicyType().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getPremiumFinanced()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getPremiumFinanced().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getInsuranceProduct()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getInsuranceProduct());
        }
        if (CommonFunction.checkNull(newCust).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(newCust);
        }
        if (CommonFunction.checkNull(vo.getNomineeName()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getNomineeName().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getRelationshp()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getRelationshp().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getGender()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getGender().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getPropertyType()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getPropertyType().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getPolicyTenure()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getPolicyTenure().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getSumAssuPer()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getSumAssuPer().toUpperCase().trim());
        }
        if (CommonFunction.checkNull(vo.getDateOfbirth()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getDateOfbirth());
        }
        if (CommonFunction.checkNull(customerConstitutionValue).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(customerConstitutionValue);
        }
        if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getMakerId());
        }
        if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getMakerDate());
        }
        if (CommonFunction.checkNull(vo.getNomineeName1()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getNomineeName1());
        }
        if (CommonFunction.checkNull(vo.getGender1()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getGender1());
        }
        if (CommonFunction.checkNull(vo.getDateOfbirth1()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getDateOfbirth1());
        }
        if (CommonFunction.checkNull(vo.getRelationshp1()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getRelationshp1());
        }
        if (CommonFunction.checkNull(vo.getNomineeName2()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getNomineeName2());
        }
        if (CommonFunction.checkNull(vo.getGender2()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getGender2());
        }
        if (CommonFunction.checkNull(vo.getDateOfbirth2()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getDateOfbirth2());
        }
        if (CommonFunction.checkNull(vo.getRelationshp2()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getRelationshp2());
        }
        if (CommonFunction.checkNull(vo.getNomineeName3()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getNomineeName3());
        }
        if (CommonFunction.checkNull(vo.getGender3()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getGender3());
        }
        if (CommonFunction.checkNull(vo.getDateOfbirth3()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getDateOfbirth3());
        }
        if (CommonFunction.checkNull(vo.getRelationshp3()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getRelationshp3());
        }
        if (CommonFunction.checkNull(vo.getNomineeName4()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getNomineeName4());
        }
        if (CommonFunction.checkNull(vo.getGender4()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getGender4());
        }
        if (CommonFunction.checkNull(vo.getDateOfbirth4()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getDateOfbirth4());
        }
        if (CommonFunction.checkNull(vo.getRelationshp4()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getRelationshp4());
        }
        if (CommonFunction.checkNull(vo.getPercentage()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getPercentage());
        }
        if (CommonFunction.checkNull(vo.getPercentage1()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getPercentage1());
        }
        if (CommonFunction.checkNull(vo.getPercentage2()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getPercentage2());
        }
        if (CommonFunction.checkNull(vo.getPercentage3()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getPercentage3());
        }
        if (CommonFunction.checkNull(vo.getPercentage4()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getPercentage4());
        }
        if (CommonFunction.checkNull(vo.getAddr()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getAddr());
        }
        if (CommonFunction.checkNull(vo.getAddr1()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getAddr1());
        }
        if (CommonFunction.checkNull(vo.getAddr2()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getAddr2());
        }
        if (CommonFunction.checkNull(vo.getAddr3()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getAddr3());
        }
        if (CommonFunction.checkNull(vo.getAddr4()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getAddr4());
        }
        if (CommonFunction.checkNull(vo.getsPrefix()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getsPrefix());
        if (CommonFunction.checkNull(vo.getNomineeMName()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getNomineeMName());
        if (CommonFunction.checkNull(vo.getNomineeLName()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getNomineeLName());
        if (CommonFunction.checkNull(vo.getSmaritalStatus()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getSmaritalStatus());
        if (CommonFunction.checkNull(vo.getSnomineeArea()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getSnomineeArea());
        if (CommonFunction.checkNull(vo.getSnomineeCity()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getSnomineeCity());
        if (CommonFunction.checkNull(vo.getTxtStateCode()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getTxtStateCode());
        if (CommonFunction.checkNull(vo.getSnomineePin()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getSnomineePin());
        if (CommonFunction.checkNull(vo.getsPrefix1()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getsPrefix1());
        if (CommonFunction.checkNull(vo.getNomineeMName1()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getNomineeMName1());
        if (CommonFunction.checkNull(vo.getNomineeLName1()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getNomineeLName1());
        if (CommonFunction.checkNull(vo.getSmaritalstatus1()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getSmaritalstatus1());
        if (CommonFunction.checkNull(vo.getsNomineeArea1()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getsNomineeArea1());
        if (CommonFunction.checkNull(vo.getsNomineeCity1()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
        	insertPrepStmt.addString(vo.getsNomineeCity1());
        if (CommonFunction.checkNull(vo.getTxtStateCode1()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getTxtStateCode1());
        if (CommonFunction.checkNull(vo.getsNomineePin1()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getsNomineePin1());
        if (CommonFunction.checkNull(vo.getsPrefix2()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getsPrefix2());
        if (CommonFunction.checkNull(vo.getNomineeMName2()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getNomineeMName2());
        if (CommonFunction.checkNull(vo.getNomineeLName2()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getNomineeLName2());
        if (CommonFunction.checkNull(vo.getSmaritalStatus2()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getSmaritalStatus2());
        if (CommonFunction.checkNull(vo.getsNomineeArea2()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getsNomineeArea2());
        if (CommonFunction.checkNull(vo.getsNomineeCity2()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getsNomineeCity2());
        if (CommonFunction.checkNull(vo.getTxtStateCode2()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getTxtStateCode2());
        if (CommonFunction.checkNull(vo.getsNomineePin2()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getsNomineePin2());
        if (CommonFunction.checkNull(vo.getsPrefix3()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getsPrefix3());
        if (CommonFunction.checkNull(vo.getNomineeMName3()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getNomineeMName3());
        if (CommonFunction.checkNull(vo.getNomineeLName3()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getNomineeLName3());
        if (CommonFunction.checkNull(vo.getSmaritalStatus3()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getSmaritalStatus3());
        if (CommonFunction.checkNull(vo.getsNomineeArea3()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getsNomineeArea3());
        if (CommonFunction.checkNull(vo.getsNomineeCity3()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getsNomineeCity3());
        if (CommonFunction.checkNull(vo.getTxtStateCode3()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getTxtStateCode3());
        if (CommonFunction.checkNull(vo.getsNomineePin3()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getsNomineePin3());
        if (CommonFunction.checkNull(vo.getsPrefix4()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getsPrefix4());
        if (CommonFunction.checkNull(vo.getNomineeMName4()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getNomineeMName4());
        if (CommonFunction.checkNull(vo.getNomineeLName4()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getNomineeLName4());
        if (CommonFunction.checkNull(vo.getSmaritalStatus4()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getSmaritalStatus4());
        if (CommonFunction.checkNull(vo.getsNomineeArea4()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getsNomineeArea4());
        if (CommonFunction.checkNull(vo.getsNomineeCity4()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getsNomineeCity4());
        if (CommonFunction.checkNull(vo.getTxtStateCode4()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getTxtStateCode4());
        if (CommonFunction.checkNull(vo.getsNomineePin4()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getsNomineePin4());
        if (CommonFunction.checkNull(vo.getSaddressType()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getSaddressType());
        if (CommonFunction.checkNull(vo.getSinsuranceStreet()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getSinsuranceStreet());
        }
        if (CommonFunction.checkNull(vo.getSaddressType1()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getSaddressType1());
        if (CommonFunction.checkNull(vo.getSinsuranceStreet1()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getSinsuranceStreet1());
        if (CommonFunction.checkNull(vo.getSaddressType2()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getSaddressType2());
        if (CommonFunction.checkNull(vo.getSinsuranceStreet2()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getSinsuranceStreet2());
        if (CommonFunction.checkNull(vo.getSaddressType3()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getSaddressType3());
        if (CommonFunction.checkNull(vo.getSinsuranceStreet3()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getSinsuranceStreet3());
        if (CommonFunction.checkNull(vo.getSaddressType4()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else
          insertPrepStmt.addString(vo.getSaddressType4());
        if (CommonFunction.checkNull(vo.getSinsuranceStreet4()).equalsIgnoreCase(""))
          insertPrepStmt.addNull();
        else {
          insertPrepStmt.addString(vo.getSinsuranceStreet4());
        }
        insertPrepStmt.setSql(bufInsSql.toString());

        logger.info(new StringBuilder().append("IN insertCpInsurance() insert query1 ### ").append(insertPrepStmt.printQuery()).toString());

        qryList.add(insertPrepStmt);

        status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
      }

      logger.info(new StringBuilder().append("In insertCpInsurance......................").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally {
      qryList.clear();
      qryList = null;
    }

    return status;
  }

  public String readString(InputStream in)
  {
    InputStreamReader is = new InputStreamReader(in);
    StringBuilder sb = new StringBuilder();
    BufferedReader br = new BufferedReader(is);
    try
    {
      String read = br.readLine();
      while (read != null)
      {
        sb.append(read);
        read = br.readLine();
      }
    }
    catch (IOException e) {
      e.printStackTrace();
    }
    return sb.toString();
  }

  public String EncryptPassword(String password)
  {
    StringBuffer hexString = new StringBuffer();
    try
    {
      MessageDigest md = MessageDigest.getInstance("SHA-1");
      md.update(password.getBytes());
      byte[] byteData = md.digest();
      for (int i = 0; i < byteData.length; i++)
      {
        String hex = Integer.toHexString(0xFF & byteData[i]);
        if (hex.length() == 1) hexString.append('0');
        hexString.append(hex);
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return hexString.toString();
  }

  public Map calculateCpInsurance(Object ob, String insuranceProvider, String sumAssured, String tenure, String age, String insuranceProduct, String policyType, String premiumFinanced)
  {
    ArrayList list = new ArrayList();

    CpInsuranceVo vo = (CpInsuranceVo)ob;
    Integer totalValue = Integer.valueOf(0); boolean b = true;
    Map map = new HashedMap();
    Map map1 = new HashedMap();
    String otherChargeId = vo.getOtherChargeId();
    logger.info(new StringBuilder().append("insuranceProduct:::::").append(insuranceProduct).toString());
    logger.info(new StringBuilder().append("policyType:::11111111::").append(policyType).toString());
    String calcMethod = "";
    String customerConstitutionValue = "";
    String ageList = "";
    String cust = CommonFunction.checkNull(vo.getCustId());
    String custList = "";
    String policyTenure = CommonFunction.checkNull(vo.getPolicyTenure());
    String propertyType = CommonFunction.checkNull(vo.getPropertyType());
    String customerConstitution = "";
    ArrayList ageCust = new ArrayList();
    ArrayList res = new ArrayList();
    custList = cust.replace("|", ",");
    char[] chars = custList.toCharArray();
    String s1 = "";
    int abc = chars.length - 1;
    for (int i = 0; i < chars.length - 1; i++)
    {
      s1 = new StringBuilder().append(s1).append(chars[i]).toString();
    }

    String serviceCalledValue = "";
    if (CommonFunction.checkNull(policyType).equalsIgnoreCase("J"))
    {
      String qry1 = new StringBuilder().append("SELECT CALCULATION_METHOD FROM cr_insurance_calculation_method_m WHERE REC_STATUS='A' AND PRODUCT_ID= '").append(insuranceProduct).append("' ").toString();
      calcMethod = ConnectionDAO.singleReturn(qry1);
      map.put("calcMethod", calcMethod);
      logger.info(new StringBuilder().append("qry1:::").append(qry1).toString());
      if (CommonFunction.checkNull(calcMethod).equalsIgnoreCase("M"))
      {
        String qry2 = new StringBuilder().append("select max(floor (datediff(m.parameter_value,CUSTOMER_DOB)/365))from cr_deal_customer_m left join parameter_mst m on(1=1 and m.parameter_key='BUSINESS_DATE') where customer_id in (").append(s1).append(")").toString();
        ageList = ConnectionDAO.singleReturn(qry2);
        logger.info(new StringBuilder().append("qry2:::").append(qry2).toString());

        customerConstitution = new StringBuilder().append("SELECT CUSTOMER_CONSTITUTION FROM cr_deal_customer_m left join parameter_mst z on (1=1 and z.parameter_key='BUSINESS_DATE' ) where customer_id in (").append(s1).append(") and floor (datediff(z.parameter_value,CUSTOMER_DOB)/365)=(select max(floor (datediff(m.parameter_value,CUSTOMER_DOB)/365))from cr_deal_customer_m left join parameter_mst m on(1=1 and parameter_key='BUSINESS_DATE') where customer_id in (").append(s1).append(")) group by customer_id ").toString();
        customerConstitutionValue = ConnectionDAO.singleReturn(customerConstitution);
        logger.info(new StringBuilder().append("constitution:::").append(customerConstitutionValue).toString());
      }

      if (CommonFunction.checkNull(calcMethod).equalsIgnoreCase("S"))
      {
        try
        {
          String qry3 = new StringBuilder().append("select floor (datediff(z.parameter_value,CUSTOMER_DOB)/365)from cr_deal_customer_m left join parameter_mst z on (1=1 and z.parameter_key='BUSINESS_DATE' )  where customer_id in (").append(s1).append(")").toString();
          ageCust = ConnectionDAO.sqlSelect(qry3.toString());
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
      }
    }

    if (CommonFunction.checkNull(policyType).equalsIgnoreCase("S"))
    {
      String qry3 = new StringBuilder().append("select floor (datediff(z.parameter_value,CUSTOMER_DOB)/365)from cr_deal_customer_m left join parameter_mst z on (1=1 and z.parameter_key='BUSINESS_DATE' ) where customer_id in (").append(s1).append(")").toString();
      age = ConnectionDAO.singleReturn(qry3);

      customerConstitution = new StringBuilder().append("SELECT CUSTOMER_CONSTITUTION FROM cr_deal_customer_m WHERE customer_id in (").append(s1).append(")").toString();
      customerConstitutionValue = ConnectionDAO.singleReturn(customerConstitution);

      logger.info(new StringBuilder().append("customerConstitutionValue:::").append(customerConstitutionValue).toString());
    }

    String serviceCalled = new StringBuilder().append("SELECT METHOD_TYPE FROM COM_INSURANCE_PRODUCT_METHOD_M WHERE PRODUCT_ID= '").append(insuranceProduct).append("' and rec_status='A' ").toString();
    serviceCalledValue = ConnectionDAO.singleReturn(serviceCalled);
    try
    {
      if (CommonFunction.checkNull(serviceCalledValue).equalsIgnoreCase("G"))
      {
        if (CommonFunction.checkNull(policyType).equalsIgnoreCase("J"))
        {
          if (CommonFunction.checkNull(calcMethod).equalsIgnoreCase("M"))
          {
            if (CommonFunction.checkNull(propertyType).equalsIgnoreCase("R"))
            {
              StringBuilder query = new StringBuilder();
              query.append(new StringBuilder().append("SELECT round(((a.PREMIUM_percentage+a.RESIDENTIAL_RATE_PERCENTAGE)*('").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sumAssured)).trim()).append("'))),a.OTHER_CHARGES,b.charge_desc,b.charge_code FROM CR_INSURANCE_GRID_M a join com_charge_code_m b on a.OTHER_CHARGE_id=b.CHARGE_CODE WHERE PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' and   ").toString());
              query.append(new StringBuilder().append(" IF(IFNULL(CHARGE_ID,0)=0,TRUE,CHARGE_ID= '").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(insuranceProvider)).trim()).append("') ").toString());
              query.append(new StringBuilder().append(" AND IF(IFNULL(sum_assured,0)=0,TRUE,SUM_ASSURED=(select distinct SUM_ASSURED from cr_insurance_grid_m where SUM_ASSURED ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sumAssured)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("'  ))").toString());
              query.append(new StringBuilder().append("  AND IF(IFNULL(loan_tenure,0)=0,TRUE,loan_tenure =(select distinct loan_tenure from cr_insurance_grid_m where loan_tenure ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(tenure)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' ))").toString());
              query.append(new StringBuilder().append("  AND IF(IFNULL(RESIDENTIAL_RATE_PERCENTAGE,0)=0,TRUE,RESIDENTIAL_RATE_PERCENTAGE =(select distinct RESIDENTIAL_RATE_PERCENTAGE from cr_insurance_grid_m where LOAN_TENURE ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(tenure)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' and customer_constitution ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(customerConstitutionValue)).trim()).append("' ))").toString());

              query.append(new StringBuilder().append("  AND IF(IFNULL(customer_constitution,'')='',TRUE,customer_constitution =(select distinct customer_constitution from cr_insurance_grid_m where customer_constitution ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(customerConstitutionValue)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("'  ))").toString());
              query.append(new StringBuilder().append("  AND IF(IFNULL(policy_tenure,0)=0,TRUE,policy_tenure  =(select distinct policy_tenure from cr_insurance_grid_m where policy_tenure ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(policyTenure)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' ))").toString());
              query.append(new StringBuilder().append(" and  IF(IFNULL(AGE_from,0)=0,TRUE,AGE_from =(select distinct AGE_from from cr_insurance_grid_m where AGE_from <='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(ageList)).trim()).append("' and AGE_to >='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(ageList)).trim()).append("')) ").toString());

              logger.info(new StringBuilder().append("calculate:::::").append(query).toString());
              ArrayList calculate = ConnectionDAO.sqlSelect(query.toString());

              query = null;
              int size = calculate.size();
              for (int i = 0; i < size; i++)
              {
                ArrayList header1 = (ArrayList)calculate.get(i);
                if ((header1 != null) && (header1.size() > 0))
                {
                  vo = new CpInsuranceVo();
                  vo.setInsuranceProvider(CommonFunction.checkNull(insuranceProvider).trim());
                  vo.setInsuranceProduct(CommonFunction.checkNull(insuranceProduct).trim());
                  vo.setPolicyType(CommonFunction.checkNull(policyType).trim());
                  vo.setPremiumFinanced(CommonFunction.checkNull(premiumFinanced).trim());
                  vo.setInsurancePremium(CommonFunction.checkNull(header1.get(0)).trim());

                  if (CommonFunction.checkNull(header1.get(0)).trim().equalsIgnoreCase(""))
                  {
                    b = false;
                  }
                  else
                  {
                    b = true;
                  }

                  vo.setChargesOnInsurance(CommonFunction.checkNull(header1.get(1)).trim());
                  vo.setOtherChargeId(CommonFunction.checkNull(header1.get(2)).trim());
                  vo.setLbxOtherChargeId(CommonFunction.checkNull(header1.get(3)).trim());

                  list.add(vo);

                  map.put("vo", vo);
                  vo = null;
                }
                map1.put("map", map);
                map1.put("b", Boolean.valueOf(b));
                header1.clear();
                header1 = null;
              }
              calculate.clear();
              calculate = null;
            }

            if (CommonFunction.checkNull(propertyType).equalsIgnoreCase("C"))
            {
              StringBuilder query = new StringBuilder();
              query.append(new StringBuilder().append("SELECT round(((a.PREMIUM_percentage+a.COMMERCIAL_RATE_PERCENTAGE)*('").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sumAssured)).trim()).append("'))),a.OTHER_CHARGES,b.charge_desc,b.charge_code FROM CR_INSURANCE_GRID_M a join com_charge_code_m b on a.OTHER_CHARGE_id=b.CHARGE_CODE WHERE PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' and   ").toString());
              query.append(new StringBuilder().append(" IF(IFNULL(CHARGE_ID,0)=0,TRUE,CHARGE_ID= '").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(insuranceProvider)).trim()).append("') ").toString());
              query.append(new StringBuilder().append(" AND IF(IFNULL(sum_assured,0)=0,TRUE,SUM_ASSURED=(select distinct SUM_ASSURED from cr_insurance_grid_m where SUM_ASSURED ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sumAssured)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("'  ))").toString());
              query.append(new StringBuilder().append("  AND IF(IFNULL(loan_tenure,0)=0,TRUE,loan_tenure =(select distinct loan_tenure from cr_insurance_grid_m where loan_tenure ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(tenure)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' ))").toString());
              query.append(new StringBuilder().append("  AND IF(IFNULL(COMMERCIAL_RATE_PERCENTAGE,0)=0,TRUE,COMMERCIAL_RATE_PERCENTAGE =(select distinct COMMERCIAL_RATE_PERCENTAGE from cr_insurance_grid_m where LOAN_TENURE ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(tenure)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' and customer_constitution ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(customerConstitutionValue)).trim()).append("' ))").toString());

              query.append(new StringBuilder().append("  AND IF(IFNULL(policy_tenure,0)=0,TRUE,policy_tenure  =(select distinct policy_tenure from cr_insurance_grid_m where policy_tenure ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(policyTenure)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' ))").toString());
              query.append(new StringBuilder().append("  AND IF(IFNULL(customer_constitution,'')='',TRUE,customer_constitution =(select distinct customer_constitution from cr_insurance_grid_m where customer_constitution ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(customerConstitutionValue)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("'  ))").toString());
              query.append(new StringBuilder().append(" and  IF(IFNULL(AGE_from,0)=0,TRUE,AGE_from =(select distinct AGE_from from cr_insurance_grid_m where AGE_from <='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(ageList)).trim()).append("' and AGE_to >='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(ageList)).trim()).append("')) ").toString());

              logger.info(new StringBuilder().append("calculate:::::").append(query).toString());
              ArrayList calculate = ConnectionDAO.sqlSelect(query.toString());

              query = null;
              int size = calculate.size();
              for (int i = 0; i < size; i++)
              {
                ArrayList header1 = (ArrayList)calculate.get(i);
                if ((header1 != null) && (header1.size() > 0))
                {
                  vo = new CpInsuranceVo();
                  vo.setInsuranceProvider(CommonFunction.checkNull(insuranceProvider).trim());
                  vo.setInsuranceProduct(CommonFunction.checkNull(insuranceProduct).trim());
                  vo.setPolicyType(CommonFunction.checkNull(policyType).trim());
                  vo.setPremiumFinanced(CommonFunction.checkNull(premiumFinanced).trim());
                  vo.setInsurancePremium(CommonFunction.checkNull(header1.get(0)).trim());
                  if (CommonFunction.checkNull(header1.get(0)).trim().equalsIgnoreCase(""))
                  {
                    b = false;
                  }
                  else
                  {
                    b = true;
                  }
                  vo.setChargesOnInsurance(CommonFunction.checkNull(header1.get(1)).trim());
                  vo.setOtherChargeId(CommonFunction.checkNull(header1.get(2)).trim());
                  vo.setLbxOtherChargeId(CommonFunction.checkNull(header1.get(3)).trim());

                  list.add(vo);

                  map.put("vo", vo);
                  vo = null;
                }
                map1.put("map", map);
                map1.put("b", Boolean.valueOf(b));
                header1.clear();
                header1 = null;
              }
              calculate.clear();
              calculate = null;
            }

          }

          if (CommonFunction.checkNull(calcMethod).equalsIgnoreCase("S"))
          {
            int len = ageCust.size();
            for (int k = 0; k < len; k++)
            {
              ArrayList header10 = (ArrayList)ageCust.get(k);
              if ((header10 != null) && (header10.size() > 0))
              {
                customerConstitution = new StringBuilder().append("SELECT CUSTOMER_CONSTITUTION FROM cr_deal_customer_m where customer_id in (").append(s1).append(") and round (datediff(sysdate(),CUSTOMER_DOB)/365)= '").append(header10.get(0).toString()).append("' ").toString();
                customerConstitutionValue = ConnectionDAO.singleReturn(customerConstitution);
                logger.info(new StringBuilder().append("constitution:::").append(customerConstitutionValue).toString());

                logger.info(new StringBuilder().append("header10.get(0).toString()  :: ").append(header10.get(0).toString()).toString());

                if (CommonFunction.checkNull(propertyType).equalsIgnoreCase("R"))
                {
                  StringBuilder query = new StringBuilder();
                  query.append(new StringBuilder().append("SELECT round(((a.PREMIUM_percentage+a.RESIDENTIAL_RATE_PERCENTAGE)*('").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sumAssured)).trim()).append("'))),group_concat(a.OTHER_CHARGES),b.charge_desc,b.charge_code FROM CR_INSURANCE_GRID_M a join com_charge_code_m b on a.OTHER_CHARGE_id=b.CHARGE_CODE WHERE PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' and  ").toString());
                  query.append(new StringBuilder().append(" IF(IFNULL(CHARGE_ID,0)=0,TRUE,CHARGE_ID= '").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(insuranceProvider)).trim()).append("') ").toString());
                  query.append(new StringBuilder().append("  and IF(IFNULL(sum_assured,0)=0,TRUE,SUM_ASSURED=(select distinct SUM_ASSURED from cr_insurance_grid_m where SUM_ASSURED ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sumAssured)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("'  ))").toString());
                  query.append(new StringBuilder().append("  AND IF(IFNULL(loan_tenure,0)=0,TRUE,loan_tenure =(select distinct loan_tenure from cr_insurance_grid_m where loan_tenure ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(tenure)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' ))").toString());
                  query.append(new StringBuilder().append("  AND IF(IFNULL(RESIDENTIAL_RATE_PERCENTAGE,0)=0,TRUE,RESIDENTIAL_RATE_PERCENTAGE =(select distinct RESIDENTIAL_RATE_PERCENTAGE from cr_insurance_grid_m where LOAN_TENURE ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(tenure)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' and customer_constitution ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(customerConstitutionValue)).trim()).append("' ))").toString());

                  query.append(new StringBuilder().append("  AND IF(IFNULL(customer_constitution,'')='',TRUE,customer_constitution =(select distinct customer_constitution from cr_insurance_grid_m where customer_constitution ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(customerConstitutionValue)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("'  ))").toString());

                  query.append(new StringBuilder().append("  AND IF(IFNULL(policy_tenure,0)=0,TRUE,policy_tenure  =(select distinct policy_tenure from cr_insurance_grid_m where policy_tenure ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(policyTenure)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' ))").toString());
                  query.append(new StringBuilder().append(" and  IF(IFNULL(AGE_from,0)=0,TRUE,AGE_from in (select distinct AGE_from from cr_insurance_grid_m where AGE_from <='").append(header10.get(0).toString()).append("' and AGE_to >='").append(header10.get(0).toString()).append("')) ").toString());

                  ArrayList calculate = ConnectionDAO.sqlSelect(query.toString());
                  logger.info(new StringBuilder().append("calculate33:::::").append(query).toString());
                  query = null;
                  int size = calculate.size();
                  for (int j = 0; j < size; j++)
                  {
                    ArrayList header1 = (ArrayList)calculate.get(j);
                    if ((header1 != null) && (header1.size() > 0))
                    {
                      vo = new CpInsuranceVo();
                      vo.setInsuranceProvider(CommonFunction.checkNull(insuranceProvider).trim());
                      vo.setInsuranceProduct(CommonFunction.checkNull(insuranceProduct).trim());
                      vo.setPolicyType(CommonFunction.checkNull(policyType).trim());
                      vo.setPremiumFinanced(CommonFunction.checkNull(premiumFinanced).trim());
                      vo.setInsurancePremium(CommonFunction.checkNull(header1.get(0)).trim());

                      if ((!CommonFunction.checkNull(header1.get(0)).trim().equalsIgnoreCase("")) && (b))
                      {
                        totalValue = Integer.valueOf(totalValue.intValue() + Integer.parseInt(CommonFunction.checkNull(header1.get(0))));
                        logger.info(new StringBuilder().append("header1.get(0) ").append(header1.get(0)).toString());
                        logger.info(new StringBuilder().append("totalValue ").append(totalValue).toString());
                      }
                      else {
                        b = false;
                      }
                      vo.setChargesOnInsurance(CommonFunction.checkNull(header1.get(1)).trim());
                      vo.setOtherChargeId(CommonFunction.checkNull(header1.get(2)).trim());
                      vo.setLbxOtherChargeId(CommonFunction.checkNull(header1.get(3)).trim());

                      list.add(vo);
                      map.put("vo", vo);

                      vo = null;
                    }
                  }

                  map1.put("map", map);
                  map1.put("b", Boolean.valueOf(b));
                  map1.put("totalValue", totalValue);
                }

                if (CommonFunction.checkNull(propertyType).equalsIgnoreCase("C"))
                {
                  StringBuilder query = new StringBuilder();
                  query.append(new StringBuilder().append("SELECT round(((a.PREMIUM_percentage+a.COMMERCIAL_RATE_PERCENTAGE)*('").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sumAssured)).trim()).append("'))),group_concat(a.OTHER_CHARGES),b.charge_desc,b.charge_code FROM CR_INSURANCE_GRID_M a join com_charge_code_m b on a.OTHER_CHARGE_id=b.CHARGE_CODE WHERE PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' and  ").toString());
                  query.append(new StringBuilder().append(" IF(IFNULL(CHARGE_ID,0)=0,TRUE,CHARGE_ID= '").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(insuranceProvider)).trim()).append("') ").toString());
                  query.append(new StringBuilder().append("  and IF(IFNULL(sum_assured,0)=0,TRUE,SUM_ASSURED=(select distinct SUM_ASSURED from cr_insurance_grid_m where SUM_ASSURED ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sumAssured)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("'  ))").toString());
                  query.append(new StringBuilder().append("  AND IF(IFNULL(loan_tenure,0)=0,TRUE,loan_tenure =(select distinct loan_tenure from cr_insurance_grid_m where loan_tenure ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(tenure)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' ))").toString());
                  query.append(new StringBuilder().append("  AND IF(IFNULL(COMMERCIAL_RATE_PERCENTAGE,0)=0,TRUE,COMMERCIAL_RATE_PERCENTAGE =(select distinct COMMERCIAL_RATE_PERCENTAGE from cr_insurance_grid_m where LOAN_TENURE ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(tenure)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' and customer_constitution ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(customerConstitutionValue)).trim()).append("' ))").toString());

                  query.append(new StringBuilder().append("  AND IF(IFNULL(customer_constitution,'')='',TRUE,customer_constitution =(select distinct customer_constitution from cr_insurance_grid_m where customer_constitution ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(customerConstitutionValue)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("'  ))").toString());

                  query.append(new StringBuilder().append("  AND IF(IFNULL(policy_tenure,0)=0,TRUE,policy_tenure  =(select distinct policy_tenure from cr_insurance_grid_m where policy_tenure ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(policyTenure)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' ))").toString());
                  query.append(new StringBuilder().append(" and  IF(IFNULL(AGE_from,0)=0,TRUE,AGE_from in (select distinct AGE_from from cr_insurance_grid_m where AGE_from <='").append(header10.get(0).toString()).append("' and AGE_to >='").append(header10.get(0).toString()).append("')) ").toString());

                  ArrayList calculate = ConnectionDAO.sqlSelect(query.toString());
                  logger.info(new StringBuilder().append("calculate33:::::").append(query).toString());
                  query = null;
                  int size = calculate.size();
                  for (int j = 0; j < size; j++)
                  {
                    ArrayList header1 = (ArrayList)calculate.get(j);
                    if ((header1 != null) && (header1.size() > 0))
                    {
                      vo = new CpInsuranceVo();
                      vo.setInsuranceProvider(CommonFunction.checkNull(insuranceProvider).trim());
                      vo.setInsuranceProduct(CommonFunction.checkNull(insuranceProduct).trim());
                      vo.setPolicyType(CommonFunction.checkNull(policyType).trim());
                      vo.setPremiumFinanced(CommonFunction.checkNull(premiumFinanced).trim());
                      vo.setInsurancePremium(CommonFunction.checkNull(header1.get(0)).trim());

                      if ((!CommonFunction.checkNull(header1.get(0)).trim().equalsIgnoreCase("")) && (b))
                      {
                        totalValue = Integer.valueOf(totalValue.intValue() + Integer.parseInt(CommonFunction.checkNull(header1.get(0))));
                        logger.info(new StringBuilder().append("header1.get(0) ").append(header1.get(0)).toString());
                        logger.info(new StringBuilder().append("totalValue ").append(totalValue).toString());
                      }
                      else {
                        b = false;
                      }
                      vo.setChargesOnInsurance(CommonFunction.checkNull(header1.get(1)).trim());
                      vo.setOtherChargeId(CommonFunction.checkNull(header1.get(2)).trim());
                      vo.setLbxOtherChargeId(CommonFunction.checkNull(header1.get(3)).trim());

                      list.add(vo);
                      map.put("vo", vo);

                      vo = null;
                    }
                  }

                  map1.put("map", map);
                  map1.put("b", Boolean.valueOf(b));
                  map1.put("totalValue", totalValue);
                }

              }

            }

          }

        }

        if (CommonFunction.checkNull(policyType).equalsIgnoreCase("S"))
        {
          if (CommonFunction.checkNull(propertyType).equalsIgnoreCase("C"))
          {
            StringBuilder query = new StringBuilder();
            query.append(new StringBuilder().append("SELECT round(((a.PREMIUM_percentage+a.COMMERCIAL_RATE_PERCENTAGE)*('").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sumAssured)).trim()).append("'))),a.OTHER_CHARGES,b.charge_desc,b.charge_code FROM CR_INSURANCE_GRID_M a join com_charge_code_m b on a.OTHER_CHARGE_id=b.CHARGE_CODE WHERE PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' and  ").toString());
            query.append(new StringBuilder().append(" IF(IFNULL(CHARGE_ID,0)=0,TRUE,CHARGE_ID= '").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(insuranceProvider)).trim()).append("') ").toString());
            query.append(new StringBuilder().append(" and IF(IFNULL(sum_assured,0)=0,TRUE,SUM_ASSURED=(select distinct SUM_ASSURED from cr_insurance_grid_m where SUM_ASSURED ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sumAssured)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("'  ))").toString());
            query.append(new StringBuilder().append("  AND IF(IFNULL(loan_tenure,0)=0,TRUE,loan_tenure =(select distinct loan_tenure from cr_insurance_grid_m where loan_tenure ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(tenure)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' ))").toString());

            query.append(new StringBuilder().append("  AND IF(IFNULL(COMMERCIAL_RATE_PERCENTAGE,0)=0,TRUE,COMMERCIAL_RATE_PERCENTAGE =(select distinct COMMERCIAL_RATE_PERCENTAGE from cr_insurance_grid_m where LOAN_TENURE ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(tenure)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' and  customer_constitution ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(customerConstitutionValue)).trim()).append("'  ))").toString());

            query.append(new StringBuilder().append("  AND IF(IFNULL(customer_constitution,'')='',TRUE,customer_constitution =(select distinct customer_constitution from cr_insurance_grid_m where customer_constitution ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(customerConstitutionValue)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("'  ))").toString());

            query.append(new StringBuilder().append("  AND IF(IFNULL(policy_tenure,0)=0,TRUE,policy_tenure  =(select distinct policy_tenure from cr_insurance_grid_m where policy_tenure ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(policyTenure)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' ))").toString());
            query.append(new StringBuilder().append("  and  IF(IFNULL(AGE_from,0)=0,TRUE,AGE_from=(select distinct AGE_from from cr_insurance_grid_m where AGE_from <='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(age)).trim()).append("' and AGE_to >='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(age)).trim()).append("')) ").toString());

            logger.info(new StringBuilder().append("query::::").append(query).toString());
            ArrayList calculate = ConnectionDAO.sqlSelect(query.toString());

            logger.info(new StringBuilder().append("calculate1:::::").append(query).toString());
            query = null;
            int size = calculate.size();
            for (int i = 0; i < size; i++)
            {
              ArrayList header1 = (ArrayList)calculate.get(i);
              if ((header1 != null) && (header1.size() > 0))
              {
                vo = new CpInsuranceVo();
                vo.setInsuranceProvider(CommonFunction.checkNull(insuranceProvider).trim());
                vo.setInsuranceProduct(CommonFunction.checkNull(insuranceProduct).trim());
                vo.setPolicyType(CommonFunction.checkNull(policyType).trim());
                vo.setPremiumFinanced(CommonFunction.checkNull(premiumFinanced).trim());
                vo.setInsurancePremium(CommonFunction.checkNull(header1.get(0)).trim());
                vo.setChargesOnInsurance(CommonFunction.checkNull(header1.get(1)).trim());
                vo.setOtherChargeId(CommonFunction.checkNull(header1.get(2)).trim());
                vo.setLbxOtherChargeId(CommonFunction.checkNull(header1.get(3)).trim());

                list.add(vo);
                map.put("vo", vo);
                vo = null;
              }
              map1.put("map", map);
              header1.clear();
              header1 = null;
            }
            calculate.clear();
            calculate = null;
          }

          if (CommonFunction.checkNull(propertyType).equalsIgnoreCase("R"))
          {
            StringBuilder query = new StringBuilder();
            query.append(new StringBuilder().append("SELECT round(((a.PREMIUM_percentage+a.RESIDENTIAL_RATE_PERCENTAGE)*('").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sumAssured)).trim()).append("'))),a.OTHER_CHARGES,b.charge_desc,b.charge_code FROM CR_INSURANCE_GRID_M a join com_charge_code_m b on a.OTHER_CHARGE_id=b.CHARGE_CODE WHERE PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' and  ").toString());
            query.append(new StringBuilder().append(" IF(IFNULL(CHARGE_ID,0)=0,TRUE,CHARGE_ID= '").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(insuranceProvider)).trim()).append("') ").toString());
            query.append(new StringBuilder().append(" and IF(IFNULL(sum_assured,0)=0,TRUE,SUM_ASSURED=(select distinct SUM_ASSURED from cr_insurance_grid_m where SUM_ASSURED ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(sumAssured)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("'  ))").toString());
            query.append(new StringBuilder().append("  AND IF(IFNULL(loan_tenure,0)=0,TRUE,loan_tenure =(select distinct loan_tenure from cr_insurance_grid_m where loan_tenure ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(tenure)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' ))").toString());

            query.append(new StringBuilder().append("  AND IF(IFNULL(RESIDENTIAL_RATE_PERCENTAGE,0)=0,TRUE,RESIDENTIAL_RATE_PERCENTAGE =(select distinct RESIDENTIAL_RATE_PERCENTAGE from cr_insurance_grid_m where LOAN_TENURE ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(tenure)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' and customer_constitution ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(customerConstitutionValue)).trim()).append("' ))").toString());
            query.append(new StringBuilder().append("  AND IF(IFNULL(policy_tenure,0)=0,TRUE,policy_tenure  =(select distinct policy_tenure from cr_insurance_grid_m where policy_tenure ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(policyTenure)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("' ))").toString());

            query.append(new StringBuilder().append("  AND IF(IFNULL(customer_constitution,'')='',TRUE,customer_constitution =(select distinct customer_constitution from cr_insurance_grid_m where customer_constitution ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(customerConstitutionValue)).trim()).append("' and PRODUCT_ID= '").append(insuranceProduct).append("' and policy_type= '").append(policyType).append("'  ))").toString());

            query.append(new StringBuilder().append("  and  IF(IFNULL(AGE_from,0)=0,TRUE,AGE_from=(select distinct AGE_from from cr_insurance_grid_m where AGE_from <='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(age)).trim()).append("' and AGE_to >='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(age)).trim()).append("')) ").toString());

            logger.info(new StringBuilder().append("query::::").append(query).toString());
            ArrayList calculate = ConnectionDAO.sqlSelect(query.toString());

            logger.info(new StringBuilder().append("calculate1:::::").append(query).toString());
            query = null;
            int size = calculate.size();
            for (int i = 0; i < size; i++)
            {
              ArrayList header1 = (ArrayList)calculate.get(i);
              if ((header1 != null) && (header1.size() > 0))
              {
                vo = new CpInsuranceVo();
                vo.setInsuranceProvider(CommonFunction.checkNull(insuranceProvider).trim());
                vo.setInsuranceProduct(CommonFunction.checkNull(insuranceProduct).trim());
                vo.setPolicyType(CommonFunction.checkNull(policyType).trim());
                vo.setPremiumFinanced(CommonFunction.checkNull(premiumFinanced).trim());
                vo.setInsurancePremium(CommonFunction.checkNull(header1.get(0)).trim());
                vo.setChargesOnInsurance(CommonFunction.checkNull(header1.get(1)).trim());
                vo.setOtherChargeId(CommonFunction.checkNull(header1.get(2)).trim());
                vo.setLbxOtherChargeId(CommonFunction.checkNull(header1.get(3)).trim());

                list.add(vo);
                map.put("vo", vo);
                vo = null;
              }
              map1.put("map", map);
              header1.clear();
              header1 = null;
            }
            calculate.clear();
            calculate = null;
          }

        }

      }

      if (CommonFunction.checkNull(serviceCalledValue).equalsIgnoreCase("W"))
      {
        try
        {
          try
          {
            URL url = new URL("http://www.google.com");
            HttpURLConnection con = (HttpURLConnection)url.openConnection();
            con.connect();

            if (con.getResponseCode() == 200)
            {
              logger.info("Connection established!!");
            }
            else
            {
              logger.info("No Connection");
              return map1;
            }
          }
          catch (Exception exception)
          {
            logger.info("No Connection");
            return map1;
          }
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
      }

      if ((CommonFunction.checkNull(serviceCalledValue).equalsIgnoreCase("W")) && ((CommonFunction.checkNull(insuranceProduct).equalsIgnoreCase("ASSURELAP")) || (CommonFunction.checkNull(insuranceProduct).equalsIgnoreCase("ASSUREWCTL")) || (CommonFunction.checkNull(insuranceProduct).equalsIgnoreCase("SECURE")) || (CommonFunction.checkNull(insuranceProduct).equalsIgnoreCase("ReliCombo"))) && (CommonFunction.checkNull(insuranceProvider).equalsIgnoreCase("265")))
      {
        String uri = "http://www.religarehealthinsurance.com/abacuswb/rfl-aspire/assure_service.php";

        if (CommonFunction.checkNull(insuranceProduct).equalsIgnoreCase("ReliCombo"))
        {
          insuranceProduct = "ReligareCombo";
        }

        logger.info(new StringBuilder().append("insuranceProduct : ").append(insuranceProduct).toString());
        String auth = "YWRtaW46MTIz";
        String dob = "";

        String productType = insuranceProduct;

        String companyName = "religare";
        String totalAmountWithServiceTax = "";
        int pTenure = Integer.parseInt(policyTenure);
        pTenure *= 12;
        logger.info("In Calculate Insurance Premium :");
        try
        {
          String query1 = new StringBuilder().append("select DATE_FORMAT(CUSTOMER_DOB,'").append(this.dateFormat).append("') from cr_deal_customer_m left join parameter_mst z on (1=1 and z.parameter_key='BUSINESS_DATE' )  where customer_id in (").append(s1).append(")").toString();
          dob = ConnectionDAO.singleReturn(query1.toString());
          logger.info(new StringBuilder().append("query1 :").append(query1).toString());
          logger.info(new StringBuilder().append("dob :").append(dob).toString());
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
        String urlParameters = new StringBuilder().append("dob=").append(dob).append("&auth=").append(auth).append("&loan_amount=").append(sumAssured).append("&product=").append(productType).append("&loan_tenure=").append(pTenure).append("&companyName=").append(companyName).toString();
        logger.info(new StringBuilder().append("urlParameters :").append(urlParameters).toString());
        try
        {
          URL url = new URL(uri);
          HttpURLConnection connection = (HttpURLConnection)url.openConnection();
          connection.setRequestMethod("POST");
          connection.setRequestProperty("Accept", "");

          connection.setDoOutput(true);
          DataOutputStream wr = new DataOutputStream(connection.getOutputStream());
          wr.writeBytes(urlParameters);
          wr.flush();
          wr.close();

          InputStream result = connection.getInputStream();
          String decodedString = "";
          String str = readString(result);

          if (!str.contains("ERROR"))
          {
            logger.info(new StringBuilder().append("errorInfo::").append(result.toString().indexOf("ERROR")).toString());

            decodedString = new String(Base64.decodeBase64(str.getBytes()));
            logger.info(new StringBuilder().append("decodedString:::").append(decodedString).toString());
            if (!productType.equalsIgnoreCase("SECURE"))
            {
              if ((decodedString.contains("totalAmountWithServiceTax")) || (decodedString.contains("premiumWithServiceTax")))
              {
                totalAmountWithServiceTax = decodedString.substring(decodedString.indexOf("totalAmountWithServiceTax:") + "totalAmountWithServiceTax:".length(), decodedString.indexOf("-Product:"));

                totalAmountWithServiceTax = totalAmountWithServiceTax.replace(",", "");
                logger.info(new StringBuilder().append("totalAmountWithServiceTax :").append(totalAmountWithServiceTax).toString());

                if (decodedString.contains("premiumWithServiceTax"))
                {
                  totalAmountWithServiceTax = totalAmountWithServiceTax.substring(totalAmountWithServiceTax.indexOf("premiumWithServiceTax:"), totalAmountWithServiceTax.length());
                  if (totalAmountWithServiceTax.contains("premiumWithServiceTax:"))
                  {
                    totalAmountWithServiceTax = totalAmountWithServiceTax.replace("premiumWithServiceTax:", "");
                  }
                  System.out.println(new StringBuilder().append("totalAmountWithServiceTax For ReligareCombo : ").append(totalAmountWithServiceTax).toString());
                }

              }
              else
              {
                return map1;
              }
            }
            else {
              totalAmountWithServiceTax = decodedString.substring(decodedString.indexOf("-premium:") + "-premium:".length(), decodedString.indexOf("-premiumAddOn:")).replaceAll(",", "");

              totalAmountWithServiceTax = Integer.toString(Integer.parseInt(totalAmountWithServiceTax) + Integer.parseInt(decodedString.substring(decodedString.indexOf("-premiumAddOn:") + "-premiumAddOn:".length(), decodedString.indexOf("-Product:")).replaceAll(",", "")));

              totalAmountWithServiceTax = totalAmountWithServiceTax.replace(",", "");
              logger.info(new StringBuilder().append("totalAmountWithServiceTax :").append(totalAmountWithServiceTax).toString());
            }

          }
          else
          {
            vo = new CpInsuranceVo();
            vo.setInsurancePremium(CommonFunction.checkNull(str).trim());
            list.add(vo);
            map.put("vo", vo);
            vo = null;
          }
          logger.info(new StringBuilder().append("Result :").append(str).toString());
          logger.info(new StringBuilder().append("decodedString :").append(decodedString).toString());
          if (!CommonFunction.checkNull(totalAmountWithServiceTax).equalsIgnoreCase(""))
          {
            vo = new CpInsuranceVo();
            vo.setInsuranceProvider(CommonFunction.checkNull(insuranceProvider).trim());
            vo.setInsuranceProduct(CommonFunction.checkNull(insuranceProduct).trim());
            vo.setPolicyType(CommonFunction.checkNull(policyType).trim());
            vo.setPremiumFinanced(CommonFunction.checkNull(premiumFinanced).trim());
            vo.setInsurancePremium(CommonFunction.checkNull(totalAmountWithServiceTax).trim());
            vo.setChargesOnInsurance("0");
            vo.setOtherChargeId("Other Charges");
            vo.setLbxOtherChargeId("132");

            list.add(vo);
            map.put("vo", vo);
            vo = null;
          }
          map1.put("map", map);
          connection.disconnect();
        }
        catch (MalformedURLException e)
        {
          e.printStackTrace();
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }

      }

      if ((CommonFunction.checkNull(serviceCalledValue).equalsIgnoreCase("W")) && ((CommonFunction.checkNull(insuranceProduct).equalsIgnoreCase("GP")) || (CommonFunction.checkNull(insuranceProduct).equalsIgnoreCase("SMP"))) && (CommonFunction.checkNull(insuranceProvider).equalsIgnoreCase("263")))
      {
        URL url = new URL("https://app6.icicilombard.com/ILESB/api/blaze/AspirePremium");
        String Occupation = "";
        String InsuredName = "";
        String CustomerName = "";
        String dealSanctionAmt = "";
        String loanSanctionAmount = "";
        String disbursalAmt = "";
        String loanDisbursalAmount = "";
        String basicAuth = "";
        String dob = "";
        String dealId = vo.getDealid();
        String userid = "AspireUser";
        String password = "Aspire@123";
        StringBuilder query = new StringBuilder();
        String partyState = "";

        if (insuranceProduct.equalsIgnoreCase("GP"))
          insuranceProduct = insuranceProduct.replace("GP", "GPA &amp; Property");
        else if (insuranceProduct.equalsIgnoreCase("SMP")) {
          insuranceProduct = insuranceProduct.replace("SMP", "SM &amp; Property");
        }
        customerConstitution = new StringBuilder().append("SELECT CUSTOMER_CONSTITUTION FROM cr_deal_customer_m left join parameter_mst z on (1=1 and z.parameter_key='BUSINESS_DATE' ) where customer_id in (").append(s1).append(") and floor (datediff(z.parameter_value,CUSTOMER_DOB)/365)=(select max(floor (datediff(m.parameter_value,CUSTOMER_DOB)/365))from cr_deal_customer_m left join parameter_mst m on(1=1 and parameter_key='BUSINESS_DATE') where customer_id in (").append(s1).append(")) group by customer_id ").toString();
        customerConstitutionValue = ConnectionDAO.singleReturn(customerConstitution);

        if (customerConstitutionValue.equalsIgnoreCase("SALARIED"))
          Occupation = "SALARIED";
        else {
          Occupation = "SELF_EMPLOYED";
        }

        query.append(new StringBuilder().append("select customer_name from cr_deal_customer_m  where customer_id ='").append(s1).append("'").toString());
        logger.info(new StringBuilder().append("Query Customer Name : ").append(query.toString()).toString());
        InsuredName = ConnectionDAO.singleReturn(query.toString());
        query = null;

        query = new StringBuilder();
        query.append(new StringBuilder().append("select round(ifnull(DEAL_LOAN_AMOUNT_NEW,0),2) from cr_deal_loan_dtl where deal_id ='").append(dealId).append("'").toString());
        logger.info(new StringBuilder().append("Query loanSanctionAmount : ").append(query.toString()).toString());
        loanSanctionAmount = ConnectionDAO.singleReturn(query.toString());
        query = null;

        query = new StringBuilder();
        query.append(new StringBuilder().append("select ifnull(round(sum(a.DISBURSAL_AMOUNT),0),0) as DISBURSAL_AMOUNT from cr_loan_disbursal_dtl a left join cr_deal_loan_dtl b on b.DEAL_LOAN_ID = a.LOAN_ID where b.deal_id ='").append(dealId).append("'").toString());
        logger.info(new StringBuilder().append("Query DISBURSAL_AMOUNT : ").append(query.toString()).toString());
        loanDisbursalAmount = ConnectionDAO.singleReturn(query.toString());
        query = null;

        String query1 = new StringBuilder().append("select DATE_FORMAT(CUSTOMER_DOB,'%Y-%m-%d') from cr_deal_customer_m left join parameter_mst z on (1=1 and z.parameter_key='BUSINESS_DATE' )  where customer_id in (").append(s1).append(")").toString();
        dob = ConnectionDAO.singleReturn(query1.toString());
        logger.info(new StringBuilder().append("query1 :").append(query1).toString());

        UUID uid = UUID.fromString("fc315478-a516-4390-93f6-9c1f52b4b41b");
        String CorelationId = UUID.randomUUID().toString();

        query = new StringBuilder();
        query.append(" select distinct com_state_m.STATE_DESC from cr_deal_dtl ");
        query.append(" left join com_branch_m on com_branch_m.BRANCH_ID=cr_deal_dtl.deal_branch ");
        query.append(" left join com_state_m on com_state_m.STATE_ID=com_branch_m.STATE_ID ");
        query.append(new StringBuilder().append(" where cr_deal_dtl.deal_id='").append(dealId).append("' ").toString());
        logger.info(new StringBuilder().append("Query deal state : ").append(query.toString()).toString());
        partyState = ConnectionDAO.singleReturn(query.toString());
        query = null;

        logger.info(new StringBuilder().append("CorelationId \t\t: ").append(CorelationId).toString());
        logger.info(new StringBuilder().append("insuranceProduct \t: ").append(insuranceProduct).toString());
        logger.info(new StringBuilder().append("policyTenure \t\t: ").append(policyTenure).toString());
        logger.info(new StringBuilder().append("tenure \t\t\t: ").append(tenure).toString());
        logger.info(new StringBuilder().append("loanSanctionAmount : ").append(loanSanctionAmount).toString());
        logger.info(new StringBuilder().append("loanDisbursalAmount: ").append(loanDisbursalAmount).toString());
        logger.info(new StringBuilder().append("InsuredName \t\t: ").append(InsuredName).toString());
        logger.info(new StringBuilder().append("age \t\t\t\t: ").append(age).toString());
        logger.info(new StringBuilder().append("Occupation \t\t: ").append(Occupation).toString());
        logger.info(new StringBuilder().append("sumAssured \t\t: ").append(sumAssured).toString());
        logger.info(new StringBuilder().append("dob \t\t\t\t: ").append(dob).toString());
        logger.info(new StringBuilder().append("partyState \t\t: ").append(partyState).toString());

        String xmlString = new StringBuilder().append("<AspireRequest xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"> <ProductType>").append(insuranceProduct).append("</ProductType> ").append(" <CorrelationID>").append(CorelationId).append("</CorrelationID>").append(" <Home>").append(" <StructureTenure>5</StructureTenure> ").append(" <ContentTenure>5</ContentTenure> ").append(" <StructureSI>").append(loanSanctionAmount).append("</StructureSI> ").append(" <PartyState>").append(partyState).append("</PartyState> ").append(" </Home>").append(" <Loan>").append(" <PolicyTenure>").append(policyTenure).append("</PolicyTenure> ").append(" <LoanTenure>").append(tenure).append("</LoanTenure> ").append(" <LoanSanctionAmount>").append(loanSanctionAmount).append("</LoanSanctionAmount> ").append(" <LoanDisbursalAmount>").append(0.0D).append("</LoanDisbursalAmount> ").append(" <PartyState>").append(partyState).append("</PartyState> ").append(" <InsuredDetailsList>").append(" <InsuredDetails>").append(" <InsuredName>").append(InsuredName).append("</InsuredName> ").append(" <InsuredDOB>").append(dob).append("</InsuredDOB> ").append(" <Occupation>").append(Occupation).append("</Occupation> ").append(" <SumInsured>").append(sumAssured).append("</SumInsured> ").append(" </InsuredDetails>").append(" </InsuredDetailsList>").append("   </Loan>").append(" </AspireRequest>").toString();

        logger.info(new StringBuilder().append("xmlString : ").append(xmlString).toString());

        TrustManager[] trustAllCerts = { new X509TrustManager()
        {
          public X509Certificate[] getAcceptedIssuers()
          {
            return new X509Certificate[0];
          }

          public void checkClientTrusted(X509Certificate[] certs, String authType)
          {
          }

          public void checkServerTrusted(X509Certificate[] certs, String authType)
          {
          }
        }
         };
        HostnameVerifier hv = new HostnameVerifier()
        {
          public boolean verify(String hostname, SSLSession session)
          {
            return true;
          }

        };
        try
        {
          SSLContext sc = SSLContext.getInstance("SSL");
          sc.init(null, trustAllCerts, new SecureRandom());
          HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

          HttpsURLConnection.setDefaultHostnameVerifier(hv);
        }
        catch (Exception e)
        {
        }
        try
        {
          DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
          Date date = new Date();
          String CurrentDate = dateFormat.format(date).toString();
          SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
          Calendar cal = Calendar.getInstance();
          String CurrentTime = sdf.format(cal.getTime()).toString();
          String encryptPassword = EncryptPassword("Aspire@123");
          String sAuthStr = new StringBuilder().append("AspireUser|").append(encryptPassword).append("|").append(CurrentDate).append("T").append(CurrentTime).toString();
          basicAuth = new String(new Base64().encode(sAuthStr.getBytes()));
        }
        catch (Exception ex1) {
          ex1.printStackTrace();
        }

        try
        {
          HttpsURLConnection connection = (HttpsURLConnection)url.openConnection();
          connection.setRequestProperty("Content-Type", "application/xml");
          connection.setRequestProperty("ILAuthorization", basicAuth);
          connection.setRequestMethod("POST");
          connection.setDoOutput(true);
          connection.connect();

          DataOutputStream wr = new DataOutputStream(connection.getOutputStream());
          OutputStreamWriter outputStreamWriter = new OutputStreamWriter(wr);
          wr.writeBytes(xmlString);
          wr.flush();
          BufferedReader rd = new BufferedReader(new InputStreamReader(connection.getInputStream()));
          StringBuffer stringBuffer = new StringBuffer();
          String line;
          while ((line = rd.readLine()) != null)
          {
            stringBuffer.append(line);
          }
          logger.info(new StringBuilder().append("Respones Xml : ").append(stringBuffer.append(line)).toString());
          StringBuffer responesBuffer = new StringBuffer();
          responesBuffer = stringBuffer.append(line);
          String respones = responesBuffer.toString();
          int start = 0;
          int end = 0;
          int intTotalPremium = 0;
          String finalRespones = "";
          String TotalPremium = "";
          if (respones.contains("SUCCESS"))
          {
            start = respones.indexOf("</Age>");
            end = respones.indexOf("</TotalPremium>");
            finalRespones = respones.substring(start, end);
            if (finalRespones.contains("</Age><TotalPremium>"))
            {
              finalRespones = finalRespones.replace("</Age><TotalPremium>", "");
              double value = Double.parseDouble(finalRespones);
              value = Math.round(value);
              intTotalPremium = (int)value;
              TotalPremium = String.valueOf(intTotalPremium);
              System.out.println(new StringBuilder().append("TotalPremium : ").append(TotalPremium).toString());
            }

            vo = new CpInsuranceVo();
            vo.setInsuranceProvider(CommonFunction.checkNull(insuranceProvider).trim());
            vo.setInsuranceProduct(CommonFunction.checkNull(insuranceProduct).trim());
            vo.setPolicyType(CommonFunction.checkNull(policyType).trim());
            vo.setPremiumFinanced(CommonFunction.checkNull(premiumFinanced).trim());
            vo.setInsurancePremium(CommonFunction.checkNull(TotalPremium).trim());
            vo.setChargesOnInsurance("0");
            vo.setOtherChargeId("Other Charges");
            vo.setLbxOtherChargeId("132");

            list.add(vo);
            map.put("vo", vo);
            vo = null;
          }
          else if (respones.contains("FAILED"))
          {
            start = respones.indexOf("<ErrorText>");
            end = respones.indexOf("</ErrorText>");

            finalRespones = respones.substring(start, end);
            if (finalRespones.contains("<ErrorText>"))
            {
              finalRespones = finalRespones.replace("<ErrorText>", "");
              finalRespones = new StringBuilder().append("E01 - ").append(finalRespones).toString();
              System.out.println(new StringBuilder().append("Error Message : ").append(finalRespones).toString());
            }

            vo = new CpInsuranceVo();
            vo.setInsurancePremium(CommonFunction.checkNull(finalRespones).trim());
            list.add(vo);
            map.put("vo", vo);
            vo = null;
          }
          map1.put("map", map);
          outputStreamWriter.close();
          rd.close();
        }
        catch (Exception ex)
        {
          String error_msg = ex.getMessage();
          if ((!error_msg.contains("200")) && (error_msg.contains("401")))
          {
            PrepStmtObject insertPrepStmt = new PrepStmtObject();
            ArrayList queryErrorList = new ArrayList();
            StringBuilder queryError = new StringBuilder();
            boolean status = false;
            queryError.append("insert into cr_insurance_error_log (corelation_id,Txn_id,txn_type,Error_msg,Maker_date,maker_id)");
            queryError.append("values ( ");
            queryError.append(" ?, ");
            queryError.append(" ?, ");
            queryError.append(" ?, ");
            queryError.append(" ?, ");
            queryError.append(new StringBuilder().append(" STR_TO_DATE(?,'").append(this.dateFormat).append("'),").toString());
            queryError.append(" ?) ");

            if (CommonFunction.checkNull(CorelationId).equalsIgnoreCase(""))
              insertPrepStmt.addNull();
            else {
              insertPrepStmt.addString(CorelationId);
            }
            if (CommonFunction.checkNull(dealId).equalsIgnoreCase(""))
              insertPrepStmt.addNull();
            else {
              insertPrepStmt.addString(dealId.trim());
            }
            insertPrepStmt.addString("DC");

            if (CommonFunction.checkNull(error_msg).equalsIgnoreCase(""))
              insertPrepStmt.addNull();
            else {
              insertPrepStmt.addString(error_msg.trim());
            }
            if (CommonFunction.checkNull(vo.getMakerDate()).equalsIgnoreCase(""))
              insertPrepStmt.addNull();
            else {
              insertPrepStmt.addString(vo.getMakerDate().trim());
            }
            if (CommonFunction.checkNull(vo.getMakerId()).equalsIgnoreCase(""))
              insertPrepStmt.addNull();
            else {
              insertPrepStmt.addString(vo.getMakerId().trim());
            }
            insertPrepStmt.setSql(queryError.toString());
            logger.info(new StringBuilder().append("In CreditProcessingDaoImpl in calculateCpInsurance() ").append(insertPrepStmt.printQuery()).toString());
            queryErrorList.add(insertPrepStmt);
            status = ConnectionDAO.sqlInsUpdDeletePrepStmt(queryErrorList);
          }

        }

      }

    }
    catch (Exception exp)
    {
      exp.printStackTrace();
    }

    return map1;
  }

  public ArrayList<Object> getOtherChargeId()
  {
    ArrayList list = new ArrayList();
    try
    {
      String query = "select b.charge_desc from cr_insurance_grid_m a join com_charge_code_m b on a.OTHER_CHARGE_id=b.CHARGE_CODE ";
      CpInsuranceVo vo = null;
      ArrayList source = ConnectionDAO.sqlSelect(query);
      int size = source.size();
      for (int i = 0; i < size; i++)
      {
        ArrayList subEduDetail = (ArrayList)source.get(i);
        if (subEduDetail.size() > 0)
        {
          vo = new CpInsuranceVo();
          vo.setOtherChargeId(CommonFunction.checkNull(subEduDetail.get(0)).toString());
          list.add(vo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }

  public ArrayList getViewInsurance(Object ob, String dealId) {
    ArrayList list = new ArrayList();
    CpInsuranceVo vo = (CpInsuranceVo)ob;
    String chargeId = vo.getChargeId();
    String insuranceProvider = vo.getInsuranceProvider();
    String sumAssured = vo.getSumAssured();
    String tenure = vo.getTenure();
    String age = vo.getAge();
    String insurancePremium = vo.getInsurancePremium();
    String chargesOnInsurance = vo.getChargesOnInsurance();
    String otherChargeId = vo.getOtherChargeId();
    String insuranceProductId = vo.getInsuranceProductId();
    String insuranceId = vo.getInsuranceId();
    String serviceCalled = "";
    String serviceProduct = "";
    String qry3 = new StringBuilder().append("select product_id from cr_insurance_dtl  where insurance_id = '").append(insuranceId).append("'").toString();
    String product = ConnectionDAO.singleReturn(qry3);
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select a.charge_id,round(a.sum_assured),a.loan_tenure,round(a.insurance_premium),a.charges_on_premium,c.CHARGE_DESC,policy_type,AMOUNT_TO_BE_FINANCED,a.customer_id,a.product_id,a.nominee_name,date_format(a.nominee_dob,'%d-%m-%Y'),a.gender,a.nominee_relation,policy_tenure,a.SUM_ASSURED_PERCENTAGE,property_type,GM.description,CIPM.METHOD_TYPE,  A.NOMINEE_NAME1,A.GENDER1,date_format(a.nominee_dob1,'%d-%m-%Y'),A.NOMINEE_RELATION1,A.NOMINEE_NAME2,A.GENDER2,date_format(a.nominee_dob2,'%d-%m-%Y'),A.NOMINEE_RELATION2,A.NOMINEE_NAME3,A.GENDER3,date_format(a.nominee_dob3,'%d-%m-%Y'),A.NOMINEE_RELATION3,A.NOMINEE_NAME4,A.GENDER4,date_format(a.nominee_dob4,'%d-%m-%Y'),A.NOMINEE_RELATION4,A.NOMINEE_PERCENTAGE,A.NOMINEE_PERCENTAGE1,A.NOMINEE_PERCENTAGE2,A.NOMINEE_PERCENTAGE3,A.NOMINEE_PERCENTAGE4,A.ADDR,A.ADDR1,A.ADDR2,A.ADDR3,A.ADDR4,  a.NOMINEE_PREFIX,a.NOMINEE_MNAME,a.NOMINEE_LNAME,a.MARITAL_STATUS,a.NOMINEE_AREA,a.NOMINEE_CITY,csm.STATE_DESC,a.NOMINEE_PIN,a.NOMINEE_PREFIX1,a.NOMINEE_MNAME1, a.NOMINEE_LNAME1,a.MARITAL_STATUS1,a.NOMINEE_AREA1,a.NOMINEE_CITY1,csm1.STATE_DESC,a.NOMINEE_PIN1,a.NOMINEE_PREFIX2,a.NOMINEE_MNAME2,a.NOMINEE_LNAME2,a.MARITAL_STATUS2, a.NOMINEE_AREA2,a.NOMINEE_CITY2,csm2.STATE_DESC,a.NOMINEE_PIN2,a.NOMINEE_PREFIX3,a.NOMINEE_MNAME3,a.NOMINEE_LNAME3,a.MARITAL_STATUS3,a.NOMINEE_AREA3,a.NOMINEE_CITY3,csm3.STATE_DESC,a.NOMINEE_PIN3, a.NOMINEE_PREFIX4,a.NOMINEE_MNAME4,a.NOMINEE_LNAME4,a.MARITAL_STATUS4,a.NOMINEE_AREA4,a.NOMINEE_CITY4,csm4.STATE_DESC,a.NOMINEE_PIN4,case a.NOMINEE_ADDRESS_TYPE when 'OFFICE' then 'OFFICE' \twhen 'OTHER' then 'OTHER' when 'PERMANENT' then 'PERMANENT' when 'REGOFF' then 'REGISTERED OFFICE' when 'REI' then 'RESIDENCE' when 'RES' then 'RESI CUM OFFICE' when 'TP' then 'THIRD PARTY'  end ,a.NOMINEE_STREET,case a.NOMINEE_ADDRESS_TYPE1 when 'OFFICE' then 'OFFICE' when 'OTHER' then 'OTHER' when 'PERMANENT' then 'PERMANENT' when 'REGOFF' then 'REGISTERED OFFICE' when 'REI' then 'RESIDENCE' when 'RES' then 'RESI CUM OFFICE' when 'TP' then 'THIRD PARTY' end  ,a.NOMINEE_STREET1,case a.NOMINEE_ADDRESS_TYPE2 when 'OFFICE' then 'OFFICE' when 'OTHER' then 'OTHER' when 'PERMANENT' then 'PERMANENT' when 'REGOFF' then 'REGISTERED OFFICE' when 'REI' then 'RESIDENCE' when 'RES' then 'RESI CUM OFFICE' when 'TP' then 'THIRD PARTY' end ,a.NOMINEE_STREET2, case a.NOMINEE_ADDRESS_TYPE3 when 'OFFICE' then 'OFFICE' when 'OTHER' then 'OTHER' when 'PERMANENT' then 'PERMANENT' when 'REGOFF' then 'REGISTERED OFFICE' when 'REI' then 'RESIDENCE' when 'RES' then 'RESI CUM OFFICE' when 'TP' then 'THIRD PARTY' end ,a.NOMINEE_STREET3,case a.NOMINEE_ADDRESS_TYPE4 when 'OFFICE' then 'OFFICE' when 'OTHER' then 'OTHER' when 'PERMANENT' then 'PERMANENT' when 'REGOFF' then 'REGISTERED OFFICE' when 'REI' then 'RESIDENCE' when 'RES' then 'RESI CUM OFFICE' when 'TP' then 'THIRD PARTY' end ,a.NOMINEE_STREET4, a.NOMINEE_STATE,a.NOMINEE_STATE1,a.NOMINEE_STATE2,a.NOMINEE_STATE3,a.NOMINEE_STATE4  from cr_insurance_dtl a  left join com_state_m csm on csm.STATE_ID=a.NOMINEE_STATE  left join com_state_m csm1 on csm1.STATE_ID=a.NOMINEE_STATE1  left join com_state_m csm2 on csm2.STATE_ID=a.NOMINEE_STATE2  left join com_state_m csm3 on csm3.STATE_ID=a.NOMINEE_STATE3  left join com_state_m csm4 on csm4.STATE_ID=a.NOMINEE_STATE4  join com_charge_code_m b on b.CHARGE_CODE=a.CHARGE_ID  left join com_charge_code_m c on c.CHARGE_CODE=a.OTHER_CHARGE_ID  left join generic_master GM on GM.parent_value=a.charge_id and GM.value='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(product)).trim()).append("'").append(" LEFT JOIN COM_INSURANCE_PRODUCT_METHOD_M CIPM on GM.VALUE=CIPM.PRODUCT_ID and CIPM.REC_STATUS='A' ").append(" where deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' and insurance_id ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(insuranceId)).trim()).append("' ").toString());

      ArrayList view = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("querysssssssss:::::").append(query).toString());
      logger.info(new StringBuilder().append("ArrayList::::::::").append(view).toString());
      query = null;
      int size = view.size();
      for (int i = 0; i < size; i++)
      {
        ArrayList header1 = (ArrayList)view.get(i);
        if ((header1 != null) && (header1.size() > 0))
        {
          vo = new CpInsuranceVo();
          vo.setInsuranceProvider(CommonFunction.checkNull(header1.get(0)).trim());
          vo.setSumAssured(CommonFunction.checkNull(header1.get(1)).trim());
          vo.setTenure(CommonFunction.checkNull(header1.get(2)).trim());
          vo.setInsurancePremium(CommonFunction.checkNull(header1.get(3)).trim());
          vo.setChargesOnInsurance(CommonFunction.checkNull(header1.get(4)).trim());
          vo.setOtherChargeId(CommonFunction.checkNull(header1.get(5)).trim());
          vo.setPolicyType(CommonFunction.checkNull(header1.get(6)).trim());
          vo.setPremiumFinanced(CommonFunction.checkNull(header1.get(7)).trim());
          vo.setCustId(CommonFunction.checkNull(header1.get(8)).trim());
          serviceProduct = CommonFunction.checkNull(header1.get(9)).trim();
          serviceCalled = CommonFunction.checkNull(header1.get(18)).trim();
          vo.setInsuranceProductId(new StringBuilder().append(serviceProduct).append("|").append(serviceCalled).toString());
          vo.setNomineeName(CommonFunction.checkNull(header1.get(10)).trim());
          vo.setDateOfbirth(CommonFunction.checkNull(header1.get(11)).trim());
          vo.setGender(CommonFunction.checkNull(header1.get(12)).trim());
          vo.setRelationshp(CommonFunction.checkNull(header1.get(13)).trim());
          vo.setPolicyTenure(CommonFunction.checkNull(header1.get(14)).trim());
          vo.setSumAssuPer(CommonFunction.checkNull(header1.get(15)).trim());
          vo.setPropertyType(CommonFunction.checkNull(header1.get(16)).trim());
          vo.setInsuranceProduct(CommonFunction.checkNull(header1.get(17)).trim());
          vo.setNomineeName1(CommonFunction.checkNull(header1.get(19)).trim());
          vo.setGender1(CommonFunction.checkNull(header1.get(20)).trim());
          vo.setDateOfbirth1(CommonFunction.checkNull(header1.get(21)).trim());
          vo.setRelationshp1(CommonFunction.checkNull(header1.get(22)).trim());
          vo.setNomineeName2(CommonFunction.checkNull(header1.get(23)).trim());
          vo.setGender2(CommonFunction.checkNull(header1.get(24)).trim());
          vo.setDateOfbirth2(CommonFunction.checkNull(header1.get(25)).trim());
          vo.setRelationshp2(CommonFunction.checkNull(header1.get(26)).trim());
          vo.setNomineeName3(CommonFunction.checkNull(header1.get(27)).trim());
          vo.setGender3(CommonFunction.checkNull(header1.get(28)).trim());
          vo.setDateOfbirth3(CommonFunction.checkNull(header1.get(29)).trim());
          vo.setRelationshp3(CommonFunction.checkNull(header1.get(30)).trim());
          vo.setNomineeName4(CommonFunction.checkNull(header1.get(31)).trim());
          vo.setGender4(CommonFunction.checkNull(header1.get(32)).trim());
          vo.setDateOfbirth4(CommonFunction.checkNull(header1.get(33)).trim());
          vo.setRelationshp4(CommonFunction.checkNull(header1.get(34)).trim());
          vo.setPercentage(CommonFunction.checkNull(header1.get(35)).trim());
          vo.setPercentage1(CommonFunction.checkNull(header1.get(36)).trim());
          vo.setPercentage2(CommonFunction.checkNull(header1.get(37)).trim());
          vo.setPercentage3(CommonFunction.checkNull(header1.get(38)).trim());
          vo.setPercentage4(CommonFunction.checkNull(header1.get(39)).trim());
          vo.setAddr(CommonFunction.checkNull(header1.get(40)).trim());
          vo.setAddr1(CommonFunction.checkNull(header1.get(41)).trim());
          vo.setAddr2(CommonFunction.checkNull(header1.get(42)).trim());
          vo.setAddr3(CommonFunction.checkNull(header1.get(43)).trim());
          vo.setAddr4(CommonFunction.checkNull(header1.get(44)).trim());

          vo.setsPrefix(CommonFunction.checkNull(header1.get(45)).trim());
          vo.setNomineeMName(CommonFunction.checkNull(header1.get(46)).trim());
          vo.setNomineeLName(CommonFunction.checkNull(header1.get(47)).trim());
          vo.setSmaritalStatus(CommonFunction.checkNull(header1.get(48)).trim());
          vo.setSnomineeArea(CommonFunction.checkNull(header1.get(49)).trim());
          vo.setSnomineeCity(CommonFunction.checkNull(header1.get(50)).trim());
          vo.setSnomineeState(CommonFunction.checkNull(header1.get(51)).trim());
          vo.setSnomineePin(CommonFunction.checkNull(header1.get(52)).trim());

          vo.setsPrefix1(CommonFunction.checkNull(header1.get(53)).trim());
          vo.setNomineeMName1(CommonFunction.checkNull(header1.get(54)).trim());
          vo.setNomineeLName1(CommonFunction.checkNull(header1.get(55)).trim());
          vo.setSmaritalstatus1(CommonFunction.checkNull(header1.get(56)).trim());
          vo.setsNomineeArea1(CommonFunction.checkNull(header1.get(57)).trim());
          vo.setsNomineeCity1(CommonFunction.checkNull(header1.get(58)).trim());
          vo.setsNomineeState1(CommonFunction.checkNull(header1.get(59)).trim());
          vo.setsNomineePin1(CommonFunction.checkNull(header1.get(60)).trim());

          vo.setsPrefix2(CommonFunction.checkNull(header1.get(61)).trim());
          vo.setNomineeMName2(CommonFunction.checkNull(header1.get(62)).trim());
          vo.setNomineeLName2(CommonFunction.checkNull(header1.get(63)).trim());
          vo.setSmaritalStatus2(CommonFunction.checkNull(header1.get(64)).trim());
          vo.setsNomineeArea2(CommonFunction.checkNull(header1.get(65)).trim());
          vo.setsNomineeCity2(CommonFunction.checkNull(header1.get(66)).trim());
          vo.setsNomineeState2(CommonFunction.checkNull(header1.get(67)).trim());
          vo.setsNomineePin2(CommonFunction.checkNull(header1.get(68)).trim());

          vo.setsPrefix3(CommonFunction.checkNull(header1.get(69)).trim());
          vo.setNomineeMName3(CommonFunction.checkNull(header1.get(70)).trim());
          vo.setNomineeLName3(CommonFunction.checkNull(header1.get(71)).trim());
          vo.setSmaritalStatus3(CommonFunction.checkNull(header1.get(72)).trim());
          vo.setsNomineeArea3(CommonFunction.checkNull(header1.get(73)).trim());
          vo.setsNomineeCity3(CommonFunction.checkNull(header1.get(74)).trim());
          vo.setsNomineeState3(CommonFunction.checkNull(header1.get(75)).trim());
          vo.setsNomineePin3(CommonFunction.checkNull(header1.get(76)).trim());

          vo.setsPrefix4(CommonFunction.checkNull(header1.get(77)).trim());
          vo.setNomineeMName4(CommonFunction.checkNull(header1.get(78)).trim());
          vo.setNomineeLName4(CommonFunction.checkNull(header1.get(79)).trim());
          vo.setSmaritalStatus4(CommonFunction.checkNull(header1.get(80)).trim());
          vo.setsNomineeArea4(CommonFunction.checkNull(header1.get(81)).trim());
          vo.setsNomineeCity4(CommonFunction.checkNull(header1.get(82)).trim());
          vo.setsNomineeState4(CommonFunction.checkNull(header1.get(83)).trim());
          vo.setsNomineePin4(CommonFunction.checkNull(header1.get(84)).trim());
          vo.setSaddressType(CommonFunction.checkNull(header1.get(85)).trim());
          vo.setSinsuranceStreet(CommonFunction.checkNull(header1.get(86)).trim());

          vo.setSaddressType1(CommonFunction.checkNull(header1.get(87)).trim());
          vo.setSinsuranceStreet1(CommonFunction.checkNull(header1.get(88)).trim());
          vo.setSaddressType2(CommonFunction.checkNull(header1.get(89)).trim());
          vo.setSinsuranceStreet2(CommonFunction.checkNull(header1.get(90)).trim());
          vo.setSaddressType3(CommonFunction.checkNull(header1.get(91)).trim());
          vo.setSinsuranceStreet3(CommonFunction.checkNull(header1.get(92)).trim());
          vo.setSaddressType4(CommonFunction.checkNull(header1.get(93)).trim());
          vo.setSinsuranceStreet4(CommonFunction.checkNull(header1.get(94)).trim());

          vo.setTxtStateCode(CommonFunction.checkNull(header1.get(95)).trim());
          vo.setTxtStateCode1(CommonFunction.checkNull(header1.get(96)).trim());
          vo.setTxtStateCode2(CommonFunction.checkNull(header1.get(97)).trim());
          vo.setTxtStateCode3(CommonFunction.checkNull(header1.get(98)).trim());
          vo.setTxtStateCode4(CommonFunction.checkNull(header1.get(99)).trim());

          list.add(vo);
          vo = null;
        }
        header1.clear();
        header1 = null;
      }
      view.clear();
      view = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return list;
  }

  public ArrayList getAllInsuranceData(Object ob, String dealId) {
    ArrayList list = new ArrayList();
    boolean status = false;
    CpInsuranceVo vo = (CpInsuranceVo)ob;
    String chargeId = vo.getChargeId();
    String insuranceProvider = vo.getInsuranceProvider();
    String sumAssured = vo.getSumAssured();
    String tenure = vo.getTenure();
    String age = vo.getAge();
    String insurancePremium = vo.getInsurancePremium();
    String chargesOnInsurance = vo.getChargesOnInsurance();
    String otherChargeId = vo.getOtherChargeId();
    try
    {
      String sqlquery1 = new StringBuilder().append("select deal_id from cr_insurance_dtl where deal_id='").append(dealId).append("'").toString();
      status = ConnectionDAO.checkStatus(sqlquery1);

      if (status)
      {
        StringBuilder query = new StringBuilder();
        query.append(new StringBuilder().append("select a.charge_id,round(b.deal_loan_amount_new), TENURE_IN_MONTH_TO_YEAR(b.deal_tenure/12),a.insurance_premium,a.charges_on_premium,a.other_charge_id,a.policy_type,a.amount_to_be_financed,a.product_id,round(b.deal_loan_amount_new),TENURE_IN_MONTH_TO_YEAR(b.deal_tenure/12),a.property_type,a.product_id from cr_insurance_dtl a  left join cr_deal_loan_dtl b on b.deal_id=a.deal_id  join cr_deal_customer_role c on a.deal_id=c.deal_id  join cr_deal_customer_m d on c.deal_customer_id=d.customer_id where a.deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("'").toString());

        logger.info(new StringBuilder().append("Query for insurane::::::::::::::::::::").append(query).toString());
        ArrayList view = ConnectionDAO.sqlSelect(query.toString());
        logger.info(new StringBuilder().append("List of insurance sum:::::::::::::::::::").append(query).toString());
        query = null;
        int size = view.size();
        for (int i = 0; i < size; i++)
        {
          ArrayList header1 = (ArrayList)view.get(i);
          if ((header1 != null) && (header1.size() > 0))
          {
            vo = new CpInsuranceVo();
            vo.setInsuranceProvider(CommonFunction.checkNull(header1.get(0)).trim());
            vo.setSumAssured(CommonFunction.checkNull(header1.get(1)).trim());
            vo.setTenure(CommonFunction.checkNull(header1.get(2)).trim());

            vo.setInsurancePremium(CommonFunction.checkNull(header1.get(3)).trim());
            vo.setChargesOnInsurance(CommonFunction.checkNull(header1.get(4)).trim());
            vo.setOtherChargeId(CommonFunction.checkNull(header1.get(5)).trim());
            vo.setPolicyType(CommonFunction.checkNull(header1.get(6)).trim());
            vo.setPremiumFinanced(CommonFunction.checkNull(header1.get(7)).trim());
            vo.setInsuranceProduct(CommonFunction.checkNull(header1.get(8)).trim());
            vo.setSum(CommonFunction.checkNull(header1.get(9)).trim());
            vo.setPolicyTenure(CommonFunction.checkNull(header1.get(10)).trim());
            vo.setPropertyType(CommonFunction.checkNull(header1.get(11)).trim());
            vo.setInsuranceProduct(CommonFunction.checkNull(header1.get(12)).trim());
            list.add(vo);
            vo = null;
          }
          header1.clear();
          header1 = null;
        }
        view.clear();
        view = null;
      }

    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return list;
  }

  public boolean deleteCpInsurance(CpInsuranceVo vo, String dealId)
  {
    boolean status = false;
    String qry = null;
    PrepStmtObject insertPrepStmtObject = null;
    ArrayList alDeleteQuery = new ArrayList(1);

    RefreshFlagVo vo1 = new RefreshFlagVo();
    if ((dealId != null) && (!dealId.trim().equalsIgnoreCase("")))
      vo1.setRecordId(Integer.parseInt(dealId.trim()));
    vo1.setTabIndex(16);
    vo1.setModuleName("CP");
    RefreshFlagValueInsert.updateRefreshFlag(vo1);
    String insuranceId = vo.getInsuranceId();
    String insuranceIdList = "";

    insuranceIdList = insuranceId.replace("|", ",");
    char[] chars = insuranceIdList.toCharArray();
    String s1 = "";
    int abc = chars.length - 1;
    for (int i = 0; i < chars.length - 1; i++)
    {
      s1 = new StringBuilder().append(s1).append(chars[i]).toString();
    }

    try
    {
      qry = new StringBuilder().append("delete from cr_insurance_dtl where deal_id='").append(dealId).append("' and insurance_id in(").append(s1).append(") ").toString();
      insertPrepStmtObject = new PrepStmtObject();
      insertPrepStmtObject.setSql(qry);
      alDeleteQuery.add(insertPrepStmtObject);
      logger.info(new StringBuilder().append("qry to delete insurance::").append(qry).toString());
      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(alDeleteQuery);
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return status;
  }
  public ArrayList<Object> getpolicyTypes() {
    logger.info("in getpolicyTypes() of insurance tab. ");
    ArrayList list = new ArrayList();
    try
    {
      String query = "SELECT VALUE,DESCRIPTION FROM generic_master WHERE generic_key='POLICY_TYPE' AND REC_STATUS='A' ";
      logger.info(new StringBuilder().append("in getpolicyTypes() of CreditProcessingDAOImpl Query :  ").append(query).toString());
      CpInsuranceVo vo = null;
      ArrayList source = ConnectionDAO.sqlSelect(query);
      int size = source.size();
      for (int i = 0; i < size; i++)
      {
        ArrayList subEduDetail = (ArrayList)source.get(i);
        if (subEduDetail.size() > 0)
        {
          vo = new CpInsuranceVo();
          vo.setPolicyTypeId(CommonFunction.checkNull(subEduDetail.get(0)).toString());
          vo.setPolicyType(CommonFunction.checkNull(subEduDetail.get(1)).toString());

          list.add(vo);
        }
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }
  public ArrayList<Object> getInsuranceProducts(String insuranceProvider) {
    logger.info("in getInsuranceProducts() of insurance tab. ");
    ArrayList list = new ArrayList();
    try
    {
      String query = new StringBuilder().append("SELECT VALUE,DESCRIPTION,CIPM.METHOD_TYPE,cipm.sum_assured_percentage FROM generic_master A  left join cr_insurance_grid_m C on C.charge_id=A.parent_value  LEFT JOIN COM_INSURANCE_PRODUCT_METHOD_M CIPM on A.VALUE=CIPM.PRODUCT_ID and CIPM.REC_STATUS='A'  WHERE A.generic_key='INSURANCE_PRODUCT' AND A.REC_STATUS='A' and A.parent_value='").append(insuranceProvider).append("' group by A.DESCRIPTION ").toString();

      logger.info(new StringBuilder().append("in getInsuranceProducts() of CreditProcessingDAOImpl Query :  ").append(query).toString());
      CpInsuranceVo vo = null;
      ArrayList source = ConnectionDAO.sqlSelect(query);
      String productId = "";
      String serviceCalled = "";
      String serviceProduct = "";
      String sumAssuredMapping = "";
      int size = source.size();
      for (int i = 0; i < size; i++)
      {
        ArrayList subEduDetail = (ArrayList)source.get(i);
        if (subEduDetail.size() > 0)
        {
          vo = new CpInsuranceVo();
          productId = CommonFunction.checkNull(subEduDetail.get(0)).toString();
          serviceCalled = CommonFunction.checkNull(subEduDetail.get(2)).toString();
          sumAssuredMapping = CommonFunction.checkNull(subEduDetail.get(3)).toString();
          serviceProduct = new StringBuilder().append(productId).append("|").append(serviceCalled).append("|").append(sumAssuredMapping).toString();
          vo.setInsuranceProductId(serviceProduct);
          vo.setInsuranceProduct(CommonFunction.checkNull(subEduDetail.get(1)).toString());

          list.add(vo);
        }
        serviceProduct = "";
      }
    } catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }
  public ArrayList<Object> getCustomerDetailList(Object ob, String dealId) {
    logger.info("in getpolicyTypes() of insurance tab. ");
    ArrayList list = new ArrayList();
    StringBuilder queryTemp = new StringBuilder();
    int count = 0;
    try
    {
      String query = new StringBuilder().append("select c.deal_customer_id,B.customer_name,D.description,date_format(B.CUSTOMER_DOB,'%d-%m-%Y'),floor(datediff(m.parameter_value,B.CUSTOMER_DOB)/365),GM.DESCRIPTION  from cr_deal_dtl A  left join cr_deal_customer_role C on C.deal_id=A.deal_id  left join parameter_mst m on (1=1 and parameter_key='BUSINESS_DATE')   left join cr_deal_customer_m B on B.customer_id=C.deal_customer_id  left join generic_master D on D.value=C.deal_customer_role_type and D.generic_key='CUST_ROLE' and D.rec_status='A'  LEFT JOIN generic_master GM ON GM.VALUE= B.CUSTOMER_CONSTITUTION AND GM.GENERIC_KEY='CUST_CONSTITUTION' AND GM.REC_STATUS='A' and GM.parent_value='INDV'  where C.deal_customer_role_type in('PRAPPL','COAPPL') and A.deal_id='").append(dealId).append("' ").toString();

      queryTemp.append(new StringBuilder().append("SELECT  COUNT(1)  from cr_deal_dtl A left join cr_deal_customer_role C on C.deal_id=A.deal_id  left join cr_deal_customer_m B on B.customer_id=C.deal_customer_id left join generic_master D on D.value=C.deal_customer_role_type and D.generic_key='CUST_ROLE' and D.rec_status='A'  LEFT JOIN generic_master GM ON GM.VALUE= B.CUSTOMER_CATEGORY AND GM.GENERIC_KEY='CUST_CATEGORY' AND GM.REC_STATUS='A'  where C.deal_customer_role_type in('PRAPPL','COAPPL') and A.deal_id='").append(dealId).append("'  ").toString());

      logger.info(new StringBuilder().append("query for link .............").append(queryTemp.toString()).toString());
      String dataCount = ConnectionDAO.singleReturn(queryTemp.toString());
      if (CommonFunction.checkNull(dataCount).equalsIgnoreCase("0"))
      {
        count = Integer.parseInt(dataCount);
      }
      if (!CommonFunction.checkNull(dataCount).equalsIgnoreCase("0"))
        count = Integer.parseInt(dataCount);
      logger.info(new StringBuilder().append("in getCustomerDetailList() of CreditProcessingDAOImpl Query :  ").append(query).toString());
      CpInsuranceVo vo = (CpInsuranceVo)ob;
      ArrayList source = ConnectionDAO.sqlSelect(query);
      int size = source.size();
      for (int i = 0; i <= size; i++)
      {
        if (size > 0) {
          ArrayList subEduDetail = (ArrayList)source.get(i);
          if (subEduDetail.size() > 0)
          {
            vo = new CpInsuranceVo();

            vo.setCustomerId(CommonFunction.checkNull(subEduDetail.get(0)).toString());
            vo.setBorrowerName(CommonFunction.checkNull(subEduDetail.get(1)).toString());
            vo.setCustomerType(CommonFunction.checkNull(subEduDetail.get(2)).toString());
            vo.setDob(CommonFunction.checkNull(subEduDetail.get(3)).toString());
            vo.setAge1(CommonFunction.checkNull(subEduDetail.get(4)).toString());
            vo.setCustomerConstitution(CommonFunction.checkNull(subEduDetail.get(5)).toString());
            vo.setTotalRecordSize(count);
            list.add(vo);
          }
        }
        else {
          vo = new CpInsuranceVo();

          vo.setCustomerId("");
          vo.setBorrowerName("");
          vo.setCustomerType("");
          vo.setDob("");
          vo.setAge1("");
          vo.setCustomerConstitution("");
          vo.setTotalRecordSize(count);
          list.add(vo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return list;
  }
  public ArrayList getSaveInsuranceData(CpInsuranceVo vo, String insuranceProvider, String sumAssured, String tenure, String age, String insuranceProduct, String policyType, String premiumFinanced, String dealId) {
    ArrayList list = new ArrayList();

    String chargeId = vo.getChargeId();
    String cust = CommonFunction.checkNull(vo.getCustId());
    String insurancePremium = vo.getInsurancePremium();
    String chargesOnInsurance = vo.getChargesOnInsurance();
    String otherChargeId = vo.getOtherChargeId();

    String s1 = "";
    String str = new StringBuilder().append("select distinct replace(customer_id,'|',',')from cr_insurance_dtl where deal_id='").append(dealId).append("' ").toString();
    String abc = "";
    ArrayList abcCust = new ArrayList();
    try
    {
      String str1 = ConnectionDAO.singleReturn(str);
      logger.info(new StringBuilder().append("str1 ").append(str1).toString());
      abc = new StringBuilder().append("select distinct replace(customer_id,'|',',') from cr_insurance_dtl where deal_id='").append(dealId).append("' ").toString();
      abcCust = ConnectionDAO.sqlSelect(abc.toString());

      int len = abcCust.size();
      for (int j = 0; j < len; j++) {
        logger.info(new StringBuilder().append("abcCust ").append(abcCust.get(j)).toString());

        ArrayList header10 = (ArrayList)abcCust.get(j);
        String str111 = header10.toString();
        String temp = str111.substring(1, str111.length() - 1);
        String xyz = temp.replace(",", "|");
        logger.info(new StringBuilder().append("str is :: ").append(str).toString());
        logger.info(new StringBuilder().append("len of abccust is :: ").append(len).toString());
        logger.info(new StringBuilder().append("xyz is :: ").append(xyz).toString());

        StringBuilder query = new StringBuilder();
        query.append(new StringBuilder().append("select distinct b.charge_desc,product_id,gm.description,group_concat(d.customer_name),round(a.insurance_premium),a.insurance_id from cr_insurance_dtl a  join com_charge_code_m b on b.CHARGE_CODE=a.CHARGE_ID   join generic_master gm on gm.value=a.product_id and gm.generic_key='INSURANCE_PRODUCT'    join cr_deal_customer_m d on d.customer_id in (").append(temp).append(")  ").append(" where deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' and a.customer_id in ('").append(xyz).append("')  group by insurance_id  order by a.CHARGE_ID,a.product_id ").toString());

        logger.info(new StringBuilder().append("query  :  ").append(query).toString());
        ArrayList view = ConnectionDAO.sqlSelect(query.toString());
        query = null;
        int size = view.size();
        for (int i = 0; i < size; i++)
        {
          ArrayList header1 = (ArrayList)view.get(i);
          if ((header1 != null) && (header1.size() > 0))
          {
            vo = new CpInsuranceVo();
            vo.setInsuranceProvider(CommonFunction.checkNull(header1.get(0)).trim());
            vo.setInsuranceProductId(CommonFunction.checkNull(header1.get(1)).trim());
            vo.setInsuranceProduct(CommonFunction.checkNull(header1.get(2)).trim());
            vo.setCustomerId(CommonFunction.checkNull(header1.get(3)).trim());
            vo.setInsurancePremium(CommonFunction.checkNull(header1.get(4)).trim());
            vo.setInsuranceId(CommonFunction.checkNull(header1.get(5)).trim());

            list.add(vo);
          }

          header1.clear();
          header1 = null;
        }
        view.clear();
        view = null;
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    Collections.sort(list, CpInsuranceVo.insuranceProviderSorting);
    return list;
  }

  public ArrayList<Object> getRelation(CpInsuranceVo vo, String dealId) {
    ArrayList mainList = new ArrayList();
    try
    {
      String query = "select VALUE,DESCRIPTION FROM generic_master  WHERE GENERIC_KEY='RELATION_TYPE'  AND REC_STATUS='A'";
      logger.info(new StringBuilder().append("query for the relation *****").append(query).toString());
      ArrayList list = ConnectionDAO.sqlSelect(query);

      logger.info(new StringBuilder().append("size of tyhe list********").append(list.size()).toString());

      for (int i = 0; i < list.size(); i++) {
        ArrayList data = (ArrayList)list.get(i);
        if (data.size() > 0) {
          vo = new CpInsuranceVo();
          vo.setRelationshpId(CommonFunction.checkNull(data.get(0)));
          vo.setRelationshp(CommonFunction.checkNull(data.get(1)));
          mainList.add(vo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return mainList;
  }

  public ArrayList<Object> getPropertyType(CpInsuranceVo vo, String dealId) {
    ArrayList mainList = new ArrayList();
    try
    {
      String query = new StringBuilder().append(" select property_type,gm.description from cr_asset_collateral_m cacm  left join cr_deal_collateral_m cdcm on cdcm.assetid=cacm.asset_id  left join cr_deal_dtl cdd on cdd.deal_id= cdcm.deal_id   join generic_master gm on gm.value=cacm.property_type and gm.generic_key='PROPERTY_TYPE' and gm.rec_status='A'  where cdd.deal_id= '").append(dealId).append("' limit 1 ").toString();

      logger.info(new StringBuilder().append("query for the PropertyType *****").append(query).toString());
      ArrayList list = ConnectionDAO.sqlSelect(query);

      logger.info(new StringBuilder().append("size of PropertyType list********").append(list.size()).toString());

      for (int i = 0; i < list.size(); i++) {
        ArrayList data = (ArrayList)list.get(i);
        if (data.size() > 0) {
          vo = new CpInsuranceVo();
          vo.setPropertyTypeId(CommonFunction.checkNull(data.get(0)));
          vo.setPropertyType(CommonFunction.checkNull(data.get(1)));
          mainList.add(vo);
        }
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }

    return mainList;
  }

  public ArrayList getReloadInsurance(Object ob, String dealId) {
    ArrayList list = new ArrayList();
    CpInsuranceVo vo = (CpInsuranceVo)ob;
    String chargeId = vo.getChargeId();
    String insuranceProvider = vo.getInsuranceProvider();
    String sumAssured = vo.getSumAssured();
    String tenure = vo.getTenure();
    String age = vo.getAge();
    String insurancePremium = vo.getInsurancePremium();
    String chargesOnInsurance = vo.getChargesOnInsurance();
    String otherChargeId = vo.getOtherChargeId();
    String insuranceProductId = vo.getInsuranceProductId();
    String insuranceId = vo.getInsuranceId();
    String serviceCalled = "";
    String serviceProduct = "";
    String qry3 = new StringBuilder().append("select product_id from cr_insurance_dtl  where insurance_id = '").append(insuranceId).append("'").toString();
    String product = ConnectionDAO.singleReturn(qry3);
    try
    {
      StringBuilder query = new StringBuilder();
      query.append(new StringBuilder().append("select a.charge_id,round(a.sum_assured),a.loan_tenure,round(a.insurance_premium),a.charges_on_premium,c.CHARGE_DESC,policy_type,AMOUNT_TO_BE_FINANCED,a.customer_id,a.product_id,a.nominee_name,date_format(a.nominee_dob,'%d-%m-%Y'),a.gender,a.nominee_relation,policy_tenure,a.SUM_ASSURED_PERCENTAGE,property_type,GM.description,CIPM.METHOD_TYPE,  A.NOMINEE_NAME1,A.GENDER1,date_format(a.nominee_dob1,'%d-%m-%Y'),A.NOMINEE_RELATION1,A.NOMINEE_NAME2,A.GENDER2,date_format(a.nominee_dob2,'%d-%m-%Y'),A.NOMINEE_RELATION2,A.NOMINEE_NAME3,A.GENDER3,date_format(a.nominee_dob3,'%d-%m-%Y'),A.NOMINEE_RELATION3,A.NOMINEE_NAME4,A.GENDER4,date_format(a.nominee_dob4,'%d-%m-%Y'),A.NOMINEE_RELATION4,A.NOMINEE_PERCENTAGE,A.NOMINEE_PERCENTAGE1,A.NOMINEE_PERCENTAGE2,A.NOMINEE_PERCENTAGE3,A.NOMINEE_PERCENTAGE4,A.ADDR,A.ADDR1,A.ADDR2,A.ADDR3,A.ADDR4,  a.NOMINEE_PREFIX,a.NOMINEE_MNAME,a.NOMINEE_LNAME,a.MARITAL_STATUS,a.NOMINEE_AREA,a.NOMINEE_CITY,csm.STATE_DESC,a.NOMINEE_PIN,a.NOMINEE_PREFIX1,a.NOMINEE_MNAME1, a.NOMINEE_LNAME1,a.MARITAL_STATUS1,a.NOMINEE_AREA1,a.NOMINEE_CITY1,csm1.STATE_DESC,a.NOMINEE_PIN1,a.NOMINEE_PREFIX2,a.NOMINEE_MNAME2,a.NOMINEE_LNAME2,a.MARITAL_STATUS2, a.NOMINEE_AREA2,a.NOMINEE_CITY2,csm2.STATE_DESC,a.NOMINEE_PIN2,a.NOMINEE_PREFIX3,a.NOMINEE_MNAME3,a.NOMINEE_LNAME3,a.MARITAL_STATUS3,a.NOMINEE_AREA3,a.NOMINEE_CITY3,csm3.STATE_DESC,a.NOMINEE_PIN3, a.NOMINEE_PREFIX4,a.NOMINEE_MNAME4,a.NOMINEE_LNAME4,a.MARITAL_STATUS4,a.NOMINEE_AREA4,a.NOMINEE_CITY4,csm4.STATE_DESC,a.NOMINEE_PIN4,a.NOMINEE_ADDRESS_TYPE,a.NOMINEE_STREET,a.NOMINEE_ADDRESS_TYPE1,a.NOMINEE_STREET1,a.NOMINEE_ADDRESS_TYPE2,a.NOMINEE_STREET2, a.NOMINEE_ADDRESS_TYPE3,a.NOMINEE_STREET3,a.NOMINEE_ADDRESS_TYPE4,a.NOMINEE_STREET4, a.NOMINEE_STATE,a.NOMINEE_STATE1,a.NOMINEE_STATE2,a.NOMINEE_STATE3,a.NOMINEE_STATE4 from cr_insurance_dtl a  left join com_state_m csm on csm.STATE_ID=a.NOMINEE_STATE  left join com_state_m csm1 on csm1.STATE_ID=a.NOMINEE_STATE1  left join com_state_m csm2 on csm2.STATE_ID=a.NOMINEE_STATE2  left join com_state_m csm3 on csm3.STATE_ID=a.NOMINEE_STATE3  left join com_state_m csm4 on csm4.STATE_ID=a.NOMINEE_STATE4  join com_charge_code_m b on b.CHARGE_CODE=a.CHARGE_ID  left join com_charge_code_m c on c.CHARGE_CODE=a.OTHER_CHARGE_ID  left join generic_master GM on GM.parent_value=a.charge_id and GM.value='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(product)).trim()).append("'").append(" LEFT JOIN COM_INSURANCE_PRODUCT_METHOD_M CIPM on GM.VALUE=CIPM.PRODUCT_ID and CIPM.REC_STATUS='A' ").append(" where deal_id='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()).append("' and insurance_id ='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(insuranceId)).trim()).append("' ").toString());

      ArrayList view = ConnectionDAO.sqlSelect(query.toString());
      logger.info(new StringBuilder().append("querysssssssss:::::").append(query).toString());
      query = null;
      int size = view.size();
      for (int i = 0; i < size; i++)
      {
        ArrayList header1 = (ArrayList)view.get(i);
        if ((header1 != null) && (header1.size() > 0))
        {
          vo = new CpInsuranceVo();
          vo.setInsuranceProvider(CommonFunction.checkNull(header1.get(0)).trim());
          vo.setSumAssured(CommonFunction.checkNull(header1.get(1)).trim());
          vo.setTenure(CommonFunction.checkNull(header1.get(2)).trim());
          vo.setInsurancePremium(CommonFunction.checkNull(header1.get(3)).trim());
          vo.setChargesOnInsurance(CommonFunction.checkNull(header1.get(4)).trim());
          vo.setOtherChargeId(CommonFunction.checkNull(header1.get(5)).trim());
          vo.setPolicyType(CommonFunction.checkNull(header1.get(6)).trim());
          vo.setPremiumFinanced(CommonFunction.checkNull(header1.get(7)).trim());
          vo.setCustId(CommonFunction.checkNull(header1.get(8)).trim());
          serviceProduct = CommonFunction.checkNull(header1.get(9)).trim();
          serviceCalled = CommonFunction.checkNull(header1.get(18)).trim();
          vo.setInsuranceProductId(new StringBuilder().append(serviceProduct).append("|").append(serviceCalled).toString());
          vo.setNomineeName(CommonFunction.checkNull(header1.get(10)).trim());
          vo.setDateOfbirth(CommonFunction.checkNull(header1.get(11)).trim());
          vo.setGender(CommonFunction.checkNull(header1.get(12)).trim());
          vo.setRelationshp(CommonFunction.checkNull(header1.get(13)).trim());
          vo.setPolicyTenure(CommonFunction.checkNull(header1.get(14)).trim());
          vo.setSumAssuPer(CommonFunction.checkNull(header1.get(15)).trim());
          vo.setPropertyType(CommonFunction.checkNull(header1.get(16)).trim());
          vo.setInsuranceProduct(CommonFunction.checkNull(header1.get(17)).trim());
          vo.setNomineeName1(CommonFunction.checkNull(header1.get(19)).trim());
          vo.setGender1(CommonFunction.checkNull(header1.get(20)).trim());
          vo.setDateOfbirth1(CommonFunction.checkNull(header1.get(21)).trim());
          vo.setRelationshp1(CommonFunction.checkNull(header1.get(22)).trim());
          vo.setNomineeName2(CommonFunction.checkNull(header1.get(23)).trim());
          vo.setGender2(CommonFunction.checkNull(header1.get(24)).trim());
          vo.setDateOfbirth2(CommonFunction.checkNull(header1.get(25)).trim());
          vo.setRelationshp2(CommonFunction.checkNull(header1.get(26)).trim());
          vo.setNomineeName3(CommonFunction.checkNull(header1.get(27)).trim());
          vo.setGender3(CommonFunction.checkNull(header1.get(28)).trim());
          vo.setDateOfbirth3(CommonFunction.checkNull(header1.get(29)).trim());
          vo.setRelationshp3(CommonFunction.checkNull(header1.get(30)).trim());
          vo.setNomineeName4(CommonFunction.checkNull(header1.get(31)).trim());
          vo.setGender4(CommonFunction.checkNull(header1.get(32)).trim());
          vo.setDateOfbirth4(CommonFunction.checkNull(header1.get(33)).trim());
          vo.setRelationshp4(CommonFunction.checkNull(header1.get(34)).trim());
          vo.setPercentage(CommonFunction.checkNull(header1.get(35)).trim());
          vo.setPercentage1(CommonFunction.checkNull(header1.get(36)).trim());
          vo.setPercentage2(CommonFunction.checkNull(header1.get(37)).trim());
          vo.setPercentage3(CommonFunction.checkNull(header1.get(38)).trim());
          vo.setPercentage4(CommonFunction.checkNull(header1.get(39)).trim());
          vo.setAddr(CommonFunction.checkNull(header1.get(40)).trim());
          vo.setAddr1(CommonFunction.checkNull(header1.get(41)).trim());
          vo.setAddr2(CommonFunction.checkNull(header1.get(42)).trim());
          vo.setAddr3(CommonFunction.checkNull(header1.get(43)).trim());
          vo.setAddr4(CommonFunction.checkNull(header1.get(44)).trim());

          vo.setsPrefix(CommonFunction.checkNull(header1.get(45)).trim());
          vo.setNomineeMName(CommonFunction.checkNull(header1.get(46)).trim());
          vo.setNomineeLName(CommonFunction.checkNull(header1.get(47)).trim());
          vo.setSmaritalStatus(CommonFunction.checkNull(header1.get(48)).trim());
          vo.setSnomineeArea(CommonFunction.checkNull(header1.get(49)).trim());
          vo.setSnomineeCity(CommonFunction.checkNull(header1.get(50)).trim());
          vo.setSnomineeState(CommonFunction.checkNull(header1.get(51)).trim());
          vo.setSnomineePin(CommonFunction.checkNull(header1.get(52)).trim());

          vo.setsPrefix1(CommonFunction.checkNull(header1.get(53)).trim());
          vo.setNomineeMName1(CommonFunction.checkNull(header1.get(54)).trim());
          vo.setNomineeLName1(CommonFunction.checkNull(header1.get(55)).trim());
          vo.setSmaritalstatus1(CommonFunction.checkNull(header1.get(56)).trim());
          vo.setsNomineeArea1(CommonFunction.checkNull(header1.get(57)).trim());
          vo.setsNomineeCity1(CommonFunction.checkNull(header1.get(58)).trim());
          vo.setsNomineeState1(CommonFunction.checkNull(header1.get(59)).trim());
          vo.setsNomineePin1(CommonFunction.checkNull(header1.get(60)).trim());

          vo.setsPrefix2(CommonFunction.checkNull(header1.get(61)).trim());
          vo.setNomineeMName2(CommonFunction.checkNull(header1.get(62)).trim());
          vo.setNomineeLName2(CommonFunction.checkNull(header1.get(63)).trim());
          vo.setSmaritalStatus2(CommonFunction.checkNull(header1.get(64)).trim());
          vo.setsNomineeArea2(CommonFunction.checkNull(header1.get(65)).trim());
          vo.setsNomineeCity2(CommonFunction.checkNull(header1.get(66)).trim());
          vo.setsNomineeState2(CommonFunction.checkNull(header1.get(67)).trim());
          vo.setsNomineePin2(CommonFunction.checkNull(header1.get(68)).trim());

          vo.setsPrefix3(CommonFunction.checkNull(header1.get(69)).trim());
          vo.setNomineeMName3(CommonFunction.checkNull(header1.get(70)).trim());
          vo.setNomineeLName3(CommonFunction.checkNull(header1.get(71)).trim());
          vo.setSmaritalStatus3(CommonFunction.checkNull(header1.get(72)).trim());
          vo.setsNomineeArea3(CommonFunction.checkNull(header1.get(73)).trim());
          vo.setsNomineeCity3(CommonFunction.checkNull(header1.get(74)).trim());
          vo.setsNomineeState3(CommonFunction.checkNull(header1.get(75)).trim());
          vo.setsNomineePin3(CommonFunction.checkNull(header1.get(76)).trim());

          vo.setsPrefix4(CommonFunction.checkNull(header1.get(77)).trim());
          vo.setNomineeMName4(CommonFunction.checkNull(header1.get(78)).trim());
          vo.setNomineeLName4(CommonFunction.checkNull(header1.get(79)).trim());
          vo.setSmaritalStatus4(CommonFunction.checkNull(header1.get(80)).trim());
          vo.setsNomineeArea4(CommonFunction.checkNull(header1.get(81)).trim());
          vo.setsNomineeCity4(CommonFunction.checkNull(header1.get(82)).trim());
          vo.setsNomineeState4(CommonFunction.checkNull(header1.get(83)).trim());
          vo.setsNomineePin4(CommonFunction.checkNull(header1.get(84)).trim());
          vo.setSaddressType(CommonFunction.checkNull(header1.get(85)).trim());
          vo.setSinsuranceStreet(CommonFunction.checkNull(header1.get(86)).trim());

          vo.setSaddressType1(CommonFunction.checkNull(header1.get(87)).trim());
          vo.setSinsuranceStreet1(CommonFunction.checkNull(header1.get(88)).trim());
          vo.setSaddressType2(CommonFunction.checkNull(header1.get(89)).trim());
          vo.setSinsuranceStreet2(CommonFunction.checkNull(header1.get(90)).trim());
          vo.setSaddressType3(CommonFunction.checkNull(header1.get(91)).trim());
          vo.setSinsuranceStreet3(CommonFunction.checkNull(header1.get(92)).trim());
          vo.setSaddressType4(CommonFunction.checkNull(header1.get(93)).trim());
          vo.setSinsuranceStreet4(CommonFunction.checkNull(header1.get(94)).trim());

          vo.setTxtStateCode(CommonFunction.checkNull(header1.get(95)).trim());
          vo.setTxtStateCode1(CommonFunction.checkNull(header1.get(96)).trim());
          vo.setTxtStateCode2(CommonFunction.checkNull(header1.get(97)).trim());
          vo.setTxtStateCode3(CommonFunction.checkNull(header1.get(98)).trim());
          vo.setTxtStateCode4(CommonFunction.checkNull(header1.get(99)).trim());

          list.add(vo);
        }

        header1.clear();
        header1 = null;
      }
      view.clear();
      view = null;
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return list;
  }

  public int getDealSumInsuranceAmount(CpInsuranceVo vo, String dealId) {
    int sum_assure1 = 0;
    String insuranceProvider = vo.getInsuranceProvider();
    String insuranceProduct = vo.getInsuranceProduct();
    if (insuranceProduct.contains("|"))
    {
      insuranceProduct = insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
      vo.setInsuranceProduct(insuranceProduct);
    }
    logger.info(new StringBuilder().append("aman insuranceProvider::::").append(insuranceProvider).toString());
    logger.info(new StringBuilder().append("aman insuranceProduct::::").append(insuranceProduct).toString());
    try
    {
      String deal_sum_insurance_amount = new StringBuilder().append(" select sum(sum_assured) from cr_insurance_dtl where deal_id='").append(dealId).append("' and charge_id= '").append(insuranceProvider).append("' ").toString();
      String sum_assure = ConnectionDAO.singleReturn(deal_sum_insurance_amount);
      logger.info(new StringBuilder().append("sum_assure:::").append(sum_assure).toString());
      if (sum_assure != "")
      {
        sum_assure1 = Integer.parseInt(sum_assure);
      }
      else
      {
        sum_assure1 = 0;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return sum_assure1;
  }

  public int getsumAssureDealLoan1(CpInsuranceVo vo, String dealId) {
    int sum_assure_deal_loan1 = 0;
    try {
      String sum_loan_deal_amount = new StringBuilder().append(" select round(deal_loan_amount) from cr_deal_loan_dtl where deal_id='").append(dealId).append("' ").toString();
      String sum_assure_deal_loan = ConnectionDAO.singleReturn(sum_loan_deal_amount);
      logger.info(new StringBuilder().append("sum_assure_deal_loan:::").append(sum_assure_deal_loan).toString());
      if (sum_assure_deal_loan != "")
      {
        sum_assure_deal_loan1 = Integer.parseInt(sum_assure_deal_loan);
      }
      else
      {
        sum_assure_deal_loan1 = 0;
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return sum_assure_deal_loan1;
  }

  public String getinsuId(CpInsuranceVo vo, String dealId)
  {
    String insuranceId = "";
    String cust = vo.getCustId();
    String custList = "";
    custList = cust.replace("|", ",");
    char[] chars = custList.toCharArray();
    String s1 = "";
    for (int i = 0; i < chars.length - 1; i++)
    {
      s1 = new StringBuilder().append(s1).append(chars[i]).toString();
    }
    logger.info(new StringBuilder().append("s1::::::").append(s1).toString());
    String newCust = s1.replace(",", "|");
    logger.info(new StringBuilder().append("newCust::::::").append(newCust).toString());
    String insuranceProvider = vo.getInsuranceProvider();
    String insuranceProduct = vo.getInsuranceProduct();
    if (insuranceProduct.contains("|"))
    {
      insuranceProduct = insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
      vo.setInsuranceProduct(insuranceProduct);
    }
    logger.info(new StringBuilder().append("aman insuranceProvider::::").append(insuranceProvider).toString());
    logger.info(new StringBuilder().append("aman insuranceProduct::::").append(insuranceProduct).toString());
    try {
      String insurance_id = new StringBuilder().append(" select insurance_id from cr_insurance_dtl where deal_id='").append(dealId).append("' and charge_id= '").append(insuranceProvider).append("'  and product_id='").append(insuranceProduct).append("' and customer_id ='").append(newCust).append("'  ").toString();
      insuranceId = ConnectionDAO.singleReturn(insurance_id);
      logger.info(new StringBuilder().append("insuranceId:::").append(insuranceId).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return insuranceId;
  }

  public boolean updateDealLoan(CpInsuranceVo vo, String dealId)
  {
    boolean status = false;
    String insurance_premium = "";
    int sum_assure_deal_loan1 = 0;
    int assetCostAmount = 0;
    int premium = 0;
    int total = 0;
    int marginAmt = 0;
    double marginPerct = 0.0D;

    String premiumFinanced = CommonFunction.checkNull(vo.getPremiumFinanced());
    String qry1 = new StringBuilder().append("select deal_loan_id from cr_deal_loan_dtl where deal_id='").append(dealId).append("'").toString();
    String dealLoanId = ConnectionDAO.singleReturn(qry1);
    if (dealLoanId != "")
    {
      String qry2 = new StringBuilder().append("select round(sum(insurance_premium)) from cr_insurance_dtl  where amount_to_be_financed='Y' and  deal_loan_id='").append(dealLoanId).append("' ").toString();
      insurance_premium = ConnectionDAO.singleReturn(qry2);

      if (insurance_premium == "")
      {
        insurance_premium = "0";
        premium = Integer.parseInt(insurance_premium);
      }
      else
      {
        premium = Integer.parseInt(insurance_premium);
      }

    }
    else
    {
      insurance_premium = "0";
      premium = Integer.parseInt(insurance_premium);
    }

    String sum_loan_deal_amount_new = new StringBuilder().append(" select round(ifnull(DEAL_LOAN_AMOUNT_NEW,DEAL_LOAN_AMOUNT)) from cr_deal_loan_dtl where deal_id='").append(dealId).append("' ").toString();
    String sum_assure_deal_loan_new = ConnectionDAO.singleReturn(sum_loan_deal_amount_new);
    logger.info(new StringBuilder().append("sum_assure_deal_loan:::").append(sum_loan_deal_amount_new).toString());
    if (sum_loan_deal_amount_new != "")
    {
      sum_assure_deal_loan1 = Integer.parseInt(sum_assure_deal_loan_new);
    }
    else
    {
      sum_assure_deal_loan1 = 0;
    }

    total = sum_assure_deal_loan1 + premium;

    String assetCost = new StringBuilder().append(" select round(ifnull(deal_asset_cost,0)) from cr_deal_loan_dtl where  deal_id='").append(dealId).append("' ").toString();
    String assetCostValue = ConnectionDAO.singleReturn(assetCost);
    logger.info(new StringBuilder().append("assetCostValue:::").append(assetCostValue).toString());
    if (assetCost != "")
    {
      assetCostAmount = Integer.parseInt(assetCostValue);
    }
    else
    {
      assetCostAmount = 0;
    }

    marginAmt = assetCostAmount - total;
    logger.info(new StringBuilder().append("marginAmt::").append(marginAmt).toString());

    if (assetCostAmount > 0)
      marginPerct = marginAmt * 100.0D / assetCostAmount;
    else {
      marginPerct = 0.0D;
    }
    logger.info(new StringBuilder().append("marginPerct::").append(marginPerct).toString());

    ArrayList qryList = new ArrayList();
    PrepStmtObject insertPrepStmtObject = null;
    insertPrepStmtObject = new PrepStmtObject();
    StringBuilder bufInsSql = null;
    bufInsSql = new StringBuilder();
    try
    {
      bufInsSql.append("UPDATE cr_deal_loan_dtl SET insurance_premium=?, DEAL_LOAN_AMOUNT_NEW=? , deal_loan_amount=?,deal_margin_amount=?,deal_margin_rate=? where DEAL_ID=? and deal_loan_id=? ");

      if (CommonFunction.checkNull(Integer.valueOf(premium)).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addInt(premium);
      }

      if (CommonFunction.checkNull(Integer.valueOf(sum_assure_deal_loan1)).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addInt(sum_assure_deal_loan1);
      }
      if (CommonFunction.checkNull(Integer.valueOf(total)).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addInt(total);
      }
      if (CommonFunction.checkNull(Integer.valueOf(marginAmt)).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addInt(marginAmt);
      }

      if (CommonFunction.checkNull(Double.valueOf(marginPerct)).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addFloat(marginPerct);
      }
      if (CommonFunction.checkNull(dealId).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(dealId.toUpperCase().trim());
      }

      if (CommonFunction.checkNull(dealLoanId).equalsIgnoreCase(""))
        insertPrepStmtObject.addNull();
      else {
        insertPrepStmtObject.addString(dealLoanId.toUpperCase().trim());
      }

      insertPrepStmtObject.setSql(bufInsSql.toString());

      logger.info(new StringBuilder().append("IN insertCpInsurance() update cr_deal_loan_dtl query1 ### ").append(insertPrepStmtObject.printQuery()).toString());

      qryList.add(insertPrepStmtObject);

      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);

      status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);

      logger.info(new StringBuilder().append("In insertCpInsurance......................").append(status).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    finally {
      qryList.clear();
      qryList = null;
    }

    return status;
  }

  public int getAssetCost(CpInsuranceVo vo, String dealId)
  {
    int dealAssetCost = 0;
    try {
      String assetCost = new StringBuilder().append(" select round(deal_asset_cost) from cr_deal_loan_dtl where deal_id='").append(dealId).append("' ").toString();

      String dealAssetCostValue = ConnectionDAO.singleReturn(assetCost);
      logger.info(new StringBuilder().append("dealAssetCostValue:::").append(dealAssetCostValue).toString());
      if (dealAssetCostValue != "")
      {
        dealAssetCost = Integer.parseInt(dealAssetCostValue);
      }
      else
      {
        dealAssetCost = 0;
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
    return dealAssetCost;
  }

  public int insuranceUpdateId(CpInsuranceVo vo, String dealId)
  {
    String insuranceId = "";
    int ins = 0;
    String cust = vo.getCustId();
    String custList = "";
    custList = cust.replace("|", ",");
    char[] chars = custList.toCharArray();
    String s1 = "";
    for (int i = 0; i < chars.length - 1; i++)
    {
      s1 = new StringBuilder().append(s1).append(chars[i]).toString();
    }
    logger.info(new StringBuilder().append("s1::::::").append(s1).toString());
    String newCust = s1.replace(",", "|");
    logger.info(new StringBuilder().append("newCust::::::").append(newCust).toString());
    String insuranceProvider = vo.getInsuranceProvider();
    String insuranceProduct = vo.getInsuranceProduct();
    if (insuranceProduct.contains("|"))
    {
      insuranceProduct = insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
      vo.setInsuranceProduct(insuranceProduct);
    }
    String InsurancePremium = vo.getInsurancePremium();
    String policyTenure = vo.getPolicyTenure();
    String InsuranceFinanced = vo.getPremiumFinanced();
    String sumAssured = vo.getSumAssured();
    logger.info(new StringBuilder().append("aman insuranceProvider::::").append(insuranceProvider).toString());
    logger.info(new StringBuilder().append("aman insuranceProduct::::").append(insuranceProduct).toString());
    try {
      String insurance_id = new StringBuilder().append(" select count(1) from cr_insurance_dtl where deal_id='").append(dealId).append("' and charge_id= '").append(insuranceProvider).append("'  and product_id='").append(insuranceProduct).append("' and customer_id ='").append(newCust).append("' and sum_assured='").append(sumAssured).append("' and policy_tenure='").append(policyTenure).append("' and insurance_premium='").append(InsurancePremium).append("' and amount_to_be_financed='").append(InsuranceFinanced).append("' ").toString();
      insuranceId = CommonFunction.checkNull(ConnectionDAO.singleReturn(insurance_id));
      logger.info(new StringBuilder().append("insuranceId:::").append(insuranceId).toString());
      if (insuranceId == "")
      {
        ins = 0;
      }
      else {
        ins = Integer.parseInt(insuranceId);
      }
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
    return ins;
  }

  public String CallAutoLoanProc(String dealId, String userId, String bDate)
  {
    StringBuilder query = new StringBuilder();
    ArrayList in = new ArrayList();
    ArrayList out = new ArrayList();
    ArrayList outMessages = new ArrayList();
    String s1 = "";
    String s2 = "";
    try {
      String bdateQuery = new StringBuilder().append("select str_to_date('").append(bDate).append("','%d-%m-%Y')").toString();
      bDate = ConnectionDAO.singleReturn(bdateQuery);
      in.add(dealId);
      in.add(userId);
      in.add(bDate);
      out.add(s1);
      out.add(s2);
      logger.info("AUTO_LOAN_APPROVAL in CallAutoLoanProc");
      logger.info(new StringBuilder().append("AUTO_LOAN_APPROVAL (").append(in.toString()).append(",").append(out.toString()).append(")").toString());
      outMessages = (ArrayList)ConnectionDAO.callSP("AUTO_LOAN_APPROVAL", in, out);
      s1 = CommonFunction.checkNull(outMessages.get(0));
      s2 = CommonFunction.checkNull(outMessages.get(1));
      logger.info(new StringBuilder().append("s1  : ").append(s1).toString());
      logger.info(new StringBuilder().append("s2  : ").append(s2).toString());
      if (s1.equalsIgnoreCase("S"))
      {
        logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
      }
      else
        logger.info(new StringBuilder().append("Procedure Error Message----").append(s2).toString());
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }

    return s2;
  }
    
	//ankita
		public boolean transferFacilityData(String dealId){
			boolean status=false;
			boolean Chargestatus=false;
			String query="";
			String result="";
			String dealLoanId="";
			try{
				query="select count(1) from CR_DEAL_FACILITY_DTL where deal_id='"+dealId+"' ";
				result=ConnectionDAO.singleReturn(query);
				if(result.equalsIgnoreCase("0")){
					PrepStmtObject insertPrepStmtObject=new PrepStmtObject();
					StringBuffer bufInsSql =	new StringBuffer();	
					ArrayList qryList = new ArrayList();
				bufInsSql.append("insert into CR_DEAL_FACILITY_DTL(DEAL_ID,DEAL_PRODUCT_CATEGORY,DEAL_PRODUCT,DEAL_SCHEME,DEAL_PROMO_SCHEME,LOAN_TYPE,DEAL_PRODUCT_TYPE,DEAL_DISBURSAL_DATE,DEAL_ASSET_COST,DEAL_MARGIN_RATE,DEAL_MARGIN_AMOUNT,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_REPAYMENT_FREQ,DEAL_RATE_TYPE,DEAL_RATE_METHOD,DEAL_BUSINESS_IRR,DEAL_BASE_RATE_TYPE,DEAL_BASE_RATE,DEAL_MARKUP,DEAL_FINAL_RATE,DEAL_REPAYMENT_TYPE,DEAL_INSTALLMENT_TYPE,DEAL_INSTALLMENT_MODE,DEAL_NO_OF_INSTALLMENT,DEAL_REPAYMENT_MODE,DEAL_LOAN_PURPOSE,DISBURSAL_TYPE,NO_OF_DISBURSAL,DEAL_SANCTION_AMOUNT,DEAL_SANCTION_DATE,DEAL_SANCTION_VALID_TILL,DEAL_UTILIZED_AMOUNT,DEAL_EMI,DEAL_SECTOR_TYPE,DEAL_ADVANCE_INSTL,DEAL_FLAT_RATE,DEAL_EFF_RATE,DEAL_REPAY_EFF_DATE,DEAL_MATURITY_DATE,DEAL_IRR1,DEAL_IRR2,DEAL_DUE_DAY,NEXT_DUE_DATE,DEAL_INT_CALC_FROM,REC_STATUS,MAKER_ID,MAKER_DATE,NET_LTV,TENURE_IN_DAY,DEAL_FLOATING_FIXED_PERIOD,NO_OF_ASSET,LOAN_CLASSIFICATION,REDY_TO_AUTHOR,UPFRONT_ROUNDING_AMOUNT,VAT_PERCENT,VAT_AMOUNT,SERVICE_TAX,SERVICE_AMOUNT,DEAL_CREDIT_PERIOD,INT_COMP_FREQ,INT_METHOD,INT_FREQ,INT_DUE_DATE,INTEREST_DUE_DATE,GROSS_BLOCK,NET_BLOCK,GROSS_LTV,FOIR,DEAL_LOAN_AMOUNT_NEW,INSURANCE_PREMIUM,EDIT_DUE_DATE,FIRST_INTEREST_DUE_DATE,INSURANCE_PROVIDER,LOAN_NPV,APF_NAPF,END_USE_OF_LOAN,BUSINESS_TYPE,deal_deal_loan_id,REFRESH_FLAG_FACILITY) ");
				bufInsSql.append(" select DEAL_ID,DEAL_PRODUCT_CATEGORY,DEAL_PRODUCT,DEAL_SCHEME,DEAL_PROMO_SCHEME,LOAN_TYPE,DEAL_PRODUCT_TYPE,DEAL_DISBURSAL_DATE,DEAL_ASSET_COST,DEAL_MARGIN_RATE,DEAL_MARGIN_AMOUNT,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_REPAYMENT_FREQ,DEAL_RATE_TYPE,DEAL_RATE_METHOD,DEAL_BUSINESS_IRR,DEAL_BASE_RATE_TYPE,DEAL_BASE_RATE,DEAL_MARKUP,DEAL_FINAL_RATE,DEAL_REPAYMENT_TYPE,DEAL_INSTALLMENT_TYPE,DEAL_INSTALLMENT_MODE,DEAL_NO_OF_INSTALLMENT,DEAL_REPAYMENT_MODE,DEAL_LOAN_PURPOSE,DISBURSAL_TYPE,NO_OF_DISBURSAL,DEAL_SANCTION_AMOUNT,DEAL_SANCTION_DATE,DEAL_SANCTION_VALID_TILL,DEAL_UTILIZED_AMOUNT,DEAL_EMI,DEAL_SECTOR_TYPE,DEAL_ADVANCE_INSTL,DEAL_FLAT_RATE,DEAL_EFF_RATE,DEAL_REPAY_EFF_DATE,DEAL_MATURITY_DATE,DEAL_IRR1,DEAL_IRR2,DEAL_DUE_DAY,NEXT_DUE_DATE,DEAL_INT_CALC_FROM,REC_STATUS,MAKER_ID,MAKER_DATE,NET_LTV,TENURE_IN_DAY,DEAL_FLOATING_FIXED_PERIOD,NO_OF_ASSET,LOAN_CLASSIFICATION,REDY_TO_AUTHOR,UPFRONT_ROUNDING_AMOUNT,VAT_PERCENT,VAT_AMOUNT,SERVICE_TAX,SERVICE_AMOUNT,DEAL_CREDIT_PERIOD,INT_COMP_FREQ,INT_METHOD,INT_FREQ,INT_DUE_DATE,INTEREST_DUE_DATE,GROSS_BLOCK,NET_BLOCK,GROSS_LTV,FOIR,DEAL_LOAN_AMOUNT_NEW,INSURANCE_PREMIUM,EDIT_DUE_DATE,FIRST_INTEREST_DUE_DATE,INSURANCE_PROVIDER,LOAN_NPV,APF_NAPF,END_USE_OF_LOAN,BUSINESS_TYPE,deal_loan_id,'NNN'");
					bufInsSql.append(" from cr_deal_loan_dtl where deal_id='"+dealId+"' limit 1  ");
					insertPrepStmtObject.setSql(bufInsSql.toString());
					logger.info("IN transferFacilityData() insert query1 ### "+insertPrepStmtObject.printQuery());	
					qryList.add(insertPrepStmtObject);
					status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
					if(status){
						String dealLoanQuery="select max(DEAL_LOAN_ID) from CR_DEAL_FACILITY_DTL where deal_id='"+dealId+"' ";
					    dealLoanId=ConnectionDAO.singleReturn(dealLoanQuery);
					}
					if(!CommonFunction.checkNull(dealLoanId).equalsIgnoreCase("")){
						//Charges Starts
						PrepStmtObject insertPrepStmtObject1=new PrepStmtObject();
						StringBuffer bufInsSql1 =	new StringBuffer();	
						ArrayList qryList1 = new ArrayList();
						bufInsSql1.append("INSERT INTO CR_DEAL_FACILITY_TXNCHARGES_DTL(DEAL_ID,DEAL_LOAN_ID,DEAL_CHARGE_ID,DEAL_CHARGE_CODE,DEAL_CHARGE_APPLICATION_STAGE,DEAL_CHARGE_TYPE,DEAL_CHARGE_METHOD,DEAL_MIN_CHARGE_METHOD,DEAL_CHARGE_BP_TYPE,DEAL_CHARGE_BP_ID,DEAL_CHARGE_CALCULATED_AMOUNT,DEAL_CHARGE_FINAL_AMOUNT,DEAL_CHARGE_CALCULATED_ON,DEAL_CHARGE_SLAB_ON,DEAL_CHARGE_TDS_APPLICABLE,DEAL_CHARGE_TDS_RATE,DEAL_CHARGE_TDS_AMOUNT,DEAL_CHARGE_NET_AMOUNT,DEAL_CHARGE_TAX_APPLICABLE,DEAL_CHARGE_TAX_INCLUSIVE,DEAL_CHARGE_TAX_RATE1,DEAL_CHARGE_TAX_RATE2,DEAL_CHARGE_TAX_AMOUNT1,DEAL_CHARGE_TAX_AMOUNT2,DEAL_CHARGE_MIN_CHARGE_AMOUNT,REC_STATUS,MAKER_ID,MAKER_DATE ) ");
						bufInsSql1.append(" SELECT DEAL_ID,'"+dealLoanId+"',DEAL_CHARGE_ID,DEAL_CHARGE_CODE,DEAL_CHARGE_APPLICATION_STAGE,DEAL_CHARGE_TYPE,DEAL_CHARGE_METHOD,DEAL_MIN_CHARGE_METHOD,DEAL_CHARGE_BP_TYPE,DEAL_CHARGE_BP_ID,DEAL_CHARGE_CALCULATED_AMOUNT,DEAL_CHARGE_FINAL_AMOUNT,DEAL_CHARGE_CALCULATED_ON,DEAL_CHARGE_SLAB_ON,DEAL_CHARGE_TDS_APPLICABLE,DEAL_CHARGE_TDS_RATE,DEAL_CHARGE_TDS_AMOUNT,DEAL_CHARGE_NET_AMOUNT,DEAL_CHARGE_TAX_APPLICABLE,DEAL_CHARGE_TAX_INCLUSIVE,DEAL_CHARGE_TAX_RATE1,DEAL_CHARGE_TAX_RATE2,DEAL_CHARGE_TAX_AMOUNT1,DEAL_CHARGE_TAX_AMOUNT2,DEAL_CHARGE_MIN_CHARGE_AMOUNT,REC_STATUS,MAKER_ID,MAKER_DATE  ");
						bufInsSql1.append(" from CR_DEAL_TXNCHARGES_DTL where deal_id='"+dealId+"'  ");
						insertPrepStmtObject1.setSql(bufInsSql1.toString());
						logger.info("IN transferFacilityData() insert query1 ### "+insertPrepStmtObject1.printQuery());	
						qryList1.add(insertPrepStmtObject1);
						Chargestatus = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList1);
						//Charges end
						
						//Installment Plan Starts
						PrepStmtObject insertPrepStmtObject2=new PrepStmtObject();
						StringBuffer bufInsSql2 =	new StringBuffer();	
						ArrayList qryList2 =new ArrayList();
						bufInsSql2.append("INSERT INTO CR_DEAL_FACILITY_INSTALLMENT_PLAN(DEAL_ID,DEAL_LOAN_ID,SEQ_NO,FROM_INSTL_NO,TO_INSTL_NO,RECOVERY_PERCENT,RECOVERY_TYPE,PRINCIPAL_AMOUNT,INSTALLMENT_AMOUNT,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,DUE_DATE ) ");
						bufInsSql2.append(" SELECT DEAL_ID,'"+dealLoanId+"',SEQ_NO,FROM_INSTL_NO,TO_INSTL_NO,RECOVERY_PERCENT,RECOVERY_TYPE,PRINCIPAL_AMOUNT,INSTALLMENT_AMOUNT,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,DUE_DATE  ");
						bufInsSql2.append(" from CR_DEAL_INSTALLMENT_PLAN where deal_id='"+dealId+"'  ");
						insertPrepStmtObject2.setSql(bufInsSql2.toString());
						logger.info("IN transferFacilityData() insert query1 ### "+insertPrepStmtObject2.printQuery());	
						qryList2.add(insertPrepStmtObject2);
						boolean InstallStatus = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList2);
						//Installment Plan end
						
						//Repayemnt Starts
						PrepStmtObject insertPrepStmtObject3=new PrepStmtObject();
						StringBuffer bufInsSql3 =	new StringBuffer();	
					ArrayList qryList3 = new ArrayList();
						bufInsSql3.append("INSERT INTO CR_DEAL_FACILITY_REPAYSCH_DTL(DEAL_ID,DEAL_LOAN_ID,INSTL_NO,INSTL_DATE,INSTL_AMOUNT,PRIN_COMP,INT_COMP,EXCESS_INT,BILL_FLAG,INSTL_AMOUNT_RECD,PRIN_COMP_RECD,INT_COMP_RECD,EXCESS_INT_RECD,LAST_PMNT_DATE,LAST_OD_CALC_DATE,TOTAL_OD_AMOUNT,INTEREST_RATE,ADV_FLAG,PRIN_OS,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,OTHER_CHARGES,VAT_PERCENT,VAT_AMOUNT,SERVICE_TAX,SERVICE_AMOUNT) ");
						bufInsSql3.append(" SELECT DEAL_ID,'"+dealLoanId+"',INSTL_NO,INSTL_DATE,INSTL_AMOUNT,PRIN_COMP,INT_COMP,EXCESS_INT,BILL_FLAG,INSTL_AMOUNT_RECD,PRIN_COMP_RECD,INT_COMP_RECD,EXCESS_INT_RECD,LAST_PMNT_DATE,LAST_OD_CALC_DATE,TOTAL_OD_AMOUNT,INTEREST_RATE,ADV_FLAG,PRIN_OS,REC_STATUS,MAKER_ID,MAKER_DATE,AUTHOR_ID,AUTHOR_DATE,OTHER_CHARGES,VAT_PERCENT,VAT_AMOUNT,SERVICE_TAX,SERVICE_AMOUNT");
						bufInsSql3.append(" from CR_DEAL_REPAYSCH_DTL where deal_id='"+dealId+"' ");
						insertPrepStmtObject3.setSql(bufInsSql3.toString());
						logger.info("IN transferFacilityData() insert query1 ### "+insertPrepStmtObject3.printQuery());	
						qryList3.add(insertPrepStmtObject3);
						boolean repayStatus = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList3);
						//Repayment end
						
					}
					
			}else{
				String queryCharges="select DEAL_LOAN_ID from CR_DEAL_FACILITY_DTL WHERE DEAL_ID='"+dealId+"'";
				ArrayList list=new ArrayList();
				list = ConnectionDAO.sqlSelect(queryCharges);
		        for(int i=0;i<list.size();i++)
		    	    {	    	    
		    	    	ArrayList bdetails1=(ArrayList)list.get(i);
		    	    	if(bdetails1.size()>0)
		    			{
		    	    		
		    	    		PrepStmtObject insertPrepStmtObject1=new PrepStmtObject();
							StringBuffer bufInsSql1 =	new StringBuffer();	
							ArrayList qryList1 = new ArrayList();
							bufInsSql1.append("INSERT INTO CR_DEAL_FACILITY_TXNCHARGES_DTL(DEAL_ID,DEAL_LOAN_ID,DEAL_CHARGE_ID,DEAL_CHARGE_CODE,DEAL_CHARGE_APPLICATION_STAGE,DEAL_CHARGE_TYPE,DEAL_CHARGE_METHOD,DEAL_MIN_CHARGE_METHOD,DEAL_CHARGE_BP_TYPE,DEAL_CHARGE_BP_ID,DEAL_CHARGE_CALCULATED_AMOUNT,DEAL_CHARGE_FINAL_AMOUNT,DEAL_CHARGE_CALCULATED_ON,DEAL_CHARGE_SLAB_ON,DEAL_CHARGE_TDS_APPLICABLE,DEAL_CHARGE_TDS_RATE,DEAL_CHARGE_TDS_AMOUNT,DEAL_CHARGE_NET_AMOUNT,DEAL_CHARGE_TAX_APPLICABLE,DEAL_CHARGE_TAX_INCLUSIVE,DEAL_CHARGE_TAX_RATE1,DEAL_CHARGE_TAX_RATE2,DEAL_CHARGE_TAX_AMOUNT1,DEAL_CHARGE_TAX_AMOUNT2,DEAL_CHARGE_MIN_CHARGE_AMOUNT,REC_STATUS,MAKER_ID,MAKER_DATE ) ");
							bufInsSql1.append(" SELECT DEAL_ID,'"+CommonFunction.checkNull(bdetails1.get(0))+"',DEAL_CHARGE_ID,DEAL_CHARGE_CODE,DEAL_CHARGE_APPLICATION_STAGE,DEAL_CHARGE_TYPE,DEAL_CHARGE_METHOD,DEAL_MIN_CHARGE_METHOD,DEAL_CHARGE_BP_TYPE,DEAL_CHARGE_BP_ID,DEAL_CHARGE_CALCULATED_AMOUNT,DEAL_CHARGE_FINAL_AMOUNT,DEAL_CHARGE_CALCULATED_ON,DEAL_CHARGE_SLAB_ON,DEAL_CHARGE_TDS_APPLICABLE,DEAL_CHARGE_TDS_RATE,DEAL_CHARGE_TDS_AMOUNT,DEAL_CHARGE_NET_AMOUNT,DEAL_CHARGE_TAX_APPLICABLE,DEAL_CHARGE_TAX_INCLUSIVE,DEAL_CHARGE_TAX_RATE1,DEAL_CHARGE_TAX_RATE2,DEAL_CHARGE_TAX_AMOUNT1,DEAL_CHARGE_TAX_AMOUNT2,DEAL_CHARGE_MIN_CHARGE_AMOUNT,REC_STATUS,MAKER_ID,MAKER_DATE  ");
							bufInsSql1.append(" from CR_DEAL_TXNCHARGES_DTL where deal_id='"+dealId+"'  ");
							insertPrepStmtObject1.setSql(bufInsSql1.toString());
							logger.info("IN transferFacilityData() insert query1 ### "+insertPrepStmtObject1.printQuery());	
							qryList1.add(insertPrepStmtObject1);
							Chargestatus = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList1);	
				}
		    	    }
			}
				
			}catch(Exception e){
				e.printStackTrace();
			}
			return status;
		}
		//ankita
		public ArrayList getFacilityDetailsList(String dealId,String functionId) {
			ArrayList<Object> list=new ArrayList<Object>();
			try{
				String table = "CR_DEAL_FACILITY_DTL";
				String table1 = "CR_DEAL_LOAN_DTL";
				StringBuilder query=new StringBuilder();
				FacilityDetailsVo vo=null;
				if(functionId.equalsIgnoreCase("3000297") || functionId.equalsIgnoreCase("3000298") ){
			query.append(" SELECT DEAL_LOAN_ID, DEAL_ID,DEAL_SANCTION_AMOUNT,DEAL_TENURE,DEAL_FINAL_RATE, PRODUCT_DESC, SCHEME_DESC,DEAL_NO_OF_INSTALLMENT ");
			query.append(" FROM CR_DEAL_FACILITY_DTL   ");
			query.append(" JOIN CR_PRODUCT_M ON DEAL_PRODUCT = PRODUCT_ID ");
			query.append(" JOIN CR_SCHEME_M ON DEAL_SCHEME = SCHEME_ID ");
			query.append(" WHERE DEAL_ID= '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' order by DEAL_LOAN_ID asc ");
				}else{
					String Count =ConnectionDAO.singleReturn("Select count(1) from cr_deal_facility_dtl where deal_id='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"'");
					int count = Integer.parseInt(Count);
					
					query.append(" SELECT DEAL_LOAN_ID, DEAL_ID,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_FINAL_RATE, PRODUCT_DESC, SCHEME_DESC,DEAL_NO_OF_INSTALLMENT ");
					if (count>0){
					query.append(" FROM "+table+"   ");
					}
					else{
						query.append(" FROM "+table1+"   ");			
					}
					query.append(" JOIN CR_PRODUCT_M ON DEAL_PRODUCT = PRODUCT_ID ");
					query.append(" JOIN CR_SCHEME_M ON DEAL_SCHEME = SCHEME_ID ");
					query.append(" WHERE DEAL_ID= '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' order by DEAL_LOAN_ID asc ");
						
				}
						
			logger.info("getFacilityDetailsList Queryl: "+query);

			ArrayList detail = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getFacilityDetailsList OUTER ARRAYLIST SIZE: "+detail.size());
				
			for(int i=0;i<detail.size();i++){
				
				ArrayList subDetail=(ArrayList)detail.get(i);
				if(subDetail.size()>0)
				{
					
					vo = new FacilityDetailsVo();
					vo.setDealLoanId((CommonFunction.checkNull(subDetail.get(0))).trim());
					vo.setDealId((CommonFunction.checkNull(subDetail.get(1))).trim());				
					vo.setLoanAmount((CommonFunction.checkNull(subDetail.get(2))).trim());
					vo.setTxtTenure((CommonFunction.checkNull(subDetail.get(3))).trim());
					vo.setRoi((CommonFunction.checkNull(subDetail.get(4))).trim());
					vo.setProductDesc((CommonFunction.checkNull(subDetail.get(5))).trim());
					vo.setSchemeDesc("<a href=facilityDetailsDispatch.do?method=fetchFacilityDetails&dealLoanId="+(CommonFunction.checkNull(subDetail.get(0))).trim()+">"+(CommonFunction.checkNull(subDetail.get(6))).trim()+"</a>");
					vo.setNoOfInstl((CommonFunction.checkNull(subDetail.get(7))).trim());
					vo.setEmiAmount(calculateEMIAmount(vo.getLoanAmount(),vo.getNoOfInstl(),vo.getRoi()));
					list.add(vo);
				}
				query=null;
			}

			}catch(Exception e){
				e.printStackTrace();
			}
			return list;
		}
		//Saurabh Code starts here
		@Override
		public ArrayList getSFacilityDetailsList(String dealId,String functionId) {
			ArrayList<Object> list=new ArrayList<Object>();
			try{
				
				StringBuilder query=new StringBuilder();
				FacilityDetailsVo vo=null;
				if(functionId.equalsIgnoreCase("3000297") || functionId.equalsIgnoreCase("3000298") ){
			query.append(" SELECT DEAL_LOAN_ID, DEAL_ID,DEAL_SANCTION_AMOUNT,DEAL_TENURE,DEAL_FINAL_RATE, PRODUCT_DESC, SCHEME_DESC,DEAL_NO_OF_INSTALLMENT ");
			query.append(" FROM CR_DEAL_FACILITY_DTL   ");
			query.append(" JOIN CR_PRODUCT_M ON DEAL_PRODUCT = PRODUCT_ID ");
			query.append(" JOIN CR_SCHEME_M ON DEAL_SCHEME = SCHEME_ID ");
			query.append(" WHERE DEAL_ID= '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' order by DEAL_LOAN_ID asc ");
				}else{
					query.append(" SELECT DEAL_LOAN_ID, DEAL_ID,IFNULL(DEAL_SANCTION_AMOUNT,DEAL_LOAN_AMOUNT),DEAL_TENURE,DEAL_FINAL_RATE, PRODUCT_DESC, SCHEME_DESC,DEAL_NO_OF_INSTALLMENT ");
					query.append(" FROM CR_DEAL_FACILITY_DTL   ");
					query.append(" JOIN CR_PRODUCT_M ON DEAL_PRODUCT = PRODUCT_ID ");
					query.append(" JOIN CR_SCHEME_M ON DEAL_SCHEME = SCHEME_ID ");
					query.append(" WHERE DEAL_ID= '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' order by DEAL_LOAN_ID asc ");
						
				}
						
			logger.info("getSFacilityDetailsList Queryl: "+query);

			ArrayList detail = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getFacilityDetailsList OUTER ARRAYLIST SIZE: "+detail.size());
				
			for(int i=0;i<detail.size();i++){
				
				ArrayList subDetail=(ArrayList)detail.get(i);
				if(subDetail.size()>0)
				{
					
					vo = new FacilityDetailsVo();
					vo.setDealLoanId((CommonFunction.checkNull(subDetail.get(0))).trim());
					vo.setDealId((CommonFunction.checkNull(subDetail.get(1))).trim());				
					vo.setLoanAmount((CommonFunction.checkNull(subDetail.get(2))).trim());
					vo.setTxtTenure((CommonFunction.checkNull(subDetail.get(3))).trim());
					vo.setRoi((CommonFunction.checkNull(subDetail.get(4))).trim());
					vo.setProductDesc((CommonFunction.checkNull(subDetail.get(5))).trim());
					vo.setSchemeDesc("<a href=facilityDetailsDispatch.do?method=fetchFacilityDetails&dealLoanId="+(CommonFunction.checkNull(subDetail.get(0))).trim()+">"+(CommonFunction.checkNull(subDetail.get(6))).trim()+"</a>");
					vo.setNoOfInstl((CommonFunction.checkNull(subDetail.get(7))).trim());
					vo.setEmiAmount(calculateEMIAmount(vo.getLoanAmount(),vo.getNoOfInstl(),vo.getRoi()));
					list.add(vo);
				}
				query=null;
			}

			}catch(Exception e){
				e.printStackTrace();
			}
			return list;
		}
		//Saurabh code ends here

		//Saurabh Code starts
		public ArrayList fetchFacilityDetailsData(String facilityDetailsId,String functionId)
		{
			ArrayList<Object> list=new ArrayList<Object>();
			try{
				//String dealLoanId =request.getParameter("dealLoanId"); 
				//logger.info("dealLoanId: "+dealLoanId); 
				StringBuilder query=new StringBuilder();
				FacilityDetailsVo vo=null;
				if(functionId.equalsIgnoreCase("3000297") || functionId.equalsIgnoreCase("3000298") ){
					query.append(" SELECT DEAL_LOAN_ID, DEAL_ID, DEAL_PRODUCT,DEAL_SCHEME,DEAL_SANCTION_AMOUNT,DEAL_TENURE,DEAL_REPAYMENT_FREQ,DEAL_RATE_TYPE,DEAL_RATE_METHOD, "); 
					query.append("  DEAL_BASE_RATE_TYPE,DEAL_BASE_RATE,DEAL_MARKUP,DEAL_FINAL_RATE,DEAL_INSTALLMENT_TYPE,DEAL_NO_OF_INSTALLMENT, ");
					query.append("  DEAL_FLAT_RATE,DEAL_EFF_RATE,INSURANCE_PREMIUM,DEAL_SANCTION_AMOUNT, PRODUCT_DESC, SCHEME_DESC,DEAL_REPAYMENT_TYPE  ");		
					query.append(" FROM CR_DEAL_FACILITY_DTL   ");
					query.append(" JOIN CR_PRODUCT_M ON DEAL_PRODUCT = CR_PRODUCT_M.PRODUCT_ID ");
					query.append(" JOIN CR_SCHEME_M ON DEAL_SCHEME = CR_SCHEME_M.SCHEME_ID ");
					query.append(" WHERE DEAL_ID= '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(facilityDetailsId)).trim()+"'");
				}else{
				query.append(" SELECT DEAL_LOAN_ID, DEAL_ID, DEAL_PRODUCT,DEAL_SCHEME,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_REPAYMENT_FREQ,DEAL_RATE_TYPE,DEAL_RATE_METHOD, "); 
				query.append("  DEAL_BASE_RATE_TYPE,DEAL_BASE_RATE,DEAL_MARKUP,DEAL_FINAL_RATE,DEAL_INSTALLMENT_TYPE,DEAL_NO_OF_INSTALLMENT, ");
				query.append("  DEAL_FLAT_RATE,DEAL_EFF_RATE,INSURANCE_PREMIUM,DEAL_LOAN_AMOUNT_NEW, PRODUCT_DESC, SCHEME_DESC,DEAL_REPAYMENT_TYPE  ");		
				query.append(" FROM CR_DEAL_FACILITY_DTL   ");
				query.append(" JOIN CR_PRODUCT_M ON DEAL_PRODUCT = CR_PRODUCT_M.PRODUCT_ID ");
				query.append(" JOIN CR_SCHEME_M ON DEAL_SCHEME = CR_SCHEME_M.SCHEME_ID ");
				query.append(" WHERE DEAL_ID= '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(facilityDetailsId)).trim()+"'");
				}
			logger.info("fetchFacilityDetailsList Queryl: "+query.toString());

			ArrayList detail = ConnectionDAO.sqlSelect(query.toString());
			logger.info("fetchFacilityDetailsList OUTER ARRAYLIST SIZE: "+detail.size());
			
			for(int i=0;i<detail.size();i++){
			
				ArrayList subDetail=(ArrayList)detail.get(i);
				if(subDetail.size()>0)
				{
					
					vo = new FacilityDetailsVo();
					
					vo.setDealLoanId((CommonFunction.checkNull(subDetail.get(0))).trim());
					vo.setDealId((CommonFunction.checkNull(subDetail.get(1))).trim());	
					vo.setProductId((CommonFunction.checkNull(subDetail.get(2))).trim());
					vo.setSchemeId((CommonFunction.checkNull(subDetail.get(3))).trim());	
					vo.setLoanInsuranceAmount((CommonFunction.checkNull(subDetail.get(4))).trim()); // Including Insurance
					vo.setTxtTenure((CommonFunction.checkNull(subDetail.get(5))).trim());			
					vo.setInstallmentFrequency((CommonFunction.checkNull(subDetail.get(6))).trim());			
					vo.setInterestRateType((CommonFunction.checkNull(subDetail.get(7))).trim());			
					vo.setInterestRateMethod((CommonFunction.checkNull(subDetail.get(8))).trim());			
					vo.setBaseRateType((CommonFunction.checkNull(subDetail.get(9))).trim());			
					vo.setBaseRate((CommonFunction.checkNull(subDetail.get(10))).trim());			
					vo.setMarkup((CommonFunction.checkNull(subDetail.get(11))).trim());			
					vo.setFinalRate((CommonFunction.checkNull(subDetail.get(12))).trim());			
					vo.setInstallmentType((CommonFunction.checkNull(subDetail.get(13))).trim());			
					vo.setNoOfInstl((CommonFunction.checkNull(subDetail.get(14))).trim());			
					vo.setDealFlatRate((CommonFunction.checkNull(subDetail.get(15))).trim());			
					vo.setDealEFFRate((CommonFunction.checkNull(subDetail.get(16))).trim());
					vo.setInsurancePremium((CommonFunction.checkNull(subDetail.get(17))).trim());
					vo.setLoanAmount((CommonFunction.checkNull(subDetail.get(18))).trim());				
					vo.setProductDesc((CommonFunction.checkNull(subDetail.get(19))).trim());			
					vo.setSchemeDesc((CommonFunction.checkNull(subDetail.get(20))).trim());			
					vo.setEmiAmount(calculateEMIAmount(vo.getLoanAmount(),vo.getNoOfInstl(),vo.getFinalRate()));
					vo.setDealRepaymentType((CommonFunction.checkNull(subDetail.get(21))).trim());			
					list.add(vo);
				}
				query=null;
			}

			}catch(Exception e){
				e.printStackTrace();
			}
			return list;
		}
		//Saurabh code ends
		@Override
		public String saveFacilityDetails(FacilityDetailsVo vo) {
			
			qryList=new ArrayList();
			String dealLoanId="0";
			PrepStmtObject insertPrepStmtObject=new PrepStmtObject();
			StringBuffer bufInsSql =	new StringBuffer();	
			
			bufInsSql.append(" Insert into CR_DEAL_FACILITY_DTL(DEAL_ID,DEAL_PRODUCT_CATEGORY,DEAL_PRODUCT,DEAL_SCHEME,DEAL_PROMO_SCHEME,LOAN_TYPE,DEAL_PRODUCT_TYPE,DEAL_DISBURSAL_DATE,DEAL_ASSET_COST,DEAL_MARGIN_RATE,DEAL_MARGIN_AMOUNT,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_REPAYMENT_FREQ,DEAL_RATE_TYPE,DEAL_RATE_METHOD,DEAL_BUSINESS_IRR,DEAL_BASE_RATE_TYPE,DEAL_BASE_RATE,DEAL_MARKUP,DEAL_FINAL_RATE,DEAL_REPAYMENT_TYPE,DEAL_INSTALLMENT_TYPE,DEAL_INSTALLMENT_MODE,DEAL_NO_OF_INSTALLMENT,DEAL_REPAYMENT_MODE,DEAL_LOAN_PURPOSE,DISBURSAL_TYPE,NO_OF_DISBURSAL,DEAL_SANCTION_AMOUNT,DEAL_SANCTION_DATE,DEAL_SANCTION_VALID_TILL,DEAL_UTILIZED_AMOUNT,DEAL_EMI,DEAL_SECTOR_TYPE,DEAL_ADVANCE_INSTL,DEAL_FLAT_RATE,DEAL_EFF_RATE,DEAL_REPAY_EFF_DATE,DEAL_MATURITY_DATE,DEAL_IRR1,DEAL_IRR2,DEAL_DUE_DAY,NEXT_DUE_DATE,DEAL_INT_CALC_FROM,REC_STATUS,MAKER_ID,MAKER_DATE,NET_LTV,TENURE_IN_DAY,DEAL_FLOATING_FIXED_PERIOD,NO_OF_ASSET,LOAN_CLASSIFICATION,REDY_TO_AUTHOR,UPFRONT_ROUNDING_AMOUNT,VAT_PERCENT,VAT_AMOUNT,SERVICE_TAX,SERVICE_AMOUNT,DEAL_CREDIT_PERIOD,INT_COMP_FREQ,INT_METHOD,INT_FREQ,INT_DUE_DATE,INTEREST_DUE_DATE,GROSS_BLOCK,NET_BLOCK,GROSS_LTV,FOIR,DEAL_LOAN_AMOUNT_NEW,INSURANCE_PREMIUM,EDIT_DUE_DATE,FIRST_INTEREST_DUE_DATE,INSURANCE_PROVIDER,LOAN_NPV,APF_NAPF,END_USE_OF_LOAN,BUSINESS_TYPE,deal_deal_loan_id) ");
			bufInsSql.append(" select DEAL_ID,DEAL_PRODUCT_CATEGORY,DEAL_PRODUCT,DEAL_SCHEME,DEAL_PROMO_SCHEME,LOAN_TYPE,DEAL_PRODUCT_TYPE,DEAL_DISBURSAL_DATE,DEAL_ASSET_COST,DEAL_MARGIN_RATE,DEAL_MARGIN_AMOUNT,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_REPAYMENT_FREQ,DEAL_RATE_TYPE,DEAL_RATE_METHOD,DEAL_BUSINESS_IRR,DEAL_BASE_RATE_TYPE,DEAL_BASE_RATE,DEAL_MARKUP,DEAL_FINAL_RATE,DEAL_REPAYMENT_TYPE,DEAL_INSTALLMENT_TYPE,DEAL_INSTALLMENT_MODE,DEAL_NO_OF_INSTALLMENT,DEAL_REPAYMENT_MODE,DEAL_LOAN_PURPOSE,DISBURSAL_TYPE,NO_OF_DISBURSAL,DEAL_SANCTION_AMOUNT,DEAL_SANCTION_DATE,DEAL_SANCTION_VALID_TILL,DEAL_UTILIZED_AMOUNT,DEAL_EMI,DEAL_SECTOR_TYPE,DEAL_ADVANCE_INSTL,DEAL_FLAT_RATE,DEAL_EFF_RATE,DEAL_REPAY_EFF_DATE,DEAL_MATURITY_DATE,DEAL_IRR1,DEAL_IRR2,DEAL_DUE_DAY,NEXT_DUE_DATE,DEAL_INT_CALC_FROM,REC_STATUS,MAKER_ID,MAKER_DATE,NET_LTV,TENURE_IN_DAY,DEAL_FLOATING_FIXED_PERIOD,NO_OF_ASSET,LOAN_CLASSIFICATION,REDY_TO_AUTHOR,UPFRONT_ROUNDING_AMOUNT,VAT_PERCENT,VAT_AMOUNT,SERVICE_TAX,SERVICE_AMOUNT,DEAL_CREDIT_PERIOD,INT_COMP_FREQ,INT_METHOD,INT_FREQ,INT_DUE_DATE,INTEREST_DUE_DATE,GROSS_BLOCK,NET_BLOCK,GROSS_LTV,FOIR,DEAL_LOAN_AMOUNT_NEW,INSURANCE_PREMIUM,EDIT_DUE_DATE,FIRST_INTEREST_DUE_DATE,INSURANCE_PROVIDER,LOAN_NPV,APF_NAPF,END_USE_OF_LOAN,BUSINESS_TYPE,deal_loan_id  ");
			bufInsSql.append(" from cr_deal_loan_dtl where deal_id='"+vo.getDealId()+"' limit 1  ");
			
			insertPrepStmtObject.setSql(bufInsSql.toString());
			
			logger.info("IN saveFacilityDetails() insert query1 ### "+insertPrepStmtObject.printQuery());	
			
			qryList.add(insertPrepStmtObject);
			
			boolean status=false;	
			try {
				status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
				if(status){
					 StringBuilder query3=new StringBuilder();
					  query3.append("Select distinct max(DEAL_LOAN_ID) from cr_deal_FACILITY_dtl for update ");			  
					  StringBuilder id=new StringBuilder();
					  id.append(ConnectionDAO.singleReturn(query3.toString()));
					  dealLoanId=id.toString();			   
					  query3=null;		
					  id=null;
				
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		    logger.info("In saveFacilityDetails dealLoanId "+dealLoanId);	
		    bufInsSql=null;	
			return dealLoanId;
		}

		public ArrayList fetchFacilityDetailsList(String facilityDetailsId,String functionId)
		{
			ArrayList<Object> list=new ArrayList<Object>();
			try{
				//String dealLoanId =request.getParameter("dealLoanId"); 
				//logger.info("dealLoanId: "+dealLoanId); 
				StringBuilder query=new StringBuilder();
				FacilityDetailsVo vo=null;
				if(functionId.equalsIgnoreCase("3000297") || functionId.equalsIgnoreCase("3000298") ){
					query.append(" SELECT DEAL_LOAN_ID, DEAL_ID, DEAL_PRODUCT,DEAL_SCHEME,DEAL_SANCTION_AMOUNT,DEAL_TENURE,DEAL_REPAYMENT_FREQ,DEAL_RATE_TYPE,DEAL_RATE_METHOD, "); 
					query.append("  DEAL_BASE_RATE_TYPE,DEAL_BASE_RATE,DEAL_MARKUP,DEAL_FINAL_RATE,DEAL_INSTALLMENT_TYPE,DEAL_NO_OF_INSTALLMENT, ");
					query.append("  DEAL_FLAT_RATE,DEAL_EFF_RATE,INSURANCE_PREMIUM,DEAL_SANCTION_AMOUNT, PRODUCT_DESC, SCHEME_DESC,DEAL_REPAYMENT_TYPE  ");		
					query.append(" FROM CR_DEAL_FACILITY_DTL   ");
					query.append(" JOIN CR_PRODUCT_M ON DEAL_PRODUCT = CR_PRODUCT_M.PRODUCT_ID ");
					query.append(" JOIN CR_SCHEME_M ON DEAL_SCHEME = CR_SCHEME_M.SCHEME_ID ");
					query.append(" WHERE DEAL_LOAN_ID= '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(facilityDetailsId)).trim()+"'");
				}else{
				query.append(" SELECT DEAL_LOAN_ID, DEAL_ID, DEAL_PRODUCT,DEAL_SCHEME,DEAL_LOAN_AMOUNT,DEAL_TENURE,DEAL_REPAYMENT_FREQ,DEAL_RATE_TYPE,DEAL_RATE_METHOD, "); 
				query.append("  DEAL_BASE_RATE_TYPE,DEAL_BASE_RATE,DEAL_MARKUP,DEAL_FINAL_RATE,DEAL_INSTALLMENT_TYPE,DEAL_NO_OF_INSTALLMENT, ");
				query.append("  DEAL_FLAT_RATE,DEAL_EFF_RATE,INSURANCE_PREMIUM,ifnull(DEAL_LOAN_AMOUNT_NEW,DEAL_LOAN_AMOUNT), PRODUCT_DESC, SCHEME_DESC,DEAL_REPAYMENT_TYPE  ");		
				query.append(" FROM CR_DEAL_LOAN_DTL   ");
				query.append(" JOIN CR_PRODUCT_M ON DEAL_PRODUCT = CR_PRODUCT_M.PRODUCT_ID ");
				query.append(" JOIN CR_SCHEME_M ON DEAL_SCHEME = CR_SCHEME_M.SCHEME_ID ");
				query.append(" WHERE DEAL_LOAN_ID= '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(facilityDetailsId)).trim()+"'");
				}
			logger.info("fetchFacilityDetailsList Queryl: "+query.toString());

			ArrayList detail = ConnectionDAO.sqlSelect(query.toString());
			logger.info("fetchFacilityDetailsList OUTER ARRAYLIST SIZE: "+detail.size());
			
			for(int i=0;i<detail.size();i++){
			
				ArrayList subDetail=(ArrayList)detail.get(i);
				if(subDetail.size()>0)
				{
					
					vo = new FacilityDetailsVo();
					
					vo.setDealLoanId((CommonFunction.checkNull(subDetail.get(0))).trim());
					vo.setDealId((CommonFunction.checkNull(subDetail.get(1))).trim());	
					vo.setProductId((CommonFunction.checkNull(subDetail.get(2))).trim());
					vo.setSchemeId((CommonFunction.checkNull(subDetail.get(3))).trim());	
					vo.setLoanInsuranceAmount((CommonFunction.checkNull(subDetail.get(4))).trim()); // Including Insurance
					vo.setTxtTenure((CommonFunction.checkNull(subDetail.get(5))).trim());			
					vo.setInstallmentFrequency((CommonFunction.checkNull(subDetail.get(6))).trim());			
					vo.setInterestRateType((CommonFunction.checkNull(subDetail.get(7))).trim());			
					vo.setInterestRateMethod((CommonFunction.checkNull(subDetail.get(8))).trim());			
					vo.setBaseRateType((CommonFunction.checkNull(subDetail.get(9))).trim());			
					vo.setBaseRate((CommonFunction.checkNull(subDetail.get(10))).trim());			
					vo.setMarkup((CommonFunction.checkNull(subDetail.get(11))).trim());			
					vo.setFinalRate((CommonFunction.checkNull(subDetail.get(12))).trim());			
					vo.setInstallmentType((CommonFunction.checkNull(subDetail.get(13))).trim());			
					vo.setNoOfInstl((CommonFunction.checkNull(subDetail.get(14))).trim());			
					vo.setDealFlatRate((CommonFunction.checkNull(subDetail.get(15))).trim());			
					vo.setDealEFFRate((CommonFunction.checkNull(subDetail.get(16))).trim());
					vo.setInsurancePremium((CommonFunction.checkNull(subDetail.get(17))).trim());
					vo.setLoanAmount((CommonFunction.checkNull(subDetail.get(18))).trim());				
					vo.setProductDesc((CommonFunction.checkNull(subDetail.get(19))).trim());			
					vo.setSchemeDesc((CommonFunction.checkNull(subDetail.get(20))).trim());			
					vo.setEmiAmount(calculateEMIAmount(vo.getLoanAmount(),vo.getNoOfInstl(),vo.getFinalRate()));
					vo.setDealRepaymentType((CommonFunction.checkNull(subDetail.get(21))).trim());			
					list.add(vo);
				}
				query=null;
			}

			}catch(Exception e){
				e.printStackTrace();
			}
			return list;
		}

		//Saurabh Code starts

		public ArrayList sFetchFacilityDetailsData(String dealLoanId,String functionId)
		{
			ArrayList<Object> list=new ArrayList<Object>();
			try{
				//String dealLoanId =request.getParameter("dealLoanId"); 
				//logger.info("dealLoanId: "+dealLoanId); 
				StringBuilder query=new StringBuilder();
				FacilityDetailsVo vo=null;
				if(functionId.equalsIgnoreCase("3000297") || functionId.equalsIgnoreCase("3000298") ){
					query.append(" SELECT DEAL_LOAN_ID, DEAL_ID, DEAL_PRODUCT,DEAL_SCHEME,DEAL_SANCTION_AMOUNT,DEAL_TENURE,DEAL_REPAYMENT_FREQ,DEAL_RATE_TYPE,DEAL_RATE_METHOD, "); 
					query.append("  DEAL_BASE_RATE_TYPE,DEAL_BASE_RATE,DEAL_MARKUP,DEAL_FINAL_RATE,DEAL_INSTALLMENT_TYPE,DEAL_NO_OF_INSTALLMENT, ");
					query.append("  DEAL_FLAT_RATE,DEAL_EFF_RATE,INSURANCE_PREMIUM,DEAL_SANCTION_AMOUNT, PRODUCT_DESC, SCHEME_DESC,DEAL_REPAYMENT_TYPE  ");		
					query.append(" FROM CR_DEAL_FACILITY_DTL   ");
					query.append(" JOIN CR_PRODUCT_M ON DEAL_PRODUCT = CR_PRODUCT_M.PRODUCT_ID ");
					query.append(" JOIN CR_SCHEME_M ON DEAL_SCHEME = CR_SCHEME_M.SCHEME_ID ");
					query.append(" WHERE DEAL_LOAN_ID= '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId)).trim()+"'");
				}else{
				query.append(" SELECT DEAL_LOAN_ID, DEAL_ID, DEAL_PRODUCT,DEAL_SCHEME,IFNULL(DEAL_SANCTION_AMOUNT,DEAL_LOAN_AMOUNT),DEAL_TENURE,DEAL_REPAYMENT_FREQ,DEAL_RATE_TYPE,DEAL_RATE_METHOD, "); 
				query.append("  DEAL_BASE_RATE_TYPE,DEAL_BASE_RATE,DEAL_MARKUP,DEAL_FINAL_RATE,DEAL_INSTALLMENT_TYPE,DEAL_NO_OF_INSTALLMENT, ");
				query.append("  DEAL_FLAT_RATE,DEAL_EFF_RATE,INSURANCE_PREMIUM,DEAL_LOAN_AMOUNT_NEW, PRODUCT_DESC, SCHEME_DESC,DEAL_REPAYMENT_TYPE  ");		
				query.append(" FROM CR_DEAL_FACILITY_DTL   ");
				query.append(" JOIN CR_PRODUCT_M ON DEAL_PRODUCT = CR_PRODUCT_M.PRODUCT_ID ");
				query.append(" JOIN CR_SCHEME_M ON DEAL_SCHEME = CR_SCHEME_M.SCHEME_ID ");
				query.append(" WHERE DEAL_LOAN_ID= '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId)).trim()+"'");
				}
			logger.info("sfetchFacilityDetailsList Queryl: "+query.toString());

			ArrayList detail = ConnectionDAO.sqlSelect(query.toString());
			logger.info("fetchFacilityDetailsList OUTER ARRAYLIST SIZE: "+detail.size());
			
			for(int i=0;i<detail.size();i++){
			
				ArrayList subDetail=(ArrayList)detail.get(i);
				if(subDetail.size()>0)
				{
					
					vo = new FacilityDetailsVo();
					
					vo.setDealLoanId((CommonFunction.checkNull(subDetail.get(0))).trim());
					vo.setDealId((CommonFunction.checkNull(subDetail.get(1))).trim());	
					vo.setProductId((CommonFunction.checkNull(subDetail.get(2))).trim());
					vo.setSchemeId((CommonFunction.checkNull(subDetail.get(3))).trim());	
					vo.setLoanInsuranceAmount((CommonFunction.checkNull(subDetail.get(4))).trim()); // Including Insurance
					vo.setTxtTenure((CommonFunction.checkNull(subDetail.get(5))).trim());			
					vo.setInstallmentFrequency((CommonFunction.checkNull(subDetail.get(6))).trim());			
					vo.setInterestRateType((CommonFunction.checkNull(subDetail.get(7))).trim());			
					vo.setInterestRateMethod((CommonFunction.checkNull(subDetail.get(8))).trim());			
					vo.setBaseRateType((CommonFunction.checkNull(subDetail.get(9))).trim());			
					vo.setBaseRate((CommonFunction.checkNull(subDetail.get(10))).trim());			
					vo.setMarkup((CommonFunction.checkNull(subDetail.get(11))).trim());			
					vo.setFinalRate((CommonFunction.checkNull(subDetail.get(12))).trim());			
					vo.setInstallmentType((CommonFunction.checkNull(subDetail.get(13))).trim());			
					vo.setNoOfInstl((CommonFunction.checkNull(subDetail.get(14))).trim());			
					vo.setDealFlatRate((CommonFunction.checkNull(subDetail.get(15))).trim());			
					vo.setDealEFFRate((CommonFunction.checkNull(subDetail.get(16))).trim());
					vo.setInsurancePremium((CommonFunction.checkNull(subDetail.get(17))).trim());
					vo.setLoanAmount((CommonFunction.checkNull(subDetail.get(18))).trim());				
					vo.setProductDesc((CommonFunction.checkNull(subDetail.get(19))).trim());			
					vo.setSchemeDesc((CommonFunction.checkNull(subDetail.get(20))).trim());			
					vo.setEmiAmount(calculateEMIAmount(vo.getLoanAmount(),vo.getNoOfInstl(),vo.getFinalRate()));
					vo.setDealRepaymentType((CommonFunction.checkNull(subDetail.get(21))).trim());			
					list.add(vo);
				}
				query=null;
			}

			}catch(Exception e){
				e.printStackTrace();
			}
			return list;
		}
		//Saurabh code ends
		public String updateFacilityDetails(FacilityDetailsVo vo)  {
			
			qryList=new ArrayList();
			ArrayList List=new ArrayList();
			PrepStmtObject insertPrepStmtObject=new PrepStmtObject();
			if(CommonFunction.checkNull(vo.getInsurancePremium()).equalsIgnoreCase("")){
				vo.setInsurancePremium("0");
			}
			String res="E";	
			StringBuffer bufInsSql =	new StringBuffer();
			try{
				if(CommonFunction.checkNull(vo.getFunctionId()).equalsIgnoreCase("3000297")){
					bufInsSql.append(" UPDATE CR_DEAL_FACILITY_DTL SET "); 
					bufInsSql.append(" DEAL_SANCTION_AMOUNT = ?,REFRESH_FLAG_FACILITY='NNN' WHERE DEAL_LOAN_ID=?"); 
			
					if((CommonFunction.checkNull(vo.getLoanAmount())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else{		
						BigDecimal loanInsuranceAmount = new BigDecimal(myFormatter.parse(vo.getLoanAmount()).doubleValue()).add(new BigDecimal(myFormatter.parse(vo.getInsurancePremium()).doubleValue()));		
						insertPrepStmtObject.addString(loanInsuranceAmount+"");
					  }
					
					if((CommonFunction.checkNull(vo.getDealLoanId())).trim().equalsIgnoreCase(""))
						insertPrepStmtObject.addNull();
					else
						insertPrepStmtObject.addString((vo.getDealLoanId()).trim());
					
				}else{
				String query="SELECT ifnull(B.BASE_RATE,0) from cr_scheme_m S LEFT JOIN cr_base_rate_m B ON S.BASE_RATE_TYPE=B.BASE_RATE_TYPE AND B.rec_status='A' LEFT JOIN cr_product_m P ON S.PRODUCT_ID=P.PRODUCT_ID where SCHEME_ID='"+vo.getSchemeId()+"' AND S.REC_STATUS='A'  ";
				String baseRate=ConnectionDAO.singleReturn(query);
			bufInsSql.append(" UPDATE CR_DEAL_FACILITY_DTL SET "); 
			bufInsSql.append(" DEAL_SCHEME=?, DEAL_LOAN_AMOUNT=?,DEAL_SANCTION_AMOUNT = ?, DEAL_TENURE=?, DEAL_REPAYMENT_FREQ=?, "); 
			bufInsSql.append(" DEAL_RATE_TYPE=?,DEAL_RATE_METHOD=?,DEAL_BASE_RATE_TYPE=?,DEAL_BASE_RATE=?,DEAL_MARKUP=?,DEAL_FINAL_RATE=?,DEAL_INSTALLMENT_TYPE=?,DEAL_NO_OF_INSTALLMENT=?,  ");
		    bufInsSql.append(" REC_STATUS=?,MAKER_ID=?,MAKER_DATE=STR_TO_DATE(?,'"+dateFormat+"'),DEAL_FLAT_RATE=?,DEAL_EFF_RATE=?,INSURANCE_PREMIUM=?,DEAL_LOAN_AMOUNT_NEW=?,REFRESH_FLAG_FACILITY='NYY',DEAL_EMI=? WHERE DEAL_LOAN_ID=? ");
				
		    if((CommonFunction.checkNull(vo.getSchemeId())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getSchemeId()).trim());
			
			if((CommonFunction.checkNull(vo.getLoanAmount())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else{		
				BigDecimal loanInsuranceAmount = new BigDecimal(myFormatter.parse(vo.getLoanAmount()).doubleValue()).add(new BigDecimal(myFormatter.parse(vo.getInsurancePremium()).doubleValue()));		
				insertPrepStmtObject.addString(loanInsuranceAmount+"");
			  }
			if((CommonFunction.checkNull(vo.getLoanAmount())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else{		
				BigDecimal loanInsuranceAmount = new BigDecimal(myFormatter.parse(vo.getLoanAmount()).doubleValue()).add(new BigDecimal(myFormatter.parse(vo.getInsurancePremium()).doubleValue()));		
				insertPrepStmtObject.addString(loanInsuranceAmount+"");
			  }
			if((CommonFunction.checkNull(vo.getTxtTenure())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getTxtTenure()).trim());
			
			if((CommonFunction.checkNull(vo.getInstallmentFrequency())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getInstallmentFrequency()).trim());
			
			if((CommonFunction.checkNull(vo.getInterestRateType())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getInterestRateType()).trim());
			
			if((CommonFunction.checkNull(vo.getInterestRateMethod())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getInterestRateMethod()).trim());
			
			if((CommonFunction.checkNull(vo.getBaseRateType())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getBaseRateType()).trim());
			
			if((CommonFunction.checkNull(vo.getBaseRate())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addString(myFormatter.parse((baseRate).trim()).toString());
			else
				insertPrepStmtObject.addString(myFormatter.parse((vo.getBaseRate()).trim()).toString());
			
			
			if((CommonFunction.checkNull(vo.getMarkup())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else	
			   insertPrepStmtObject.addString(myFormatter.parse((vo.getMarkup()).trim()).toString());
			
			if((CommonFunction.checkNull(vo.getFinalRate())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
			   insertPrepStmtObject.addString(myFormatter.parse((vo.getFinalRate()).trim()).toString());
			
			if((CommonFunction.checkNull(vo.getInstallmentType())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getInstallmentType()).trim());
			
			
			if((CommonFunction.checkNull(vo.getNoOfInstl())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getNoOfInstl()).trim());
				
			insertPrepStmtObject.addString("F");
			
			if(CommonFunction.checkNull((vo.getMakerId())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getMakerId()).trim());
			
			
			if((CommonFunction.checkNull(vo.getMakerDate())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getMakerDate()).trim());
			
			if((CommonFunction.checkNull(vo.getInterestRateType())).trim().equalsIgnoreCase("F")){
				if((CommonFunction.checkNull(vo.getFinalRate())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(myFormatter.parse((vo.getFinalRate()).trim()).toString());
			}
			else{
				insertPrepStmtObject.addNull();
			}
			if((CommonFunction.checkNull(vo.getInterestRateType())).trim().equalsIgnoreCase("E")){
				if((CommonFunction.checkNull(vo.getFinalRate())).trim().equalsIgnoreCase(""))
					insertPrepStmtObject.addNull();
				else
					insertPrepStmtObject.addString(myFormatter.parse((vo.getFinalRate()).trim()).toString());
			}
			else{
				insertPrepStmtObject.addNull();
			}	
			if((CommonFunction.checkNull(vo.getInsurancePremium())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
			  insertPrepStmtObject.addString(myFormatter.parse((vo.getInsurancePremium()).trim()).toString());
			
			if((CommonFunction.checkNull(vo.getLoanAmount())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
			   insertPrepStmtObject.addString(myFormatter.parse((vo.getLoanAmount()).trim()).toString());
			
			if((CommonFunction.checkNull(vo.getLoanAmount())).trim().equalsIgnoreCase("") && (CommonFunction.checkNull(vo.getTxtTenure())).trim().equalsIgnoreCase("") && (CommonFunction.checkNull(vo.getFinalRate())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((calculateEMIAmount(vo.getLoanAmount().replaceAll(",",""),vo.getNoOfInstl(),vo.getFinalRate())).trim());
			
			if((CommonFunction.checkNull(vo.getDealLoanId())).trim().equalsIgnoreCase(""))
				insertPrepStmtObject.addNull();
			else
				insertPrepStmtObject.addString((vo.getDealLoanId()).trim());
			}
			insertPrepStmtObject.setSql(bufInsSql.toString());
			logger.info("IN updateFacilityDetails() insert query1 ### "+insertPrepStmtObject.printQuery());
				
			bufInsSql=null;
			
			qryList.add(insertPrepStmtObject);
			boolean status=false;
			try {
				status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
						if (status) {
							String querymargin = "update CR_DEAL_FACILITY_DTL set DEAL_MARGIN_AMOUNT=DEAL_ASSET_COST-DEAL_LOAN_AMOUNT,DEAL_MARGIN_RATE=(DEAL_ASSET_COST-DEAL_LOAN_AMOUNT ) *100/DEAL_ASSET_COST where deal_loan_id='" + CommonFunction.checkNull(vo.getDealLoanId()) + "'";
							List.add(querymargin);
							logger.info(" updateFacilityDetails Margin Amount:: " + querymargin);
							boolean updateStatus = ConnectionDAO.sqlInsUpdDelete(List);
						}
			} catch (Exception e) {
				e.printStackTrace();
			}
		    logger.info("In updateFacilityDetails STATUS......................"+status);
			if(status)
			{
		    	res="S";
		     }
			}catch(Exception e){
				e.printStackTrace();
			}
			return res;
		}
		@Override
		public boolean deleteFacilityDetails(String[] dealLoanId) {
			logger.info("deleteFacilityDetails...................................");
			boolean status = false;
			try
			{
			qryList = new ArrayList();
			bufInsUpdSql = new StringBuffer();



			for(int k=0;k<dealLoanId.length;k++)
			{
				 StringBuilder query=new StringBuilder();
				 query.append("Delete from CR_DEAL_FACILITY_DTL where DEAL_LOAN_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealLoanId[k])).trim()+"'");
		        
				qryList.add(query);
				query=null;
			}
			
		    logger.info("delete query: "+qryList.get(0));
		    
			status=ConnectionDAO.sqlInsUpdDelete(qryList);
			logger.info("Status of Deletion is ="+status);
		    }
			catch(Exception e)
			{
			e.printStackTrace();
		}


		return status;
		}
		@Override
		public ArrayList getShowFacilityDetailsList(String loanId) {
			// TODO Auto-generated method stub
			return null;
		}
		@Override
		public String validateFacilityAmountWithSanctionAmount(FacilityDetailsVo vo){	
			String res="S";
		/*logger.info("validateFacilityAmountWithSanctionAmount deal id  "+vo.getDealId()+ " Deal loan id " + vo.getDealLoanId() +" laonamount "+vo.getLoanAmount());
		StringBuilder query=new StringBuilder();		
		if(vo.getDealLoanId()!=null && !vo.getDealLoanId().equalsIgnoreCase("") ){		
			query.append(" SELECT IF( IFNULL(SUM(DEAL_LOAN_AMOUNT),0) + (SELECT IFNULL("+vo.getLoanAmount().replaceAll(",", "")+"-IFNULL(DEAL_LOAN_AMOUNT,0),0) FROM CR_DEAL_LOAN_DTL B  WHERE B.DEAL_LOAN_ID =  '" + (CommonFunction.checkNull(vo.getDealLoanId())).trim() + "')>IFNULL(SUM(B.DEAL_SANCTION_AMOUNT),0), 'E','S')" );  
			query.append(" FROM CR_DEAL_LOAN_DTL B  WHERE B.DEAL_ID = '" + (CommonFunction.checkNull(vo.getDealId())).trim() + "' group by DEAL_ID ");
		}else{
			query.append(" SELECT IF(IFNULL(SUM(DEAL_LOAN_AMOUNT),0) + "+vo.getLoanAmount().replaceAll(",", "")+">IFNULL(SUM(B.DEAL_SANCTION_AMOUNT) ,0), 'E','S')" );  
			query.append(" FROM CR_DEAL_LOAN_DTL B  WHERE B.DEAL_ID = '" + (CommonFunction.checkNull(vo.getDealId())).trim() + "' group by DEAL_ID ");
		}
		logger.info("validateFacilityAmountWithSanctionAmount : QUERY : " + query.toString());*/
		return res;
		}
		public ArrayList getDealProductDetails(String dealId)
		{
			/*logger.info("getProductType");
			StringBuilder query=new StringBuilder();
			query.append("SELECT DEAL_PRODUCT, PRODUCT_DESC ");
			query.append("FROM CR_DEAL_LOAN_DTL A ");
			query.append("JOIN CR_PRODUCT_M B ON A.DEAL_PRODUCT=B.PRODUCT_ID WHERE DEAL_ID = '"+dealId+"'");
			ArrayList detail = ConnectionDAO.sqlSelect(query.toString());*/
			// return  (String)ConnectionDAO.singleReturn(query.toString());
			
			 String dealloanId = CommonFunction.minDealLoanId(dealId);
			
			ArrayList<Object> list=new ArrayList<Object>();
			try{
				StringBuilder query=new StringBuilder();
				FacilityDetailsVo vo=null;
				//Wasim Code Start
			 /*query.append(" SELECT DEAL_PRODUCT, PRODUCT_DESC,REPAYMENT_TYPE ");
			query.append("FROM CR_DEAL_LOAN_DTL A ");
			query.append("JOIN CR_PRODUCT_M B ON A.DEAL_PRODUCT=B.PRODUCT_ID WHERE DEAL_LOAN_ID = '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealloanId)).trim()+"' AND DEAL_ID = '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"'");
			*/
				query.append(" SELECT B.DEAL_PRODUCT,PRODUCT_DESC,REPAYMENT_TYPE,A.DEAL_LOAN_ID, B.DEAL_ID,B.DEAL_LOAN_AMOUNT,B.DEAL_TENURE,B.DEAL_FINAL_RATE,  SCHEME_DESC,B.DEAL_NO_OF_INSTALLMENT  ");
				query.append("FROM CR_DEAL_FACILITY_DTL B JOIN CR_PRODUCT_M ON B.DEAL_PRODUCT = PRODUCT_ID  join CR_DEAL_LOAN_DTL A ON A.DEAL_PRODUCT=PRODUCT_ID JOIN CR_SCHEME_M  ON B.DEAL_SCHEME = SCHEME_ID");
				query.append(" WHERE A.DEAL_LOAN_ID = '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealloanId)).trim()+"' AND B.DEAL_ID = '"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"'");
				
			// Wasim Code End	
			logger.info("getFacilityDetailsList Queryl: "+query);

			ArrayList detail = ConnectionDAO.sqlSelect(query.toString());
			logger.info("getFacilityDetailsList OUTER ARRAYLIST SIZE: "+detail.size());
			
			
			
			for(int i=0;i<detail.size();i++){

				logger.info("getFacilityDetailsList"+detail.get(i).toString());
				ArrayList subDetail=(ArrayList)detail.get(i);
				if(subDetail.size()>0)
				{
					logger.info("getFacilityDetailsList INNNER ARRAYLIST SIZE: "+subDetail.size());
					vo = new FacilityDetailsVo();
					vo.setProductId((CommonFunction.checkNull(subDetail.get(0))).trim());
					vo.setProductDesc((CommonFunction.checkNull(subDetail.get(1))).trim());
					vo.setDealRepaymentType((CommonFunction.checkNull(subDetail.get(2))).trim());
					list.add(vo);
				}
				query=null;
			}

			}catch(Exception e){
				e.printStackTrace();
			}
			return list;
		}

////			Himanshu Verma		Changes ended for Facility Details
		public ArrayList getPropertyPuropse()
		{
			ArrayList<Object> list=new ArrayList<Object>();
			try{
			logger.info("Enter getPropertyPuropse()");
			String query="select value,description from generic_master where GENERIC_KEY='PROPERTY_PURPOSE' and rec_status ='A'";
			logger.info("Query :  "+query);
			ArrayList propertyPuropse = ConnectionDAO.sqlSelect(query);
			logger.info("PropertyPuropse Size : "+propertyPuropse.size());
			for(int i=0;i<propertyPuropse.size();i++){
				logger.info("getPropertyPuropseList "+propertyPuropse.get(i).toString());
				ArrayList subList=(ArrayList)propertyPuropse.get(i);
				if(subList.size()>0)
				{
					logger.info("getPropertyPuropseList " +subList.size());
					CollateralVo vo=new CollateralVo();
					vo.setPropertyPurposeCode((CommonFunction.checkNull(subList.get(0)).toString()));
					vo.setPropertyPurposeDesc((CommonFunction.checkNull(subList.get(1)).toString()));
					list.add(vo);
				}
			}
			}catch(Exception e){
				e.printStackTrace();
			}
			return list;
		}
		@Override
		public String updateFacilityDetailsRemarks(FacilityDetailsVo vo) {
			// TODO Auto-generated method stub
			return null;
		}
		// Changes by Richa starts
		public boolean getDealMovementData(String dealid)
		{
			boolean status=false;
			logger.info("getDealMovementData");
			StringBuilder query=new StringBuilder(); 
			query.append("select count(1) from cr_deal_movement_dtl  where DEAL_ID='"+dealid+"' and deal_forwarded='0000-00-00 00:00:00' and ifnull(deal_forward_user,'')='' and DEAL_STAGE_ID<>'UNC' AND REC_STATUS = 'A'");
			int count=Integer.parseInt(ConnectionDAO.singleReturn(query.toString()));
			try {
				if(count>0)
				{
					status=true;
				}
				else
				{
					status=false;
				}
			} catch(Exception e){
				e.printStackTrace();
			}
			finally
			{
				query=null;
			}
			return status;
		}
		//changes by Richa ends

		/*@Override 
		public String getImdMandatoryOrNot(String dealId)
		{
			String value="";
			String status="";
			String chckValue=("select PARAMETER_VALUE from PARAMETER_MST where PARAMETER_KEY='IMD_MANDATORY_AT_DEAL_FORWARD'");
			value=ConnectionDAO.singleReturn(chckValue);
			
			
			if(CommonFunction.checkNull(value).equalsIgnoreCase("Y")){
				String  query=("select count(1) from cr_instrument_dtl where rec_status in('D', 'R') and txnid='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim()+"' and txn_type='DC' ");
//				String val=ConnectionDAO.singleReturn(query);
				int count=0;
				count=Integer.parseInt(ConnectionDAO.singleReturn(query));
				logger.info("getImdMandatoryOrNot::::query::: " +query);
				logger.info("getImdMandatoryOrNot:::count:::: " +count);
//				if(val=="")
//				{
//					count=0;
//			}
//				else
//				{
//					count=Integer.parseInt(val);
//				}
				if(count==0){
		    		status="imdChk";
		    		
		 }
			}
			return status;
					
		}*/
		public String calculateEMIAmount(String loanAmt, String tenure, String roi) {
			String amount =loanAmt;
		    String inter = tenure;
		    String month = roi;
		    logger.info("PAmount-------------->"+amount);
		    

		    //  double loanAmount = 200000;
		     // int rateOfInterest = 12;
		     // int numberOfMonths = 84;

		    double	loanAmount=0.00;
		    if(!CommonFunction.checkNull(amount).equalsIgnoreCase("")){
		    loanAmount = Double.parseDouble(amount);
		    logger.info("loanAmount-------------->"+loanAmount);
		    logger.info("Amount-------------->"+amount);
		    }

		    double rateOfInterest = Double.parseDouble(month);
		    int numberOfMonths = Integer.parseInt(inter);

		      double temp = 1200;           //100*numberofmonths(12))
		      double interestPerMonth = rateOfInterest/temp;
		      //System.out.println(interestPerMonth);

		      double onePlusInterestPerMonth = 1 + interestPerMonth;
		      //System.out.println(onePlusInterestPerMonth);

		      double powerOfOnePlusInterestPerMonth = Math.pow(onePlusInterestPerMonth,numberOfMonths);
		      //System.out.println(powerOfOnePlusInterestPerMonth);

		      double powerofOnePlusInterestPerMonthMinusOne = powerOfOnePlusInterestPerMonth-1;
		      //System.out.println(powerofOnePlusInterestPerMonthMinusOne);

		      double divides = powerOfOnePlusInterestPerMonth/powerofOnePlusInterestPerMonthMinusOne;

		      double principleMultiplyInterestPerMonth = loanAmount * interestPerMonth;
		      //System.out.println(principleMultiplyInterestPerMonth);

		      double totalEmi =  principleMultiplyInterestPerMonth*divides;
		      System.out.println("EMI per month (Exact) : " + totalEmi);

		      double finalValue = Math.round( totalEmi * 100.0 ) / 100.0;

		      System.out.println("EMI per month (Rounded) : " + finalValue);
		      return String.valueOf(finalValue);
		}
			@Override
			// MERGED END BY SHARAD REPAYMENT 4.0
			public String validateFacilityAmountSanctionAmount(FacilityDetailsVo vo) {

				String result="";
				logger.info("validateFacilityAmountSanctionAmount deal id  "+vo.getDealId()+ " Deal loan id " + vo.getDealLoanId() +" laonamount "+vo.getLoanAmount());
				StringBuilder query1=new StringBuilder();		
				StringBuilder query=new StringBuilder();
				try{
					String LoanAmt=vo.getLoanAmount().replaceAll(",", "");
					String insPremium=vo.getInsurancePremium().replaceAll(",", "");
					if(insPremium.equalsIgnoreCase("") || insPremium.equalsIgnoreCase("0.0000") ){
						insPremium="0";
					}
					query.append("select round(ifnull(sum(deal_sanction_amount),0)+" + LoanAmt + "+" + insPremium + ") from cr_deal_facility_dtl  where deal_id='" + (CommonFunction.checkNull(vo.getDealId())).trim() + "' ");
					if(!CommonFunction.checkNull(vo.getDealLoanId()).equalsIgnoreCase(""))
					query.append(" and deal_loan_id<>'" + (CommonFunction.checkNull(vo.getDealLoanId())).trim() + "' ");  
					logger.info("validateFacilityAmountSanctionAmount : QUERY : " + query.toString());
					//long res=long.parseInt(ConnectionDAO.singleReturn(query.toString()));
					  long res = Long.parseLong(ConnectionDAO.singleReturn(query.toString()));
					query1.append(" SELECT round(IFNULL(DEAL_SANCTION_AMOUNT,0)) FROM CR_DEAL_DTL WHERE DEAL_ID = '" + (CommonFunction.checkNull(vo.getDealId())).trim() + "'  ");
					logger.info("validateFacilityAmountSanctionAmount : QUERY1 : " + query1.toString());
					//int res1=Integer.parseInt(ConnectionDAO.singleReturn(query1.toString()));
					 long res1 = Long.parseLong(ConnectionDAO.singleReturn(query1.toString()));
					if(res1<res){
						result="E";
					}else{
						result="S";
					}
				}catch(Exception e){
					e.printStackTrace();
				}
				return result;

			}
			public ArrayList getFacilityDetailScheme(String scheme,String bdate) {
				ArrayList<Object> list=new ArrayList<Object>();
				try{
					
					StringBuilder query=new StringBuilder();
				 query.append("select MIN_AMT_FIN,MAX_AMT_FIN,MIN_MARGIN_RATE,MAX_MARGIN_RATE,MIN_FLAT_RATE,MAX_FLAT_RATE,DEF_FLAT_RATE,MIN_EFF_RATE,MAX_EFF_RATE,DEF_EFF_RATE,MIN_TENURE,MAX_TENURE,S.BASE_RATE_TYPE,BASE_RATE   ");
				 query.append(" FROM CR_SCHEME_M S LEFT JOIN cr_base_rate_m B ON S.BASE_RATE_TYPE=B.BASE_RATE_TYPE AND B.rec_status='A' ");
				 query.append(" and  b.EFFECTIVE_FROM <= (select parameter_value from parameter_mst where PARAMETER_KEY ='BUSINESS_DATE')  where SCHEME_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(scheme)).trim()+" AND S.REC_STATUS='A' ");
		                      		

				logger.info("getFacilityDetailScheme  :  "+query);
				FacilityDetailsVo schemeVo = null;
				ArrayList schemedeatail = ConnectionDAO.sqlSelect(query.toString());
				logger.info("getFacilityDetailScheme"+schemedeatail.size());
				
				query=null;
				
				for(int i=0;i<schemedeatail.size();i++){

				
					ArrayList schemedeatail1=(ArrayList)schemedeatail.get(i);
					if(schemedeatail1.size()>0)
					{
						

						logger.info("getLeadEntryList"+schemedeatail1.size());
						
						schemeVo = new FacilityDetailsVo();
						if(!CommonFunction.checkNull(schemedeatail1.get(0)).equalsIgnoreCase(""))
						{
							Number reconNumf =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(0))).trim());
							schemeVo.setMinFinanceAmount(myFormatter.format(reconNumf));
						}else{
							schemeVo.setMinFinanceAmount("0");
						}
						
					
						if(!CommonFunction.checkNull(schemedeatail1.get(1)).equalsIgnoreCase(""))
						{
							Number reconNummF =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(1))).trim());
							schemeVo.setMaxFinanceAmount(myFormatter.format(reconNummF));
						}else{
							schemeVo.setMaxFinanceAmount("0");
						}
						if(!CommonFunction.checkNull(schemedeatail1.get(2)).equalsIgnoreCase(""))
						{	
							Number reconNumm =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(2))).trim());
							schemeVo.setMinMRate(myFormatter.format(reconNumm));
						}else{
							schemeVo.setMinMRate("0.0000000");
						}
					
						if(!CommonFunction.checkNull(schemedeatail1.get(3)).equalsIgnoreCase(""))
						{	
							Number reconNumR =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(3))).trim());
							schemeVo.setMaxMRate(myFormatter.format(reconNumR));
						}else{
							schemeVo.setMaxMRate("0.0000000");
						}
						if(!CommonFunction.checkNull(schemedeatail1.get(4)).equalsIgnoreCase(""))
						{
							Number reconNumd =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(4))).trim());
							schemeVo.setMinFlatRate(myFormatter.format(reconNumd));
						}
						else
						{
							schemeVo.setMinFlatRate("0.0000000");
						}
						if(!CommonFunction.checkNull(schemedeatail1.get(5)).equalsIgnoreCase(""))
						{
							Number reconNumd =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(5))).trim());
							schemeVo.setMaxFlatRate(myFormatter.format(reconNumd));
						}
						else
						{
							schemeVo.setMaxFlatRate("0.0000000");
						}
						if(!CommonFunction.checkNull(schemedeatail1.get(6)).equalsIgnoreCase(""))
						{
							Number reconNumd =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(6))).trim());
							schemeVo.setDefaultFlatRate(myFormatter.format(reconNumd));
						}
						else
						{
							schemeVo.setDefaultFlatRate("0.0000000");
						}
						if(!CommonFunction.checkNull(schemedeatail1.get(7)).equalsIgnoreCase(""))
						{
							Number reconNumd =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(7))).trim());
							schemeVo.setMinEffectiveRate(myFormatter.format(reconNumd));
						}
						else
						{
							schemeVo.setMinEffectiveRate("0.0000000");
						}
						if(!CommonFunction.checkNull(schemedeatail1.get(8)).equalsIgnoreCase(""))
						{
							Number reconNumd =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(8))).trim());
							schemeVo.setMaxEffectiveRate(myFormatter.format(reconNumd));
						}
						else
						{
							schemeVo.setMaxEffectiveRate("0.0000000");
						}
						if(!CommonFunction.checkNull(schemedeatail1.get(9)).equalsIgnoreCase(""))
						{
							Number reconNume =myFormatter.parse((CommonFunction.checkNull(schemedeatail1.get(9))).trim());
							schemeVo.setDefaultEffectiveRate(myFormatter.format(reconNume));
						}
						else
						{
							schemeVo.setDefaultEffectiveRate("0.0000000");
						}
						schemeVo.setMinTenure((CommonFunction.checkNull(schemedeatail1.get(10))).trim());
						schemeVo.setMaxTenure((CommonFunction.checkNull(schemedeatail1.get(11))).trim());
						schemeVo.setBaseRateType((CommonFunction.checkNull(schemedeatail1.get(12))).trim());
						schemeVo.setBaseRate((CommonFunction.checkNull(schemedeatail1.get(13))).trim());
						list.add(schemeVo);
					
					}
					schemedeatail1.clear();
					schemedeatail1=null;
				}
				}catch(Exception e){
					e.printStackTrace();
				}
				finally{
					scheme=null;
					bdate=null;
				}
				return list;
			}
			@Override
			public ArrayList getgenericList() {

				
				logger.info("getbusinessList======================================>>>>>>>>>>>>>>>");
				ArrayList list=new ArrayList();
				try{
					StringBuilder query=new StringBuilder();
				 query.append("select DESCRIPTION,VALUE from generic_master WHERE GENERIC_KEY='PARTNERDETAIL' ");
				logger.info("query : "+query);
				LoanDetailForCMVO vo=null;
				ArrayList genericList = ConnectionDAO.sqlSelect(query.toString());
				logger.info("query : "+query);
				
				query=null;
				
				for(int i=0;i<genericList.size();i++){
				ArrayList businessList1=(ArrayList)genericList.get(i);
					if(businessList1.size()>0)
					{
					    vo = new LoanDetailForCMVO();
					    
						vo.setBusinessdesc((CommonFunction.checkNull(businessList1.get(0))).trim());
						vo.setBusinessId((CommonFunction.checkNull(businessList1.get(1))).trim());
						 logger.info("id1.................................. "+(CommonFunction.checkNull(businessList1.get(0))).trim());
						 logger.info("id2.................................. "+(CommonFunction.checkNull(businessList1.get(1))).trim());
						list.add(vo);
					}
					businessList1.clear();
					businessList1=null;
				}
				}catch(Exception e){
					e.printStackTrace();
				}
				
				return list;

			}
			//Saurabh Code Start Here
			
				  public String CallFacilityDetailsProc(String dealId,String stageId) {
				
				StringBuilder query=new StringBuilder();
				ArrayList<Object> in =new ArrayList<Object>();
				ArrayList<Object> out =new ArrayList<Object>();
				ArrayList outMessages = new ArrayList();
				String s1="";
				String s2="";
				try{
					
			        	in.add(dealId);
			        	in.add(stageId);
						out.add(s1);
						out.add(s2);
						logger.info("SP_FACILITY_DETAILS_CAPTURING in CallFacilityDetailsProc");
						logger.info("SP_FACILITY_DETAILS_CAPTURING ("+in.toString()+","+out.toString()+")");
						outMessages=(ArrayList) ConnectionDAO.callSP("SP_FACILITY_DETAILS_CAPTURING",in,out);
						s1=CommonFunction.checkNull(outMessages.get(0));
						s2=CommonFunction.checkNull(outMessages.get(1));
					    logger.info("s1  : "+s1);
					    logger.info("s2  : "+s2);	
					    if(s1.equalsIgnoreCase("S"))
						{

							logger.info("Procedure Error Message----"+s2);
						}
						else
						{

							logger.info("Procedure Error Message----"+s2);
						}		

			      
			
				}catch(Exception e){
					e.printStackTrace();
				}
			
				return s2;
			}
				//ROHIT STARTS
					 public Map<String, String> getDMSDetails(String txnType, String txnId, String entityType, String entityId, String loginUserId, String docId) {
						    Map response = new HashMap();
						    StringBuilder query = new StringBuilder();
						    StringBuilder query2 = new StringBuilder();
						    PreparedStatement preparedStatement = null;
						    PreparedStatement preparedStatement2 = null;
						    Connection con = null;
						    ResultSet resultSet = null;
						    ResultSet resultSet2 = null;
						    try {
						      if ((StringUtils.equalsIgnoreCase(txnType, "DC")) || (StringUtils.equalsIgnoreCase(txnType, "LIM")))
						      {
						        query.append(" SELECT CDD.DEAL_APPLICATION_FORM_NO,CBM.BRANCH_DESC DEAL_BRANCH,CPM.PRODUCT_DESC,CSM.SCHEME_DESC,CDD.DMS_DOC_NUMBER  FROM CR_DEAL_DTL CDD  JOIN CR_DEAL_LOAN_DTL CDLD ON(CDLD.DEAL_ID=CDD.DEAL_ID)  JOIN CR_PRODUCT_M CPM ON(CPM.PRODUCT_ID=CDLD.DEAL_PRODUCT)  JOIN CR_SCHEME_M CSM ON(CSM.SCHEME_ID=CDLD.DEAL_SCHEME)  JOIN COM_BRANCH_M CBM ON (CBM.BRANCH_ID=CDD.DEAL_BRANCH)");

						        if (StringUtils.equalsIgnoreCase(txnType, "LIM")) {
						          query.append(new StringBuilder().append(" JOIN CR_LOAN_DTL CLD ON(CLD.LOAN_DEAL_ID=CDD.DEAL_ID) WHERE CLD.LOAN_ID='").append(txnId).append("'").toString());
						        }
						        else {
						          query.append(new StringBuilder().append(" WHERE CDD.DEAL_ID='").append(txnId).append("'").toString());
						        }
						        logger.info(new StringBuilder().append("getDMSDetails Query :").append(query).toString());
						        con = ConnectionDAO.getConnection();
						        preparedStatement = con.prepareStatement(query.toString());
						        resultSet = preparedStatement.executeQuery();

						        while (resultSet.next())
						        {
						          query2.setLength(0);
						          response.put("applicationFormNo", resultSet.getString("DEAL_APPLICATION_FORM_NO"));
						          response.put("branch", resultSet.getString("DEAL_BRANCH"));
						          response.put("product", resultSet.getString("PRODUCT_DESC"));
						          response.put("scheme", resultSet.getString("SCHEME_DESC"));
						          response.put("uploadedBy", loginUserId);
						          response.put("txnType", txnType);
						          response.put("txnId", txnId);
						          response.put("entityType", entityType);
						          response.put("entityId", entityId);
						          response.put("childDocId", "");
						          response.put("documentTypeName", "");
						          response.put("docId", docId);
						          response.put("documentTypeName", getDocumentDesc(docId));

						          if ((StringUtils.equalsIgnoreCase(entityType, "APPL")) || (StringUtils.isBlank(entityType)) || (StringUtils.equalsIgnoreCase(entityType, "DRF"))) {
						            response.put("dmsNumber", resultSet.getString("DMS_DOC_NUMBER"));
						            response.put("entityDesc", new StringBuilder().append(resultSet.getString("PRODUCT_DESC")).append("/").append(resultSet.getString("SCHEME_DESC")).toString());
						            response.put("panNumber", "");
						            response.put("aadharNumber", "");
						            response.put("email", "");
						            response.put("mobileNumber", "");
						            response.put("dob", "");
						          }

						          if ((StringUtils.equalsIgnoreCase(entityType, "PRAPPL")) || (StringUtils.equalsIgnoreCase(entityType, "COAPPL")) || (StringUtils.equalsIgnoreCase(entityType, "GUARANTOR"))) {
						            query2.append(new StringBuilder().append(" SELECT CDCM.DMS_DOC_NUMBER,CDCM.CUSTOMER_NAME,CDCM.CUSTMER_PAN,CDCM.UID_NO,CDCM.CUSTOMER_EMAIL,CD.PRIMARY_PHONE,CDCM.CUSTOMER_DOB  FROM CR_DEAL_CUSTOMER_ROLE CDCR  JOIN CR_DEAL_CUSTOMER_M CDCM ON(CDCM.CUSTOMER_ID=CDCR.DEAL_CUSTOMER_ID AND CDCR.DEAL_CUSTOMER_ROLE_TYPE='").append(entityType).append("') ").append(" JOIN  cr_deal_address_m CD ON ( cd.bpid=CDCM.customer_id and  communication_address ='Y') ").append(" WHERE CDCR.DEAL_ID='").append(txnId).append("' AND CDCM.CUSTOMER_ID='").append(entityId).append("'").toString());

						            logger.info(new StringBuilder().append("getDMSDetails Query2 :").append(query2).toString());
						            preparedStatement2 = con.prepareStatement(query2.toString());
						            resultSet2 = preparedStatement2.executeQuery();
						            while (resultSet2.next()) {
						              response.put("dmsNumber", resultSet2.getString("DMS_DOC_NUMBER"));
						              response.put("entityDesc", resultSet2.getString("CUSTOMER_NAME"));
						              response.put("panNumber", resultSet2.getString("CUSTMER_PAN"));
						              response.put("aadharNumber", resultSet2.getString("UID_NO"));
						              response.put("email", resultSet2.getString("CUSTOMER_EMAIL"));
						              response.put("mobileNumber", resultSet2.getString("PRIMARY_PHONE"));
						              response.put("dob", resultSet2.getString("CUSTOMER_DOB"));
						            }
						          }
						          if (StringUtils.equalsIgnoreCase(entityType, "ASSET")) {
						            query2.append(new StringBuilder().append(" SELECT CACM.DMS_DOC_NUMBER,CACM.ASSET_COLLATERAL_DESC   FROM CR_DEAL_COLLATERAL_M COL  JOIN CR_ASSET_COLLATERAL_M CACM ON(COL.ASSETID=CACM.ASSET_ID)  WHERE COL.DEAL_ID='").append(txnId).append("' AND CACM.ASSET_ID='").append(entityId).append("' ").toString());

						            logger.info(new StringBuilder().append("getDMSDetails Query2 :").append(query2).toString());
						            preparedStatement2 = con.prepareStatement(query2.toString());
						            resultSet2 = preparedStatement2.executeQuery();
						            while (resultSet2.next()) {
						              response.put("dmsNumber", resultSet2.getString("DMS_DOC_NUMBER"));
						              response.put("entityDesc", resultSet2.getString("ASSET_COLLATERAL_DESC"));
						              response.put("panNumber", "");
						              response.put("aadharNumber", "");
						              response.put("email", "");
						              response.put("mobileNumber", "");
						              response.put("dob", "");
						            }
						          }
						          if (StringUtils.equalsIgnoreCase(entityType, "BOUNCE")) {
						            response.put("entityDesc", "IMD Bounce Approval");
						            response.put("documentTypeName", "IMD Bounce Approval Upload");
						            response.put("dmsNumber", resultSet.getString("DMS_DOC_NUMBER"));
						            response.put("panNumber", "");
						            response.put("aadharNumber", "");
						            response.put("email", "");
						            response.put("mobileNumber", "");
						            response.put("dob", "");
						          }
						          if (StringUtils.equalsIgnoreCase(entityType, "LEGAL")) {
						            response.put("entityDesc", "LEGAL NOTICE");
						            response.put("documentTypeName", "LEGAL NOTICE UPLOAD");
						            response.put("dmsNumber", resultSet.getString("DMS_DOC_NUMBER"));
						            response.put("panNumber", "");
						            response.put("aadharNumber", "");
						            response.put("email", "");
						            response.put("mobileNumber", "");
						            response.put("dob", "");
						          }
						          if ((StringUtils.equalsIgnoreCase(entityType, "LVI")) || (StringUtils.equalsIgnoreCase(entityType, "TVI")) || (StringUtils.equalsIgnoreCase(entityType, "RVI")) || (StringUtils.equalsIgnoreCase(entityType, "FVI")) || (StringUtils.equalsIgnoreCase(entityType, "FVILM")) || (StringUtils.equalsIgnoreCase(entityType, "RVILM")) || (StringUtils.equalsIgnoreCase(entityType, "TVILM")) || (StringUtils.equalsIgnoreCase(entityType, "LVILM")))
						          {
						            query2.append(new StringBuilder().append(" SELECT a.DMS_DOC_NUMBER  FROM cr_field_verification_dtl a  join cr_deal_verification_dtl b on a.VERIFICATION_ID=b.VERIFICATION_ID WHERE  a.FIELD_VERIFICATION_ID='").append(entityId).append("'").toString());

						            if ((StringUtils.equalsIgnoreCase(entityType, "FVILM")) || (StringUtils.equalsIgnoreCase(entityType, "RVILM")) || (StringUtils.equalsIgnoreCase(entityType, "TVILM")) || (StringUtils.equalsIgnoreCase(entityType, "LVILM")))
						              query.append(new StringBuilder().append(" and b.LOAN_ID='").append(txnId).append("'").toString());
						            else {
						              query.append(new StringBuilder().append(" and CDD.DEAL_ID='").append(txnId).append("'").toString());
						            }
						            logger.info(new StringBuilder().append("getDMSDetails Query:").append(query2).toString());
						            con = ConnectionDAO.getConnection();
						            preparedStatement2 = con.prepareStatement(query2.toString());
						            resultSet2 = preparedStatement2.executeQuery();
						            while (resultSet2.next()) {
						              response.put("documentTypeName", "Additional Documents");
						              if (StringUtils.equalsIgnoreCase(entityType, "LVI")) {
						                response.put("entityDesc", "Legal Verification");
						                response.put("documentTypeName", "Legal Verification Upload");
						              }
						              if (StringUtils.equalsIgnoreCase(entityType, "TVI")) {
						                response.put("entityDesc", "Technical Verification");
						                response.put("documentTypeName", "Technical Verification Upload");
						              }
						              if (StringUtils.equalsIgnoreCase(entityType, "RVI")) {
						                response.put("entityDesc", "RCU Verification");
						                response.put("documentTypeName", "RCU Verification Upload");
						              }
						              if (StringUtils.equalsIgnoreCase(entityType, "FVI")) {
						                response.put("entityDesc", "Field Verification");
						                response.put("documentTypeName", "Field Verification Upload");
						              }
						              if (StringUtils.equalsIgnoreCase(entityType, "FVILM")) {
						                response.put("entityDesc", "Field Verification(Credit Management)");
						                response.put("documentTypeName", "Field Verification Upload(Credit Management)");
						              }
						              if (StringUtils.equalsIgnoreCase(entityType, "RVILM")) {
						                response.put("entityDesc", "RCU Verification(Credit Management)");
						                response.put("documentTypeName", "RCU Verification Upload(Credit Management)");
						              }
						              if (StringUtils.equalsIgnoreCase(entityType, "TVILM")) {
						                response.put("entityDesc", "Technical Verification(Credit Management)");
						                response.put("documentTypeName", "Technical Verification Upload(Credit Management)");
						              }
						              if (StringUtils.equalsIgnoreCase(entityType, "LVILM")) {
						                response.put("entityDesc", "Legal Verification(Credit Management)");
						                response.put("documentTypeName", "Legal Verification Upload(Credit Management)");
						              }
						              response.put("panNumber", "");
						              response.put("aadharNumber", "");
						              response.put("email", "");
						              response.put("mobileNumber", "");
						              response.put("dob", "");
						              response.put("dmsNumber", resultSet2.getString("DMS_DOC_NUMBER"));
						            }
						          }
						        }
						      }
						      if ((StringUtils.equalsIgnoreCase(txnType, "DSA")) || (StringUtils.equalsIgnoreCase(txnType, "BUL")) || (StringUtils.equalsIgnoreCase(txnType, "AG"))) {
						        query.append(new StringBuilder().append(" SELECT BP.BP_ID AS BP_ID,BP.BP_TYPE AS BP_TYPE,BP.BP_NAME AS BP_NAME,BRANCH.BRANCH_DESC AS BRANCH_DESC,IFNULL(BP.PAN_NO,'')PAN_NO,BP.DMS_DOC_NUMBER AS DMS_DOC_NUMBER  FROM CR_BP_DTL BP JOIN COM_BRANCH_M BRANCH ON (BRANCH.BRANCH_ID=BP.BP_BRANCH) WHERE BP.BP_ID='").append(txnId).append("'").toString());

						        logger.info(new StringBuilder().append("getDMSDetails Query :").append(query).toString());
						        con = ConnectionDAO.getConnection();
						        preparedStatement = con.prepareStatement(query.toString());
						        resultSet = preparedStatement.executeQuery();
						        while (resultSet.next()) {
						          response.put("applicationFormNo", "");
						          response.put("branch", resultSet.getString("BRANCH_DESC"));
						          response.put("product", "");
						          response.put("scheme", "");
						          response.put("uploadedBy", loginUserId);
						          response.put("txnType", txnType);
						          response.put("txnId", txnId);
						          response.put("entityType", txnType);
						          response.put("entityId", "0");
						          response.put("childDocId", "");
						          response.put("docId", docId);
						          response.put("documentTypeName", getDocumentDesc(docId));
						          response.put("dmsNumber", resultSet.getString("DMS_DOC_NUMBER"));
						          response.put("entityDesc", resultSet.getString("BP_NAME"));
						          response.put("panNumber", resultSet.getString("PAN_NO"));
						          response.put("aadharNumber", "");
						          response.put("email", "");
						          response.put("mobileNumber", "");
						          response.put("dob", "");
						        }
						      }
						      if (StringUtils.equalsIgnoreCase(txnType, "PRJ")) {
						        query.append(new StringBuilder().append(" SELECT PROJECT.PROJECT_ID AS BP_ID,'PRJ' AS BP_TYPE,PROJECT.PROJECT_NAME AS PROJECT_NAME,BRANCH.BRANCH_DESC AS BRANCH_DESC,PROJECT.DMS_DOC_NUMBER AS DMS_DOC_NUMBER  FROM CR_BP_PROJECT_DTL PROJECT JOIN COM_BRANCH_M BRANCH ON (BRANCH.BRANCH_ID=PROJECT.BRANCH) WHERE PROJECT.PROJECT_ID='").append(txnId).append("'").toString());

						        logger.info(new StringBuilder().append("getDMSDetails Query :").append(query).toString());
						        con = ConnectionDAO.getConnection();
						        preparedStatement = con.prepareStatement(query.toString());
						        resultSet = preparedStatement.executeQuery();
						        while (resultSet.next()) {
						          response.put("applicationFormNo", "");
						          response.put("branch", resultSet.getString("BRANCH_DESC"));
						          response.put("product", "");
						          response.put("scheme", "");
						          response.put("uploadedBy", loginUserId);
						          response.put("txnType", txnType);
						          response.put("txnId", txnId);
						          response.put("entityType", txnType);
						          response.put("entityId", "0");
						          response.put("childDocId", "");
						          response.put("docId", docId);
						          response.put("documentTypeName", getDocumentDesc(docId));
						          response.put("dmsNumber", resultSet.getString("DMS_DOC_NUMBER"));
						          response.put("entityDesc", resultSet.getString("PROJECT_NAME"));
						          response.put("panNumber", "");
						          response.put("aadharNumber", "");
						          response.put("email", "");
						          response.put("mobileNumber", "");
						          response.put("dob", "");
						        }
						      }
						    } catch (Exception e) {
						      e.printStackTrace();
						    } finally {
						      if (preparedStatement != null) {
						        try {
						          preparedStatement.close();
						        } catch (SQLException e) {
						          logger.debug(new StringBuilder().append("Error occur in ConnectionDAO class-closeConnection method:--").append(e.getMessage()).toString());
						          e = null;
						        }
						      }
						      if (resultSet != null) {
						        try {
						          resultSet.close();
						        } catch (SQLException e) {
						          logger.debug(new StringBuilder().append("Error occur in ConnectionDAO class-closeConnection method:--").append(e.getMessage()).toString());
						          e = null;
						        }
						      }
						      if (preparedStatement2 != null) {
						        try {
						          preparedStatement2.close();
						        } catch (SQLException e) {
						          logger.debug(new StringBuilder().append("Error occur in ConnectionDAO class-closeConnection method:--").append(e.getMessage()).toString());
						          e = null;
						        }
						      }
						      if (resultSet2 != null) {
						        try {
						          resultSet2.close();
						        } catch (SQLException e) {
						          logger.debug(new StringBuilder().append("Error occur in ConnectionDAO class-closeConnection method:--").append(e.getMessage()).toString());
						          e = null;
						        }
						      }
						      if (con != null) {
						        try {
						          con.close();
						          con = null;
						        } catch (SQLException e) {
						          logger.debug(new StringBuilder().append("Error occur in ConnectionDAO class-closeConnection method:--").append(e.getMessage()).toString());
						          e = null;
						        }
						      }
						    }
						    return response;
						  }
						  public String getDocumentDesc(String docId) {
						    logger.info("Method for getInvoiceFileDtl");
						    StringBuilder query = new StringBuilder();
						    PreparedStatement preparedStatement = null;
						    Connection con = null;
						    ResultSet resultSet = null;
						    String documentDesc = "";
						    if (StringUtils.isBlank(docId)) {
						      docId = "0";
						    }
						    docId = docId.trim();
						    try {
						      query.append(new StringBuilder().append("SELECT DOC_DESC FROM CR_DOCUMENT_M WHERE DOC_ID='").append(docId).append("'").toString());
						      logger.info(new StringBuilder().append("getDocumentDesc Query :").append(query).toString());
						      con = ConnectionDAO.getConnection();
						      preparedStatement = con.prepareStatement(query.toString());
						      resultSet = preparedStatement.executeQuery();
						      while (resultSet.next()) {
						        documentDesc = resultSet.getString("DOC_DESC");
						      }
						      if (StringUtils.isBlank(documentDesc))
						        documentDesc = "Additional Documents";
						    }
						    catch (Exception e) {
						      documentDesc = "Additional Documents";
						      e.printStackTrace();
						    } finally {
						      if (preparedStatement != null) {
						        try {
						          preparedStatement.close();
						        } catch (SQLException e) {
						          logger.debug(new StringBuilder().append("Error occur in ConnectionDAO class-closeConnection method:--").append(e.getMessage()).toString());
						          e = null;
						        }
						      }
						      if (resultSet != null) {
						        try {
						          resultSet.close();
						        } catch (SQLException e) {
						          logger.debug(new StringBuilder().append("Error occur in ConnectionDAO class-closeConnection method:--").append(e.getMessage()).toString());
						          e = null;
						        }
						      }

						      if (con != null) {
						        try {
						          con.close();
						          con = null;
						        } catch (SQLException e) {
						          logger.debug(new StringBuilder().append("Error occur in ConnectionDAO class-closeConnection method:--").append(e.getMessage()).toString());
						          e = null;
						        }
						      }
						    }
						    return documentDesc;
						  }

						  public boolean CheckDocumentList(String dealId)
						  {
						    boolean countt = false;
						    StringBuilder query = new StringBuilder();
						    query.append(new StringBuilder().append("select count(1) from  cr_document_dtl where txnid='").append(dealId).append("'").toString());
						    int value = Integer.parseInt(ConnectionDAO.singleReturn(query.toString()));
						    logger.info(new StringBuilder().append(" CheckDocumentList value from cr_document_dtl").append(value).toString());
						    if (value > 0)
						    {
						      countt = true;
						    }

						    return countt;
						  }

						  public Map<String, String> getFVIFileInfo(String lbxDocId, String stage)
						  {
						    Map response = new HashMap();
						    PreparedStatement preparedStatement = null;
						    Connection con = null;
						    ResultSet resultSet = null;
						    try
						    {
						      logger.info("In getFileInfo..........................DAOImpl");
						      StringBuffer query = new StringBuffer();
						      query.append(new StringBuilder().append("select document_path,FILE_NAME from cr_uploaded_documents where DOCUMENT_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(lbxDocId)).trim()).append("'").toString());
						      logger.info(new StringBuilder().append("In getFileInfo...............query...........DAOImpl ").append(query.toString()).toString());
						      con = ConnectionDAO.getConnection();
						      preparedStatement = con.prepareStatement(query.toString());
						      resultSet = preparedStatement.executeQuery();
						      while (resultSet.next()) {
						        response.put("DOCUMENT_PATH", resultSet.getString("DOCUMENT_PATH"));
						        response.put("FILE_NAME", resultSet.getString("FILE_NAME"));
						      }
						    }
						    catch (Exception e) {
						      e.printStackTrace();
						    } finally {
						      if (preparedStatement != null) {
						        try {
						          preparedStatement.close();
						        } catch (SQLException e) {
						          logger.debug(new StringBuilder().append("Error occur in ConnectionDAO class-closeConnection method:--").append(e.getMessage()).toString());
						          e = null;
						        }
						      }
						      if (resultSet != null) {
						        try {
						          resultSet.close();
						        } catch (SQLException e) {
						          logger.debug(new StringBuilder().append("Error occur in ConnectionDAO class-closeConnection method:--").append(e.getMessage()).toString());
						          e = null;
						        }
						      }
						      if (con != null) {
						        try {
						          con.close();
						          con = null;
						        } catch (SQLException e) {
						          logger.debug(new StringBuilder().append("Error occur in ConnectionDAO class-closeConnection method:--").append(e.getMessage()).toString());
						          e = null;
						        }
						      }
						    }
						    return response;
						  }

						  public Map<String, String> getFileInfo(String lbxDocId) {
						    Map response = new HashMap();
						    PreparedStatement preparedStatement = null;
						    Connection con = null;
						    ResultSet resultSet = null;
						    StringBuffer query = new StringBuffer();
						    try
						    {
						      logger.info("In getFileInfo..........................DAOImpl");

						      query.append(new StringBuilder().append("select DOCUMENT_PATH,FILE_NAME from cr_uploaded_documents where DOCUMENT_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(lbxDocId)).trim()).append("'").toString());
						      logger.info(new StringBuilder().append("In getFileInfo...............query...........DAOImpl ").append(query).toString());
						      con = ConnectionDAO.getConnection();
						      preparedStatement = con.prepareStatement(query.toString());
						      resultSet = preparedStatement.executeQuery();
						      while (resultSet.next()) {
						        response.put("DOCUMENT_PATH", resultSet.getString("DOCUMENT_PATH"));
						        response.put("FILE_NAME", resultSet.getString("FILE_NAME"));
						      }
						    } catch (Exception e) {
						      e.printStackTrace();
						    } finally {
						      if (preparedStatement != null) {
						        try {
						          preparedStatement.close();
						        } catch (SQLException e) {
						          logger.debug(new StringBuilder().append("Error occur in ConnectionDAO class-closeConnection method:--").append(e.getMessage()).toString());
						          e = null;
						        }
						      }
						      if (resultSet != null) {
						        try {
						          resultSet.close();
						        } catch (SQLException e) {
						          logger.debug(new StringBuilder().append("Error occur in ConnectionDAO class-closeConnection method:--").append(e.getMessage()).toString());
						          e = null;
						        }
						      }
						      if (con != null) {
						        try {
						          con.close();
						          con = null;
						        } catch (SQLException e) {
						          logger.debug(new StringBuilder().append("Error occur in ConnectionDAO class-closeConnection method:--").append(e.getMessage()).toString());
						          e = null;
						        }
						      }
						    }
						    return response;
						  }

						  public ArrayList getUploadDocForFVC(String fieldVerificationUniqueId, String stage, String dealId) {
						    ArrayList list = new ArrayList();
						    try {
						      logger.info(new StringBuilder().append("In getUploadUnderwritingData..........................DAOImpl").append(fieldVerificationUniqueId).toString());
						      StringBuilder query = new StringBuilder();
						      query.append(new StringBuilder().append("select a.ENTITY_ID, a.file_name, a.document_desc, b.USER_NAME,DOC_TYPE,IFNULL(A.DMS_ID,0)DMS_ID,A.DMS_DOC_URL,A.DOCUMENT_ID,A.TXN_ID  from cr_uploaded_documents a  left join sec_user_m b on a.UPLOADED_BY=b.USER_ID  where txn_id='").append(dealId).append("' ").append(" and A.DOCUMENT_STATUS='A' ").append(" AND ENTITY_ID='").append(fieldVerificationUniqueId).append("' ").append(" AND DOC_TYPE='").append(stage).append("' ").toString());

						      if ((StringUtils.equalsIgnoreCase(stage, "FVILM")) || (StringUtils.equalsIgnoreCase(stage, "RVILM")) || (StringUtils.equalsIgnoreCase(stage, "TVILM")) || (StringUtils.equalsIgnoreCase(stage, "LVILM")))
						        query.append(" and TXN_TYPE='LIM'");
						      else {
						        query.append(" and TXN_TYPE='DC'");
						      }
						      logger.info(new StringBuilder().append("In getUploadUnderwritingData...............query...........DAOImpl").append(query.toString()).toString());
						      UnderwritingDocUploadVo uwDocVo = null;
						      ArrayList product = ConnectionDAO.sqlSelect(query.toString());
						      logger.info(new StringBuilder().append("getUploadUnderwritingData size of list Product ").append(product.size()).toString());
						      query = null;
						      for (int i = 0; i < product.size(); i++) {
						        logger.info(new StringBuilder().append("getUploadUnderwritingData... FOR loop ").append(CommonFunction.checkNull(product.get(i)).toString()).toString());
						        ArrayList data = (ArrayList)product.get(i);
						        if (data.size() > 0) {
						          uwDocVo = new UnderwritingDocUploadVo();
						          uwDocVo.setFieldVerificationUniqueId(CommonFunction.checkNull(data.get(0)).trim());
						          uwDocVo.setFileName(CommonFunction.checkNull(data.get(1)).trim());
						          uwDocVo.setDocDescription(CommonFunction.checkNull(data.get(2)).trim());
						          uwDocVo.setUserName(CommonFunction.checkNull(data.get(3)).trim());
						          uwDocVo.setStage(CommonFunction.checkNull(data.get(4)).trim());
						          uwDocVo.setDmsDocId(CommonFunction.checkNull(data.get(5)).trim());
						          uwDocVo.setDmsDocUrl(CommonFunction.checkNull(data.get(6)).trim());
						          uwDocVo.setLbxDocId(CommonFunction.checkNull(data.get(7)).trim());
						          uwDocVo.setTxnId(CommonFunction.checkNull(data.get(8)).trim());
						          list.add(uwDocVo);
						        }
						      }
						    }
						    catch (Exception e) {
						      e.printStackTrace();
						    }

						    return list;
						  }
						  public ArrayList getCoAppCountryStateDistrictTahsilValue(String pincode) {
								ArrayList<Object> list=new ArrayList<Object>();
								try{
									
								StringBuilder query=new StringBuilder();
								query.append(" SELECT A.PINCODE,E.ID,E.DESCRIPTION,E.DISTRICT_ID,B.DISTRICT_DESC,C.STATE_ID,C.STATE_DESC,D.COUNTRY_ID,D.COUNTRY_DESC FROM  com_pincode_m A  ");
								query.append(" left JOIN com_tehsil_m E ON A.TEHSIL_ID=E.ID ");
								query.append(" left JOIN COM_DISTRICT_M B ON E.DISTRICT_ID=B.DISTRICT_ID AND E.STATUS='A' AND B.REC_STATUS='A' ");
								query.append(" left JOIN com_state_m C ON B.STATE_ID=C.STATE_ID AND C.REC_STATUS='A' ");
								query.append(" left JOIN com_country_m D ON D.COUNTRY_ID=C.COUNTRY_ID AND D.REC_STATUS='A' ");
								query.append(" WHERE A.id= '"+pincode+"'");
								logger.info("getCoAppCountryStateDistrictTahsilValue: "+query.toString());
								CreditProcessingLeadDetailDataVo vo = null;
								ArrayList source = ConnectionDAO.sqlSelect(query.toString());
								logger.info("getCoAppCountryStateDistrictTahsilValue : "+source.size());
								
								query=null;
								
								for(int i=0;i<source.size();i++){

									ArrayList subsource=(ArrayList)source.get(i);
									if(subsource.size()>0)
									{
										vo = new CreditProcessingLeadDetailDataVo();
										vo.setCoApppincode(CommonFunction.checkNull(subsource.get(0)).trim());
										vo.setCoApptxnTahsilHID(CommonFunction.checkNull(subsource.get(1)).trim());
										vo.setCoApptahsil(CommonFunction.checkNull(subsource.get(2)).trim());
										vo.setCoApptxtDistCode(CommonFunction.checkNull(subsource.get(3)).trim());
										vo.setCoAppdist(CommonFunction.checkNull(subsource.get(4)).trim());
										vo.setCoApptxtStateCode(CommonFunction.checkNull(subsource.get(5)).trim());
										vo.setCoAppstate(CommonFunction.checkNull(subsource.get(6)).trim());
										vo.setCoApptxtCountryCode(CommonFunction.checkNull(subsource.get(7)).trim());
										vo.setCoAppcountry(CommonFunction.checkNull(subsource.get(8)).trim());
										list.add(vo);
									}
								}
								}catch(Exception e){
									e.printStackTrace();
								}
								return list;
							}
							public ArrayList getGaurCountryStateDistrictTahsilValue(String pincode) {
								ArrayList<Object> list=new ArrayList<Object>();
								try{
									
								StringBuilder query=new StringBuilder();
								query.append(" SELECT A.PINCODE,E.ID,E.DESCRIPTION,E.DISTRICT_ID,B.DISTRICT_DESC,C.STATE_ID,C.STATE_DESC,D.COUNTRY_ID,D.COUNTRY_DESC FROM  com_pincode_m A  ");
								query.append(" left JOIN com_tehsil_m E ON A.TEHSIL_ID=E.ID ");
								query.append(" left JOIN COM_DISTRICT_M B ON E.DISTRICT_ID=B.DISTRICT_ID AND E.STATUS='A' AND B.REC_STATUS='A' ");
								query.append(" left JOIN com_state_m C ON B.STATE_ID=C.STATE_ID AND C.REC_STATUS='A' ");
								query.append(" left JOIN com_country_m D ON D.COUNTRY_ID=C.COUNTRY_ID AND D.REC_STATUS='A' ");
								query.append(" WHERE A.id= '"+pincode+"'");
								logger.info("getCoAppCountryStateDistrictTahsilValue: "+query.toString());
								CreditProcessingLeadDetailDataVo vo = null;
								ArrayList source = ConnectionDAO.sqlSelect(query.toString());
								logger.info("getCoAppCountryStateDistrictTahsilValue : "+source.size());
								
								query=null;
								
								for(int i=0;i<source.size();i++){

									ArrayList subsource=(ArrayList)source.get(i);
									if(subsource.size()>0)
									{
										vo = new CreditProcessingLeadDetailDataVo();
										vo.setGaurpincode(CommonFunction.checkNull(subsource.get(0)).trim());
										vo.setGaurtxnTahsilHID(CommonFunction.checkNull(subsource.get(1)).trim());
										vo.setGaurtahsil(CommonFunction.checkNull(subsource.get(2)).trim());
										vo.setGaurtxtDistCode(CommonFunction.checkNull(subsource.get(3)).trim());
										vo.setGaurdist(CommonFunction.checkNull(subsource.get(4)).trim());
										vo.setGaurtxtStateCode(CommonFunction.checkNull(subsource.get(5)).trim());
										vo.setGaurstate(CommonFunction.checkNull(subsource.get(6)).trim());
										vo.setGaurtxtCountryCode(CommonFunction.checkNull(subsource.get(7)).trim());
										vo.setGaurcountry(CommonFunction.checkNull(subsource.get(8)).trim());
										list.add(vo);
									}
								}
								}catch(Exception e){
									e.printStackTrace();
								}
								return list;
							}
				  
				  public int getApprovalLevelfromPmst() {
				        ArrayList list = new ArrayList();
				        int count = 0;
				        try {
				            logger.info("In getApprovalLevelfromPmst.............inside ejb server file............Dao Impl");
				            String query = "select PARAMETER_VALUE from parameter_mst where parameter_key = 'MASTER_APPROVAL_LEVEL'";
				            ApprovalLevelDefVo vO = null;
				            ArrayList getApprovalLevelfromPmst = ConnectionDAO.sqlSelect(query);
				            String countStr = ConnectionDAO.singleReturn(query);
				            if(!(CommonFunction.checkNull(countStr).equalsIgnoreCase("")))
				                count = Integer.parseInt(countStr);

				        } catch (Exception e) {
				            e.printStackTrace();
				        }
				        return count;
				    }	  
				  
				  public ArrayList getPODDocuments(String commonId, String stage, String txnType, String source)
				  {
				    ArrayList list = new ArrayList();
				    try {
				      String table = "cr_document_dtl";
				      String custTable = "gcd_customer_m";
				      String tabName = "cr_loan_collateral_m";
				      String Commonid = "LOAN_ID";
				      String assetTable = "cr_asset_collateral_m";
				      String roleTable = "CR_LOAN_CUSTOMER_ROLE";

				      if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
				      {
				    	table = "cr_document_dtl_edit"; 
				        custTable = "gcd_customer_m";
				        tabName = "cr_loan_collateral_m_edit";
				        assetTable = "cr_asset_collateral_m_edit";
				        roleTable = "CR_LOAN_CUSTOMER_ROLE_edit";
				      }
				      StringBuilder query = new StringBuilder();
				      query.append(" SELECT DISTINCT TXN_DOC_ID,DOC_ID,DOC_DESC,DATE_FORMAT(DOC_RECEIVED_DATE,'"+dateFormat+"'),");
				      query.append(" DATE_FORMAT(DOC_DEFFRED_DATE,'"+dateFormat+"'),DATE_FORMAT(DOC_EXPIRY_DATE,'"+dateFormat+"'), ");
				      query.append(" DOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS,Doc_Expiry_Flag,DOC_CHILD_FLAG,DOC_CHILD_IDS,d.ENTITY_ID,d.DOCUMENT_TYPE,d.DOC_TYPE,'' as assetId,'' as ASSET_COLLATERAL_CLASS,'' as Customer_name ");
				      query.append(" from "+table+" d where  TXNID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()+" ");
				      query.append(" and TXN_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()+"' ");
				      query.append(" and STAGE_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()+"' and ENTITY_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()+"  and DOC_TYPE='APPL' ");

				      query.append(" UNION  SELECT  DISTINCT TXN_DOC_ID,DOC_ID,DOC_DESC, DATE_FORMAT(DOC_RECEIVED_DATE,'"+dateFormat+"'),");
				      query.append("  DATE_FORMAT(DOC_DEFFRED_DATE,'"+dateFormat+"'),DATE_FORMAT(DOC_EXPIRY_DATE,'"+dateFormat+"'), ");
				      query.append("  DOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS,Doc_Expiry_Flag,DOC_CHILD_FLAG,DOC_CHILD_IDS,D.ENTITY_ID,d.document_type,d.DOC_TYPE,'' as assetId,'' as ASSET_COLLATERAL_CLASS,g.CUSTOMER_NAME ");
				      query.append("  from "+table+" d, "+custTable+" g, cr_loan_dtl L,"+roleTable+" R ");
				      query.append("  where  TXNID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()+" ");
				      query.append("   and TXN_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()+"' ");
				      query.append(" and STAGE_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()+"' ");
				      query.append(" AND D.TXNID = L.LOAN_ID AND D.ENTITY_ID=R.GCD_ID and R.GCD_ID=g.CUSTOMER_ID and DOC_TYPE in ('PRAPPL','COAPPL','GUARANTOR') ");
				      
				      query.append(" UNION  SELECT DISTINCT TXN_DOC_ID,DOC_ID,DOC_DESC, DATE_FORMAT(DOC_RECEIVED_DATE,'"+dateFormat+"'),");
				      query.append(" DATE_FORMAT(DOC_DEFFRED_DATE,'"+dateFormat+"'),DATE_FORMAT(DOC_EXPIRY_DATE,'"+dateFormat+"'), ");
				      query.append(" DOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS,Doc_Expiry_Flag,DOC_CHILD_FLAG,DOC_CHILD_IDS,D.ENTITY_ID,d.document_type,d.DOC_TYPE,R.ASSETID,ASSET_COLLATERAL_CLASS,'' as customer_name ");
				      query.append(" from "+table+" d, "+tabName+" R,"+assetTable+" A ");
				      query.append(" where  TXNID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()+" ");
				      query.append(" and TXN_TYPE='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()+"' ");
				      query.append(" and STAGE_ID='"+StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()+"'");
				      query.append("  AND D.TXNID = R."+StringEscapeUtils.escapeSql(CommonFunction.checkNull(Commonid)).trim()+" ");
				      query.append("  AND D.ENTITY_ID = R.ASSETID  AND R.ASSETID=A.ASSET_ID AND DOC_TYPE IN ('ASSET','COLLATERAL') ");
				      
				      logger.info(new StringBuilder().append("getDocumentsDetai Queryl: ").append(query).toString());
				      DocumentsVo docsVo = null;
				      ArrayList docsdeatail = ConnectionDAO.sqlSelect(query.toString());
				      logger.info(new StringBuilder().append("getDocumentsDetail OUTER ARRAYLIST SIZE: ").append(docsdeatail.size()).toString());

				      for (int i = 0; i < docsdeatail.size(); i++)
				      {
				        ArrayList docsdeatail1 = (ArrayList)docsdeatail.get(i);
				        if (docsdeatail1.size() > 0)
				        {
				          docsVo = new DocumentsVo();
				          docsVo.setDocId(CommonFunction.checkNull(docsdeatail1.get(0)).trim());
				          docsVo.setRealDocId(CommonFunction.checkNull(docsdeatail1.get(1)).trim());
				          docsVo.setDocDesc(CommonFunction.checkNull(docsdeatail1.get(2)).trim());
				          docsVo.setRecieveDate(CommonFunction.checkNull(docsdeatail1.get(3)).trim());
				          docsVo.setDeferDate(CommonFunction.checkNull(docsdeatail1.get(4)).trim());
				          docsVo.setExpirDate(CommonFunction.checkNull(docsdeatail1.get(5)).trim());

				          if (CommonFunction.checkNull(docsdeatail1.get(6)).trim().equals("Y"))
				          {
				            docsVo.setMandatory("MANDATORY");
				          }
				          else if (CommonFunction.checkNull(docsdeatail1.get(6)).trim().equals("N"))
				          {
				            docsVo.setMandatory("NON-MANDATORY");
				          }

				          if (CommonFunction.checkNull(docsdeatail1.get(7)).trim().equals("Y"))
				          {
				            docsVo.setOriginal("ORIGINAL");
				          }
				          else if (CommonFunction.checkNull(docsdeatail1.get(7)).trim().equals("N"))
				          {
				            docsVo.setOriginal("PHOTOCOPY");
				          }

				          docsVo.setDocStatus(CommonFunction.checkNull(docsdeatail1.get(8)).trim());
				          docsVo.setRemark(CommonFunction.checkNull(docsdeatail1.get(9)).trim());
				          docsVo.setExpirFlag(CommonFunction.checkNull(docsdeatail1.get(10)).trim());
				          docsVo.setDocChildFlag(CommonFunction.checkNull(docsdeatail1.get(11)).trim());
				          docsVo.setDocChildId(CommonFunction.checkNull(docsdeatail1.get(12)).trim());
				          docsVo.setEntityId(CommonFunction.checkNull(docsdeatail1.get(13)).trim());
				          docsVo.setvDocumentType(CommonFunction.checkNull(docsdeatail1.get(14)).trim());
				          docsVo.setDocType(CommonFunction.checkNull(docsdeatail1.get(15)).trim());
				          docsVo.setType(CommonFunction.checkNull(docsdeatail1.get(16)).trim());
				          docsVo.setApplName(CommonFunction.checkNull(docsdeatail1.get(18)).trim());
				          
				          list.add(docsVo);
				        }
				        query = null;
				      }
				    }
				    catch (Exception e) {
				      e.printStackTrace();
				    }
				    finally {
				      commonId = null;
				      stage = null;
				      txnType = null;
				      source = null;
				    }

				    return list;
				  }

				@Override
				public ArrayList getAdditionalDocsPOD(String commonId,
						String stage, String txnType, String source) {
				    ArrayList list = new ArrayList();
				    try
				    {
				      String table = "cr_document_dtl";
				      if (CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
				        table = "cr_document_dtl_edit";
				      StringBuilder query = new StringBuilder();

				      query.append(new StringBuilder().append(" SELECT DISTINCT DOC_DESC,DATE_FORMAT(DOC_RECEIVED_DATE,'").append(this.dateFormat).append("'),").append("\tDATE_FORMAT(DOC_DEFFRED_DATE,'").append(this.dateFormat).append("'),DATE_FORMAT(DOC_EXPIRY_DATE,'").append(this.dateFormat).append("'), ").append("\tDOC_MANDATORY,DOC_ORIGINAL,DOC_STATUS,DOC_REMARKS,d.document_type").append("\tfrom ").append(table).append(" d").append("\twhere  TXNID=").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(commonId)).trim()).append(" ").append("  and TXN_TYPE='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(txnType)).trim()).append("' ").append("  and STAGE_ID='").append(StringEscapeUtils.escapeSql(CommonFunction.checkNull(stage)).trim()).append("' ").append("  and DOC_ID IS NULL ").toString());

				      logger.info(new StringBuilder().append("getAdditionalDocs Query: ").append(query).toString());

				      DocumentsVo docsVo = null;
				      ArrayList docsdeatail = ConnectionDAO.sqlSelect(query.toString());
				      logger.info(new StringBuilder().append("getAdditionalDocs OUTER ARRAYLIST SIZE: ").append(docsdeatail.size()).toString());

				      query = null;

				      for (int i = 0; i < docsdeatail.size(); i++)
				      {
				        ArrayList docsdeatail1 = (ArrayList)docsdeatail.get(i);
				        if (docsdeatail1.size() > 0)
				        {
				          docsVo = new DocumentsVo();
				          docsVo.setDocNameAddn(CommonFunction.checkNull(docsdeatail1.get(0)).trim());
				          docsVo.setAddnReceivedDate(CommonFunction.checkNull(docsdeatail1.get(1)).trim());
				          docsVo.setAddnDeferredDate(CommonFunction.checkNull(docsdeatail1.get(2)).trim());
				          docsVo.setAddnExpiryDate(CommonFunction.checkNull(docsdeatail1.get(3)).trim());
				          docsVo.setMandateOrNonMandate(CommonFunction.checkNull(docsdeatail1.get(4)).trim());
				          docsVo.setOrgOrCopy(CommonFunction.checkNull(docsdeatail1.get(5)).trim());
				          docsVo.setAddnDocStatus(CommonFunction.checkNull(docsdeatail1.get(6)).trim());
				          docsVo.setAddnRemarks(CommonFunction.checkNull(docsdeatail1.get(7)).trim());
				          docsVo.setvDocumentType(CommonFunction.checkNull(docsdeatail1.get(8)).trim());
				          list.add(docsVo);
				        }
				      }
				    } catch (Exception e) {
				      e.printStackTrace();
				    }
				    finally {
				      
				      commonId = null;
				      stage = null;
				      txnType = null;
				      source = null;
				    }
				    return list;
				  }
				  
}