/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.connect.UploadDocument;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.UnderwritingDocUploadVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.connect.ConnectionDAO;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.lang.StringUtils;

/**
 * MyEclipse Struts Creation date: 05-05-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class fvcDocUploadProcessing extends DispatchAction {
	private static final Logger logger = Logger.getLogger(fvcDocUploadProcessing.class.getName());

	public ActionForward uploadUnderwritingDocData(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		logger.info("Inside fvcDocUploadProcessing(fvcDocUploadProcessing)");

		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userName="";
		if(userobj!=null)
		{
			userName=userobj.getUserId();
		}else{
			logger.info("in  fvcDocUploadProcessing method of  fvcDocUploadProcessing action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//sachin
		String flag1="";
		if(session.getAttribute("cmdocupload")!=null)
		{
		  flag1=session.getAttribute("cmdocupload").toString();
		}
		//sachin
		String fieldVerificationUniqueId="";
		if(session.getAttribute("fieldVerificationUniqueId")!=null)
		{
			fieldVerificationUniqueId=session.getAttribute("fieldVerificationUniqueId").toString();
		}
		
		logger.info("fieldVerificationUniqueId: "+fieldVerificationUniqueId);
		UnderwritingDocUploadVo uwDocVo = new UnderwritingDocUploadVo();
		DynaValidatorForm VarificationDynaValidatorForm = (DynaValidatorForm) form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(uwDocVo,VarificationDynaValidatorForm);
		uwDocVo.setUserName("" + userName);
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass());
		boolean uploadStatus = false;
		boolean status = false;
		
		  String dealId = request.getParameter("dealId");
		  String loanId = (String)session.getAttribute("loanId");

		logger.info("stage: "+request.getParameter("stage"));
		logger.info("##########################################"+uwDocVo.getDocFile());
		String stage = request.getParameter("stage");
		ArrayList uploadedDocList=new ArrayList();
			if (service.checkUploadFeasibilityFVC(fieldVerificationUniqueId,stage)) {
				uploadStatus = UploadDocument.docUpload(request, uwDocVo.getDocFile(), fieldVerificationUniqueId);
				uwDocVo.setFileName(request.getAttribute("fileName").toString());
				uwDocVo.setDocPath(request.getAttribute("filePath").toString());
			} else {
				uploadedDocList = service.getUploadDocForFVC(fieldVerificationUniqueId,stage,dealId);
				request.setAttribute("uploadedDocList", uploadedDocList);
				request.setAttribute("message", "FiveDocOnly");
			}
		
		logger.info("=======================================++++++"+uploadStatus);
		if (uploadStatus) {
				logger.info("-----------------123");
				uwDocVo.setFieldVerificationUniqueId(fieldVerificationUniqueId);
			 status=service.uploadDocumentDataForFVC(uwDocVo,stage);
			 uploadedDocList = service.getUploadDocForFVC(fieldVerificationUniqueId,stage,dealId);
			logger.info("=======================================++++"+status);
			if(status){
				logger.info("status-------uploadUnderwritingData()+yes");
				request.setAttribute("message", "UploadSuccessful");
			}
			if(uploadedDocList.size()>0){
				request.setAttribute("uploadedDocList", uploadedDocList);
			}

		}
		else{
			if(CommonFunction.checkNull(flag1).equalsIgnoreCase("")){
				 uploadedDocList = service.getUploadDocForFVC(fieldVerificationUniqueId,stage,loanId);
				 request.setAttribute("uploadedDocList", uploadedDocList);
				}
				else{
					uploadedDocList = service.getUploadDocForFVC(fieldVerificationUniqueId,stage,loanId);
					//uploadDocListForCp = service.getUploadUnderwritingDataForCmCp(dealId);
					request.setAttribute("uploadedDocList", uploadedDocList);
					//request.setAttribute("uploadDocListForCp", uploadDocListForCp);
				}
		}
		
		String dmsProviderQuery = "SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='DMS_PROVIDER'";
	    String dmsProvider = ConnectionDAO.singleReturn(dmsProviderQuery);
	    request.setAttribute("dmsProvider", dmsProvider);
	    Map map = new HashMap();
	    if ((StringUtils.equalsIgnoreCase(stage, "FVILM")) || (StringUtils.equalsIgnoreCase(stage, "RVILM")) || (StringUtils.equalsIgnoreCase(stage, "TVILM")) || (StringUtils.equalsIgnoreCase(stage, "LVILM")))
	      map = service.getDMSDetails("LIM", loanId, stage, fieldVerificationUniqueId, userName, "0");
	    else {
	      map = service.getDMSDetails("DC", dealId, stage, fieldVerificationUniqueId, userName, "0");
	    }
	    request.setAttribute("dmsDetailsMap", map);

	    Map<String,String> dmsCredential = CommonFunction.getDmsCredential();
	    request.setAttribute("dmsCredential", dmsCredential);
		request.setAttribute("stage", stage);
		return mapping.findForward("success");
	}

	public ActionForward deleteUploadDocData(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		logger
				.info("In deleteUploadDocData in Underwriting Upload Processing Action");
		boolean deleteStatus = false;

		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("in deleteUploadDocData method of fvcDocUploadProcessing action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String stage = request.getParameter("stage");
		 String dealId = request.getParameter("dealId");
	    String fieldVerificationUniqueId = session.getAttribute("fieldVerificationUniqueId").toString();
		UnderwritingDocUploadVo uwDocVo = new UnderwritingDocUploadVo();
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass());
		String doc_name[] = request.getParameterValues("chk");
		logger.info("Printing Doc Id : " + doc_name);
		for (int p = 0; p < doc_name.length; p++) {
			logger.info("Document id:--" + doc_name[p]+" fieldVerificationUniqueId: "+fieldVerificationUniqueId);

			deleteStatus = service.deleteDocumentUploadedForFVI(doc_name[p],fieldVerificationUniqueId,stage);
			
			if (deleteStatus) {
				request.setAttribute("message", "deletedoc");
				deleteStatus = UploadDocument.docDelete(doc_name[p], fieldVerificationUniqueId);
				
			}
		}
		
		//sachin
		ArrayList uploadedDocList=new ArrayList();
		
		uploadedDocList = service.getUploadDocForFVC(fieldVerificationUniqueId,stage, dealId);
		
		if(uploadedDocList.size()>0){
		request.setAttribute("uploadedDocList", uploadedDocList);
		}
		request.setAttribute("stage", stage);
//end by sachin
		return mapping.findForward("delete");
	}

	public ActionForward downloadFviUploadedFile(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		String downloadPath = "";
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here downloadUnderwritingFile method of fvcDocUploadProcessing  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String fieldVerificationUniqueId = (String) session.getAttribute("fieldVerificationUniqueId");
		String fileName = request.getParameter("fileName");
		String stage = request.getParameter("stage");
		 String lbxDocId = request.getParameter("lbxDocId");
		//sachin
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass());
		downloadPath = service.getFVIFileInfo(fieldVerificationUniqueId,fileName,stage);
		Map map = service.getFVIFileInfo(lbxDocId, stage);
	    downloadPath = (String)map.get("DOCUMENT_PATH");
	    fileName = (String)map.get("FILE_NAME");
		
		//end by sachin
		logger.info("File Name downloadPath: "+downloadPath);
		if (!downloadPath.equals(null)) {
			downloadPath = downloadPath + "\\" + fileName;
			logger.info("Download Path of File is: " + downloadPath);
			String fileType = fileName.substring(fileName.lastIndexOf(".") + 1,
					fileName.length());
			fileType=fileType.toLowerCase();
			logger.info("File Type: " + fileType);
			logger.info("File Name: " + fileName);
			

			if (fileType.trim().equalsIgnoreCase("xls")) {
				logger.info("File Type in xls: " + fileType);
				response.setContentType("application/vnd.ms-excel");
			} else if (fileType.trim().equalsIgnoreCase("xlsx")) {
				logger.info("File Type in xlsx: " + fileType);
				response.setContentType("application/vnd.ms-excel");
			} else if (fileType.trim().equalsIgnoreCase("pdf")) {
				logger.info("File Type in pdf: " + fileType);
				response.setContentType("application/pdf");
			}
			else if (fileType.trim().equalsIgnoreCase("doc")) {
				logger.info("File Type in doc: " + fileType);
				response.setContentType("application/msword");
			} else if (fileType.trim().equalsIgnoreCase("docx")) {
				logger.info("File Type in docx: " + fileType);
				response.setContentType("application/msword");
			} else if (fileType.trim().equalsIgnoreCase("jpg")) {
				logger.info("File Type in jpg: " + fileType);
				response.setContentType("image/jpeg");
			}
		    else if (fileType.trim().equalsIgnoreCase("jpeg")) {
			logger.info("File Type in jpeg: " + fileType);
			response.setContentType("image/jpeg");
		  }
			else if (fileType.trim().equalsIgnoreCase("zip")||fileType.trim().equalsIgnoreCase("rar")) {
				logger.info("File Type in zip/rar: " + fileType);
				response.setContentType("application/x-zip-compressed");
			} 
			
			else if (fileType.trim().equalsIgnoreCase("rtf")) {
				logger.info("File Type in rtf: " + fileType);
				response.setContentType("application/rtf");
			} 
			else if (fileType.trim().equalsIgnoreCase("csv")) {
				logger.info("File Type in csv: " + fileType);
				response.setContentType("text/comma-separated-values");
			} 
			else if (fileType.trim().equalsIgnoreCase("pptx")) {
				logger.info("File Type in pptx: " + fileType);
				response.setContentType("application/mspowerpoint");
			} 
			else if (fileType.trim().equalsIgnoreCase("ppt")) {
				logger.info("File Type in ppt: " + fileType);
				response.setContentType("application/mspowerpoint");
			} 
			else if (fileType.trim().equalsIgnoreCase("tif")) {
				logger.info("File Type in tif: " + fileType);
				response.setContentType("image/tif");
			} 
			else {
				logger.info("File Type in default: " + fileType);
				response.setContentType("application/octet-stream");
			}
			response.setHeader("Content-Disposition", "attachment;fileName="
					+ fileName);
			UploadDocument.downloadFile(request, response, downloadPath);

		}
		return null;
	}

}