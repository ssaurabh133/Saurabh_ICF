/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.cm.vo.ClosureVO;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.CpInsuranceVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.mysql.jdbc.Connection;


/**
 * MyEclipse Struts Creation date: 04-07-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class CpInsuranceBehindAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(CpInsuranceBehindAction.class.getName());
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward cpInsuranceBehind(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		logger.info("In CpInsuranceBehindAction(cpInsuranceBehind) ");
		

		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String bDate="";
		
		if(userobj!=null)
		{
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in cpInsuranceBehind method of CpInsuranceBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		CreditProcessingDAO creditProcessing=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+creditProcessing.getClass()); 			
		
		Object sessionId = session.getAttribute("sessionID");
		
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		
		CpInsuranceVo vo=new CpInsuranceVo();
		DynaValidatorForm cpInsuranceFormBean=(DynaValidatorForm )form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, cpInsuranceFormBean);
		logger.info("Form name is......................="+cpInsuranceFormBean);
		
		String dealId = "";
		String dealloanId = "";
		int d =0;
		Boolean b= false;
		
		
		String ids=CommonFunction.checkNull(request.getParameter("ids"));		
		String[] cus=ids.split("\\|");	

		String propertyType=CommonFunction.checkNull(request.getParameter("propertyType"));	
		
		String insuranceProvider=request.getParameter("insuranceProvider");
		String sumAssured=request.getParameter("sumAssured");
		String tenure=request.getParameter("tenure");
		String age=request.getParameter("age");
		String insurancePremium=request.getParameter("insurancePremium");
		String chargesOnInsurance=request.getParameter("chargesOnInsurance");
		String insuranceProduct=CommonFunction.checkNull(request.getParameter("insuranceProduct"));
		if(insuranceProduct.contains("|"))		// for removing service called from insurance product
		{
			insuranceProduct=insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
		}
		String policyType=request.getParameter("policyType");
		String premiumFinanced=request.getParameter("premiumFinanced");
		String policyTenure=request.getParameter("policyTenure");
		vo.setPolicyTenure(policyTenure);
		vo.setPropertyType(propertyType);
		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		logger.info("In CpInsuranceBehindAction(cpInsuranceBehind) dealid " + dealId);
		ArrayList dealHeader = creditProcessing.getDealHeader(dealId);
		session.setAttribute("dealHeader", dealHeader);
			
		ArrayList list1 = creditProcessing.getInsuranceProviders();
		request.setAttribute("InsuranceProviders", list1);
		
		ArrayList insuranceProducts = creditProcessing.getInsuranceProducts(insuranceProvider);
		request.setAttribute("insuranceProducts", insuranceProducts);
		
		ArrayList list2 = creditProcessing.getpolicyTypes();
		request.setAttribute("policyTypes", list2);
		
		 ArrayList customerDetailList=creditProcessing.getCustomerDetailList(vo, dealId);
		 request.setAttribute("customerDetailList",customerDetailList);
		 request.setAttribute("listSize",((CpInsuranceVo) customerDetailList.get(0)).getTotalRecordSize());
		ArrayList list = creditProcessing.getInsuranceData(dealId);
		ArrayList allInsuranceData = creditProcessing.getAllInsuranceData(vo, dealId);
		
		ArrayList list4 = creditProcessing.getSaveInsuranceData(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced,dealId);
		request.setAttribute("saveInsuranceData", list4);
		request.setAttribute("saveInsuranceDataDelete", "saveInsuranceDataDelete");
		
		
		 ArrayList relation=creditProcessing.getRelation(vo, dealId);
		 request.setAttribute("relationshps",relation);
		 
		 ArrayList property=creditProcessing.getPropertyType(vo, dealId);
		 request.setAttribute("propertyTypes",property);
		
		CpInsuranceVo tempVo = new CpInsuranceVo();
		if(allInsuranceData.size() > 0)
		{
			request.setAttribute("allInsuranceData", allInsuranceData);
			tempVo = (CpInsuranceVo) allInsuranceData.get(0);
			insuranceProvider = tempVo.getInsuranceProvider();
			sumAssured = tempVo.getSumAssured();
			tenure = tempVo.getTenure();
			age = tempVo.getAge();
		}
		else
			request.setAttribute("allInsuranceData", list);
		
		
		Map map = creditProcessing.calculateCpInsurance(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced);
		ArrayList list3 = new ArrayList();
		if(map.size()>0)
		{
		Map map1 = (Map)map.get("map");
		String calcMethod = CommonFunction.checkNull(map.get("calcMethod"));
		 d =0;
		 b= false;
		if(policyType.equalsIgnoreCase("J") && calcMethod.equalsIgnoreCase("S") )
		{
			b = (Boolean)map.get("b");
			d = (Integer)map.get("totalvalue");
		}
		
		CpInsuranceVo vo1= (CpInsuranceVo)map1.get("vo");
		if(b)
			vo1.setInsurancePremium(CommonFunction.checkNull(d));
		else
		{
			vo1.setInsurancePremium("");
			vo1.setOtherChargeId("");
			vo1.setChargesOnInsurance("");
			vo1.setLbxOtherChargeId("");
		}
		
		String assetFlag = CommonFunction.checkNull(ConnectionDAO.singleReturn(" SELECT P.ASSET_FLAG FROM CR_DEAL_LOAN_DTL  D JOIN CR_PRODUCT_M P ON D.DEAL_PRODUCT = P.PRODUCT_ID WHERE DEAL_ID = '"+dealId+"' LIMIT 1 "));
		request.setAttribute("assetFlag", assetFlag);
		list3.add(vo1);
		}
		request.setAttribute("calculate", list3);
		
		tempVo=null;
		return mapping.findForward("success");
		
	}
	
	
	public ActionForward saveCpInsurance(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String bDate="";
		String makerId="";
		String makerDate="";
		if(userobj!=null)
		{
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in saveCpInsurance method of saveCpInsurance action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		
		CpInsuranceVo vo=new CpInsuranceVo();
		DynaValidatorForm cpInsuranceFormBean=(DynaValidatorForm )form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, cpInsuranceFormBean);
		
		
		 if(userobj != null)
			{
				makerId=userobj.getUserId();
				makerDate=userobj.getBusinessdate();
				
			}
		 vo.setMakerId(makerId);
		 vo.setMakerDate(makerDate);
		
		 	String ids=CommonFunction.checkNull(request.getParameter("ids"));		
			String cus=ids.replace("/","|");
			vo.setCustId(cus);	
			int sumFromVo=0;
			int premi=0;
		String dealId = "";
		//String insuranceProduct=request.getParameter("insuranceProduct");
		String insuranceProvider=request.getParameter("insuranceProvider");
		int insurancePro=Integer.parseInt(insuranceProvider);
		String sumAssured=request.getParameter("sumAssured");
		String tenure=request.getParameter("tenure");
		String age=request.getParameter("age");
		String insurancePremium=request.getParameter("insurancePremium");
		String chargesOnInsurance=request.getParameter("chargesOnInsurance");
		String insuranceProduct=CommonFunction.checkNull(request.getParameter("insuranceProduct"));
		if(insuranceProduct.contains("|"))		// for removing service called from insurance product
		{
			insuranceProduct=insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
		}
		logger.info("insuranceProduct: "+insuranceProduct);
		String policyType=request.getParameter("policyType");
		logger.info("policyType:::"+policyType);
		String nomineeName=request.getParameter("nomineeName");
		String dateOfbirth=request.getParameter("dateOfbirth");
		String gender=request.getParameter("gender");
		String relationshp=request.getParameter("relationshp");
		String policyTenure=request.getParameter("policyTenure");
		String sms1=CommonFunction.checkNull(request.getParameter("sms1"));
		logger.info("sms1:::::::::"+sms1);
		vo.setPolicyTenure(policyTenure);
		String sms = "";
		//logger.info("ids::::"+ids[1]);
		String premiumFinanced=request.getParameter("premiumFinanced");
		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		logger.info("In saveCpInsurance() dealid " + dealId);
		vo.setDealid(dealId);
		boolean status = false;
		boolean status1 = false;
		CreditProcessingDAO saveCpInsurance=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+saveCpInsurance.getClass());
        Map map = saveCpInsurance.calculateCpInsurance(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced);
    	ArrayList list5 = new ArrayList();
        if(map.size()>0)
		{
		Map map1 = (Map)map.get("map");
		String calcMethod = CommonFunction.checkNull(map.get("calcMethod"));
		int d =0;
		Boolean b= false;
		if(policyType.equalsIgnoreCase("J") && calcMethod.equalsIgnoreCase("S") )
		{
			b = (Boolean)map.get("b");
			d = (Integer)map.get("totalvalue");
		}
		
		CpInsuranceVo vo1= (CpInsuranceVo)map1.get("vo");
		if(b)
			vo1.setInsurancePremium(CommonFunction.checkNull(d));
		else
		{
			vo1.setInsurancePremium("");
			vo1.setOtherChargeId("");
			vo1.setChargesOnInsurance("");
			vo1.setLbxOtherChargeId("");
		}
	
		list5.add(vo1);
		}
		request.setAttribute("calculate", list5);
		sumAssured=CommonFunction.checkNull(vo.getSumAssured());
		if(sumAssured=="")
		{
			sumFromVo=0;
		}
		else
		{
			sumFromVo=Integer.parseInt(sumAssured);
		}
		insurancePremium=CommonFunction.checkNull(vo.getInsurancePremium());
		if(insurancePremium=="")
		{
			premi=0;
		}
		else
		{
			premi=Integer.parseInt(insurancePremium);
		}
		logger.info("insurancePremium aman test::"+insurancePremium);
		String insuranceCount=ConnectionDAO.singleReturn("select count(1) from cr_insurance_dtl where deal_id='"+dealId+"' and policy_type='S'");
		int count=Integer.parseInt(insuranceCount);
		logger.info("total no of insurance captured for the deal_id: "+dealId+" is:"+count);
		String insProduct=ConnectionDAO.singleReturn("select ifnull(charge_id,0) from cr_insurance_dtl where deal_id='"+dealId+"' and policy_type='S'");
		//int insurProduct=Integer.parseInt(insProduct);
		//logger.info("Insurance Product is: "+insProduct);
		
			
		/*	if(insProduct==insuranceProvider){*/
		//sumFromVo=Integer.parseInt(sumAssured);
		String insuId = saveCpInsurance.getinsuId(vo,dealId);
		String InsFlag=CommonFunction.checkNull(request.getParameter("insFlag"));
		
	
		int insuranceUpdateId = saveCpInsurance.insuranceUpdateId(vo,dealId);
		
		logger.info("sumAssured:;;1111"+sumAssured);
		int sum_assure1 = saveCpInsurance.getDealSumInsuranceAmount(vo,dealId);
		int sumAssureDealLoan1 = saveCpInsurance.getsumAssureDealLoan1(vo,dealId);
		
		int assetCost = saveCpInsurance.getAssetCost(vo,dealId);
		
		String collateralCost = CommonFunction.checkNull(ConnectionDAO.singleReturn(" SELECT sum(c.ASSET_COLLATERAL_VALUE) from cr_asset_collateral_m c left join cr_deal_collateral_m d on c.ASSET_ID=d.ASSETID left join cr_asset_invoice_dtl e on e.ASSET_ID=c.ASSET_ID where d.DEAL_ID='"+dealId+"' group by d.DEAL_ID "));
		//logger.info("collateralCost is::"+collateralCost);
		//int collateralAmount=0;
		Double collateralValue=0.00;
		if(collateralCost=="")
		{
			collateralValue=0.00;
		}
		else
		{
			collateralValue=Double.parseDouble(collateralCost);
		}
		//Double collateralValue=Double.parseDouble(collateralCost);
		logger.info("collateralCost::"+collateralValue);
		
		
		String assetFlag = CommonFunction.checkNull(ConnectionDAO.singleReturn(" SELECT P.ASSET_FLAG FROM CR_DEAL_LOAN_DTL  D JOIN CR_PRODUCT_M P ON D.DEAL_PRODUCT = P.PRODUCT_ID WHERE DEAL_ID = '"+dealId+"' LIMIT 1 "));
		logger.info("assetFlag::"+assetFlag);
		if(CommonFunction.checkNull(assetFlag).equalsIgnoreCase("A")){
		if(CommonFunction.checkNull(insuId).equalsIgnoreCase(""))
		{
		/*if(sumAssureDealLoan1>=(sum_assure1+sumFromVo))
		{*/
			 if(assetCost>=(premi+sumAssureDealLoan1)){
		status = saveCpInsurance.insertCpInsurance(vo,dealId);
		if(status){
		status1= saveCpInsurance.updateDealLoan(vo,dealId);
		}
		if (status) {
			sms = "S";
		} else {
			
			sms = "E";
		}
		
		request.setAttribute("sms", sms);
		}
		else{
			
				sms = "assetPremium";
				request.setAttribute("sms", sms);
					
		}
			
		/*}
		else
		{
			sms = "totNotmatch";
			request.setAttribute("sms", sms);
		}*/
		}
		else if(InsFlag.equalsIgnoreCase("true"))
		{
			/*if(sumAssureDealLoan1>=sumFromVo)
			{*/
				if(insuranceUpdateId==0)
				{
				 if(assetCost>=(premi+sumAssureDealLoan1)){
		status = saveCpInsurance.insertCpInsurance(vo,dealId);
			if(status){
				status1= saveCpInsurance.updateDealLoan(vo,dealId);
				}
		
		if (status) {
			sms = "S";
		} else {
				
			sms = "E";
		}
		
		request.setAttribute("sms", sms);
			}
				 else{
						sms = "assetPremium";
						request.setAttribute("sms", sms);
					}
			}
				else{
					status = saveCpInsurance.insertCpInsurance(vo,dealId);
					if(status){
						status1= saveCpInsurance.updateDealLoan(vo,dealId);
						}
				
					if (status) {
						sms = "S";
					} else {
						
						sms = "E";
					}
					
					request.setAttribute("sms", sms);
					
				}
			/*}
			else
			{
				sms = "totNotmatch";
				request.setAttribute("sms", sms);
			}*/
		}
		else
		{
			sms = "combiExist";
			request.setAttribute("sms", sms);
		}
	}
		
		//Code added by saurabh
		if(CommonFunction.checkNull(assetFlag).equalsIgnoreCase("N")){
			if(CommonFunction.checkNull(insuId).equalsIgnoreCase(""))
			{
			/*if(sumAssureDealLoan1>=(sum_assure1+sumFromVo))
			{*/
				 if(collateralValue==0.00 || (collateralValue>=(premi+sumAssureDealLoan1))){
			status = saveCpInsurance.insertCpInsurance(vo,dealId);
			if(status){
			status1= saveCpInsurance.updateDealLoan(vo,dealId);
			}
			if (status) {
				sms = "S";
			} else {
				
				sms = "E";
			}
			
			request.setAttribute("sms", sms);
			}
			else{
				
					sms = "assetPremium";
					request.setAttribute("sms", sms);
				
				
			}
				
			/*}
			else
			{
				sms = "totNotmatch";
				request.setAttribute("sms", sms);
			}*/
			}
			else if(InsFlag.equalsIgnoreCase("true"))
			{
				/*if(sumAssureDealLoan1>=sumFromVo)
				{*/
					if(insuranceUpdateId==0)
					{
						if(collateralValue==0.00 ||(collateralValue>=(premi+sumAssureDealLoan1))){
			status = saveCpInsurance.insertCpInsurance(vo,dealId);
				if(status){
					status1= saveCpInsurance.updateDealLoan(vo,dealId);
					}
			
			if (status) {
				sms = "S";
			} else {
					
				sms = "E";
			}
			
			request.setAttribute("sms", sms);
				}
					 else{
							sms = "assetPremium";
							request.setAttribute("sms", sms);
						}
				}
					else{
						status = saveCpInsurance.insertCpInsurance(vo,dealId);
						if(status){
							status1= saveCpInsurance.updateDealLoan(vo,dealId);
							}
					
						if (status) {
							sms = "S";
						} else {
							
							sms = "E";
						}
						
						request.setAttribute("sms", sms);
						
					}
				/*}
				else
				{
					sms = "totNotmatch";
					request.setAttribute("sms", sms);
				}*/
			}
			else
			{
				sms = "combiExist";
				request.setAttribute("sms", sms);
			}
		}
			//}
		//code end by saurabh
		/*else
		{
			sms = "combiExist";
			request.setAttribute("sms", sms);
		}*/
			//request.setAttribute("sms", sms);
	
		 
		request.setAttribute("sms", sms);
		
	
		/*ArrayList list2 = saveCpInsurance.getInsuranceData(dealId);
		request.setAttribute("allInsuranceData", list2);*/
		
		ArrayList list1 = saveCpInsurance.getInsuranceProviders();
		request.setAttribute("InsuranceProviders", list1);
		ArrayList insuranceProducts = saveCpInsurance.getInsuranceProducts(insuranceProvider);
		request.setAttribute("insuranceProducts", insuranceProducts);
		
		ArrayList list3 = saveCpInsurance.getpolicyTypes();
		request.setAttribute("policyTypes", list3);
		
		
		ArrayList relation=saveCpInsurance.getRelation(vo, dealId);
		 request.setAttribute("relationshps",relation);
		 ArrayList property=saveCpInsurance.getPropertyType(vo, dealId);
		 request.setAttribute("propertyTypes",property);
		 ArrayList customerDetailList=saveCpInsurance.getCustomerDetailList(vo, dealId);
		 request.setAttribute("customerDetailList",customerDetailList);
		 request.setAttribute("listSize",((CpInsuranceVo) customerDetailList.get(0)).getTotalRecordSize());
		 ArrayList list4 = saveCpInsurance.getSaveInsuranceData(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced,dealId);
			request.setAttribute("saveInsuranceData", list4);
			request.setAttribute("saveInsuranceDataDelete", "saveInsuranceDataDelete");
			
			ArrayList list = saveCpInsurance.getInsuranceData(dealId);
			ArrayList allInsuranceData = saveCpInsurance.getAllInsuranceData(vo, dealId);
			CpInsuranceVo tempVo = new CpInsuranceVo();
			if(allInsuranceData.size() > 0)
			{
				request.setAttribute("allInsuranceData", allInsuranceData);
				tempVo = (CpInsuranceVo) allInsuranceData.get(0);
				insuranceProvider = tempVo.getInsuranceProvider();
				sumAssured = tempVo.getSumAssured();
				tenure = tempVo.getTenure();
				//age = tempVo.getAge();
			}
			else
				request.setAttribute("allInsuranceData", list);
		return mapping.findForward("success");
	}
	
	
	public ActionForward calculateCpInsurance(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		HttpSession session = request.getSession();
		boolean flag=false;
		boolean status=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String bDate="";
		String userId="";
		if(userobj!=null)
		{
				bDate=userobj.getBusinessdate();
				userId=userobj.getUserId();		
		}else{
			logger.info("here in calculateCpInsurance method of calculateCpInsurance action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String dealId = "";
		
		String insurancePremium="";
		String otherChargeId="";
		String chargesOnInsurance="";
		String lbxOtherChargeId="";
		String calcMethod="";
		CpInsuranceVo vo=new CpInsuranceVo();
		String insuranceProvider=CommonFunction.checkNull(request.getParameter("insuranceProvider"));
		String sumAssured=CommonFunction.checkNull(request.getParameter("sumAssured"));
		String tenure=CommonFunction.checkNull(request.getParameter("tenure"));
		String age=CommonFunction.checkNull(request.getParameter("age"));
		String insuranceProduct=CommonFunction.checkNull(request.getParameter("insuranceProduct"));
		if(insuranceProduct.contains("|"))		// for removing service called from insurance product
		{
			insuranceProduct=insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
		}
		String policyType=CommonFunction.checkNull(request.getParameter("policyType"));
		String premiumFinanced=CommonFunction.checkNull(request.getParameter("premiumFinanced"));
		String policyTenure=CommonFunction.checkNull(request.getParameter("policyTenure"));
		vo.setPolicyTenure(policyTenure);
		String propertyType=CommonFunction.checkNull(request.getParameter("propertyType"));
		vo.setPropertyType(propertyType);
		String ids=CommonFunction.checkNull(request.getParameter("ids"));		
		String cus=ids.replace("/","|");
		vo.setCustId(cus);
		vo.setMakerDate(bDate);
		vo.setMakerId(userId);
		 String sms = "";
		
	logger.info("insuranceProduct:::aman:::"+insuranceProduct);
		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		vo.setDealid(dealId);
		
			CreditProcessingDAO calc=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
			logger.info("Implementation class: "+calc.getClass()); 			
			
			
			Map map = calc.calculateCpInsurance(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced);
			 if(map.size()>0)
				{
			Map map1 = (Map)map.get("map");
			if(policyType.equalsIgnoreCase("J"))
			 calcMethod = CommonFunction.checkNull(map1.get("calcMethod"));
			CpInsuranceVo vo1= (CpInsuranceVo)map1.get("vo");
			insurancePremium=CommonFunction.checkNull(vo1.getInsurancePremium());
			if((!insurancePremium.contains("E01"))&&(!insurancePremium.toUpperCase().contains("ERROR")))
			{
			
			int d =0;
			Boolean b= false;
			if(calcMethod.equalsIgnoreCase("S"))
			{
				b = (Boolean)map.get("b");
				d = (Integer)map.get("totalValue");
			
			
			
			if(b)
				vo1.setInsurancePremium(CommonFunction.checkNull(d));
			else
			{
				vo1.setInsurancePremium("");
				vo1.setOtherChargeId("");
				vo1.setChargesOnInsurance("");
				vo1.setLbxOtherChargeId("");
			}
			}
			//---------------
			 insurancePremium=vo1.getInsurancePremium();
			 otherChargeId=vo1.getOtherChargeId();
			 chargesOnInsurance=vo1.getChargesOnInsurance();
			 lbxOtherChargeId=vo1.getLbxOtherChargeId();
			
			//---------------
			ArrayList list = new ArrayList();
			list.add(vo1);
			request.setAttribute("calculate", list);
			 sms = "saveCal";
			  request.setAttribute("sms", sms);
			  logger.info("aman sms::"+sms);
				}
			 else
			 {
				 sms = insurancePremium;
				  request.setAttribute("sms", sms);
			 }
				}
			 else
			 {
				  sms = "notCal";
				  request.setAttribute("sms", sms);
			 }
			
			
			ArrayList list2 = calc.getInsuranceData(dealId);
			request.setAttribute("allInsuranceData", list2);
			
			ArrayList list1 = calc.getInsuranceProviders();
			request.setAttribute("InsuranceProviders", list1);
			
			ArrayList allInsuranceData = calc.getAllInsuranceData(vo, dealId);
			request.setAttribute("source", "Y");
			ArrayList insuranceProducts = calc.getInsuranceProducts(insuranceProvider);
			request.setAttribute("insuranceProducts", insuranceProducts);
			
			ArrayList list3 = calc.getpolicyTypes();
			request.setAttribute("policyTypes", list3);
			
			 ArrayList customerDetailList=calc.getCustomerDetailList(vo, dealId);
			 request.setAttribute("customerDetailList",customerDetailList);
			 
			 ArrayList relation=calc.getRelation(vo, dealId);
			 request.setAttribute("relationshps",relation);
			 ArrayList property=calc.getPropertyType(vo, dealId);
			 request.setAttribute("propertyTypes",property);
			 ArrayList list4 = calc.getSaveInsuranceData(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced,dealId);
				request.setAttribute("saveInsuranceData", list4);
				request.setAttribute("saveInsuranceDataDelete", "saveInsuranceDataDelete");
				
				//----------
				PrintWriter out=response.getWriter();
			    out.print(insurancePremium+"$:"+otherChargeId+"$:"+chargesOnInsurance+"$:"+lbxOtherChargeId+"$:"+sms+"$:");
				
		return null;//mapping.findForward("success111");
	}

	public ActionForward viewCpInsuranceBehind(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		logger.info("In viewCpInsuranceBehind(cpInsuranceBehind) ");
		

		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String bDate="";
		
		if(userobj!=null)
		{
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in viewCpInsuranceBehind method of CpInsuranceBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		CreditProcessingDAO creditProcessing=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+creditProcessing.getClass()); 			
		
		Object sessionId = session.getAttribute("sessionID");
		
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String dealId = "";
		String dealloanId = "";
		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		CpInsuranceVo vo=new CpInsuranceVo();
		String insuranceProvider=request.getParameter("insuranceProvider");
		String sumAssured=request.getParameter("sumAssured");
		String tenure=request.getParameter("tenure");
		String age=request.getParameter("age");
		String otherChargeId=request.getParameter("otherChargeId");
		String insurancePremium=request.getParameter("insurancePremium");
		String chargesOnInsurance=request.getParameter("chargesOnInsurance");
		String insuranceProduct=CommonFunction.checkNull(request.getParameter("insuranceProduct"));
		if(insuranceProduct.contains("|"))		// for removing service called from insurance product
		{
			insuranceProduct=insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
		}
		String policyType=request.getParameter("policyType");
		String premiumFinanced=request.getParameter("premiumFinanced");
		ArrayList dealHeader = creditProcessing.getDealHeader(dealId);
		session.setAttribute("dealHeader", dealHeader);
		
		/*ArrayList list1 = creditProcessing.getInsuranceProviders();
		request.setAttribute("InsuranceProviders", list1);
		CpInsuranceVo vo1  = (CpInsuranceVo)list1.get(0);

        ArrayList insuranceProducts = creditProcessing.getInsuranceProducts(vo1.getChargeId()); */
		
		/*ArrayList list2 = creditProcessing.getpolicyTypes();
		request.setAttribute("policyTypes", list2);*/
		
		 ArrayList customerDetailList=creditProcessing.getCustomerDetailList(vo, dealId);
		 request.setAttribute("customerDetailList",customerDetailList);
		 
		 
		 ArrayList list4 = creditProcessing.getSaveInsuranceData(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced,dealId);
			request.setAttribute("saveInsuranceData", list4);
			
			/*ArrayList relation=creditProcessing.getRelation(vo, dealId);
			 request.setAttribute("relationshps",relation);*/
			 
			
		 
			//ArrayList viewmode = creditProcessing.getViewInsurance(vo,dealId);
			request.setAttribute("viewmode", "viewmode");
		
				return mapping.findForward("success");
		
	}
	
	
	
	public ActionForward deleteCpInsurance(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String bDate="";
		String makerId="";
		String makerDate="";
		if(userobj!=null)
		{
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in deleteCpInsurance method of deleteCpInsurance action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		
		CpInsuranceVo vo=new CpInsuranceVo();
		
		 if(userobj != null)
			{
				makerId=userobj.getUserId();
				makerDate=userobj.getBusinessdate();
				
			}
		 vo.setMakerId(makerId);
		 vo.setMakerDate(makerDate);
		
		
		String dealId = "";
		String insuranceProvider=request.getParameter("insuranceProvider");
		String sumAssured=request.getParameter("sumAssured");
		String tenure=request.getParameter("tenure");
		String age=request.getParameter("age");
		String insurancePremium=request.getParameter("insurancePremium");
		String chargesOnInsurance=request.getParameter("chargesOnInsurance");
		String ids=CommonFunction.checkNull(request.getParameter("ids"));		
		String insuranceId=ids.replace("/","|");
		vo.setInsuranceId(insuranceId);	
		String insuranceProduct=CommonFunction.checkNull(request.getParameter("insuranceProduct"));
		if(insuranceProduct.contains("|"))		// for removing service called from insurance product
		{
			insuranceProduct=insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
		}
		String policyType=request.getParameter("policyType");
		String premiumFinanced=request.getParameter("premiumFinanced");
		
		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		logger.info("In deleteCpInsurance() dealid " + dealId);
		
		
		
		boolean status = false;
		boolean status1 = false;
		CreditProcessingDAO deleteCpInsurance=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+deleteCpInsurance.getClass());
        
        
        ArrayList list1 = deleteCpInsurance.getInsuranceProviders();
		request.setAttribute("InsuranceProviders", list1);
		
		ArrayList list2 = deleteCpInsurance.getpolicyTypes();
		request.setAttribute("policyTypes", list2);
		
		ArrayList insuranceProducts = deleteCpInsurance.getInsuranceProducts(insuranceProvider);
		request.setAttribute("insuranceProducts", insuranceProducts);
		
		
		
		 ArrayList customerDetailList=deleteCpInsurance.getCustomerDetailList(vo, dealId);
		 request.setAttribute("customerDetailList",customerDetailList);
		 
		 ArrayList relation=deleteCpInsurance.getRelation(vo, dealId);
		 request.setAttribute("relationshps",relation);
		 ArrayList property=deleteCpInsurance.getPropertyType(vo, dealId);
		 request.setAttribute("propertyTypes",property);
		
			request.setAttribute("saveInsuranceDataDelete", "saveInsuranceDataDelete");
		
        
     
		
		status = deleteCpInsurance.deleteCpInsurance(vo,dealId);
		if(status){
			status1= deleteCpInsurance.updateDealLoan(vo,dealId);
			}
		String delete = "";
		if (status) {
			delete = "S";
		} else {
			delete = "E";
		}
		 
		request.setAttribute("delete", delete);
		ArrayList list4 = deleteCpInsurance.getSaveInsuranceData(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced,dealId);
		request.setAttribute("saveInsuranceData", list4);
		
		ArrayList list = deleteCpInsurance.getInsuranceData(dealId);
		ArrayList allInsuranceData = deleteCpInsurance.getAllInsuranceData(vo, dealId);
		CpInsuranceVo tempVo = new CpInsuranceVo();
		if(allInsuranceData.size() > 0)
		{
			request.setAttribute("allInsuranceData", allInsuranceData);
			tempVo = (CpInsuranceVo) allInsuranceData.get(0);
			insuranceProvider = tempVo.getInsuranceProvider();
			sumAssured = tempVo.getSumAssured();
			tenure = tempVo.getTenure();
			age = tempVo.getAge();
		}
		else
			request.setAttribute("allInsuranceData", list);
		
		tempVo=null;
        
     
		
		return mapping.findForward("success");
	}
	
	
	public ActionForward getInsuranceProduct(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	throws Exception {
logger.info("In getCustomerConstition.............................. ");
		
	  	boolean flag =false;
	    HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
	    String userId="";
		String bgDate="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bgDate=userobj.getBusinessdate();
		}else{
			logger.info("here in getInsuranceProduct method of action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		
		
		String dealId = "";
		String insuranceProvider=request.getParameter("insuranceProvider");
		String sumAssured=request.getParameter("sumAssured");
		String tenure=request.getParameter("tenure");
		String age=request.getParameter("age");
		String insurancePremium=request.getParameter("insurancePremium");
		String chargesOnInsurance=request.getParameter("chargesOnInsurance");
		String insuranceProduct=CommonFunction.checkNull(request.getParameter("insuranceProduct"));
		if(insuranceProduct.contains("|"))		// for removing service called from insurance product
		{
			insuranceProduct=insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
		}
		String policyType=request.getParameter("policyType");
		String premiumFinanced=request.getParameter("premiumFinanced");
		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		logger.info("In CpInsuranceBehindAction(cpInsuranceBehind) dealid " + dealId);
		CpInsuranceVo vo=new CpInsuranceVo();
		CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 	// changed by asesh
		
		/*ArrayList list = dao.calculateCpInsurance(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced);
		request.setAttribute("calculate", list);*/
		
		ArrayList list2 = dao.getInsuranceData(dealId);
		request.setAttribute("allInsuranceData", list2);
		
		ArrayList list1 = dao.getInsuranceProviders();
		request.setAttribute("InsuranceProviders", list1);
		
		ArrayList allInsuranceData = dao.getAllInsuranceData(vo, dealId);
		request.setAttribute("source", "Y");
		
		ArrayList list3 = dao.getpolicyTypes();
		request.setAttribute("policyTypes", list3);
		 
		 ArrayList insuranceProducts=null;
		 insuranceProducts = dao.getInsuranceProducts(insuranceProvider);
			request.setAttribute("insuranceProducts", insuranceProducts);
		  
		return mapping.findForward("insuranceProductSuccess");	
	}
	
	
	public ActionForward editInsuranceDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	throws Exception {
logger.info("In editInsuranceDetails.............................. ");
		
	  	boolean flag =false;
	    HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
	    String userId="";
		String bgDate="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bgDate=userobj.getBusinessdate();
		}else{
			logger.info("here in editInsuranceDetails method of action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		
		
		String dealId = "";
		String insuranceProvider=request.getParameter("insuranceProvider");
		String sumAssured=request.getParameter("sumAssured");
		String tenure=request.getParameter("tenure");
		String age=request.getParameter("age");
		String insurancePremium=request.getParameter("insurancePremium");
		String chargesOnInsurance=request.getParameter("chargesOnInsurance");
		String insuranceProduct=CommonFunction.checkNull(request.getParameter("insuranceProduct"));
		if(insuranceProduct.contains("|"))		// for removing service called from insurance product
		{
			insuranceProduct=insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
		}
		String policyType=request.getParameter("policyType");
		String premiumFinanced=request.getParameter("premiumFinanced");
		
		String insuranceId=CommonFunction.checkNull(request.getParameter("insuranceId"));	
		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		logger.info("In CpInsuranceBehindAction(cpInsuranceBehind) dealid " + dealId);
		CpInsuranceVo vo=new CpInsuranceVo();
		CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 	// changed by asesh
		vo.setInsuranceId(insuranceId);
		
		
		ArrayList list2 = dao.getInsuranceData(dealId);
		request.setAttribute("allInsuranceData", list2);
		
		
		
		ArrayList allInsuranceData = dao.getAllInsuranceData(vo, dealId);
		request.setAttribute("source", "Y");
		
		ArrayList list3 = dao.getpolicyTypes();
		request.setAttribute("policyTypes", list3);
		 
		 ArrayList insuranceProducts=null;
		 ArrayList list1 = dao.getInsuranceProviders();
			request.setAttribute("InsuranceProviders", list1);
			CpInsuranceVo vo1  = (CpInsuranceVo)list1.get(0);

	     insuranceProducts = dao.getInsuranceProducts(vo1.getChargeId()); 
		 
			request.setAttribute("insuranceProducts", insuranceProducts);
			
			 ArrayList customerDetailList=dao.getCustomerDetailList(vo, dealId);
			 request.setAttribute("customerDetailList",customerDetailList);
			 
			 ArrayList relation=dao.getRelation(vo, dealId);
			 request.setAttribute("relationshps",relation);
			 ArrayList property=dao.getPropertyType(vo, dealId);
			 request.setAttribute("propertyTypes",property);
			 ArrayList list4 = dao.getSaveInsuranceData(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced,dealId);
				request.setAttribute("saveInsuranceData", list4);
		  
			ArrayList viewList = dao.getViewInsurance(vo,dealId);
			logger.info("Pooja ------->>"+((CpInsuranceVo)viewList.get(0)).getSaddressType1().toString());
			request.setAttribute("viewmode", "viewmode");
			request.setAttribute("viewList", viewList);
			
		return mapping.findForward("viewList");	
	}
	
	
	
	public ActionForward relodInsuranceData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	throws Exception {
logger.info("In editInsuranceDetails.............................. ");
		
	  	boolean flag =false;
	    HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
	    String userId="";
		String bgDate="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bgDate=userobj.getBusinessdate();
		}else{
			logger.info("here in relodInsuranceData method of action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		
		
		String dealId = "";
		String insuranceProvider=request.getParameter("insuranceProvider");
		String sumAssured=request.getParameter("sumAssured");
		String tenure=request.getParameter("tenure");
		String age=request.getParameter("age");
		String insurancePremium=request.getParameter("insurancePremium");
		String chargesOnInsurance=request.getParameter("chargesOnInsurance");
		String insuranceProduct=CommonFunction.checkNull(request.getParameter("insuranceProduct"));
		if(insuranceProduct.contains("|"))		// for removing service called from insurance product
		{
			insuranceProduct=insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
		}
		String policyType=request.getParameter("policyType");
		String premiumFinanced=request.getParameter("premiumFinanced");
		String chargesOnPremium=request.getParameter("chargesOnPremium");
		String otherChargeId=request.getParameter("otherChargeId");
		String	custId =request.getParameter("custId");
		String 	nomineeName=request.getParameter("nomineeName");
		String	dateOfBirth=request.getParameter("dateOfBirth");
		String	gender=request.getParameter("gender");
		String	relationship=request.getParameter("relationship");
		String	policyTenure=request.getParameter("policyTenure");
		String	sumAssuredPerc=request.getParameter("sumAssuredPerc");
		String	propertyType=request.getParameter("propertyType");
		String insuranceProductId=request.getParameter("insuranceProductId");
		String insuranceId=CommonFunction.checkNull(request.getParameter("insuranceId"));	
		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		logger.info("In CpInsuranceBehindAction(cpInsuranceBehind) dealid " + dealId);
		CpInsuranceVo vo=new CpInsuranceVo();
		CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 	// changed by asesh
		vo.setInsuranceId(insuranceId);
		
		
		ArrayList list2 = dao.getInsuranceData(dealId);
		request.setAttribute("allInsuranceData", list2);
		
		
		
		ArrayList allInsuranceData = dao.getAllInsuranceData(vo, dealId);
		request.setAttribute("source", "Y");
		
		ArrayList list3 = dao.getpolicyTypes();
		request.setAttribute("policyTypes", list3);
		 
		 ArrayList insuranceProducts=null;
		 ArrayList list1 = dao.getInsuranceProviders();
			request.setAttribute("InsuranceProviders", list1);
			CpInsuranceVo vo1  = (CpInsuranceVo)list1.get(0);

	     insuranceProducts = dao.getInsuranceProducts(vo1.getChargeId()); 
		 
			request.setAttribute("insuranceProducts", insuranceProducts);
			
			 ArrayList customerDetailList=dao.getCustomerDetailList(vo, dealId);
			 request.setAttribute("customerDetailList",customerDetailList);
			 
			 ArrayList relation=dao.getRelation(vo, dealId);
			 request.setAttribute("relationshps",relation);
			 ArrayList property=dao.getPropertyType(vo, dealId);
			 request.setAttribute("propertyTypes",property);
			 ArrayList list4 = dao.getSaveInsuranceData(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced,dealId);
				request.setAttribute("saveInsuranceData", list4);
			 
			 Map map = dao.calculateCpInsurance(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced);
		    	ArrayList list5 = new ArrayList();
		        if(map.size()>0)
				{
				Map map1 = (Map)map.get("map");
				String calcMethod = CommonFunction.checkNull(map.get("calcMethod"));
				int d =0;
				Boolean b= false;
				if(policyType.equalsIgnoreCase("J") && calcMethod.equalsIgnoreCase("S") )
				{
					b = (Boolean)map.get("b");
					d = (Integer)map.get("totalvalue");
				}
				
				CpInsuranceVo vo3= (CpInsuranceVo)map1.get("vo");
				if(b)
					vo3.setInsurancePremium(CommonFunction.checkNull(d));
				else
				{
					vo3.setInsurancePremium("");
					vo3.setOtherChargeId("");
					vo3.setChargesOnInsurance("");
					vo3.setLbxOtherChargeId("");
				}
			
				list5.add(vo3);
				}
				request.setAttribute("calculate", list5);
			 
			 
			 
			 
			 
			 
				ArrayList reloadList = dao.getReloadInsurance(vo,dealId);
				request.setAttribute("reload", reloadList);
				CpInsuranceVo vo2  = (CpInsuranceVo)reloadList.get(0);
				insuranceProvider=vo2.getInsuranceProvider();
				//insuranceProvider=(String) reloadList.get(0);
				sumAssured=vo2.getSumAssured();
				tenure=vo2.getTenure();
				insurancePremium=vo2.getInsurancePremium();
				chargesOnPremium=vo2.getChargesOnInsurance();
				otherChargeId=vo2.getOtherChargeId();
				policyType=vo2.getPolicyType();
				premiumFinanced=vo2.getPremiumFinanced();
				custId=CommonFunction.checkNull(vo2.getCustId());
				String custList="";
				ArrayList ageCust= new ArrayList();
				custList=custId.replace("|",",");
				char []chars = custList.toCharArray();
				String s1 = "";
				int abc=chars.length-1;
				for(int i = 0; i < chars.length-1; i++)
				{
					s1 += chars[i];
					
	}
				logger.info("s1::"+s1);
	
				insuranceProductId=vo2.getInsuranceProductId();
				nomineeName=vo2.getNomineeName();
				dateOfBirth=vo2.getDateOfbirth();
				gender=vo2.getGender();
				relationship=vo2.getRelationshp();
				policyTenure=vo2.getPolicyTenure();
				sumAssuredPerc=vo2.getSumAssuPer();
				propertyType=vo2.getPropertyType();
				insuranceProduct=vo2.getInsuranceProduct();
				
				String nomineeName1 = vo2.getNomineeName1();
				String gender1=vo2.getGender1();
				String Dob1 = vo2.getDateOfbirth1();
				String relationship1=vo2.getRelationshp1();
				
				String nomineeName2 = vo2.getNomineeName2();
				String gender2=vo2.getGender2();
				String Dob2 = vo2.getDateOfbirth2();
				String relationship2=vo2.getRelationshp2();
				
				String nomineeName3 = vo2.getNomineeName3();
				String gender3=vo2.getGender3();
				String Dob3 = vo2.getDateOfbirth3();
				String relationship3=vo2.getRelationshp3();
				
				String nomineeName4 = vo2.getNomineeName4();
				String gender4=vo2.getGender4();
				String Dob4 = vo2.getDateOfbirth4();
				String relationship4=vo2.getRelationshp4();
				
				String percentage = vo2.getPercentage();
				String percentage1 = vo2.getPercentage1();
				String percentage2 = vo2.getPercentage2();
				String percentage3= vo2.getPercentage3();
				String percentage4 = vo2.getPercentage4();
				
				String addr = vo2.getAddr();
				String addr1 = vo2.getAddr1();
				String addr2 = vo2.getAddr2();
				String addr3 = vo2.getAddr3();
				String addr4 = vo2.getAddr4();
				
				//Saurabh Changes starts here
				String sPrefix = vo2.getsPrefix();
				String nomineeMName = vo2.getNomineeMName();
				String nomineeLName = vo2.getNomineeLName();
				String SmaritalStatus = vo2.getSmaritalStatus();
				String sNomineeArea = vo2.getSnomineeArea();
				String sNomineeCity = vo2.getSnomineeCity();
				String sNomineeState = vo2.getSnomineeState();
				String sNomineePin = vo2.getSnomineePin();
				String sPrefix1 = vo2.getsPrefix1();
				String nomineeMName1 = vo2.getNomineeMName1();
				String nomineeLName1 = vo2.getNomineeLName1();
				String SmaritalStatus1 = vo2.getSmaritalstatus1();
				String sNomineeArea1 = vo2.getsNomineeArea1();				
				String sNomineeCity1 = vo2.getsNomineeCity1();
				String sNomineeState1 = vo2.getsNomineeState1();
				String sNomineePin1 = vo2.getsNomineePin1();
				String sPrefix2 = vo2.getsPrefix2();
				String nomineeMName2 = vo2.getNomineeMName2();
				String nomineeLName2 = vo2.getNomineeLName2();
				String SmaritalStatus2 = vo2.getSmaritalStatus2();
				String sNomineeArea2 = vo2.getsNomineeArea2();
				String sNomineeCity2 = vo2.getsNomineeCity2();
				String sNomineeState2 = vo2.getsNomineeState2();
				String sNomineePin2 = vo2.getsNomineePin2();
				String sPrefix3 = vo2.getsPrefix3();
				String nomineeMName3 = vo2.getNomineeMName3();
				String nomineeLName3 = vo2.getNomineeLName3();
				String SmaritalStatus3 = vo2.getSmaritalStatus3();
				String sNomineeArea3 = vo2.getsNomineeArea3();
				String sNomineeCity3 = vo2.getsNomineeCity3();
				String sNomineeState3 = vo2.getsNomineeState3();
				String sNomineePin3 = vo2.getsNomineePin3();
				String sPrefix4 = vo2.getsPrefix4();
				String nomineeMName4 = vo2.getNomineeMName4();
				String nomineeLName4 = vo2.getNomineeLName4();
				String SmaritalStatus4 = vo2.getSmaritalStatus4();
				String sNomineeArea4 = vo2.getsNomineeArea4();
				String sNomineeCity4 = vo2.getsNomineeCity4();
				String sNomineeState4 = vo2.getsNomineeState4();
				String sNomineePin4 = vo2.getsNomineePin4();
				String saddressType = vo2.getSaddressType();
				String sinsuranceStreet = vo2.getSinsuranceStreet();
				
				String saddressType1 = vo2.getSaddressType1();
				String sinsuranceStreet1 = vo2.getSinsuranceStreet1();
				String saddressType2 = vo2.getSaddressType2();
				String sinsuranceStreet2 = vo2.getSinsuranceStreet2();
				String saddressType3 = vo2.getSaddressType3();
				String sinsuranceStreet3 = vo2.getSinsuranceStreet3();
				String saddressType4 = vo2.getSaddressType4();
				String sinsuranceStreet4 = vo2.getSinsuranceStreet4();
				
				String txtStateCode = vo2.getTxtStateCode();
				String txtStateCode1 = vo2.getTxtStateCode1();
				String txtStateCode2 = vo2.getTxtStateCode2();
				String txtStateCode3 = vo2.getTxtStateCode3();
				String txtStateCode4 = vo2.getTxtStateCode4();
				/*String txtDistCode = vo2.getTxtDistCode();
				String txtDistCode1 = vo2.getTxtDistCode1();
				String txtDistCode2 = vo2.getTxtDistCode2();
				String txtDistCode3 = vo2.getTxtDistCode3();
				String txtDistCode4 = vo2.getTxtDistCode4();
				*/
				//Saurabh Changes ends here
				String assetFlag = CommonFunction.checkNull(ConnectionDAO.singleReturn(" SELECT P.ASSET_FLAG FROM CR_DEAL_LOAN_DTL  D JOIN CR_PRODUCT_M P ON D.DEAL_PRODUCT = P.PRODUCT_ID WHERE DEAL_ID = '"+dealId+"' LIMIT 1 "));
				
				
				StringBuffer buffer =  new StringBuffer();
				buffer.append("<select id = insuranceProduct class=text name=insuranceProduct>");
				buffer.append("<option value="+insuranceProductId+">"+insuranceProduct+"</option>");
				buffer.append("</select>");
				buffer.toString();
				//<select id="insuranceProduct" class="text" name="insuranceProduct">
				PrintWriter out=response.getWriter();
	
				/*out.print(insuranceProvider+"$:"+sumAssured+"$:"+tenure+"$:"+insurancePremium+"$:"+chargesOnPremium+"$:"+otherChargeId+"$:"+policyType+"$:"+premiumFinanced+"$:"+custList+"$:"+insuranceProductId+"$:"+nomineeName+"$:"+dateOfBirth+"$:"+gender+"$:"+relationship+"$:"+policyTenure+"$:"+sumAssuredPerc+"$:"+propertyType+"$:"+buffer+"$:"+nomineeName1+"$:"+gender1+"$:"+Dob1+"$:"+relationship1+"$:"+nomineeName2+"$:"+gender2+"$:"+Dob2+"$:"+relationship2+"$:"+nomineeName3+"$:"+gender3+"$:"+Dob3+"$:"+relationship3+"$:"+nomineeName4+"$:"+gender4+"$:"+Dob4+"$:"+relationship4+"$:"+percentage+"$:"+percentage1+"$:"+percentage2+"$:"+percentage3+"$:"+percentage4+"$:"+addr+"$:"+addr1+"$:"+addr2+"$:"+addr3+"$:"+addr4+"$:"+assetFlag+"$:");*/
				out.print(insuranceProvider+"$:"+sumAssured+"$:"+tenure+"$:"+insurancePremium+"$:"+chargesOnPremium+"$:"+otherChargeId+"$:"+policyType+"$:"+premiumFinanced+"$:"+custList+"$:"+insuranceProductId+"$:"+nomineeName+"$:"+dateOfBirth+"$:"+gender+"$:"+relationship+"$:"+policyTenure+"$:"+sumAssuredPerc+"$:"+propertyType+"$:"+buffer+"$:"+nomineeName1+"$:"+gender1+"$:"+Dob1+"$:"+relationship1+"$:"+nomineeName2+"$:"+gender2+"$:"+Dob2+"$:"+relationship2+"$:"+nomineeName3+"$:"+gender3+"$:"+Dob3+"$:"+relationship3+"$:"+nomineeName4+"$:"+gender4+"$:"+Dob4+"$:"+relationship4+"$:"+percentage+"$:"+percentage1+"$:"+percentage2+"$:"+percentage3+"$:"+percentage4+"$:"+addr+"$:"+addr1+"$:"+addr2+"$:"+addr3+"$:"+addr4+"$:"+sPrefix+"$:"+nomineeMName+"$:"+nomineeLName+"$:"+SmaritalStatus+"$:"+sNomineeArea+"$:"+sNomineeCity+"$:"+sNomineeState+"$:"+sNomineePin+"$:"+sPrefix1+"$:"+nomineeMName1+"$:"+nomineeLName1+"$:"+SmaritalStatus1+"$:"+sNomineeArea1+"$:"+sNomineeCity1+"$:"+sNomineeState1+"$:"+sNomineePin1+"$:"+sPrefix2+"$:"+nomineeMName2+"$:"+nomineeLName2+"$:"+SmaritalStatus2+"$:"+sNomineeArea2+"$:"+sNomineeCity2+"$:"+sNomineeState2+"$:"+sNomineePin2+"$:"+sPrefix3+"$:"+nomineeMName3+"$:"+nomineeLName3+"$:"+SmaritalStatus3+"$:"+sNomineeArea3+"$:"+sNomineeCity3+"$:"+sNomineeState3+"$:"+sNomineePin3+"$:"+sPrefix4+"$:"+nomineeMName4+"$:"+nomineeLName4+"$:"+SmaritalStatus4+"$:"+sNomineeArea4+"$:"+sNomineeCity4+"$:"+sNomineeState4+"$:"+sNomineePin4+"$:"+saddressType+"$:"+sinsuranceStreet+"$:"+saddressType1+"$:"+sinsuranceStreet1+"$:"+saddressType2+"$:"+sinsuranceStreet2+"$:"+saddressType3+"$:"+sinsuranceStreet3+"$:"+saddressType4+"$:"+sinsuranceStreet4+"$:"+txtStateCode+"$:"+txtStateCode1+"$:"+txtStateCode2+"$:"+txtStateCode3+"$:"+txtStateCode4+"$:"+assetFlag+"$:");
		
		return null;//mapping.findForward("success111");
	}
	
	
	
	
}
