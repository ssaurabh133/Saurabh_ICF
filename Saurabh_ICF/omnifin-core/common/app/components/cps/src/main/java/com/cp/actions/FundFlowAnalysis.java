package com.cp.actions;

/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
import java.util.ArrayList;
import java.util.logging.Logger;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.login.roleManager.UserObject;


public class FundFlowAnalysis extends Action {
	private static final Logger logger = Logger.getLogger(FundFlowAnalysis.class.getName());
	/*
	 * Generated Methods 
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
			HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			if(userobj==null){
				logger.info("here in execute method of FundFlowAnalysis action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
		 logger.info("in FundFlowAnalysis ................................");
		 String dealId="";
		if(request.getParameter("dealId")!=null)
		{
			logger.info("deal id................................ "+request.getParameter("dealId"));
			logger.info("deal no................................ "+request.getParameter("dealNo"));
			dealId=request.getParameter("dealId");
			session.setAttribute("fundFlowDealId", request.getParameter("dealId"));
			session.setAttribute("fundFlowDealNo", request.getParameter("dealNo"));
			session.setAttribute("customerName", request.getParameter("customerName"));
			
		}
		else
		{
			session.removeAttribute("fundFlowDealId");
			session.removeAttribute("fundFlowDealNo");
			session.removeAttribute("customerName");
		}
		
		
		String status = CommonFunction.checkNull(request.getParameter("status"));
		CreditProcessingDAO creditProcessing=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+creditProcessing.getClass()); 			// changed by asesh
		    //CreditProcessingDAO creditProcessing = new CreditProcessingDAOImpl();
		    if ((dealId != null && !dealId.equals(""))
					&& (status == null || status.equals(""))) {

				ArrayList<Object> leadInfo = creditProcessing
						.getLeadEntryList(dealId);

				ArrayList dealHeader = creditProcessing.getDealHeader(dealId);
				session.setAttribute("dealHeader", dealHeader);

				session.setAttribute("dealId", dealId);
				logger.info("Size of header: " + dealHeader.size());
				logger.info("Size of leadInfo: " + leadInfo.size());
				session.setAttribute("leadInfo", leadInfo);
				session.removeAttribute("viewDeal");
			}

			else if ((dealId != null && !dealId.equals(""))
					&& (status != null && status.equals("UWA"))) {
				logger
						.info(" CreditProcessiongLeadEntryAction in leadEntryCapturing For view and set viewDeal in session");
				ArrayList<Object> leadInfo = creditProcessing
						.getLeadEntryList(dealId);
				session.setAttribute("dealId", dealId);
				session.setAttribute("leadInfo", leadInfo);
				session.setAttribute("viewDeal", "UWA");

			} else {
				session.removeAttribute("viewDeal");
				session.removeAttribute("leadInfo");
				session.removeAttribute("dealId");
				session.removeAttribute("dealHeader");
				session.removeAttribute("subIndustryList");
				session.removeAttribute("relationalManagerList");
			}
		    String customerType="C";
		    if ((dealId != null && !dealId.equals(""))){
		    String query="SELECT DEAL_CUSTOMER_TYPE FROM CR_DEAL_DTL WHERE DEAL_ID='"+dealId+"'";
		    customerType=ConnectionDAO.singleReturn(query) ;
		    }
		    logger.info("customerType:------------------------------------"+customerType);
		    session.setAttribute("customerType", customerType); 
		return mapping.findForward("newFundFlow");
	}
}