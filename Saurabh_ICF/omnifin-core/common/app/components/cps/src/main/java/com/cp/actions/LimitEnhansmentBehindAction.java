/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.connect.DaoImplInstanceFactory;
import com.cp.dao.LimitEnhancementDAO;
import com.cp.vo.LimitEnhancementVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/**
 * MyEclipse Struts Creation date: 04-07-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class LimitEnhansmentBehindAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(LimitEnhansmentBehindAction.class.getName());
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward limitMakerSearch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		logger.info("In LimitEnhansmentBehindAction limitMakerSearch ");
		LimitEnhancementVo vo = new LimitEnhancementVo();
		HttpSession session = request.getSession();

		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String branchId="";
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			branchId=userobj.getBranchId();
		}else{
			return mapping.findForward("sessionOut");
		}
		
		
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		LimitEnhancementDAO leDAO=(LimitEnhancementDAO)DaoImplInstanceFactory.getDaoImplInstance(LimitEnhancementDAO.IDENTITY);
		logger.info("Implementation class: "+leDAO.getClass()); 	// changed by asesh
		//LimitEnhancementDAO leDAO = new LimitEnhancementDAOImpl();
		if(request.getParameter("value") != null || request.getParameter("value") == "S"){
	        DynaValidatorForm LimitHanSearchDynaValidatorForm= (DynaValidatorForm)form;
			org.apache.commons.beanutils.BeanUtils.copyProperties(vo, LimitHanSearchDynaValidatorForm);	
			
			logger.info("request.getParameter............ "+request.getParameter("value"));
		}else{
			vo.setLbxDealNo("") ;
			vo.setLbxLoanNo("");
			vo.setLoanNo("");
			vo.setDealNo("");
	     }

		logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
		
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));
		logger.info("branch id : " + branchId);

		vo.setCurrentPageLink(currentPageLink);
		vo.setMakerId(userId);
		vo.setBranchId(branchId);
		
		ArrayList<LimitEnhancementVo> list = leDAO.searchLimitMaker(vo,"P", request);
		logger.info("In LimitEnhansmentBehindAction..Maker..list"+list.size());
		request.setAttribute("list",list);
		return mapping.findForward("makerSearch");
	}


	
	
	public ActionForward limitAuthorSearch(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		logger.info("In LimitEnhansmentBehindAction limitMakerSearch ");

		LimitEnhancementVo vo = new LimitEnhancementVo();
		HttpSession session = request.getSession();

		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String branchId="";
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			branchId=userobj.getBranchId();
		}else{
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		LimitEnhancementDAO leDAO=(LimitEnhancementDAO)DaoImplInstanceFactory.getDaoImplInstance(LimitEnhancementDAO.IDENTITY);
		logger.info("Implementation class: "+leDAO.getClass()); 	// changed by asesh
		if(request.getParameter("value") != null || request.getParameter("value") == "M"){
	        DynaValidatorForm LimitHanSearchDynaValidatorForm= (DynaValidatorForm)form;
			org.apache.commons.beanutils.BeanUtils.copyProperties(vo, LimitHanSearchDynaValidatorForm);	
			
			logger.info("request.getParameter............ "+request.getParameter("value"));
		}else{
			vo.setLbxDealNo("") ;
			vo.setLbxLoanNo("");
			vo.setLoanNo("");
			vo.setDealNo("");
	     }

		logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
		
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));
		

		vo.setCurrentPageLink(currentPageLink);
		vo.setMakerId(userId);
		vo.setBranchId(branchId);
		
		ArrayList<LimitEnhancementVo> list = leDAO.searchLimitMaker(vo,"F", request);
		logger.info("In LimitEnhansmentBehindAction..Author..list"+list.size());
		request.setAttribute("AuthorSearch","AuthorSearch");
		request.setAttribute("list",list);
		
		return mapping.findForward("authorSearch");
	}
}