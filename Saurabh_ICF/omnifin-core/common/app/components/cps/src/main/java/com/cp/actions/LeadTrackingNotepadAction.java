/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.business.CPClient.LeadProcessingRemote;
import com.connect.LookUpInstanceFactory;
import com.cp.vo.LeadTrackingNotepadVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/**
 * MyEclipse Struts Creation date: 03-05-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class LeadTrackingNotepadAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(CreditProcessingNotepadAction.class.getName());
	public ActionForward saveNotepadData(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		logger.info("Inside LeadTrackingNotepadAction(saveNotepadData)");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate="";
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in saveNotepadData method of LeadTrackingNotepadAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		DynaValidatorForm LeadNotepadDynaValidatorForm = (DynaValidatorForm) form;

		
		LeadTrackingNotepadVo cr = new LeadTrackingNotepadVo();
		cr.setUserId("" + userId);

		String leadId = "";
		leadId = (String) session.getAttribute("leadTrackNote");
		if (session.getAttribute("leadId") != null) {

			leadId = session.getAttribute("leadId").toString();
		} else if (session.getAttribute("maxId") != null) {
			leadId = session.getAttribute("maxId").toString();
		}
		logger.info("In LeadTrackingNotepadAction(saveNotepadData) dealid: "+ leadId);


		cr.setMakerDate(bDate);
		org.apache.commons.beanutils.BeanUtils.copyProperties(cr,LeadNotepadDynaValidatorForm);
		cr.setLeadId(leadId);

		 LeadProcessingRemote lp = (LeadProcessingRemote) LookUpInstanceFactory.getLookUpInstance(LeadProcessingRemote.REMOTE_IDENTITY, request);
		 
		
		boolean status = lp.saveLeadNotepadData(cr);
		if (status) {
			boolean updateStatus = lp.updateLeadStatus(leadId);
			request.setAttribute("sms", "S");
		} else {

			request.setAttribute("sms", "E");
		}
		if (leadId != null && !leadId.equalsIgnoreCase("")) {
			ArrayList list = lp.getLeadNotepadData(leadId,"LT");
			ArrayList listleadTrack = lp.getLeadNotepadData(leadId,"LT");
			request.setAttribute("listleadTrack", listleadTrack);
			request.setAttribute("list", list);
		} else {
			ArrayList list = lp.getLeadNotepadData(leadId,"LT");
			request.setAttribute("list", list);
		}
		ArrayList noteCode = lp.getLeadNoteCode();
		request.setAttribute("noteCode", noteCode);
		return mapping.getInputForward();
	}
}