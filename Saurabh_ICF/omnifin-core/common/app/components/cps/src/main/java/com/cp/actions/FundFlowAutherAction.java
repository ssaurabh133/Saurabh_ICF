/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.validator.DynaValidatorForm;

import com.connect.DaoImplInstanceFactory;
import com.cp.fundFlowDao.FundFlowAnalysisDAO;
import com.cp.vo.FundFlowAutherVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 10-04-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class FundFlowAutherAction extends Action{
	private static final Logger logger = Logger.getLogger(FundFlowAutherAction.class.getName());	
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) 
	throws Exception{
		logger.info("in FundFlowAutherAction..........");
		
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate="";
		 int compId=0;
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
				compId= userobj.getCompanyId();
		}else{
			logger.info("here in execute method of FundFlowAutherAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		DynaValidatorForm fundFlowAuthorDynaValidatorForm = (DynaValidatorForm)form;
		FundFlowAutherVo vo=new FundFlowAutherVo();	
	
//		String fundFlowDealId="";
//		if(session.getAttribute("fundFlowDealId")!=null)
//		{
//			fundFlowDealId=session.getAttribute("fundFlowDealId").toString();
//			vo.setDealId(fundFlowDealId);
//		}
		
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, fundFlowAuthorDynaValidatorForm);
		
	
		vo.setAuthorDate(bDate);
		String AuthorId=userId;
		vo.setAuthorId(AuthorId);
		vo.setCompanyId(compId+"");
	
		request.setAttribute("deci", vo.getDecision());
		FundFlowAnalysisDAO dao=(FundFlowAnalysisDAO)DaoImplInstanceFactory.getDaoImplInstance(FundFlowAnalysisDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass());
		boolean status=false;
		logger.info("deal id *********************** "+vo.getDealId());
		logger.info("getComments *********************** "+vo.getComments());
		logger.info("getComments *********************** "+vo.getDecision());
		logger.info("getAuthorDate*********************** "+vo.getAuthorDate());
		logger.info("getAuthorId*********************** "+vo.getAuthorId());
		status = dao.fundFlowAuthor(vo);
				if(status)
				{
					logger.info("true....................."+status);
					request.setAttribute("sms", "A");
				}
				else
				{
					logger.info("update....................."+status);
					request.setAttribute("sms", "E");
					
				}

		return mapping.getInputForward();
	}
}