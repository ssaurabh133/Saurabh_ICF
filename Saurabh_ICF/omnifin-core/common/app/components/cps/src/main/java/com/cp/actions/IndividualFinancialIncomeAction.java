/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.dao.FieldVerificationDAO;
import com.cp.dao.IndividualFinancialAnalysisDAO;
import com.cp.vo.FinancialAnalysisParamVo;
import com.cp.vo.FinancialAnalysisVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 10-15-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class IndividualFinancialIncomeAction extends DispatchAction {

	private static final Logger logger = Logger.getLogger(IndividualFinancialIncomeAction.class.getName());
	DecimalFormat myFormatter = new DecimalFormat("###,###.####");
	public ActionForward saveIndividualFinancialIncomeDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
			 logger.info("In saveIndividualFinancialIncomeDetails.............................. ");
		  	boolean flag =false;
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			String resultstr="E";
		    String userId="";
			String bgDate="";
			
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bgDate=userobj.getBusinessdate();
			}else{
				logger.info("here in saveIndividualFinancialIncomeDetails method of IndividualFinancialIncomeAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
		IndividualFinancialAnalysisDAO dao=(IndividualFinancialAnalysisDAO)DaoImplInstanceFactory.getDaoImplInstance(IndividualFinancialAnalysisDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 	// changed by asesh
		//IndividualFinancialAnalysisDAO dao = new IndividualFinancialAnalysisDAOImpl();
		DynaValidatorForm FinancialAnalysisDynaValidatorForm = (DynaValidatorForm) form;
		FinancialAnalysisVo vo=new FinancialAnalysisVo();
		FinancialAnalysisParamVo fvo=new FinancialAnalysisParamVo();
		String dealId="";
		String idss="";
		
	    org.apache.commons.beanutils.BeanUtils.copyProperties(vo, FinancialAnalysisDynaValidatorForm);
	     org.apache.commons.beanutils.BeanUtils.copyProperties(fvo, FinancialAnalysisDynaValidatorForm);
	    if(session.getAttribute("financialDealId")!=null || session.getAttribute("financialDealId").toString()!="")
		{	

			vo.setLbxDealNo(session.getAttribute("financialDealId").toString());
			fvo.setLbxDealNo(session.getAttribute("financialDealId").toString());
		}
	
	    vo.setIncludeInRatio(CommonFunction.checkNull(request.getParameter("includeInRatio")));
		vo.setUserId(userId);
		vo.setBusinessDate(bgDate);
		String update = "";
		  if(request.getParameter("update")!=null)
		  {
			  update = request.getParameter("update");
			  vo.setUpdate(request.getParameter("update"));
		  }
		  
		 /*Added By Sarvesh Started*/
		  session.removeAttribute("incomeDetailsByDeal");
		  String lbxCustomerId = CommonFunction.checkNull(request.getParameter("lbxCustomerId"));
		  vo.setCustomerName(lbxCustomerId);
		  String customerType = CommonFunction.checkNull(request.getParameter("customerType"));
		  if(customerType.equalsIgnoreCase("APPLICANT"))
			  customerType="PRAPPL";
		  else if(customerType.equalsIgnoreCase("CO APPLICANT"))
			  customerType="COAPPL";
		  
		  vo.setCustomerType(customerType);
		  /*Added By Sarvesh Ended*/
			String ids=dao.saveIndividualFinancialIncome(vo);
		/*	if(vo.getNegativeActive().equalsIgnoreCase("Y") ){
				idss=dao.saveMinusIndividualFinancialIncome(fvo);
			}*/
			ArrayList incomeDetailList=new ArrayList();
			if(ids!=null && !ids.equalsIgnoreCase(""))
			{
				incomeDetailList=dao.getIncomeDetailList(vo);
				/*	ArrayList paramList = dao.getParamDetailDetails("I");
				   String pCode[] = vo.getpCode();
				   logger.info("vo.getpCode()---------------"+vo.getpCode());
				    String month[] = vo.getMonth();
				    String year[] = vo.getYear();
				    String financialId[] = vo.getFinancialIds();
				    int len = vo.getFinancialIds().length;
				    ArrayList paramCodeValues = new ArrayList();
				    String[] idForParam=ids.split(",");
				    logger.info("idsssssssss in action********************************* "+ids);
				for(int i=0,k=0;i<pCode.length;i++)
					{		
							String id="";
							FinancialAnalysisVo vo1=new FinancialAnalysisVo();
							 String pval= ConnectionDAO.singleReturn("SELECT PARAM_NAME FROM cr_financial_param WHERE PARAM_CODE='"+pCode[i]+"'");
							 vo1.setParamName(pval);
							vo1.setParameCode(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(pCode[i])).trim());
							if(month[i].equalsIgnoreCase("")){
								vo1.setMonthValue("0.00");
							}else{
							vo1.setMonthValue(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(month[i])).trim());
							}
							if(year[i].equalsIgnoreCase("")){
								vo1.setYearValue("0.00");
							}else{
							vo1.setYearValue(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(year[i])).trim());
							}
							if(vo.getFinancialIds()!=null && vo.getFinancialIds().length>0)
							{
								logger.info("vo.getFinancialIds() .................. "+vo.getFinancialIds());
									if(financialId[i].length()>0)
									{
										logger.info("financialId[i].................. "+financialId[i]);
										vo1.setFinancialId(financialId[i]);
										len--;
									}
									else
									{
										logger.info("kkkkkkkkkkkkkkkkkkk "+k);
										id=idForParam[k++];
										vo1.setFinancialId(id);
									}
							}
							else
							{
									id=idForParam[k++];
									vo1.setFinancialId(id);
								
							}
							paramCodeValues.add(vo1);
						
					}
						session.setAttribute("incomeDetailsByDeal", paramCodeValues);
						logger.info("incomeDetailsByDeal---------------------- "+paramCodeValues.size());
						
	*/                 if(ids.equalsIgnoreCase("Success")){
						/*Added By arun For Foir/IRR not calculating Proper*/
						String deleteRatio=dao.deleteRatioAnalysis(vo.getLbxDealNo());
						logger.info("deleteRatio flag:----"+deleteRatio);
						/*Added By arun For Foir/IRR not calculating Proper*/

		                 resultstr="S";
						}else if(ids.equalsIgnoreCase("Already")){
							resultstr="A";	
						}
						//resultstr="S";
						request.setAttribute("incomeDetailList",incomeDetailList);
						String status = CommonFunction.checkNull(request.getParameter("status"));
						CreditProcessingDAO creditProcessing=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
				        logger.info("Implementation class: "+creditProcessing.getClass()); 			// changed by asesh
					    //CreditProcessingDAO creditProcessing = new CreditProcessingDAOImpl();
					    if ((dealId != null && !dealId.equals(""))
								&& (status == null || status.equals(""))) {

							ArrayList<Object> leadInfo = creditProcessing.getLeadEntryList(dealId);

							ArrayList dealHeader = creditProcessing.getDealHeader(dealId);
							session.setAttribute("dealHeader", dealHeader);

							session.setAttribute("dealId", dealId);
							logger.info("Size of header: " + dealHeader.size());
							logger.info("Size of leadInfo: " + leadInfo.size());
							session.setAttribute("leadInfo", leadInfo);
							session.removeAttribute("viewDeal");
						}

						else if ((dealId != null && !dealId.equals(""))
								&& (status != null && status.equals("UWA"))) {
							logger
									.info(" CreditProcessiongLeadEntryAction in leadEntryCapturing For view and set viewDeal in session");
							ArrayList<Object> leadInfo = creditProcessing
									.getLeadEntryList(dealId);
							session.setAttribute("dealId", dealId);
							session.setAttribute("leadInfo", leadInfo);
							session.setAttribute("viewDeal", "UWA");

						} else {
							session.removeAttribute("viewDeal");
							session.removeAttribute("leadInfo");
							session.removeAttribute("dealId");
							//session.removeAttribute("dealHeader");
							session.removeAttribute("subIndustryList");
							session.removeAttribute("relationalManagerList");
						}
						
		
			}
			//for minus save income
			/*if(idss!=null && !idss.equalsIgnoreCase(""))
			{
				
				ArrayList paramList = dao.getParamDetailDetails("I");
				   String pCode[] = fvo.getpCode1();
				   logger.info("vo.getpCode()---------------"+vo.getpCode());
				    String month[] = fvo.getMonth1();
				    String year[] = fvo.getYear1();
				    String financialId[] = fvo.getFinancialIds1();
				    int len = fvo.getFinancialIds1().length;
				    ArrayList paramCodeValues = new ArrayList();
				    String[] idForParam=ids.split(",");
				    logger.info("idsssssssss in action********************************* "+ids);
					for(int i=0,k=0;i<pCode.length;i++)
					{		
							String id="";
							FinancialAnalysisParamVo fvo1=new FinancialAnalysisParamVo();
							 String pval= ConnectionDAO.singleReturn("SELECT PARAM_NAME FROM cr_financial_param WHERE PARAM_CODE='"+pCode[i]+"'");
							 fvo1.setNegativeparamName(pval);
							fvo1.setNegativeParamCode(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(pCode[i])).trim());
							if(month[i].equalsIgnoreCase("")){
								fvo1.setMonthValue("0.00");
							}else{
							fvo1.setMonthValue(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(month[i])).trim());
							}
							if(year[i].equalsIgnoreCase("")){
								fvo1.setYearValue("0.00");
							}else{
								fvo1.setYearValue(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(year[i])).trim());
							}
							if(fvo.getFinancialIds1()!=null && fvo.getFinancialIds1().length>0)
							{
								
									if(financialId[i].length()>0)
									{
										logger.info("financialId[i].................. "+financialId[i]);
										fvo1.setFinancialId(financialId[i]);
										len--;
									}
									else
									{
										logger.info("kkkkkkkkkkkkkkkkkkk "+k);
										id=idForParam[k++];
										fvo1.setFinancialId(id);
									}
							}
							else
							{
									id=idForParam[k++];
									fvo1.setFinancialId(id);
								
							}
							paramCodeValues.add(fvo1);
						
					}
						session.setAttribute("incomeMinusDetailsByDeal", paramCodeValues);
						logger.info("incomeDetailsByDeal---------------------- "+paramCodeValues.size());
						resultstr="S";
						
						String status = CommonFunction.checkNull(request.getParameter("status"));
					    CreditProcessingDAO creditProcessing = new CreditProcessingDAOImpl();
					    if ((dealId != null && !dealId.equals(""))
								&& (status == null || status.equals(""))) {

							ArrayList<Object> leadInfo = creditProcessing.getLeadEntryList(dealId);

							ArrayList dealHeader = creditProcessing.getDealHeader(dealId);
							session.setAttribute("dealHeader", dealHeader);

							session.setAttribute("dealId", dealId);
							logger.info("Size of header: " + dealHeader.size());
							logger.info("Size of leadInfo: " + leadInfo.size());
							session.setAttribute("leadInfo", leadInfo);
							session.removeAttribute("viewDeal");
						}

						else if ((dealId != null && !dealId.equals(""))
								&& (status != null && status.equals("UWA"))) {
							logger
									.info(" CreditProcessiongLeadEntryAction in leadEntryCapturing For view and set viewDeal in session");
							ArrayList<Object> leadInfo = creditProcessing
									.getLeadEntryList(dealId);
							session.setAttribute("dealId", dealId);
							session.setAttribute("leadInfo", leadInfo);
							session.setAttribute("viewDeal", "UWA");

						} else {
							session.removeAttribute("viewDeal");
							session.removeAttribute("leadInfo");
							session.removeAttribute("dealId");
							session.removeAttribute("dealHeader");
							session.removeAttribute("subIndustryList");
							session.removeAttribute("relationalManagerList");
						}
						
			 if(paramList.size()>0)
			 {
			    request.setAttribute("paramList", paramList);
			    
			 }
			}*/
			   ArrayList customerTypeList = dao.getCustomerTypeList(vo.getLbxDealNo());
			    ArrayList sourceTypeList = dao.getIncomeSourceTypeList();
			    ArrayList customerNameList = dao.getCustomerName(vo.getLbxDealNo(), "PRAPPL");
			    
			    request.setAttribute("customerNameList", customerNameList);
			    request.setAttribute("customerTypeList", customerTypeList);
			    request.setAttribute("sourceTypeList", sourceTypeList);
			    FinancialAnalysisVo vo1 = (FinancialAnalysisVo)incomeDetailList.get(0);
			    logger.info("vo1.getIncludeInRatio()---"+vo1.getIncludeInRatio());
			    request.setAttribute("action", vo1.getIncludeInRatio());

				FieldVerificationDAO fieldVerificationdao=(FieldVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(FieldVerificationDAO.IDENTITY);
		        logger.info("Implementation class: "+fieldVerificationdao.getClass()); 	// changed by asesh
			    //FieldVerificationDAO fieldVerificationdao=new FieldVerificationDAOImpl();	
			    ArrayList verifMethodList = fieldVerificationdao.getVerifMethodListList();
			    request.setAttribute("verifMethodList", verifMethodList);
			
			request.setAttribute("sms",resultstr);
			request.setAttribute("reloadFlag","Y");
			 return mapping.getInputForward();
	}
	public ActionForward openEditIndividualFinancialIncomeDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		   logger.info("In openEditIndividualFinancialIncomeDetails.............................. ");
		
		  	boolean flag =false;
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			String resultstr="E";
		    String userId="";
			String bgDate="";
			
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bgDate=userobj.getBusinessdate();
			}else{
				logger.info("here in openEditIndividualFinancialIncomeDetails method of IndividualFinancialIncomeAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			IndividualFinancialAnalysisDAO dao=(IndividualFinancialAnalysisDAO)DaoImplInstanceFactory.getDaoImplInstance(IndividualFinancialAnalysisDAO.IDENTITY);
			logger.info("Implementation class: "+dao.getClass()); 	// changed by asesh
			DynaValidatorForm FinancialAnalysisDynaValidatorForm = (DynaValidatorForm) form;
			FinancialAnalysisVo vo=new FinancialAnalysisVo();
			org.apache.commons.beanutils.BeanUtils.copyProperties(vo, FinancialAnalysisDynaValidatorForm);
			vo.setFinancialId(request.getParameter("financialId"));
			vo.setLbxDealNo(request.getParameter("dealId"));
			ArrayList incomeDetailListEdit=new ArrayList();
			incomeDetailListEdit=dao.getIncomeDetaisForEdit(vo);
			String customerType="";
			if(incomeDetailListEdit!=null&& incomeDetailListEdit.size()>0){
				customerType=((FinancialAnalysisVo)incomeDetailListEdit.get(0)).getCustomerType();
			}
			
		    ArrayList customerTypeList = dao.getCustomerTypeList(vo.getLbxDealNo());
		    ArrayList sourceTypeList = dao.getIncomeSourceTypeList();
		    
		    ArrayList customerNameList=null;
		    if(CommonFunction.checkNull(customerType).equalsIgnoreCase("PRAPPL")){
		        customerNameList = dao.getCustomerName(vo.getLbxDealNo(), "PRAPPL");	
		    }else{
		    	customerNameList = dao.getCustomerName(vo.getLbxDealNo(), "COAPPL");	
		    }
		    ArrayList incomeDetailList=new ArrayList();
			incomeDetailList=dao.getIncomeDetailList(vo);
			
			 request.setAttribute("incomeDetailList", incomeDetailList);
		    request.setAttribute("editIncomeDetails", incomeDetailListEdit);
		    request.setAttribute("customerNameList", customerNameList);
		    request.setAttribute("customerTypeList", customerTypeList);
		    request.setAttribute("sourceTypeList", sourceTypeList);
		    FinancialAnalysisVo vo1 = (FinancialAnalysisVo)incomeDetailList.get(0);
		    logger.info("vo1.getIncludeInRatio()---"+vo1.getIncludeInRatio());
		    request.setAttribute("action", vo1.getIncludeInRatio());
		    FieldVerificationDAO fieldVerificationdao=(FieldVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(FieldVerificationDAO.IDENTITY);
	        logger.info("Implementation class: "+fieldVerificationdao.getClass()); 	// changed by asesh	
		    ArrayList verifMethodList = fieldVerificationdao.getVerifMethodListList();
		    request.setAttribute("verifMethodList", verifMethodList);
		return mapping.getInputForward();
	}
	public ActionForward updateIndividualFinancialIncomeDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		logger.info("In updateIndividualFinancialIncomeDetails.............................. ");
		
	  	boolean flag =false;
	    HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String resultstr="E";
	    String userId="";
		String bgDate="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bgDate=userobj.getBusinessdate();
		}else{
			logger.info("here in updateIndividualFinancialIncomeDetails method of IndividualFinancialIncomeAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		IndividualFinancialAnalysisDAO dao=(IndividualFinancialAnalysisDAO)DaoImplInstanceFactory.getDaoImplInstance(IndividualFinancialAnalysisDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 	// changed by asesh
		DynaValidatorForm FinancialAnalysisDynaValidatorForm = (DynaValidatorForm) form;
		FinancialAnalysisVo vo=new FinancialAnalysisVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, FinancialAnalysisDynaValidatorForm);
		 if(session.getAttribute("financialDealId")!=null || session.getAttribute("financialDealId").toString()!="")
			{	
             vo.setLbxDealNo(session.getAttribute("financialDealId").toString());
			}
		 
		 /*Added By Sarvesh Start*/
		 String lbxCustomerId = CommonFunction.checkNull(request.getParameter("lbxCustomerId"));
		  vo.setCustomerName(lbxCustomerId);
		  String customerType = CommonFunction.checkNull(request.getParameter("customerType"));
		  if(customerType.equalsIgnoreCase("APPLICANT"))
			  customerType="PRAPPL";
		  else if(customerType.equalsIgnoreCase("CO APPLICANT"))
			  customerType="COAPPL";
		  
		  vo.setCustomerType(customerType);
		  
		  /*Added By Sarvesh ended*/
		  vo.setIncludeInRatio(CommonFunction.checkNull(request.getParameter("includeInRatio")));
	   String result=dao.updateIndividualFinancialIncome(vo);
	   if(result.equalsIgnoreCase("Success")){
		   /*Added By arun For Foir/IRR not calculating Proper*/
			String deleteRatio=dao.deleteRatioAnalysis(vo.getLbxDealNo());
			logger.info("deleteRatio flag:----"+deleteRatio);
			/*Added By arun For Foir/IRR not calculating Proper*/

           resultstr="S";
			}else if(result.equalsIgnoreCase("Already")){
				resultstr="A";	
			}
	    ArrayList customerTypeList = dao.getCustomerTypeList(vo.getLbxDealNo());
	    ArrayList sourceTypeList = dao.getIncomeSourceTypeList();
	    
	    ArrayList customerNameList = dao.getCustomerName(vo.getLbxDealNo(), "PRAPPL");
	   
		ArrayList incomeDetailList=new ArrayList();
		incomeDetailList=dao.getIncomeDetailList(vo);
		 request.setAttribute("incomeDetailList", incomeDetailList);
	    request.setAttribute("customerNameList", customerNameList);
	    request.setAttribute("customerTypeList", customerTypeList);
	    request.setAttribute("sourceTypeList", sourceTypeList);
	    FinancialAnalysisVo vo1 = (FinancialAnalysisVo)incomeDetailList.get(0);
	    logger.info("vo1.getIncludeInRatio()---"+vo1.getIncludeInRatio());
	    request.setAttribute("action", vo1.getIncludeInRatio());
	    FieldVerificationDAO fieldVerificationdao=(FieldVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(FieldVerificationDAO.IDENTITY);
        logger.info("Implementation class: "+fieldVerificationdao.getClass()); 	// changed by asesh	
	    ArrayList verifMethodList = fieldVerificationdao.getVerifMethodListList();
	    request.setAttribute("verifMethodList", verifMethodList);
	    request.setAttribute("sms",resultstr);
	    request.setAttribute("reloadFlag","Y");
		return mapping.getInputForward();
	}	
	public ActionForward getCustomerName(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	throws Exception {
logger.info("In updateIndividualFinancialIncomeDetails.............................. ");
		
	  	boolean flag =false;
	    HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String resultstr="E";
	    String userId="";
		String bgDate="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bgDate=userobj.getBusinessdate();
		}else{
			logger.info("here in updateIndividualFinancialIncomeDetails method of IndividualFinancialIncomeAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		IndividualFinancialAnalysisDAO dao=(IndividualFinancialAnalysisDAO)DaoImplInstanceFactory.getDaoImplInstance(IndividualFinancialAnalysisDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 	// changed by asesh
		String dealId=request.getParameter("dealId");
		String customerType=request.getParameter("customerType");
		 ArrayList customerNameList=null;
		 customerNameList = dao.getCustomerName(dealId,customerType);	
		  request.setAttribute("customerNameList", customerNameList);
		  
		return mapping.findForward("customerNameSucces");	
	}
}