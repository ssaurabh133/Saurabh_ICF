/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.io.PrintWriter;
import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.daoImplMYSQL.DedupeReferalDaoImpl;
import com.cp.vo.CreditProcessingLeadDetailDataVo;
import com.cp.vo.dedupeReferalVo;


import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

public class DedupeDecisionDispatchAction extends DispatchAction{
	private static final Logger logger = Logger.getLogger(DedupeDecisionDispatchAction.class.getName());
	DedupeReferalDaoImpl DedupeReferalDao=(DedupeReferalDaoImpl)DaoImplInstanceFactory.getDaoImplInstance(DedupeReferalDaoImpl.IDENTITY); 
	//CreditProcessingDAO creditProcessingDAO = new CreditProcessingDAOImpl();
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws Exception 
	 */
	public ActionForward searchCustomer(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	throws Exception {

logger.info("In searchCustomer");
		
		HttpSession session =  request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in searchCustomer method of DedupeDecisionDispatchAction  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String leadId="";
		String dealId="";
		String loanId="";
		dedupeReferalVo vo=new dedupeReferalVo();
		
		DynaValidatorForm dedupeReferalFormBean=(DynaValidatorForm )form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, dedupeReferalFormBean);
		
		logger.info("current page link .......... "+request.getParameter("d-1334207-p"));		
		int currentPageLink = 0;
		if(request.getParameter("d-1334207-p")==null || request.getParameter("d-1334207-p").equalsIgnoreCase("0"))
			currentPageLink=1;
		else
			currentPageLink =Integer.parseInt(request.getParameter("d-1334207-p"));
		
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
			 currentPageLink=1;
			else
				currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));
		vo.setCurrentPageLink(currentPageLink);
		
		DedupeReferalDaoImpl service=(DedupeReferalDaoImpl)DaoImplInstanceFactory.getDaoImplInstance(DedupeReferalDaoImpl.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 
       
       dealId=vo.getLbxDealNo();
       logger.info("dealId1"+dealId);
       leadId=vo.getLbxLeadNo();
       logger.info("leadId"+leadId);
       loanId=vo.getLbxLoanNoHID();
       logger.info("loanId"+loanId);
       
		ArrayList searchCustomerList= service.searchCustomerList(vo);

		request.setAttribute("list", searchCustomerList);
		dealId=vo.getLbxDealNo();
		 request.setAttribute("dedupeReferal", "dedupeReferal");
		return mapping.findForward("search111");
	}
	
	
	public ActionForward authorForAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception
			{
				logger.info(" in authorForAuthor()");
				HttpSession session = request.getSession();
				boolean flag=false;
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				
				if(userobj==null){
					return mapping.findForward("sessionOut");
				}
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				
				
				
				return mapping.findForward("DRAuthor");	
			}
	
	
	
	public ActionForward openModifyForAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception
			{
				logger.info(" in DedupeDecisionDispatchAction...........(openModifyForAuthor)");
				HttpSession session = request.getSession();
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				Object sessionId = session.getAttribute("sessionID");
				String userId="";
				String bDate="";
				String companyId="";
				if(userobj!=null)
				{
						userId=userobj.getUserId();
						bDate=userobj.getBusinessdate();
						companyId=""+userobj.getCompanyId();
						
				}else{
					logger.info("here in saveFieldVerInitiation method of FieldVerificationSaveAction action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
				ServletContext context = getServlet().getServletContext();
				String strFlag="";
				String lbxDealNo="";
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				dedupeReferalVo vo=new dedupeReferalVo();
				
				
				
				DynaValidatorForm dedupeReferalFormBean=(DynaValidatorForm )form;
				org.apache.commons.beanutils.BeanUtils.copyProperties(vo, dedupeReferalFormBean);
				
				String leadId="";
				
				if (CommonFunction.checkNull(vo.getLbxDealNo()).trim().equalsIgnoreCase(""))
				{
					 lbxDealNo= CommonFunction.checkNull(request.getParameter("dealId"));
					 session.setAttribute("lbxDealNo", lbxDealNo);
					
					vo.setLbxDealNo(lbxDealNo);
				}
				else
				{
					 lbxDealNo= CommonFunction.checkNull(vo.getLbxDealNo());
					 session.setAttribute("lbxDealNo", lbxDealNo);
				}
				 if(!CommonFunction.checkNull(request.getParameter("leadId")).equalsIgnoreCase(""))
				{
					leadId=request.getParameter("leadId");
					session.setAttribute("leadId", leadId);
					logger.info("the value of leadId is :: "+leadId);
					vo.setLbxLeadNo(leadId);
				}
				logger.info(" lbxDealNo:::: "+lbxDealNo);
				DedupeReferalDaoImpl service=(DedupeReferalDaoImpl)DaoImplInstanceFactory.getDaoImplInstance(DedupeReferalDaoImpl.IDENTITY);
		        logger.info("Implementation class: "+service.getClass());
		        
		        if(CommonFunction.checkNull(session.getAttribute("functionId")).equalsIgnoreCase("3000205")){
					request.setAttribute("PreDeal", "PreDeal");
					
				}
		        /*boolean st=false;
				String updateQuery="update cr_lead_dtl set DEDUPE_STATUS='Y' where lead_id='"+leadId+"' ";
				logger.info(" Deal Maker Update Query : "+updateQuery);
				ArrayList al=new ArrayList();
				al.add(updateQuery);
				st=ConnectionDAO.sqlInsUpdDelete(al);	
				logger.info("updateQuery Status: "+st);*/
				
				
		      				
				ArrayList dupList1 = service.dedupeValues(vo);
				request.setAttribute("list", dupList1);
				//add by saorabh 2 sep for view mode
				String viewMode = request.getParameter("LeadViewMode");
				if(viewMode!=null && !viewMode.equalsIgnoreCase(""))
				request.setAttribute("view", viewMode);
			// end by saorabh 2 sep
				/* String checkStageM=CommonFunction.stageMovement(companyId, "DC","F",lbxDealNo, "DD", bDate,userId);
				  logger.info("checkStageM to check : "+checkStageM);*/
				 
				return mapping.findForward("openForAuthor11");
			}
	public ActionForward getDedupeCusData(ActionMapping mapping, ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception
	{
		logger.info(" in DedupeDecisionDispatchAction...........(getDedupeCusData)");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		dedupeReferalVo vo=new dedupeReferalVo();
		CreditProcessingLeadDetailDataVo vo1 =new CreditProcessingLeadDetailDataVo();
		DynaValidatorForm dedupeReferalFormBean=(DynaValidatorForm )form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, dedupeReferalFormBean);
		
		logger.info("current page link .......... "+request.getParameter("d-1334207-p"));		
		int currentPageLink = 0;
		if(request.getParameter("d-1334207-p")==null || request.getParameter("d-1334207-p").equalsIgnoreCase("0"))
			currentPageLink=1;
		else
			currentPageLink =Integer.parseInt(request.getParameter("d-1334207-p"));
		
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
			 currentPageLink=1;
			else
				currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));
		
		vo.setCurrentPageLink(currentPageLink);
		
		/*String dealId=session.getAttribute("lbxDealNo").toString();
		vo.setLbxDealNo(dealId);
		session.setAttribute("dealId", dealId);*/
		String lbxDealNo="";
		String leadId="";
		String txnType="";
		String dealId="";// add by saorabh
		
		if (!CommonFunction.checkNull(session.getAttribute("lbxDealNo")).trim().equalsIgnoreCase(""))
		{
			 lbxDealNo= session.getAttribute("lbxDealNo").toString();
   			 vo.setLbxDealNo(lbxDealNo);
   			 txnType="DC";// add by saorabh
		}
		else
		{ lbxDealNo= CommonFunction.checkNull(request.getParameter("dealId"));
		 session.setAttribute("lbxDealNo", lbxDealNo);
			
		vo.setLbxDealNo(lbxDealNo);
			
			 txnType="DC";// add by saorabh
		}
		 if(!CommonFunction.checkNull(session.getAttribute("leadId")).equalsIgnoreCase(""))
		{
			leadId=session.getAttribute("leadId").toString();
			logger.info("the value of leadId is :: "+leadId);
			vo.setLbxLeadNo(leadId);
			 txnType="LE";// add by saorabh
		}
		 String cusId=request.getParameter("tarCustID");
			vo.setDupCustomerID(cusId);
			
			vo.setUpdateFlag("");
		//	session.setAttribute("gcdReq",cusId);
			logger.info("customerId :: "+cusId);
			DedupeReferalDaoImpl service=(DedupeReferalDaoImpl)DaoImplInstanceFactory.getDaoImplInstance(DedupeReferalDaoImpl.IDENTITY);
		 // add by saorabh
		 if(CommonFunction.checkNull(session.getAttribute("functionId")).equalsIgnoreCase("3000296") ||
				 CommonFunction.checkNull(session.getAttribute("functionId")).equalsIgnoreCase("3000951") ||
				 CommonFunction.checkNull(session.getAttribute("functionId")).equalsIgnoreCase("3000952") ||
				 CommonFunction.checkNull(session.getAttribute("functionId")).equalsIgnoreCase("3000953") ||
				 CommonFunction.checkNull(session.getAttribute("functionId")).equalsIgnoreCase("3000954")  )
		 {
			 if(!CommonFunction.checkNull(session.getAttribute("dealId")).equalsIgnoreCase(""))
			 {
			 vo.setDealId(CommonFunction.checkNull(session.getAttribute("dealId")));
			 txnType="DC";
			 vo.setUpdateFlag("updateFlag");
			 String remarks=service.getSavedDecisionData(vo.getDealId(),txnType,vo.getDupCustomerID());
			 String status=service.getDecisonType(vo.getDealId(),txnType,vo.getDupCustomerID());
			
			 String decison;
			 if(status.equalsIgnoreCase("X"))
				 decison="Reject";
			 else if(status.equalsIgnoreCase("A"))
				 decison="Approved";
			 else
				 decison=" ";
				 
			 logger.info("decison is : "+decison);
			 request.setAttribute("decison", decison);
			 //rohit changes end
			 logger.info("remarks is : "+remarks);
			 request.setAttribute("remarks", remarks);
			 }
			 else
			 {
				 vo.setLeadId(CommonFunction.checkNull(session.getAttribute("leadIdDedupe")));
				 txnType="LE";
				 vo.setUpdateFlag("updateFlag");
				 String remarks=service.getSavedDecisionData(vo.getLeadId(),txnType,vo.getDupCustomerID());
				 String status=service.getDecisonType(vo.getLeadId(),txnType,vo.getDupCustomerID());
				
				 String decison;
				 if(status.equalsIgnoreCase("X"))
					 decison="Reject";
				 else if(status.equalsIgnoreCase("A"))
					 decison="Approved";
				 else
					 decison=" ";
					 
				 logger.info("decison is : "+decison);
				 request.setAttribute("decison", decison);
				 //rohit changes end
				 logger.info("remarks is : "+remarks);
				 request.setAttribute("remarks", remarks);
			 }
			 session.removeAttribute("leadIdDedupe");
			
			
			// String remarks=service.getSavedDecisionData(CommonFunction.checkNull(session.getAttribute("dealId")),txnType,vo.getDupCustomerID());
			 //rohit changes start
				//String status=service.getDecisonType(CommonFunction.checkNull(session.getAttribute("dealId")),txnType,vo.getDupCustomerID());
				  
			
					 if(txnType.equalsIgnoreCase("DC"))//by rohit.....
						 request.setAttribute("view", "view");
						 else if(txnType.equalsIgnoreCase("LE"))
							 request.setAttribute("view", "view");	 //end.....
		 }
		//end by saorabh
		/*String cusId=request.getParameter("tarCustID");
		vo.setDupCustomerID(cusId);
		vo.setDecison(txnType);// add by saorabh
		session.setAttribute("gcdReq",cusId);
		logger.info("customerId :: "+cusId);*/
		 vo.setTxnType(txnType);
		
        logger.info("Implementation class: "+service.getClass()); 
		
        
if(!CommonFunction.checkNull(vo.getLbxDealNo()).equalsIgnoreCase("") && !CommonFunction.checkNull(vo.getUpdateFlag()).equalsIgnoreCase("updateFlag"))
{
	
		// vo.setDealId(CommonFunction.checkNull(session.getAttribute("dealId")));
		 txnType="DC";
		 //vo.setUpdateFlag("updateFlag");
		 String remarks=service.getSavedDecisionData(vo.getLbxDealNo(),txnType,vo.getDupCustomerID());
		 String status=service.getDecisonType(vo.getLbxDealNo(),txnType,vo.getDupCustomerID());
		
		 String decison;
		 if(status.equalsIgnoreCase("X"))
			 decison="Reject";
		 else if(status.equalsIgnoreCase("A"))
			 decison="Approved";
		 else
			 decison=" ";
			 
		 logger.info("decison is : "+decison);
		 request.setAttribute("decison", decison);
		 //rohit changes end
		 logger.info("remarks is : "+remarks);
		 request.setAttribute("remarks", remarks);
	 
}
		 //pooja code for dedupe
		DedupeReferalDaoImpl impl = new DedupeReferalDaoImpl();
		String countQuery="select count(1) from cr_lead_customer_m where LEAD_ID='"+leadId+"' AND CUSTOMER_ID='"+vo.getDupCustomerID()+"' AND DEDUPE_DECISION is null ";
		int count=Integer.parseInt(ConnectionDAO.singleReturn(countQuery));
		if(count>0){
		impl.proForDedupeDecisionForLead("LE", leadId,vo.getDupCustomerID());
		}
   		//pooja code end
        ArrayList dupList2 = service.dedupeValues(vo);
        logger.info("value in the list to show ;;;   ::"+dupList2);
		request.setAttribute("list", dupList2);
      				
		ArrayList dupList1 = service.getDedupeCustomerData1(vo );
		request.setAttribute("list1", dupList1);
		logger.info("value in the list to show dupList1 ;;;   ::"+dupList1);
		session.setAttribute("approve", "approve");
		 session.removeAttribute("individualInfo");
		 request.setAttribute("custId",vo.getDupCustomerID());
		 request.setAttribute("cusType", vo.getApplicantType());
		 String remarks=service.getSavedDecisionData(leadId,txnType,vo.getDupCustomerID());
		 String status=service.getDecisonType(leadId,txnType,vo.getDupCustomerID());
		
		 String decison;
		 if(status.equalsIgnoreCase("X"))
			 decison="Reject";
		 else if(status.equalsIgnoreCase("A"))
			 decison="Approved";
		 else
			 decison=" ";
			 
		 logger.info("decison is : "+decison);
		 request.setAttribute("decison", decison);
		 //rohit changes end
		 logger.info("remarks is : "+remarks);
		 request.setAttribute("remarks", remarks);
		return mapping.findForward("openForAuthor11"); 
	}
		public ActionForward saveDedupeCusData(ActionMapping mapping, ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception
		{
		logger.info("in saveDedupeCusData:: data are saved and forwarded ");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate="";
		String companyId="";
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
				companyId=""+userobj.getCompanyId();
				
		}else{
			logger.info("here in saveFieldVerInitiation method of FieldVerificationSaveAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId=session.getAttribute("sessionId");
		ServletContext context=getServlet().getServletContext();
		
		String strFlag="";
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		dedupeReferalVo vo=new dedupeReferalVo();
		CreditProcessingLeadDetailDataVo vo1=new CreditProcessingLeadDetailDataVo();
		DynaValidatorForm dedupeReferalFormBean=(DynaValidatorForm )form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, dedupeReferalFormBean);
		String dealId="";
		String lbxDealNo="";
		String leadId="";
		String txn_type="";
		
		if (!CommonFunction.checkNull(session.getAttribute("lbxDealNo")).trim().equalsIgnoreCase(""))
		{
			dealId= session.getAttribute("lbxDealNo").toString();
   			 vo.setLbxDealNo(dealId);
   			txn_type="";
   			txn_type="DC";
		}
		else
		{
			dealId= CommonFunction.checkNull(vo.getLbxDealNo());
			 session.setAttribute("lbxDealNo", dealId);
			 txn_type="";
			 txn_type="DC";
		}
		if (!CommonFunction.checkNull(session.getAttribute("leadId")).trim().equalsIgnoreCase(""))
		{
			leadId= session.getAttribute("leadId").toString();
			vo.setLbxLeadNo(leadId);
			dealId=leadId;
			txn_type="";
			txn_type="LE";
		}
		
		
		logger.info("txn_type  :: "+txn_type);
		/*String dealId=session.getAttribute("lbxDealNo").toString();
		vo.setLbxDealNo(dealId);
		logger.info("deal id is :: "+dealId);
		session.setAttribute("dealId", dealId);*/
		String msg="";
		String cusId=request.getParameter("tarCustID");
		vo.setDupCustomerID(cusId);
		vo.setTxnType(txn_type);
		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		vo.setUpdateFlag("");
		String cusId1=request.getParameter("matCustId");
		logger.info("customerId cusId1 :: "+cusId1);
		
		DedupeReferalDaoImpl service=(DedupeReferalDaoImpl)DaoImplInstanceFactory.getDaoImplInstance(DedupeReferalDaoImpl.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 
		
        ArrayList dupList2 = service.dedupeValues(vo);
        logger.info("value in the list to show ;;;   ::"+dupList2);
		request.setAttribute("list", dupList2);
      				
		/*ArrayList dupList1 = service.getDedupeCustomerData1(vo);
		request.setAttribute("list1", dupList1);*/
		
		String result = service.insertDedupeCustomerData(vo,cusId1,dealId,txn_type);
		if(CommonFunction.checkNull(result).equalsIgnoreCase("dataSaved"))
		{
			msg="F";
		}
		else if(CommonFunction.checkNull(result).equalsIgnoreCase("dataNotSaved"))
			msg="N";
		else if(CommonFunction.checkNull(result).equalsIgnoreCase("noDataFound"))
			msg="D";
		//rohit start
		else if(CommonFunction.checkNull(result).equalsIgnoreCase("Datareject"))
			msg="R";
		//end
		request.setAttribute("msg", msg);
		session.setAttribute("approve", "approve");
	    session.removeAttribute("individualInfo");
		/* if((CommonFunction.checkNull(result).equalsIgnoreCase("dataSaved") || CommonFunction.checkNull(result).equalsIgnoreCase("noDataFound")) &&  CommonFunction.checkNull(leadId).equalsIgnoreCase("") )
			{
		if(vo.getTxnType().equalsIgnoreCase("DC"))
		{
			 
			
		 String checkStageM=CommonFunction.stageMovement(companyId,txn_type,"F",dealId, "DD", bDate,userId);
		
		  logger.info("checkStageM to check : "+checkStageM);
		}
		 logger.info("forword from Lead  ");
			} 
	
		//rohit changes..
		 else
		 { 
			
				 String checkStageM=CommonFunction.stageMovement(companyId, txn_type ,"X",dealId, "DD", bDate,userId);
				  logger.info("checkStageM to check : "+checkStageM);
				
		 }
		 //end..
*/		
		return mapping.findForward("openForAuthor11"); 
	}
		
		public ActionForward checkDedupeCustomer(ActionMapping mapping, ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception
		{
			logger.info(" in DedupeDecisionDispatchAction...........(getDedupeCusData)");
			HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag="";
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			dedupeReferalVo vo=new dedupeReferalVo();
			
			DynaValidatorForm dedupeReferalFormBean=(DynaValidatorForm )form;
			org.apache.commons.beanutils.BeanUtils.copyProperties(vo, dedupeReferalFormBean);
			
			String leadId="";
			String msg="";
			 if(!CommonFunction.checkNull(request.getParameter("leadId")).equalsIgnoreCase(""))
			 {
				 leadId=request.getParameter("leadId");
				 vo.setLbxLeadNo(leadId);
				 session.setAttribute("leadId", leadId);
			 }
			 DedupeReferalDaoImpl service=(DedupeReferalDaoImpl)DaoImplInstanceFactory.getDaoImplInstance(DedupeReferalDaoImpl.IDENTITY);
	        logger.info("Implementation class: "+service.getClass()); 
	      				
			int result = service.checkDedupeCustomerData(leadId);
			logger.info("value in the list to show dupList1 ;;;   ::"+result);
			if(result>0)
			{
				return mapping.findForward("leadDecision");
			}
			else
			{
				msg="Z";
				request.setAttribute("msg", msg);
				ArrayList dupList2 = service.dedupeValues(vo);
		        logger.info("value in the list to show ;;;   ::"+dupList2);
				request.setAttribute("list", dupList2);
				return mapping.findForward("openForAuthor11");
			}
		}
		
		public ActionForward searchUnderwriterCustomer(ActionMapping mapping, ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception
		{
			logger.info(" in DedupeDecisionDispatchAction...........(getDedupeCusData)");
			HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag="";
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			dedupeReferalVo vo=new dedupeReferalVo();
			CreditProcessingLeadDetailDataVo vo1=new CreditProcessingLeadDetailDataVo();
			DynaValidatorForm dedupeReferalFormBean=(DynaValidatorForm )form;
			org.apache.commons.beanutils.BeanUtils.copyProperties(vo, dedupeReferalFormBean);
			
			String lbxDealNo="";
			String txnType="";
			
			String underWritter="UNC";
			
			if (!CommonFunction.checkNull(request.getParameter("txnId")).trim().equalsIgnoreCase(""))
			{
				 lbxDealNo= request.getParameter("txnId");
				 txnType= request.getParameter("txnType");
				
				 if(txnType.equalsIgnoreCase("LE"))
					 vo.setLbxLeadNo(lbxDealNo);
				 else
	   			 vo.setLbxDealNo(lbxDealNo);
	   			 vo.setTxnType(txnType);
	   			
	   			 vo.setUpdateFlag(underWritter);
	   			
			}
			String cusId=request.getParameter("tarCustID");
			vo.setDupCustomerID(cusId);
			vo.setTxnType(txnType);// add by saorabh
			session.setAttribute("gcdReq",cusId);
			logger.info("customerId :: "+cusId);
			 // add by saorabh
			 if(CommonFunction.checkNull(session.getAttribute("functionId")).equalsIgnoreCase("3000296"))
			 {
				 vo.setDealId(CommonFunction.checkNull(session.getAttribute("dealId")));
				
			 }
			//end by saorabh
			 DedupeReferalDaoImpl service=(DedupeReferalDaoImpl)DaoImplInstanceFactory.getDaoImplInstance(DedupeReferalDaoImpl.IDENTITY);
	        logger.info("Implementation class: "+service.getClass()); 
			
	        ArrayList dupList2 = service.dedupeValues(vo);
	        logger.info("value in the list to show ;;;   ::"+dupList2);
	        session.setAttribute("leadIdDedupe", CommonFunction.checkNull(vo.getLbxLeadNo().trim()));
			request.setAttribute("list", dupList2);
	      				
			ArrayList dupList1 = service.getDedupeCustomerData1(vo);
			request.setAttribute("list1", dupList1);
			logger.info("value in the list to show dupList1 ;;;   ::"+dupList1);
			session.setAttribute("approve", "approve");
			 session.removeAttribute("individualInfo");
			 String remarks=service.getSavedDecisionData(lbxDealNo,txnType,"");
			 //rohit changes start
 			String status=service.getDecisonType(lbxDealNo,txnType,"");
             String decison;
			 if(status.equalsIgnoreCase("X"))
				 decison="Reject";
			 else if(status.equalsIgnoreCase("A"))
				 decison="Approved";
			 else
				 decison="   ";
				 
			 logger.info("decison is : "+decison);
			 request.setAttribute("decison", decison);
			 //rohit changes end
			 logger.info("remarks is : "+remarks);
			 request.setAttribute("remarks", remarks);
			
			 request.setAttribute("view", "view");
			
			return mapping.findForward("openForAuthor11"); 
		}
		public ActionForward exportDedupeData(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
				throws Exception {

			logger.info(" in DedupeDecisionDispatchAction...........(getDedupeCusData)");
			HttpSession session = request.getSession();
			UserObject userobj = (UserObject) session.getAttribute("userobject");
			Object sessionId = session.getAttribute("sessionID");
			// for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag = "";
			if (sessionId != null) {
				strFlag = UserSessionCheck.checkSameUserSession(userobj,
						sessionId.toString(), "", request);
			}

			logger.info("strFlag .............. " + strFlag);
			if (!strFlag.equalsIgnoreCase("")) {
				if (strFlag.equalsIgnoreCase("sameUserSession")) {
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				} else if (strFlag.equalsIgnoreCase("BODCheck")) {
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			dedupeReferalVo vo = new dedupeReferalVo();
		
			DynaValidatorForm dedupeReferalFormBean = (DynaValidatorForm) form;
			org.apache.commons.beanutils.BeanUtils.copyProperties(vo,
					dedupeReferalFormBean);

			String lbxDealNo="";
			String leadId="";
			String txnType="";
			String dealId="";// add by saorabh
			
			if (!CommonFunction.checkNull(session.getAttribute("lbxDealNo")).trim().equalsIgnoreCase(""))
			{
				 lbxDealNo= session.getAttribute("lbxDealNo").toString();
	   			 vo.setLbxDealNo(lbxDealNo);
	   			 txnType="DC";
			}
			else
			{
				lbxDealNo= CommonFunction.checkNull(request.getParameter("dealId"));
			 session.setAttribute("lbxDealNo", lbxDealNo);
				
			vo.setLbxDealNo(lbxDealNo);
				
				 txnType="DC";
			}
			 if(!CommonFunction.checkNull(session.getAttribute("leadId")).equalsIgnoreCase(""))
			{
				leadId=session.getAttribute("leadId").toString();
				logger.info("the value of leadId is :: "+leadId);
				vo.setLbxLeadNo(leadId);
				 txnType="LE";
			}
			
				vo.setTxnType(txnType);
			/* txnType= request.getParameter("txnType");
			 vo.setDecison(txnType);
		 String dealId=session.getAttribute("lbxDealNo").toString();
			 vo.setLbxDealNo(dealId);
			 String leadId=session.getAttribute("lbxLeadNo").toString();
			 vo.setLbxLeadNo(leadId);*/
			 
			 
			// session.setAttribute("dealId", dealId);
		
		
		
			String cusId = CommonFunction.checkNull(request.getParameter("matCustId"));
			vo.setDupCustomerID(cusId);
			logger.info("customerId :: " + cusId);
			DedupeReferalDaoImpl service=(DedupeReferalDaoImpl)DaoImplInstanceFactory.getDaoImplInstance(DedupeReferalDaoImpl.IDENTITY);
		
			response.setContentType("application/vnd.ms-excel");
			response.setHeader("Content-Disposition", "attachment; filename="
					+ "DedupeMatchedData.csv");
		

			ArrayList list = service.excelExport(vo);
			//request.setAttribute("list1", list);
			//logger.info("Report Size  :  " + list.size());
			int size = list.size();
			if (size == 0) {
				request.setAttribute("error", "error");
			} else {
				StringBuffer fileNameFormat = new StringBuffer();
				PrintWriter out = response.getWriter();
				
				ArrayList subList = new ArrayList();
				try {
					for (int i = 0; i < size; i++) {
						subList = (ArrayList) list.get(i);
						int subSize = subList.size();
						for (int j = 0; j < subSize; j++) {
							fileNameFormat.append('"');
							fileNameFormat.append(CommonFunction.checkNull(subList
									.get(j)));
							fileNameFormat.append('"');
							fileNameFormat.append(',');
						}
						fileNameFormat.append("\n");
					}
					out.write(fileNameFormat.toString());
				} catch (Exception e) {
					logger.error(e.getMessage().toString());
				} finally {
					subList.clear();
					list.clear();
					fileNameFormat.setLength(0);
					fileNameFormat = null;
					out.flush();
					out.close();
					
				}

			}

			return null;
		}

		//Rohit Changes for forward button Starts..
		public ActionForward ForwordCusData(ActionMapping mapping, ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception
		{
		logger.info("in ForwordCusData:: data are  forwarded ");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate="";
		String companyId="";
		String branchId="";
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
				companyId=""+userobj.getCompanyId();
				branchId=userobj.getBranchId();
				
		}else{
			logger.info("here in saveFieldVerInitiation method of FieldVerificationSaveAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId=session.getAttribute("sessionId");
		ServletContext context=getServlet().getServletContext();
		
		String strFlag="";
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		dedupeReferalVo vo=new dedupeReferalVo();
		CreditProcessingLeadDetailDataVo vo1=new CreditProcessingLeadDetailDataVo();
		
		String dealId="";
		String lbxDealNo="";
		String leadId="";
		String txn_type="";
		
		if (!CommonFunction.checkNull(session.getAttribute("lbxDealNo")).trim().equalsIgnoreCase(""))
		{
			dealId= session.getAttribute("lbxDealNo").toString();
   			// vo.setLbxDealNo(dealId);
   			txn_type="";
   			txn_type="DC";
		}
		else
		{
			dealId= CommonFunction.checkNull(vo.getLbxDealNo());
			 session.setAttribute("lbxDealNo", dealId);
			 txn_type="";
			 txn_type="DC";
		}
		if (!CommonFunction.checkNull(session.getAttribute("leadId")).trim().equalsIgnoreCase(""))
		{
			leadId= session.getAttribute("leadId").toString();
		//	vo.setLbxLeadNo(leadId);
			dealId=leadId;
			txn_type="";
			txn_type="LE";
		}
		
		
		logger.info("txn_type  :: "+txn_type);
	
		String msg="";
		
		
	//	vo.setTxnType(txn_type);
		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		vo.setUpdateFlag("");
		 String checkStageM="";
		String qry="select count(1) from cr_deal_dtl where deal_id='"+dealId+"' and REC_STATUS='X' ";
		int count=Integer.parseInt(CommonFunction.checkNull(ConnectionDAO.singleReturn(qry)));
		 DedupeReferalDaoImpl service=(DedupeReferalDaoImpl)DaoImplInstanceFactory.getDaoImplInstance(DedupeReferalDaoImpl.IDENTITY);
	        logger.info("Implementation class: "+service.getClass()); 
			
	//	request.setAttribute("msg", msg);
		session.setAttribute("approve", "approve");
	    session.removeAttribute("individualInfo");
	
		 if(count==0 ) 
			{
		  checkStageM=CommonFunction.stageMovement(companyId,txn_type,"F",dealId, "DD", bDate,userId);
		  logger.info("checkStageM to check : "+checkStageM);
			} 
		 else
		 { 	
				  checkStageM=CommonFunction.stageMovement(companyId, txn_type ,"X",dealId, "DD", bDate,userId);
				  logger.info("checkStageM to check : "+checkStageM);		
		 }
		 if(CommonFunction.checkNull(checkStageM).equalsIgnoreCase("S"))
		 {
			 msg="S";
			 request.setAttribute("msg", msg);
		 }
		 vo.setUserId(userId);
			vo.setBranchId(branchId);
			session.setAttribute("dedupeUserIdLOv",userId);
	    	ArrayList searchCustomerList= service.searchCustomerList(vo);

			request.setAttribute("list", searchCustomerList);
			   request.setAttribute("dedupeReferal", "dedupeReferal");
		 session.removeAttribute("dealId");
	
	 return mapping.findForward("search111"); 
	}
		//Rohit Changes for forward button end
}