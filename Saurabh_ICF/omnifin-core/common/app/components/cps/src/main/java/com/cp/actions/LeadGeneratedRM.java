/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.validator.DynaValidatorForm;

import com.business.CPClient.LeadProcessingRemote;
import com.caps.action.ActionCodeMasterDispatchAction;
import com.connect.LookUpInstanceFactory;
import com.cp.vo.LeadCaptureVo;
import com.logger.LoggerMsg;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;


	public class LeadGeneratedRM extends Action {
		
		private static final Logger logger = Logger.getLogger(ActionCodeMasterDispatchAction.class.getName());
            public ActionForward execute(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) throws Exception {
            	HttpSession session = request.getSession();
        		String leadno = "";
        		
        		UserObject userobj = (UserObject) session.getAttribute("userobject");
        		if(userobj==null){
    				logger.info("here in execute method of LeadGeneratedRM action the session is out----------------");
    				return mapping.findForward("sessionOut");
    			}
        		String sessionId = session.getAttribute("sessionID").toString();

        		ServletContext context = getServlet().getServletContext();
        		String strFlag="";	
        		if(sessionId!=null)
        		{
        			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
        		}
        		
        		
        		if(!strFlag.equalsIgnoreCase(""))
        		{
        			if(strFlag.equalsIgnoreCase("sameUserSession"))
        			{
        				context.removeAttribute("msg");
        				context.removeAttribute("msg1");
        			}
        			else if(strFlag.equalsIgnoreCase("BODCheck"))
        			{
        				context.setAttribute("msg", "B");
        			}
        			return mapping.findForward("logout");
        		}
			
			if(session.getAttribute("leadno")!=null)
			{
				leadno=session.getAttribute("leadno").toString();
			}
			else if(session.getAttribute("maxId")!=null)
			{
				leadno=session.getAttribute("maxId").toString();
			}
			String leadCapt = request.getParameter("leadno");
			LoggerMsg.info("------------------------------------------------" + leadCapt);

//			String leadCapt = request.getParameter("leadno");
			LeadCaptureVo ob= new LeadCaptureVo();
			String tracking = (String) session.getAttribute("leadpageid");

			
			DynaValidatorForm LeadProcessingDynaValidatorForm= (DynaValidatorForm)form;
			org.apache.commons.beanutils.BeanUtils.copyProperties(ob, LeadProcessingDynaValidatorForm);

			 LeadProcessingRemote lp = (LeadProcessingRemote) LookUpInstanceFactory.getLookUpInstance(LeadProcessingRemote.REMOTE_IDENTITY, request);
			 
			
			ArrayList<Object> getCommonLeadData = lp.getCommonLeadData(ob,tracking);
			

			LoggerMsg.info("In LeadCapturingAction getexistingData().... ");
			LoggerMsg.info("In LeadCapturingAction.........");
				request.setAttribute("list",getCommonLeadData);
				request.setAttribute("alocation", "alocation");
				return mapping.findForward("success");

			}
		}