/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.CreditProcessingNotepadVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/**
 * MyEclipse Struts Creation date: 03-05-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class CreditProcessingNotepadAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(CreditProcessingNotepadAction.class.getName());
	public ActionForward saveNotepadData(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		logger.info("Inside CreditProcessingNotepadAction(saveNotepadData)");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate="";
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();				
		}else{
			logger.info("here in saveNotepadData method of CreditProcessingNotepadAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
//		session.removeAttribute("leadNo");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		DynaValidatorForm CreditProcessingNotepadDynaValidatorActionForm = (DynaValidatorForm) form;

		CreditProcessingNotepadVo cr = new CreditProcessingNotepadVo();
		cr.setUserId("" + userId);

		String dealId = "";

		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		logger.info("In CreditProcessingNotepadAction(saveNotepadData) dealid: "+ dealId);

		String loanId = "";

		if (session.getAttribute("loanId") != null)
		{

			loanId = session.getAttribute("loanId").toString();
		} 
		else if (session.getAttribute("maxIdInCM") != null) {
			loanId = session.getAttribute("maxIdInCM").toString();
		}

		logger.info("In CreditProcessingNotepadAction(saveNotepadData) loan id: "+ loanId);

		cr.setMakerDate(bDate);
		org.apache.commons.beanutils.BeanUtils.copyProperties(cr,CreditProcessingNotepadDynaValidatorActionForm);
		cr.setDealId(dealId);
		cr.setLoanId(loanId);
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 			// changed by asesh
		//CreditProcessingDAO service = new CreditProcessingDAOImpl();
		boolean status = service.saveNotepadData(cr);
		if (status) {

			request.setAttribute("sms", "S");
		} else {

			request.setAttribute("sms", "E");
		}
		String leadPage = CommonFunction.checkNull(request.getParameter("status"));
		if (loanId != null && !loanId.equalsIgnoreCase("")) {
			ArrayList list = service.getNotepadData(loanId,"LIM");
			ArrayList listInloan = service.getNotepadDataInLoanInit(loanId,"DC");
			request.setAttribute("listInloan", listInloan);
			request.setAttribute("list", list);
			ArrayList leadList = service.getLeadNotepadData(loanId,"LT");
			request.setAttribute("leadList", leadList);
		} else {
			request.setAttribute("status", leadPage);
			ArrayList leadList = service.getLeadNotepadDataCP(dealId,"LT");
			request.setAttribute("leadList", leadList);
			ArrayList list = service.getNotepadData(dealId,"DC");
			request.setAttribute("list", list);
		}
		ArrayList noteCode = service.getNoteCode();
		request.setAttribute("noteCode", noteCode);
		
		return mapping.getInputForward();
	}
}