/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Logger;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.commons.lang.StringEscapeUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.financialDao.FinancialDAO;
import com.cp.vo.CommonDealVo;
import com.cp.vo.FinancialAnalysisVo;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import com.login.roleManager.UserObject;
import com.connect.ConnectionDAO;

/** 
 * MyEclipse Struts
 * Creation date: 10-15-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class FinancialAnalysisBehindAction extends DispatchAction {
	DecimalFormat myFormatter = new DecimalFormat("###,##0.00");
	private static final Logger logger = Logger.getLogger(FinancialAnalysisBehindAction.class.getName());
	public ActionForward balanceSheetBehindDetail(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		logger.info("in financialBalanceSheetBehindDetail................ ");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String businessDate="";
		
		if(userobj!=null)
		{				
			businessDate=userobj.getBusinessdate();			
		}else{
			logger.info("here in balanceSheetBehindDetail method ofFinancialAnalysisBehindAction  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		//FinancialDAO dao = new FinancialDAOImpl();
		FinancialDAO dao=(FinancialDAO)DaoImplInstanceFactory.getDaoImplInstance(FinancialDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass());

		 String dealId="";
		    if(session.getAttribute("financialDealId")!=null)
			 {
				 dealId = session.getAttribute("financialDealId").toString();
			 }

			FinancialAnalysisVo vo = new FinancialAnalysisVo();
			String lbxCustomerId = CommonFunction.checkNull(request.getParameter("lbxCustomerId"));
			 logger.info("lbxCustomerId-------"+lbxCustomerId);
			CommonDealVo vo1 = new  CommonDealVo();
			 vo1.setCustomerId(lbxCustomerId);
			  vo1.setSourceType("B");
			    vo1.setLbxDealNo(dealId);
			    vo1.setDealNo(dealId);
		//	 ArrayList paramListDeal = dao.getdealAllParamDeatils(vo1);
			 ArrayList paramList =new ArrayList();
			// if(paramListDeal!=null && paramListDeal.size()==0)
		      paramList = dao.getParamDetailDetails("B");
		   // ArrayList paramMinusList = dao.getParamMinusDetails("B");
		    
	
			
			Date date;
			DateFormat formatter ; 
			formatter = new SimpleDateFormat("dd-MM-yyyy");
		
				date =(Date)formatter.parse(businessDate);
			
				 System.out.println("businessDate: " +businessDate);
				 SimpleDateFormat simpleDateformat=new SimpleDateFormat("yyyy");
				 int year =Integer.parseInt(simpleDateformat.format(date));

//Code by sanjog for set previous & forwarded Year
				 int previousYear = 0;
				 int j = dao.getYearForFinancialAnalysis();				 
				 for(int i=1; i<=j; i++){
					 previousYear = year - i;
					 String setYear = "year"+(j-i);
					 if(i != j){
						 request.setAttribute(setYear, previousYear);
					 }else{
						 request.setAttribute("year"+j, year);
					 }
					 logger.info("============================"+request.getAttribute("year"+i));
				 }
				 for(int i=j+1; i<=5; i++){
					 year  = year + 1;
					 request.setAttribute("year"+i, year);
					 logger.info("============================"+request.getAttribute("year"+i));
				 }
				 session.setAttribute("dealIdForFFAAndFA",dealId);   //Added By Sarvesh
//Code by sanjog for set previous & forwarded Year

		 if(paramList.size()>0)
		 {
		    request.setAttribute("paramList", paramList);
		    logger.info("paramList size----------------->"+paramList.size());
		 }
		 /*else
		 {
			 request.setAttribute("balanceSheetAllDetailsByDeal", paramListDeal);
			    logger.info("paramListDeal size----------------->"+paramListDeal.size());
			 
		 }
		 */
		return mapping.findForward("balanceSheet");
	}
	
	public ActionForward profitAndLossBehindDetail(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		
		logger.info("in profitAndLossBehindDetail .....................");
		
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			String businessDate="";
			if(userobj!=null)
			{
				businessDate=userobj.getBusinessdate();
			}else{
				logger.info("here in profitAndLossBehindDetail method of FinancialAnalysisBehindAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			FinancialDAO dao=(FinancialDAO)DaoImplInstanceFactory.getDaoImplInstance(FinancialDAO.IDENTITY);
			logger.info("Implementation class: "+dao.getClass());
			String dealId="";
			  if(session.getAttribute("financialDealId")!=null)
				 {
					 dealId = session.getAttribute("financialDealId").toString();
				 }
				
				FinancialAnalysisVo vo = new FinancialAnalysisVo();
				CommonDealVo vo1 = new  CommonDealVo();
				String lbxCustomerId = CommonFunction.checkNull(request.getParameter("lbxCustomerId"));
				 logger.info("lbxCustomerId-------"+lbxCustomerId);
				  vo1.setCustomerId(lbxCustomerId);
				  vo1.setSourceType("P");
				    vo1.setLbxDealNo(dealId);
				    vo1.setDealNo(dealId);
				/* ArrayList paramListDeal = dao.getdealAllParamDeatils(vo1);*/
				 ArrayList paramList =new ArrayList();
				/* if(paramListDeal!=null && paramListDeal.size()==0)*/
			      paramList = dao.getParamDetailDetails("P");
			  //  ArrayList paramMinusList = dao.getParamMinusDetails("P");
		
				
				Date date;
				DateFormat formatter ; 
				formatter = new SimpleDateFormat("dd-MM-yyyy");
			
				date =(Date)formatter.parse(businessDate);
				
				SimpleDateFormat simpleDateformat=new SimpleDateFormat("yyyy");
				int year =Integer.parseInt(simpleDateformat.format(date));
				
//Code by sanjog for set previous & forwarded Year
				 int previousYear = 0;
				 int j = dao.getYearForFinancialAnalysis();				 
				 for(int i=1; i<=j; i++){
					 previousYear = year - i;
					 String setYear = "year"+(j-i);
					 if(i != j){
						 request.setAttribute(setYear, previousYear);
					 }else{
						 request.setAttribute("year"+j, year);
					 }
					 logger.info("============================"+request.getAttribute("year"+i));
				 }
				 for(int i=j+1; i<=5; i++){
					 year  = year + 1;
					 request.setAttribute("year"+i, year);
					 logger.info("============================"+request.getAttribute("year"+i));
				 }
				 
//Code by sanjog for set previous & forwarded Year
			 if(paramList.size()>0)
			 {
			    request.setAttribute("paramList", paramList);
			 }	  
			/* if(paramMinusList.size()>0)
			 {
			    request.setAttribute("paramMinusList", paramMinusList);
			    logger.info("paramMinusList size------------->"+paramMinusList.size());
			 }  */
		
			// request.setAttribute("profitAndLoss", "profitAndLoss");	
			 session.setAttribute("dealIdForFFAAndFA",dealId);   //Added By Sarvesh
		if(session.getAttribute("financialDealId")!=null)
		{
			return mapping.findForward("profitAndLoss");
		 }
		 request.setAttribute("back", "back");
		 //request.setAttribute("profitAndLoss", "profitAndLoss");
		 return mapping.findForward("balanceSheet");
		
	}
	
	public ActionForward othersBehindDetail(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		logger.info("in othersBehindDetail .....................");
		HttpSession session =  request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String businessDate="";
		if(userobj!=null)
		{
				businessDate=userobj.getBusinessdate();
		}else{
			logger.info("here in othersBehindDetail method of FinancialAnalysisBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		String dealId="";
		FinancialDAO dao=(FinancialDAO)DaoImplInstanceFactory.getDaoImplInstance(FinancialDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass());
	    if(session.getAttribute("financialDealId")!=null)
		 {
			 dealId = session.getAttribute("financialDealId").toString();
		 }
	
	    CommonDealVo vo1 = new  CommonDealVo();
	    String lbxCustomerId = CommonFunction.checkNull(request.getParameter("lbxCustomerId"));
	    logger.info("lbxCustomerId-------"+lbxCustomerId);
		  vo1.setCustomerId(lbxCustomerId);
		  vo1.setSourceType("O");
		    vo1.setLbxDealNo(dealId);
		    vo1.setDealNo(dealId);
		/* ArrayList paramListDeal = dao.getdealAllParamDeatils(vo1);*/
		 ArrayList paramList =new ArrayList();
		 /*if(paramListDeal!=null && paramListDeal.size()==0)*/
	      paramList = dao.getParamDetailDetails("O");
		//FinancialAnalysisVo vo = new FinancialAnalysisVo();
	   // ArrayList paramMinusList = dao.getParamMinusDetails("O");
	    //Code By arun for Default Obligation  Starts here
	    CommonDealVo vo=new CommonDealVo();
	    vo.setDealNo(dealId);
	
	    CommonDealVo nVo=dao.getPremValueForOtherPerm(vo);
     
		request.setAttribute("currObligation", nVo.getObligationPram());
		request.setAttribute("totalDr", nVo.getTotalDrPram());
		request.setAttribute("totalCr", nVo.getTotalCrPram());
		//Code By arun for Default Obligation
		
		
		Date date;
		DateFormat formatter ; 
		formatter = new SimpleDateFormat("dd-MM-yyyy");
	
		date =(Date)formatter.parse(businessDate);
		
		SimpleDateFormat simpleDateformat=new SimpleDateFormat("yyyy");
		int year =Integer.parseInt(simpleDateformat.format(date));

//Code by sanjog for set previous & forwarded Year
		 int previousYear = 0;
		 int j = dao.getYearForFinancialAnalysis();				 
		 for(int i=1; i<=j; i++){
			 previousYear = year - i;
			 String setYear = "year"+(j-i);
			 if(i != j){
				 request.setAttribute(setYear, previousYear);
			 }else{
				 request.setAttribute("year"+j, year);
			 }
			 logger.info("============================"+request.getAttribute("year"+i));
		 }
		 for(int i=j+1; i<=5; i++){
			 year  = year + 1;
			 request.setAttribute("year"+i, year);
			 logger.info("============================"+request.getAttribute("year"+i));
		 }
		 
//Code by sanjog for set previous & forwarded Year
		
	 if(paramList.size()>0)
	 {
	    request.setAttribute("paramList", paramList);
	 }
	/* if(paramMinusList.size()>0)
	 {
	    request.setAttribute("paramMinusList", paramMinusList);
	    logger.info("paramMinusList size------------->"+paramMinusList.size());
	 }*/
	 //request.setAttribute("others", "others");
	 session.setAttribute("dealIdForFFAAndFA",dealId);  //Added By Sarvesh
		if(session.getAttribute("financialDealId")!=null)
		{
			return mapping.findForward("others");
		}
			 request.setAttribute("back", "back");
			 return mapping.findForward("balanceSheet");
	}
	
	public ActionForward ratioAnalysisBehindDetail(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		HttpSession session =  request.getSession();
		logger.info("in ratioAnalysisBehindDetail .....................");
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String businessDate="";
		String userID="";
		if(userobj!=null)
		{
			businessDate=userobj.getBusinessdate();
			userID=userobj.getUserId();
		}else{
			logger.info("here in ratioAnalysisBehindDetail method of FinancialAnalysisBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		String dealId="";
		boolean flag =false;
	    if(session.getAttribute("financialDealId")!=null)
		 {
			 dealId = session.getAttribute("financialDealId").toString();
		 }
	    FinancialDAO dao=(FinancialDAO)DaoImplInstanceFactory.getDaoImplInstance(FinancialDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass());
		ArrayList paramList = dao.getRatioParamDetails("R");
		
	
		
		Date date;
		DateFormat formatter ; 
		formatter = new SimpleDateFormat("dd-MM-yyyy");
	
		date =(Date)formatter.parse(businessDate);
		
		SimpleDateFormat simpleDateformat=new SimpleDateFormat("yyyy");
		int year =Integer.parseInt(simpleDateformat.format(date));

//Code by sanjog for set previous & forwarded Year
		 int previousYear = 0;
		 int j = dao.getYearForFinancialAnalysis();				 
		 String[] analysisYear=new String[6];
		 
		 analysisYear[1]=year-(j-1)+0+"";
		 analysisYear[2]=year-(j-1)+1+"";
		 analysisYear[3]=year-(j-1)+2+"";
		 analysisYear[4]=year-(j-1)+3+"";
		 analysisYear[5]=year-(j-1)+4+"";
		 
		 for(int i=1; i<=j; i++){
			 previousYear = year - i;
			 String setYear = "year"+(j-i);
			 if(i != j){
				 request.setAttribute(setYear, previousYear);
			 }else{
				 request.setAttribute("year"+j, year);
			 }
			 logger.info("============================"+request.getAttribute("year"+i));
		 }
		 for(int i=j+1; i<=5; i++){
			 year  = year + 1;
			 request.setAttribute("year"+i, year);
			 logger.info("============================"+request.getAttribute("year"+i));
		 }
		 
//Code by sanjog for set previous & forwarded Year
		CommonDealVo dealVo = new CommonDealVo();
		dealVo.setLbxDealNo(dealId);
		dealVo.setLbxCustomerRoleType("PRAPPL");
		
		ArrayList<Object> in =new ArrayList<Object>();
		ArrayList<Object> out =new ArrayList<Object>();
		ArrayList outMessages = new ArrayList();
		String s1="";
		String s2="";
		String	date1=CommonFunction.changeFormat(businessDate);
		in.add(dealId);
		in.add(date1);
		in.add(userID);
		out.add(s1);
		out.add(s2);
		ArrayList ratioAnalysisList = new ArrayList();
		try{
		outMessages=(ArrayList) ConnectionDAO.callSP("INSERT_RATIO_ANALYSIS_DTL",in,out);
		s1=CommonFunction.checkNull(outMessages.get(0));
		s2=CommonFunction.checkNull(outMessages.get(1));
	
		 ratioAnalysisList = dao. getdealAllParamDeatilsForRatio(dealId);
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		 logger.info("size of list .............................. "+ratioAnalysisList.size());
		    request.setAttribute("ratioAnalysisList", ratioAnalysisList);
	/*if(paramList.size()>0)
	 {
		dao. getdealAllParamDeatilsForRatio(dealVo);
		 //ArrayList balanceSheetList = dao. getdealAllParamDeatils(dealVo);
		 ArrayList ratioParamValue = new ArrayList();
		
		 ArrayList ratioAnalysisList = new ArrayList();
		 ScriptEngineManager mgr = new ScriptEngineManager();
		 ScriptEngine engine = mgr.getEngineByName("JavaScript");
		 for(int i=0 ; i< paramList.size() ; i++)
		 {
			 	   flag =false;
					FinancialAnalysisVo  vo = (FinancialAnalysisVo)paramList.get(i);
					String ratioCode=vo.getParameCode();
					String ratioExprFstYear ="";
					String ratioExprSecYear ="";
					String ratioExprThrdYear ="";
					String ratioExprForthYear ="";
					String ratioExprFifthYear ="";
					
					ratioExprFstYear =vo.getRatioExpr();
					ratioExprSecYear =vo.getRatioExpr();
					ratioExprThrdYear =vo.getRatioExpr();
					ratioExprForthYear =vo.getRatioExpr();
					ratioExprFifthYear =vo.getRatioExpr();
					
					FinancialAnalysisVo ratioVo = new FinancialAnalysisVo();
						if(balanceSheetList!=null)
						{
								for(int k=0;k<balanceSheetList.size();k++)
								{
							
								FinancialAnalysisVo vo1 = new FinancialAnalysisVo();
								vo1 = (FinancialAnalysisVo) balanceSheetList.get(k);
								
								
								String paramCodeInExpr = vo1.getParameCode();
								
								
								if(ratioExprFstYear.indexOf(paramCodeInExpr) >= 0)
								{
									ratioVo.setRatioParamCode(vo.getParameCode());
									ratioVo.setRatioName(vo.getRatioName());
									String yearValue1= myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo1.getFirstYear()).trim())).toString();
									String yearValue2=myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo1.getSecondYear()).trim())).toString();
									String yearValue3=myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo1.getThirdYear()).trim())).toString();
									String yearValue4=myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo1.getFourthYear()).trim())).toString();
									String yearValue5=myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo1.getFifthYear()).trim())).toString();
									yearValue1="("+yearValue1+")";
									yearValue2="("+yearValue2+")";
									yearValue3="("+yearValue3+")";
									yearValue4="("+yearValue4+")";
									yearValue5="("+yearValue5+")";
									ratioExprFstYear =ratioExprFstYear.replaceAll(paramCodeInExpr,yearValue1);
									ratioExprSecYear = ratioExprSecYear.replaceAll(paramCodeInExpr,yearValue2); 
									ratioExprThrdYear = ratioExprThrdYear.replaceAll(paramCodeInExpr,yearValue3);
									ratioExprForthYear = ratioExprForthYear.replaceAll(paramCodeInExpr,yearValue4);
									ratioExprFifthYear =ratioExprFifthYear.replaceAll(paramCodeInExpr,yearValue5);
							
									
									flag=true;
								}	
									
								}		
						}
						
					
					logger.info("ratioExprFstYear 111111111.............. "+ratioExprFstYear);
//					
					BigDecimal d1 = new BigDecimal("0.00");
					if(flag)
					{
					
							
							try{
								if(!CommonFunction.checkNull(engine.eval(ratioExprFstYear)+"").equalsIgnoreCase(""))
					    		{
									logger.info("engine.eval(ratioExprFstYear) ******************************** "+engine.eval(ratioExprFstYear));
									 d1= new BigDecimal(engine.eval(ratioExprFstYear)+"");//) engine.eval(ratioExprFstYear);
									 
									logger.info("eval first year ******************************** "+d1);
									Number reconNum =myFormatter.parse(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(engine.eval(ratioExprFstYear)+"")).trim());  
					    			ratioVo.setRatioFirstYear(myFormatter.format(reconNum));
					    		}
							}
							catch (Exception e) {
								logger.info("eval first year is not correct ");
								ratioVo.setRatioFirstYear("0.00");
								e.printStackTrace();
							}
							
							try{
								if(!CommonFunction.checkNull(engine.eval(ratioExprSecYear)+"").equalsIgnoreCase(""))
					    		{
								 d1=new BigDecimal(engine.eval(ratioExprSecYear)+"");// (BigDecimal) engine.eval(ratioExprSecYear);
								logger.info("eval second year ******************************** "+d1);
								Number reconNum =myFormatter.parse(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(engine.eval(ratioExprSecYear)+"")).trim());  
				    			ratioVo.setRatioSecondYear(myFormatter.format(reconNum));
					    		}
							}
							catch (Exception e) {
								logger.info("eval second year is not correct ");
								ratioVo.setRatioSecondYear("0.00");
								e.printStackTrace();
							}
			    			
							try{
								if(!CommonFunction.checkNull(engine.eval(ratioExprThrdYear)+"").equalsIgnoreCase(""))
					    		{
								 d1= new BigDecimal(engine.eval(ratioExprThrdYear)+""); //(Double) engine.eval(ratioExprThrdYear);
								logger.info("eval third year ******************************** "+d1);
								Number reconNum =myFormatter.parse(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(engine.eval(ratioExprThrdYear)+"")).trim());  
				    			ratioVo.setRatioThirdYear(myFormatter.format(reconNum));
					    		}
							}
							catch (Exception e) {
								logger.info("eval third year is not correct ");
								ratioVo.setRatioThirdYear("0.00");
								e.printStackTrace();
							}
						
						
							try{
								if(!CommonFunction.checkNull(engine.eval(ratioExprForthYear)+"").equalsIgnoreCase(""))
					    		{
								 d1= new BigDecimal(engine.eval(ratioExprForthYear)+"");// (Double) engine.eval(ratioExprForthYear);
								logger.info("eval fourth year ******************************** "+d1);
								Number reconNum =myFormatter.parse(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(engine.eval(ratioExprForthYear)+"")).trim());  
				    			ratioVo.setRatioFourthYear(myFormatter.format(reconNum));
					    		}
							}
							catch (Exception e) {
								logger.info("eval fourth year is not correct ");
								ratioVo.setRatioFourthYear("0.00");
								e.printStackTrace();
							}
						
							try{
								if(!CommonFunction.checkNull(engine.eval(ratioExprFifthYear)+"").equalsIgnoreCase(""))
					    		{
								 d1=new BigDecimal(engine.eval(ratioExprFifthYear)+"");// (Double) engine.eval(ratioExprFifthYear);
								logger.info("eval fifth year ******************************** "+d1);
								Number reconNum =myFormatter.parse(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(engine.eval(ratioExprFifthYear)+"")).trim());  
				    			ratioVo.setRatioFifthYear(myFormatter.format(reconNum));
					    		}
							}
							catch (Exception e) {
								logger.info("eval fifth year is not correct ");
								ratioVo.setRatioFifthYear("0.00");
								e.printStackTrace();
							}
							String benchBranchRatio=dao.benchBranchRatioList(ratioCode,dealId);
							ratioVo.setBenchBranchRatio(benchBranchRatio);	
							ratioAnalysisList.add(ratioVo);
					}
					else
					{
						logger.info("flag ........................ "+flag);
						ratioVo.setRatioParamCode(vo.getParameCode());
						ratioVo.setRatioName(vo.getRatioName());
						ratioVo.setRatioFirstYear("0.00");
						ratioVo.setRatioSecondYear("0.00");
						ratioVo.setRatioThirdYear("0.00");
						ratioVo.setRatioFourthYear("0.00");
						ratioVo.setRatioFifthYear("0.00");
						String benchBranchRatio=dao.benchBranchRatioList(ratioCode,dealId);
						ratioVo.setBenchBranchRatio(benchBranchRatio);
						ratioAnalysisList.add(ratioVo);
					}

		 }
		//start by sachin
		// boolean status = dao.insertCorRatioData(ratioAnalysisList,dealId,userID,businessDate,analysisYear);
		//end by sachin
		 session.setAttribute("dealIdForFFAAndFA",dealId);   //Added by Sarvesh
		 logger.info("size of list .............................. "+ratioAnalysisList.size());
	    request.setAttribute("ratioAnalysisList", ratioAnalysisList);
	 }*/
		    session.setAttribute("dealIdForFFAAndFA",dealId);   //Added by Sarvesh
		if(session.getAttribute("financialDealId")!=null)
		{
			
			return mapping.findForward("obligation");
			
		}
			 request.setAttribute("back", "back");
			 return mapping.findForward("balanceSheet");
	}
	
}