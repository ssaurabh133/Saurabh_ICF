/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cibil.actions;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.StringReader;
import java.net.Socket;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.ResourceBundle;

import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.export.JRHtmlExporter;
import net.sf.jasperreports.engine.export.JRHtmlExporterParameter;
import net.sf.jasperreports.j2ee.servlets.ImageServlet;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.taglib.html.RewriteTag;
import org.apache.struts.validator.DynaValidatorForm;

import com.cibil.dao.CibilVerificationDAO;
import com.cibil.vo.CibilVerificationVO;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.cibil.vo.CrifVO;
import com.itextpdf.text.Document;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.html.simpleparser.HTMLWorker;

/** 
 * MyEclipse Struts
 * Creation date: 10-03-2012
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class CibilVerificationInitiationDispatchAction extends DispatchAction 
{
	private static final Logger logger = Logger.getLogger(CibilVerificationInitiationDispatchAction.class.getName());
	static boolean fs = false;
	public ActionForward cibilVerificationInition(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)throws Exception 
	{
		logger.info("In cibilVerificationInition() OF CibilVerificationInitiationDispatchAction");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");		
		if(userobj==null)
		{
			logger.info("here in openSpecialCondition method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}	
		strFlag=null;
		return mapping.findForward("success");
	}
	public ActionForward cibilVerificationSearch(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)throws Exception 
	{
	
		logger.info("In cibilVerificationSearch() OF CibilVerificationInitiationDispatchAction");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");		
		if(userobj==null)
		{
			logger.info("here in openSpecialCondition method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			strFlag=null;
			return mapping.findForward("logout");
		}	
		//saveToken(request);// Save Token Before Loading jsp in any case
		CibilVerificationVO vo=new CibilVerificationVO();
		DynaValidatorForm formbeen= (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, formbeen);
		
		CibilVerificationDAO dao=(CibilVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(CibilVerificationDAO.IDENTITY);
		
        logger.info("Implementation class: "+dao.getClass());
       // String dealID=vo.getDealID();
        String dealID=vo.getDealID();
        ArrayList gridList=dao.getCVGridList(vo);
        request.setAttribute("custName", vo.getCustName());
        request.setAttribute("lbxLeadId", vo.getLbxLeadId());
        request.setAttribute("leadno", vo.getLeadno());
        request.setAttribute("gridList",gridList);
        session.setAttribute("dealID", dealID);
        form.reset(mapping, request);
        return mapping.findForward("success");
	}
	public ActionForward openPreDealData(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)throws Exception 
	{
	
		logger.info("In openPreDealData() OF CibilVerificationInitiationDispatchAction");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");		
		if(userobj==null)
		{
			logger.info("here in openSpecialCondition method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			strFlag=null;
			return mapping.findForward("logout");
		}	
		//saveToken(request);// Save Token Before Loading jsp in any case
		CibilVerificationVO vo=new CibilVerificationVO();
		DynaValidatorForm formbeen= (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, formbeen);
		String leadId=request.getParameter("leadId").toString();
		vo.setLbxLeadId(leadId);
		String LeadId=vo.getLbxLeadId();
		CibilVerificationDAO dao=(CibilVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(CibilVerificationDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 
        ArrayList gridList=dao.getpreDealGridList(vo);
        ArrayList roleList=dao.getRoleList(leadId);
        request.setAttribute("roleList", roleList);
        request.setAttribute("gridList",gridList);
        request.setAttribute("custName", vo.getCustName());
        request.setAttribute("lbxLeadId", vo.getLbxLeadId());
        request.setAttribute("leadno", vo.getLeadno());
        session.setAttribute("LeadId", LeadId);
        String qry1="select COUNT(1) from cr_lead_customer_m WHERE DEDUPE_DECISION is null and lead_id='"+leadId+"' ";
        int dedupeCount=Integer.parseInt(ConnectionDAO.singleReturn(qry1));
        if(dedupeCount>0){
        	
        	request.setAttribute("dedupe", "dedupe");
        }
        String qr2="select max(deal_id) from cr_deal_dtl where lead_id='"+leadId+"'";
        String dealId=ConnectionDAO.singleReturn(qr2);
        
        String qr3="select count(1) from cr_instrument_dtl where TXNID='"+dealId+"' and txn_type='DC' and rec_status in ('F','A','D','R')";
        int imdCount=Integer.parseInt(ConnectionDAO.singleReturn(qr3));
        String qr4="select PRODUCT from cr_lead_dtl where lead_id='"+leadId+"'";
        String product=ConnectionDAO.singleReturn(qr4);
        if(CommonFunction.checkNull(product).equalsIgnoreCase("LAP")){
        if(imdCount==0){
        
        	request.setAttribute("imd", "imd");
        }
        }
        form.reset(mapping, request);
        return mapping.findForward("success");
	}
	
	public ActionForward cibilVerificationSave(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)throws Exception 
	{
		logger.info("In cibilVerificationSave() OF CibilVerificationInitiationDispatchAction");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");	
		String businessDate="";
		String companyId="";
		String userId = "";
		String msg="";
		if(userobj==null)
		{
			logger.info("here in openSpecialCondition method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		else
		{
			businessDate=userobj.getBusinessdate();
			companyId = userobj.getCompanyId()+"";
			userId = userobj.getUserId();
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String functionId="";
		if(session.getAttribute("functionId")!=null)
		{
			functionId=session.getAttribute("functionId").toString();
		}
		//if(isTokenValid(request,true)){	
		String dealID=request.getParameter("dealID");
		String customerId=request.getParameter("customerId");
		
		logger.info("customerId---------------"+customerId);
		CibilVerificationDAO dao=(CibilVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(CibilVerificationDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 
		boolean update=true;
		boolean status=true;
	/*	 if(!CommonFunction.checkNull(customerId).equalsIgnoreCase("")) 
	        {
			ArrayList responseList=dao.SaveRecord(dealID,customerId,businessDate);
			boolean update=true;
			boolean status=true;
			int i=0;
			if(responseList.size()>0)
			for(i=0;i<responseList.size();i++)
			{
				ArrayList subList=(ArrayList)responseList.get(i);
				if(subList.size()!=2)
					break;
				String cibilId=(String)subList.get(0);
				String frdString=(String)subList.get(1);
				logger.info("forwarded string: >>>>>>>>>>>>>>>>>>>>>>"+frdString); 
				String resString=WriteOnSocket(frdString);
				update=dao.updateResString(cibilId,resString);
				String reportstatus=dao.GenerateView(cibilId);//CALLING OF CIBIL_OUTPUTSTRING_GENERATOR
				if(!update)
					break;
				if(CommonFunction.checkNull(resString).equalsIgnoreCase("") )
				{
					status=false;
				}
				else
				{
					status=true;
				}
				cibilId=null;
				frdString=null;
				resString=null;
				subList.clear();
			}
			else
			status=false;
			
			if(i!=responseList.size())
				status=true;
			
			if(status)
				request.setAttribute("success","success");
			else
				request.setAttribute("error","error");
	        }*/
		//pooja code for crif Start
			String prodCat=ConnectionDAO.singleReturn("select ifnull(LOAN_TYPE,'') from cr_deal_loan_dtl "+
			//"join cr_productcategory_m on cr_productcategory_m.PRODUCT_CATEGORY=cr_deal_loan_dtl.DEAL_PRODUCT_CATEGORY "+
			" where deal_id='"+dealID+"' ");
			String LOAN_TYPE=ConnectionDAO.singleReturn("select ifnull(DEAL_PRODUCT,'') from cr_deal_loan_dtl "+
			//"join cr_productcategory_m on cr_productcategory_m.PRODUCT_CATEGORY=cr_deal_loan_dtl.DEAL_PRODUCT_CATEGORY "+
			" where deal_id='"+dealID+"' ");
			String Branch=ConnectionDAO.singleReturn("select ifnull(cbm.BRANCH_DESC,'') from cr_deal_Dtl c "+
					" left join com_branch_m cbm on cbm.BRANCH_ID=c.DEAL_BRANCH where  deal_id='"+dealID+"' ");
			String[] customer=null;
			if(!CommonFunction.checkNull(customerId).equalsIgnoreCase("")) 
	        {
				customer=customerId.split(",");
				int[] custID = new int[customer.length]; 
				for(int i1=0; i1<custID.length;i1++){
				logger.info(customer[i1]);	
				custID[i1] =Integer.parseInt(customer[i1].trim());
				logger.info(custID[i1]);

				String NAME1=ConnectionDAO.singleReturn("select ifnull(CUSTOMER_FNAME,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String NAME2=ConnectionDAO.singleReturn("select ifnull(CUSTOMER_MNAME,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String NAME3=ConnectionDAO.singleReturn("select ifnull(CUSTOMER_LNAME,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String CUSTOMER_DOB=ConnectionDAO.singleReturn("select ifnull(date_format(CUSTOMER_DOB,'%d-%m-%Y'),'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String age=ConnectionDAO.singleReturn("SELECT DATE_FORMAT(FROM_DAYS(DATEDIFF(NOW(), CUSTOMER_DOB)), '%Y')+0 AS age from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String ageAsOn=ConnectionDAO.singleReturn("SELECT date_format(NOW(),'%d-%m-%Y') ");
				
				String custmer_PAN=ConnectionDAO.singleReturn("select ifnull(custmer_PAN,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String driving_license=ConnectionDAO.singleReturn("select ifnull(driving_license,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String voter_id=ConnectionDAO.singleReturn("select ifnull(voter_id,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String PASSPORT_NUMBER=ConnectionDAO.singleReturn("select ifnull(PASSPORT_NUMBER,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String FATHER_HUSBAND_NAME=ConnectionDAO.singleReturn("select ifnull(FATHER_HUSBAND_NAME,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String MOTHER_NAME=ConnectionDAO.singleReturn("select ifnull(MOTHER_NAME,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String CUSTOMER_EMAIL=ConnectionDAO.singleReturn("select ifnull(CUSTOMER_EMAIL,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String PRIMARY_PHONE=ConnectionDAO.singleReturn("select ifnull(PRIMARY_PHONE,'') from CR_DEAL_ADDRESS_M WHERE COMMUNICATION_ADDRESS='Y'  and BPTYPE='CS' and BPID='"+custID[i1]+"'");
				String GENDER=ConnectionDAO.singleReturn("select ifnull(GENDER,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String MARITAL_STATUS=ConnectionDAO.singleReturn("select ifnull(MARITAL_STATUS,'')  as MARITAL_STATUS from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String FACTORY=ConnectionDAO.singleReturn("select IFNULL( CONCAT(IFNULL(per.PLOT_NO,''),'  ',IFNULL(per.ADDRESS_LINE3,''),'  ',IFNULL(per.ADDRESS_LINE2,''),'  ',IFNULL(per.FLOOR_NO,''),'  ',IFNULL(per.ADDRESS_LINE1,''),'  ',IFNULL(per.LANDMARK,'')),'') as MA_PMA_ADD "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per ON(g.DEAL_CUSTOMER_ID  = per.BPID AND per.COMMUNICATION_ADDRESS='Y'  and per.BPTYPE='CS' )  where deal_id='"+dealID+"' ");
				String Address_Type=ConnectionDAO.singleReturn("select per.ADDRESS_TYPE "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per ON(g.DEAL_CUSTOMER_ID  = per.BPID AND per.COMMUNICATION_ADDRESS='Y'  and per.BPTYPE='CS' )  where deal_id='"+dealID+"' ");
				String FACTORY_CITY=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.COMMUNICATION_ADDRESS='Y'  and per.BPTYPE='CS' "
						+ "left join com_district_m jper on jper.district_id = per.district where deal_id='"+dealID+"' ");
				String FACTORY_STATE=ConnectionDAO.singleReturn("select IFNULL(iper.ckyc_code,'') as MA_PMA_STE "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.COMMUNICATION_ADDRESS='Y'  and per.BPTYPE='CS' "
						+ "left join com_state_m iper on iper.state_id = per.state where deal_id='"+dealID+"' ");
				String FACTORY_PINCODE=ConnectionDAO.singleReturn("select IFNULL(per.Pincode,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.COMMUNICATION_ADDRESS='Y'  and per.BPTYPE='CS' where deal_id='"+dealID+"' ");
				
				/*String OFFICE=ConnectionDAO.singleReturn("select IFNULL( CONCAT(IFNULL(per.PLOT_NO,''),'  ',IFNULL(per.ADDRESS_LINE3,''),'  ',IFNULL(per.ADDRESS_LINE2,''),'  ',IFNULL(per.FLOOR_NO,''),'  ',IFNULL(per.ADDRESS_LINE1,''),'  ',IFNULL(per.LANDMARK,'')),'') as MA_PMA_ADD "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'OFFICE' where deal_id='"+dealID+"' ");
				String OFFICE_CITY=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'OFFICE' "
						+ "left join com_district_m jper on jper.district_id = per.district where deal_id='"+dealID+"' ");
				String OFFICE_STATE=ConnectionDAO.singleReturn("seelect IFNULL(iper.ckyc_code,'') as MA_PMA_STE "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'OFFICE' "
						+ "left join com_state_m iper on iper.state_id = per.state where deal_id='"+dealID+"' ");
				String OFFICE_PINCODE=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'OFFICE' where deal_id='"+dealID+"' ");
				
				String PERMANENT=ConnectionDAO.singleReturn("select IFNULL( CONCAT(IFNULL(per.PLOT_NO,''),'  ',IFNULL(per.ADDRESS_LINE3,''),'  ',IFNULL(per.ADDRESS_LINE2,''),'  ',IFNULL(per.FLOOR_NO,''),'  ',IFNULL(per.ADDRESS_LINE1,''),'  ',IFNULL(per.LANDMARK,'')),'') as MA_PMA_ADD "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'PERMANENT' where deal_id='"+dealID+"' ");
				String PERMANENT_CITY=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'PERMANENT' "
						+ "left join com_district_m jper on jper.district_id = per.district where deal_id='"+dealID+"' ");
				String PERMANENT_STATE=ConnectionDAO.singleReturn("select IFNULL(iper.ckyc_code,'') as MA_PMA_STE "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'PERMANENT' "
						+ "left join com_state_m iper on iper.state_id = per.state where deal_id='"+dealID+"' ");
				String PERMANENT_PINCODE=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'PERMANENT' where deal_id='"+dealID+"' ");
				
				String PROPERTY=ConnectionDAO.singleReturn("select IFNULL( CONCAT(IFNULL(per.PLOT_NO,''),'  ',IFNULL(per.ADDRESS_LINE3,''),'  ',IFNULL(per.ADDRESS_LINE2,''),'  ',IFNULL(per.FLOOR_NO,''),'  ',IFNULL(per.ADDRESS_LINE1,''),'  ',IFNULL(per.LANDMARK,'')),'') as MA_PMA_ADD "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'PROPERTY' where deal_id='"+dealID+"' ");
				String PROPERTY_CITY=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'PROPERTY' "
						+ "left join com_district_m jper on jper.district_id = per.district where deal_id='"+dealID+"' ");
				String PROPERTY_STATE=ConnectionDAO.singleReturn("select IFNULL(iper.ckyc_code,'') as MA_PMA_STE "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'PROPERTY' "
						+ "left join com_state_m iper on iper.state_id = per.state where deal_id='"+dealID+"' ");
				String PROPERTY_PINCODE=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'PROPERTY' where deal_id='"+dealID+"' ");
				
				String REGOFF=ConnectionDAO.singleReturn("select IFNULL( CONCAT(IFNULL(per.PLOT_NO,''),'  ',IFNULL(per.ADDRESS_LINE3,''),'  ',IFNULL(per.ADDRESS_LINE2,''),'  ',IFNULL(per.FLOOR_NO,''),'  ',IFNULL(per.ADDRESS_LINE1,''),'  ',IFNULL(per.LANDMARK,'')),'') as MA_PMA_ADD "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'REGOFF' where deal_id='"+dealID+"' ");
				String REGOFF_CITY=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'REGOFF' "
						+ "left join com_district_m jper on jper.district_id = per.district where deal_id='"+dealID+"' ");
				String REGOFF_STATE=ConnectionDAO.singleReturn("select IFNULL(iper.ckyc_code,'') as MA_PMA_STE "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'REGOFF' "
						+ "left join com_state_m iper on iper.state_id = per.state where deal_id='"+dealID+"' ");
				String REGOFF_PINCODE=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'REGOFF' where deal_id='"+dealID+"' ");	
				
				String REI=ConnectionDAO.singleReturn("select IFNULL( CONCAT(IFNULL(per.PLOT_NO,''),'  ',IFNULL(per.ADDRESS_LINE3,''),'  ',IFNULL(per.ADDRESS_LINE2,''),'  ',IFNULL(per.FLOOR_NO,''),'  ',IFNULL(per.ADDRESS_LINE1,''),'  ',IFNULL(per.LANDMARK,'')),'') as MA_PMA_ADD "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'REI' where deal_id='"+dealID+"' ");
				String REI_CITY=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'REI' "
						+ "left join com_district_m jper on jper.district_id = per.district where deal_id='"+dealID+"' ");
				String REI_STATE=ConnectionDAO.singleReturn("select IFNULL(iper.ckyc_code,'') as MA_PMA_STE "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'REI' "
						+ "left join com_state_m iper on iper.state_id = per.state where deal_id='"+dealID+"' ");
				String REI_PINCODE=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'REI' where deal_id='"+dealID+"' ");
				
				String RES=ConnectionDAO.singleReturn("select IFNULL( CONCAT(IFNULL(per.PLOT_NO,''),'  ',IFNULL(per.ADDRESS_LINE3,''),'  ',IFNULL(per.ADDRESS_LINE2,''),'  ',IFNULL(per.FLOOR_NO,''),'  ',IFNULL(per.ADDRESS_LINE1,''),'  ',IFNULL(per.LANDMARK,'')),'') as MA_PMA_ADD "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'RES' where deal_id='"+dealID+"' ");
				String RES_CITY=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'RES' "
						+ "left join com_district_m jper on jper.district_id = per.district where deal_id='"+dealID+"' ");
				String RES_STATE=ConnectionDAO.singleReturn("select IFNULL(iper.ckyc_code,'') as MA_PMA_STE "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'RES' "
						+ "left join com_state_m iper on iper.state_id = per.state where deal_id='"+dealID+"' ");
				String RES_PINCODE=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'RES' where deal_id='"+dealID+"' ");*/
String losUserId=ConnectionDAO.singleReturn("select IFNULL(PARAMETER_VALUE,'') from parameter_mst where parameter_key='CRIF_USER_ID' ");
				String LOAN_PURPOSE=ConnectionDAO.singleReturn("select IFNULL(pl.DESCRIPTION,'') from cr_deal_loan_dtl d left join generic_master pl on pl.VALUE=d.DEAL_LOAN_PURPOSE and generic_key='LOAN_PURPOSE' and pl.parent_value=d.deal_product where d.deal_id='"+dealID+"' ");
				String APPLICATION_DATE=ConnectionDAO.singleReturn("SELECT ifnull(date_format(DEAL_INITIATION_DATE,'%d-%m-%Y'),'') from cr_Deal_Dtl where deal_id='"+dealID+"' ");
				String APPLICATION_ID=ConnectionDAO.singleReturn("SELECT ifnull(DEAL_APPLICATION_FORM_NO,'') from cr_Deal_Dtl where deal_id='"+dealID+"' ");
				String LOAN_AMOUNT=ConnectionDAO.singleReturn("select ifnull(round(DEAL_LOAN_AMOUNT_NEW,0),'') from  cr_deal_loan_dtl where deal_id='"+dealID+"' ");
/*				String Bank_Branch=ConnectionDAO.singleReturn("SELECT ifnull(d.BANK_BRANCH_NAME,'') from cr_deal_cust_bank_details_m b left join COM_BANK_M c on b.BANK_ID=c.BANK_ID "+ 
								   " left join COM_BANKBRANCH_M d on d.BANK_BRANCH_ID=b.BANK_BRANCH_ID where  b.CUSTOMER_ID='"+custID[i1]+"' ");
				String BRANCH_IFCS_CODE=ConnectionDAO.singleReturn("SELECT ifnull(d.BRANCH_IFCS_CODE,'') from cr_deal_cust_bank_details_m b left join COM_BANK_M c on b.BANK_ID=c.BANK_ID "+ 
						   " left join COM_BANKBRANCH_M d on d.BANK_BRANCH_ID=b.BANK_BRANCH_ID where  b.CUSTOMER_ID='"+custID[i1]+"' ");*/
				logger.info("NAME1->"+NAME1 +"NAME2->"+NAME2+" NAME3->"+NAME3 + " CUSTOMER_DOB->"+CUSTOMER_DOB + 
						" age->"+age+" ageAsOn->"+ageAsOn+" custmer_PAN->"+custmer_PAN+" driving_license->"+driving_license+
						" voter_id->"+voter_id+" PASSPORT_NUMBER->"+PASSPORT_NUMBER+" FATHER_HUSBAND_NAME->"+FATHER_HUSBAND_NAME+
						" MOTHER_NAME->"+MOTHER_NAME+" CUSTOMER_EMAIL->"+CUSTOMER_EMAIL+" PRIMARY_PHONE->"+PRIMARY_PHONE+
						" GENDER->"+GENDER+" MARITAL_STATUS->"+MARITAL_STATUS);
				
				
				String xml="<REQUEST-REQUEST-FILE> "+
								"<HEADER-SEGMENT> "+
									"<PRODUCT-TYPE>LOS-PD0011</PRODUCT-TYPE> "+
									"<RES-FRMT>XML</RES-FRMT> "+
									"<LOS-NAME>OmniFin</LOS-NAME> "+
									"<LOS-VENDER>A3S</LOS-VENDER> "+
									"<LOS-VERSION>4.0</LOS-VERSION> "+
									"<USER-ID>"+losUserId+"</USER-ID> "+
								"</HEADER-SEGMENT> "+
								"<APPLICANT-SEGMENT> "+
									"<APPLICANT-NAME> "+
										"<NAME1>"+NAME1+"</NAME1> "+
										"<NAME2>"+NAME2+"</NAME2> "+
										"<NAME3>"+NAME3+"</NAME3> "+
										"<NAME4></NAME4> "+
										"<NAME5></NAME5> "+
									"</APPLICANT-NAME> "+
									"<DOB> "+
										"<DOB-DATE>"+CUSTOMER_DOB+"</DOB-DATE> "+
										"<AGE>"+age+"</AGE> "+
										"<AGE-AS-ON>"+ageAsOn+"</AGE-AS-ON> "+
									"</DOB> "+
									"<IDS> "+
										"<ID> "+
											"<TYPE>Voter ID</TYPE> "+
											"<VALUE>"+voter_id+"</VALUE> "+
										"</ID> "+
										"<ID> "+
											"<TYPE>PAN</TYPE> "+
											"<VALUE>"+custmer_PAN+"</VALUE> "+
										"</ID> "+
										"<ID> "+
											"<TYPE>PASSPORT</TYPE> "+
											"<VALUE>"+PASSPORT_NUMBER+"</VALUE> "+
										"</ID> "+
										"<ID> "+
											"<TYPE>DRIVING LICENCE NO</TYPE> "+
											"<VALUE>"+driving_license+"</VALUE> "+
										"</ID> "+
									"</IDS> "+
									"<RELATIONS> "+
										"<RELATION> "+
											"<TYPE>FATHER</TYPE> "+
											"<VALUE>"+FATHER_HUSBAND_NAME+"</VALUE> "+
										"</RELATION> "+
										"<RELATION> "+
											"<TYPE>MOTHER</TYPE> "+
											"<VALUE>"+MOTHER_NAME+"</VALUE> "+
										"</RELATION> "+
										"<RELATION> "+
											"<TYPE>SPOUSE</TYPE> "+
											"<VALUE></VALUE> "+
										"</RELATION> "+
									"</RELATIONS> "+
									"<PHONES> "+
										"<PHONE> "+
											"<TYPE>MOBILE</TYPE> "+
											"<VALUE>"+PRIMARY_PHONE+"</VALUE> "+
										"</PHONE> "+
										"<PHONE> "+
											"<TYPE>COMPANY</TYPE> "+
											"<VALUE></VALUE> "+
										"</PHONE> "+
									"</PHONES> "+
									"<EMAILS> "+
										"<EMAIL> "+
											"<VALUE>"+CUSTOMER_EMAIL+"</VALUE> "+
										"</EMAIL> "+
									"</EMAILS> "+
									"<GENDER>"+GENDER+"</GENDER> "+
									"<MARITAL-STATUS>"+MARITAL_STATUS+"</MARITAL-STATUS> "+
									"<ENTITY-ID>eNTITY123</ENTITY-ID> "+
									"<ADDRESSES> "+
										"<ADDRESS> "+
											"<TYPE>"+Address_Type+"</TYPE> "+
											"<ADDRESS-1><![CDATA["+FACTORY+"]]></ADDRESS-1> "+
											"<CITY>"+FACTORY_CITY+"</CITY> "+
											"<STATE>"+FACTORY_STATE+"</STATE> "+
											"<PINCODE>"+FACTORY_PINCODE+"</PINCODE> "+
										"</ADDRESS> "+
									"</ADDRESSES> "+
								"</APPLICANT-SEGMENT> "+
								"<APPLICATION-SEGMENT> "+
									"<LOAN-TYPE>"+LOAN_TYPE+"</LOAN-TYPE> "+
									"<LOAN-PURPOSE>"+LOAN_TYPE+"</LOAN-PURPOSE> "+
									"<APPLICATION-DATE>"+APPLICATION_DATE+"</APPLICATION-DATE> "+
									"<CONSUMER-ID>"+custID[i1]+"</CONSUMER-ID> "+
									"<APPLICATION-ID>"+APPLICATION_ID+"</APPLICATION-ID> "+
									"<LOAN-AMOUNT>"+LOAN_AMOUNT+"</LOAN-AMOUNT> "+
									"<BRANCH>"+Branch+"</BRANCH> "+
									"<KENDRA>asd</KENDRA> "+
									"<IFSC-CODE>123</IFSC-CODE> "+
									"<BRANCH-STATE>MH</BRANCH-STATE> "+
									"<OWNERSHIP-INDICATOR>OWR</OWNERSHIP-INDICATOR> "+
								"</APPLICATION-SEGMENT> "+
							"</REQUEST-REQUEST-FILE>";
				
				/*String xml="<?xml version='1.0' encoding='UTF-8'?> "
						+"<REQUEST-REQUEST-FILE> 	<HEADER-SEGMENT> 		<PRODUCT-TYPE>LOS-PD0011</PRODUCT-TYPE> 		<RES-FRMT>XML</RES-FRMT> 		<LOS-NAME>FINNONE</LOS-NAME> 		<LOS-VENDER>NUCLEUS</LOS-VENDER> 		<LOS-VERSION>0</LOS-VERSION> 			</HEADER-SEGMENT> 	<APPLICANT-SEGMENT> 		<APPLICANT-NAME> 			<NAME1>Nitin</NAME1> 			<NAME2>RAKESH</NAME2> 			<NAME3>Jain</NAME3> 			<NAME4>Aswini</NAME4> 			<NAME5>Sandy</NAME5> 			</APPLICANT-NAME> 		<DOB> 			<DOB-DATE>06-08-1979</DOB-DATE> 			<AGE>23</AGE> 			<AGE-AS-ON>31-12-2013</AGE-AS-ON> 		</DOB> 		<IDS> 			 <ID> 				<TYPE>Voter ID</TYPE> 				<VALUE>UP1123456</VALUE> 			</ID> 			<ID> 				<TYPE>PAN</TYPE> 				<VALUE>AFUPJ7365N</VALUE> 			</ID> 			<ID> 				<TYPE>PASSPORT</TYPE> 				<VALUE>BRFPK8937D</VALUE> 			</ID> 			<ID> 				<TYPE>DRIVING LICENCE NO</TYPE> 				<VALUE>MP12N456789J</VALUE> 			</ID> 			<!-- <ID> 				<TYPE>CIN</TYPE> 				<VALUE>U74130MH2005PTC216732</VALUE> 			</ID> -->  		</IDS> 		<RELATIONS> 			<RELATION> 				<TYPE>FATHER</TYPE> 				<VALUE>RAKESH JAIN</VALUE> 			</RELATION> 			<RELATION> 				<TYPE>MOTHER</TYPE> 				<VALUE>ALKA</VALUE> 			</RELATION> 			<RELATION> 				<TYPE>SPOUSE</TYPE> 				<VALUE>ASHWINI</VALUE> 			</RELATION> 		</RELATIONS> 		<PHONES> 			<PHONE> 				<TYPE>MOBILE</TYPE> 				<VALUE>2810806979</VALUE> 			</PHONE> 			<PHONE> 				<TYPE>COMPANY</TYPE> 				<VALUE>9359444410</VALUE> 			</PHONE> 		</PHONES> 		<EMAILS>  			<EMAIL>nitin.jain@gmail.com</EMAIL> 		</EMAILS> 		<GENDER>MALE</GENDER> 		<MARITAL-STATUS>UNMARRIED</MARITAL-STATUS> 		<ENTITY-ID>eNTITY123</ENTITY-ID> 		<EMPLOYER_CATEGORY>cat4</EMPLOYER_CATEGORY> 		<EMPLOYER_CONSTT>Salaried</EMPLOYER_CONSTT> 		<NET-INCOME>750000</NET-INCOME> 		<RESIDENTIAL_STATUS>RSD</RESIDENTIAL_STATUS> 		<ADDRESSES>  			<ADDRESS> 				<TYPE>Res cum Off</TYPE> 				<ADDRESS-1> 				<![CDATA[GANGA ELECTRICALS SHOP, SHOP NO 3 JAIN MANDIR]]> 				</ADDRESS-1> 				<CITY>SAHARANPUR</CITY> 				<STATE>UP</STATE> 				<PINCODE>247001</PINCODE> 			</ADDRESS> 			<ADDRESS> 				<TYPE>DP Default</TYPE> 				<ADDRESS-1><![CDATA[GANGA ELECTRICALS, SHOP NO 3 JAIN MANDIR]]></ADDRESS-1> 				<CITY>SAHARANPUR</CITY> 				<STATE>UP</STATE> 				<PINCODE>247001</PINCODE> 			</ADDRESS>    			<ADDRESS> 				<TYPE>Un Tagged</TYPE> 				<ADDRESS-1><![CDATA[GANGA VIDYUT, SHOP NO 3 JAIN MANDIR]]></ADDRESS-1> 				<CITY>SAHARANPUR</CITY> 				<STATE>UP</STATE> 				<PINCODE>247001</PINCODE> 			</ADDRESS> 		</ADDRESSES> 	</APPLICANT-SEGMENT> 	<APPLICATION-SEGMENT> 		<LOAN-TYPE>Auto Loan</LOAN-TYPE> 		<LOAN-PURPOSE>general</LOAN-PURPOSE> 		<APPLICATION-DATE>09-10-2014</APPLICATION-DATE> 		<CONSUMER-ID>201812123</CONSUMER-ID> 		<APPLICATION-ID>201812123</APPLICATION-ID> 		<LOAN-AMOUNT>50000</LOAN-AMOUNT> 		<BRANCH>UP</BRANCH> 		<KENDRA>SAHARANPUR</KENDRA> 		<IFSC-CODE>00001234UP</IFSC-CODE> 		<BRANCH-STATE>UP</BRANCH-STATE> 		<OWNERSHIP-INDICATOR>OWR</OWNERSHIP-INDICATOR> 		<PORTFOLIO_NAME>MORTGAGE</PORTFOLIO_NAME> 		<CL_SEGMENT>PB</CL_SEGMENT> 		<CREDIT_PROGRAM>BNKPRG</CREDIT_PROGRAM> 		<APPLICANT_CATEGORY>Organization</APPLICANT_CATEGORY> 		<CUSTOMER_PROFILE>PARTNER</CUSTOMER_PROFILE> 	</APPLICATION-SEGMENT> </REQUEST-REQUEST-FILE>";*/
				logger.info("crif xml ->"+xml);
				String CrifuserId=dao.getCRIFUserId();
				String password=dao.getCRIFPassword();
				String stageID="DC";
				CrifVO CrifVO =new CrifVO();
				CrifVO.setRequestXML(xml);
				CrifVO.setUserId(CrifuserId);
				CrifVO.setPassword(password);
				/*CrifVO.setMbrid(mbrid);
				CrifVO.setProductType(productType);
				CrifVO.setProductVersion(productVersion);*/
				CrifVO.setDealId(dealID);
				CrifVO.setApplicantCustId(custID[i1]);
				CrifVO.setApplicantName(NAME1);
				CrifVO.setMakerId(userId);
				CrifVO.setMakerDate(businessDate);
				CrifVO.setStageID(stageID);
				CrifVO.setFunctionId(functionId);
				/*CrifVO.setReqVolType(reqVolType);*/
				//responseString=dao.sendCrifRequest(CrifVO);
				//String crifId=dao.saveCrifDetail(dealID,customer[i1],CrifVO);
				//CrifVO.setCrifId(crifId);
				ArrayList responseList=dao.SaveRecord(dealID,custID[i1],businessDate);
				int i=0;
				if(responseList.size()>0)
					for(i=0;i<responseList.size();i++)
					{
						ArrayList subList=(ArrayList)responseList.get(i);
						String cibilId=(String)subList.get(0);
						CrifVO.setCibilId(cibilId);
					}
				msg=dao.sendCrifRequest(CrifVO);
				if(!CommonFunction.checkNull(msg).equalsIgnoreCase("") ){
					if(CommonFunction.checkNull(msg).equalsIgnoreCase("E") ){
						request.setAttribute("error", msg);
					}else{
					request.setAttribute("errorResponse", msg);
					}
				}
	        }
				Thread.sleep(30000);
				request.setAttribute("success",msg);
	        }
			
     
		//Pooja code for crif end
	        else
	        {
	        	request.setAttribute("msg","msg");
	        }
	        if(update && true)
	        {
	        	String businessDateQuery="SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='BUSINESS_DATE'";
	        	String bdate=ConnectionDAO.singleReturn(businessDateQuery);
	        String checkStageM=CommonFunction.stageMovement(companyId, "DC","F",dealID, "CBL", businessDate,userId);
			  logger.info("checkStageM : "+checkStageM);
	        }
			
			businessDate=null;
			strFlag=null;
			dealID=null;
			customerId=null;
			//responseList.clear();
			//}
			//saveToken(request);// Save Token Before Loading jsp in any case
			return mapping.findForward("success");			
		}		
/*        if(!CommonFunction.checkNull(customerId).equalsIgnoreCase("")) 
        {
		ArrayList responseList=dao.SaveRecord(dealID,customerId,businessDate);
		boolean update=true;
		boolean status=true;
		int i=0;
		if(responseList.size()>0)
		for(i=0;i<responseList.size();i++)
		{
			ArrayList subList=(ArrayList)responseList.get(i);
			if(subList.size()!=2)
				break;
			String cibilId=(String)subList.get(0);
			String frdString=(String)subList.get(1);
			logger.info("forwarded string: >>>>>>>>>>>>>>>>>>>>>>"+frdString); 
			String resString=WriteOnSocket(frdString);
			update=dao.updateResString(cibilId,resString); 
			if(!update)
				break;
			if(CommonFunction.checkNull(resString).equalsIgnoreCase("") )
			{
				status=false;
			}
			else
			{
				status=true;
			}
			cibilId=null;
			frdString=null;
			resString=null;
			subList.clear();
		}
		else
		status=false;
		
		if(i!=responseList.size())
			status=true;
		
		if(status)
			request.setAttribute("success","success");
		else
			request.setAttribute("error","error");
        }*/
		//pooja code for crif Start
			/*String prodCat=ConnectionDAO.singleReturn("select ifnull(LOAN_TYPE,'') from cr_deal_loan_dtl "+
			//"join cr_productcategory_m on cr_productcategory_m.PRODUCT_CATEGORY=cr_deal_loan_dtl.DEAL_PRODUCT_CATEGORY "+
			" where deal_id='"+dealID+"' ");
			String LOAN_TYPE=ConnectionDAO.singleReturn("select ifnull(DEAL_PRODUCT,'') from cr_deal_loan_dtl "+
			//"join cr_productcategory_m on cr_productcategory_m.PRODUCT_CATEGORY=cr_deal_loan_dtl.DEAL_PRODUCT_CATEGORY "+
			" where deal_id='"+dealID+"' ");
			String[] customer=null;
			if(!CommonFunction.checkNull(customerId).equalsIgnoreCase("")) 
	        {
				customer=customerId.split(",");
				int[] custID = new int[customer.length]; 
				for(int i1=0; i1<custID.length;i1++){
				custID[i1] =Integer.parseInt(customer[i1]);
				logger.info(custID[i1]);

				String NAME1=ConnectionDAO.singleReturn("select ifnull(CUSTOMER_FNAME,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String NAME2=ConnectionDAO.singleReturn("select ifnull(CUSTOMER_MNAME,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String NAME3=ConnectionDAO.singleReturn("select ifnull(CUSTOMER_LNAME,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String CUSTOMER_DOB=ConnectionDAO.singleReturn("select ifnull(date_format(CUSTOMER_DOB,'%d-%m-%Y'),'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String age=ConnectionDAO.singleReturn("SELECT DATE_FORMAT(FROM_DAYS(DATEDIFF(NOW(), CUSTOMER_DOB)), '%Y')+0 AS age from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String ageAsOn=ConnectionDAO.singleReturn("SELECT date_format(NOW(),'%d-%m-%Y') ");
				
				String custmer_PAN=ConnectionDAO.singleReturn("select ifnull(custmer_PAN,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String UID_NO=ConnectionDAO.singleReturn("select ifnull(UID_NO,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String driving_license=ConnectionDAO.singleReturn("select ifnull(driving_license,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String voter_id=ConnectionDAO.singleReturn("select ifnull(voter_id,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String PASSPORT_NUMBER=ConnectionDAO.singleReturn("select ifnull(PASSPORT_NUMBER,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String FATHER_HUSBAND_NAME=ConnectionDAO.singleReturn("select ifnull(FATHER_HUSBAND_NAME,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String MOTHER_NAME=ConnectionDAO.singleReturn("select ifnull(MOTHER_FIRST_NAME,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String CUSTOMER_EMAIL=ConnectionDAO.singleReturn("select ifnull(CUSTOMER_EMAIL,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String PRIMARY_PHONE=ConnectionDAO.singleReturn("select ifnull(PRIMARY_PHONE,'') from CR_DEAL_ADDRESS_M WHERE COMMUNICATION_ADDRESS='Y'  and BPTYPE='CS' and BPID='"+custID[i1]+"'");
				String GENDER=ConnectionDAO.singleReturn("select ifnull(GENDER,'') from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String MARITAL_STATUS=ConnectionDAO.singleReturn("select ifnull(if(MARITAL_STATUS='M','02','01'),'')  as MARITAL_STATUS from cr_deal_customer_m WHERE CUSTOMER_ID='"+custID[i1]+"'");
				String FACTORY=ConnectionDAO.singleReturn("select IFNULL( CONCAT(IFNULL(per.ADDRESS_LINE3,''),'  ',IFNULL(per.ADDRESS_LINE2,''),'  ',IFNULL(per.ADDRESS_LINE1,''),'  ',IFNULL(per.LANDMARK,'')),'') as MA_PMA_ADD "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per ON(g.DEAL_CUSTOMER_ID  = per.BPID AND per.COMMUNICATION_ADDRESS='Y'  and per.BPTYPE='CS' )  where deal_id='"+dealID+"' ");
				String Address_Type=ConnectionDAO.singleReturn("select per.ADDRESS_TYPE "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per ON(g.DEAL_CUSTOMER_ID  = per.BPID AND per.COMMUNICATION_ADDRESS='Y'  and per.BPTYPE='CS' )  where deal_id='"+dealID+"' ");
				String FACTORY_CITY=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.COMMUNICATION_ADDRESS='Y'  and per.BPTYPE='CS' "
						+ "left join com_district_m jper on jper.district_id = per.district where deal_id='"+dealID+"' ");
				String FACTORY_STATE=ConnectionDAO.singleReturn("select IFNULL(iper.CRIF_CODE,'') as MA_PMA_STE "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.COMMUNICATION_ADDRESS='Y'  and per.BPTYPE='CS' "
						+ "left join com_state_m iper on iper.state_id = per.state where deal_id='"+dealID+"' ");
				String FACTORY_PINCODE=ConnectionDAO.singleReturn("select IFNULL(per.Pincode,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.COMMUNICATION_ADDRESS='Y'  and per.BPTYPE='CS' where deal_id='"+dealID+"' ");
				
				String OFFICE=ConnectionDAO.singleReturn("select IFNULL( CONCAT(IFNULL(per.PLOT_NO,''),'  ',IFNULL(per.ADDRESS_LINE3,''),'  ',IFNULL(per.ADDRESS_LINE2,''),'  ',IFNULL(per.FLOOR_NO,''),'  ',IFNULL(per.ADDRESS_LINE1,''),'  ',IFNULL(per.LANDMARK,'')),'') as MA_PMA_ADD "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'OFFICE' where deal_id='"+dealID+"' ");
				String OFFICE_CITY=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'OFFICE' "
						+ "left join com_district_m jper on jper.district_id = per.district where deal_id='"+dealID+"' ");
				String OFFICE_STATE=ConnectionDAO.singleReturn("seelect IFNULL(iper.ckyc_code,'') as MA_PMA_STE "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'OFFICE' "
						+ "left join com_state_m iper on iper.state_id = per.state where deal_id='"+dealID+"' ");
				String OFFICE_PINCODE=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'OFFICE' where deal_id='"+dealID+"' ");
				
				String PERMANENT=ConnectionDAO.singleReturn("select IFNULL( CONCAT(IFNULL(per.PLOT_NO,''),'  ',IFNULL(per.ADDRESS_LINE3,''),'  ',IFNULL(per.ADDRESS_LINE2,''),'  ',IFNULL(per.FLOOR_NO,''),'  ',IFNULL(per.ADDRESS_LINE1,''),'  ',IFNULL(per.LANDMARK,'')),'') as MA_PMA_ADD "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'PERMANENT' where deal_id='"+dealID+"' ");
				String PERMANENT_CITY=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'PERMANENT' "
						+ "left join com_district_m jper on jper.district_id = per.district where deal_id='"+dealID+"' ");
				String PERMANENT_STATE=ConnectionDAO.singleReturn("select IFNULL(iper.ckyc_code,'') as MA_PMA_STE "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'PERMANENT' "
						+ "left join com_state_m iper on iper.state_id = per.state where deal_id='"+dealID+"' ");
				String PERMANENT_PINCODE=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'PERMANENT' where deal_id='"+dealID+"' ");
				
				String PROPERTY=ConnectionDAO.singleReturn("select IFNULL( CONCAT(IFNULL(per.PLOT_NO,''),'  ',IFNULL(per.ADDRESS_LINE3,''),'  ',IFNULL(per.ADDRESS_LINE2,''),'  ',IFNULL(per.FLOOR_NO,''),'  ',IFNULL(per.ADDRESS_LINE1,''),'  ',IFNULL(per.LANDMARK,'')),'') as MA_PMA_ADD "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'PROPERTY' where deal_id='"+dealID+"' ");
				String PROPERTY_CITY=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'PROPERTY' "
						+ "left join com_district_m jper on jper.district_id = per.district where deal_id='"+dealID+"' ");
				String PROPERTY_STATE=ConnectionDAO.singleReturn("select IFNULL(iper.ckyc_code,'') as MA_PMA_STE "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'PROPERTY' "
						+ "left join com_state_m iper on iper.state_id = per.state where deal_id='"+dealID+"' ");
				String PROPERTY_PINCODE=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'PROPERTY' where deal_id='"+dealID+"' ");
				
				String REGOFF=ConnectionDAO.singleReturn("select IFNULL( CONCAT(IFNULL(per.PLOT_NO,''),'  ',IFNULL(per.ADDRESS_LINE3,''),'  ',IFNULL(per.ADDRESS_LINE2,''),'  ',IFNULL(per.FLOOR_NO,''),'  ',IFNULL(per.ADDRESS_LINE1,''),'  ',IFNULL(per.LANDMARK,'')),'') as MA_PMA_ADD "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'REGOFF' where deal_id='"+dealID+"' ");
				String REGOFF_CITY=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'REGOFF' "
						+ "left join com_district_m jper on jper.district_id = per.district where deal_id='"+dealID+"' ");
				String REGOFF_STATE=ConnectionDAO.singleReturn("select IFNULL(iper.ckyc_code,'') as MA_PMA_STE "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'REGOFF' "
						+ "left join com_state_m iper on iper.state_id = per.state where deal_id='"+dealID+"' ");
				String REGOFF_PINCODE=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'REGOFF' where deal_id='"+dealID+"' ");	
				
				String REI=ConnectionDAO.singleReturn("select IFNULL( CONCAT(IFNULL(per.PLOT_NO,''),'  ',IFNULL(per.ADDRESS_LINE3,''),'  ',IFNULL(per.ADDRESS_LINE2,''),'  ',IFNULL(per.FLOOR_NO,''),'  ',IFNULL(per.ADDRESS_LINE1,''),'  ',IFNULL(per.LANDMARK,'')),'') as MA_PMA_ADD "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'REI' where deal_id='"+dealID+"' ");
				String REI_CITY=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'REI' "
						+ "left join com_district_m jper on jper.district_id = per.district where deal_id='"+dealID+"' ");
				String REI_STATE=ConnectionDAO.singleReturn("select IFNULL(iper.ckyc_code,'') as MA_PMA_STE "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'REI' "
						+ "left join com_state_m iper on iper.state_id = per.state where deal_id='"+dealID+"' ");
				String REI_PINCODE=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'REI' where deal_id='"+dealID+"' ");
				
				String RES=ConnectionDAO.singleReturn("select IFNULL( CONCAT(IFNULL(per.PLOT_NO,''),'  ',IFNULL(per.ADDRESS_LINE3,''),'  ',IFNULL(per.ADDRESS_LINE2,''),'  ',IFNULL(per.FLOOR_NO,''),'  ',IFNULL(per.ADDRESS_LINE1,''),'  ',IFNULL(per.LANDMARK,'')),'') as MA_PMA_ADD "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'RES' where deal_id='"+dealID+"' ");
				String RES_CITY=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'RES' "
						+ "left join com_district_m jper on jper.district_id = per.district where deal_id='"+dealID+"' ");
				String RES_STATE=ConnectionDAO.singleReturn("select IFNULL(iper.ckyc_code,'') as MA_PMA_STE "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'RES' "
						+ "left join com_state_m iper on iper.state_id = per.state where deal_id='"+dealID+"' ");
				String RES_PINCODE=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
						+ "from cr_deal_dtl g "
						+ "left join cr_deal_address_m per on g.DEAL_CUSTOMER_ID  = per.BPID and per.ADDRESS_TYPE = 'RES' where deal_id='"+dealID+"' ");

				String LOAN_PURPOSE=ConnectionDAO.singleReturn("select IFNULL(pl.DESCRIPTION,'') from cr_deal_loan_dtl d left join generic_master pl on pl.VALUE=d.DEAL_LOAN_PURPOSE and generic_key='LOAN_PURPOSE' and pl.parent_value=d.deal_product where d.deal_id='"+dealID+"' ");
				String APPLICATION_DATE=ConnectionDAO.singleReturn("SELECT ifnull(date_format(DEAL_INITIATION_DATE,'%d-%m-%Y'),'') from cr_Deal_Dtl where deal_id='"+dealID+"' ");
				String APPLICATION_ID=ConnectionDAO.singleReturn("SELECT ifnull(DEAL_APPLICATION_FORM_NO,'') from cr_Deal_Dtl where deal_id='"+dealID+"' ");
				String LOAN_AMOUNT=ConnectionDAO.singleReturn("select ifnull(round(DEAL_LOAN_AMOUNT_NEW,0),'') from  cr_deal_loan_dtl where deal_id='"+dealID+"' ");
				String Bank_Branch=ConnectionDAO.singleReturn("SELECT ifnull(d.BANK_BRANCH_NAME,'') from cr_deal_cust_bank_details_m b left join COM_BANK_M c on b.BANK_ID=c.BANK_ID "+ 
								   " left join COM_BANKBRANCH_M d on d.BANK_BRANCH_ID=b.BANK_BRANCH_ID where  b.CUSTOMER_ID='"+custID[i1]+"' ");
				String BRANCH_IFCS_CODE=ConnectionDAO.singleReturn("SELECT ifnull(d.BRANCH_IFCS_CODE,'') from cr_deal_cust_bank_details_m b left join COM_BANK_M c on b.BANK_ID=c.BANK_ID "+ 
						   " left join COM_BANKBRANCH_M d on d.BANK_BRANCH_ID=b.BANK_BRANCH_ID where  b.CUSTOMER_ID='"+custID[i1]+"' ");
				logger.info("NAME1->"+NAME1 +"NAME2->"+NAME2+" NAME3->"+NAME3 + " CUSTOMER_DOB->"+CUSTOMER_DOB + 
						" age->"+age+" ageAsOn->"+ageAsOn+" custmer_PAN->"+custmer_PAN+" driving_license->"+driving_license+
						" voter_id->"+voter_id+" PASSPORT_NUMBER->"+PASSPORT_NUMBER+" FATHER_HUSBAND_NAME->"+FATHER_HUSBAND_NAME+
						" MOTHER_NAME->"+MOTHER_NAME+" CUSTOMER_EMAIL->"+CUSTOMER_EMAIL+" PRIMARY_PHONE->"+PRIMARY_PHONE+
						" GENDER->"+GENDER+" MARITAL_STATUS->"+MARITAL_STATUS);
				
				String xml="<?xml version='1.0' encoding='UTF-8'?> "+
							"<REQUEST-REQUEST-FILE> "+
								"<HEADER-SEGMENT> "+
									"<PRODUCT-TYPE>LOS-PD0011</PRODUCT-TYPE> "+
									"<RES-FRMT>XML</RES-FRMT> "+
									"<LOS-NAME>OmniFin</LOS-NAME> "+
									"<LOS-VENDER>A3S</LOS-VENDER> "+
									"<LOS-VERSION>4.0</LOS-VERSION> "+
									"<USER-ID>"+userId+"</USER-ID> "+
								"</HEADER-SEGMENT> "+
								"<APPLICANT-SEGMENT> "+
									"<APPLICANT-NAME> "+
										"<NAME1>"+NAME1+"</NAME1> "+
										"<NAME2>"+NAME2+"</NAME2> "+
										"<NAME3>"+NAME3+"</NAME3> "+
										"<NAME4></NAME4> "+
										"<NAME5></NAME5> "+
									"</APPLICANT-NAME> "+
									"<DOB> "+
										"<DOB-DATE>"+CUSTOMER_DOB+"</DOB-DATE> "+
										"<AGE>"+age+"</AGE> "+
										"<AGE-AS-ON>"+ageAsOn+"</AGE-AS-ON> "+
									"</DOB> "+
									"<IDS> "+
										"<ID> "+
											"<TYPE>P03</TYPE> "+
											"<VALUE>"+voter_id+"</VALUE> "+
										"</ID> "+
										"<ID> "+
											"<TYPE>P01</TYPE> "+
											"<VALUE>"+custmer_PAN+"</VALUE> "+
										"</ID> "+
										"<ID> "+
											"<TYPE>P02</TYPE> "+
											"<VALUE>"+UID_NO+"</VALUE> "+
										"</ID> "+
										"<ID> "+
											"<TYPE>P04</TYPE> "+
											"<VALUE>"+PASSPORT_NUMBER+"</VALUE> "+
										"</ID> "+
										"<ID> "+
											"<TYPE>P05</TYPE> "+
											"<VALUE>"+driving_license+"</VALUE> "+
										"</ID> "+
									"</IDS> "+
									"<RELATIONS> "+
										"<RELATION> "+
											"<TYPE>FATHER</TYPE> "+
											"<VALUE>"+FATHER_HUSBAND_NAME+"</VALUE> "+
										"</RELATION> "+
										"<RELATION> "+
											"<TYPE>MOTHER</TYPE> "+
											"<VALUE>"+MOTHER_NAME+"</VALUE> "+
										"</RELATION> "+
										"<RELATION> "+
											"<TYPE>SPOUSE</TYPE> "+
											"<VALUE></VALUE> "+
										"</RELATION> "+
									"</RELATIONS> "+
									"<PHONES> "+
										"<PHONE> "+
											"<TYPE>T03</TYPE> "+
											"<VALUE>"+PRIMARY_PHONE+"</VALUE> "+
										"</PHONE> "+
										"<PHONE> "+
											"<TYPE>COMPANY</TYPE> "+
											"<VALUE></VALUE> "+
										"</PHONE> "+
									"</PHONES> "+
									"<EMAILS> "+
										"<EMAIL> "+
											"<VALUE>"+CUSTOMER_EMAIL+"</VALUE> "+
										"</EMAIL> "+
									"</EMAILS> "+
									"<GENDER>"+GENDER+"</GENDER> "+
									"<MARITAL-STATUS>"+MARITAL_STATUS+"</MARITAL-STATUS> "+
									"<ENTITY-ID>eNTITY123</ENTITY-ID> "+
									"<ADDRESSES> "+
										"<ADDRESS> "+
											"<TYPE>"+Address_Type+"</TYPE> "+
											"<ADDRESS-1><![CDATA["+FACTORY+"]]></ADDRESS-1> "+
											"<CITY>"+FACTORY_CITY+"</CITY> "+
											"<STATE>"+FACTORY_STATE+"</STATE> "+
											"<PINCODE>"+FACTORY_PINCODE+"</PINCODE> "+
										"</ADDRESS> "+
									"</ADDRESSES> "+
								"</APPLICANT-SEGMENT> "+
								"<APPLICATION-SEGMENT> "+
									"<LOAN-TYPE>"+LOAN_TYPE+"</LOAN-TYPE> "+
									"<LOAN-PURPOSE>"+LOAN_PURPOSE+"</LOAN-PURPOSE> "+
									"<APPLICATION-DATE>"+APPLICATION_DATE+"</APPLICATION-DATE> "+
									"<CONSUMER-ID>"+custID[i1]+"</CONSUMER-ID> "+
									"<APPLICATION-ID>"+APPLICATION_ID+"</APPLICATION-ID> "+
									"<LOAN-AMOUNT>"+LOAN_AMOUNT+"</LOAN-AMOUNT> "+
									"<BRANCH>abc</BRANCH> "+
									"<KENDRA>asd</KENDRA> "+
									"<IFSC-CODE>123</IFSC-CODE> "+
									"<BRANCH-STATE>MH</BRANCH-STATE> "+
									"<OWNERSHIP-INDICATOR>OWR</OWNERSHIP-INDICATOR> "+
								"</APPLICATION-SEGMENT> "+
							"</REQUEST-REQUEST-FILE>";
				
				String xml="<?xml version='1.0' encoding='UTF-8'?> "
						+"<REQUEST-REQUEST-FILE> 	<HEADER-SEGMENT> 		<PRODUCT-TYPE>LOS-PD0011</PRODUCT-TYPE> 		<RES-FRMT>XML</RES-FRMT> 		<LOS-NAME>FINNONE</LOS-NAME> 		<LOS-VENDER>NUCLEUS</LOS-VENDER> 		<LOS-VERSION>0</LOS-VERSION> 			</HEADER-SEGMENT> 	<APPLICANT-SEGMENT> 		<APPLICANT-NAME> 			<NAME1>Nitin</NAME1> 			<NAME2>RAKESH</NAME2> 			<NAME3>Jain</NAME3> 			<NAME4>Aswini</NAME4> 			<NAME5>Sandy</NAME5> 			</APPLICANT-NAME> 		<DOB> 			<DOB-DATE>06-08-1979</DOB-DATE> 			<AGE>23</AGE> 			<AGE-AS-ON>31-12-2013</AGE-AS-ON> 		</DOB> 		<IDS> 			 <ID> 				<TYPE>Voter ID</TYPE> 				<VALUE>UP1123456</VALUE> 			</ID> 			<ID> 				<TYPE>PAN</TYPE> 				<VALUE>AFUPJ7365N</VALUE> 			</ID> 			<ID> 				<TYPE>PASSPORT</TYPE> 				<VALUE>BRFPK8937D</VALUE> 			</ID> 			<ID> 				<TYPE>DRIVING LICENCE NO</TYPE> 				<VALUE>MP12N456789J</VALUE> 			</ID> 			<!-- <ID> 				<TYPE>CIN</TYPE> 				<VALUE>U74130MH2005PTC216732</VALUE> 			</ID> -->  		</IDS> 		<RELATIONS> 			<RELATION> 				<TYPE>FATHER</TYPE> 				<VALUE>RAKESH JAIN</VALUE> 			</RELATION> 			<RELATION> 				<TYPE>MOTHER</TYPE> 				<VALUE>ALKA</VALUE> 			</RELATION> 			<RELATION> 				<TYPE>SPOUSE</TYPE> 				<VALUE>ASHWINI</VALUE> 			</RELATION> 		</RELATIONS> 		<PHONES> 			<PHONE> 				<TYPE>MOBILE</TYPE> 				<VALUE>2810806979</VALUE> 			</PHONE> 			<PHONE> 				<TYPE>COMPANY</TYPE> 				<VALUE>9359444410</VALUE> 			</PHONE> 		</PHONES> 		<EMAILS>  			<EMAIL>nitin.jain@gmail.com</EMAIL> 		</EMAILS> 		<GENDER>MALE</GENDER> 		<MARITAL-STATUS>UNMARRIED</MARITAL-STATUS> 		<ENTITY-ID>eNTITY123</ENTITY-ID> 		<EMPLOYER_CATEGORY>cat4</EMPLOYER_CATEGORY> 		<EMPLOYER_CONSTT>Salaried</EMPLOYER_CONSTT> 		<NET-INCOME>750000</NET-INCOME> 		<RESIDENTIAL_STATUS>RSD</RESIDENTIAL_STATUS> 		<ADDRESSES>  			<ADDRESS> 				<TYPE>Res cum Off</TYPE> 				<ADDRESS-1> 				<![CDATA[GANGA ELECTRICALS SHOP, SHOP NO 3 JAIN MANDIR]]> 				</ADDRESS-1> 				<CITY>SAHARANPUR</CITY> 				<STATE>UP</STATE> 				<PINCODE>247001</PINCODE> 			</ADDRESS> 			<ADDRESS> 				<TYPE>DP Default</TYPE> 				<ADDRESS-1><![CDATA[GANGA ELECTRICALS, SHOP NO 3 JAIN MANDIR]]></ADDRESS-1> 				<CITY>SAHARANPUR</CITY> 				<STATE>UP</STATE> 				<PINCODE>247001</PINCODE> 			</ADDRESS>    			<ADDRESS> 				<TYPE>Un Tagged</TYPE> 				<ADDRESS-1><![CDATA[GANGA VIDYUT, SHOP NO 3 JAIN MANDIR]]></ADDRESS-1> 				<CITY>SAHARANPUR</CITY> 				<STATE>UP</STATE> 				<PINCODE>247001</PINCODE> 			</ADDRESS> 		</ADDRESSES> 	</APPLICANT-SEGMENT> 	<APPLICATION-SEGMENT> 		<LOAN-TYPE>Auto Loan</LOAN-TYPE> 		<LOAN-PURPOSE>general</LOAN-PURPOSE> 		<APPLICATION-DATE>09-10-2014</APPLICATION-DATE> 		<CONSUMER-ID>201812123</CONSUMER-ID> 		<APPLICATION-ID>201812123</APPLICATION-ID> 		<LOAN-AMOUNT>50000</LOAN-AMOUNT> 		<BRANCH>UP</BRANCH> 		<KENDRA>SAHARANPUR</KENDRA> 		<IFSC-CODE>00001234UP</IFSC-CODE> 		<BRANCH-STATE>UP</BRANCH-STATE> 		<OWNERSHIP-INDICATOR>OWR</OWNERSHIP-INDICATOR> 		<PORTFOLIO_NAME>MORTGAGE</PORTFOLIO_NAME> 		<CL_SEGMENT>PB</CL_SEGMENT> 		<CREDIT_PROGRAM>BNKPRG</CREDIT_PROGRAM> 		<APPLICANT_CATEGORY>Organization</APPLICANT_CATEGORY> 		<CUSTOMER_PROFILE>PARTNER</CUSTOMER_PROFILE> 	</APPLICATION-SEGMENT> </REQUEST-REQUEST-FILE>";
				logger.info("crif xml ->"+xml);
				String CrifuserId=dao.getCRIFUserId();
				String password=dao.getCRIFPassword();
				String stageID="DC";
				CrifVO CrifVO =new CrifVO();
				CrifVO.setRequestXML(xml);
				CrifVO.setUserId(CrifuserId);
				CrifVO.setPassword(password);
				CrifVO.setMbrid(mbrid);
				CrifVO.setProductType(productType);
				CrifVO.setProductVersion(productVersion);
				CrifVO.setDealId(dealID);
				CrifVO.setApplicantCustId(custID[i1]);
				CrifVO.setApplicantName(NAME1);
				CrifVO.setMakerId(userId);
				CrifVO.setMakerDate(businessDate);
				CrifVO.setStageID(stageID);
				CrifVO.setFunctionId(functionId);
				CrifVO.setReqVolType(reqVolType);
				//responseString=dao.sendCrifRequest(CrifVO);
				//String crifId=dao.saveCrifDetail(dealID,customer[i1],CrifVO);
				//CrifVO.setCrifId(crifId);
				ArrayList responseList=dao.SaveRecord(dealID,customerId,businessDate);
				int i=0;
				if(responseList.size()>0)
					for(i=0;i<responseList.size();i++)
					{
						ArrayList subList=(ArrayList)responseList.get(i);
						String cibilId=(String)subList.get(0);
						CrifVO.setCibilId(cibilId);
					}
				msg=dao.sendCrifRequest(CrifVO);
				if(!CommonFunction.checkNull(msg).equalsIgnoreCase("") ){
					if(CommonFunction.checkNull(msg).equalsIgnoreCase("E") ){
						request.setAttribute("error", msg);
					}else{
					request.setAttribute("errorResponse", msg);
					}
				}
	        }
				request.setAttribute("success",msg);
	        }
			
        
		//Pooja code for crif end
        else
        {
        	request.setAttribute("msg","msg");
        }
        if(update && true)
        {
        String checkStageM=CommonFunction.stageMovement(companyId, "DC","F",dealID, "CBL", businessDate,userId);
		  logger.info("checkStageM : "+checkStageM);
        }
		
		businessDate=null;
		strFlag=null;
		dealID=null;
		customerId=null;
		//responseList.clear();
		//}
		//saveToken(request);// Save Token Before Loading jsp in any case
		return mapping.findForward("success");			
	}	*/
	
	public ActionForward cibilVerificationPreDealSave(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)throws Exception 
	{
		logger.info("In cibilVerificationPreDealSave() OF CibilVerificationInitiationDispatchAction");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");	
		String businessDate="";
		String companyId="";
		String userId = "";
		if(userobj==null)
		{
			logger.info("here in cibilVerificationPreDealSave method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		else
		{
			businessDate=userobj.getBusinessdate();
			companyId = userobj.getCompanyId()+"";
			userId = userobj.getUserId();
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String functionId="";
		if(session.getAttribute("functionId")!=null)
		{
			functionId=session.getAttribute("functionId").toString();
		}
		//if(isTokenValid(request,true)){	
		String leadId=request.getParameter("leadId");
		String customerId=request.getParameter("customerId");
		String msg="";
		
		logger.info("customerId---------------"+customerId);
		CibilVerificationVO vo=new CibilVerificationVO();
		vo.setLbxLeadId(leadId);
		CibilVerificationDAO dao=(CibilVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(CibilVerificationDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 
		boolean update=true;
		boolean status=true;
     /*   if(!CommonFunction.checkNull(customerId).equalsIgnoreCase("")) 
        {
		ArrayList responseList=dao.SaveRecordPreDeal(leadId,customerId,businessDate);
		boolean update=true;
		boolean status=true;
		int i=0;
		if(responseList.size()>0)
		for(i=0;i<responseList.size();i++)
		{
			ArrayList subList=(ArrayList)responseList.get(i);
			if(subList.size()!=2)
				break;
			String cibilId=(String)subList.get(0);
			String frdString=(String)subList.get(1);
			logger.info("forwarded string: >>>>>>>>>>>>>>>>>>>>>>"+frdString); 
			String resString=WriteOnSocket(frdString);
			update=dao.updatePreDealResString(cibilId,resString);
			String reportstatus=dao.GenerateView(cibilId);//CALLING OF CIBIL_OUTPUTSTRING_GENERATOR
			if(!update)
				break;
			if(CommonFunction.checkNull(resString).equalsIgnoreCase("") )
			{
				status=false;
			}
			else
			{
				status=true;
			}
			cibilId=null;
			frdString=null;
			resString=null;
			subList.clear();
		}
		else
		status=false;
		
		if(i!=responseList.size())
			status=true;
		
		if(status)
			request.setAttribute("success","success");
		else
			request.setAttribute("error","error");
        }
        else
        {
        	request.setAttribute("msg","msg");
        }
        ArrayList gridList=dao.getpreDealGridList(vo);
        ArrayList roleList=dao.getRoleList(leadId);
        request.setAttribute("roleList", roleList);
        request.setAttribute("gridList",gridList);
        request.setAttribute("custName", vo.getCustName());
        request.setAttribute("lbxLeadId", vo.getLbxLeadId());
        request.setAttribute("leadno", vo.getLeadno());
		businessDate=null;
		strFlag=null;
		leadId=null;*/
		//pooja code for crif Start
				/*String prodCat=ConnectionDAO.singleReturn("select ifnull(LOAN_TYPE,'') from cr_deal_loan_dtl "+
				//"join cr_productcategory_m on cr_productcategory_m.PRODUCT_CATEGORY=cr_deal_loan_dtl.DEAL_PRODUCT_CATEGORY "+
				" where deal_id='"+leadId+"' ");*/
				String LOAN_TYPE=ConnectionDAO.singleReturn("select ifnull(product,'') from cr_lead_dtl "+
				//"join cr_productcategory_m on cr_productcategory_m.PRODUCT_CATEGORY=cr_deal_loan_dtl.DEAL_PRODUCT_CATEGORY "+
				" where lead_id='"+leadId+"' ");
				String Branch=ConnectionDAO.singleReturn("select ifnull(cbm.BRANCH_desc,'') from cr_lead_Dtl c "+
				" left join com_branch_m cbm on cbm.BRANCH_ID=c.BRANCH_ID where lead_id='"+leadId+"' ");
				String[] customer=null;
				if(!CommonFunction.checkNull(customerId).equalsIgnoreCase("")) 
		        {
					customer=customerId.split(",");
					int[] custID = new int[customer.length]; 
					for(int i1=0; i1<custID.length;i1++){
					custID[i1] =Integer.parseInt(customer[i1]);
					logger.info(custID[i1]);

					String NAME1=ConnectionDAO.singleReturn("select ifnull(CUSTOMER_FNAME,'') from CR_LEAD_CUSTOMER_M WHERE CUSTOMER_ID='"+custID[i1]+"'");
					//String NAME2=ConnectionDAO.singleReturn("select ifnull(MIDDLE_NAME,'') from CR_LEAD_DTL  WHERE CUSTOMER_ID='"+custID[i1]+"'");
					String NAME2=ConnectionDAO.singleReturn("select ifnull(CUSTOMER_MNAME,'') from CR_LEAD_CUSTOMER_M WHERE CUSTOMER_ID='"+custID[i1]+"'");
					String NAME3=ConnectionDAO.singleReturn("select ifnull(CUSTOMER_LNAME,'') from CR_LEAD_CUSTOMER_M WHERE CUSTOMER_ID='"+custID[i1]+"'");
					String CUSTOMER_DOB=ConnectionDAO.singleReturn("select ifnull(date_format(CUSTOMER_DOB,'%d-%m-%Y'),'') from CR_LEAD_CUSTOMER_M WHERE CUSTOMER_ID='"+custID[i1]+"'");
					String age=ConnectionDAO.singleReturn("SELECT DATE_FORMAT(FROM_DAYS(DATEDIFF(NOW(), CUSTOMER_DOB)), '%Y')+0 AS age from CR_LEAD_CUSTOMER_M WHERE CUSTOMER_ID='"+custID[i1]+"'");
					String ageAsOn=ConnectionDAO.singleReturn("SELECT date_format(NOW(),'%d-%m-%Y') ");
					
					String custmer_PAN=ConnectionDAO.singleReturn("select ifnull(PAN,'') from CR_LEAD_CUSTOMER_M WHERE CUSTOMER_ID='"+custID[i1]+"'");
					String driving_license=ConnectionDAO.singleReturn("select ifnull(DRIVING_LICENSE,'') from CR_LEAD_CUSTOMER_M WHERE CUSTOMER_ID='"+custID[i1]+"'");
					String voter_id=ConnectionDAO.singleReturn("select ifnull(VOTER_ID,'') from CR_LEAD_CUSTOMER_M WHERE CUSTOMER_ID='"+custID[i1]+"'");
					String PASSPORT_NUMBER=ConnectionDAO.singleReturn("select ifnull(PASSPORT_NUMBER,'') from CR_LEAD_CUSTOMER_M WHERE CUSTOMER_ID='"+custID[i1]+"'");
					String FATHER_HUSBAND_NAME=ConnectionDAO.singleReturn("select ifnull(FATHER_HUSBAND_NAME,'') from CR_LEAD_CUSTOMER_M WHERE CUSTOMER_ID='"+custID[i1]+"'");
					//String MOTHER_NAME=ConnectionDAO.singleReturn("select ifnull(MOTHER_NAME,'') from CR_LEAD_CUSTOMER_M WHERE CUSTOMER_ID='"+custID[i1]+"'");
					String CUSTOMER_EMAIL=ConnectionDAO.singleReturn("select ifnull(EMAIL_ID,'') from CR_LEAD_CUSTOMER_M WHERE CUSTOMER_ID='"+custID[i1]+"'");
					String PRIMARY_PHONE=ConnectionDAO.singleReturn("select ifnull(PRIMARY_PHONE,'') from CR_LEAD_CUSTOMER_M WHERE  CUSTOMER_ID='"+custID[i1]+"'");
					String GENDER=ConnectionDAO.singleReturn("select ifnull(GENDER,'') from CR_LEAD_CUSTOMER_M WHERE CUSTOMER_ID='"+custID[i1]+"'");
					//String MARITAL_STATUS=ConnectionDAO.singleReturn("select ifnull(MARITAL_STATUS,'')  as MARITAL_STATUS from CR_LEAD_CUSTOMER_M WHERE CUSTOMER_ID='"+custID[i1]+"'");
					String LOAN_PURPOSE=ConnectionDAO.singleReturn("select IFNULL(pl.DESCRIPTION,'') from cr_lead_dtl d left join generic_master pl on pl.VALUE=d.LOAN_PURPOSE and generic_key='LOAN_PURPOSE' and pl.parent_value=d.PRODUCT where d.LEAD_ID='"+leadId+"' ");
					String APPLICATION_DATE=ConnectionDAO.singleReturn("SELECT ifnull(date_format(LEAD_GENERATION_DATE,'%d-%m-%Y'),'') from cr_lead_dtl where LEAD_ID='"+leadId+"' ");
					String APPLICATION_ID=ConnectionDAO.singleReturn("SELECT ifnull(APPLICATION_FORM_NO,'') from cr_lead_dtl where LEAD_ID='"+leadId+"' ");
					String LOAN_AMOUNT=ConnectionDAO.singleReturn("select ifnull(round(AMOUNT_REQUIRED,0),'') from  cr_lead_dtl where LEAD_ID='"+leadId+"' ");
					String Address_Type=ConnectionDAO.singleReturn("select ifnull(ADDRESS_TYPE,'') from cr_lead_customer_m   where  LEAD_ID='"+leadId+"' AND CUSTOMER_ID='"+custID[i1]+"' ");
					String FACTORY=ConnectionDAO.singleReturn("select IFNULL( CONCAT(IFNULL(per.PLOT_NO,''),'  ',IFNULL(per.ADDRESS_LINE3,''),'  ',IFNULL(per.ADDRESS_LINE2,''),'  ',IFNULL(per.FLOOR_NO,''),'  ',IFNULL(per.ADDRESS_LINE1,''),'  ',IFNULL(per.LANDMARK,'')),'') as MA_PMA_ADD "
							+ "from cr_lead_customer_m per WHERE  LEAD_ID='"+leadId+"' AND CUSTOMER_ID='"+custID[i1]+"' ");
					String FACTORY_CITY=ConnectionDAO.singleReturn("select IFNULL(jper.DISTRICT_DESC,'') as MA_PMA_CTY "
							+ "from cr_lead_customer_m g "
							+ "left join com_district_m jper on jper.district_id = g.district where lead_id='"+leadId+"' AND CUSTOMER_ID='"+custID[i1]+"' ");
					String FACTORY_STATE=ConnectionDAO.singleReturn("select IFNULL(iper.ckyc_code,'') as MA_PMA_STE "
							+ "from cr_lead_customer_m g "
							+ "left join com_state_m iper on iper.state_id = g.state where  LEAD_ID='"+leadId+"' AND CUSTOMER_ID='"+custID[i1]+"'");
					String FACTORY_PINCODE=ConnectionDAO.singleReturn("select IFNULL(g.Pincode,'') as MA_PMA_CTY "
							+ "from cr_lead_customer_m g  where  LEAD_ID='"+leadId+"' AND CUSTOMER_ID='"+custID[i1]+"' ");
					logger.info("NAME1->"+NAME1 +"NAME3->"+NAME3 + " CUSTOMER_DOB->"+CUSTOMER_DOB + 
							" age->"+age+" ageAsOn->"+ageAsOn+" custmer_PAN->"+custmer_PAN+" driving_license->"+driving_license+
							" voter_id->"+voter_id+" PASSPORT_NUMBER->"+PASSPORT_NUMBER+" FATHER_HUSBAND_NAME->"+FATHER_HUSBAND_NAME+
							" CUSTOMER_EMAIL->"+CUSTOMER_EMAIL+" PRIMARY_PHONE->"+PRIMARY_PHONE+
							" GENDER->"+GENDER);
					String losUserId=ConnectionDAO.singleReturn("select IFNULL(PARAMETER_VALUE,'') from parameter_mst where parameter_key='CRIF_USER_ID' ");
					String xml="<REQUEST-REQUEST-FILE> "+
								"<HEADER-SEGMENT> "+
									"<PRODUCT-TYPE>LOS-PD0011</PRODUCT-TYPE> "+
									"<RES-FRMT>XML</RES-FRMT> "+
									"<LOS-NAME>OmniFin</LOS-NAME> "+
									"<LOS-VENDER>A3S</LOS-VENDER> "+
									"<LOS-VERSION>4.0</LOS-VERSION> "+
									"<USER-ID>"+losUserId+"</USER-ID> "+
								"</HEADER-SEGMENT> "+
								"<APPLICANT-SEGMENT> "+
									"<APPLICANT-NAME> "+
										"<NAME1>"+NAME1+"</NAME1> "+
										"<NAME2>"+NAME2+"</NAME2> "+
										"<NAME3>"+NAME3+"</NAME3> "+
										"<NAME4></NAME4> "+
										"<NAME5></NAME5> "+
									"</APPLICANT-NAME> "+
									"<DOB> "+
										"<DOB-DATE>"+CUSTOMER_DOB+"</DOB-DATE> "+
										"<AGE>"+age+"</AGE> "+
										"<AGE-AS-ON>"+ageAsOn+"</AGE-AS-ON> "+
									"</DOB> "+
									"<IDS> "+
										"<ID> "+
											"<TYPE>Voter ID</TYPE> "+
											"<VALUE>"+voter_id+"</VALUE> "+
										"</ID> "+
										"<ID> "+
											"<TYPE>PAN</TYPE> "+
											"<VALUE>"+custmer_PAN+"</VALUE> "+
										"</ID> "+
										"<ID> "+
											"<TYPE>PASSPORT</TYPE> "+
											"<VALUE>"+PASSPORT_NUMBER+"</VALUE> "+
										"</ID> "+
										"<ID> "+
											"<TYPE>DRIVING LICENCE NO</TYPE> "+
											"<VALUE>"+driving_license+"</VALUE> "+
										"</ID> "+
									"</IDS> "+
									"<RELATIONS> "+
										"<RELATION> "+
											"<TYPE>FATHER</TYPE> "+
											"<VALUE>"+FATHER_HUSBAND_NAME+"</VALUE> "+
										"</RELATION> "+
										"<RELATION> "+
											"<TYPE>MOTHER</TYPE> "+
											"<VALUE></VALUE> "+
										"</RELATION> "+
										"<RELATION> "+
											"<TYPE>SPOUSE</TYPE> "+
											"<VALUE></VALUE> "+
										"</RELATION> "+
									"</RELATIONS> "+
									"<PHONES> "+
										"<PHONE> "+
											"<TYPE>MOBILE</TYPE> "+
											"<VALUE>"+PRIMARY_PHONE+"</VALUE> "+
										"</PHONE> "+
										"<PHONE> "+
											"<TYPE>COMPANY</TYPE> "+
											"<VALUE></VALUE> "+
										"</PHONE> "+
									"</PHONES> "+
									"<EMAILS> "+
										"<EMAIL> "+
											"<VALUE>"+CUSTOMER_EMAIL+"</VALUE> "+
										"</EMAIL> "+
									"</EMAILS> "+
									"<GENDER>"+GENDER+"</GENDER> "+
									"<MARITAL-STATUS></MARITAL-STATUS> "+
									"<ENTITY-ID>eNTITY123</ENTITY-ID> "+
									"<ADDRESSES> "+
										"<ADDRESS> "+
											"<TYPE>"+Address_Type+"</TYPE> "+
											"<ADDRESS-1><![CDATA["+FACTORY+"]]></ADDRESS-1> "+
											"<CITY>"+FACTORY_CITY+"</CITY> "+
											"<STATE>"+FACTORY_STATE+"</STATE> "+
											"<PINCODE>"+FACTORY_PINCODE+"</PINCODE> "+
										"</ADDRESS> "+
									"</ADDRESSES> "+
								"</APPLICANT-SEGMENT> "+
								"<APPLICATION-SEGMENT> "+
									"<LOAN-TYPE>"+LOAN_TYPE+"</LOAN-TYPE> "+
									"<LOAN-PURPOSE>"+LOAN_TYPE+"</LOAN-PURPOSE> "+
									"<APPLICATION-DATE>"+APPLICATION_DATE+"</APPLICATION-DATE> "+
									"<CONSUMER-ID>"+custID[i1]+"</CONSUMER-ID> "+
									"<APPLICATION-ID>"+APPLICATION_ID+"</APPLICATION-ID> "+
									"<LOAN-AMOUNT>"+LOAN_AMOUNT+"</LOAN-AMOUNT> "+
									"<BRANCH>"+Branch+"</BRANCH> "+
									"<KENDRA>asd</KENDRA> "+
									"<IFSC-CODE></IFSC-CODE> "+
									"<BRANCH-STATE>MH</BRANCH-STATE> "+
									"<OWNERSHIP-INDICATOR>OWR</OWNERSHIP-INDICATOR> "+
								"</APPLICATION-SEGMENT> "+
							"</REQUEST-REQUEST-FILE>";
					/*String xml="<?xml version='1.0' encoding='UTF-8'?> "
							+"<REQUEST-REQUEST-FILE> 	<HEADER-SEGMENT> 		<PRODUCT-TYPE>LOS-PD0011</PRODUCT-TYPE> 		<RES-FRMT>XML</RES-FRMT> 		<LOS-NAME>FINNONE</LOS-NAME> 		<LOS-VENDER>NUCLEUS</LOS-VENDER> 		<LOS-VERSION>0</LOS-VERSION> 			</HEADER-SEGMENT> 	<APPLICANT-SEGMENT> 		<APPLICANT-NAME> 			<NAME1>Nitin</NAME1> 			<NAME2>RAKESH</NAME2> 			<NAME3>Jain</NAME3> 			<NAME4>Aswini</NAME4> 			<NAME5>Sandy</NAME5> 			</APPLICANT-NAME> 		<DOB> 			<DOB-DATE>06-08-1979</DOB-DATE> 			<AGE>23</AGE> 			<AGE-AS-ON>31-12-2013</AGE-AS-ON> 		</DOB> 		<IDS> 			 <ID> 				<TYPE>Voter ID</TYPE> 				<VALUE>UP1123456</VALUE> 			</ID> 			<ID> 				<TYPE>PAN</TYPE> 				<VALUE>AFUPJ7365N</VALUE> 			</ID> 			<ID> 				<TYPE>PASSPORT</TYPE> 				<VALUE>BRFPK8937D</VALUE> 			</ID> 			<ID> 				<TYPE>DRIVING LICENCE NO</TYPE> 				<VALUE>MP12N456789J</VALUE> 			</ID> 			<!-- <ID> 				<TYPE>CIN</TYPE> 				<VALUE>U74130MH2005PTC216732</VALUE> 			</ID> -->  		</IDS> 		<RELATIONS> 			<RELATION> 				<TYPE>FATHER</TYPE> 				<VALUE>RAKESH JAIN</VALUE> 			</RELATION> 			<RELATION> 				<TYPE>MOTHER</TYPE> 				<VALUE>ALKA</VALUE> 			</RELATION> 			<RELATION> 				<TYPE>SPOUSE</TYPE> 				<VALUE>ASHWINI</VALUE> 			</RELATION> 		</RELATIONS> 		<PHONES> 			<PHONE> 				<TYPE>MOBILE</TYPE> 				<VALUE>2810806979</VALUE> 			</PHONE> 			<PHONE> 				<TYPE>COMPANY</TYPE> 				<VALUE>9359444410</VALUE> 			</PHONE> 		</PHONES> 		<EMAILS>  			<EMAIL>nitin.jain@gmail.com</EMAIL> 		</EMAILS> 		<GENDER>MALE</GENDER> 		<MARITAL-STATUS>UNMARRIED</MARITAL-STATUS> 		<ENTITY-ID>eNTITY123</ENTITY-ID> 		<EMPLOYER_CATEGORY>cat4</EMPLOYER_CATEGORY> 		<EMPLOYER_CONSTT>Salaried</EMPLOYER_CONSTT> 		<NET-INCOME>750000</NET-INCOME> 		<RESIDENTIAL_STATUS>RSD</RESIDENTIAL_STATUS> 		<ADDRESSES>  			<ADDRESS> 				<TYPE>Res cum Off</TYPE> 				<ADDRESS-1> 				<![CDATA[GANGA ELECTRICALS SHOP, SHOP NO 3 JAIN MANDIR]]> 				</ADDRESS-1> 				<CITY>SAHARANPUR</CITY> 				<STATE>UP</STATE> 				<PINCODE>247001</PINCODE> 			</ADDRESS> 			<ADDRESS> 				<TYPE>DP Default</TYPE> 				<ADDRESS-1><![CDATA[GANGA ELECTRICALS, SHOP NO 3 JAIN MANDIR]]></ADDRESS-1> 				<CITY>SAHARANPUR</CITY> 				<STATE>UP</STATE> 				<PINCODE>247001</PINCODE> 			</ADDRESS>    			<ADDRESS> 				<TYPE>Un Tagged</TYPE> 				<ADDRESS-1><![CDATA[GANGA VIDYUT, SHOP NO 3 JAIN MANDIR]]></ADDRESS-1> 				<CITY>SAHARANPUR</CITY> 				<STATE>UP</STATE> 				<PINCODE>247001</PINCODE> 			</ADDRESS> 		</ADDRESSES> 	</APPLICANT-SEGMENT> 	<APPLICATION-SEGMENT> 		<LOAN-TYPE>Auto Loan</LOAN-TYPE> 		<LOAN-PURPOSE>general</LOAN-PURPOSE> 		<APPLICATION-DATE>09-10-2014</APPLICATION-DATE> 		<CONSUMER-ID>201812123</CONSUMER-ID> 		<APPLICATION-ID>201812123</APPLICATION-ID> 		<LOAN-AMOUNT>50000</LOAN-AMOUNT> 		<BRANCH>UP</BRANCH> 		<KENDRA>SAHARANPUR</KENDRA> 		<IFSC-CODE>00001234UP</IFSC-CODE> 		<BRANCH-STATE>UP</BRANCH-STATE> 		<OWNERSHIP-INDICATOR>OWR</OWNERSHIP-INDICATOR> 		<PORTFOLIO_NAME>MORTGAGE</PORTFOLIO_NAME> 		<CL_SEGMENT>PB</CL_SEGMENT> 		<CREDIT_PROGRAM>BNKPRG</CREDIT_PROGRAM> 		<APPLICANT_CATEGORY>Organization</APPLICANT_CATEGORY> 		<CUSTOMER_PROFILE>PARTNER</CUSTOMER_PROFILE> 	</APPLICATION-SEGMENT> </REQUEST-REQUEST-FILE>";*/
					logger.info("crif xml ->"+xml);
					String CrifuserId=dao.getCRIFUserId();
					String password=dao.getCRIFPassword();
					String stageID="PDC";
					CrifVO CrifVO =new CrifVO();
					CrifVO.setRequestXML(xml);
					CrifVO.setUserId(CrifuserId);
					CrifVO.setPassword(password);
					/*CrifVO.setMbrid(mbrid);
					CrifVO.setProductType(productType);
					CrifVO.setProductVersion(productVersion);*/
					CrifVO.setLbxLeadId(leadId);
					CrifVO.setApplicantCustId(custID[i1]);
					CrifVO.setApplicantName(NAME1);
					CrifVO.setMakerId(userId);
					CrifVO.setMakerDate(businessDate);
					CrifVO.setStageID(stageID);
					CrifVO.setFunctionId(functionId);
					/*CrifVO.setReqVolType(reqVolType);*/
					//responseString=dao.sendCrifRequest(CrifVO);
					//String crifId=dao.saveCrifDetail(dealID,customer[i1],CrifVO);
					//CrifVO.setCrifId(crifId);
					ArrayList responseList=dao.SaveRecordPreDeal(leadId,custID[i1],businessDate);
					int i=0;
					if(responseList.size()>0)
						for(i=0;i<responseList.size();i++)
						{
							ArrayList subList=(ArrayList)responseList.get(i);
							String cibilId=(String)subList.get(0);
							CrifVO.setCibilId(cibilId);
						}
					msg=dao.sendCrifRequest(CrifVO);
					if(!CommonFunction.checkNull(msg).equalsIgnoreCase("") ){
						if(CommonFunction.checkNull(msg).equalsIgnoreCase("E") ){
							request.setAttribute("error", msg);
						}else{
						request.setAttribute("errorResponse", msg);
						
						}
					}
					Thread.sleep(30000);
			        }
					request.setAttribute("success",msg);
		        }
				
		    
			//Pooja code for crif end
		    else
		    {
		    	request.setAttribute("msg","msg");
		    }
				
		        ArrayList gridList=dao.getpreDealGridList(vo);
		        ArrayList roleList=dao.getRoleList(leadId);
		        request.setAttribute("roleList", roleList);
		        request.setAttribute("gridList",gridList);
		        request.setAttribute("custName", vo.getCustName());
		        request.setAttribute("lbxLeadId", vo.getLbxLeadId());
		        request.setAttribute("leadno", vo.getLeadno());
				businessDate=null;
				strFlag=null;
				leadId=null;
				customerId=null;
				
				return mapping.findForward("success");			
			}	
	
	public String WriteOnSocket(String inputstr) 
	{
		
		//ArrayList iplist=new ArrayList();
		CibilVerificationVO vo = null;
		CibilVerificationVO cibilVO = new CibilVerificationVO();
		CibilVerificationDAO dao=(CibilVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(CibilVerificationDAO.IDENTITY);
		cibilVO=dao.getIPconfig(); 
		logger.info("Implementation class: "+dao.getClass());
		String serverIp =(String)cibilVO.getCibilUATip();
		logger.info("Cibil ServerIp.......>>>"+serverIp);
		int port=Integer.parseInt(cibilVO.getCibilUATPort());
		logger.info("Cibil Server Port.......>>>"+port);
		
		//String serverIp = "172.29.29.6";// ip_prod_cibil
		//int port = 7506;
		String resString="";
		try
		{
			Socket client = new Socket(serverIp, port);
			logger.info("Just connected to " + client.getRemoteSocketAddress());
			OutputStream out = client.getOutputStream();
			InputStream in = client.getInputStream();
			//String inputstr = "TUEF121895054                    NB68771001                    MM123                         51000010000   02011CCLPN03N010111CHETANKUMAR0201M0306JADHAV0400050007081508197608011ID03I010102010210AETPJ9143EID03I020102020208E9048374PT03T0101000200030200PT03T0201000200030201PA03A010137C-7 B WING 4TH FLOOR, ROOM NO 79,CHAR0235KOP GURUKRIPA, KANDIVLI (W), MUMBAI030004000506MUMBAI0602270706400067080202090201ES05004190102**";
			//inputstr=inputstr+"\u0013";
			int numericVlaue = 19;
			char charValue = (char)numericVlaue;
			inputstr=inputstr+charValue;
			logger.info("Final input after adding special characher .......>>>"+inputstr);
			out.write(inputstr.getBytes());
			out.flush();
			int c;
			logger.info("waiting for Response........>>>");
			while ((c=in.read())!=-1) 
			{
				//if (isEndOfResponse(c)) 
					//break;
				//logger.info((char)c);
				if((char)c=='\\'){
					resString=resString+"/";
				}else{	
				resString=resString+(char)c;
				}
			}
			client.close();
			logger.info("Final Response String  :   "+resString);
			
			resString = resString.replace("'", " ");
			
			logger.info("Final Response String after replace : "+resString);
		}
		catch (IOException e) 
		{e.printStackTrace();}finally{
			inputstr=null;
			serverIp=null;
		}
		return resString;
	}
	private static boolean isEndOfResponse(int c) 
	{
		if ((char)c == '*') 
		{
			if (fs) 
			{
				return true;
			} 
			else 
			{
				fs = true;
				return false;
			}
		}
		return false;
	}
	
	public ActionForward cibilReportGenerate(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)throws Exception 
	{
		logger.info("In cibilReportGenerate() OF CibilVerificationInitiationDispatchAction");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");	
		String businessDate="";
		if(userobj==null)
		{
			logger.info("here in openSpecialCondition method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		else
			businessDate=userobj.getBusinessdate();
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		CibilVerificationDAO dao=(CibilVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(CibilVerificationDAO.IDENTITY);
		  logger.info("Implementation class: "+dao.getClass()); 
	        String cibilID="";
			//String cibilID=request.getParameter("cibilID");
	        cibilID=request.getParameter("cibilID");
			String customerId=request.getParameter("customerId");
			String leadCustomerId=customerId;
			String dealId=request.getParameter("dealID");
			if(!CommonFunction.checkNull(customerId).equalsIgnoreCase("") && !CommonFunction.checkNull(dealId).equalsIgnoreCase("")){
				 cibilID=dao.getCibilId(dealId,customerId); 
			}
			if(CommonFunction.checkNull(cibilID).equalsIgnoreCase("")){
				cibilID=request.getParameter("cibilID");
			}
			/*String reportstatus=dao.GenerateView(cibilID);//CALLING OF CIBIL_OUTPUTSTRING_GENERATOR
			String cibilRes = dao.getCibilResponse(cibilID);
			String reportName="cibilErrorReport";
			String cibilResponse=CommonFunction.checkNull(request.getParameter("cibilResponse")).trim();
			if(CommonFunction.checkNull(cibilResponse).trim().equalsIgnoreCase("POSITIVE RESPONSE") || CommonFunction.checkNull(cibilRes).trim().equalsIgnoreCase("POSITIVE RESPONSE"))
				reportName="cibilPositiveResponseReport";		
				
			
	      //  String reportstatus=dao.GenerateView(cibilID);
	      	
			try
			{
				ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");			
				String dateFormat=resource.getString("lbl.dateInDao");
				String dbType=resource.getString("lbl.dbType");			
				String p_company_logo=getServlet().getServletContext().getRealPath("/")+"reports/logo.bmp";
				String p_cibil_logo=getServlet().getServletContext().getRealPath("/")+"reports/cibilLogo.bmp";
				String reportPath="/reports/";	
				String SUBREPORT_DIR=getServlet().getServletContext().getRealPath("/")+"reports\\";
				
				if(dbType.equalsIgnoreCase("MSSQL"))
				{
					reportPath=reportPath+"MSSQLREPORTS/";
					SUBREPORT_DIR=SUBREPORT_DIR+"MSSQLREPORTS\\";
				}
				else
				{
					reportPath=reportPath+"MYSQLREPORTS/";
					SUBREPORT_DIR=SUBREPORT_DIR+"MYSQLREPORTS\\";
				}
				
				Connection connectDatabase = ConnectionDAO.getConnection();
				logger.info("connectDatabase : ==>> "+connectDatabase);
				Map<Object,Object> hashMap = new HashMap<Object,Object>();			
				int company_id=0;
				String userID="";
				String p_company_name="";
				String userName="";
				String p_business_date="";			
				if(userobj !=null)
				{
					p_company_name=userobj.getConpanyName()+" ";			
					userName = userobj.getUserName()+" ";
					p_business_date=userobj.getBusinessdate();
					company_id=userobj.getCompanyId();
					userID=userobj.getUserId();
				}
				else
				{
					logger.info(" in execute method of ReportActionForCP  action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
				
//				logger.info("reportPath : ==>> "+reportPath);
//				logger.info("reportName : ==>> "+reportPath+reportName+".jasper");		
				hashMap.put("p_company_logo",p_company_logo);
				hashMap.put("p_cibil_logo",p_cibil_logo);
				hashMap.put("p_company_name",p_company_name+" "); 
				hashMap.put("cibilId",cibilID);	
				hashMap.put("SUBREPORT_DIR",SUBREPORT_DIR);				
//				logger.info("cibilId : ==>> "+cibilID);
				
				
				InputStream reportStream = getServlet().getServletConfig().getServletContext().getResourceAsStream(reportPath+reportName+".jasper");
				JasperPrint jasperPrint = null;
				try
				{
					jasperPrint = JasperFillManager.fillReport(reportStream, hashMap,connectDatabase);
					//methodForHTML(reportName,hashMap,connectDatabase,response, jasperPrint,request);
					methodForPDF(reportName,hashMap,connectDatabase,response, jasperPrint,request);
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
				finally
				{
					dateFormat=null;
					dbType=null;
					p_company_logo=null;
					p_cibil_logo=null;
					reportPath=null;
					SUBREPORT_DIR=null;
					userID=null;
					p_company_name=null;
					userName=null;
					p_business_date=null;
					ConnectionDAO.closeConnection(connectDatabase, null);
					hashMap.clear();
					
				}
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}finally{
				businessDate=null;
				strFlag=null;
				cibilID=null;
				reportName=null;
				cibilResponse=null;
				reportstatus=null;
			}
			return null;*/
			//pooja code for CRIF Report Start
			//String query = "SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='UPLOAD_PATH'";
			//String query="select report_path from GENERATED_REPORT_LINK_DTL where LINK_ID=(select max(LINK_ID)from GENERATED_REPORT_LINK_DTL where deal_id='"+dealId+"' and Stage_ID='DC')";
			String query = "SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='CRIF_TEMPLATE'";
			String query1="select report_name from GENERATED_REPORT_LINK_DTL where LINK_ID=(select max(LINK_ID)from GENERATED_REPORT_LINK_DTL where deal_id='"+dealId+"' and Stage_ID='DC' and customer_id='"+customerId+"')";
			String rpt = ConnectionDAO.singleReturn(query);
			String fileName = ConnectionDAO.singleReturn(query1);
			if(CommonFunction.checkNull(fileName).equalsIgnoreCase("")){
				String leadId=ConnectionDAO.singleReturn("select lead_id from cr_deal_dtl where deal_id='"+dealId+"' ");
				if(!CommonFunction.checkNull(leadId).equalsIgnoreCase("")){
					 leadCustomerId=ConnectionDAO.singleReturn("select lead_Customer_id from GENERATED_REPORT_LINK_DTL where LINK_ID=(select max(LINK_ID)from GENERATED_REPORT_LINK_DTL where lead_id='"+leadId+"' and Stage_ID='PDC' and customer_id='"+customerId+"') ");
			//	String dealCustRoleType=ConnectionDAO.singleReturn("select ifnull(DEAL_CUSTOMER_ROLE_TYPE,'') from cr_deal_customer_role where deal_id='"+dealId+"' and  deal_customer_id='"+customerId+"' ");
				//customerId=ConnectionDAO.singleReturn("select customer_id from cr_lead_customer_m where lead_id='"+leadId+"' and customer_role_type='"+dealCustRoleType+"' ");
				if(!CommonFunction.checkNull(customerId).equalsIgnoreCase("")){
				String query2="select report_name from GENERATED_REPORT_LINK_DTL where LINK_ID=(select max(LINK_ID)from GENERATED_REPORT_LINK_DTL where lead_id='"+leadId+"' and Stage_ID='PDC' and customer_id='"+customerId+"')";
				String fileName2 = ConnectionDAO.singleReturn(query2);
				if(!CommonFunction.checkNull(fileName2).equalsIgnoreCase("")){
				try{
		        rpt =  rpt+"\\"+"SINGLE_PAGE"+"\\"+leadId+"\\"+leadCustomerId+"\\"+fileName2;
		        logger.info("rpt-------->"+rpt);
		        File f = new File(rpt);
		        if(f.exists()){
		        String fileType = fileName2.substring(fileName2.lastIndexOf(".") + 1,
		        		fileName2.length());
		        fileType=fileType.toLowerCase();
				logger.info("File Type: " + fileType);
				if (fileType.trim().equalsIgnoreCase("pdf")) {
					logger.info("File Type in pdf: " + fileType);
					response.setContentType("application/pdf");
				}
				else {
					logger.info("File Type in default: " + fileType);
					response.setContentType("application/octet-stream");
				}
				response.setHeader("Content-Disposition", "attachment;fileName="
						+ fileName2);
		       
		            System.out.println("downloadPath In DownloadFile Method====="+rpt);
		            FileInputStream in = new FileInputStream(f);
		            int formDataLength = (int) f.length();
		            ServletOutputStream out = response.getOutputStream();
		            System.out.println("Check Point formDataLength ..." + formDataLength);

		            byte[] outputByte = new byte[formDataLength * 2];
		            // copy binary content to output stream
		            while (in.read(outputByte, 0, formDataLength) != -1)
		                {
		                    out.write(outputByte, 0, formDataLength);
		                }
		            in.close();
		            out.flush();
		            out.close();
		            fileName=null;
		            return null;
				}else{
					String msg="reportError";
					request.setAttribute("reportError","reportError");
					return mapping.findForward("success");
				}
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
				}
				}
			}
				String reportstatus=dao.GenerateView(cibilID);//CALLING OF CIBIL_OUTPUTSTRING_GENERATOR
				String cibilRes = dao.getCibilResponse(cibilID);
				String reportName="cibilErrorReport";
				String cibilResponse=CommonFunction.checkNull(request.getParameter("cibilResponse")).trim();
				if(CommonFunction.checkNull(cibilResponse).trim().equalsIgnoreCase("POSITIVE RESPONSE") || CommonFunction.checkNull(cibilRes).trim().equalsIgnoreCase("POSITIVE RESPONSE"))
					reportName="cibilPositiveResponseReport";		
					
				
		      //  String reportstatus=dao.GenerateView(cibilID);
		      	
				try
				{
					ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");			
					String dateFormat=resource.getString("lbl.dateInDao");
					String dbType=resource.getString("lbl.dbType");			
					String p_company_logo=getServlet().getServletContext().getRealPath("/")+"reports/logo.bmp";
					String p_cibil_logo=getServlet().getServletContext().getRealPath("/")+"reports/cibilLogo.bmp";
					String reportPath="/reports/";	
					String SUBREPORT_DIR=getServlet().getServletContext().getRealPath("/")+"reports\\";
					
					if(dbType.equalsIgnoreCase("MSSQL"))
					{
						reportPath=reportPath+"MSSQLREPORTS/";
						SUBREPORT_DIR=SUBREPORT_DIR+"MSSQLREPORTS\\";
					}
					else
					{
						reportPath=reportPath+"MYSQLREPORTS/";
						SUBREPORT_DIR=SUBREPORT_DIR+"MYSQLREPORTS\\";
					}
					
					Connection connectDatabase = ConnectionDAO.getConnection();
					logger.info("connectDatabase : ==>> "+connectDatabase);
					Map<Object,Object> hashMap = new HashMap<Object,Object>();			
					int company_id=0;
					String userID="";
					String p_company_name="";
					String userName="";
					String p_business_date="";			
					if(userobj !=null)
					{
						p_company_name=userobj.getConpanyName()+" ";			
						userName = userobj.getUserName()+" ";
						p_business_date=userobj.getBusinessdate();
						company_id=userobj.getCompanyId();
						userID=userobj.getUserId();
					}
					else
					{
						logger.info(" in execute method of ReportActionForCP  action the session is out----------------");
						return mapping.findForward("sessionOut");
					}
					
//					logger.info("reportPath : ==>> "+reportPath);
//					logger.info("reportName : ==>> "+reportPath+reportName+".jasper");		
					hashMap.put("p_company_logo",p_company_logo);
					hashMap.put("p_cibil_logo",p_cibil_logo);
					hashMap.put("p_company_name",p_company_name+" "); 
					hashMap.put("cibilId",cibilID);	
					hashMap.put("SUBREPORT_DIR",SUBREPORT_DIR);				
//					logger.info("cibilId : ==>> "+cibilID);
					
					
					InputStream reportStream = getServlet().getServletConfig().getServletContext().getResourceAsStream(reportPath+reportName+".jasper");
					JasperPrint jasperPrint = null;
					try
					{
						jasperPrint = JasperFillManager.fillReport(reportStream, hashMap,connectDatabase);
						//methodForHTML(reportName,hashMap,connectDatabase,response, jasperPrint,request);
						methodForPDF(reportName,hashMap,connectDatabase,response, jasperPrint,request);
					}
					catch(Exception e)
					{
						e.printStackTrace();
					}
					finally
					{
						dateFormat=null;
						dbType=null;
						p_company_logo=null;
						p_cibil_logo=null;
						reportPath=null;
						SUBREPORT_DIR=null;
						userID=null;
						p_company_name=null;
						userName=null;
						p_business_date=null;
						ConnectionDAO.closeConnection(connectDatabase, null);
						hashMap.clear();
						
					}
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}finally{
					businessDate=null;
					strFlag=null;
					cibilID=null;
					reportName=null;
					cibilResponse=null;
					reportstatus=null;
				}
			}
			else{
				//dc report
				try{
		        rpt =  rpt+"\\"+"DEAL_CAPTURING"+"\\"+dealId+"\\"+customerId+"\\"+fileName;
		        File f = new File(rpt);
		        if(f.exists()){
		        String fileType = fileName.substring(fileName.lastIndexOf(".") + 1,
						fileName.length());
		        fileType=fileType.toLowerCase();
				logger.info("File Type: " + fileType);
				if (fileType.trim().equalsIgnoreCase("pdf")) {
					logger.info("File Type in pdf: " + fileType);
					response.setContentType("application/pdf");
				}
				else {
					logger.info("File Type in default: " + fileType);
					response.setContentType("application/octet-stream");
				}
				response.setHeader("Content-Disposition", "attachment;fileName="
						+ fileName);
		      
		            System.out.println("downloadPath In DownloadFile Method====="+rpt);
		            FileInputStream in = new FileInputStream(f);
		            int formDataLength = (int) f.length();
		            ServletOutputStream out = response.getOutputStream();
		            System.out.println("Check Point formDataLength ..." + formDataLength);

		            byte[] outputByte = new byte[formDataLength * 2];
		            // copy binary content to output stream
		            while (in.read(outputByte, 0, formDataLength) != -1)
		                {
		                    out.write(outputByte, 0, formDataLength);
		                }
		            in.close();
		            out.flush();
		            out.close();
		            fileName=null;
		            return null;
				}else{
					String msg="reportError";
					request.setAttribute("reportError","reportError");
					return mapping.findForward("success");
				}
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
					//dc report
			}
			 return null;  
			//Pooja code for CRIF Report End
		} 
	
	public ActionForward cibilPreDealReportGenerate(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)throws Exception 
	{
		logger.info("In cibilPreDealReportGenerate() OF CibilVerificationInitiationDispatchAction");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");	
		String businessDate="";
		if(userobj==null)
		{
			logger.info("here in cibilPreDealReportGenerate method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		else
			businessDate=userobj.getBusinessdate();
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		CibilVerificationDAO dao=(CibilVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(CibilVerificationDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 
        String cibilID="";
		//String cibilID=request.getParameter("cibilID");
		String customerId=request.getParameter("customerId");
		String leadId=request.getParameter("leadId");
		if(!CommonFunction.checkNull(customerId).equalsIgnoreCase("") && !CommonFunction.checkNull(leadId).equalsIgnoreCase("")){
			 String cibilIDQuery="select max(CIBIL_ID) from cr_cibil_ref_dtl where lead_id '"+leadId+"' and customer_id = '"+customerId+"' ";
			 cibilID=ConnectionDAO.singleReturn(cibilIDQuery);
		}
		if(CommonFunction.checkNull(cibilID).equalsIgnoreCase("")){
			cibilID=request.getParameter("cibilID");
		}
		
		/*String reportstatus=dao.GenerateView(cibilID);//CALLING OF CIBIL_OUTPUTSTRING_GENERATOR
		String cibilRes = dao.getCibilResponse(cibilID);
		String reportName="cibilErrorReport";
		String cibilResponse=CommonFunction.checkNull(request.getParameter("cibilResponse")).trim();
		if(CommonFunction.checkNull(cibilResponse).trim().equalsIgnoreCase("POSITIVE RESPONSE") || CommonFunction.checkNull(cibilRes).trim().equalsIgnoreCase("POSITIVE RESPONSE"))
			reportName="cibilPositiveResponseReport";		
			
		
      //  String reportstatus=dao.GenerateView(cibilID);
      	
		try
		{
			ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");			
			String dateFormat=resource.getString("lbl.dateInDao");
			String dbType=resource.getString("lbl.dbType");			
			String p_company_logo=getServlet().getServletContext().getRealPath("/")+"reports/logo.bmp";
			String p_cibil_logo=getServlet().getServletContext().getRealPath("/")+"reports/cibilLogo.bmp";
			String reportPath="/reports/";	
			String SUBREPORT_DIR=getServlet().getServletContext().getRealPath("/")+"reports\\";
			
			if(dbType.equalsIgnoreCase("MSSQL"))
			{
				reportPath=reportPath+"MSSQLREPORTS/";
				SUBREPORT_DIR=SUBREPORT_DIR+"MSSQLREPORTS\\";
			}
			else
			{
				reportPath=reportPath+"MYSQLREPORTS/";
				SUBREPORT_DIR=SUBREPORT_DIR+"MYSQLREPORTS\\";
			}
			
			Connection connectDatabase = ConnectionDAO.getConnection();
			logger.info("connectDatabase : ==>> "+connectDatabase);
			Map<Object,Object> hashMap = new HashMap<Object,Object>();			
			int company_id=0;
			String userID="";
			String p_company_name="";
			String userName="";
			String p_business_date="";			
			if(userobj !=null)
			{
				p_company_name=userobj.getConpanyName()+" ";			
				userName = userobj.getUserName()+" ";
				p_business_date=userobj.getBusinessdate();
				company_id=userobj.getCompanyId();
				userID=userobj.getUserId();
			}
			else
			{
				logger.info(" in execute method of ReportActionForCP  action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			
//			logger.info("reportPath : ==>> "+reportPath);
//			logger.info("reportName : ==>> "+reportPath+reportName+".jasper");		
			hashMap.put("p_company_logo",p_company_logo);
			hashMap.put("p_cibil_logo",p_cibil_logo);
			hashMap.put("p_company_name",p_company_name+" "); 
			hashMap.put("cibilId",cibilID);	
			hashMap.put("SUBREPORT_DIR",SUBREPORT_DIR);				
//			logger.info("cibilId : ==>> "+cibilID);
			
			
			InputStream reportStream = getServlet().getServletConfig().getServletContext().getResourceAsStream(reportPath+reportName+".jasper");
			JasperPrint jasperPrint = null;
			try
			{
				jasperPrint = JasperFillManager.fillReport(reportStream, hashMap,connectDatabase);
				//methodForHTML(reportName,hashMap,connectDatabase,response, jasperPrint,request);
				methodForPDF(reportName,hashMap,connectDatabase,response, jasperPrint,request);
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
			finally
			{
				dateFormat=null;
				dbType=null;
				p_company_logo=null;
				p_cibil_logo=null;
				reportPath=null;
				SUBREPORT_DIR=null;
				userID=null;
				p_company_name=null;
				userName=null;
				p_business_date=null;
				ConnectionDAO.closeConnection(connectDatabase, null);
				hashMap.clear();
				
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}finally{
			businessDate=null;
			strFlag=null;
			cibilID=null;
			reportName=null;
			cibilResponse=null;
			reportstatus=null;
		}
		return null;*/
		//pooja code for CRIF Report Start
				String query = "SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='CRIF_TEMPLATE'";
				String query1="select report_name from GENERATED_REPORT_LINK_DTL where LINK_ID=(select max(LINK_ID)from GENERATED_REPORT_LINK_DTL where lead_id='"+leadId+"' and Stage_ID='PDC' and customer_id='"+customerId+"')";
				String rpt = ConnectionDAO.singleReturn(query);
				String fileName = ConnectionDAO.singleReturn(query1);
				if(!CommonFunction.checkNull(fileName).equalsIgnoreCase("")){
					try{
		        rpt =  rpt+"\\"+"SINGLE_PAGE"+"\\"+leadId+"\\"+customerId+"\\"+fileName;
		        File f = new File(rpt);
		        if(f.exists()){
		        String fileType = fileName.substring(fileName.lastIndexOf(".") + 1,
						fileName.length());
		        fileType=fileType.toLowerCase();
				logger.info("File Type: " + fileType);
				if (fileType.trim().equalsIgnoreCase("pdf")) {
					logger.info("File Type in pdf: " + fileType);
					response.setContentType("application/pdf");
				}
				else {
					logger.info("File Type in default: " + fileType);
					response.setContentType("application/octet-stream");
				}
				response.setHeader("Content-Disposition", "attachment;fileName="
						+ fileName);
		            System.out.println("downloadPath In DownloadFile Method====="+rpt);
		            FileInputStream in = new FileInputStream(f);
		            int formDataLength = (int) f.length();
		            ServletOutputStream out = response.getOutputStream();
		            System.out.println("Check Point formDataLength ..." + formDataLength);

		            byte[] outputByte = new byte[formDataLength * 2];
		            // copy binary content to output stream
		            while (in.read(outputByte, 0, formDataLength) != -1)
		                {
		                    out.write(outputByte, 0, formDataLength);
		                }
		            in.close();
		            out.flush();
		            out.close();
		            fileName=null;
		        }else{
		        	String msg="reportError";
					request.setAttribute("reportError","reportError");
					CibilVerificationVO vo=new CibilVerificationVO();
		    		vo.setLbxLeadId(leadId);
		            logger.info("Implementation class: "+dao.getClass()); 
		            ArrayList gridList=dao.getpreDealGridList(vo);
		            ArrayList roleList=dao.getRoleList(leadId);
		            request.setAttribute("roleList", roleList);
		            request.setAttribute("gridList",gridList);
		            request.setAttribute("custName", vo.getCustName());
		            request.setAttribute("lbxLeadId", vo.getLbxLeadId());
		            request.setAttribute("leadno", vo.getLeadno());
		    		businessDate=null;
		    		strFlag=null;
		    		leadId=null;
					return mapping.findForward("success");
		        }
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}
			}else{
				String reportstatus=dao.GenerateView(cibilID);//CALLING OF CIBIL_OUTPUTSTRING_GENERATOR
				String cibilRes = dao.getCibilResponse(cibilID);
				String reportName="cibilErrorReport";
				String cibilResponse=CommonFunction.checkNull(request.getParameter("cibilResponse")).trim();
				if(CommonFunction.checkNull(cibilResponse).trim().equalsIgnoreCase("POSITIVE RESPONSE") || CommonFunction.checkNull(cibilRes).trim().equalsIgnoreCase("POSITIVE RESPONSE"))
					reportName="cibilPositiveResponseReport";		
					
				
		      //  String reportstatus=dao.GenerateView(cibilID);
		      	
				try
				{
					ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");			
					String dateFormat=resource.getString("lbl.dateInDao");
					String dbType=resource.getString("lbl.dbType");			
					String p_company_logo=getServlet().getServletContext().getRealPath("/")+"reports/logo.bmp";
					String p_cibil_logo=getServlet().getServletContext().getRealPath("/")+"reports/cibilLogo.bmp";
					String reportPath="/reports/";	
					String SUBREPORT_DIR=getServlet().getServletContext().getRealPath("/")+"reports\\";
					
					if(dbType.equalsIgnoreCase("MSSQL"))
					{
						reportPath=reportPath+"MSSQLREPORTS/";
						SUBREPORT_DIR=SUBREPORT_DIR+"MSSQLREPORTS\\";
					}
					else
					{
						reportPath=reportPath+"MYSQLREPORTS/";
						SUBREPORT_DIR=SUBREPORT_DIR+"MYSQLREPORTS\\";
					}
					
					Connection connectDatabase = ConnectionDAO.getConnection();
					logger.info("connectDatabase : ==>> "+connectDatabase);
					Map<Object,Object> hashMap = new HashMap<Object,Object>();			
					int company_id=0;
					String userID="";
					String p_company_name="";
					String userName="";
					String p_business_date="";			
					if(userobj !=null)
					{
						p_company_name=userobj.getConpanyName()+" ";			
						userName = userobj.getUserName()+" ";
						p_business_date=userobj.getBusinessdate();
						company_id=userobj.getCompanyId();
						userID=userobj.getUserId();
					}
					else
					{
						logger.info(" in execute method of ReportActionForCP  action the session is out----------------");
						return mapping.findForward("sessionOut");
					}
					
//					logger.info("reportPath : ==>> "+reportPath);
//					logger.info("reportName : ==>> "+reportPath+reportName+".jasper");		
					hashMap.put("p_company_logo",p_company_logo);
					hashMap.put("p_cibil_logo",p_cibil_logo);
					hashMap.put("p_company_name",p_company_name+" "); 
					hashMap.put("cibilId",cibilID);	
					hashMap.put("SUBREPORT_DIR",SUBREPORT_DIR);				
//					logger.info("cibilId : ==>> "+cibilID);
					
					
					InputStream reportStream = getServlet().getServletConfig().getServletContext().getResourceAsStream(reportPath+reportName+".jasper");
					JasperPrint jasperPrint = null;
					try
					{
						jasperPrint = JasperFillManager.fillReport(reportStream, hashMap,connectDatabase);
						//methodForHTML(reportName,hashMap,connectDatabase,response, jasperPrint,request);
						methodForPDF(reportName,hashMap,connectDatabase,response, jasperPrint,request);
					}
					catch(Exception e)
					{
						e.printStackTrace();
					}
					finally
					{
						dateFormat=null;
						dbType=null;
						p_company_logo=null;
						p_cibil_logo=null;
						reportPath=null;
						SUBREPORT_DIR=null;
						userID=null;
						p_company_name=null;
						userName=null;
						p_business_date=null;
						ConnectionDAO.closeConnection(connectDatabase, null);
						hashMap.clear();
						
					}
				}
				catch(Exception e)
				{
					e.printStackTrace();
				}finally{
					businessDate=null;
					strFlag=null;
					cibilID=null;
					reportName=null;
					cibilResponse=null;
					reportstatus=null;
				}
			}
				return null;	
				//Pooja code for CRIF Report End
			}
/*	public ActionForward cibilPreDealReportGenerate(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)throws Exception 
	{
		logger.info("In cibilPreDealReportGenerate() OF CibilVerificationInitiationDispatchAction");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");	
		String businessDate="";
		if(userobj==null)
		{
			logger.info("here in cibilPreDealReportGenerate method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		else
			businessDate=userobj.getBusinessdate();
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				logger.info(" in execute method of ReportActionForCP  action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			
//			logger.info("reportPath : ==>> "+reportPath);
//			logger.info("reportName : ==>> "+reportPath+reportName+".jasper");		
			hashMap.put("p_company_logo",p_company_logo);
			hashMap.put("p_cibil_logo",p_cibil_logo);
			hashMap.put("p_company_name",p_company_name+" "); 
			hashMap.put("cibilId",cibilID);	
			hashMap.put("SUBREPORT_DIR",SUBREPORT_DIR);				
//			logger.info("cibilId : ==>> "+cibilID);
			
			
			InputStream reportStream = getServlet().getServletConfig().getServletContext().getResourceAsStream(reportPath+reportName+".jasper");
			JasperPrint jasperPrint = null;
			try
			{
				jasperPrint = JasperFillManager.fillReport(reportStream, hashMap,connectDatabase);
				//methodForHTML(reportName,hashMap,connectDatabase,response, jasperPrint,request);
				methodForPDF(reportName,hashMap,connectDatabase,response, jasperPrint,request);
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
			finally
			{
				dateFormat=null;
				dbType=null;
				p_company_logo=null;
				p_cibil_logo=null;
				reportPath=null;
				SUBREPORT_DIR=null;
				userID=null;
				p_company_name=null;
				userName=null;
				p_business_date=null;
				ConnectionDAO.closeConnection(connectDatabase, null);
				hashMap.clear();
				
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}finally{
			businessDate=null;
			strFlag=null;
			cibilID=null;
			reportName=null;
			cibilResponse=null;
			reportstatus=null;
		}
		return null;
	}
		*/
	
	public  void methodForHTML(String reportName,Map<Object,Object> hashMap,Connection connectDatabase,HttpServletResponse response,JasperPrint jasperPrint,HttpServletRequest request)throws Exception
	{
		PrintWriter out=response.getWriter();
	    out.append("<head><script type='text/javascript' src='"+request.getContextPath()+"/js/report/report.js'></script></head>");
	   	response.setContentType("text/html");
	   	
		String htmlReportFileName=reportName+".html";
		JRHtmlExporter exporter = new JRHtmlExporter();			
		response.setContentType("text/html");
        request.getSession().setAttribute(ImageServlet.DEFAULT_JASPER_PRINT_SESSION_ATTRIBUTE,jasperPrint);			
		float f1=1.7f;
		Map imagesMap = new HashMap();
        request.getSession().setAttribute("IMAGES_MAP", imagesMap);
        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
        exporter.setParameter(JRHtmlExporterParameter.IS_USING_IMAGES_TO_ALIGN ,Boolean.FALSE);
        exporter.setParameter(JRHtmlExporterParameter.IGNORE_PAGE_MARGINS ,Boolean.TRUE); 
        exporter.setParameter(JRHtmlExporterParameter.IS_WHITE_PAGE_BACKGROUND,Boolean.FALSE);
        exporter.setParameter(JRHtmlExporterParameter.IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS,Boolean.TRUE);
        exporter.setParameter(JRHtmlExporterParameter.IS_OUTPUT_IMAGES_TO_DIR, Boolean.TRUE);
        exporter.setParameter(JRHtmlExporterParameter.BETWEEN_PAGES_HTML,"");
        exporter.setParameter(JRExporterParameter.OUTPUT_WRITER, response.getWriter());
        exporter.setParameter(JRHtmlExporterParameter.IMAGES_MAP, imagesMap);
        exporter.setParameter(JRHtmlExporterParameter.ZOOM_RATIO ,f1);
        ServletContext context = this.getServlet().getServletContext();
        File reportFile = new File(context.getRealPath("/reports/"));
        String image = reportFile.getPath();
        exporter.setParameter(JRHtmlExporterParameter.IMAGES_DIR_NAME,image);
        exporter.setParameter(JRHtmlExporterParameter.IMAGES_URI,image + "/");
        exporter.exportReport();     
	}
	public void methodForPDF(String reportName,Map<Object,Object> hashMap,Connection connectDatabase,HttpServletResponse response,JasperPrint jasperPrint, HttpServletRequest request)throws Exception
	{
		JasperExportManager.exportReportToPdfFile(jasperPrint,request.getRealPath("/reports/MYSQLREPORTS") + "/" +reportName+".pdf");
		File f=new File(request.getRealPath("/reports/MYSQLREPORTS") + "/" +reportName+".pdf");
		FileInputStream fin = new FileInputStream(f);
		ServletOutputStream outStream = response.getOutputStream();
		response.setContentType("application/pdf");
		response.setHeader("Content-Disposition", "attachment;filename='"+reportName+"'.pdf");
		byte[] buffer = new byte[1024];
		int n = 0;
		while ((n = fin.read(buffer)) != -1) 
			outStream.write(buffer, 0, n);			
		outStream.flush();
		fin.close();
		outStream.close();
	}
	//Pooja code for History CRIF Report Start
	public ActionForward cibilHstReportGenerate(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)throws Exception 
	{
		logger.info("In cibilHstReportGenerate() OF CibilVerificationInitiationDispatchAction");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");	
		String businessDate="";
		if(userobj==null)
		{
			logger.info("here in openSpecialCondition method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		else
			businessDate=userobj.getBusinessdate();
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		CibilVerificationDAO dao=(CibilVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(CibilVerificationDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 
        String LinkId="";
        LinkId=request.getParameter("LinkId");
		String dealID=request.getParameter("dealID");
		String query = "SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='CRIF_TEMPLATE'";
		String query1="select report_name from GENERATED_REPORT_LINK_DTL where LINK_ID='"+LinkId+"' ";
		String rpt = ConnectionDAO.singleReturn(query);
		String fileName = ConnectionDAO.singleReturn(query1);
        /*String rpt = "E:\\CRIF_TEMPLATE\\DealId\\ApplicantCustId";
        String fileName = "DealId_ApplicantName_ApplicantId_90340008765684.pdf";*/
		String ApplicantCustId=ConnectionDAO.singleReturn("select customer_id from GENERATED_REPORT_LINK_DTL where LINK_ID='"+LinkId+"' ");
		String hstDealId=ConnectionDAO.singleReturn("select deal_id from GENERATED_REPORT_LINK_DTL where link_id='"+LinkId+"' ");
		if(CommonFunction.checkNull(hstDealId).equalsIgnoreCase("")){
			
			String leadId=ConnectionDAO.singleReturn("select lead_id from GENERATED_REPORT_LINK_DTL where link_id='"+LinkId+"' ");
			String customerId=ConnectionDAO.singleReturn("select lead_Customer_id from GENERATED_REPORT_LINK_DTL where link_id='"+LinkId+"' ");
			rpt =  rpt+"\\"+"SINGLE_PAGE"+"\\"+leadId+"\\"+customerId+"\\"+fileName;
		}
		else{
        rpt =  rpt+"\\"+"DEAL_CAPTURING"+"\\"+dealID+"\\"+ApplicantCustId+"\\"+fileName;
		}
		try{
	        File f = new File(rpt);
	        if(f.exists()){
       // rpt =  rpt+"\\"+dealID+"\\"+ApplicantCustId+"\\"+fileName;
        String fileType = fileName.substring(fileName.lastIndexOf(".") + 1,
				fileName.length());
        fileType=fileType.toLowerCase();
		logger.info("File Type: " + fileType);
		if (fileType.trim().equalsIgnoreCase("pdf")) {
			logger.info("File Type in pdf: " + fileType);
			response.setContentType("application/pdf");
		}
		else {
			logger.info("File Type in default: " + fileType);
			response.setContentType("application/octet-stream");
		}
		response.setHeader("Content-Disposition", "attachment;fileName="
				+ fileName);
		
      
            System.out.println("downloadPath In DownloadFile Method====="+rpt);
            FileInputStream in = new FileInputStream(f);
            int formDataLength = (int) f.length();
            ServletOutputStream out = response.getOutputStream();
            System.out.println("Check Point formDataLength ..." + formDataLength);

            byte[] outputByte = new byte[formDataLength * 2];
            // copy binary content to output stream
            while (in.read(outputByte, 0, formDataLength) != -1)
                {
                    out.write(outputByte, 0, formDataLength);
                }
            in.close();
            out.flush();
            out.close();
            fileName=null;
            return null;
	        }else{
	        	String msg="reportError";
	    		request.setAttribute("reportError","reportError");
	    		
	            }
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
			return mapping.findForward("success");
		}
	public ActionForward preDealcibilHstReportGenerate(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)throws Exception 
	{
		logger.info("In preDealcibilHstReportGenerate() OF CibilVerificationInitiationDispatchAction");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");	
		String businessDate="";
		if(userobj==null)
		{
			logger.info("here in openSpecialCondition method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		else
			businessDate=userobj.getBusinessdate();
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		CibilVerificationDAO dao=(CibilVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(CibilVerificationDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 
        String LinkId="";
        LinkId=request.getParameter("LinkId");
		String leadId=request.getParameter("leadId");
		String query = "SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='CRIF_TEMPLATE'";
		String query1="select report_name from GENERATED_REPORT_LINK_DTL where LINK_ID='"+LinkId+"' ";
		String rpt = ConnectionDAO.singleReturn(query);
		String fileName = ConnectionDAO.singleReturn(query1);
        /*String rpt = "E:\\CRIF_TEMPLATE\\DealId\\ApplicantCustId";
        String fileName = "DealId_ApplicantName_ApplicantId_90340008765684.pdf";*/
		String ApplicantCustId=ConnectionDAO.singleReturn("select ifnull(lead_customer_id,customer_id) from GENERATED_REPORT_LINK_DTL where LINK_ID='"+LinkId+"' ");
		try{
	        rpt =  rpt+"\\"+"SINGLE_PAGE"+"\\"+leadId+"\\"+ApplicantCustId+"\\"+fileName;
	        File f = new File(rpt);
	        if(f.exists()){
       // rpt =  rpt+"\\"+leadId+"\\"+ApplicantCustId+"\\"+fileName;
        String fileType = fileName.substring(fileName.lastIndexOf(".") + 1,
				fileName.length());
        fileType=fileType.toLowerCase();
		logger.info("File Type: " + fileType);
		if (fileType.trim().equalsIgnoreCase("pdf")) {
			logger.info("File Type in pdf: " + fileType);
			response.setContentType("application/pdf");
		}
		else {
			logger.info("File Type in default: " + fileType);
			response.setContentType("application/octet-stream");
		}
		response.setHeader("Content-Disposition", "attachment;fileName="
				+ fileName);
		
      
            System.out.println("downloadPath In DownloadFile Method====="+rpt);
            FileInputStream in = new FileInputStream(f);
            int formDataLength = (int) f.length();
            ServletOutputStream out = response.getOutputStream();
            System.out.println("Check Point formDataLength ..." + formDataLength);

            byte[] outputByte = new byte[formDataLength * 2];
            // copy binary content to output stream
            while (in.read(outputByte, 0, formDataLength) != -1)
                {
                    out.write(outputByte, 0, formDataLength);
                }
            in.close();
            out.flush();
            out.close();
            fileName=null;
            return null;
	        }else{
	        	String msg="reportError";
	    		request.setAttribute("reportError","reportError");
	    		
	    		CibilVerificationVO vo=new CibilVerificationVO();
	    		vo.setLbxLeadId(leadId);
	        }
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
			
			CibilVerificationVO vo=new CibilVerificationVO();
			vo.setLbxLeadId(leadId);
			 logger.info("Implementation class: "+dao.getClass()); 
	         ArrayList gridList=dao.getpreDealGridList(vo);
	         ArrayList roleList=dao.getRoleList(leadId);
	         request.setAttribute("roleList", roleList);
	         request.setAttribute("gridList",gridList);
	         request.setAttribute("custName", vo.getCustName());
	         request.setAttribute("lbxLeadId", vo.getLbxLeadId());
	         request.setAttribute("leadno", vo.getLeadno());
	 		 businessDate=null;
	 		 strFlag=null;
	 		 leadId=null;
	 		return mapping.findForward("success"); 
		}
		//Pooja code for CRIF History Report End
	}