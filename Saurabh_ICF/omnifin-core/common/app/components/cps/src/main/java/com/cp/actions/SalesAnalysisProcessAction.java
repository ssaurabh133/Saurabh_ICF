/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.connect.DaoImplInstanceFactory;
import com.cp.fundFlowDao.FundFlowAnalysisDAO;
import com.cp.vo.SalesAnalysisVo;
import com.logger.LoggerMsg;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 09-28-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class SalesAnalysisProcessAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(SalesAnalysisProcessAction.class.getName());
	DecimalFormat myFormatter = new DecimalFormat("###,###.####");
	public ActionForward saveSalesAnalysisDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		
		  	boolean flag =false;
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
		    String userId="";
			String bgDate="";
			
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bgDate=userobj.getBusinessdate();
					
			}else{
				logger.info("here in saveSalesAnalysisDetails method of SalesAnalysisProcessAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
	
		FundFlowAnalysisDAO fundFlowAnalysisDAO=(FundFlowAnalysisDAO)DaoImplInstanceFactory.getDaoImplInstance(FundFlowAnalysisDAO.IDENTITY);
		logger.info("Implementation class: "+fundFlowAnalysisDAO.getClass());
		DynaValidatorForm salesAnalysisDynaValidatorForm = (DynaValidatorForm) form;
		SalesAnalysisVo vo=new SalesAnalysisVo();
	    org.apache.commons.beanutils.BeanUtils.copyProperties(vo, salesAnalysisDynaValidatorForm);
	
	   String saleYear="";
		vo.setUserId(userId);
		vo.setBusinessDate(bgDate);
		String dealId="";
		if(session.getAttribute("fundFlowDealId")!=null)
		{
			vo.setDealId(session.getAttribute("fundFlowDealId").toString());
			dealId = session.getAttribute("fundFlowDealId").toString();
			//logger.info("deal id.................................. "+session.getAttribute("fundFlowDealId").toString());
		}
		String exist="";
		/* kanika comment
			exist = ConnectionDAO.singleReturn("select SALES_ANALYSIS_ID from cr_sales_analysis_dtl where MONTH="+vo.getMonth()+" and YEAR="+vo.getYear()+" and DEAL_ID="+dealId+" and REC_STATUS='P'");
	
		*/
		
		if(exist!=null && !exist.equalsIgnoreCase(""))
		{
			//logger.info("exist .................................................."+exist);
			request.setAttribute("sms", "D");
		}
		else
		{		
			vo.setSalesMonthAndYear("01-"+vo.getMonth()+"-"+vo.getYear());
	
			boolean status=fundFlowAnalysisDAO.saveSalesAnalysis(vo);
			if(status)
			{
				request.setAttribute("sms", "S");
				
			}
			else
			{
				request.setAttribute("sms", "E");
		}
			 
		}
		
			ArrayList salesAnalysisDetail =new ArrayList();
			salesAnalysisDetail.add(vo);
			request.setAttribute("salesAnalysisDetail", salesAnalysisDetail); 
			request.setAttribute("insert", "insert");
			String recStatus="";
			if(session.getAttribute("fundFlowAuthor")!=null && session.getAttribute("fundFlowAuthor").toString().equalsIgnoreCase("A"))
			{
		    	recStatus="F";
			}
			else
			{
				recStatus="P";
				
			}   
			ArrayList salesAnalysisList = fundFlowAnalysisDAO.getSalesAnalysisDetails("",vo.getDealId(),recStatus,vo.getYear());
			
			if(salesAnalysisList.size()>0)
			{
			
				request.setAttribute("salesAnalysisList", salesAnalysisList);
			}
			ArrayList yearList = fundFlowAnalysisDAO.getYears(bgDate);
			 request.setAttribute("yearList", yearList);
			request.setAttribute("saveYear","");
	
	  return mapping.getInputForward();
	}
/*	
	public ActionForward deleteSalesAnalysisDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
	
		 LoggerMsg.info("In deleteSalesAnalysisDetails");
		
		    boolean flag =false;
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			  String userId="";
				String bDate="";
				
				if(userobj!=null)
				{
						userId=userobj.getUserId();
						bDate=userobj.getBusinessdate();
				}else{
					logger.info("here in deleteSalesAnalysisDetails method of SalesAnalysisProcessAction action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
		 boolean status=false;
		  
		String procresult="";
		 FundFlowAnalysisDAO dao = new FundFlowAnalysisDAOImpl();
		
		 String sales[] = request.getParameterValues("chk");
		 for(int k=0;k<sales.length;k++)
		 {
			
			// status = dao.deleteSalesAnalysis(sales[k],userobj.getBusinessdate(),userobj.getUserId());
			 procresult = dao.deleteSalesAnalysis(sales[k],bDate,userId);
		 }
		 
//		 if(status)
//		 {
//			 request.setAttribute("sms", "Del"); 
//			
//     	  }
		 
		 if(procresult.equalsIgnoreCase("S"))
		 {
				 request.setAttribute("sms", "Del"); 
			
	     }
		  else
		  {
				 request.setAttribute("sms", "DE"); 
				 request.setAttribute("procval", procresult);
		  }
		 String dealId="";
		    if(session.getAttribute("fundFlowDealId")!=null)
			 {
				 dealId = session.getAttribute("fundFlowDealId").toString();
			 }
		    String recStatus="";
			if(session.getAttribute("fundFlowAuthor")!=null && session.getAttribute("fundFlowAuthor").toString().equalsIgnoreCase("A"))
			{
		    	recStatus="F";
				
			}
			else
			{
				recStatus="P";
				
			}   
		 ArrayList salesAnalysisList = dao.getSalesAnalysisDetails("",dealId,recStatus,vo.getYear());
		 if(salesAnalysisList.size()>0)
		 {
			 request.setAttribute("salesAnalysisList", salesAnalysisList);
		 }
		 ArrayList yearList = dao.getYears(bDate);
		 request.setAttribute("yearList", yearList);
		return mapping.getInputForward();
	}*/
	
	public ActionForward getSalesAnalysis(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
	
		 LoggerMsg.info("In getSalesAnalysis .... ");
		
		  boolean flag =false;
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			String bDate="";
			if(userobj!=null)
			{
					bDate=userobj.getBusinessdate();
			}else{
				logger.info("here in getSalesAnalysis method of SalesAnalysisProcessAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			DynaValidatorForm salesAnalysisDynaValidatorForm = (DynaValidatorForm) form;
			SalesAnalysisVo vo=new SalesAnalysisVo();
		    org.apache.commons.beanutils.BeanUtils.copyProperties(vo, salesAnalysisDynaValidatorForm);
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
		String salesId="";
		 if(request.getParameter("salesId")!=null)
		 {
			 salesId=request.getParameter("salesId");
		 }
		 String dealId="";
		    if(session.getAttribute("fundFlowDealId")!=null)
			 {
				 dealId = session.getAttribute("fundFlowDealId").toString();
			 }
		    FundFlowAnalysisDAO dao=(FundFlowAnalysisDAO)DaoImplInstanceFactory.getDaoImplInstance(FundFlowAnalysisDAO.IDENTITY);
			logger.info("Implementation class: "+dao.getClass());
		 String recStatus="";
			if(session.getAttribute("fundFlowAuthor")!=null && session.getAttribute("fundFlowAuthor").toString().equalsIgnoreCase("A"))
			{
		    	recStatus="F";
				
			}
			else
			{
				recStatus="P";
				
			}   
		 ArrayList salesAnalysisList = dao.getSalesAnalysisDetails(salesId,dealId,recStatus,vo.getYear());
		 if(salesAnalysisList.size()>0)
		 {
			 request.setAttribute("salesAnalysisDetail", salesAnalysisList); 
		 }
			
			  
				
			  ArrayList yearList = dao.getYears(bDate);
				 request.setAttribute("yearList", yearList);	
		
		 return mapping.getInputForward();
	}
	
	/*public ActionForward updateSalesAnalysis(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
			 
		  	boolean flag =false;
		    HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
		    String userId="";
			String bgDate="";
			
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bgDate=userobj.getBusinessdate();
			}else{
				logger.info("here in updateSalesAnalysis method of SalesAnalysisProcessAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			FundFlowAnalysisDAO fundFlowAnalysisDAO = new FundFlowAnalysisDAOImpl();
			DynaValidatorForm salesAnalysisDynaValidatorForm = (DynaValidatorForm) form;
			SalesAnalysisVo vo=new SalesAnalysisVo();
		    org.apache.commons.beanutils.BeanUtils.copyProperties(vo, salesAnalysisDynaValidatorForm);
	   
		
		    
			vo.setUserId(userId);
			vo.setBusinessDate(bgDate);
		if(request.getParameter("salesId")!=null)
		{
			vo.setSalesId(request.getParameter("salesId"));
		}
		 String dealId="";
		    if(session.getAttribute("fundFlowDealId")!=null)
			 {
				 dealId = session.getAttribute("fundFlowDealId").toString();
				 vo.setDealId(dealId);
			 }
		String exist="";
		//if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
		//{
			exist = ConnectionDAO.singleReturn("select SALES_ANALYSIS_ID from cr_sales_analysis_dtl where SALES_ANALYSIS_ID!='"+vo.getSalesId()+"' AND MONTH="+vo.getMonth()+" and YEAR="+vo.getYear()+" and DEAL_ID="+dealId+" and REC_STATUS='P'");
		//}
		//else
		//{
		//	exist = ConnectionDAO.singleReturn("select SALES_ANALYSIS_ID from cr_sales_analysis_dtl where MONTH="+vo.getMonth()+" and YEAR="+vo.getYear()+" ");
		//}
		
		
		if(exist!=null)
		{
			//logger.info("exist .................................................."+exist);
			request.setAttribute("sms", "D");
		}
		else
		{
	//		    boolean status=fundFlowAnalysisDAO.updateSalesAnalysis(vo);
//			    if(status)
//			    {
//			    	request.setAttribute("sms", "S");
//			    }
//			    else
//			    {
//			    	request.setAttribute("sms", "E");
//			    }
			String status=fundFlowAnalysisDAO.updateSalesAnalysis(vo);
			
		}
	
		ArrayList salesAnalysisDetail =new ArrayList();
		salesAnalysisDetail.add(vo);
		request.setAttribute("salesAnalysisDetail", salesAnalysisDetail); 
		request.setAttribute("insert", "insert");
		
		
	    String recStatus="";
		if(session.getAttribute("fundFlowAuthor")!=null && session.getAttribute("fundFlowAuthor").toString().equalsIgnoreCase("A"))
		{
	    	recStatus="F";
			
		}
		else
		{
			recStatus="P";
			
		}   
	    ArrayList salesAnalysisList = fundFlowAnalysisDAO.getSalesAnalysisDetails("",dealId,recStatus);
	    if(salesAnalysisList.size()>0)
	    {
	    	request.setAttribute("salesAnalysisList", salesAnalysisList);
	    }
	    ArrayList yearList = fundFlowAnalysisDAO.getYears(bgDate);
		 request.setAttribute("yearList", yearList);
		 request.setAttribute("saveYear","");
	  return mapping.getInputForward();
	}*/
}