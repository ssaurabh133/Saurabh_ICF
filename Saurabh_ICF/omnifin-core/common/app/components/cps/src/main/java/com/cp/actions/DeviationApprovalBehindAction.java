/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.validator.DynaValidatorForm;

import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.DeviationApprovalDAO;
import com.cp.vo.DeviationApprovalVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 11-28-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class DeviationApprovalBehindAction extends Action {
	private static final Logger logger = Logger.getLogger(DeviationApprovalBehindAction.class.getName());
	
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub

		logger.info("In DeviationApprovalBehindAction(execute)");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String branchId="";
		if(userobj!=null)
		{
			userId=userobj.getUserId();
		}
		if(userobj==null){
			logger.info("here in execute method of DeviationApprovalBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		String dealId = "";
		String status = CommonFunction
				.checkNull(request.getParameter("status"));
		if (!status.equalsIgnoreCase("")) {
			request.setAttribute("status", status);
			if(status.equalsIgnoreCase("np"))
			{
				session.removeAttribute("viewDeal");
			}
		}
		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		DeviationApprovalDAO service=(DeviationApprovalDAO)DaoImplInstanceFactory.getDaoImplInstance(DeviationApprovalDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass());
		//DeviationApprovalDAO service = new DeviationApprovalDAOImpl();
		 DeviationApprovalVo vo = new DeviationApprovalVo();	
		 DynaValidatorForm CommonDynaValidatorForm= (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, CommonDynaValidatorForm);				
		String functionId=(String)session.getAttribute("functionId");
		if(CommonFunction.checkNull(functionId).equalsIgnoreCase("500000123")){
			session.setAttribute("viewDeal", "UWA");
			session.setAttribute("viewDeviationUND", "viewDeviationUND");
		}
		   if(CommonFunction.checkNull(vo.getUserId()).equalsIgnoreCase(""))
			{ 
		    	vo.setMakerId(userId);
		    	logger.info("In DeviationApprovalBehindAction(execute) getUserId: " + userId);
		}
		  				
		
		logger.info("In DeviationApprovalBehindAction(execute) dealid: " + dealId);
		
		if(session.getAttribute("viewDeviationUND")!=null && !CommonFunction.checkNull(session.getAttribute("viewDeviationUND").toString()).equalsIgnoreCase(""))
		{
			
			
			vo.setCheckAuthorIdFlag("Y");
			logger.info("vo.setCheckAuthorIdFlag();"+vo.getCheckAuthorIdFlag());
			
		}
		request.setAttribute("dealId", dealId);
		if ((dealId != null && !dealId.equalsIgnoreCase(""))) {
		
			
			ArrayList list = service.getDeviationApprovalDetails(vo,dealId);
			request.setAttribute("list", list);
			vo.setFunctionId(functionId);
			ArrayList<DeviationApprovalVo> manualDeviationM = service.manualDeviationM(vo,dealId);	
			request.setAttribute("manualDevList", manualDeviationM);
			ArrayList manualDeviationUND = service.manualDeviationUND(vo,dealId);
			request.setAttribute("manualDeviationUND", manualDeviationUND);
			//request.setAttribute("list", list);
			return mapping.findForward("success");
		}

		else {
			request.setAttribute("back", "B");
			return mapping.findForward("backToFirst");
		}
	}
}