/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.validator.DynaValidatorForm;

import com.business.CPClient.LeadProcessingRemote;
import com.connect.LookUpInstanceFactory;
import com.cp.vo.CreditProcessingLeadDetailDataVo;
import com.cp.vo.LeadCaptureVo;
import com.logger.LoggerMsg;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;


	public class LeadCommonAction extends Action {
		
		private static final Logger logger = Logger.getLogger(LeadCommonAction.class.getName());
            public ActionForward execute(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) throws Exception {
        		HttpSession session = request.getSession();
        		String branchId = "";
        		String leadno = "";
        		
        		UserObject userobj = (UserObject) session.getAttribute("userobject");
        		String userId="";
        		if(userobj!=null)
        		{
        			userId=userobj.getUserId();
        			branchId=userobj.getBranchId();
        		}else{
        			logger.info("here in execute method of LeadCommonAction action the session is out----------------");
        			return mapping.findForward("sessionOut");
        		}
        		String sessionId = session.getAttribute("sessionID").toString();
        		LoggerMsg.info("||||||||||||||||LEAD_____NO||||||||||||||||||||" + userobj.getBranchId());
        		ServletContext context = getServlet().getServletContext();
        		String strFlag="";
        	
        		
        		if(sessionId!=null)
        		{
        			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
        		}
        		
        		
        		if(!strFlag.equalsIgnoreCase(""))
        		{
        			if(strFlag.equalsIgnoreCase("sameUserSession"))
        			{
        				context.removeAttribute("msg");
        				context.removeAttribute("msg1");
        			}
        			else if(strFlag.equalsIgnoreCase("BODCheck"))
        			{
        				context.setAttribute("msg", "B");
        			}
        			return mapping.findForward("logout");
        		}
			
			if(session.getAttribute("leadno")!=null)
			{
				leadno=session.getAttribute("leadno").toString();
			}
			else if(session.getAttribute("maxId")!=null)
			{
				leadno=session.getAttribute("maxId").toString();
			}
			

			LoggerMsg.info("###################################: " +session.getAttribute("allocationid"));
			LoggerMsg.info("In LeadCapturingAction  execute id: " +session);
			
			LeadCaptureVo ob= new LeadCaptureVo();
			
			String tracking = (String) session.getAttribute("leadpageid");

			DynaValidatorForm LeadProcessingDynaValidatorForm= (DynaValidatorForm)form;
			org.apache.commons.beanutils.BeanUtils.copyProperties(ob, LeadProcessingDynaValidatorForm);

			   ob.setUserId(userId);
			   ob.setBranchId(branchId);
	
			   LeadProcessingRemote lp = (LeadProcessingRemote) LookUpInstanceFactory.getLookUpInstance(LeadProcessingRemote.REMOTE_IDENTITY, request);
			   
			
			String attr=session.getAttribute("leadpageid").toString();
			int a=Integer.parseInt(attr);

			if(a ==3000106){
				if(ob.getLeadGenerator1().equalsIgnoreCase("")){
					ob.setStatus("P");
				}else{
					ob.setLeadGenerator("");
					ob.setStatus("P");
				}
			}else if(a == 3000111){
				
				if(ob.getLeadGenerator1().equalsIgnoreCase("")){
					ob.setStatus("F");
				}else{
					ob.setLeadGenerator("");
					ob.setLbxBranchId("");
					ob.setStatus("F");
				}
				
			}else if(a == 3000116){
				
				ob.setStatus("L");
			}
			/*sachin*/
			String flag=request.getParameter("flag");
			if(flag!= null)
			{
				ob.setLbxProductID("");
				ob.setSchemeId("");
				ob.setLbxBranchId("");
			}
			/*sachin*/
			String source = "";
		
			ArrayList getCommonLeadData = lp.getCommonLeadData(ob,tracking);
			ArrayList<CreditProcessingLeadDetailDataVo> getSourceDetailList = lp.getSourceDetailList(source);
			request.setAttribute("sourceList", getSourceDetailList);
			
			if(getCommonLeadData.size() == 0){
				String msg = "";
				msg = "N";
				request.setAttribute("message", msg);
				return mapping.findForward("success");
				
			}else {
			LoggerMsg.info("In LeadCapturingAction getexistingData().... ");
			LoggerMsg.info("In LeadCapturingAction.........");
			
			if(a == 3000116){

				request.setAttribute("list",getCommonLeadData);
			    return mapping.findForward("tracking");
			}else {

				request.setAttribute("list",getCommonLeadData);
				return mapping.findForward("success");
			}
			}
			}
		}