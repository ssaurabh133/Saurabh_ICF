/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.cp.dao.CreditProcessingDAO;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.connect.DaoImplInstanceFactory;

/** 
 * MyEclipse Struts
 * Creation date: 09-15-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class loanBehindActionForEmiCalculation extends Action {
	/*
	 * Generated Methods
	 */
	private static final Logger logger = Logger.getLogger(loanBehindActionForEmiCalculation.class.getName());
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {

		logger.info("In loanBehindActionForEmiCalculation(execute) ");
		

		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String bDate="";
		String userId="";
		
		if(userobj!=null)
		{
				bDate=userobj.getBusinessdate();
				userId=userobj.getUserId();
		}else{
			logger.info("here in loanBehindActionForEmiCalculation method the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		//CreditProcessingDAO creditProcessing = new CreditProcessingDAOImpl();
		CreditProcessingDAO creditProcessing=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+creditProcessing.getClass()); 		//changed by anil
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String dealLoanId = "";
		String dealId =creditProcessing.getDealIdForEmiCalc(userId);
		logger.info("dealId---------------------------->" + dealId);
		session.setAttribute("userNameForProAtLe", userId);
		if (dealId != null && !CommonFunction.checkNull(dealId).equalsIgnoreCase("")) {
			
			String dealQuery = "select DEAL_LOAN_ID from cr_deal_loan_dtl_emi_calc where DEAL_ID='"+CommonFunction.checkNull(dealId)+"'";
			logger.info("In loanBehindDetailForEmiCalcu Query::::::::::::::::::" + dealQuery);
			dealLoanId = ConnectionDAO.singleReturn(dealQuery);
			logger.info("In loanBehindDetailForEmiCalcu(execute) dealLoanId:::::::::::::::"+ dealLoanId);
			
			String schemeQuery = "select DEAL_SCHEME from cr_deal_loan_dtl_emi_calc where DEAL_LOAN_ID='"+CommonFunction.checkNull(dealLoanId)+"'";
			logger.info("In loanBehindDetailForEmiCalcu Query::::::::::::::::::" + schemeQuery);
			String schemeId = ConnectionDAO.singleReturn(schemeQuery);
			logger.info("In loanBehindDetailForEmiCalcu schemeId:::::::::::::::"+ schemeId);
		
			ArrayList getLoanTypeList = creditProcessing.getLoanTypeList();
			ArrayList baseRateList = creditProcessing.getBaseRateList(bDate);
			ArrayList sector = creditProcessing.getSectorList();
			ArrayList cycle = creditProcessing.getCycleDueDay(schemeId,"DC");
			ArrayList productTypeList = creditProcessing.getProductTypeList();
			ArrayList loanList = creditProcessing.getLoanDetailListForEmiCalc(dealId);
			if (!CommonFunction.checkNull(dealLoanId).equalsIgnoreCase("")) {
				ArrayList allDetail = creditProcessing.getAllLoanDetailsForEmiCalc(dealLoanId);
				request.setAttribute("allDetail", allDetail);
			}
			session.setAttribute("loanList", loanList);
			
			request.setAttribute("sector", sector);
			request.setAttribute("interestFrom", creditProcessing.getinterstCalcFrom());
			request.setAttribute("cycle", cycle);
			request.setAttribute("baseRateList", baseRateList);
			request.setAttribute("productTypeList", productTypeList);
			request.setAttribute("getLoanType", getLoanTypeList);
			session.setAttribute("dealId", dealId);
			//START BY SACHIN
			ArrayList installmentTypeList=creditProcessing.getInstallmentTypeList();
			request.setAttribute("installmentTypeList", installmentTypeList);
			//END BY SACHIN
			return mapping.findForward("emiCaluSuccess");
		} else {
			logger.info("DealId doesn't exist-------------------------------->");
			ArrayList getLoanTypeList = creditProcessing.getLoanTypeList();
		    ArrayList baseRateList = creditProcessing.getBaseRateList(bDate);
			ArrayList sector = creditProcessing.getSectorList();
			ArrayList cycle = creditProcessing.getCycleDateList(dealId,"DC");
			ArrayList productTypeList = creditProcessing.getProductTypeList();
			request.setAttribute("interestFrom", creditProcessing.getinterstCalcFrom());
			request.setAttribute("sector", sector);
			request.setAttribute("cycle", cycle);
			request.setAttribute("baseRateList", baseRateList);
			request.setAttribute("productTypeList", productTypeList);			
			request.setAttribute("getLoanType", getLoanTypeList);
			//START BY SACHIN
			ArrayList installmentTypeList=creditProcessing.getInstallmentTypeList();
			request.setAttribute("installmentTypeList", installmentTypeList);
			//END BY SACHIN
			return mapping.findForward("emiCaluSuccess");
		}
	
	}
}