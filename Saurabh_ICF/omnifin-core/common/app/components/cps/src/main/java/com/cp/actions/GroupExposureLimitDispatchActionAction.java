/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.masters.vo.GcdGroupMasterVo;
import com.sap.mw.jco.JCO.Connection;
/** 
 * MyEclipse Struts
 * Creation date: 07-23-2012
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class GroupExposureLimitDispatchActionAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	private static final Logger logger = Logger.getLogger(GroupExposureLimitDispatchActionAction.class.getName());
	DecimalFormat myFormatter = new DecimalFormat("###,##0.00######");
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	
	public ActionForward openGroupExposerLimitGrid(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		logger.info(" In the GroupExposureLimitDispatchActionAction----------");
		
		logger.info("In openGroupExposerLimitGrid.....");
		HttpSession session = request.getSession();
		boolean flag=false;
		String userId="";
		String branch="";
		String businessDate="";
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			branch=userobj.getBranchId();
			businessDate=userobj.getBusinessdate();
			
		}else{
			logger.info("here in openGroupExposerLimit method of GroupExposureLimitDispatchActionAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		 String dealId = (String) session.getAttribute("dealId");
		 logger.info("In GroupExposureLimitDispatchActionAction(openGroupExposerLimitGrid) dealId "+ CommonFunction.checkNull(dealId).trim());
		 String customerTypeCountQuery="select count(DEAL_CUSTOMER_TYPE) from cr_deal_customer_role where DEAL_ID='"+dealId.trim()+"' ";
		 logger.info("customerTypeCountQuery: "+customerTypeCountQuery);
		 String customerTypeCount =ConnectionDAO.singleReturn(customerTypeCountQuery);
		 logger.info("customerTypeCount: "+customerTypeCount);
		 if(!CommonFunction.checkNull(customerTypeCount).equalsIgnoreCase("0"))
		{
			 CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
		     logger.info("Implementation class: "+dao.getClass()); // changed by asesh
		     String uwSearchUser=CommonFunction.checkNull(session.getAttribute("uwSearchUser")).trim();
			 ArrayList expoGrid=dao.getGroupExpLimitGrid(dealId,userId,uwSearchUser,businessDate);
		     request.setAttribute("expoGrid", expoGrid);
		}
		else
		{
			request.setAttribute("customerTypeCount", customerTypeCount);
		}
		
		 String customerQry="select deal_customer_id from cr_deal_dtl where deal_id='"+CommonFunction.checkNull(dealId).trim()+"'";		 
		 logger.info("In GroupExposureLimitDispatchActionAction(openGroupExposerLimitGrid) customerQry  :   "+ customerQry);
		 String applId=ConnectionDAO.singleReturn(customerQry);
		 request.setAttribute("applicantId", applId);
		 request.setAttribute("customerId", applId);
		 
		 
		 String limitQry="select AMOUNT_FROM,AMOUNT_TO,TERM_LOAN_AMOUNT,DEAL_SD_CHARGES,INCLUDE_EXPOSURE,EXPOSURE_WITH_SD from UNDER_WRITER_SEARCH_TEMP_DATA WHERE DEAL_ID='"+CommonFunction.checkNull(dealId).trim()+"' AND USER_ID='"+CommonFunction.checkNull(userId).trim()+"'";		 
		 logger.info("In GroupExposureLimitDispatchActionAction(openGroupExposerLimitGrid) limitQry  :   "+ limitQry);
		 logger.info("Select 1----");
		 ArrayList getGroupExposureDataDetail = ConnectionDAO.sqlSelect(limitQry);
		 logger.info("Select 2----");
		 for(int i=0;i<getGroupExposureDataDetail.size();i++)
		 {
			 logger.info("Select 3----");
			ArrayList data=(ArrayList)getGroupExposureDataDetail.get(i);
			String amtFrm=CommonFunction.checkNull(data.get(0)).trim();
			if(CommonFunction.checkNull(amtFrm).trim().equalsIgnoreCase(""))
				amtFrm="0.00";
			String amtTo=CommonFunction.checkNull(data.get(1)).trim();
			if(CommonFunction.checkNull(amtTo).trim().equalsIgnoreCase(""))
				amtTo="0.00";
			String grossAmountLoan=CommonFunction.checkNull(data.get(2)).trim();
			if(CommonFunction.checkNull(grossAmountLoan).trim().equalsIgnoreCase(""))
				grossAmountLoan="0.00";
			String sdCharge=CommonFunction.checkNull(data.get(3)).trim();
			if(CommonFunction.checkNull(sdCharge).trim().equalsIgnoreCase(""))
				sdCharge="0.00";
			String includeExposure=CommonFunction.checkNull(data.get(4)).trim();
			if(CommonFunction.checkNull(includeExposure).trim().equalsIgnoreCase(""))
				includeExposure="N";
			String exposureWithSD=CommonFunction.checkNull(data.get(5)).trim();
			if(CommonFunction.checkNull(exposureWithSD).trim().equalsIgnoreCase(""))
				exposureWithSD="N";
			
			request.setAttribute("includeExposure",includeExposure);
			request.setAttribute("exposureWithSD",exposureWithSD);
			
			request.setAttribute("amountFrom",amtFrm);
			request.setAttribute("amountTo",amtTo);
						
			Number grossAmountLoan1 =myFormatter.parse(grossAmountLoan);
			request.setAttribute("grossAmountLoan", myFormatter.format(grossAmountLoan1));
			Number sdCharge1 =myFormatter.parse(sdCharge);
			request.setAttribute("sdCharge", myFormatter.format(sdCharge1));
			
			logger.info("Select 4----");
			
			String LoanAmount = ConnectionDAO.singleReturn(" SELECT IFNULL(ROUND(DEAL_LOAN_AMOUNT,0),0) FROM CR_DEAL_LOAN_DTL  WHERE DEAL_ID = '"+dealId+"' ");
			String SancLoanAmount = ConnectionDAO.singleReturn(" SELECT IFNULL(ROUND(DEAL_SANCTION_AMOUNT,0),0) FROM CR_DEAL_LOAN_DTL  WHERE DEAL_ID = '"+dealId+"' ");
			String FinalAmount = SancLoanAmount;
			if(CommonFunction.checkNull(FinalAmount).equalsIgnoreCase("0") || CommonFunction.checkNull(FinalAmount).equalsIgnoreCase("")){
				FinalAmount = LoanAmount;
			}
			double groupExposureLimit = Double.parseDouble(FinalAmount);
			logger.info("Select 5 groupExposureLimit----"+groupExposureLimit);
			double LoanBalancePrincipal = 0;
			int count = Integer.parseInt(ConnectionDAO.singleReturn(" select count(1) from cr_loan_dtl "
							+ " where  loan_id in (select loan_id from cr_loan_customer_role "
													+ " where gcd_id = (select distinct deal_customer_id from cr_deal_dtl where deal_id = '"+dealId+"' ) "
										+ " and loan_id is not null) and loan_deal_id <> '"+dealId+"' ") );
			logger.info("Select 6 count----"+count);
			 if (count > 0) {
			        logger.info(" select round(sum(loan_balance_principal),0) from cr_loan_dtl where  loan_id in (select loan_id from cr_loan_customer_role   where gcd_id  IN (select distinct deal_customer_id from cr_deal_dtl where deal_id = '" + dealId + "' and loan_id is not null) and loan_deal_id <> '" + dealId + "' ");

			        LoanBalancePrincipal = Double.parseDouble(ConnectionDAO.singleReturn(" select round(sum(IFNULL(loan_balance_principal,0)),0) from cr_loan_dtl  where  loan_id in (select loan_id from cr_loan_customer_role  where gcd_id  IN (select distinct deal_customer_id from cr_deal_dtl where deal_id = '" + dealId + "' ) " + " and loan_id is not null) and loan_deal_id <> '" + dealId + "' "));

			        logger.info("Select 6 LoanBalancePrincipal----" + LoanBalancePrincipal);
			      }
			double finalValue = groupExposureLimit+LoanBalancePrincipal;
			if(finalValue<1){
				String groupExposureLimit1 = "0.00";
				String DealProduct = ConnectionDAO.singleReturn(" SELECT DEAL_PRODUCT FROM CR_DEAL_LOAN_DTL WHERE DEAL_ID = '"+CommonFunction.checkNull(dealId).trim()+"' ");
				int count1 = Integer.parseInt(ConnectionDAO.singleReturn("SELECT count(1) FROM CR_SBL_M WHERE REC_STATUS = 'A' AND PRODUCT_ID = '"+DealProduct+"'"));
				if(count1>0)
				groupExposureLimit1 = ConnectionDAO.singleReturn("SELECT IFNULL(ROUND(GROUPBORROWERLIMIT,2),2) FROM CR_SBL_M WHERE REC_STATUS = 'A' AND PRODUCT_ID = '"+DealProduct+"'");
				finalValue = Double.parseDouble(groupExposureLimit1);
			}
			logger.info("Select 7 finalValue----"+finalValue);
			String  FinalgroupExposureLimit = String.valueOf(finalValue);
			logger.info("Select 8 FinalgroupExposureLimit----"+FinalgroupExposureLimit);
			request.setAttribute("groupExposureLimit",FinalgroupExposureLimit);
			request.setAttribute("customerTotalExposure","0.00");
			request.setAttribute("loanBalansePrincipal","0.00");
			request.setAttribute("loanOverduePrincipal","0.00");
			request.setAttribute("sdAdviceAmount","0.00");
			request.setAttribute("productExposure","0.00");
			request.setAttribute("exposureScheme","0.00");
			request.setAttribute("exposureCurrentScheme","0.00");
			request.setAttribute("industryExposure","0.00");
			request.setAttribute("subIndustryExposure","0.00");
			
			BigDecimal dealSDChargeAmt = new BigDecimal("0.00");
			BigDecimal loanAmount = new BigDecimal("0.00");
			BigDecimal eposureAmount = new BigDecimal("0.00");
			
			dealSDChargeAmt = new BigDecimal(sdCharge);
			loanAmount = new BigDecimal(grossAmountLoan);
			eposureAmount = new BigDecimal("0.00");
						
			eposureAmount=loanAmount;
			if(CommonFunction.checkNull(includeExposure).trim().equalsIgnoreCase("Y"))
			{
				if(CommonFunction.checkNull(exposureWithSD).trim().equalsIgnoreCase("Y"))
				{
					eposureAmount=loanAmount.subtract(dealSDChargeAmt);
				}
			}
			request.setAttribute("exposureAmt", myFormatter.format(eposureAmount));
		}
		String CustId = CommonFunction.checkNull(ConnectionDAO.singleReturn(" SELECT IFNULL(DEAL_CUSTOMER_ID,'') FROM CR_DEAL_DTL WHERE DEAL_ID = '"+CommonFunction.checkNull(dealId).trim()+"' ")); 
		String CustGroupId = CommonFunction.checkNull(ConnectionDAO.singleReturn(" SELECT IFNULL(CUSTOMER_GROUP_ID,'') FROM CR_DEAL_CUSTOMER_M WHERE CUSTOMER_ID = '"+CommonFunction.checkNull(CustId).trim()+"' "));
		String sbl = CommonFunction.checkNull(ConnectionDAO.singleReturn(" SELECT IFNULL(SINGLEBORROWERLIMIT,0) FROM CR_SBL_M WHERE PRODUCT_ID = (SELECT IFNULL(DEAL_PRODUCT,'') FROM CR_DEAL_LOAN_dTL WHERE DEAL_ID = '"+CommonFunction.checkNull(dealId).trim()+"') ")); 
		String gbl = CommonFunction.checkNull(ConnectionDAO.singleReturn(" SELECT IFNULL(GROUPBORROWERLIMIT,0) FROM CR_SBL_M WHERE PRODUCT_ID = (SELECT IFNULL(DEAL_PRODUCT,'') FROM CR_DEAL_LOAN_dTL WHERE DEAL_ID = '"+CommonFunction.checkNull(dealId).trim()+"') "));
		String CustCurrentPos = CommonFunction.checkNull(ConnectionDAO.singleReturn(" SELECT IFNULL(ROUND(SUM(LOAN_BALANCE_PRINCIPAL),2),0.00) FROM CR_LOAN_DTL WHERE LOAN_ID IN (SELECT LOAN_ID FROM CR_LOAN_CUSTOMER_ROLE WHERE GCD_ID = (SELECT GCD_ID FROM CR_DEAL_CUSTOMER_ROLE WHERE DEAL_CUSTOMER_ID = '"+CustId+"')) ")); 
		String GroupPos = CommonFunction.checkNull(ConnectionDAO.singleReturn(" SELECT IFNULL(ROUND(SUM(LOAN_BALANCE_PRINCIPAL),2),0.00) FROM CR_LOAN_CUSTOMER_ROLE R JOIN CR_LOAN_DTL L ON R.LOAN_ID = L.LOAN_ID JOIN cr_deal_customer_m M ON R.GCD_ID = M.CUSTOMER_ID WHERE M.CUSTOMER_GROUP_ID = '"+CustGroupId+"' AND R.LOAN_CUSTOMER_ROLE_TYPE IN ('PRAPPL','COAPPL') "));
		request.setAttribute("sbl",sbl);
		request.setAttribute("gbl",gbl);
		request.setAttribute("custCurrentPos",CustCurrentPos);
		request.setAttribute("groupPos",GroupPos);
		
		logger.info("customerTypeCount: "+customerTypeCount);
		if(!CommonFunction.checkNull(customerTypeCount).equalsIgnoreCase("0"))
		{
			return mapping.findForward("openGroupExposure");
		}
		else
		{
			return mapping.findForward("canNotOpenGroupExposure");
		}
		
}
	
	
	public ActionForward saveGroupExposer(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		logger.info(" In the GroupExposureLimitDispatchActionAction----------");
		
		logger.info("In saveGroupExposer.....");
		HttpSession session = request.getSession();
		boolean flag=false;
		String userId="";
		String bDate="";
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in saveGroupExposer method of GroupExposureLimitDispatchActionAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		session.removeAttribute("dealExposureAmount");
	    session.removeAttribute("dealExLoanAmount");
	    session.removeAttribute("exposureLimit");	 
	    
		DynaValidatorForm GroupExposureLimitDynaValidatorForm = (DynaValidatorForm) form;
		GcdGroupMasterVo groupVo=new GcdGroupMasterVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(groupVo, GroupExposureLimitDynaValidatorForm);
	    groupVo.setRecStatus("A");
	    groupVo.setMakerId(userId);
	    groupVo.setMakerDate(bDate);
	    String dealId = (String) session.getAttribute("dealId");
		logger.info("In GroupExposureLimitDispatchActionAction(saveGroupExposer) dealId "+ dealId+" customerId: "+GroupExposureLimitDynaValidatorForm.getString("customerId"));
		groupVo.setDealId(dealId);
		CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	     logger.info("Implementation class: "+dao.getClass()); 			// changed by asesh
		 
		 String flagSt=dao.saveGroupExposureLimit(groupVo);
  	   
		if(CommonFunction.checkNull(flagSt).equalsIgnoreCase("S"))
		{			
			request.setAttribute("sms", "S");
		}
		else
		{
			request.setAttribute("sms", "X");
		}
		return mapping.findForward("saveGroupExposure");
	}
	
	
	
}