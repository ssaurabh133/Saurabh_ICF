/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.BuyerSupplierOtherVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 03-26-2013
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class OtherRelationProcessAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	private static final Logger logger = Logger.getLogger(OtherRelationProcessAction.class.getName());
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward saveOtherRelation(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		
        logger.info("In saveOtherRelation Detail  ");
		
		HttpSession session = request.getSession();

		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String branchId="";
		String bDate="";
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			branchId=userobj.getBranchId();
			bDate=userobj.getBusinessdate();
		}else{
			logger.info(" in  execute method of OtherRelationShipBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		Object sessionId = session.getAttribute("sessionID");
	
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String dealId = "";

		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		logger.info("In OtherRelationShipBehindAction fetchOtherRelation id "+ dealId);
		DynaValidatorForm OtherRelationBuyerSupplierDynaValidatorForm= (DynaValidatorForm)form;
		BuyerSupplierOtherVo vo = new BuyerSupplierOtherVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, OtherRelationBuyerSupplierDynaValidatorForm);
		vo.setMakerId(userId);
		vo.setMakerDate(bDate);		
		vo.setDealId(dealId);
		CreditProcessingDAO detail=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
		logger.info("Implementation class: "+detail.getClass());
	    boolean status=detail.saveOtherRelation(vo);
        if(status)
        {
        	request.setAttribute("msg", "S");
        }else
        {
        	request.setAttribute("msg", "E");
        }
		return  mapping.findForward("success");
	}
	public ActionForward updateOtherRelation(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		
        logger.info("In updateOtherRelation Detail  ");
		
		HttpSession session = request.getSession();

		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String branchId="";
		String bDate="";
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			branchId=userobj.getBranchId();
			bDate=userobj.getBusinessdate();
		}else{
			logger.info(" in  updateOtherRelation method of OtherRelationShipBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		Object sessionId = session.getAttribute("sessionID");
	
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String dealId = "";

		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		logger.info("In OtherRelationShipBehindAction updateOtherRelation id "+ dealId);
		DynaValidatorForm OtherRelationBuyerSupplierDynaValidatorForm= (DynaValidatorForm)form;
		BuyerSupplierOtherVo vo = new BuyerSupplierOtherVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, OtherRelationBuyerSupplierDynaValidatorForm);
		vo.setMakerId(userId);
		vo.setMakerDate(bDate);		
		vo.setDealId(dealId);
		String otherUniqueId=request.getParameter("otherUniqueId");
		logger.info("otherUniqueId: "+otherUniqueId);
		vo.setOtherUniqueId(otherUniqueId);
		CreditProcessingDAO detail=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
		logger.info("Implementation class: "+detail.getClass());
	    boolean status=detail.updateOtherRelation(vo);
        if(status)
        {
        	request.setAttribute("msg", "S");
        }else
        {
        	request.setAttribute("msg", "E");
        }
		return  mapping.findForward("success");
	}
}