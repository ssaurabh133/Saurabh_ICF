/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;
import java.util.Iterator;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.CodeDescVo;
import com.cp.vo.HeaderInfoVo;
import com.cp.vo.LoanDetailVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import org.apache.commons.lang.StringEscapeUtils;


/**
 * MyEclipse Struts Creation date: 04-07-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class LoanBehindAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(LoanBehindAction.class.getName());
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward loanBehindDetail(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		logger.info("In LoanBehindAction(loanBehindDetail) ");
		

		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String bDate="";
		String userId="";
		if(userobj!=null)
		{
				bDate=userobj.getBusinessdate();
				userId=userobj.getUserId();
		}else{
			logger.info("here in loanBehindDetail method of LoanBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		CreditProcessingDAO creditProcessing=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+creditProcessing.getClass()); 			// changed by asesh
		//CreditProcessingDAO creditProcessing = new CreditProcessingDAOImpl();
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String dealId = "";
		String dealloanId = "";
		session.setAttribute("userNameForProAtLe", userId);
		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		logger.info("In LoanBehindAction(loanBehindDetail) dealid " + dealId);
		ArrayList dealHeader = creditProcessing.getDealHeader(dealId);
		session.setAttribute("dealHeader", dealHeader);
		if (dealId != null && !CommonFunction.checkNull(dealId).equalsIgnoreCase("")) {
			String dealQuery = "select DEAL_LOAN_ID from cr_deal_loan_dtl where DEAL_ID="+ dealId;
			logger.info("In LoanBehindAction(execute) Query: " + dealQuery);
			dealloanId = ConnectionDAO.singleReturn(dealQuery);
			logger.info("In LoanBehindAction(execute) dealloanId:  "+ dealloanId);
			
			
			String leadQuery = "select LEAD_ID from cr_deal_dtl where DEAL_ID='"+dealId.trim()+"'";
			logger.info("In LoanBehindAction(loanBehindDetail) leadQuery: " + leadQuery);
			String leadId = ConnectionDAO.singleReturn(leadQuery);
			
			//start by sachin
			String flagLoanType="";
			logger.info("In LoanBehindAction(loanBehindDetail) LEAD_ID:  "+ leadId);
			if(CommonFunction.checkNull(leadId).equalsIgnoreCase("")){
				flagLoanType="y";
				logger.info("flagLoanType"+flagLoanType);
				request.setAttribute("flagLoanType",flagLoanType);
			}
			//end by sachin
			String leadScheme="";
			if(!CommonFunction.checkNull(leadId).equalsIgnoreCase("") && CommonFunction.checkNull(dealloanId).equalsIgnoreCase(""))
			{
				String productSchemeQuery = "select L.PRODUCT,L.SCHEME,L.LOAN_TENURE,L.AMOUNT_REQUIRED,L.LOAN_PURPOSE,L.LOAN_TYPE,P.PRODUCT_CATEGORY,P.PRODUCT_DESC,S.SCHEME_DESC,L.SECTOR_TYPE ,(select value from generic_master where generic_key = 'LOAN_PURPOSE' and description=L.LOAN_PURPOSE and parent_value = L.PRODUCT ),0 as premium from cr_lead_dtl L INNER JOIN CR_PRODUCT_M P ON P.PRODUCT_ID=L.PRODUCT INNER JOIN CR_SCHEME_M S ON S.SCHEME_ID=L.SCHEME where L.REC_STATUS='A' AND L.LEAD_ID='"+leadId.trim()+"'";
				logger.info("In LoanBehindAction(loanBehindDetail) productSchemeQuery: " + productSchemeQuery);
				ArrayList productScheme = ConnectionDAO.sqlSelect(productSchemeQuery);
				logger.info("In LoanBehindAction(loanBehindDetail) productScheme:  "+ productScheme);
				int psize=productScheme.size();
				if(psize>0)
				{
					for(int i=0;i<psize;i++)
					{
						ArrayList data=(ArrayList)productScheme.get(i);
						if(data.size()>0)
						{
							 // Start By Prashant
							String product=CommonFunction.checkNull(data.get(0));
							String scheme=CommonFunction.checkNull(data.get(1));
							String loanTenure=CommonFunction.checkNull(data.get(2));
							String loanAmount=CommonFunction.checkNull(data.get(3));
							String loanPurpose=CommonFunction.checkNull(data.get(4));
							String loanType=CommonFunction.checkNull(data.get(5));
							String productType=CommonFunction.checkNull(data.get(6));
							String productDesc=CommonFunction.checkNull(data.get(7));
							String schemeDesc=CommonFunction.checkNull(data.get(8));
							String sectorType=CommonFunction.checkNull(data.get(9)); // End By Prashant
							String loanPurposeValue = CommonFunction.checkNull(data.get(10));
							String premium=CommonFunction.checkNull(data.get(11));
							
							leadScheme=scheme;
							logger.info("Info from lead: product: "+product+" scheme: "+scheme+" loanTenure: "+loanTenure+" loanAmount: "+loanAmount+" loanPurpose: "+loanPurpose+" productType: "+productType+" productDesc: "+productDesc+" schemeDesc: "+schemeDesc+" sectorType: " + sectorType  + " loanPurposeValue: " + loanPurposeValue+"+premium: " + premium);

							dealHeader = creditProcessing.getDealHeader(dealId);
							HeaderInfoVo vo =(HeaderInfoVo)dealHeader.get(0);
							vo.setDealProduct(productDesc);
							vo.setDealScheme(schemeDesc);
							vo.setDealProductCat(productType);
							dealHeader.add(vo);
							vo=null;
							request.setAttribute("dealHeader", dealHeader);
							ArrayList allDetail=creditProcessing.getProductSchemeDetailsFromLead(product,scheme,loanTenure,loanAmount,loanPurpose,bDate,loanType,sectorType, loanPurposeValue,premium);
							 product=null;
							 scheme=null;
							 loanTenure=null;
							 loanAmount=null;
							 loanPurpose=null;
							 loanType=null;
							 productType=null;
							 productDesc=null;
						     schemeDesc=null;
						    loanPurposeValue = null;
							request.setAttribute("allDetail", allDetail);
							request.setAttribute("leadDetail", "leadDetail");
							//amandeep starts
							ArrayList list1 = creditProcessing.getPaymentModes();
							request.setAttribute("paymentModes", list1);
						}
					}
				}
			
				
			}
			// Start By Prashant
			String diffDayQuery="select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY='REPY_DATE_AFTER'";
			String diffDayCount=ConnectionDAO.singleReturn(diffDayQuery);
			logger.info("diffDayQuery: "+diffDayQuery+" diffDayCount: "+diffDayCount);
			request.setAttribute("diffDayCount", diffDayCount);
			// End By Prashant
			ArrayList getLoanTypeList = creditProcessing.getLoanTypeList();
		
			ArrayList baseRateList = creditProcessing.getBaseRateList(bDate);
			ArrayList sector = creditProcessing.getSectorList();
			ArrayList interestFrom=creditProcessing.getinterstCalcFrom(); //Surendra Code
			if(!CommonFunction.checkNull(leadScheme).equalsIgnoreCase(""))
			{
				ArrayList cycle = creditProcessing.getCycleDueDay(leadScheme,"DC");
				request.setAttribute("cycle", cycle);
				logger.info("In loanBehindDetail cycle if::::: "+cycle);
			}else
			{
				ArrayList cycle = creditProcessing.getCycleDateList(dealId,"DC");
				request.setAttribute("cycle", cycle);
				logger.info("In loanBehindDetail cycle else::::: "+cycle);
			}
				
			ArrayList productTypeList = creditProcessing.getProductTypeList();
			ArrayList loanList = creditProcessing.getLoanDetailList(dealId);
			if (!CommonFunction.checkNull(dealloanId).equalsIgnoreCase("")) {
				ArrayList allDetail = creditProcessing.getAllLoanDetails(dealloanId);

				request.setAttribute("allDetail", allDetail);
			}
			else
			{
				ArrayList dueDayList=creditProcessing.fetchDueDayNextDate(bDate);
				request.setAttribute("dueDayList", dueDayList);
			}
			
			ArrayList<LoanDetailVo> loanClassificationList = creditProcessing.getresultForDeal(dealId);
			request.setAttribute("loanClassificationList", loanClassificationList);
			
			//START BY SACHIN
			ArrayList installmentTypeList=creditProcessing.getInstallmentTypeList();
			request.setAttribute("installmentTypeList", installmentTypeList);
			//END BY SACHIN
			session.setAttribute("loanList", loanList);
			logger.info("In LoanBehindAction execute Loan Detail "+ loanList.size());
			logger.info("In LoanBehindAction execute "+ productTypeList.size());
			//amandeep starts
			ArrayList list3 = creditProcessing.getPaymentModes();
			session.setAttribute("paymentModes", list3);
			//amandeep ends
			request.setAttribute("sector", sector);
			//request.setAttribute("cycle", cycle);
			request.setAttribute("baseRateList", baseRateList);
			request.setAttribute("productTypeList", productTypeList);			
			request.setAttribute("getLoanType", getLoanTypeList);
			request.setAttribute("interestFrom", interestFrom);
			request.setAttribute("schemeList", "schemeList");
			//session.setAttribute("repayType", "L");
			//amandeep starts
			ArrayList list1 = creditProcessing.getPaymentModes();
			request.setAttribute("paymentModes", list1);
			
			ArrayList<CodeDescVo> intFreq = creditProcessing.getGenericMasterList("INTEREST_FREQ");
			ArrayList<CodeDescVo> intCal = creditProcessing.getGenericMasterList("INTEREST_CAL");
			ArrayList<CodeDescVo> intComFreq = creditProcessing.getGenericMasterList("INTEREST_COM_FREQ");
			
			request.setAttribute("intFreq", intFreq);
			request.setAttribute("intCal", intCal);
			request.setAttribute("intComFreq", intComFreq);
			
			
			return mapping.findForward("success");
		} else {
			request.setAttribute("back", "B");
			return mapping.findForward("backToFirst");
		}
	}

	public ActionForward deleteLoan(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		logger.info("In LoanDetailProcessAction in deleteLoan");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String bDate="";
		
		if(userobj!=null)
		{
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in deleteLoan method of LoanBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String dealId = "";
	
		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		logger.info("In LoanBehindAction(deleteLoan) dealid " + dealId);
		
		String dealLoanId[] = request.getParameterValues("chk");
		boolean status = false;
		CreditProcessingDAO loanService=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+loanService.getClass()); 			// changed by asesh
		//CreditProcessingDAO loanService = new CreditProcessingDAOImpl();
		//for (int i = 0; i < dealLoanId.length; i++) {
			logger.info("dealLoanId[]: " + dealLoanId);
			status = loanService.deleteLoanDetails(dealLoanId);
		//}
		String sms = "";
		if (status) {
			
			status=loanService.deleteChargeInstallmentRepay(dealId,dealLoanId);
			status=loanService.deleteApplDocs(dealId,dealLoanId);
			sms = "S";
		} else {
			sms = "E";
		}
		//START BY SACHIN
		ArrayList installmentTypeList=loanService.getInstallmentTypeList();
		request.setAttribute("installmentTypeList", installmentTypeList);
		//END BY SACHIN
		// Start By Prashant
		
		logger.info("before forUpdateByTrigger dealId is: "+dealId );
		String forUpdateByTrigger="UPDATE cr_deal_dtl set DEAL_APPLICATION_FORM_NO=DEAL_APPLICATION_FORM_NO where deal_id='"+dealId+"'";
		String forUpdateByTriggerQuery=ConnectionDAO.singleReturn(forUpdateByTrigger);	
		
		logger.info("After forUpdateByTrigger query is: "+forUpdateByTrigger );
		
		String diffDayQuery="select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY='REPY_DATE_AFTER'";
		String diffDayCount=ConnectionDAO.singleReturn(diffDayQuery);
		logger.info("diffDayQuery: "+diffDayQuery+" diffDayCount: "+diffDayCount);
		request.setAttribute("diffDayCount", diffDayCount);
		ArrayList dueDayList=loanService.fetchDueDayNextDate(bDate);
		request.setAttribute("dueDayList", dueDayList);
		// End By Prashant
		ArrayList getLoanTypeList = loanService.getLoanTypeList();
		request.setAttribute("getLoanType", getLoanTypeList);
		
		ArrayList baseRateList = loanService.getBaseRateList(bDate);
		ArrayList productTypeList = loanService.getProductTypeList();
		ArrayList loanList = loanService.getLoanDetailList(dealId);
		ArrayList cycle = loanService.getCycleDateList(dealId,"DC");
		ArrayList sector = loanService.getSectorList();
		ArrayList interestFrom=loanService.getinterstCalcFrom(); //Surendra Code
		session.setAttribute("loanList", loanList);
		request.setAttribute("productTypeList", productTypeList);
		request.setAttribute("deletedRecord", sms);
		logger.info("In LoanBehindAction execute Loan Detail "+ loanList.size());
		logger.info("In LoanBehindAction execute " + productTypeList.size());
		request.setAttribute("productTypeList", productTypeList);
		request.setAttribute("baseRateList", baseRateList);
		ArrayList dealHeader = loanService.getDealHeader(dealId);
		session.setAttribute("dealHeader", dealHeader);
		request.setAttribute("cycle", cycle);
		request.setAttribute("sector", sector);
		request.setAttribute("interestFrom", interestFrom);
		
		ArrayList<CodeDescVo> intFreq = loanService.getGenericMasterList("INTEREST_FREQ");
		ArrayList<CodeDescVo> intCal = loanService.getGenericMasterList("INTEREST_CAL");
		ArrayList<CodeDescVo> intComFreq = loanService.getGenericMasterList("INTEREST_COM_FREQ");
		
		request.setAttribute("intFreq", intFreq);
		request.setAttribute("intCal", intCal);
		request.setAttribute("intComFreq", intComFreq);
		
		int LoanDetailCount = Integer.parseInt(CommonFunction.checkNull(ConnectionDAO.singleReturn("select count(1) from cr_business_partner_dtl where deal_id = '"+dealId+"' ")));
		if(LoanDetailCount > 0){
			StringBuilder query = new StringBuilder();
			ArrayList qryList = new ArrayList();
		    StringBuffer bufInsUpdSql = new StringBuffer();
	        query.append("delete from cr_business_partner_dtl where deal_id = '"+dealId+"' ");
	        qryList.add(query);
	        query = null;
	        boolean Deletestatus = ConnectionDAO.sqlInsUpdDelete(qryList);
		}
		return mapping.findForward("success");
	}

	public ActionForward fetchLoanDetail(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		// TODO Auto-generated method stub
		logger.info("In LoanDetailProcessAction in fetchLoanDetail");

		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String bDate="";
		 
		if(userobj!=null)
		{
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in fetchLoanDetail method of LoanBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String dealId = "";
		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		logger.info("In LoanDetailProcessAction in fetchLoanDetail dealid "+ dealId);
		// String dealLoanId[]=request.getParameterValues("chk");
		String dealloan = request.getParameter("dealLoanId");
		CreditProcessingDAO loanService=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+loanService.getClass()); 			// changed by asesh
		// for(int i=0;i<dealLoanId.length;i++)
		// {
		logger.info("dealloan: " + dealloan);
		// dealloan=dealLoanId[i];
		// }
		// Start By Prashant
		String diffDayQuery="select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY='REPY_DATE_AFTER'";
		String diffDayCount=ConnectionDAO.singleReturn(diffDayQuery);
		logger.info("diffDayQuery: "+diffDayQuery+" diffDayCount: "+diffDayCount);
		request.setAttribute("diffDayCount", diffDayCount);
		// End By Prashant
		//START BY SACHIN
		ArrayList installmentTypeList=loanService.getInstallmentTypeList();
		request.setAttribute("installmentTypeList", installmentTypeList);
		//END BY SACHIN
		ArrayList allDetail = loanService.getAllLoanDetails(dealloan);
		//RICHA
		ArrayList<LoanDetailVo> loanClassificationList = loanService.getresultForDeal(dealId);
		request.setAttribute("loanClassificationList", loanClassificationList);
		LoanDetailVo pdId = (LoanDetailVo) allDetail.get(0);
		ArrayList<CodeDescVo> schemeList = loanService.getSchemeList(pdId.getProduct());
		request.setAttribute("schemeList", schemeList);
		ArrayList sector = loanService.getSectorList();
		ArrayList cycle = loanService.getCycleDateList(dealId,"DC");
		ArrayList interestFrom=loanService.getinterstCalcFrom(); //Surendra Code
		
	
		ArrayList baseRateList = loanService.getBaseRateList(bDate);
		ArrayList productTypeList = loanService.getProductTypeList();
		
		logger.info("In LoanDetailProcessAction in fetchLoanDetail dealid= "+ dealId);
		ArrayList loanList = loanService.getLoanDetailList(dealId);
		session.setAttribute("loanList", loanList);
		request.setAttribute("productTypeList", productTypeList);
		if(allDetail.size()>0)
		{
			request.setAttribute("allDetail", allDetail);
		}
		else
		{
			ArrayList dueDayList=loanService.fetchDueDayNextDate(bDate);
			request.setAttribute("dueDayList", dueDayList);
		}
		
		ArrayList list1 = loanService.getPaymentModes();
		request.setAttribute("paymentModes", list1);
		logger.info("In LoanDetailProcessAction in fetchLoanDetail Loan Detail "+ loanList.size());
		logger.info("In LoanDetailProcessAction in fetchLoanDetail "+ productTypeList.size());
		logger.info("In LoanDetailProcessAction in fetchLoanDetail "+ allDetail.size());
		ArrayList getLoanTypeList = loanService.getLoanTypeList();
		
		request.setAttribute("getLoanType", getLoanTypeList);
		request.setAttribute("productTypeList", productTypeList);
		request.setAttribute("baseRateList", baseRateList);
		ArrayList dealHeader = loanService.getDealHeader(dealId);
		session.setAttribute("dealHeader", dealHeader);
		request.setAttribute("sector", sector);
		request.setAttribute("cycle", cycle);
		request.setAttribute("interestFrom", interestFrom);
		
		ArrayList<CodeDescVo> intFreq = loanService.getGenericMasterList("INTEREST_FREQ");
		ArrayList<CodeDescVo> intCal = loanService.getGenericMasterList("INTEREST_CAL");
		ArrayList<CodeDescVo> intComFreq = loanService.getGenericMasterList("INTEREST_COM_FREQ");
		
		request.setAttribute("intFreq", intFreq);
		request.setAttribute("intCal", intCal);
		request.setAttribute("intComFreq", intComFreq);
		
		
		return mapping.findForward("success");
	}
	
	// Start by Anil
	public ActionForward loanBehindDetailForEmiCalc(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		logger.info("In loanBehindDetailForEmiCalc ");
		
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String bDate="";
		
		if(userobj!=null)
		{
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in loanBehindDetail method of loanBehindDetailForEmiCalcu action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		//CreditProcessingDAO creditProcessing = new CreditProcessingDAOImpl();
        CreditProcessingDAO creditProcessing=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+creditProcessing.getClass()); 		//changed by anil
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String dealId = "";
		String dealLoanId = "";
		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} 
		logger.info("In loanBehindDetailForEmiCalc dealid " + dealId);
		
		if (dealId != null && !CommonFunction.checkNull(dealId).equalsIgnoreCase("")) {
			String dealQuery = "select DEAL_LOAN_ID from cr_deal_loan_dtl_emi_calc where DEAL_ID='"+CommonFunction.checkNull(dealId)+"'";
			logger.info("In loanBehindDetailForEmiCalcu Query::::::::::::::::::" + dealQuery);
			dealLoanId = ConnectionDAO.singleReturn(dealQuery);
			logger.info("In loanBehindDetailForEmiCalcu(execute) dealLoanId:::::::::::::::"+ dealLoanId);
			
			String schemeQuery = "select DEAL_SCHEME from cr_deal_loan_dtl_emi_calc where DEAL_LOAN_ID='"+CommonFunction.checkNull(dealLoanId)+"'";
			logger.info("In loanBehindDetailForEmiCalcu Query::::::::::::::::::" + schemeQuery);
			String schemeId = ConnectionDAO.singleReturn(schemeQuery);
			logger.info("In loanBehindDetailForEmiCalcu schemeId:::::::::::::::"+ schemeId);
			
			ArrayList getLoanTypeList = creditProcessing.getLoanTypeList();
			ArrayList baseRateList = creditProcessing.getBaseRateList(bDate);
			ArrayList sector = creditProcessing.getSectorList();
			ArrayList cycle = creditProcessing.getCycleDueDay(schemeId,"DC");
			ArrayList productTypeList = creditProcessing.getProductTypeList();
			ArrayList loanList = creditProcessing.getLoanDetailList(dealId);
			if (!CommonFunction.checkNull(dealLoanId).equalsIgnoreCase("")) {
				ArrayList allDetail = creditProcessing.getAllLoanDetailsForEmiCalc(dealLoanId);
				request.setAttribute("allDetail", allDetail);
			}
			session.setAttribute("loanList", loanList);
			request.setAttribute("interestFrom", creditProcessing.getinterstCalcFrom());
			request.setAttribute("sector", sector);
			request.setAttribute("cycle", cycle);
			request.setAttribute("baseRateList", baseRateList);
			request.setAttribute("productTypeList", productTypeList);			
			request.setAttribute("getLoanType", getLoanTypeList);

			//START BY SACHIN
			ArrayList installmentTypeList=creditProcessing.getInstallmentTypeList();
			request.setAttribute("installmentTypeList", installmentTypeList);
			//END BY SACHIN
			
			return mapping.findForward("backEmiCaluSuccess");
		} else {
			request.setAttribute("back", "B");
			return mapping.findForward("backEmiCaluBack");
		}
				
	}
	//End by Anil
}