/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;
import java.util.ResourceBundle;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.dao.TradeCheckDAO;
import com.cp.vo.TradeCheckInitVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/**
 * MyEclipse Struts Creation date: 03-03-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class TradeCheckCapAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(TradeCheckCapAction.class.getName());
	CreditProcessingDAO creditProcessing=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	//CreditProcessingDAO creditProcessing = new CreditProcessingDAOImpl();

/* For completion tab*/
	public ActionForward buyerSupplierNew(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception
			{
				logger.info(" in new Trade Check Cap()");
				HttpSession session = request.getSession();
				boolean flag=false;
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				if(userobj==null){
					logger.info("here in buyerSupplierNew method of TradeCheckCapAction action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				
				return mapping.findForward("buyerSupplierNew");	
			}
	
	/* For completion tab*/	
	public ActionForward marketCheckNew(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception
			{
				logger.info(" in new market check()");
				HttpSession session = request.getSession();
				boolean flag=false;
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				
				if(userobj==null){
					logger.info("here in marketCheckNew method of TradeCheckCapAction action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				
				return mapping.findForward("marketCheckNew");	
			}
	
	/* Action for trade check capturing Search */
	public ActionForward tradeCheckCapSearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception
			{
				HttpSession session = request.getSession();
				boolean flag=false;
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				String branchId="";
				if(userobj!=null)
				{
					branchId=userobj.getBranchId();
				}else{
					logger.info("here in tradeCheckCapSearch method of TradeCheckCapAction action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
		
				TradeCheckInitVo vo = new TradeCheckInitVo();
				DynaValidatorForm TradeCheckCapSearchDynaValidatorForm= (DynaValidatorForm)form;
				org.apache.commons.beanutils.BeanUtils.copyProperties(vo, TradeCheckCapSearchDynaValidatorForm);	

				logger.info(" in TradeCheckCapAction.........tradeCheckCapSearch()");
			
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				ServletContext context = getServlet().getServletContext();
				String strFlag="";
							
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				String stage = CommonFunction.checkNull(request.getParameter("stage"));
				logger.info("stage: " + stage);
			
				vo.setStage(stage);
				vo.setBranchId(branchId);
				//vo.setMakerId(userobj.getUserId());
				
				String userId=vo.getReportingToUserId();
				if(userId.trim().length() == 0)
					if(userobj != null)
					userId=userobj.getUserId();
				vo.setReportingToUserId(userId);
				TradeCheckDAO crDAO=(TradeCheckDAO)DaoImplInstanceFactory.getDaoImplInstance(TradeCheckDAO.IDENTITY);
		        logger.info("Implementation class: "+crDAO.getClass()); 				
				//TradeCheckDAO crDAO = new TradeCheckDAOImpl();
								
				logger.info("current page link .......... "+request.getParameter("d-49520-p"));
				
				int currentPageLink = 0;
				if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
				{
					currentPageLink=1;
				}
				else
				{
					currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
				}
				
				logger.info("current page link ................ "+request.getParameter("d-49520-p"));
				
				vo.setCurrentPageLink(currentPageLink);
				
				ArrayList<TradeCheckInitVo> list = crDAO.searchTradeCheckCapData(vo, request);
				ArrayList<TradeCheckInitVo> searchParams = new ArrayList<TradeCheckInitVo>();
				searchParams.add(vo);
				request.setAttribute("list", list);
				request.setAttribute("tradeCap", "tradeCap");
				request.setAttribute("searchParams",searchParams);
				if(CommonFunction.checkNull(request.getAttribute("flag")).toString().equalsIgnoreCase("yes")){
					request.setAttribute("sms","No");
				}
								
				return mapping.findForward("tradeCapSearch");

				}
			
	/* Action for trade check capturing link */
	public ActionForward tradeCheckCapturing(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception

	{
		logger.info("In TradeCheckCapAction.....(tradeCheckCapturing)");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
		}else{
			logger.info("here in tradeCheckCapturing method of TradeCheckCapAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		TradeCheckInitVo vo = new TradeCheckInitVo();
		DynaValidatorForm TradeCheckCapBuyerSupplierDynaValidatorForm= (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, TradeCheckCapBuyerSupplierDynaValidatorForm);	

	
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		logger.info(" user id is:---"+userId);
		TradeCheckDAO dao=(TradeCheckDAO)DaoImplInstanceFactory.getDaoImplInstance(TradeCheckDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 
		//TradeCheckDAO dao = new TradeCheckDAOImpl();
		String dealId = "";
		
			dealId = CommonFunction.checkNull(request.getParameter("dealId"));
		
		logger.info(" In the tradeCheckCapAction------dealId----"+dealId);

		if(dealId!=null && !dealId.equalsIgnoreCase(""))
		{
			ArrayList tradeHeader = dao.getTradeHeader(dealId);
			ArrayList tradeBuyerSuplierList = dao.getList(dealId,userId);
			ArrayList tradeList=dao.getTradeList(dealId,userId,"P");
			session.setAttribute("dealHeader", tradeHeader);
			session.setAttribute("tradeBuyerSuplierList", tradeBuyerSuplierList);
			session.setAttribute("tradeList", tradeList);
			session.setAttribute("dealId",dealId);
		}
		
		
		request.setAttribute("comList", "comList");
		return mapping.findForward("success");
	}
	
	/*Action for trade check completion search */
	public ActionForward tradeCheckComSearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception
			{
			
				HttpSession session = request.getSession();
				boolean flag=false;
				UserObject userobj=(UserObject)session.getAttribute("userobject");
			    String userId="";
			      String branch="";
					if(userobj!=null)
					{
						userId=userobj.getUserId();
						branch=userobj.getBranchId();
					}else{
						logger.info("here in tradeCheckComSearch method of TradeCheckCapAction action the session is out----------------");
						return mapping.findForward("sessionOut");
					}
				TradeCheckInitVo vo = new TradeCheckInitVo();
				DynaValidatorForm TradeCheckCapDynaValidatorForm= (DynaValidatorForm)form;
				
				logger.info(" in TradeCheckCapAction.........tradeCheckComSearch()...for trade check complition");
			
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
		  

				
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}

				String stage = CommonFunction.checkNull(request.getParameter("stage"));
				logger.info("stage: " + stage);
				vo.setStage(stage);
				vo.setBranchId(branch);
				org.apache.commons.beanutils.BeanUtils.copyProperties(vo, TradeCheckCapDynaValidatorForm);	

//				if(CommonFunction.checkNull(vo.getReportingToUserId()).equalsIgnoreCase(""))
//				{ 
//					vo.setReportingToUserId(userId);
//				   //logger.info("When user id is not selected by the user:::::"+userId);
//				}
				logger.info("user Id:::::"+vo.getReportingToUserId());
//				//String userId=CommonFunction.checkNull(request.getParameter("userId"));
//				//vo.setUserName(userId);
//				if(userId.trim().length()==0)
//				{
//					vo.setUserName(userobj.getUserName());
//				}
				ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");
				String dateFormat = resource.getString("lbl.dateFormat(dd-mm-yyyy)");

				if (vo.getApplicationdate().equalsIgnoreCase(dateFormat)) {
					vo.setApplicationdate("");
				}
				TradeCheckDAO tcDAO=(TradeCheckDAO)DaoImplInstanceFactory.getDaoImplInstance(TradeCheckDAO.IDENTITY);
		        logger.info("Implementation class: "+tcDAO.getClass()); 
				//TradeCheckDAO tcDAO = new TradeCheckDAOImpl();
								
				logger.info("current page link .......... "+request.getParameter("d-49520-p"));
				
				int currentPageLink = 0;
				if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
				{
					currentPageLink=1;
				}
				else
				{
					currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
				}
				
				logger.info("current page link ................ "+request.getParameter("d-49520-p"));
				
				vo.setCurrentPageLink(currentPageLink);
				vo.setUserid(userId);
				ArrayList<TradeCheckInitVo> list = tcDAO.searchTradeCheckComData(vo, request);
				ArrayList<TradeCheckInitVo> searchParams = new ArrayList<TradeCheckInitVo>();
				searchParams.add(vo);
				request.setAttribute("list", list);
				request.setAttribute("searchParams",searchParams);
				 								
				return mapping.findForward("tradeComSearch");

				}
	
	/* Action for trade check completion link*/ 
	public ActionForward tradeCheckCompletion(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception

	{
		logger.info("In TradeCheckCapAction.....(tradeCheckCompletion)");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				
		}else{
			logger.info("here in tradeCheckCompletion method of TradeCheckCapAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		if(CommonFunction.checkNull(request.getParameter("loanStatus")).equalsIgnoreCase("NEW") )
		{
			session.removeAttribute("maxIdInCM");
			session.removeAttribute("loanHeader");
		}
		TradeCheckDAO dao=(TradeCheckDAO)DaoImplInstanceFactory.getDaoImplInstance(TradeCheckDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 
		//TradeCheckDAO dao = new TradeCheckDAOImpl();
		String dealId = "";
		
			dealId = CommonFunction.checkNull(request.getParameter("dealId"));
		
		logger.info(" In the tradeCheckCapAction------dealId----"+dealId);
		
		//ArrayList tradeBuyerSuplierList = dao.getBuyerSuplierInfo(dealId);
		if(dealId!=null && !dealId.equalsIgnoreCase(""))
		{
			ArrayList tradeHeader = dao.getTradeHeader(dealId);
			ArrayList tradeList=dao.getTradeList(dealId,userId,"F");
			session.setAttribute("dealHeader", tradeHeader);
			session.setAttribute("tradeList", tradeList);
			session.setAttribute("dealId",dealId);
		}
		else
		{
			session.removeAttribute("dealId");
			session.removeAttribute("tradeList");
		}
		
		return mapping.findForward("tradeCheckNew");
	}
	
	/* Action for save Buyer Details */
	public ActionForward tradeBuyerDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception
	{
		logger.info(" in trade Buyer Details Action()");
		HttpSession session=request.getSession(false);
		//UserObject userobj=new UserObject();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String userId="";
		String bDate="";
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in tradeBuyerDetails method of TradeCheckCapAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		TradeCheckInitVo vo = new TradeCheckInitVo();
		
		DynaValidatorForm TradeCheckCapBuyerSupplierDynaValidatorForm = (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, TradeCheckCapBuyerSupplierDynaValidatorForm);
		
		String dealId = CommonFunction.checkNull(request.getParameter("dealId"));
		request.setAttribute("dealId", dealId);
		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		TradeCheckDAO tcDAO=(TradeCheckDAO)DaoImplInstanceFactory.getDaoImplInstance(TradeCheckDAO.IDENTITY);
        logger.info("Implementation class: "+tcDAO.getClass()); 
		//TradeCheckDAOImpl tcDAO = new TradeCheckDAOImpl();
		String sms="";
		
		boolean status = tcDAO.insertTradeBuyer(vo);
		logger.info("Inside insertTradeBuyer Action.....displaying status...."+status);
		if(status){
			
			request.setAttribute("sms","S");
			request.setAttribute("comList","comList");
		}
		else{
			
			request.setAttribute("sms","E");
			request.setAttribute("comList","comList");
		}
	    logger.info("status"+status);
		return mapping.findForward("saveBuyerDetail");
	}
	
	/* Action for save Supplier Details */
	public ActionForward tradeSuplierDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception
	{
		logger.info(" in trade Suplier Details Action()");
		HttpSession session=request.getSession(false);
		//UserObject userobj=new UserObject();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String userId="";
		String bDate="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
				
		}else{
			logger.info("here in tradeSuplierDetails method of TradeCheckCapAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		TradeCheckInitVo vo = new TradeCheckInitVo();
		
		DynaValidatorForm TradeCheckCapBuyerSupplierDynaValidatorForm = (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, TradeCheckCapBuyerSupplierDynaValidatorForm);
		
		String dealId = CommonFunction.checkNull(request.getParameter("dealId"));
		request.setAttribute("dealId", dealId);
		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		TradeCheckDAO tcDAO=(TradeCheckDAO)DaoImplInstanceFactory.getDaoImplInstance(TradeCheckDAO.IDENTITY);
        logger.info("Implementation class: "+tcDAO.getClass()); 
		//TradeCheckDAOImpl tcDAO = new TradeCheckDAOImpl();
		String sms="";
		
		boolean status = tcDAO.insertTradeBuyer(vo);
		logger.info("Inside insertTradeSuplier Action.....displaying status...."+status);
		if(status){
			
			request.setAttribute("sms","S");
			request.setAttribute("comList","comList");
		}
		else{
			
			request.setAttribute("sms","E");
			request.setAttribute("comList","comList");
		}
	    logger.info("status"+status);
		return mapping.findForward("saveSuplierDetail");
	}

	/* Action for save Market Details */
	public ActionForward tradeMarketDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception
	{
		logger.info(" in trade Market Details Action()");
		HttpSession session=request.getSession(false);
		//UserObject userobj=new UserObject();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String userId="";
		String bDate="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in tradeMarketDetails method of TradeCheckCapAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		TradeCheckInitVo vo = new TradeCheckInitVo();
		
		DynaValidatorForm TradeCheckCapMarketDynaValidatorForm = (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, TradeCheckCapMarketDynaValidatorForm);
		
		String dealId = CommonFunction.checkNull(request.getParameter("dealId"));
		logger.info("dealIdNO is "+dealId);
		request.setAttribute("dealId", dealId);
		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		TradeCheckDAO tcDAO=(TradeCheckDAO)DaoImplInstanceFactory.getDaoImplInstance(TradeCheckDAO.IDENTITY);
        logger.info("Implementation class: "+tcDAO.getClass()); 
		//TradeCheckDAOImpl tcDAO = new TradeCheckDAOImpl();
		String sms="";
		
		boolean status = tcDAO.insertTradeBuyer(vo);
		logger.info("Inside insertTradeMarket Action.....displaying status...."+status);
		if(status){
			
			request.setAttribute("sms","S");
			request.setAttribute("comList","comList");
		}
		else{
			
			request.setAttribute("sms","E");
			request.setAttribute("comList","comList");
		}
	    logger.info("status"+status);
		return mapping.findForward("saveMarketDetial");
	}
	
	public ActionForward SearchBuyerDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request,HttpServletResponse response)throws Exception {
		
		logger.info("In TradeCheckCapAction Action-------SearchBuyerDetails()");
		
		HttpSession session=request.getSession(false);
		//UserObject userobj=new UserObject();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
				
		}else{
			logger.info("here in SearchBuyerDetails method of TradeCheckCapAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		TradeCheckDAO tcDao=(TradeCheckDAO)DaoImplInstanceFactory.getDaoImplInstance(TradeCheckDAO.IDENTITY);
        logger.info("Implementation class: "+tcDao.getClass()); 
		//TradeCheckDAO tcDao= new TradeCheckDAOImpl() ;
		DynaValidatorForm TradeCheckCapBuyerSupplierDynaValidatorForm=(DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(tcDao, TradeCheckCapBuyerSupplierDynaValidatorForm);
		
		String dealId = CommonFunction.checkNull(request.getParameter("dealNo"));
		String verId = CommonFunction.checkNull(request.getParameter("verId"));
		String entityId= CommonFunction.checkNull(request.getParameter("entityID"));
		logger.info("dealId......"+dealId);
		logger.info("verId......"+verId);
		
		TradeCheckInitVo vo = new TradeCheckInitVo();

		ArrayList buyerList = tcDao.searchBuyerSupplierDetials(vo,dealId,verId,entityId);
		logger.info("in SearchBuyerDetails action-----"+buyerList);
		
		
		request.setAttribute("list", buyerList);
		return mapping.findForward("searchBuyer");
	}
	
	public ActionForward SearchSuplierDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request,HttpServletResponse response)throws Exception {
		
		logger.info("In TradeCheckCapAction Action-------SearchSuplierDetails()");
		
		HttpSession session=request.getSession(false);
		//UserObject userobj=new UserObject();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate="";
		 
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
				
		}else{
			logger.info("here in SearchSuplierDetails method of TradeCheckCapAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		TradeCheckDAO tcDao=(TradeCheckDAO)DaoImplInstanceFactory.getDaoImplInstance(TradeCheckDAO.IDENTITY);
        logger.info("Implementation class: "+tcDao.getClass()); 
		//TradeCheckDAO tcDao= new TradeCheckDAOImpl() ;
		DynaValidatorForm TradeCheckCapBuyerSupplierDynaValidatorForm=(DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(tcDao, TradeCheckCapBuyerSupplierDynaValidatorForm);
		
		String dealId = CommonFunction.checkNull(request.getParameter("dealNo"));
		String verId = CommonFunction.checkNull(request.getParameter("verId"));
		String entityId= CommonFunction.checkNull(request.getParameter("entityID"));
		logger.info("dealId......"+dealId);
		logger.info("verId......"+verId);
		
		TradeCheckInitVo vo = new TradeCheckInitVo();

		ArrayList buyerList = tcDao.searchBuyerSupplierDetials(vo,dealId,verId,entityId);
		logger.info("in SearchSuplierDetails action-----"+buyerList);
		
		
		request.setAttribute("list", buyerList);
		 
		return mapping.findForward("searchSupplier");
	}
	
	public ActionForward SearchMarketDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request,HttpServletResponse response)throws Exception {
		
		logger.info("In TradeCheckCapAction Action-------SearchMarketDetails()");
		
		HttpSession session=request.getSession(false);
		//UserObject userobj=new UserObject();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate="";
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
				
		}else{
			logger.info("here in SearchMarketDetails method of TradeCheckCapAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		TradeCheckDAO tcDao=(TradeCheckDAO)DaoImplInstanceFactory.getDaoImplInstance(TradeCheckDAO.IDENTITY);
        logger.info("Implementation class: "+tcDao.getClass()); 
		//TradeCheckDAO tcDao= new TradeCheckDAOImpl() ;
		DynaValidatorForm TradeCheckCapMarketDynaValidatorForm=(DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(tcDao, TradeCheckCapMarketDynaValidatorForm);
		
		String dealId = CommonFunction.checkNull(request.getParameter("dealNo"));
		String verId = CommonFunction.checkNull(request.getParameter("verId"));
		String entityId= CommonFunction.checkNull(request.getParameter("entityID"));
		logger.info("dealId......"+dealId);
		logger.info("verId......"+verId);
		
		TradeCheckInitVo vo = new TradeCheckInitVo();

		ArrayList buyerList = tcDao.searchBuyerSupplierDetials(vo,dealId,verId,entityId);
		logger.info("in SearchBuyerDetails action-----"+buyerList);
		
		
		request.setAttribute("list", buyerList);
		 
		return mapping.findForward("searchMarket");
	}

	public ActionForward modifyTradeBuyerDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception
	{
		logger.info(" in TradeCheckCapAction.....modifyTradeSuplierDetails()");
		HttpSession session=request.getSession(false);
		//UserObject userobj=new UserObject();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in modifyTradeBuyerDetails method of TradeCheckCapAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		TradeCheckInitVo vo = new TradeCheckInitVo();
		
		DynaValidatorForm TradeCheckCapBuyerSupplierDynaValidatorForm = (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, TradeCheckCapBuyerSupplierDynaValidatorForm);
		
		String tradeCheckId = CommonFunction.checkNull(request.getParameter("tradeCheckId"));
		logger.info("tradeCheckId is "+tradeCheckId);
		vo.setMakerId(userId);
		vo.setMakerDate(userobj.getBusinessdate());
		TradeCheckDAO tcDAO=(TradeCheckDAO)DaoImplInstanceFactory.getDaoImplInstance(TradeCheckDAO.IDENTITY);
        logger.info("Implementation class: "+tcDAO.getClass()); 
		//TradeCheckDAOImpl tcDAO = new TradeCheckDAOImpl();
		String sms="";
		
		boolean status = tcDAO.modifyTradeBuyer(vo,tradeCheckId);
		logger.info("Inside updateTradeBuyer Action.....displaying status...."+status);
		if(status){
			
			request.setAttribute("sms","M");
		}
		else{
			
			request.setAttribute("sms","E");
		}
	    logger.info("status"+status);
		return mapping.findForward("modifyBuyer");
	}
	
	public ActionForward modifyTradeSuplierDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception
	{
		logger.info(" in TradeCheckCapAction.....modifyTradeSuplierDetails()");
		HttpSession session=request.getSession(false);
		//UserObject userobj=new UserObject();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in modifyTradeSuplierDetails method of TradeCheckCapAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		TradeCheckInitVo vo = new TradeCheckInitVo();
		
		DynaValidatorForm TradeCheckCapBuyerSupplierDynaValidatorForm = (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, TradeCheckCapBuyerSupplierDynaValidatorForm);
		
		String tradeCheckId = CommonFunction.checkNull(request.getParameter("tradeCheckId"));
		logger.info("tradeCheckId is "+tradeCheckId);
		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		TradeCheckDAO tcDAO=(TradeCheckDAO)DaoImplInstanceFactory.getDaoImplInstance(TradeCheckDAO.IDENTITY);
        logger.info("Implementation class: "+tcDAO.getClass()); 
		//TradeCheckDAOImpl tcDAO = new TradeCheckDAOImpl();
		String sms="";
		
		boolean status = tcDAO.modifyTradeBuyer(vo,tradeCheckId);
		logger.info("Inside updateTradeBuyer Action.....displaying status...."+status);
		if(status){
			
			request.setAttribute("sms","M");
		}
		else{
			
			request.setAttribute("sms","E");
		}
	    logger.info("status"+status);
		return mapping.findForward("modifySuplier");
	}

	public ActionForward modifyTradeMarketDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception
	{
		logger.info(" in TradeCheckCapAction.....modifyTradeMarketDetails()");
		HttpSession session=request.getSession(false);
		//UserObject userobj=new UserObject();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate="";
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in modifyTradeMarketDetails method of TradeCheckCapAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		TradeCheckInitVo vo = new TradeCheckInitVo();
		
		DynaValidatorForm TradeCheckCapBuyerSupplierDynaValidatorForm = (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, TradeCheckCapBuyerSupplierDynaValidatorForm);
		
		String tradeCheckId = CommonFunction.checkNull(request.getParameter("tradeCheckId"));
		logger.info("tradeCheckId is "+tradeCheckId);
		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		TradeCheckDAO tcDAO=(TradeCheckDAO)DaoImplInstanceFactory.getDaoImplInstance(TradeCheckDAO.IDENTITY);
        logger.info("Implementation class: "+tcDAO.getClass()); 
		//TradeCheckDAOImpl tcDAO = new TradeCheckDAOImpl();
		String sms="";
		
		boolean status = tcDAO.modifyTradeBuyer(vo,tradeCheckId);
		logger.info("Inside updateTradeBuyer Action.....displaying status...."+status);
		if(status){
			
			request.setAttribute("sms","M");
		}
		else{
			
			request.setAttribute("sms","E");
		}
	    logger.info("status"+status);
	   	return mapping.findForward("modifyMarket");
	}

	/* Buyer Details for Completion */
	public ActionForward ViwBuyerDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request,HttpServletResponse response)throws Exception {
		
		logger.info("In TradeCheckCapAction Action-------SearchBuyerDetails()");
		
		HttpSession session=request.getSession(false);
		//UserObject userobj=new UserObject();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
				
		}else{
			logger.info("here in ViwBuyerDetails method of TradeCheckCapAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		TradeCheckDAO tcDao=(TradeCheckDAO)DaoImplInstanceFactory.getDaoImplInstance(TradeCheckDAO.IDENTITY);
        logger.info("Implementation class: "+tcDao.getClass()); 
		//TradeCheckDAO tcDao= new TradeCheckDAOImpl() ;
		DynaValidatorForm TradeCheckCapBuyerSupplierDynaValidatorForm=(DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(tcDao, TradeCheckCapBuyerSupplierDynaValidatorForm);
		
		String dealId = CommonFunction.checkNull(request.getParameter("dealNo"));
		String verId = CommonFunction.checkNull(request.getParameter("verId"));
		String entityId= CommonFunction.checkNull(request.getParameter("entityID"));
		logger.info("dealId......"+dealId);
		logger.info("verId......"+verId);
		
		TradeCheckInitVo vo = new TradeCheckInitVo();

		ArrayList buyerList = tcDao.searchBuyerSupplierDetials(vo,dealId,verId,entityId);
		logger.info("in SearchBuyerDetails action-----"+buyerList);
		
		
		request.setAttribute("list", buyerList);
		return mapping.findForward("viewBuyer");
	}
	
	/* Supplier Details for Completion */
	public ActionForward ViewSuplierDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request,HttpServletResponse response)throws Exception {
		
		logger.info("In TradeCheckCapAction Action-------SearchSuplierDetails()");
		
		HttpSession session=request.getSession(false);
		//UserObject userobj=new UserObject();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String userId="";
		String bDate="";
		 
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in ViewSuplierDetails method of TradeCheckCapAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		TradeCheckDAO tcDao=(TradeCheckDAO)DaoImplInstanceFactory.getDaoImplInstance(TradeCheckDAO.IDENTITY);
        logger.info("Implementation class: "+tcDao.getClass()); 
		//TradeCheckDAO tcDao= new TradeCheckDAOImpl() ;
		DynaValidatorForm TradeCheckCapBuyerSupplierDynaValidatorForm=(DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(tcDao, TradeCheckCapBuyerSupplierDynaValidatorForm);
		
		String dealId = CommonFunction.checkNull(request.getParameter("dealNo"));
		String verId = CommonFunction.checkNull(request.getParameter("verId"));
		String entityId= CommonFunction.checkNull(request.getParameter("entityID"));
		logger.info("dealId......"+dealId);
		logger.info("verId......"+verId);
		
		TradeCheckInitVo vo = new TradeCheckInitVo();

		ArrayList buyerList = tcDao.searchBuyerSupplierDetials(vo,dealId,verId,entityId);
		logger.info("in SearchSuplierDetails action-----"+buyerList);
		
		
		request.setAttribute("list", buyerList);
		return mapping.findForward("viewSupplier");
	}
	
	/* Market Details for Completion*/
	public ActionForward ViewMarketDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request,HttpServletResponse response)throws Exception {
		
		logger.info("In TradeCheckCapAction Action-------SearchMarketDetails()");
		
		HttpSession session=request.getSession(false);
		//UserObject userobj=new UserObject();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate="";
		 
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();	
		}else{
			logger.info("here in ViewMarketDetails method of TradeCheckCapAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		
		boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		TradeCheckDAO tcDao=(TradeCheckDAO)DaoImplInstanceFactory.getDaoImplInstance(TradeCheckDAO.IDENTITY);
        logger.info("Implementation class: "+tcDao.getClass()); 
		//TradeCheckDAO tcDao= new TradeCheckDAOImpl() ;
		DynaValidatorForm TradeCheckCapMarketDynaValidatorForm=(DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(tcDao, TradeCheckCapMarketDynaValidatorForm);
		
		String dealId = CommonFunction.checkNull(request.getParameter("dealNo"));
		String verId = CommonFunction.checkNull(request.getParameter("verId"));
		String entityId= CommonFunction.checkNull(request.getParameter("entityID"));
		logger.info("dealId......"+dealId);
		logger.info("verId......"+verId);
		
		TradeCheckInitVo vo = new TradeCheckInitVo();

		ArrayList buyerList = tcDao.searchBuyerSupplierDetials(vo,dealId,verId,entityId);
		
		logger.info("in SearchBuyerDetails action-----"+buyerList);
		
		
		request.setAttribute("list", buyerList);
		request.setAttribute("marketList","marketList");
		return mapping.findForward("viewMarket");
	}

	
	public ActionForward updateStatus(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception
	{
		logger.info(" in TradeCheckCapAction.....updateStatus()");
		HttpSession session=request.getSession(false);
		//UserObject userobj=new UserObject();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate="";
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in updateStatus method of TradeCheckCapAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		TradeCheckInitVo vo = new TradeCheckInitVo();
		
		
		
		DynaValidatorForm TradeCheckCapBuyerSupplierDynaValidatorForm = (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, TradeCheckCapBuyerSupplierDynaValidatorForm);
		
		String dealId = CommonFunction.checkNull(request.getParameter("dealId"));

		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		TradeCheckDAO tcDAO=(TradeCheckDAO)DaoImplInstanceFactory.getDaoImplInstance(TradeCheckDAO.IDENTITY);
        logger.info("Implementation class: "+tcDAO.getClass()); 
		//TradeCheckDAOImpl tcDAO = new TradeCheckDAOImpl();
		ArrayList<TradeCheckInitVo> list = tcDAO.searchVerId(vo,userId, dealId);
		
		String verId="";
		for(int i=0;i < list.size();i++){
			
			TradeCheckInitVo vo3 = list.get(i);
			verId=verId+","+(vo3.getVerCheckId());
		}
		verId=verId.substring(1);
		logger.info("varIdList:----------------  "+verId);

		logger.info("dealId is "+dealId);
		vo.setMakerId(userId);
		vo.setMakerDate(bDate);

		
		String check ="";
        
		 check=ConnectionDAO.singleReturn("select count(1) from cr_deal_verification_dtl a "+
        " left join com_agency_m ag on a.external_appraiser=ag.AGENCY_CODE "+
        " left join com_agency_user_mapping agm on ag.AGENCY_CODE=agm.AGENCY_CODE "+ 
        " left join cr_deal_buyer_supplier_dtl b on a.DEAL_ID=b.DEAL_ID "+
        " and a.VERIFICATION_SUBTYPE=b.DEAL_BUYER_SUPPLIER_TYPE where a.VERIFICATION_TYPE='T' and VERIFICATION_ACTION='I' and a.REC_STATUS='F'"+  
        " and ((DEAL_BUYER_SUPPLIER_ID not in (select  c.ENTITY_ID from cr_trade_check_dtl c where c.ENTITY_ID = DEAL_BUYER_SUPPLIER_ID ) ) OR (a.VERIFICATION_SUBTYPE = 'M'))"+
        " and a.VERIFICATION_SUBTYPE not in(Select c.TRADE_CHECK_TYPE from cr_trade_check_dtl c where c.TRADE_CHECK_TYPE='M' and c.DEAL_ID='"+dealId+"' )"+
        " and a.DEAL_ID='"+dealId+"' and (a.internal_appraiser = '"+userId+"' or agm.USER_ID = '"+userId+"') ");
        
      int tradecheck=Integer.parseInt(check);
      logger.info("tradecheck"+tradecheck);   

        
        if (tradecheck==0)
        {
        	logger.info("in if part");
        	boolean status = tcDAO.modifyTradecheck(vo,dealId,verId);
		    if(status){
		    	
		    	request.setAttribute("sms", "F");
		    }
        }
        else
        {
        	logger.info("in else part");
        	request.setAttribute("sms", "N");
        	request.setAttribute("comList","comList");
        }
		
        return mapping.findForward("forwardStatus");
	}

	
	public ActionForward updateTradeRemark(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception
	{
		logger.info(" in TradeCheckCapAction.....updateStatus()");
		HttpSession session=request.getSession(false);
				
		String bDate="";
		String companyId="";
		String userId="";
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj!=null)
		{
			bDate=userobj.getBusinessdate();
			companyId=""+userobj.getCompanyId();
			userId=userobj.getUserId();
		}else{
			logger.info("here in updateTradeRemark method of TradeCheckCapAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
	
		boolean flag=false;
	
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		TradeCheckInitVo vo = new TradeCheckInitVo();
		
		DynaValidatorForm TradeCheckCapBuyerSupplierDynaValidatorForm = (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, TradeCheckCapBuyerSupplierDynaValidatorForm);
		
		String dealId = CommonFunction.checkNull(request.getParameter("dealId"));
		logger.info("dealId is "+dealId);
		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		TradeCheckDAO tcDAO=(TradeCheckDAO)DaoImplInstanceFactory.getDaoImplInstance(TradeCheckDAO.IDENTITY);
        logger.info("Implementation class: "+tcDAO.getClass()); 
		//TradeCheckDAO tcDAO = new TradeCheckDAOImpl();
				
		 boolean status=false;
		 String checkStageM=CommonFunction.stageMovement(companyId, "DC","F",dealId, "TCC", bDate,userId);
		  logger.info("checkStageM : "+checkStageM);
		  if(checkStageM.equalsIgnoreCase("S"))
			  status = tcDAO.modifyTradeRemark(vo,dealId);
		  else
			  request.setAttribute("checkStageM", checkStageM);
        	
		    if(status && !CommonFunction.checkNull(vo.getDecison()).equalsIgnoreCase("S")){
		    	
		    	request.setAttribute("sms", "S");
		    }
		    else   if(status && CommonFunction.checkNull(vo.getDecison()).equalsIgnoreCase("S")){
		    	
		    	request.setAttribute("sms", "SB");
		    }
       
        else
        {
        	request.setAttribute("sms", "N");
        }
		
        return mapping.findForward("saveTradeRemarks");
	}
}