/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Logger;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;

import com.cp.dao.FieldVerificationDAO;

import com.cp.dao.IndividualFinancialAnalysisDAO;

import com.cp.financialDao.FinancialDAO;
import com.cp.vo.FinancialAnalysisVo;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 10-15-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class IndividualFinancialAnalysisBehindAction extends DispatchAction {
	DecimalFormat myFormatter = new DecimalFormat("###,###.####");
	private static final Logger logger = Logger.getLogger(IndividualFinancialAnalysisBehindAction.class.getName());
	public ActionForward incomeBehindDetail(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		logger.info("in incomeBehindDetail................ ");
		
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in incomeBehindDetail method of IndividualFinancialAnalysisBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		IndividualFinancialAnalysisDAO dao=(IndividualFinancialAnalysisDAO)DaoImplInstanceFactory.getDaoImplInstance(IndividualFinancialAnalysisDAO.IDENTITY);
	    logger.info("Implementation class: "+dao.getClass()); 	// changed by asesh
		//IndividualFinancialAnalysisDAO dao = new IndividualFinancialAnalysisDAOImpl();
		 String dealId="";
		    if(session.getAttribute("financialDealId")!=null)
			 {
				 dealId = session.getAttribute("financialDealId").toString();
			 }
		    logger.info("in incomeBehindDetail...............dealId. "+dealId);
		    
		    String status = CommonFunction.checkNull(request.getParameter("status"));
		    CreditProcessingDAO creditProcessing=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	        logger.info("Implementation class: "+creditProcessing.getClass()); 			// changed by asesh
		    //CreditProcessingDAO creditProcessing = new CreditProcessingDAOImpl();
		    if ((dealId != null && !dealId.equals(""))
					&& (status == null || status.equals(""))) {

				ArrayList<Object> leadInfo = creditProcessing.getLeadEntryList(dealId);

				ArrayList dealHeader = creditProcessing.getDealHeader(dealId);
				session.setAttribute("dealHeader", dealHeader);

				session.setAttribute("dealId", dealId);
				logger.info("Size of header: " + dealHeader.size());
				logger.info("Size of leadInfo: " + leadInfo.size());
				session.setAttribute("leadInfo", leadInfo);
				session.removeAttribute("viewDeal");
			}

			else if ((dealId != null && !dealId.equals(""))
					&& (status != null && status.equals("UWA"))) {
				logger
						.info(" CreditProcessiongLeadEntryAction in leadEntryCapturing For view and set viewDeal in session");
				ArrayList<Object> leadInfo = creditProcessing
						.getLeadEntryList(dealId);
				session.setAttribute("dealId", dealId);
				session.setAttribute("leadInfo", leadInfo);
				session.setAttribute("viewDeal", "UWA");

			} else {
				session.removeAttribute("viewDeal");
				session.removeAttribute("leadInfo");
				session.removeAttribute("dealId");
				session.removeAttribute("dealHeader");
				session.removeAttribute("subIndustryList");
				session.removeAttribute("relationalManagerList");
			}
		    
			int functionId=0;
			if(session.getAttribute("functionId")!=null)
			{
				functionId= Integer.parseInt(session.getAttribute("functionId").toString());
			}
				session.removeAttribute("viewDeal");
			if (functionId==3000951 || functionId==4001231){
				session.setAttribute("viewDeal", "UWA");	
			}
		    
		    //ArrayList paramList = dao.getParamDetailDetails("I");
		    ArrayList customerTypeList = dao.getCustomerTypeList(dealId);
		    ArrayList sourceTypeList = dao.getIncomeSourceTypeList();
		    ArrayList customerNameList = dao.getCustomerName(dealId, "PRAPPL");
		    
		    request.setAttribute("customerNameList", customerNameList);
		    request.setAttribute("customerTypeList", customerTypeList);
		    request.setAttribute("sourceTypeList", sourceTypeList);
		    FinancialAnalysisVo vo=new FinancialAnalysisVo();
		    vo.setLbxDealNo(dealId);
		    ArrayList incomeDetailList=dao.getIncomeDetailList(vo);
		    request.setAttribute("incomeDetailList",incomeDetailList);

			FieldVerificationDAO fieldVerificationdao=(FieldVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(FieldVerificationDAO.IDENTITY);
	        logger.info("Implementation class: "+fieldVerificationdao.getClass()); 	// changed by asesh
		    //FieldVerificationDAO fieldVerificationdao=new FieldVerificationDAOImpl();	
		    ArrayList verifMethodList = fieldVerificationdao.getVerifMethodListList();
		    request.setAttribute("verifMethodList", verifMethodList);
		    session.setAttribute("dealIdForFFAAndFA",dealId);   //Added by Sarvesh
		/* if(paramList.size()>0)
		 {
		    request.setAttribute("paramList", paramList);
		    logger.info("paramList size ............................ "+paramList.size());
		 }
		 */
		return mapping.findForward("income");
	}
	
	public ActionForward obligationBehindDetail(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		HttpSession session =  request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in obligationBehindDetail method of IndividualFinancialAnalysisBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		String dealId="";
	    if(session.getAttribute("financialDealId")!=null)
		 {
			 dealId = session.getAttribute("financialDealId").toString();
		 }
	    IndividualFinancialAnalysisDAO dao=(IndividualFinancialAnalysisDAO)DaoImplInstanceFactory.getDaoImplInstance(IndividualFinancialAnalysisDAO.IDENTITY);
	    logger.info("Implementation class: "+dao.getClass()); 	// changed by asesh
		 String recStatus="P";
		 String underwriter=CommonFunction.checkNull(session.getAttribute("underWriterViewData"));
		  logger.info("In obligationBehindDetail session attribute..underWriterViewData........"+underwriter); 
		
		  if(underwriter!=null && !underwriter.equalsIgnoreCase("")){
		    	recStatus="A";
		  }
		ArrayList obligationList = dao.getObligationDetails("",dealId,recStatus);
		 if(obligationList.size()>0)
		 {
			 request.setAttribute("obligationList", obligationList);
		 }
		 
		logger.info("In obligationList size................ "+obligationList.size());
		ArrayList customerTypeList = dao.getCustomerTypeList(dealId);
	    ArrayList obligationTypeList = dao.getObligationTypeList();
	    ArrayList customerNameList = dao.getCustomerName(dealId, "PRAPPL");
	    ArrayList typeOfLoanList = dao.getTypeOfLoan();
	    request.setAttribute("typeOfLoanList", typeOfLoanList);
	    request.setAttribute("customerNameList", customerNameList);
	    request.setAttribute("customerTypeList", customerTypeList);
	    request.setAttribute("obligationTypeList", obligationTypeList);
	    FieldVerificationDAO fieldVerificationdao=(FieldVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(FieldVerificationDAO.IDENTITY);
        logger.info("Implementation class: "+fieldVerificationdao.getClass()); 	// changed by asesh
		    ArrayList verifMethodList = fieldVerificationdao.getVerifMethodListList();
		    session.setAttribute("dealIdForFFAAndFA",dealId);   //Added by Sarvesh
		    request.setAttribute("verifMethodList", verifMethodList);
		//if(session.getAttribute("fundFlowDealId")!=null)
		//{
			return mapping.findForward("obligation");
		//}
	}
	
	public ActionForward individualRatioAnalysisBehindDetail(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {
		HttpSession session =  request.getSession();
		logger.info("in individualRatioAnalysisBehindDetail .....................");
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String businessDate="";
		String userId="";
		 
		if(userobj!=null)
		{
			businessDate=userobj.getBusinessdate();
			userId=userobj.getUserId();
		}else{
			logger.info("here in individualRatioAnalysisBehindDetail method of IndividualFinancialAnalysisBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		String dealId="";
		boolean flag =false;
	    if(session.getAttribute("financialDealId")!=null)
		 {
			 dealId = session.getAttribute("financialDealId").toString();
		 }
	    FinancialDAO dao=(FinancialDAO)DaoImplInstanceFactory.getDaoImplInstance(FinancialDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass());
		ArrayList paramList = dao.getRatioParamDetails("R");
		
		 ArrayList ratioAnalysisList = new ArrayList();
		 FinancialAnalysisVo vo = new FinancialAnalysisVo();
		 vo.setLbxDealNo(dealId);
	/* if(paramList.size()>0)
	 {
		 ArrayList incomeDetailsByDeal = (ArrayList)session.getAttribute("incomeDetailsByDeal");
		
		 ScriptEngineManager mgr = new ScriptEngineManager();
		 ScriptEngine engine = mgr.getEngineByName("JavaScript");
		 for(int i=0 ; i< paramList.size() ; i++)
		 {
			 	    flag =false;
					FinancialAnalysisVo  vo = (FinancialAnalysisVo)paramList.get(i);
					String ratioExprForMonth="";
					String ratioExprForYear="";
					
					ratioExprForMonth =vo.getRatioExpr();
					ratioExprForYear =vo.getRatioExpr();
					
					FinancialAnalysisVo ratioVo = new FinancialAnalysisVo();
					
						if(incomeDetailsByDeal!=null)
						{
								for(int k=0;k<incomeDetailsByDeal.size();k++)
								{
								FinancialAnalysisVo vo1 = new FinancialAnalysisVo();
								vo1 = (FinancialAnalysisVo) incomeDetailsByDeal.get(k);
								
								String paramCodeInExpr = vo1.getParameCode();
								
//								logger.info("ratio code 111111111........... "+vo.getParameCode());
//								logger.info("ratioExprForMonth 111111111.............. "+ratioExprForMonth);
//								logger.info("param code .......................... "+paramCodeInExpr);
//								logger.info("index position in balanceSheetList is ******************************* "+ratioExprFstYear.indexOf(paramCodeInExpr));
//								
								if(ratioExprForMonth.indexOf(paramCodeInExpr) >= 0)
								{
									ratioVo.setRatioParamCode(vo.getParameCode());
									ratioVo.setRatioName(vo.getRatioName());
									
									
//									ratioExprForMonth =ratioExprForMonth.replaceFirst(paramCodeInExpr, myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo1.getMonthValue()).trim())).toString());
//									ratioExprForYear = ratioExprForYear.replaceFirst(paramCodeInExpr, myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo1.getYearValue()).trim())).toString());
									
									ratioExprForMonth =ratioExprForMonth.replaceAll(paramCodeInExpr, myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo1.getMonthValue()).trim())).toString());
									ratioExprForYear = ratioExprForYear.replaceAll(paramCodeInExpr, myFormatter.parse(StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo1.getYearValue()).trim())).toString());
									flag=true;
								}	
									
								}		
						}
					
//					logger.info("ratioExprForMonth 111111111.............. "+ratioExprForMonth);
//					logger.info("ratioExprForYear 111111111.............. "+ratioExprForYear);
					BigDecimal d1 = new BigDecimal("0.00");
					if(flag)
					{
							try{
								if(!CommonFunction.checkNull(engine.eval(ratioExprForMonth)+"").equalsIgnoreCase(""))
					    		{
								d1= new BigDecimal(engine.eval(ratioExprForMonth)+"");//) engine.eval(ratioExprFstYear);
								logger.info("eval ratioExprForMonth ******************************** "+d1);
								Number reconNum =myFormatter.parse(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(engine.eval(ratioExprForMonth)+"")).trim());  
				    			ratioVo.setMonthValue(myFormatter.format(reconNum));
					    		}
							}
							catch (Exception e) {
								ratioVo.setMonthValue("00");
								e.printStackTrace();
							}
							
							try{
								if(!CommonFunction.checkNull(engine.eval(ratioExprForYear)+"").equalsIgnoreCase(""))
					    		{
								 d1=new BigDecimal(engine.eval(ratioExprForYear)+"");// (BigDecimal) engine.eval(ratioExprSecYear);
								logger.info("eval ratioExprForYear ******************************** "+d1);
								Number reconNum =myFormatter.parse(StringEscapeUtils.escapeHtml(CommonFunction.checkNull(engine.eval(ratioExprForYear)+"")).trim());  
				    			ratioVo.setYearValue(myFormatter.format(reconNum));
					    		}
							}
							catch (Exception e) {
								ratioVo.setYearValue("00");
								e.printStackTrace();
							}
			    			
						ratioAnalysisList.add(ratioVo);
					}
					else
					{
						logger.info("flag ........................ "+flag);
						ratioVo.setRatioParamCode(vo.getParameCode());
						ratioVo.setRatioName(vo.getRatioName());
						ratioVo.setMonthValue("00");
						ratioVo.setYearValue("00");
						ratioAnalysisList.add(ratioVo);
					}

		 }
		//start by sachin
		 boolean status = dao.insertIndRatioData(ratioAnalysisList,dealId,userId,businessDate);
		//end by sachin
		 logger.info("size of list .............................. "+ratioAnalysisList.size());
	   request.setAttribute("ratioAnalysisList", ratioAnalysisList);
	 }*/
	String underwriter=CommonFunction.checkNull(session.getAttribute("underWriterViewData"));
	logger.info("In obligationBehindDetail session attribute..underWriterViewData........"+underwriter); 
		
	if(underwriter!=null && !underwriter.equalsIgnoreCase("")){
	logger.info("UnderWriter");	    	
	}else{
	 boolean status = dao.insertIndRatioData(ratioAnalysisList,dealId,userId,businessDate);
	}

	 ArrayList<FinancialAnalysisVo> list=new ArrayList<FinancialAnalysisVo>();
	 list=dao.getIndRAtioDataList(vo);
	 request.setAttribute("ratioAnalysisList", list);
	 session.setAttribute("dealIdForFFAAndFA",dealId);   //Added by Sarvesh
		//if(session.getAttribute("financialDealId")!=null)
		//{
			return mapping.findForward("ratio");
		//}
	}
	
}