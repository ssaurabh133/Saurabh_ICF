/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.SpecialConditionVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 10-01-2012
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class SpecialConditionDispatchAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	private static final Logger logger = Logger.getLogger(SpecialConditionDispatchAction.class.getName());
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward openSpecialCondition(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		
		logger.info("In (openSpecialCondition)");
		HttpSession session = request.getSession();
		//boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		//String userId="";
		//String bDate="";
		
		if(userobj!=null)
		{
			//	userId=userobj.getUserId();
			//	bDate=userobj.getBusinessdate();
				
		}else{
			logger.info("here in openSpecialCondition method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag=null;	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String functionId=(String)session.getAttribute("functionId");
		int id=Integer.parseInt(functionId);
		if(id==4000106 || id==4000122)
		{
			session.removeAttribute("underWriterViewData");
			session.removeAttribute("leadNo");
			session.removeAttribute("dealHeader");
			session.removeAttribute("dealId");
			session.removeAttribute("leadInfo");
			session.removeAttribute("viewDeal");
			session.removeAttribute("dealCatList");
			session.removeAttribute("sourceTypeList");
			session.removeAttribute("checkLoginUserLevel");
			session.removeAttribute("creditApprovalList");
			session.removeAttribute("leadMValue");
			session.removeAttribute("bsflag");
	
		}
		String dealId = null;
		if(request.getParameter("dealId")!=null)
		{
			dealId=CommonFunction.checkNull(request.getParameter("dealId"));
		}
		else
		{
			dealId =  CommonFunction.checkNull(session.getAttribute("dealId"));
		}
		session.setAttribute("dealId", dealId);
		//logger.info("deal id "+dealId);
		CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 	//changed by asesh
		//CreditProcessingDAO dao = new CreditProcessingDAOImpl();
		ArrayList specialConditionList = dao.getSpecialConditionList(dealId);
		request.setAttribute("specialConditionList", specialConditionList);
	//	form.reset(mapping, request);
		dao=null;
		dealId=null;
		strFlag=null;
		return mapping.findForward("openSpecialCondition");
	}
	
	public ActionForward saveSpecialCondition(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		
		logger.info("In (saveSpecialCondition)");
		HttpSession session = request.getSession();
	//	boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String userId=null;
		String bDate=null;
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
				
		}else{
			logger.info("here in saveSpecialCondition method of action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag=null;	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String dealId = null;
		String status="E";
		if(request.getParameter("dealId")!=null)
		{
			dealId=CommonFunction.checkNull(request.getParameter("dealId"));
		}
		else
		{
			dealId =  CommonFunction.checkNull(session.getAttribute("dealId"));
		}
		session.setAttribute("dealId", dealId);
		logger.info("deal id "+dealId);
		DynaValidatorForm SpecialConditionDynaValidatorForm = (DynaValidatorForm) form;
		SpecialConditionVo vo =new SpecialConditionVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,SpecialConditionDynaValidatorForm);
		String dealLoanIdQuery="Select DEAL_LOAN_ID from cr_deal_loan_dtl where DEAL_ID="+dealId;
		String dealLoanId=ConnectionDAO.singleReturn(dealLoanIdQuery);
		//logger.info("dealLoanIdQuery "+dealLoanIdQuery+" dealLoanId: "+dealLoanId);
		vo.setDealId(dealId);
		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		vo.setDealLoanId(dealLoanId);
		CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 	//changed by asesh
	//	logger.info("vo.getSpecialDealId(): "+vo.getSpecialDealId());
		if(CommonFunction.checkNull(vo.getSpecialDealId()).equalsIgnoreCase(""))
		{
			status=dao.saveSpecialCondition(vo);
		}
		else
		{
			status=dao.updateSpecialCondition(vo);
		}
		
		
		if(CommonFunction.checkNull(status).equalsIgnoreCase("S"))
		{
			request.setAttribute("msg", "S");
		}
		else
		{
			request.setAttribute("msg", "E");
		}
	//	form.reset(mapping, request);
		dealLoanIdQuery=null;
		dealLoanId=null;
		dealId=null;
		status=null;
		return mapping.findForward("saveSpecialCondition");
	}
	
	public ActionForward fetchSpecialCondition(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		
		logger.info("In (fetchSpecialCondition)");
		HttpSession session = request.getSession();
		//boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		//String userId="";
	//	String bDate="";
		
		if(userobj!=null)
		{
				//userId=userobj.getUserId();
				//bDate=userobj.getBusinessdate();
				
		}else{
			logger.info("here in fetchSpecialCondition method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag=null;	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String dealId = null;
		if(request.getParameter("dealId")!=null)
		{
			dealId=CommonFunction.checkNull(request.getParameter("dealId"));
		}
		else
		{
			dealId =  CommonFunction.checkNull(session.getAttribute("dealId"));
		}
		String specialConditionId =request.getParameter("specialConditionId"); 
	//	logger.info("deal id "+dealId+"specialConditionId: "+specialConditionId);
		CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 	//changed by asesh
		ArrayList fecthList = dao.fecthConditionList(specialConditionId);
		request.setAttribute("fecthList", fecthList);
		ArrayList specialConditionList = dao.getSpecialConditionList(dealId);
		request.setAttribute("specialConditionList", specialConditionList);
		//logger.info("specialConditionList size: "+specialConditionList.size());
		return mapping.findForward("fetchSpecialCondition");
	}
	
	public ActionForward deleteSpecialCondition(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		
		logger.info("In (deleteSpecialCondition)");
		HttpSession session = request.getSession();
	//	boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		//String userId=null;
	//	String bDate="";
		
		if(userobj!=null)
		{
			//	userId=userobj.getUserId();
			//	bDate=userobj.getBusinessdate();
				
		}else{
			logger.info("here in deleteSpecialCondition method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag=null;	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String dealId = null;
		if(request.getParameter("dealId")!=null)
		{
			dealId=CommonFunction.checkNull(request.getParameter("dealId"));
		}
		else
		{
			dealId =  CommonFunction.checkNull(session.getAttribute("dealId"));
		}
		String specialId[]=request.getParameterValues("chk");
		logger.info("deal id "+dealId+" specialId: "+specialId.length);
		CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 	//changed by asesh
		boolean status=dao.deleteSpecialCondition(specialId);
	//	logger.info("special Condition status: "+status);
		if(status)
		{
			request.setAttribute("msg", "D");
		}
		else
		{
			request.setAttribute("msg", "N");
		}
		ArrayList specialConditionList = dao.getSpecialConditionList(dealId);
		request.setAttribute("specialConditionList", specialConditionList);
		//form.reset(mapping, request);
		dao=null;
		return mapping.findForward("deleteSpecialCondition");
	}
	
	public ActionForward viewSpecialCondition(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		logger.info("In (viewSpecialCondition)");
		HttpSession session = request.getSession();
	//	boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		//String userId="";
	//	String bDate="";
		
		if(userobj!=null)
		{
			//	userId=userobj.getUserId();
			//	bDate=userobj.getBusinessdate();
				
		}else{
			logger.info("here in viewSpecialCondition method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag=null;	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj 
		String functionId=(String)session.getAttribute("functionId");
		if(CommonFunction.checkNull(functionId).trim().equalsIgnoreCase(""))
			functionId="0";
		int id=Integer.parseInt(functionId);
		if(id==4000122 || id==4000123)
		{
			session.setAttribute("cmAuthor","cmAuthor");
			session.setAttribute("viewLoan","viewLoan");
		}
		//neeraj space end 
		
		String loanId = null;
		if(!CommonFunction.checkNull(request.getParameter("loanId")).equalsIgnoreCase(""))
		{
			loanId=CommonFunction.checkNull(request.getParameter("loanId"));
		}
		else{
			if(session.getAttribute("loanId")!=null)
				loanId=session.getAttribute("loanId").toString();
			else if(session.getAttribute("maxIdInCM")!=null)
				loanId=session.getAttribute("maxIdInCM").toString();
		}
		session.setAttribute("loanId", loanId);
	//	logger.info("loanId id "+loanId);
		CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 	//changed by asesh
		ArrayList specialConditionList = dao.getShowSpecialConditionList(loanId);
		request.setAttribute("specialConditionList", specialConditionList);
		request.setAttribute("viewSpecialCondition", "viewSpecialCondition");
		//logger.info("specialConditionList size: "+specialConditionList.size());
		if(CommonFunction.checkNull(functionId).equalsIgnoreCase("4000121"))
		{
			request.setAttribute("authorSpecialCondition", "authorSpecialCondition");
		}
		if(CommonFunction.checkNull(functionId).equalsIgnoreCase("4000111") || CommonFunction.checkNull(functionId).equalsIgnoreCase("4001231"))
		{
			request.setAttribute("loanHeaderView", "loanHeaderView");
			request.setAttribute("authorSpecialCondition", "authorSpecialCondition");
		}
		if(CommonFunction.checkNull(functionId).equalsIgnoreCase("4000106"))
		{
			request.setAttribute("loanHeaderView", "loanHeaderView");
		}
		//form.reset(mapping, request);		
		return mapping.findForward("viewSpecialCondition");
	}
	
	public ActionForward updateSpecialConditionRemarks(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		
		logger.info("In (updateSpecialConditionRemarks)");
		HttpSession session = request.getSession();
	//	boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String userId=null;
		String bDate=null;
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
				
		}else{
			logger.info("here in saveSpecialCondition method of action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag=null;	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String loanId = null;
		String status="E";
		if(request.getParameter("dealId")!=null)
		{
			loanId=CommonFunction.checkNull(request.getParameter("loanId"));
		}
		else
		{
			loanId =  CommonFunction.checkNull(session.getAttribute("loanId"));
		}
	
		
		 String loanDisbursalId =  CommonFunction.checkNull(session.getAttribute("loanDisbursalId"));
		
		logger.info("loanId "+loanId+" loanDisbursalId: "+loanDisbursalId);
		DynaValidatorForm SpecialConditionDynaValidatorForm = (DynaValidatorForm) form;
		SpecialConditionVo vo =new SpecialConditionVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,SpecialConditionDynaValidatorForm);

		vo.setLoanId(loanId);
		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
                vo.setLoanDisbursalId(loanDisbursalId);
                CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
                logger.info("Implementation class: "+dao.getClass()); 	//changed by asesh
		String [] specialDealId=request.getParameterValues("chk");
		String ids=CommonFunction.checkNull(request.getParameter("specRemarksValues"));
		String cus=ids.replace("/","|");
		
		String idsStatus =CommonFunction.checkNull(request.getParameter("specStatusValues"));
		String cusStatus=idsStatus.replace("/","|");
		/*String [] remarks=request.getParameterValues("remarks");
		String [] status=request.getParameterValues("status");*/
		vo.setSpecRemark(cus);
		vo.setSpecConditionStatus(cusStatus);
			
		//logger.info("vo.getSpecialDealId(): "+vo.getSpecialDealId());
		vo.setChk(specialDealId);
		status=dao.updateSpecialConditionRemarks(vo);
		
		if(CommonFunction.checkNull(status).equalsIgnoreCase("S"))
		{
			request.setAttribute("msg", "S");
		}
		else
		{
			request.setAttribute("msg", "E");
		}
	//	form.reset(mapping, request);
		loanId=null;
		dao=null;
		status=null;
		return mapping.findForward("updateSpecialConditionRemarks");
	}
	
}