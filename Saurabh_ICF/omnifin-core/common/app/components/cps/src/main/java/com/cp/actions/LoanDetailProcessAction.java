/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.ResourceBundle;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.commons.lang.StringEscapeUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
//import com.connect.ConnectionLiabilityDAO;
import com.connect.DaoImplInstanceFactory;
import com.connect.PrepStmtObject;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.LoanDetailVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.tabDependencyCheck.RefreshFlagValueInsert;
import com.tabDependencyCheck.RefreshFlagVo;

/**
 * MyEclipse Struts Creation date: 04-11-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class LoanDetailProcessAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(LoanDetailProcessAction.class.getName());
	/*
	 * Generated Methods
	 */
	ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");
	String dateFormatWithTime=resource.getString("lbl.dateWithTimeInDao");
	String dateFormat=resource.getString("lbl.dateInDao");
	DecimalFormat myFormatter = new DecimalFormat("###,##0.00######");
	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward saveLoan(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		logger.info("In LoanDetailProcessAction(saveLoan)");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bgDate="";
		int compId=0;
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bgDate=userobj.getBusinessdate();
				compId= userobj.getCompanyId();
		}else{
			logger.info("here in saveLoan method of LoanDetailProcessAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		DynaValidatorForm loanDetailForm = (DynaValidatorForm) form;
		logger.info("In LoanDetailProcessAction(saveLoan): "
				+ loanDetailForm.getString("pageStatus"));

		LoanDetailVo vo = new LoanDetailVo();
	

		String dealId = "";

		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		//added by Virender
		logger.info("Virender");
		ArrayList alDeleteQuery = new ArrayList(1);
		String hunterQry="delete from cr_hunter_marking_dtl where deal_id='"+dealId+"'";
		logger.info("hunterQry "+ hunterQry);
		alDeleteQuery.add(hunterQry);
		boolean status1 = ConnectionDAO.sqlInsUpdDelete(alDeleteQuery);
		hunterQry = null;
		//Virender changes end

		
		logger.info("In LoanDetailProcessAction(saveLoan) dealid " + dealId);
		vo.setDealId(dealId);
		vo.setUserId(userId);
		vo.setBgDate(bgDate);
		vo.setCompanyId(""+compId);
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,loanDetailForm);
		
		if(CommonFunction.checkNull(vo.getGrossBlock()).equalsIgnoreCase("")){
			if(request.getParameter("grossBlock")!=null){
				vo.setGrossBlock(request.getParameter("grossBlock").toString());
			}
		}
		if(CommonFunction.checkNull(vo.getNetBlock()).equalsIgnoreCase("")){
			if(request.getParameter("netBlock")!=null){
				vo.setNetBlock(request.getParameter("netBlock").toString());
			}
		}
		logger.info("In Saveloan Action: Intrest Calc from---"+CommonFunction.checkNull(vo.getInterestCalc()));
		CreditProcessingDAO loanService=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+loanService.getClass()); 			// changed by asesh
		//CreditProcessingDAO loanService = new CreditProcessingDAOImpl();
        logger.info("Checking For new Element Added : getEditDueDate()" + vo.getEditDueDate()+ " getFirstInterestDueDate: "+ vo.getFirstInterestDueDate() + "getMaturitydate:  "+ vo.getMaturityDate());
		boolean status = loanService.saveLoanDetails(vo);

		logger.info(" In LoanDetailProcessAction(saveLoan) status in LoanDetailProcessAction: "+ status);
		String dealloanId = "";
		String sms = "";
		if (status) {
			
		
			String dealQuery = "select DEAL_LOAN_ID from cr_deal_loan_dtl where DEAL_ID="+dealId;
			logger.info("In LoanDetailProcessAction(saveLoan) Q "+ dealQuery);
			dealloanId = ConnectionDAO.singleReturn(dealQuery);
			logger.info("dealloanId:  " + dealloanId);
			String repayQuery="select DEAL_REPAYMENT_TYPE from cr_deal_loan_dtl where DEAL_LOAN_ID='"+dealloanId+"'";
			String repay=ConnectionDAO.singleReturn(repayQuery.toString());
					
			sms = "S";
			RefreshFlagVo vo1 = new RefreshFlagVo();
			if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
			vo1.setRecordId(Integer.parseInt(dealId.trim()));
    		vo1.setTabIndex(5);
    		vo1.setModuleName("CP");
    		vo1.setNonInstallment(repay);
    		RefreshFlagValueInsert.updateRefreshFlag(vo1);
		} else {
			sms = "E";
		}
		// Start By Prashant
		String diffDayQuery="select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY='REPY_DATE_AFTER'";
		String diffDayCount=ConnectionDAO.singleReturn(diffDayQuery);
		logger.info("diffDayQuery: "+diffDayQuery+" diffDayCount: "+diffDayCount);
		request.setAttribute("diffDayCount", diffDayCount);
		// End By Prashant
		ArrayList getLoanTypeList = loanService.getLoanTypeList();
		
		request.setAttribute("getLoanType", getLoanTypeList);
		request.setAttribute("insertSuccess", sms);
		ArrayList sector = loanService.getSectorList();
		ArrayList cycle = loanService.getCycleDateList(dealId,"DC");
		ArrayList loanList = loanService.getLoanDetailList(dealId);
		ArrayList baseRateList = loanService.getBaseRateList(bgDate);
		ArrayList productTypeList = loanService.getProductTypeList();
		ArrayList allDetail = loanService.getAllLoanDetails(dealloanId);
		ArrayList<LoanDetailVo> loanClassificationList = loanService.getresultForDeal(dealId);
		request.setAttribute("loanClassificationList", loanClassificationList);
		request.setAttribute("baseRateList", baseRateList);
		request.setAttribute("productTypeList", productTypeList);
		session.setAttribute("loanList", loanList);
		request.setAttribute("allDetail", allDetail);
		ArrayList dealHeader = loanService.getDealHeader(dealId);
		//Surendra Code for INT_CALC..
		ArrayList interestFrom=loanService.getinterstCalcFrom();
		session.setAttribute("dealHeader", dealHeader);
		request.setAttribute("sector", sector);
		request.setAttribute("cycle", cycle);
		request.setAttribute("interestFrom", interestFrom);
		LoanDetailVo loanVo=null;
		//amandeep starts
		ArrayList list1 = loanService.getPaymentModes();
		request.setAttribute("paymentModes", list1);
		//amandeep ends
		if(allDetail.size()>0)
		{
			loanVo=(LoanDetailVo)allDetail.get(0);
			logger.info("Repayment Type:"+loanVo.getRepaymentType());
		}
		
		//if(loanVo.getRepaymentType().equalsIgnoreCase("N"))
		//{
			RefreshFlagVo vo1 = new RefreshFlagVo();
			if(dealId!=null && !dealId.trim().equalsIgnoreCase(""))
				vo1.setRecordId(Integer.parseInt(dealId.trim()));
    		vo1.setTabIndex(5);
    		vo1.setModuleName("CP");
    		vo1.setNonInstallment(loanVo.getRepaymentType());
    		RefreshFlagValueInsert.updateRefreshFlag(vo1);
    		
    		//START BY SACHIN
    		ArrayList installmentTypeList=loanService.getInstallmentTypeList();
    		request.setAttribute("installmentTypeList", installmentTypeList);
    		//END BY SACHIN
		//}
    		String leadId = ConnectionDAO.singleReturn(" SELECT LEAD_ID FROM CR_DEAL_DTL WHERE DEAL_ID = '"+dealId+"' ");
    		String cibilCount = ConnectionDAO.singleReturn("SELECT COUNT(1) FROM CR_CIBIL_REF_DTL WHERE LEAD_ID = '"+leadId+"'");
    		//String dealCustCount = ConnectionDAO.singleReturn("select count(1) from cr_deal_customer_role where DEAL_ID='"+dealId+"' ");
    		//String leadCustCount = ConnectionDAO.singleReturn("select count(1) from cr_lead_customer_m where lead_id='"+leadId+"' ");
    		if(Integer.parseInt(cibilCount)>0){
    			String CibilDate = ConnectionDAO.singleReturn("SELECT DEAL_RECEIVED FROM CR_DEAL_MOVEMENT_DTL WHERE DEAL_ID = '"+dealId+"' AND DEAL_STAGE_ID = 'UNC' limit 1 ");
    			boolean cibilStatus=false;
    			ArrayList qryList = new ArrayList();
    			PrepStmtObject insertPrepStmtObject=new PrepStmtObject();
    			String qryUpdate = "UPDATE CR_DEAL_MOVEMENT_DTL SET DEAL_FORWARDED = ?, DEAL_FORWARD_USER = ? WHERE DEAL_STAGE_ID = ? AND DEAL_ID = ?";	
    			
    			if(StringEscapeUtils.escapeSql(CommonFunction.checkNull(CibilDate)).trim().equalsIgnoreCase(""))
    				insertPrepStmtObject.addNull();
    			else
    				insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(CibilDate).trim());
    			
    			if(StringEscapeUtils.escapeSql(CommonFunction.checkNull(userId)).trim().equalsIgnoreCase(""))
    				insertPrepStmtObject.addNull();
    			else
    				insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(userId).trim());
    			
    			if(StringEscapeUtils.escapeSql(CommonFunction.checkNull("CBL")).trim().equalsIgnoreCase(""))
    				insertPrepStmtObject.addNull();
    			else
    				insertPrepStmtObject.addString(StringEscapeUtils.escapeSql("CBL").trim());
    			
    			if(StringEscapeUtils.escapeSql(CommonFunction.checkNull(dealId)).trim().equalsIgnoreCase(""))
    				insertPrepStmtObject.addNull();
    			else
    				insertPrepStmtObject.addString(StringEscapeUtils.escapeSql(dealId).trim());
    			
    			insertPrepStmtObject.setSql(qryUpdate);
    			qryList.add(insertPrepStmtObject);
    			
    			try
    			{
    				logger.info("query : "+ insertPrepStmtObject.printQuery());
    				cibilStatus = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
    			}
    			catch(Exception e){
    				e.printStackTrace();
    			}
    		}		
		
		return mapping.getInputForward();
	}
	
	public ActionForward refreshLoanDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		logger.info("In LoanDetailProcessAction(refreshLoanDetail)");
		HttpSession session = request.getSession();
		//boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		//String userId="";
		String bgDate="";
		
		if(userobj!=null)
		{
				//userId=userobj.getUserId();
				bgDate=userobj.getBusinessdate();
				
		}else{
			logger.info("here in saveLoan method of LoanDetailProcessAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		DynaValidatorForm loanDetailForm = (DynaValidatorForm) form;
		logger.info("In LoanDetailProcessAction(saveLoan): "
				+ loanDetailForm.getString("pageStatus"));

		//LoanDetailVo vo = new LoanDetailVo();
	

		String dealId = "";

		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		logger.info("In LoanDetailProcessAction(saveLoan) dealid " + dealId);
//		vo.setDealId(dealId);
//		vo.setUserId(userId);
//		vo.setBgDate(bgDate);
//		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,loanDetailForm);
		CreditProcessingDAO loanService=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+loanService.getClass()); 			// changed by asesh
		//CreditProcessingDAO loanService = new CreditProcessingDAOImpl();
		//boolean status = loanService.saveLoanDetails(vo);

		//logger.info(" In LoanDetailProcessAction(saveLoan) status in LoanDetailProcessAction: "+ status);
		//String dealloanId = "";
		//String sms = "";
		// Start By Prashant
		String diffDayQuery="select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY='REPY_DATE_AFTER'";
		String diffDayCount=ConnectionDAO.singleReturn(diffDayQuery);
		logger.info("diffDayQuery: "+diffDayQuery+" diffDayCount: "+diffDayCount);
		request.setAttribute("diffDayCount", diffDayCount);
		ArrayList dueDayList=loanService.fetchDueDayNextDate(bgDate);
		request.setAttribute("dueDayList", dueDayList);
		// End By Prashant
		ArrayList getLoanTypeList = loanService.getLoanTypeList();
		request.setAttribute("getLoanType", getLoanTypeList);
		ArrayList sector = loanService.getSectorList();
		ArrayList cycle = loanService.getCycleDateList(dealId,"DC");
		//ArrayList loanList = loanService.getLoanDetailList(dealId);
		ArrayList baseRateList = loanService.getBaseRateList(bgDate);
		ArrayList productTypeList = loanService.getProductTypeList();
		//ArrayList allDetail = loanService.getAllLoanDetails(dealloanId);
		request.setAttribute("baseRateList", baseRateList);
		request.setAttribute("productTypeList", productTypeList);
		//session.setAttribute("loanList", loanList);
		//request.setAttribute("allDetail", allDetail);
		//ArrayList dealHeader = loanService.getDealHeader(dealId);
		//session.setAttribute("dealHeader", dealHeader);
		request.setAttribute("sector", sector);
		request.setAttribute("cycle", cycle);
		//START BY SACHIN
		ArrayList installmentTypeList=loanService.getInstallmentTypeList();
		request.setAttribute("installmentTypeList", installmentTypeList);
		//END BY SACHIN
		ArrayList interestFrom=loanService.getinterstCalcFrom();
		request.setAttribute("interestFrom", interestFrom);
		//amandeep starts
		 ArrayList list1 = loanService.getPaymentModes();
		 request.setAttribute("paymentModes", list1);
		 //amandeep ends			
		return mapping.getInputForward();
	}
	
	//Start By Anil
	public ActionForward saveLoanForEmiCalc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// TODO Auto-generated method stub
		logger.info("In LoanDetailProcessAction(saveLoanForEmiCalc)");

		// TODO Auto-generated method stub
		logger.info("In LoanDetailProcessAction(saveLoan)");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bgDate="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bgDate=userobj.getBusinessdate();
				
		}else{
			logger.info("here in saveLoanForEmiCalc method of LoanDetailProcessAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		DynaValidatorForm loanDetailForm = (DynaValidatorForm) form;
		LoanDetailVo vo = new LoanDetailVo();
		//CreditProcessingDAO loanService = new CreditProcessingDAOImpl();
        CreditProcessingDAO loanService=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+loanService.getClass()); 		//changed by anil
		vo.setUserId(userId);
		vo.setBgDate(bgDate);
		logger.info("userId:::::::"+userId+"::::::::::bgDate::::::::"+bgDate);
		String dealId=loanService.insertDealForEmiLoan(userId,bgDate);
		vo.setDealId(dealId);
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,loanDetailForm);
		
		boolean status = loanService.saveLoanForEmiCalc(vo);
		logger.info("Status----------------------------->"+ status);
		String dealLoanId = "";
		String sms = "";
		if (status) {
			String dealQuery = "select DEAL_LOAN_ID from cr_deal_loan_dtl_emi_calc where DEAL_ID="+ dealId;
			logger.info("In LoanDetailProcessAction(saveLoanForEmiCalcu) ::::::::::::::"+ dealQuery);
			dealLoanId = ConnectionDAO.singleReturn(dealQuery);
			logger.info("dealLoanId::::::::::::::  " + dealLoanId);
			session.setAttribute("editLoanDetailsForEmiCalc", "editLoanDetailsForEmiCalc");
			sms = "S";
		} else {
			sms = "E";
		}
		ArrayList getLoanTypeList = loanService.getLoanTypeList();
		request.setAttribute("getLoanType", getLoanTypeList);
		request.setAttribute("insertSuccess", sms);
		ArrayList sector = loanService.getSectorList();
		ArrayList cycle = loanService.getCycleDateList(dealId,"DC");
		ArrayList loanList = loanService.getLoanDetailList(dealId);
		ArrayList baseRateList = loanService.getBaseRateList(bgDate);
		ArrayList productTypeList = loanService.getProductTypeList();
		ArrayList allDetail = loanService.getAllLoanDetailsForEmiCalc(dealLoanId);
		request.setAttribute("baseRateList", baseRateList);
		request.setAttribute("productTypeList", productTypeList);
		session.setAttribute("loanList", loanList);
		request.setAttribute("allDetail", allDetail);
		request.setAttribute("sector", sector);
		request.setAttribute("interestFrom", loanService.getinterstCalcFrom());
		request.setAttribute("cycle", cycle);
		session.setAttribute("dealId", dealId);
		LoanDetailVo loanVo=null;
		//amandeep starts
		 ArrayList list1 = loanService.getPaymentModes();
		 request.setAttribute("paymentModes", list1);
		 //amandeep ends
		if(allDetail.size()>0)
		{
			loanVo=(LoanDetailVo)allDetail.get(0);
			logger.info("Repayment Type:"+loanVo.getRepaymentType());
		}

		//START BY SACHIN
		ArrayList installmentTypeList=loanService.getInstallmentTypeList();
		request.setAttribute("installmentTypeList", installmentTypeList);
		//END BY SACHIN
		return mapping.getInputForward();
	}

	
	public ActionForward updateLoanForEmiCalc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception{
		logger.info("In LoanDetailProcessAction(updateLoanForEmiCalc)");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bgDate="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bgDate=userobj.getBusinessdate();
				
		}else{
			logger.info("here in updateLoanForEmiCalc method of LoanDetailProcessAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		DynaValidatorForm loanDetailForm = (DynaValidatorForm) form;
		logger.info("In LoanDetailProcessAction(updateLoanForEmiCalc): "+ loanDetailForm.getString("pageStatus"));

		LoanDetailVo vo = new LoanDetailVo();
		//CreditProcessingDAO loanService = new CreditProcessingDAOImpl();
        CreditProcessingDAO loanService=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+loanService.getClass()); 		//changed by anil
		String dealId ="";
		if (session.getAttribute("dealId") != null) {
			dealId = session.getAttribute("dealId").toString();
		} 
		logger.info("In LoanDetailProcessAction(updateLoanForEmiCalc) dealid " + dealId);
		
		vo.setDealId(dealId);
		vo.setUserId(userId);
		vo.setBgDate(bgDate);
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,loanDetailForm);
		
		boolean status = loanService.updateLoanForEmiCalc(vo);
		logger.info(" In LoanDetailProcessAction(updateLoanForEmiCalc) status in LoanDetailProcessAction: "+ status);
		String dealloanId = "";
		String sms = "";
		String schemeId="";
		if (status) {
			String dealQuery = "select DEAL_LOAN_ID from cr_deal_loan_dtl_emi_calc where DEAL_ID='"+CommonFunction.checkNull(dealId)+"'";
			logger.info("In LoanDetailProcessAction(updateLoanForEmiCalc) Query::::::::::::::::::" + dealQuery);
			dealloanId = ConnectionDAO.singleReturn(dealQuery);
			logger.info("In LoanDetailProcessAction(updateLoanForEmiCalc) dealLoanId:::::::::::::::"+ dealloanId);
			
			String schemeQuery = "select DEAL_SCHEME from cr_deal_loan_dtl_emi_calc where DEAL_LOAN_ID='"+CommonFunction.checkNull(dealloanId)+"'";
			logger.info("In loanBehindDetailForEmiCalcu Query::::::::::::::::::" + schemeQuery);
			schemeId = ConnectionDAO.singleReturn(schemeQuery);
			sms = "S";
		} else {
			sms = "E";
		}
		ArrayList getLoanTypeList = loanService.getLoanTypeList();
		request.setAttribute("getLoanType", getLoanTypeList);
		request.setAttribute("insertSuccess", sms);
		ArrayList sector = loanService.getSectorList();
		ArrayList cycle = loanService.getCycleDueDay(schemeId,"DC");
		ArrayList loanList = loanService.getLoanDetailList(dealId);
		ArrayList baseRateList = loanService.getBaseRateList(bgDate);
		ArrayList productTypeList = loanService.getProductTypeList();
		ArrayList allDetail = loanService.getAllLoanDetailsForEmiCalc(dealloanId);
		request.setAttribute("baseRateList", baseRateList);
		request.setAttribute("productTypeList", productTypeList);
		session.setAttribute("loanList", loanList);
		request.setAttribute("allDetail", allDetail);
		request.setAttribute("sector", sector);
		request.setAttribute("interestFrom", loanService.getinterstCalcFrom());
		request.setAttribute("cycle", cycle);
		session.setAttribute("dealId", dealId);
		LoanDetailVo loanVo=null;
		//amandeep starts
		ArrayList list1 = loanService.getPaymentModes();
		request.setAttribute("paymentModes", list1);
		//amandeep ends	
		if(allDetail.size()>0)
		{
			loanVo=(LoanDetailVo)allDetail.get(0);
			logger.info("Repayment Type:"+loanVo.getRepaymentType());
		}

		//START BY SACHIN
		ArrayList installmentTypeList=loanService.getInstallmentTypeList();
		request.setAttribute("installmentTypeList", installmentTypeList);
		//END BY SACHIN
		
		return mapping.getInputForward();
	}
	//End By Anil

	
	//started by richa
	public ActionForward openSectorType(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception
			{
				logger.info(" in openSectorType()");
				ServletContext context = getServlet().getServletContext();
				HttpSession session = request.getSession();
				LoanDetailVo vo = new LoanDetailVo();
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				String strFlag=null;
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				String dealId = "";

				if (session.getAttribute("dealId") != null) {

					dealId = session.getAttribute("dealId").toString();
				} 
				String val="";
				val=request.getParameter("val");
				logger.info("request.getParameter " + val);
				if ((CommonFunction.checkNull(val)).trim().equalsIgnoreCase("Y")) {
					logger.info("value in if" );
					request.setAttribute("edit", "edit");
				} 
				else
				{
					logger.info("value in else " );
					request.setAttribute("deal", "deal");
				}
				logger.info("In openSectorType dealid " + dealId);
				vo.setDealId(dealId);
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				CreditProcessingDAO loanService=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
				ArrayList list = loanService.editSectorTypeDetails(vo);
				logger.info("In openEditCaseTypeMaster CaseTypeMasterVo list"+list.size());
				  ArrayList<Object> agriDocsList = loanService.getAgriDocsList();
					session.setAttribute("agriDocsList", agriDocsList);
				request.setAttribute("list", list);
				if(list.size()>0)
				{
					vo=(LoanDetailVo) list.get(0);
					LoanDetailVo docVo=new LoanDetailVo();
					docVo=(LoanDetailVo) list.get(0);
					logger.info("vo.getRecStatus()::::::::::"+docVo.getRecStatus());
					request.setAttribute("status",docVo.getRecStatus());
				
				}
				
				request.setAttribute("inDeal", "inDeal");
				request.setAttribute("save", "save");
				
			    return mapping.findForward("openAdd");	
			}
	
	public ActionForward saveSectorTypeDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse resopnse) throws Exception{
			ServletContext context = getServlet().getServletContext();
			LoanDetailVo vo = new LoanDetailVo();
			HttpSession session = request.getSession();
		
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			String strFlag=null;
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			String dealId = "";

			if (session.getAttribute("dealId") != null) {

				dealId = session.getAttribute("dealId").toString();
			} 
			logger.info("In openSectorType dealid " + dealId);
			vo.setDealId(dealId);
			String userId=null;
			String bDate=null;
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bDate=userobj.getBusinessdate();
			}
	
		DynaValidatorForm loanDetailForm= (DynaValidatorForm)form;
		
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, loanDetailForm);
		

		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		CreditProcessingDAO loanService=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
		String sms=null;
		String recStatus=null;
		boolean status = loanService.saveSectorTypeDetails(vo,dealId);
		logger.info("Inside Country Master Action.....displaying status...."+status);
		ArrayList list = loanService.editSectorTypeDetails(vo);
		logger.info("In openEditCaseTypeMaster CaseTypeMasterVo list"+list.size());
		 ArrayList<Object> agriDocsList = loanService.getAgriDocsList();
		session.setAttribute("agriDocsList", agriDocsList);
		request.setAttribute("list", list);
		request.setAttribute("save", "save");
		request.setAttribute("deal", "deal");
		if(CommonFunction.checkNull(vo.getRecStatus()).equalsIgnoreCase("on"))
		{
			recStatus="A";
		}
		else
		{
			recStatus="X";
		}
		request.setAttribute("status",recStatus);
		logger.info("vo.getRecStatus()::::::::::"+recStatus);
		
		if(status){
			sms="S";
			logger.info("sms::::::::::"+sms);
			request.setAttribute("sms",sms);
			//request.setAttribute("editVal", "editVal");
			//request.setAttribute("list", list);
			request.setAttribute("save", "save");
		}
		else{
			sms="E";
			request.setAttribute("sms",sms);
			
			//request.setAttribute("save", "save");
		}
		logger.info("status"+status);
		return mapping.findForward("save");	
	}
	
}