/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cp.actions;

import java.util.ArrayList;
import java.util.ResourceBundle;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.BuyerVo;
import com.cp.vo.FieldVerificationVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/**
 * MyEclipse Struts Creation date: 04-01-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class BuyerSupplierMainAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(BuyerSupplierMainAction.class.getName());
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward modifyBuyerSupplier(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		logger.info("In modifyBuyerSupplier()---------->");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
		
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		 String dealID= request.getParameter("dealID");
		 CreditProcessingDAO detail=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	     logger.info("Implementation class: "+detail.getClass()); 			// changed by asesh
		 //CreditProcessingDAO detail = new CreditProcessingDAOImpl();
		 
		 ArrayList dealHeader = detail.getDealHeader(dealID);
		session.setAttribute("dealHeader", dealHeader);
			
		ArrayList<Object> showdetails = detail.getBuyerDetailsAll("DB","B", dealID);
		logger.info("In modifyBuyerSupplier()----------->"+ showdetails);
		session.setAttribute("showdetails", showdetails);
		
		
		ArrayList<Object> showdetailSupplier = detail.getSupplierDetailsAll("S", "S", dealID);
		logger.info("modifyBuyerSupplier()--->showdetailSupplier LIST SIZE-------->"+ showdetailSupplier.size());
		session.setAttribute("showdetailSupplier", showdetailSupplier);
		
		
		 session.setAttribute("dealId", dealID);
		
		 
			ArrayList<Object> detailcountryList = detail.getAddressList();
			session.setAttribute("detailcountryList", detailcountryList);
		return mapping.findForward("success");
	}

	
	public ActionForward saveBuyerSupplierAuthor(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		logger.info("In saveBuyerSupplierAuthor()--------->");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate="";
		
		if(userobj!=null)
		{		userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();				
		}else{
			
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		DynaValidatorForm buyerDynaValidatorForm = (DynaValidatorForm) form;
	
		
		BuyerVo sh = new BuyerVo();
		sh.setUserId("" + userId);
		sh.setMakerDate(bDate);
		org.apache.commons.beanutils.BeanUtils.copyProperties(sh,
				buyerDynaValidatorForm);

		String dealId = "";

		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		logger.info("In saveBuyerSupplierAuthor()----> DealId "+ dealId);
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 			// changed by asesh
		//CreditProcessingDAO service = new CreditProcessingDAOImpl();
		sh.setDealId(dealId);
		String sms = "";

		boolean status = service.saveBuyersupplierAuthorDetails(sh);
		if (status) {
			
			sms = "S";
		} else {
			sms = "E";
		}
		request.setAttribute("ApprovedSuccess", sms);
		ArrayList<Object> detailcountryList = service.getAddressList();
		session.setAttribute("detailcountryList", detailcountryList);
		return mapping.findForward("saveBuyerSupplierAuthor");
	}
	
	
	public ActionForward modifyBuyerSupplierAuthor(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		logger.info("In modifyBuyerSupplierAuthor()--------->");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		 String dealID= request.getParameter("dealID");
		 String dealNo=request.getParameter("dealNo");
		 String custrName=request.getParameter("custrName");
		 String dealDate=request.getParameter("dealDate");
		 String rmName=request.getParameter("rmName");
		 CreditProcessingDAO detail=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	     logger.info("Implementation class: "+detail.getClass()); 			// changed by asesh
		 
		 ArrayList dealHeader = detail.getDealHeader(dealID);
		session.setAttribute("dealHeader", dealHeader);
			
		ArrayList<Object> showdetails = detail.getBuyerDetailsAll("DB","B", dealID);
		logger.info("In modifyBuyerSupplierAuthor()----->"+ showdetails);
		session.setAttribute("showdetails", showdetails);
		
		
		ArrayList<Object> showdetailSupplier = detail
		.getSupplierDetailsAll("S", "S", dealID);
       logger.info("Sucessfully Saved............"
		+ showdetailSupplier.size());
       session.setAttribute("showdetailSupplier", showdetailSupplier);
		
		session.setAttribute("viewDeal", "viewDeal");
		 session.setAttribute("dealId", dealID);
		 session.setAttribute("dealNo", dealNo);
		 session.setAttribute("custrName", custrName);
		 session.setAttribute("dealDate", dealDate);
		 session.setAttribute("rmName", rmName);
		 
		 ArrayList<Object> detailcountryList = detail.getAddressList();
			session.setAttribute("detailcountryList", detailcountryList);
		return mapping.findForward("success");
	}

	public ActionForward searchDealForBuyerSupp(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,HttpServletResponse response) throws Exception {

		
		
		logger.info("In searchDealForBuyerSupp.()....");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String branch="";
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			branch=userobj.getBranchId();
		}else{
			return mapping.findForward("sessionOut");
		}
		String sms="";
		ArrayList dealdetails=new ArrayList();
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	

		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		DynaValidatorForm CommonDealDynaValidatorForm = (DynaValidatorForm) form;
		ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");
		String dateFormat = resource.getString("lbl.dateFormat(dd-mm-yyyy)");
		FieldVerificationVo vo = new FieldVerificationVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,CommonDealDynaValidatorForm);
		vo.setBranchId(branch);
		if(CommonFunction.checkNull(vo.getReportingToUserId()).equalsIgnoreCase(""))
		{ 
			vo.setReportingToUserId(userId);
		   //logger.info("When user id is not selected by the user:::::"+userId);
		}
		else
		{
			vo.setReportingToUserId(vo.getReportingToUserId());
		}
		logger.info("user Id:::::"+vo.getReportingToUserId());
		
		
		if (vo.getApplicationDate().equalsIgnoreCase(dateFormat)) {
			vo.setApplicationDate("");
		}
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 			// changed by asesh

		logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
		
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));
		
		vo.setCurrentPageLink(currentPageLink);
		dealdetails= service.searchDealDetailforBuyerSupp(vo, request);

	    logger.info("In searchDealForBuyerSupp()---> searchDealDetailforBuyerSupp.list SIZE: "+dealdetails.size());
		
		
		request.setAttribute("dealdetails", dealdetails);
		
		if(CommonFunction.checkNull(request.getAttribute("flag")).toString().equalsIgnoreCase("yes")){
			request.setAttribute("sms","No");
		}
	
		
//		CreditProcessingDAO service = new CreditProcessingDAOImpl();
//		ArrayList<Object> showdetails = service.getBuyerDetailsAll("DB",
//				"B", dealId);
//		logger
//				.info("In BuyerProcessAction(saveBuyerDetails) arrayList(showdetails)"
//						+ showdetails);
//		request.setAttribute("showdetails", showdetails);
//		sms = "S";
//	
		
		 ArrayList<Object> detailcountryList = service.getAddressList();
			session.setAttribute("detailcountryList", detailcountryList);
		request.setAttribute("buySuppMaker", "buySuppMaker");
		return mapping.findForward("buySupplSearch");
		
}
	
	
	
	
	
	
	public ActionForward searchDealForBuyerSuppAuthor(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,HttpServletResponse response) throws Exception {

	
		logger.info("In searchDealForBuyerSuppAuthor().....");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String branchId="";
		 
		if(userobj!=null)
		{		userId=userobj.getUserId();
				branchId=userobj.getBranchId();				
		}else{
			return mapping.findForward("sessionOut");
		}
		String sms="";
		ArrayList dealdetails=new ArrayList();
		
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		DynaValidatorForm CommonDealDynaValidatorForm = (DynaValidatorForm) form;
		ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");
		String dateFormat = resource.getString("lbl.dateFormat(dd-mm-yyyy)");
		FieldVerificationVo vo = new FieldVerificationVo();
		

		vo.setBranchId(branchId);
		vo.setUserId(userId);
		
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,CommonDealDynaValidatorForm);
		if (vo.getApplicationDate().equalsIgnoreCase(dateFormat)) {
			vo.setApplicationDate("");
		}
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 			// changed by asesh

		logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
		
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));
		
		vo.setCurrentPageLink(currentPageLink);
		dealdetails= service.searchDealDetailforBuyerSuppAuthor(vo, request);

	    logger.info("In searchDealForBuyerSuppAuthor()....list SIZE: "+dealdetails.size());
		
		request.setAttribute("dealdetails", dealdetails);
		
		if(CommonFunction.checkNull(request.getAttribute("flag")).toString().equalsIgnoreCase("yes")){
			request.setAttribute("sms","No");
		}
	
	

		request.setAttribute("buySuppAuthor", "buySuppAuthor");
		return mapping.findForward("buySupplSearch");
		
}
	
	
	public ActionForward saveNForBuyerDetails(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,HttpServletResponse response) throws Exception {

		logger.info("In saveNForBuyerDetails()------->");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String bDate="";
		String companyId="";
		String userId="";
		if(userobj!=null)
		{
			bDate=userobj.getBusinessdate();
			companyId=""+userobj.getCompanyId();
			userId=userobj.getUserId();
		}else{
			return mapping.findForward("sessionOut");
		}
		boolean flag=false;

		
		Object sessionId = session.getAttribute("sessionID");
	
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		DynaValidatorForm buyerDynaValidatorForm = (DynaValidatorForm) form;

	//	String userId = userobj.getUserId();
		BuyerVo sh = new BuyerVo();
		sh.setUserId(userId);
		sh.setMakerDate(bDate);
		org.apache.commons.beanutils.BeanUtils.copyProperties(sh,
				buyerDynaValidatorForm);

		String dealId = "";

		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		logger.info("In saveNForBuyerDetails()--DEALID "+ dealId);

		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 			// changed by asesh
		sh.setDealId(dealId);
		String sms = "";
		boolean mainStatus=false;
		int buySupType = service.dealExisForBuySupp(sh);
		
		if(buySupType == 0){
			
			sms = "CNF";
			logger.info("sms--"+sms);
			
		}else{			
			
			  String checkStageM=CommonFunction.stageMovement(companyId, "DC","F",dealId, "BSA", bDate,userId);
			  logger.info("checkStageM : "+checkStageM);
			  if(checkStageM.equalsIgnoreCase("S"))
				  	mainStatus = service.forwardDealforbuySupp(sh);
			  else
				  request.setAttribute("checkStageM", checkStageM);
			
			if(mainStatus){
				sms ="CF";
			}else{
			sms ="CNFS";
			}
			
		}
		request.setAttribute("forwardSuccess", sms);
        return mapping.findForward("saveNForBuyerDetails");
		
}
	

	
	
	
}
