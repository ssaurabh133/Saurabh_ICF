/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.legal.actions;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Properties;

import javax.naming.InitialContext;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.business.legalMasterBussiness.LegalMasterBusinessSessionBeanRemote;
import com.connect.CommonFunction;
import com.connect.LookUpInstanceFactory;
import com.legal.vo.LawFirmMasterVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

public class LawFirmMasterDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(LawFirmMasterDispatchAction.class.getName());
	public ActionForward openAddLawFirm(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception
			{
				logger.info(" in openAddLawFirm()");
				ServletContext context = getServlet().getServletContext();
				HttpSession session = request.getSession();
			
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				String strFlag=null;
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				
				request.setAttribute("save", "save");
				 strFlag=null;
			    return mapping.findForward("openAdd");
			   
			}
	
	
	public ActionForward saveLawFirmDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse resopnse) throws Exception{
		
		logger.info(" in saveLawFirmDetails()");
			ServletContext context = getServlet().getServletContext();
			//HttpSession session=request.getSession(false);
			HttpSession session = request.getSession();
			
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			String strFlag=null;
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
			String userId=null;
			String bDate=null;
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bDate=userobj.getBusinessdate();
			}
	
		DynaValidatorForm lawFirmDyanavalidatiorForm= (DynaValidatorForm)form;
		LawFirmMasterVo vo = new LawFirmMasterVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, lawFirmDyanavalidatiorForm);
		

		vo.setMakerId(CommonFunction.checkNull(userId));
		vo.setMakerDate(CommonFunction.checkNull(bDate));
		
		LegalMasterBusinessSessionBeanRemote bp = (LegalMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
	
		String sms=null;
		
		String branchs=CommonFunction.checkNull(request.getParameter("lbxBranchIds"));
		
		logger.info("branchs........"+branchs);
		String[] branchName = branchs.split("\\|");
		boolean st = bp.checkExistingPAN(vo,"Y"); 
		logger.info("Existing PAN Status : " + st);
		if(st)
		{
			ArrayList<LawFirmMasterVo> list =new ArrayList<LawFirmMasterVo>();
			list.add(vo);
			request.setAttribute("sms","PAN");
			request.setAttribute("list",list);
			request.setAttribute("save", "save");
		}
		else
		{
			boolean status = bp.insertLawFirmMaster(vo,branchName);
			logger.info("Inside insert Law Firm Master Action.....displaying status...."+status);
			if(status){
				sms="S";
				request.setAttribute("sms",sms);
				request.setAttribute("save", "save");
			}
			else{
				sms="E";
				ArrayList<LawFirmMasterVo> list =new ArrayList<LawFirmMasterVo>();
				list.add(vo);
				request.setAttribute("sms",sms);
				request.setAttribute("list",list);
				request.setAttribute("save", "save");
			}
			logger.info("status"+status);
		}
		 strFlag=null;
		return mapping.getInputForward();
	}
	
	
	public ActionForward openEditLawFirmMaster(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception { 
		
		logger.info("In openEditLawFirmMaster");
		ServletContext context = getServlet().getServletContext();
						LawFirmMasterVo vo=new LawFirmMasterVo(); 
						
						
						HttpSession session = request.getSession();
						
						UserObject userobj=(UserObject)session.getAttribute("userobject");
						Object sessionId = session.getAttribute("sessionID");
						//for check User session start
						String strFlag="";
						if(sessionId!=null)
						{
							strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
						}
						
						logger.info("strFlag .............. "+strFlag);
						if(!strFlag.equalsIgnoreCase(""))
						{
							if(strFlag.equalsIgnoreCase("sameUserSession"))
							{
								context.removeAttribute("msg");
								context.removeAttribute("msg1");
							}
							else if(strFlag.equalsIgnoreCase("BODCheck"))
							{
								context.setAttribute("msg", "B");
							}
							return mapping.findForward("logout");
						}
						
						String lawFirmCode = request.getParameter("lawFirmCode");
						
						
						vo.setLawFirmCode(lawFirmCode);
						logger.info("In openEditLawFirmMaster---lawFirmCode---- by getpara-"+request.getParameter("lawFirmCode"));  
						logger.info("In openEditLawFirmMaster---lawFirmCode---- by getpara by vo-"+vo.getLawFirmCode());
						
						LegalMasterBusinessSessionBeanRemote bp = (LegalMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
						
						ArrayList list = bp.editLawFirmData(vo);
						logger.info("In openEditLawFirmMaster LawFirmMasterVo list"+list.size());
						request.setAttribute("list", list);
						
						
						ArrayList<LawFirmMasterVo> branchList = bp.getBranchesForEdit(lawFirmCode);
						
						Iterator<LawFirmMasterVo> it= branchList.iterator();
						
						String branchIds = "";
						
						while(it.hasNext())
						{
							LawFirmMasterVo  vo1 = (LawFirmMasterVo) it.next();
							logger.info("vo1.getBranchId()---"+vo1.getBranchId());
							branchIds=branchIds+vo1.getBranchId()+"|";
							
							logger.info("branchDesc---"+branchIds);
							
						}
						if(!branchIds.equalsIgnoreCase(""))
							branchIds = branchIds.substring(0,branchIds.length()-1);
						logger.info("branchIds--2--"+branchIds);
						
						request.setAttribute("branchIds", branchIds);
						request.setAttribute("branchList", branchList);
					
						
						vo=(LawFirmMasterVo) list.get(0);
						LawFirmMasterVo docVo=new LawFirmMasterVo();
						docVo=(LawFirmMasterVo) list.get(0);
						logger.info("In openEditLawFirmMaster---status---- by getpara by vo-"+docVo.getRecStatus());
						
					
						request.setAttribute("status", vo.getRecStatus());
						request.setAttribute("editVal", "editVal");
						 strFlag=null;
					   return mapping.findForward("editLawFirm");	
		}
	
	
	public ActionForward updateLawFirm(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		logger.info("In updateLawFirm.......");
		ServletContext context = getServlet().getServletContext();
		
		HttpSession session = request.getSession();
		
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		String strFlag=null;
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			 
			return mapping.findForward("logout");
		}
		
		String userId=null;
		String bDate=null;
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
		}
		
		LawFirmMasterVo lawFirmVo=new LawFirmMasterVo(); 
		DynaValidatorForm lawFirmDyanaValidatorForm= (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(lawFirmVo, lawFirmDyanaValidatorForm);	

		logger.info("In updateCountryDetails---------");  
		
		lawFirmVo.setMakerId(CommonFunction.checkNull(userId));
		lawFirmVo.setMakerDate(CommonFunction.checkNull(bDate));
		
		LegalMasterBusinessSessionBeanRemote bp = (LegalMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
        
        
        String branchs=CommonFunction.checkNull(request.getParameter("lbxBranchIds"));
		
		logger.info("branchs........"+branchs);
		String[] branchName = branchs.split("\\|");
		
		boolean st = bp.checkExistingPAN(lawFirmVo,"N"); 
		logger.info("Existing PAN Status in updateLawFirm : " + st);
		if(st)
		{
			request.setAttribute("sms","PAN");
			ArrayList<LawFirmMasterVo> list =new ArrayList<LawFirmMasterVo>();
			list.add(lawFirmVo);
			request.setAttribute("editVal", "editVal");
			request.setAttribute("list", list);
			request.setAttribute("status", lawFirmVo.getRecStatus());
		}
		else
		{
			boolean status=bp.updateLawFirmData(lawFirmVo,branchName);
	        
	        String sms=null;
	        if(status){
				sms="M";
				request.setAttribute("sms",sms);
				request.setAttribute("editVal", "editVal");
			}
			else{
				sms="E";
				request.setAttribute("sms",sms);
				ArrayList<LawFirmMasterVo> list =new ArrayList<LawFirmMasterVo>();
				list.add(lawFirmVo);
				logger.info("In update case detail list"+ list.size());
				
				request.setAttribute("editVal", "editVal");
				request.setAttribute("list", list);
				request.setAttribute("status", lawFirmVo.getRecStatus());
				
			}
	       // lawFirmVo.setCountryId(request.getParameter("CountryId"));
			logger.info("In update law firm Detail ---status-----"+lawFirmVo.getRecStatus());
			logger.info("in update law firm Detail ------description-------"+lawFirmVo.getLawFirmDesc());
		}       
        return mapping.getInputForward();
      
		
	}
				
}