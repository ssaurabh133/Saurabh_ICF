/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.legal.actions;

import java.util.ArrayList;
import java.util.Properties;

import javax.naming.InitialContext;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.business.legalMasterBussiness.LegalMasterBusinessSessionBeanRemote;
import com.connect.CommonFunction;
import com.connect.LookUpInstanceFactory;
import com.legal.vo.NoticeTypeMasterVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

public class NoticeTypeMasterDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(NoticeTypeMasterDispatchAction.class.getName());
	
	public ActionForward openAddNoticeType(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception
			{
				logger.info("## In openAddNoticeType() : ");
				ServletContext context = getServlet().getServletContext();
				HttpSession session = request.getSession();
			
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				String strFlag=null;
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				
				request.setAttribute("save", "save");
			    return mapping.findForward("openAdd");	
			}
	
	
	public ActionForward saveNoticeTypeDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse resopnse) throws Exception{
			
			logger.info("## In saveNoticeTypeDetails() : ");
			ServletContext context = getServlet().getServletContext();
			//HttpSession session=request.getSession(false);
			HttpSession session = request.getSession();
			
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			String strFlag=null;
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
			String userId=null;
			String bDate=null;
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bDate=userobj.getBusinessdate();
			}
	
		DynaValidatorForm NoticeTypeMasterAddDyanavalidatiorForm= (DynaValidatorForm)form;
		NoticeTypeMasterVo vo = new NoticeTypeMasterVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, NoticeTypeMasterAddDyanavalidatiorForm);
		

		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		
		LegalMasterBusinessSessionBeanRemote bp = (LegalMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
	
		String sms=null;
	
		boolean status = bp.insertNoticeTypeMaster(vo);
		logger.info("## In saveNoticeTypeDetails() : status : ==>> "+status);
		if(status){
			sms="S";
			request.setAttribute("sms",sms);
			request.setAttribute("save", "save");
		}
		else{
			sms="E";
			request.setAttribute("sms",sms);
			request.setAttribute("save", "save");
		}
		
		return mapping.getInputForward();
	}
	
	
	public ActionForward openEditNoticeTypeMaster(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception { 
		
		    logger.info("## In openEditNoticeTypeMaster() :");
		
		    ServletContext context = getServlet().getServletContext();
		    NoticeTypeMasterVo vo=new NoticeTypeMasterVo(); 
			
			HttpSession session = request.getSession();
			
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			String strFlag=null;
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
			String noticeTypeCode = CommonFunction.checkNull(request.getParameter("noticeTypeCode"));
			
			logger.info("## In openEditNoticeTypeMaster(): noticeTypeCode : ==>> "+noticeTypeCode);
			
			vo.setNoticeTypeCode(noticeTypeCode);
			
			logger.info("## In openEditNoticeTypeMaster(): vo.getNoticeTypeCode() : ==>> "+vo.getNoticeTypeCode());
			
			LegalMasterBusinessSessionBeanRemote bp = (LegalMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
			
			ArrayList list = bp.editNoticeTypeData(vo);
			
			logger.info("## In openEditNoticeTypeMaster(): list : ==>>"+list);
			
			request.setAttribute("list", list);
		
			
			vo=(NoticeTypeMasterVo) list.get(0);
		
			request.setAttribute("status", vo.getRecStatus());
			request.setAttribute("editVal", "editVal");
		   return mapping.findForward("editNoticeType");	
		}
	
	
	public ActionForward updateNotice(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		logger.info("## In updateNotice() : ");
		
		ServletContext context = getServlet().getServletContext();
		
		HttpSession session = request.getSession();
	
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		String strFlag=null;
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		String userId=null;
		String bDate=null;
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
		}
		
		NoticeTypeMasterVo noticeTypeMastervo=new NoticeTypeMasterVo(); 
		DynaValidatorForm noticeTypeDynavalidationForm = (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(noticeTypeMastervo, noticeTypeDynavalidationForm);	
		
		
		noticeTypeMastervo.setMakerId(CommonFunction.checkNull(userId));
		noticeTypeMastervo.setMakerDate(CommonFunction.checkNull(bDate));
		
		LegalMasterBusinessSessionBeanRemote bp = (LegalMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
		
        boolean status=bp.updateNoticeTypeData(noticeTypeMastervo);
        
        logger.info("## In updateNotice() : status : ==>> "+status);
        
        String sms=null;
        if(status){
			sms="M";
			request.setAttribute("sms",sms);
			request.setAttribute("editVal", "editVal");
		}
		else{
			sms="E";
			request.setAttribute("sms",sms);
			ArrayList<NoticeTypeMasterVo> list =new ArrayList<NoticeTypeMasterVo>();
			list.add(noticeTypeMastervo);
			logger.info("In openEditCountry list"+ list.size());
			
			request.setAttribute("editVal", "editVal");
			request.setAttribute("list", list);
			request.setAttribute("status", noticeTypeMastervo.getRecStatus());
			
		}
	 return mapping.getInputForward();
      
		
	}
				
}