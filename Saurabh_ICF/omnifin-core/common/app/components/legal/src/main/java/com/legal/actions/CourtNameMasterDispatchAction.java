/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.legal.actions;

import java.util.ArrayList;
import java.util.Properties;

import javax.naming.InitialContext;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.business.legalMasterBussiness.LegalMasterBusinessSessionBeanRemote;
import com.connect.CommonFunction;
import com.connect.LookUpInstanceFactory;
import com.legal.vo.CourtNameMasterVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

public class CourtNameMasterDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(CourtNameMasterDispatchAction.class.getName());
	public ActionForward openAddCourtName(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception
			{
				logger.info(" in openAddCourtName()");
				ServletContext context = getServlet().getServletContext();
				HttpSession session = request.getSession();
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				String strFlag=null;
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				
				request.setAttribute("save", "save");
			    return mapping.findForward("openAdd");	
			}
	
	
	public ActionForward saveCourtNameDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse resopnse) throws Exception{
		
		logger.info(" in saveCourtNameDetails()");
			ServletContext context = getServlet().getServletContext();
			//HttpSession session=request.getSession(false);
			HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			String strFlag=null;
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
			String userId=null;
			String bDate=null;
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bDate=userobj.getBusinessdate();
			}
	
		DynaValidatorForm caseNameMasterAddDyanavalidatiorForm= (DynaValidatorForm)form;
		CourtNameMasterVo vo = new CourtNameMasterVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, caseNameMasterAddDyanavalidatiorForm);
		

		vo.setMakerId(CommonFunction.checkNull(userId));
		vo.setMakerDate(CommonFunction.checkNull(bDate));

		  LegalMasterBusinessSessionBeanRemote bp = (LegalMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
	
		String sms=null;
		
		logger.info("## In saveCourtNameDetails() : branch : ==>> " +vo.getLbxBranchId());
		logger.info("## In saveCourtNameDetails() : court name : ==>> " +vo.getCourtNameCode());
		logger.info("## In saveCourtNameDetails() : court name desc : ==>> " +vo.getCourtNameDesc());
		logger.info("## In saveCourtNameDetails() : court type : ==>> " +vo.getLbxCourtTypeCode());
		logger.info("## In saveCourtNameDetails() : recstatus : ==>> " +vo.getRecStatus());
		
	
		boolean status = bp.insertCourtNameMaster(vo);
		logger.info("Inside Court Name Action.....displaying status...."+status);
		if(status){
			sms="S";
			request.setAttribute("sms",sms);
			request.setAttribute("save", "save");
		}
		else{
			sms="E";
			request.setAttribute("sms",sms);
			request.setAttribute("save", "save");
		}
		logger.info("status"+status);
		return mapping.getInputForward();
	}
	
	
	public ActionForward openEditCourtNameMaster(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception { 
		
		logger.info("In openEditCourtNameMaster");
		ServletContext context = getServlet().getServletContext();
						CourtNameMasterVo vo=new CourtNameMasterVo(); 
						
						
						HttpSession session = request.getSession();
						
						UserObject userobj=(UserObject)session.getAttribute("userobject");
						Object sessionId = session.getAttribute("sessionID");
						//for check User session start
						String strFlag="";
						if(sessionId!=null)
						{
							strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
						}
						
						logger.info("strFlag .............. "+strFlag);
						if(!strFlag.equalsIgnoreCase(""))
						{
							if(strFlag.equalsIgnoreCase("sameUserSession"))
							{
								context.removeAttribute("msg");
								context.removeAttribute("msg1");
							}
							else if(strFlag.equalsIgnoreCase("BODCheck"))
							{
								context.setAttribute("msg", "B");
							}
							return mapping.findForward("logout");
						}
						
						vo.setCourtNameCode(request.getParameter("courtNameCode"));
						logger.info("In openEditCourtNameMaster---status---- by getpara-"+request.getParameter("courtNameCode"));  
						logger.info("In openEditCourtNameMaster---status---- by getpara by vo-"+vo.getCourtNameCode());
						
						  LegalMasterBusinessSessionBeanRemote bp = (LegalMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
						
						ArrayList list = bp.editCourtNameData(vo);
						logger.info("In openEditCourtNameMaster CourtNameMasterVo list"+list.size());
						request.setAttribute("list", list);
					
						
						vo=(CourtNameMasterVo) list.get(0);
						CourtNameMasterVo docVo=new CourtNameMasterVo();
						docVo=(CourtNameMasterVo) list.get(0);
						logger.info("In openEditCourtNameMaster---status---- by getpara by vo-"+docVo.getRecStatus());
						
					
						request.setAttribute("status", vo.getRecStatus());
						request.setAttribute("editVal", "editVal");
					   return mapping.findForward("editCourtName");	
					}
			
	public ActionForward updateCourt(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		logger.info("In updateCourtNameMaster.......");
		ServletContext context = getServlet().getServletContext();
		
		HttpSession session = request.getSession();
		
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		String strFlag=null;
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		String userId=null;
		String bDate=null;
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
		}
		
		CourtNameMasterVo courtNameMastervo=new CourtNameMasterVo(); 
		DynaValidatorForm CountryMasterAddDyanavalidatiorForm= (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(courtNameMastervo, CountryMasterAddDyanavalidatiorForm);	

		logger.info("In updateCourtTypeDetails---------");  
		courtNameMastervo.setMakerId(CommonFunction.checkNull(userId));
		courtNameMastervo.setMakerDate(CommonFunction.checkNull(bDate));
		
		
		  LegalMasterBusinessSessionBeanRemote bp = (LegalMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
        
        boolean status=bp.updateCourtNameData(courtNameMastervo);
        
        logger.info("## In updateCourt() : update status : ==>> "+status);
        
        
        String sms=null;
        if(status){
			sms="M";
			request.setAttribute("sms",sms);
			request.setAttribute("editVal", "editVal");
		}
		else{
			sms="E";
			request.setAttribute("sms",sms);
			ArrayList<CourtNameMasterVo> list =new ArrayList<CourtNameMasterVo>();
			list.add(courtNameMastervo);
			logger.info("In openEditCourtName list"+ list.size());
			
			request.setAttribute("editVal", "editVal");
			request.setAttribute("list", list);
			request.setAttribute("status", courtNameMastervo.getRecStatus());
			
		}
       // countryMastervo.setCountryId(request.getParameter("CountryId"));
		logger.info("In updateCountrytDetails---status-----"+courtNameMastervo.getRecStatus());
		logger.info("in updateCountryDetails ------description-------"+courtNameMastervo.getCourtNameDesc());
		        
        return mapping.getInputForward();
      
		
	}
	
}