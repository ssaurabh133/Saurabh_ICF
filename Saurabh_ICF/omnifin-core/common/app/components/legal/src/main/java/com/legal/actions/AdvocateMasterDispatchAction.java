/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.legal.actions;

import java.util.ArrayList;
import java.util.Iterator;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.business.legalMasterBussiness.LegalMasterBusinessSessionBeanRemote;
import com.connect.CommonFunction;
import com.connect.LookUpInstanceFactory;
import com.legal.vo.AdvocateMasterVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

public class AdvocateMasterDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(AdvocateMasterDispatchAction.class.getName());
	public ActionForward openAddAdvocate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception
			{
				logger.info(" in openAddAdvocate()");
				ServletContext context = getServlet().getServletContext();
				HttpSession session = request.getSession();
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				String strFlag=null;
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				
				request.setAttribute("save", "save");
			    return mapping.findForward("openAdd");	
			}
	
	
	public ActionForward saveAdvocateDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		logger.info("In saveAdvocateDetails().......");
		ServletContext context = getServlet().getServletContext();
		
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		String strFlag=null;
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		String userId=null;
		String bDate=null;
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
		}
		
		DynaValidatorForm commonDyanaValidatorForm= (DynaValidatorForm)form;
		AdvocateMasterVo vo = new AdvocateMasterVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, commonDyanaValidatorForm);
		

		vo.setMakerId(CommonFunction.checkNull(userId));
		vo.setMakerDate(CommonFunction.checkNull(bDate));
		
		  LegalMasterBusinessSessionBeanRemote bp = (LegalMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
        
        
String sms=null;
		
		String branchs=CommonFunction.checkNull(request.getParameter("lbxBranchIds"));
		
		logger.info("branchs........"+branchs);
		String[] branchName = branchs.split("\\|");
		 
		for(int i=0;i<branchName.length;i++){
	    logger.info(branchName[i]);
		 }
		
		String caseType=CommonFunction.checkNull(request.getParameter("lbxCaseTypeCode"));
		logger.info("caseType........"+caseType);
		String[] caseTypeCode = caseType.split("\\|");
		for(int i=0;i<caseTypeCode.length;i++){
		    logger.info(caseTypeCode[i]);
			 }
		boolean st = bp.checkExistingPANAdvocate(vo,"Y"); 
		logger.info("Existing PAN Status in insert Advocate Master : " + st);
		if(st)
		{
			request.setAttribute("sms","PAN");
			ArrayList<AdvocateMasterVo> list =new ArrayList<AdvocateMasterVo>();
			list.add(vo);
			request.setAttribute("save", "save");
			request.setAttribute("list", list);
			request.setAttribute("status", vo.getRecStatus());
		}
		else
		{
			boolean status = bp.insertAdvocateMaster(vo,branchName,caseTypeCode);
			logger.info("Inside AdvocateMasterDispatchAction.....displaying status...."+status);
			if(status){
				sms="S";
				request.setAttribute("sms",sms);
				request.setAttribute("save", "save");
			}
			else{
				sms="E";
				request.setAttribute("sms",sms);
				request.setAttribute("save", "save");
			}
			logger.info("status"+status);
			logger.info("sap code"+vo.getSapCode());
		}
		return mapping.getInputForward();
      
		
	}
	
	
	public ActionForward openEditAdvocateMaster(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception { 
		
		logger.info("In openEditAdvocateMaster");
		ServletContext context = getServlet().getServletContext();
						AdvocateMasterVo vo=new AdvocateMasterVo(); 
						
						
						HttpSession session = request.getSession();
						UserObject userobj=(UserObject)session.getAttribute("userobject");
						Object sessionId = session.getAttribute("sessionID");
						//for check User session start
						String strFlag=null;
						if(sessionId!=null)
						{
							strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
						}
						
						logger.info("strFlag .............. "+strFlag);
						if(!strFlag.equalsIgnoreCase(""))
						{
							if(strFlag.equalsIgnoreCase("sameUserSession"))
							{
								context.removeAttribute("msg");
								context.removeAttribute("msg1");
							}
							else if(strFlag.equalsIgnoreCase("BODCheck"))
							{
								context.setAttribute("msg", "B");
							}
							return mapping.findForward("logout");
						}
						
						String lbxUserId = request.getParameter("advocateCode");
						
						
						vo.setLbxUserId(lbxUserId);
						
			  LegalMasterBusinessSessionBeanRemote bp = (LegalMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
						
						ArrayList list = bp.editAdvocateData(vo);
						logger.info("In openEditAdvocateMaster AdvocateMasterVo list"+list.size());
						request.setAttribute("list", list);
						
						
						ArrayList<AdvocateMasterVo> branchList = bp.getBranchesForAdvocateEdit(lbxUserId);
						
						Iterator<AdvocateMasterVo> it= branchList.iterator();
						
						String branchIds = null;
						
						while(it.hasNext())
						{
							AdvocateMasterVo  vo1 = (AdvocateMasterVo) it.next();
							logger.info("vo1.getBranchId()---"+vo1.getBranchId());
							branchIds=CommonFunction.checkNull(branchIds)+vo1.getBranchId()+"|";
							
							logger.info("branchDesc---"+branchIds);
							
						}
						if(!branchIds.equalsIgnoreCase(""))
							branchIds = branchIds.substring(0,branchIds.length()-1);
						
						
						request.setAttribute("branchIds", branchIds);
						request.setAttribute("branchList", branchList);
						
						
                          ArrayList<AdvocateMasterVo> caseTypeList = bp.getcaseTypeForAdvocateEdit(lbxUserId);
						
						Iterator<AdvocateMasterVo> it1= caseTypeList.iterator();
						
						String caseTypeCode = null;
						
						while(it1.hasNext())
						{
							AdvocateMasterVo  vo1 = (AdvocateMasterVo) it1.next();
							logger.info("vo1.getCaseTypeCode()---"+vo1.getCaseTypeCode());
							caseTypeCode=CommonFunction.checkNull(caseTypeCode)+vo1.getCaseTypeCode()+"|";
							
							logger.info("caseTypeDesc---"+caseTypeCode);
							
						}
						if(!caseTypeCode.equalsIgnoreCase(""))
							caseTypeCode = caseTypeCode.substring(0,caseTypeCode.length()-1);
						logger.info("branchIds--2--"+caseTypeCode);
						
						request.setAttribute("caseTypeCode", caseTypeCode);
						request.setAttribute("caseTypeList", caseTypeList);
					
						
						vo=(AdvocateMasterVo) list.get(0);
						AdvocateMasterVo docVo=new AdvocateMasterVo();
						docVo=(AdvocateMasterVo) list.get(0);
						logger.info("In openEditAdvocateMaster---status---- by getpara by vo-"+docVo.getRecStatus());
						
					
						request.setAttribute("status", vo.getRecStatus());
						request.setAttribute("regularRetainerFlag", vo.getRegularRetainerFlag());
						request.setAttribute("editVal", "editVal");
					   return mapping.findForward("editAdvocate");	
		}
	
	
	public ActionForward updateAdvocate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		logger.info("In updateAdvocate().......");
		ServletContext context = getServlet().getServletContext();
		
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		String strFlag=null;
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		String userId=null;
		String bDate=null;
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
		}
		
		AdvocateMasterVo vo=new AdvocateMasterVo(); 
		DynaValidatorForm lawFirmDyanaValidatorForm= (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, lawFirmDyanaValidatorForm);	

		logger.info("In updateAdvocate---------");  
		
		vo.setMakerId(CommonFunction.checkNull(userId));
		vo.setMakerDate(CommonFunction.checkNull(bDate));
		
		  LegalMasterBusinessSessionBeanRemote bp = (LegalMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
        
        
        String branchs=CommonFunction.checkNull(request.getParameter("lbxBranchIds"));
		
		logger.info("branchs........"+branchs);
		String[] branchName = branchs.split("\\|");
		 
		for(int i=0;i<branchName.length;i++){
	    logger.info(branchName[i]);
		 }
		 String caseType=CommonFunction.checkNull(request.getParameter("lbxCaseTypeCode"));
			
			logger.info("caseType........222"+caseType);
			String[] caseTypeCode = caseType.split("\\|");
			 
			for(int i=0;i<caseTypeCode.length;i++){
		    logger.info(caseTypeCode[i]);
			 }
			boolean st = bp.checkExistingPANAdvocate(vo,"N"); 
			logger.info("Existing PAN Status in update Advocate Data : " + st);
			if(st)
			{
				request.setAttribute("sms","PAN");
				ArrayList<AdvocateMasterVo> list =new ArrayList<AdvocateMasterVo>();
				list.add(vo);
				request.setAttribute("editVal", "editVal");
				request.setAttribute("list", list);
				request.setAttribute("status", vo.getRecStatus());
			}
			else
			{
		        boolean status=bp.updateAdvocateData(vo,branchName,caseTypeCode);
		        
		        String sms=null;
		        if(status){
					sms="M";
					request.setAttribute("sms",sms);
					request.setAttribute("editVal", "editVal");
				}
				else{
					sms="E";
					request.setAttribute("sms",sms);
					ArrayList<AdvocateMasterVo> list =new ArrayList<AdvocateMasterVo>();
					list.add(vo);
					logger.info("In updateAdvocate detail list"+ list.size());
					
					request.setAttribute("editVal", "editVal");
					request.setAttribute("list", list);
					request.setAttribute("status", vo.getRecStatus());
					
				}
		       // lawFirmVo.setCountryId(request.getParameter("CountryId"));
				logger.info("In updateAdvocate ---status-----"+vo.getRecStatus());
			}
		        
        return mapping.getInputForward();
      
		
	}
				
}