/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.legal.actions;

import java.util.ArrayList;
import java.util.Properties;

import javax.naming.InitialContext;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.business.legalTransactionBussiness.LegalTransactionBusinessSessionBeanRemote;
import com.connect.CommonFunction;
import com.connect.LookUpInstanceFactory;
import com.legal.vo.LegalCaseInitiationMakerVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

public class AssignRejectCaseDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(NoticeCheckerDispatchAction.class.getName());
	
	
	public ActionForward searchAssignRejectCaseData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession session=request.getSession(false);
		ServletContext context = getServlet().getServletContext();
		logger.info(" ## In searchAssignRejectCaseData() : .........");
		
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		LegalCaseInitiationMakerVo vo = new LegalCaseInitiationMakerVo(); //change
        
		DynaValidatorForm dyanForm= (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, dyanForm);
	

		LegalTransactionBusinessSessionBeanRemote bp = (LegalTransactionBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalTransactionBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
		
        
        ArrayList list=new ArrayList();
		
		logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
		
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));
		
		vo.setCurrentPageLink(currentPageLink);
		//vo1.setCurrentPageLink(currentPageLink);
		
		//change from here
		list= bp.searchAssignRejectCaseData(vo);

	    logger.info("In AssignRejectCaseDispatchAction....list"+list.size());
		
	    request.setAttribute("list", list);
		
		logger.info("list.isEmpty(): "+list.isEmpty());
		request.setAttribute("list",list);
		if(CommonFunction.checkNull(request.getAttribute("flag")).toString().equalsIgnoreCase("yes")){
			request.setAttribute("sms","No");
		}
		
		//return mapping.getInputForward();
	    return mapping.findForward("success");


	}
	
	
	public ActionForward saveAssignRejectCaseDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse resopnse) throws Exception{
			ServletContext context = getServlet().getServletContext();
			//HttpSession session=request.getSession(false);
			HttpSession session = request.getSession();
			
			
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			String strFlag="";
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
			String userId="";
			String bDate="";
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bDate=userobj.getBusinessdate();
			}
	
		DynaValidatorForm dynaForm= (DynaValidatorForm)form;
		LegalCaseInitiationMakerVo vo = new LegalCaseInitiationMakerVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, dynaForm);
		

		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		
		vo.setLegalId(session.getAttribute("assignRejectLegalId").toString());
		
		logger.info("assignLegalId in action:------"+vo.getLegalId());
		
		LegalTransactionBusinessSessionBeanRemote bp = (LegalTransactionBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalTransactionBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
        
        
        logger.info("BP : " +bp );
	
		String sms="";
		
		logger.info("before calling db method");
		
		boolean status = bp.insertAssignRejectCase(vo);
		
		logger.info("before calling db method");
		
		logger.info("Inside Legal Master Action.....displaying status...."+status);
		if(status){
			sms="S";
			request.setAttribute("sms",sms);
			request.setAttribute("decision",CommonFunction.checkNull(vo.getReject()));
			request.setAttribute("save", "save");
		}
		else{
			sms="E";
			request.setAttribute("sms",sms);
			request.setAttribute("save", "save");
		}
		
		
		
		logger.info("status"+status);
		return mapping.getInputForward();
		//return mapping.findForward("success");
	}
	
	
	public ActionForward openEditAssignRejectCase(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception { 
		ServletContext context = getServlet().getServletContext();
						LegalCaseInitiationMakerVo vo=new LegalCaseInitiationMakerVo(); 
						logger.info("In openEditAssignRejectCase");
						
						HttpSession session = request.getSession();
						
						UserObject userobj=(UserObject)session.getAttribute("userobject");
						Object sessionId = session.getAttribute("sessionID");
						//for check User session start
						String strFlag="";
						if(sessionId!=null)
						{
							strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
						}
						
						logger.info("strFlag .............. "+strFlag);
						if(!strFlag.equalsIgnoreCase(""))
						{
							if(strFlag.equalsIgnoreCase("sameUserSession"))
							{
								context.removeAttribute("msg");
								context.removeAttribute("msg1");
							}
							else if(strFlag.equalsIgnoreCase("BODCheck"))
							{
								context.setAttribute("msg", "B");
							}
							return mapping.findForward("logout");
						}
						
						vo.setLegalId(request.getParameter("legalId"));
						logger.info("In openEditAssignRejectCase---status---- by getpara-"+request.getParameter("legalId"));  
						logger.info("In openEditAssignRejectCase---status---- by getpara by vo-"+vo.getLoanNo());
						
						LegalTransactionBusinessSessionBeanRemote bp = (LegalTransactionBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalTransactionBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
						
						ArrayList<LegalCaseInitiationMakerVo> list = bp.openEditAssignRejectCaseData(vo);
						logger.info("In openEditAssignRejectCase LegalCaseInitiationMakerVo list"+list.size());
						
					
						
						
					
						//session.setAttribute("status", vo.getRecStatus());
						//session.setAttribute("editVal", "editVal");
						session.setAttribute("assignRejectLegalId", vo.getLegalId());
						session.setAttribute("assignRejectList", list);
					   return mapping.findForward("openEditAssignRejectCase");	
		}
	
	
	public ActionForward assignRejectCaseScreen(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	throws Exception {
		
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info(" in assignRejectCaseScreen method of ReceiptAuthorProcessAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		String sessionId = session.getAttribute("sessionID").toString();	
		
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		ServletContext context = getServlet().getServletContext();
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

//		ArrayList<LegalNoticeInitiationVo> approvalList = null;
//		if(session.getAttribute("datatoapproveList")!=null)
//		{
//			approvalList= (ArrayList<LegalNoticeInitiationVo>)session.getAttribute("datatoapproveList");
//		}
//		if(approvalList.size()>0)
//		{
//			request.setAttribute("loanRecStatus", CommonFunction.checkNull(approvalList.get(0).getRecStatus()).trim());
//		}
		
		
		return mapping.findForward("authorScreen");
	}
	
	
	
	
}