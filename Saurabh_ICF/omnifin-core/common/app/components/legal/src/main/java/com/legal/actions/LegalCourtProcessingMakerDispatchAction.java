/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.legal.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.business.legalTransactionBussiness.LegalTransactionBusinessSessionBeanRemote;
import com.connect.CommonFunction;
import com.connect.LookUpInstanceFactory;
import com.legal.vo.LegalCourtProcessingVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

public class LegalCourtProcessingMakerDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(LegalCourtProcessingMakerDispatchAction.class.getName());
	
	
	public ActionForward searchLegalCourtProcessingMaker(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession session=request.getSession(false);
		ServletContext context = getServlet().getServletContext();
		logger.info(" ## In execute() : .........");
		
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		String userId="";
		String bDate="";
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
		}
		
		LegalCourtProcessingVo vo = new LegalCourtProcessingVo(); //change
        
		DynaValidatorForm dyanForm= (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, dyanForm);
		
		
		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		

		LegalTransactionBusinessSessionBeanRemote bp = (LegalTransactionBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalTransactionBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
        
        ArrayList list=new ArrayList();
		
		logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
		
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));
		
		vo.setCurrentPageLink(currentPageLink);
		//vo1.setCurrentPageLink(currentPageLink);
		
		//change from here
		list= bp.searchLegalCourtProcessingMaker(vo);

	    logger.info("In CaseTypeMasterBehindAction....list"+list.size());
		
	    request.setAttribute("list", list);
		
		logger.info("list.isEmpty(): "+list.isEmpty());
		request.setAttribute("list",list);
		if(CommonFunction.checkNull(request.getAttribute("flag")).toString().equalsIgnoreCase("yes")){
			request.setAttribute("sms","No");
		}
	    return mapping.findForward("search");


	}
	
	public ActionForward openLegalCourtProcessingMaker(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception { 
		ServletContext context = getServlet().getServletContext();
						LegalCourtProcessingVo vo=new LegalCourtProcessingVo(); 
						logger.info("In openEditCaseTypeMaster");
						
						HttpSession session = request.getSession();
						boolean flag=false;
						UserObject userobj=(UserObject)session.getAttribute("userobject");
						Object sessionId = session.getAttribute("sessionID");
						//for check User session start
						String strFlag="";
						if(sessionId!=null)
						{
							strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
						}
						
						logger.info("strFlag .............. "+strFlag);
						if(!strFlag.equalsIgnoreCase(""))
						{
							if(strFlag.equalsIgnoreCase("sameUserSession"))
							{
								context.removeAttribute("msg");
								context.removeAttribute("msg1");
							}
							else if(strFlag.equalsIgnoreCase("BODCheck"))
							{
								context.setAttribute("msg", "B");
							}
							return mapping.findForward("logout");
						}
						
						vo.setLegalId(request.getParameter("legalId"));
						vo.setLbxCaseTypeCode(request.getParameter("caseType"));
						logger.info("In openEditCaseTypeMaster---status---- by getpara-"+request.getParameter("legalId"));  
						logger.info("In openEditCaseTypeMaster---status---- by getpara by vo-"+vo.getLegalId());
						
						LegalTransactionBusinessSessionBeanRemote bp = (LegalTransactionBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalTransactionBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
						
						ArrayList list = bp.openEditLegalCourtProcessingMaker(vo);
						logger.info("In openEditCaseTypeMaster LegalCourtProcessingVo list"+list.size());
						request.setAttribute("list", list);
						
						ArrayList stageList = bp.getStageData(vo);
						logger.info("In openEditCaseTypeMaster LegalCourtProcessingVo list"+list.size());
						request.setAttribute("stageList", stageList);
					
						
						vo=(LegalCourtProcessingVo) list.get(0);
						LegalCourtProcessingVo docVo=new LegalCourtProcessingVo();
			
						
					
						request.setAttribute("status", vo.getRecStatus());
						request.setAttribute("editVal", "editVal");
					   return mapping.findForward("edit");	
		}
	
	public ActionForward saveCourtProcessingMakerDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse resopnse) throws Exception{
			ServletContext context = getServlet().getServletContext();
			//HttpSession session=request.getSession(false);
			HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			String strFlag="";
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
			String userId="";
			String bDate="";
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bDate=userobj.getBusinessdate();
			}
	
		DynaValidatorForm dynaForm= (DynaValidatorForm)form;
		LegalCourtProcessingVo vo = new LegalCourtProcessingVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, dynaForm);
		

		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		
		LegalTransactionBusinessSessionBeanRemote bp = (LegalTransactionBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalTransactionBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
	
		String sms="";
		
		String stages  = request.getParameter("stages");
        String[] stageList= stages.split("\\|");
      
     
        String caseNo  = request.getParameter("caseNo"); 			
        String[] caseNoList= caseNo.split("\\|");      
    
        
        String remarks  = request.getParameter("remarks");                    			
        String[] remarkList= remarks.split("\\|"); 
        
        String hearingDate  = request.getParameter("hearingDate");                    			
        String[] hearingDateList= hearingDate.split("\\|"); 
        
        String poa  = request.getParameter("poa");                    			
        String[] poaList= poa.split("\\|"); 
        
        String approvalFlag  = request.getParameter("approvalFlag");                    			
        String[] approvalFlagList= approvalFlag.split("\\|"); 
        
        String makerDate  = request.getParameter("makerDate");                    			
        String[] makerDateList= makerDate.split("\\|"); 
        
        logger.info("## In saveCourtProcessingMakerDetails () : stageList.length : ==> "+stageList.length);
        logger.info("## In saveCourtProcessingMakerDetails () : caseNoList.length : ==> "+caseNoList.length);
        logger.info("## In saveCourtProcessingMakerDetails () : remarkList.length : ==> "+remarkList.length);
        logger.info("## In saveCourtProcessingMakerDetails () : hearingDateList.length : ==> "+hearingDateList.length);
        logger.info("## In saveCourtProcessingMakerDetails () : poaList.length : ==> "+poaList.length);
        logger.info("## In saveCourtProcessingMakerDetails () : approvalFlagList.length : ==> "+approvalFlagList.length);
        logger.info("## In saveCourtProcessingMakerDetails () : makerDateList.length : ==> "+makerDateList.length);
        
        String makerAuthorFlag  = request.getParameter("makerAuthorFlag"); 
        String saveDeleteFlag  = request.getParameter("saveDeleteFlag"); 
        
        logger.info("## In saveCourtProcessingMakerDetails () : makerAuthorFlag : ==> "+makerAuthorFlag);
        logger.info("## In saveCourtProcessingMakerDetails () :saveDeleteFlag : ==> "+saveDeleteFlag);
        
        request.setAttribute("makerAuthorFlag", makerAuthorFlag);
        request.setAttribute("saveDeleteFlag", saveDeleteFlag);
	
		boolean status = bp.insertCourtProcessingMakerDetails(vo,stageList,caseNoList,remarkList,hearingDateList,poaList,approvalFlagList,makerDateList);
		logger.info("Inside Country Master Action.....displaying status...."+status);
	/*if(status){
			sms="S";
			request.setAttribute("sms",sms);
			request.setAttribute("save", "save");
		}
		else{
			sms="E";
			request.setAttribute("sms",sms);
			request.setAttribute("save", "save");
		}
		logger.info("status"+status);
		return mapping.getInputForward(); */
		
		if(status){
			
			request.setAttribute("legalId",CommonFunction.checkNull(vo.getLegalId()));	
			request.setAttribute("caseType",CommonFunction.checkNull(vo.getLbxCaseTypeCode()));
			
			logger.info("## In saveCourtProcessingMakerDetails() : legalId : ==>>"+request.getAttribute("legalId"));
			logger.info("## In saveCourtProcessingMakerDetails() : caseType : ==>>"+request.getAttribute("caseType"));
			
			if(CommonFunction.checkNull(vo.getSaveForwardFlag()).equalsIgnoreCase("S"))
			{
				request.setAttribute("sms","S");
			}
			else if(CommonFunction.checkNull(vo.getSaveForwardFlag()).equalsIgnoreCase("F"))
			{
				request.setAttribute("sms","F");
			}
			
			//request.setAttribute("save", "save");
		}
		else{
			
			request.setAttribute("sms","E");
			//request.setAttribute("save", "save");
		}
		logger.info("## In saveLegalCaseFileMaker() : sms : ==>>"+request.getAttribute("sms"));
		
//		if(makerAuthorFlag.equalsIgnoreCase("A"))
//			return mapping.findForward("saved");
//		else
			return mapping.getInputForward();
	}
	
	public ActionForward openAddStageDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception {
			
			logger.info(" in openAddStageDetail()");
			ServletContext context = getServlet().getServletContext();
			HttpSession session = request.getSession();
			boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			String strFlag="";
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
			logger.info(CommonFunction.checkNull(request.getParameter("legalId")));
			logger.info(CommonFunction.checkNull(request.getParameter("loanId")));
			logger.info(CommonFunction.checkNull(request.getParameter("stageDesc")));
			logger.info(CommonFunction.checkNull(request.getParameter("stageCode")));
			logger.info(CommonFunction.checkNull(request.getParameter("caseNO")));
			logger.info(CommonFunction.checkNull(request.getParameter("advocateDesc")));
			logger.info(CommonFunction.checkNull(request.getParameter("advocate")));
			logger.info(CommonFunction.checkNull(request.getParameter("preHearingDate")));
			logger.info(CommonFunction.checkNull(request.getParameter("lbxCaseTypeCode")));
			
			
			request.setAttribute("legalId", CommonFunction.checkNull(request.getParameter("legalId")));
			request.setAttribute("loanId", CommonFunction.checkNull(request.getParameter("loanId")));
			request.setAttribute("stageDesc", CommonFunction.checkNull(request.getParameter("stageDesc")));
			request.setAttribute("stageCode", CommonFunction.checkNull(request.getParameter("stageCode")));
			request.setAttribute("caseNO", CommonFunction.checkNull(request.getParameter("caseNO")));
			request.setAttribute("advocateDesc", CommonFunction.checkNull(request.getParameter("advocateDesc")));
			request.setAttribute("advocate", CommonFunction.checkNull(request.getParameter("advocate")));
			request.setAttribute("preHearingDate", CommonFunction.checkNull(request.getParameter("preHearingDate")));
			request.setAttribute("lbxCaseTypeCode", CommonFunction.checkNull(request.getParameter("lbxCaseTypeCode")));
			request.setAttribute("makerAuthorFlag", CommonFunction.checkNull(request.getParameter("makerAuthorFlag")));
			
			
		    return mapping.findForward("openAddStage");	
	}
	
	public ActionForward addRowofCourtProcessingMakerDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse resopnse) throws Exception{
			ServletContext context = getServlet().getServletContext();
			//HttpSession session=request.getSession(false);
			HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			String strFlag="";
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
			String userId="";
			String bDate="";
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bDate=userobj.getBusinessdate();
			}
	
		DynaValidatorForm dynaForm= (DynaValidatorForm)form;
		LegalCourtProcessingVo vo = new LegalCourtProcessingVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, dynaForm);
		

		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		vo.setMakerAuthorFlag(CommonFunction.checkNull(request.getParameter("makerAuthorFlag")));
		
		LegalTransactionBusinessSessionBeanRemote bp = (LegalTransactionBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalTransactionBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
        
        request.setAttribute("makerAuthorFlag", CommonFunction.checkNull(request.getParameter("makerAuthorFlag")));
	
		String sms="";
	
		boolean status = bp.addRowofCourtProcessingMaker(vo);
		logger.info("Inside Country Master Action.....displaying status...."+status);
		if(status){
			sms="S";
			request.setAttribute("sms",sms);
			request.setAttribute("caseType",vo.getLbxCaseTypeCode());
			request.setAttribute("legalId",vo.getLegalId());
		}
		else{
			sms="E";
			request.setAttribute("sms",sms);
		}
		logger.info("status"+status);
		return mapping.findForward("openAddStage");	
	}
	
	// Court Processing Author start
	
	public ActionForward searchLegalCourtProcessingAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession session=request.getSession(false);
		ServletContext context = getServlet().getServletContext();
		logger.info(" ## In execute() : .........");
		
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		LegalCourtProcessingVo vo = new LegalCourtProcessingVo(); //change
        
		DynaValidatorForm dyanForm= (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, dyanForm);
		
		String userId="";
		String bDate="";
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			bDate=userobj.getBusinessdate();
		}


		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
	

		LegalTransactionBusinessSessionBeanRemote bp = (LegalTransactionBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalTransactionBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
		
        ArrayList list=new ArrayList();
		
		logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
		
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));
		
		vo.setCurrentPageLink(currentPageLink);
		//vo1.setCurrentPageLink(currentPageLink);
		
		//change from here
		list= bp.searchLegalCourtProcessingAuthor(vo);

	    logger.info("In CaseTypeMasterBehindAction....list"+list.size());
		
	    request.setAttribute("list", list);
	
		
		logger.info("list.isEmpty(): "+list.isEmpty());
		request.setAttribute("list",list);
		if(CommonFunction.checkNull(request.getAttribute("flag")).toString().equalsIgnoreCase("yes")){
			request.setAttribute("sms","No");
		}
	    return mapping.findForward("search");


	}
	
	public ActionForward openLegalCourtProcessingAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception { 
		ServletContext context = getServlet().getServletContext();
						LegalCourtProcessingVo vo=new LegalCourtProcessingVo(); 
						logger.info("In openEditCaseTypeMaster");
						
						HttpSession session = request.getSession();
						boolean flag=false;
						UserObject userobj=(UserObject)session.getAttribute("userobject");
						Object sessionId = session.getAttribute("sessionID");
						//for check User session start
						String strFlag="";
						if(sessionId!=null)
						{
							strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
						}
						
						logger.info("strFlag .............. "+strFlag);
						if(!strFlag.equalsIgnoreCase(""))
						{
							if(strFlag.equalsIgnoreCase("sameUserSession"))
							{
								context.removeAttribute("msg");
								context.removeAttribute("msg1");
							}
							else if(strFlag.equalsIgnoreCase("BODCheck"))
							{
								context.setAttribute("msg", "B");
							}
							return mapping.findForward("logout");
						}
						
						String legalId = request.getParameter("legalId");
						
						session.setAttribute("courtProcessingAuthorLegalId", legalId);
						
						String caseType = request.getParameter("caseType");
						
						vo.setLegalId(legalId);
						vo.setLbxCaseTypeCode(caseType);
						
						session.setAttribute("courtProcessingAuthorCaseType", caseType);
						
						logger.info("## In openLegalCourtProcessingAuthor : request.getParameter(legalId) : ==>> "+request.getParameter("legalId"));  
						logger.info("## In openLegalCourtProcessingAuthor : vo.getLegalId() : ==>> "+vo.getLegalId());
						
						LegalTransactionBusinessSessionBeanRemote bp = (LegalTransactionBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalTransactionBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
						
						ArrayList list = bp.openEditLegalCourtProcessingMaker(vo);
						logger.info("In openLegalCourtProcessingAuthor LegalCourtProcessingVo list"+list.size());
						request.setAttribute("list", list);
						
						session.setAttribute("courtProcessingAuthorList", list);
						
						ArrayList stageList = bp.getStageData(vo);
						
						if(stageList != null){
						logger.info("In openLegalCourtProcessingAuthor LegalCourtProcessingVo list"+stageList.size());
						request.setAttribute("stageList", stageList);
						}
						
						session.setAttribute("courtProcessingAuthorStageList", stageList);
					
						
						vo=(LegalCourtProcessingVo) list.get(0);
						LegalCourtProcessingVo docVo=new LegalCourtProcessingVo();
			
						
					
						request.setAttribute("status", vo.getRecStatus());
						request.setAttribute("editVal", "editVal");
					   return mapping.findForward("detail");	
		}	
	
	public ActionForward saveCourtProcessingAuthorData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse resopnse) throws Exception{
			ServletContext context = getServlet().getServletContext();
			//HttpSession session=request.getSession(false);
			HttpSession session = request.getSession();
			boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			String strFlag="";
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
			String userId="";
			String bDate="";
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bDate=userobj.getBusinessdate();
			}
	
		DynaValidatorForm dynaForm= (DynaValidatorForm)form;
		LegalCourtProcessingVo vo = new LegalCourtProcessingVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, dynaForm);
		

		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		
		LegalTransactionBusinessSessionBeanRemote bp = (LegalTransactionBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalTransactionBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
	
		//String sms="";
		
		logger.info("## In saveCourtProcessingAuthorData() : vo.getLegalId() : ==>> "+vo.getLegalId());
		logger.info("## In saveCourtProcessingAuthorData() : vo.getSessionLegalId() : ==>> "+vo.getSessionLegalId());
		
		
		
		
			vo.setLegalId(session.getAttribute("courtProcessingAuthorLegalId").toString());
	
		
		boolean status = bp.saveCourtProcessingAuthorData(vo);
		logger.info("Inside Country Master Action.....displaying status...."+status);
		if(status){
			
			request.setAttribute("sms","SBA");
			
			if(vo.getDecision().equalsIgnoreCase("CPA"))
			{
				request.setAttribute("decision","Court Processing Data Approved Successfully");
			}
			else if(vo.getDecision().equalsIgnoreCase("CPM"))
			{
				request.setAttribute("decision","Court Processing Data SendBack Successfully");
			}
			else if(vo.getDecision().equalsIgnoreCase("X"))
			{
				request.setAttribute("decision","Case Rejected Successfully");
			}
			//request.setAttribute("save", "save");
		}
		else{
			
			request.setAttribute("sms","E");
			//request.setAttribute("save", "save");
		}
		logger.info("status"+status);
		return mapping.getInputForward();
	}
	
	public ActionForward makerScreen(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		ServletContext context = getServlet().getServletContext();
		LegalCourtProcessingVo vo=new LegalCourtProcessingVo(); 
		logger.info("## In makerScreen() : ");
		
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		String strFlag="";
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		String legalId = session.getAttribute("courtProcessingAuthorLegalId").toString();
		
		String caseType = session.getAttribute("courtProcessingAuthorCaseType").toString();
		
		vo.setLegalId(legalId);
		vo.setLbxCaseTypeCode(caseType);
		
		logger.info("## In makerScreen() : legalId : ==>> "+legalId);
		logger.info("## In makerScreen() : vo.getLegalId() : ==>> "+vo.getLegalId());
		logger.info("## In makerScreen() : caseType : ==>> "+caseType);
		logger.info("## In makerScreen() : vo.getLbxCaseTypeCode() : ==>> "+vo.getLbxCaseTypeCode());
		
		//session.removeAttribute("courtProcessingAuthorLegalId");
		//session.removeAttribute("courtProcessingAuthorCaseType");
		session.removeAttribute("courtProcessingAuthorList");
		session.removeAttribute("courtProcessingAuthorStageList");
		
		LegalTransactionBusinessSessionBeanRemote bp = (LegalTransactionBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalTransactionBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
		
		ArrayList list = bp.openEditLegalCourtProcessingMaker(vo);
		logger.info("In makerScreen LegalCourtProcessingVo list"+list.size());
		request.setAttribute("list", list);
		
		session.setAttribute("courtProcessingAuthorList", list);
		
		ArrayList stageList = bp.getStageData(vo);
		logger.info("In openEditCaseTypeMaster LegalCourtProcessingVo list"+list.size());
		request.setAttribute("stageList", stageList);
		
		session.setAttribute("courtProcessingAuthorStageList", stageList);
	
		
		vo=(LegalCourtProcessingVo) list.get(0);
		LegalCourtProcessingVo docVo=new LegalCourtProcessingVo();

		
	
		request.setAttribute("status", vo.getRecStatus());
		request.setAttribute("editVal", "editVal");
		
		
		return mapping.findForward("makerScreen");
	}
	
	//Court Processing maker for Author end
	
	public ActionForward authorScreen(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	throws Exception {
		
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info(" in authorScreen method of PaymentAuthorProcessAction  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");

		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		
		return mapping.findForward("authorScreen");
	}
	
	//Court Processing Author end
	
	//Reopen Closed Case start
	
	public ActionForward searchLegalReopenClosedCase(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		HttpSession session=request.getSession(false);
		ServletContext context = getServlet().getServletContext();
		logger.info(" ## In execute() : .........");
		
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		LegalCourtProcessingVo vo = new LegalCourtProcessingVo(); //change
        
		DynaValidatorForm dyanForm= (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, dyanForm);
	

		LegalTransactionBusinessSessionBeanRemote bp = (LegalTransactionBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalTransactionBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
        
        ArrayList list=new ArrayList();
		
		logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
		
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));
		
		vo.setCurrentPageLink(currentPageLink);
		//vo1.setCurrentPageLink(currentPageLink);
		
		//change from here
		list= bp.searchLegalReopenClosedCase(vo);

	    logger.info("In CaseTypeMasterBehindAction....list"+list.size());
		
	    request.setAttribute("list", list);
	
		
		logger.info("list.isEmpty(): "+list.isEmpty());
		request.setAttribute("list",list);
		if(CommonFunction.checkNull(request.getAttribute("flag")).toString().equalsIgnoreCase("yes")){
			request.setAttribute("sms","No");
		}
	    return mapping.findForward("search");


	}
	
	public ActionForward openEditReopenClosedCase(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception { 
		ServletContext context = getServlet().getServletContext();
						LegalCourtProcessingVo vo=new LegalCourtProcessingVo(); 
						logger.info("In openEditCaseTypeMaster");
						
						HttpSession session = request.getSession();
						boolean flag=false;
						UserObject userobj=(UserObject)session.getAttribute("userobject");
						Object sessionId = session.getAttribute("sessionID");
						//for check User session start
						String strFlag="";
						if(sessionId!=null)
						{
							strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
						}
						
						logger.info("strFlag .............. "+strFlag);
						if(!strFlag.equalsIgnoreCase(""))
						{
							if(strFlag.equalsIgnoreCase("sameUserSession"))
							{
								context.removeAttribute("msg");
								context.removeAttribute("msg1");
							}
							else if(strFlag.equalsIgnoreCase("BODCheck"))
							{
								context.setAttribute("msg", "B");
							}
							return mapping.findForward("logout");
						}
						
						String legalId = request.getParameter("legalId");
						
						session.setAttribute("reopenLegalId", legalId);
						
						vo.setLegalId(legalId);
						vo.setLbxCaseTypeCode(request.getParameter("caseType"));
						logger.info("In openEditCaseTypeMaster---status---- by getpara-"+request.getParameter("legalId"));  
						logger.info("In openEditCaseTypeMaster---status---- by getpara by vo-"+vo.getLegalId());
						
						LegalTransactionBusinessSessionBeanRemote bp = (LegalTransactionBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalTransactionBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
						
						ArrayList list = bp.openEditLegalCourtProcessingMaker(vo);
						logger.info("In openEditCaseTypeMaster LegalCourtProcessingVo list"+list.size());
						request.setAttribute("list", list);
						
						session.setAttribute("reopenList", list);
						
						ArrayList stageList = bp.getStageData(vo);
						logger.info("In openEditCaseTypeMaster LegalCourtProcessingVo list"+list.size());
						request.setAttribute("stageList", stageList);
						
						session.setAttribute("reopenStageList", stageList);
					
						
						vo=(LegalCourtProcessingVo) list.get(0);
						LegalCourtProcessingVo docVo=new LegalCourtProcessingVo();
			
						
					
						request.setAttribute("status", vo.getRecStatus());
						request.setAttribute("editVal", "editVal");
					   return mapping.findForward("detail");	
		}	
	
	public ActionForward saveReopenClosedCaseData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse resopnse) throws Exception{
			ServletContext context = getServlet().getServletContext();
			//HttpSession session=request.getSession(false);
			HttpSession session = request.getSession();
			boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			String strFlag="";
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
			String userId="";
			String bDate="";
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bDate=userobj.getBusinessdate();
			}
	
		DynaValidatorForm dynaForm= (DynaValidatorForm)form;
		LegalCourtProcessingVo vo = new LegalCourtProcessingVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, dynaForm);
		

		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		
		LegalTransactionBusinessSessionBeanRemote bp = (LegalTransactionBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalTransactionBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
	
		String sms="";
		
	
		
		
		
		
			vo.setLegalId(session.getAttribute("reopenLegalId").toString());
	
		
		boolean status = bp.saveLegalReopenClosedCaseData(vo);
		logger.info("Inside Country Master Action.....displaying status...."+status);
		if(status){
			
			request.setAttribute("sms","SBA");
			
		}
		else{
			
			request.setAttribute("sms","E");
			//request.setAttribute("save", "save");
		}
		logger.info("status"+status);
		return mapping.getInputForward();
	}
	
	public ActionForward authorScreenForReopenClosedCase(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	throws Exception {
		
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info(" in authorScreen method of PaymentAuthorProcessAction  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");

		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		
		return mapping.findForward("authorScreen");
	}
	
	
	//Reopen Closed Case end
}