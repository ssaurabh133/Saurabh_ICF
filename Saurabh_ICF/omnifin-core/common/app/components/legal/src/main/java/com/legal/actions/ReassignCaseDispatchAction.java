/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.legal.actions;

import java.util.ArrayList;
import java.util.Properties;

import javax.naming.InitialContext;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.business.legalTransactionBussiness.LegalTransactionBusinessSessionBeanRemote;
import com.connect.CommonFunction;
import com.connect.LookUpInstanceFactory;
import com.legal.vo.ReassignCaseVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

public class ReassignCaseDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(ReassignCaseDispatchAction.class.getName());
	
	
	public ActionForward editReassignCase(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception { 
		ServletContext context = getServlet().getServletContext();
		ReassignCaseVo vo=new ReassignCaseVo(); 
						logger.info("In editReassignCaseDispatchNotice");
						
						HttpSession session = request.getSession();
						
						UserObject userobj=(UserObject)session.getAttribute("userobject");
						Object sessionId = session.getAttribute("sessionID");
						//for check User session start
						String strFlag=null;
						if(sessionId!=null)
						{
							strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
						}
						
						logger.info("strFlag .............. "+strFlag);
						if(!strFlag.equalsIgnoreCase(""))
						{
							if(strFlag.equalsIgnoreCase("sameUserSession"))
							{
								context.removeAttribute("msg");
								context.removeAttribute("msg1");
							}
							else if(strFlag.equalsIgnoreCase("BODCheck"))
							{
								context.setAttribute("msg", "B");
							}
							return mapping.findForward("logout");
						}
						
						vo.setLegalId(request.getParameter("legalId"));
						
						LegalTransactionBusinessSessionBeanRemote bp = (LegalTransactionBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalTransactionBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
						
						ArrayList list = bp.editReassignCase(vo);
						logger.info("In editReassignCaseDispatchNotice ReassignCaseVo list"+list.size());
								
					
						session.setAttribute("reassignList", list);
						request.setAttribute("editVal", "editVal");
						session.setAttribute("reassignLegalId", vo.getLegalId());
						
					   return mapping.findForward("editReassignCase");	
		}
	
	
	public ActionForward saveReassignCase(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse resopnse) throws Exception{
			ServletContext context = getServlet().getServletContext();
			//HttpSession session=request.getSession(false);
			HttpSession session = request.getSession();
			
			logger.info("xxxxxxxxxxxxxxxx");
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			Object sessionId = session.getAttribute("sessionID");
			
			//for check User session start
			String strFlag=null;
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
			String userId=null;
			String bDate=null;
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bDate=userobj.getBusinessdate();
			}
	
		DynaValidatorForm dynaForm= (DynaValidatorForm)form;
		ReassignCaseVo vo = new ReassignCaseVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, dynaForm);
		

		vo.setMakerId(userId);
		vo.setMakerDate(bDate);

		
		LegalTransactionBusinessSessionBeanRemote bp = (LegalTransactionBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalTransactionBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
	
		String sms=null;
		
		vo.setLegalId(session.getAttribute("reassignLegalId").toString());
		
		boolean status = bp.saveReassignCase(vo);
		
		logger.info("Inside reassign case ....displaying status...."+status);
		if(status){
			sms="S";
			request.setAttribute("sms",sms);

		}
		else{
			sms="E";
			request.setAttribute("sms",sms);

		}

		return mapping.findForward("authorScreen");
	}
	
	public ActionForward OpenScreen(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	throws Exception {
		
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info(" in editReassignCase method of OpenScreen action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		String sessionId = session.getAttribute("sessionID").toString();	
		
		
		String strFlag=null;	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		ServletContext context = getServlet().getServletContext();
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}


		return mapping.findForward("authorScreen");
	}
}