/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.legal.actions;

import java.util.ArrayList;
import java.util.Properties;

import javax.naming.InitialContext;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.business.legalMasterBussiness.LegalMasterBusinessSessionBeanRemote;
import com.connect.CommonFunction;
import com.connect.LookUpInstanceFactory;
import com.legal.vo.StageTypeMasterVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

public class StageTypeMasterDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(StageTypeMasterDispatchAction.class.getName());
	private static final Object StageTypeMasterAddDyanavalidatiorForm = null;
	
	
	public ActionForward openAddStageType(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception
			{
				logger.info(" in openAddStageType()");
				ServletContext context = getServlet().getServletContext();
				HttpSession session = request.getSession();
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				String strFlag=null;
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				
				DynaValidatorForm StageTypeMasterAddDyanavalidatiorForm= (DynaValidatorForm)form;
				StageTypeMasterVo vo = new StageTypeMasterVo();
				org.apache.commons.beanutils.BeanUtils.copyProperties(vo, StageTypeMasterAddDyanavalidatiorForm);
				
				LegalMasterBusinessSessionBeanRemote bp = (LegalMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
		        
		        ArrayList productList = bp.getProduct(vo);
		        
		        request.setAttribute("productList", productList);
				request.setAttribute("save", "save");
			    return mapping.findForward("openAdd");	
			}
	
	
	public ActionForward saveStageTypeDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse resopnse) throws Exception{
			ServletContext context = getServlet().getServletContext();
			//HttpSession session=request.getSession(false);
			HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			String strFlag=null;
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
			String userId=null;
			String bDate=null;
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bDate=userobj.getBusinessdate();
			}
	
		DynaValidatorForm StageTypeMasterAddDyanavalidatiorForm= (DynaValidatorForm)form;
		StageTypeMasterVo vo = new StageTypeMasterVo();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, StageTypeMasterAddDyanavalidatiorForm);
		

		vo.setMakerId(userId);
		vo.setMakerDate(bDate);
		
		LegalMasterBusinessSessionBeanRemote bp = (LegalMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
		
        
        String sms=null;
		String productIds  = request.getParameter("productIds");
		logger.info("## In saveStageTypeDetails(): productIds :==>> "+productIds);
        String[] productIdList= productIds.split("\\|");
        
        if(CommonFunction.checkNull(productIds).equalsIgnoreCase(""))
        	logger.info("productIds is blank");
        
        if(productIdList!=null)
        logger.info("## In saveStageTypeDetails(): productIdList :==>> "+productIdList.length);
        
        
        String paymentStageFlags  = request.getParameter("paymentStageFlags"); 			
        String[] paymentStageFlagList= paymentStageFlags.split("\\|"); 
        
        if(paymentStageFlagList!=null)
        logger.info("## In saveStageTypeDetails(): paymentStageFlagList :==>> "+paymentStageFlagList.length);
        
        String repetitiveFlags  = request.getParameter("repetitiveFlags");                    			
        String[] repetitiveFlagList= repetitiveFlags.split("\\|"); 
        ArrayList list= new ArrayList();
        list.add(vo);
        ArrayList productList = bp.getProduct(vo);
		
		logger.info("In openEditStageTypeMaster StageTypeMasterVo list"+list.size());
		
		
	
        if(repetitiveFlagList!=null)
        logger.info("## In saveStageTypeDetails(): repetitiveFlagList :==>> "+repetitiveFlagList.length);
        
        boolean status = bp.insertStageTypeMaster(vo,productIdList,paymentStageFlagList,repetitiveFlagList,productIds);
		logger.info("Inside Legal Master Action.....displaying status...."+status);
		if(status){
			sms="S";
			request.setAttribute("sms",sms);
			request.setAttribute("save", "save");
		}
		else{
			sms="E";
			request.setAttribute("sms",sms);
			request.setAttribute("save", "save");
			request.setAttribute("list",list);
			request.setAttribute("productList", productList);
		}
		logger.info("status"+status);
		return mapping.getInputForward();
	}
	
	
	public ActionForward openEditStageTypeMaster(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)	throws Exception { 
		ServletContext context = getServlet().getServletContext();
						StageTypeMasterVo vo=new StageTypeMasterVo(); 
						logger.info("In openEditStageTypeMaster");
						
						HttpSession session = request.getSession();
						UserObject userobj=(UserObject)session.getAttribute("userobject");
						Object sessionId = session.getAttribute("sessionID");
						//for check User session start
						String strFlag=null;
						if(sessionId!=null)
						{
							strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
						}
						
						logger.info("strFlag .............. "+strFlag);
						if(!strFlag.equalsIgnoreCase(""))
						{
							if(strFlag.equalsIgnoreCase("sameUserSession"))
							{
								context.removeAttribute("msg");
								context.removeAttribute("msg1");
							}
							else if(strFlag.equalsIgnoreCase("BODCheck"))
							{
								context.setAttribute("msg", "B");
							}
							return mapping.findForward("logout");
						}
						
						vo.setStageCode(request.getParameter("stageCode"));
						logger.info("In openEditStageTypeMaster---status---- by getpara-"+request.getParameter("stageCode"));  
						logger.info("In openEditStageTypeMaster---status---- by getpara by vo-"+vo.getStageCode());
						
						LegalMasterBusinessSessionBeanRemote bp = (LegalMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
						
						ArrayList list = bp.editStageTypeData(vo);
						
						ArrayList productList = bp.getProductOnEdit(vo);
						
						logger.info("In openEditStageTypeMaster StageTypeMasterVo list"+list.size());
						request.setAttribute("list", list);
						request.setAttribute("productList", productList);
					
						
						vo=(StageTypeMasterVo) list.get(0);
						StageTypeMasterVo docVo=new StageTypeMasterVo();
						docVo=(StageTypeMasterVo) list.get(0);
						logger.info("In openEditStageTypeMaster---status---- by getpara by vo-"+docVo.getRecStatus());
						
					
						request.setAttribute("status", vo.getRecStatus());
						request.setAttribute("closureStage", vo.getClosureStage());
						request.setAttribute("editVal", "editVal");
					   return mapping.findForward("editStageType");	
					}
	
	
	public ActionForward updateStage(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		ServletContext context = getServlet().getServletContext();
		logger.info("In updateStage.......");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		String strFlag=null;
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		String userId=null;
		String bDate=null;
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
		}
		
		StageTypeMasterVo stageTypeMastervo=new StageTypeMasterVo(); 
		DynaValidatorForm stageTypeDynavalidationForm = (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(stageTypeMastervo, stageTypeDynavalidationForm);	

		logger.info("In updateCountryDetails---------");  
		
		stageTypeMastervo.setMakerId(CommonFunction.checkNull(userId));
		stageTypeMastervo.setMakerDate(CommonFunction.checkNull(bDate));
		
		LegalMasterBusinessSessionBeanRemote bp = (LegalMasterBusinessSessionBeanRemote) LookUpInstanceFactory.getLookUpInstance(LegalMasterBusinessSessionBeanRemote.REMOTE_IDENTITY, request);
        
        String productIds  = request.getParameter("productIds");
        String[] productIdList= productIds.split("\\|");
      
     
        String paymentStageFlags  = request.getParameter("paymentStageFlags"); 			
        String[] paymentStageFlagList= paymentStageFlags.split("\\|");      
    
        
        String repetitiveFlags  = request.getParameter("repetitiveFlags");                    			
        String[] repetitiveFlagList= repetitiveFlags.split("\\|"); 
		
        boolean status=bp.updateStageTypeData(stageTypeMastervo,productIdList,paymentStageFlagList,repetitiveFlagList,productIds);
        String sms="";
        if(status){
			sms="M";
			request.setAttribute("sms",sms);
			request.setAttribute("editVal", "editVal");
		}
		else{
			sms="E";
			request.setAttribute("sms",sms);
			ArrayList list= new ArrayList();
	        list.add(stageTypeMastervo);
	        ArrayList productList = bp.getProduct(stageTypeMastervo);
			request.setAttribute("editVal", "editVal");
			request.setAttribute("list", list);
			request.setAttribute("status", stageTypeMastervo.getRecStatus());
			request.setAttribute("productList", productList);
			
		}
       // countryMastervo.setCountryId(request.getParameter("CountryId"));
		logger.info("In updateCountrytDetails---status-----"+stageTypeMastervo.getRecStatus());
		logger.info("in updateCountryDetails ------description-------"+stageTypeMastervo.getStageTypeDesc());
		        
        return mapping.getInputForward();
      
		
	}
				
}