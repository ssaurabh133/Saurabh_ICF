/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.ResourceBundle;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.cm.dao.DisbursalInitiationDAO;
import com.cm.dao.LoanInitiationDAO;
import com.cm.vo.DisbursalMakerVO;
import com.cm.vo.InstallmentPlanForCMVO;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.connect.PrepStmtObject;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.OtherChargesPlanVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.tabDependencyCheck.RefreshFlagValueInsert;
import com.tabDependencyCheck.RefreshFlagVo;


public class DisbursalSearchBehindAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(DisbursalSearchBehindAction.class.getName());
	
	public ActionForward disbursalMaker(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		logger.info("In disbursalMaker..");
		
		HttpSession session =  request.getSession();
		//boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info(" in disbursalMaker method of DisbursalSearchBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag=null;	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		request.setAttribute("disbursalMaker","disbursalMaker");
		form.reset(mapping, request);
		strFlag=null;
		return mapping.findForward("disbursalMaker");
	}
	
	public ActionForward disbursalAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		logger.info("Inside DisbursalSearchBehindAction...........disbursalAuthor");
		
		HttpSession session =  request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info(" in disbursalAuthor method of DisbursalSearchBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		String sessionId = session.getAttribute("sessionID").toString();
		ServletContext context = getServlet().getServletContext();
		String strFlag=null;	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			
			return mapping.findForward("logout");
		}

		request.setAttribute("disbursalAuthor","disbursalAuthor");
		form.reset(mapping, request);
		strFlag=null;
		return mapping.findForward("disbursalAuthor");
	}
	
	public ActionForward openDisbursalSchedule(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		logger.info("Inside DisbursalSearchBehindAction...........openDisbursalSchedule");
		
		HttpSession session =  request.getSession();		
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info(" in openDisbursalSchedule method of DisbursalSearchBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag=null;	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String loanId= request.getParameter("lbxloannohid");
		DisbursalInitiationDAO service=(DisbursalInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(DisbursalInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+service.getClass()); 
		ArrayList<DisbursalMakerVO> disbursalScheduleList = service.getDisbursalSchedule(loanId);
		ArrayList<DisbursalMakerVO> disbursalDataList = service.getDisbursalData(loanId);
		request.setAttribute("disbursalScheduleList",disbursalScheduleList);
		request.setAttribute("disbursalDataList",disbursalDataList);
		session.setAttribute("fwdStatusFlag", "Y");
		form.reset(mapping, request);
		strFlag=null;
		service=null;
		loanId=null;
		return mapping.findForward("disbursalSchedule");
	}
	
	public ActionForward openOldInstallmentPlan(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
	
		logger.info("In openOldInstallmentPlan  ");
		
		HttpSession session = request.getSession();
		//boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in execute method of DeleteInstrumentAuthorBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag=null;	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		session.removeAttribute("pParentGroup");		
		String loanId= request.getParameter("lbxloannohid");
	
		LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 
		ArrayList installmentList=dao.getInstallType(loanId);
		
		if(installmentList!=null && installmentList.size()>0)
		{  
		   InstallmentPlanForCMVO vo=(InstallmentPlanForCMVO)installmentList.get(0);		   
		
			String loanAmount=CommonFunction.checkNull(vo.getLoanAmount());		  
			String rateType=CommonFunction.checkNull(vo.getRateType());		
			String installmentType=CommonFunction.checkNull(vo.getInstallmentType());
			String totalInstallment=CommonFunction.checkNull(vo.getTotalInstallment());
			vo=null;
			
        if(installmentType.equalsIgnoreCase("E")  || installmentType.equalsIgnoreCase("P")){
			request.setAttribute("viewMode", "viewMode");	
		}
		request.setAttribute("installmentList", installmentList);
		request.setAttribute("installmentType", installmentType);
        request.setAttribute("totalInstallment", totalInstallment);
        request.setAttribute("rateType", rateType);
        request.setAttribute("loanAmount", loanAmount);
		}	
		form.reset(mapping, request);
		dao=null;
		strFlag=null;
		return mapping.findForward("success");
				
}
	public ActionForward openNewInstallmentPlan(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
	
		logger.info("In openNewInstallmentPlan  ");
		
		HttpSession session = request.getSession();
		//boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in execute method of DeleteInstrumentAuthorBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag=null;	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
				
		session.removeAttribute("pParentGroup");	
		
		String loanId= request.getParameter("lbxloannohid");
		String disbursalId= request.getParameter("disbursalId");
		String stage= request.getParameter("stage");
		logger.info("In InstallmentPlanBehindAction loan id: " + loanId + stage);
		
		//To check record in cr_resch_installment_plan starts
		String checkInst=null;
		if(CommonFunction.checkNull(stage).equalsIgnoreCase("DIM"))
				checkInst="select INSTALLMENT_PLAN_ID from cr_resch_installment_plan where REC_STATUS='P' and loan_id='"+loanId+"' and LOAN_DISBURSAL_ID_TEMP='"+disbursalId+"'";
		else
			checkInst="select INSTALLMENT_PLAN_ID from cr_resch_installment_plan where REC_STATUS='P' and loan_id='"+loanId+"' and LOAN_DISBURSAL_ID='"+disbursalId+"'";
		logger.info("SQL Query for New installment Plan "+checkInst); 
		
		String installmentPlanId=ConnectionDAO.singleReturn(checkInst);		
		LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 
		
		if(CommonFunction.checkNull(installmentPlanId).equalsIgnoreCase(""))
		{
			ArrayList installmentList=dao.getInstallType(loanId);
		
			if(installmentList!=null && installmentList.size()>0)
			{  
			   InstallmentPlanForCMVO vo=(InstallmentPlanForCMVO)installmentList.get(0);			   
			   
				String loanAmount=CommonFunction.checkNull(vo.getLoanAmount());			 
				String rateType=CommonFunction.checkNull(vo.getRateType());				
				String installmentType=CommonFunction.checkNull(vo.getInstallmentType());
				String totalInstallment=CommonFunction.checkNull(vo.getTotalInstallment());
				String repayEffDate=CommonFunction.checkNull(vo.getRepayeffdate());//added by Richa
				String maxDate=CommonFunction.checkNull(vo.getMaxDate());//added by Richa
				String dueDate=CommonFunction.checkNull(vo.getDueDatee());//added by Richa
				// Code Added for Edit Due Date| Rahul papneja | 08032018
				String editDueDate=CommonFunction.checkNull(vo.getEditDueDate());//added by Vishal Kumar
				String recoveryType=CommonFunction.checkNull(vo.getRecoveryType());//added by Vishal Kumar
				String insNextDueDate=CommonFunction.checkNull(vo.getInsNextDueDate());//added by Vishal Kumar
				String frequency=  CommonFunction.checkNull(vo.getFrequency());//added by Vishal Kumar
				
				// Ends Here
				
	        if((installmentType.equalsIgnoreCase("E")  || installmentType.equalsIgnoreCase("P")) && editDueDate.equalsIgnoreCase("N")){
				request.setAttribute("viewMode", "viewMode");		
			}
			request.setAttribute("installmentList", installmentList);
			 if(!CommonFunction.checkNull(dueDate).equals("")&& installmentType.equalsIgnoreCase("I"))
		        {
		        	session.setAttribute("forNewInstallmentType", "forNewInstallmentType");
		        }
	        request.setAttribute("installmentType", installmentType);
	        request.setAttribute("totalInstallment", totalInstallment);
	        request.setAttribute("rateType", rateType);
	        request.setAttribute("loanAmount", loanAmount);
	        request.setAttribute("lbxloannohid", loanId);
	        request.setAttribute("disbursalId",disbursalId);
	        request.setAttribute("repayeffdate", repayEffDate);//added by Richa
	        request.setAttribute("maxDate", maxDate);//added by Richa
	        // Code Added for Edit Due Date | Rahul papneja | 08032018
	        request.setAttribute("editDueDate",editDueDate);//added by Vishal Kumar
	        request.setAttribute("recoveryType",recoveryType);//added by Vishal Kumar
	        request.setAttribute("insNextDueDate",insNextDueDate);//added by Vishal Kumar
	        request.setAttribute("frequency",frequency);//added by Vishal Kumar
	        // Ends Here
	        
			}	
		}
		else if(!CommonFunction.checkNull(installmentPlanId).equalsIgnoreCase(""))
		{
			ArrayList installmentList=dao.getNewInstallmentType(loanId,stage);
		
			if(installmentList!=null && installmentList.size()>0)
			{  
			   InstallmentPlanForCMVO vo=(InstallmentPlanForCMVO)installmentList.get(0);
			   
			   
				String loanAmount=CommonFunction.checkNull(vo.getLoanAmount());
			   
				String rateType=CommonFunction.checkNull(vo.getRateType());
				
				String installmentType=CommonFunction.checkNull(vo.getInstallmentType());
				String totalInstallment=CommonFunction.checkNull(vo.getTotalInstallment());
				String repayEffDate=CommonFunction.checkNull(vo.getRepayeffdate());//added by Richa
				String maxDate=CommonFunction.checkNull(vo.getMaxDate());//added by Richa
				String dueDate=CommonFunction.checkNull(vo.getDueDatee());//added by Richa
				// Code Added for Edit Due Date| Rahul papneja | 08032018
				String editDueDate=CommonFunction.checkNull(vo.getEditDueDate());//added by Vishal Kumar
				String recoveryType=CommonFunction.checkNull(vo.getRecoveryType());//added by Vishal Kumar
				String insNextDueDate=CommonFunction.checkNull(vo.getInsNextDueDate());//added by Vishal Kumar
				String frequency=  CommonFunction.checkNull(vo.getFrequency());//added by Vishal Kumar
				vo=null;
	        if(installmentType.equalsIgnoreCase("E")  || installmentType.equalsIgnoreCase("P")){
				request.setAttribute("viewMode", "viewMode");
		
			}
			request.setAttribute("installmentList", installmentList);
			 if(!CommonFunction.checkNull(dueDate).equals("")&& installmentType.equalsIgnoreCase("I"))
		        {
		        	session.setAttribute("forNewInstallmentType", "forNewInstallmentType");
		        }
	        request.setAttribute("installmentType", installmentType);
	        request.setAttribute("totalInstallment", totalInstallment);
	        request.setAttribute("rateType", rateType);
	        request.setAttribute("loanAmount", loanAmount);
	        request.setAttribute("lbxloannohid", loanId);
	        request.setAttribute("disbursalId",disbursalId);
	        request.setAttribute("repayeffdate", repayEffDate);//added by Richa
	        request.setAttribute("maxDate", maxDate);//added by Richa
	        // Code Added for Edit Due Date | Rahul papneja | 08032018
	        request.setAttribute("editDueDate",editDueDate);//added by Vishal Kumar
	        request.setAttribute("recoveryType",recoveryType);//added by Vishal Kumar
	        request.setAttribute("insNextDueDate",insNextDueDate);//added by Vishal Kumar
	        request.setAttribute("frequency",frequency);//added by Vishal Kumar
	        // Ends Here
			}	
		}
		String disbrsalAmount = dao.getdisbrsalAmt(loanId);
		request.setAttribute("disbrsalAmount", disbrsalAmount);
		String disbrsedAmount = dao.getdisbrsedAmt(loanId);
		request.setAttribute("disbrsedAmount", disbrsedAmount);
		form.reset(mapping, request);
		dao=null;
		strFlag=null;
		return mapping.findForward("newInstallment");		
}
	public ActionForward saveNewInstallmentPlan(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception 
	{

	HttpSession session = request.getSession();
	logger.info("In saveNewInstallmentPlan ");
	//boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String makerID=null;
		String bDate =null;
		if(userobj!=null){
			makerID= userobj.getUserId();
			bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in saveNewInstallmentPlan method of InstallmentPlanProcess action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
	DynaValidatorForm InstallmentPlanDynaValidatorForm = (DynaValidatorForm)form;
	
	Object sessionId = session.getAttribute("sessionID");
	//for check User session start
	ServletContext context = getServlet().getServletContext();
	String strFlag=null;

	if(sessionId!=null)
	{
		strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
	}

	logger.info("strFlag .............. "+strFlag);
	if(!strFlag.equalsIgnoreCase(""))
	{
		if(strFlag.equalsIgnoreCase("sameUserSession"))
		{
			context.removeAttribute("msg");
			context.removeAttribute("msg1");
		}
		else if(strFlag.equalsIgnoreCase("BODCheck"))
		{
			context.setAttribute("msg", "B");
		}
		return mapping.findForward("logout");
	}

	String loanId= request.getParameter("lbxloannohid");
	String disbursalId= request.getParameter("disbursalId");
	
	 String sms=null;
	 	if ((loanId != null && !loanId.equalsIgnoreCase("")))
		{
			 InstallmentPlanForCMVO ipvo=new InstallmentPlanForCMVO();
			org.apache.commons.beanutils.BeanUtils.copyProperties(ipvo, InstallmentPlanDynaValidatorForm);
			 String dealIdQ="select LOAN_DEAL_ID from cr_loan_dtl where LOAN_ID="+loanId;
			 String loanDealId=ConnectionDAO.singleReturn(dealIdQ);
			 
			 String queryEditDueDate="select edit_due_date from cr_loan_dtl where LOAN_ID="+loanId;
			 String editDueDate=ConnectionDAO.singleReturn(queryEditDueDate);
	
			 ipvo.setLoanId(loanId);
			 ipvo.setDealId(loanDealId);
			 ipvo.setTxnType("LIM");
			 ipvo.setDisbursalId(disbursalId);
			 ipvo.setMakerId(makerID);
			 ipvo.setMakerDate(bDate);
			 ipvo.setEditDueDate(editDueDate);
             
				LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
				logger.info("Implementation class: "+dao.getClass()); 
			 boolean status=false;
				String installmentType=(CommonFunction.checkNull(request.getParameter("installmentType")));
			
				if(installmentType.equalsIgnoreCase("E")  || installmentType.equalsIgnoreCase("P"))
				{
				status = dao.saveNewInstallPlan(ipvo);
				}
				else{
				status = dao.saveNewInstallPlan(ipvo);
				}
				ArrayList installmentList = new ArrayList();
				if(status)
				 {
					sms="S";
						RefreshFlagVo vo = new RefreshFlagVo();
						vo.setTabIndex(5);
		    			vo.setRecordId(Integer.parseInt(loanId.trim()));
		        		vo.setModuleName("CM");
		    			RefreshFlagValueInsert.updateRefreshFlag(vo);
		    			installmentList=dao.getNewInstallType(loanId);
		    			if(installmentList!=null && installmentList.size()>0)
		    			{  
		    			   InstallmentPlanForCMVO vo1=(InstallmentPlanForCMVO)installmentList.get(0);
		    			   String repayEffDate=CommonFunction.checkNull(vo1.getRepayeffdate());//added by Richa
							String maxDate=CommonFunction.checkNull(vo1.getMaxDate());//added by Richa
							String dueDate=CommonFunction.checkNull(vo1.getDueDatee());//added by Richa

			    			request.setAttribute("repayeffdate", repayEffDate);//added by Richa
			    	        request.setAttribute("maxDate", maxDate);//added by Richa
			    	        if(!CommonFunction.checkNull(dueDate).equals("")&& installmentType.equalsIgnoreCase("I"))
					        {
					        	session.setAttribute("forNewInstallmentType", "forNewInstallmentType");
					        }
		    			}
		    			request.setAttribute("lbxloannohid",loanId);
		    			request.setAttribute("disbursalId",disbursalId);
		    			String disbrsalAmount = dao.getdisbrsalAmt(loanId);
		    			request.setAttribute("disbrsalAmount", disbrsalAmount);
		    			String disbrsedAmount = dao.getdisbrsedAmt(loanId);
		    			request.setAttribute("disbrsedAmount", disbrsedAmount);
		    			
		    			
		    	    	
				 }
				else
				{
					sms="E";
					installmentList=dao.getInstallType(loanId);
					request.setAttribute("lbxloannohid",loanId);
	    			request.setAttribute("disbursalId",disbursalId);
	    			dao=null;	    			
	    			dealIdQ=null;
				}

			if(installmentList!=null && installmentList.size()>0)
			{
			   InstallmentPlanForCMVO vo=(InstallmentPlanForCMVO)installmentList.get(0);
				
				String loanAmount=CommonFunction.checkNull(vo.getLoanAmount());		
				String rateType=CommonFunction.checkNull(vo.getRateType());
				String totalInstallment=CommonFunction.checkNull(vo.getTotalInstallment());
				vo=null;
	        if(installmentType.equalsIgnoreCase("E")  || installmentType.equalsIgnoreCase("P")){
				request.setAttribute("viewMode", "viewMode");
			}
			request.setAttribute("installmentList", installmentList);
			//logger.info("In InstallmentPlanBehindAction installmentList: ") ;
	        request.setAttribute("installmentType", installmentType);
	        request.setAttribute("totalInstallment", totalInstallment);
	        request.setAttribute("rateType", rateType);
	        request.setAttribute("loanAmount", loanAmount);
	        request.setAttribute("editDueDate", editDueDate);
			}
		}
		
	 session.removeAttribute("planCheck");
	 if(sms.trim().equals("S"))
		 session.setAttribute("planCheck","Y");
	 else
	 	 session.setAttribute("planCheck","N");
	request.setAttribute("sms", sms);
	form.reset(mapping, request);
	makerID=null;
	bDate=null;
	strFlag=null;
	return mapping.findForward("saveSuccess");
}
	public ActionForward openOtherChargePlan(ActionMapping mapping,ActionForm form,
			HttpServletRequest request,HttpServletResponse response)
	throws Exception {
	
		logger.info("In openOtherChargePlan.......  ");
		ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");
		String dateFormatWithTime=resource.getString("lbl.dateWithTimeInDao");
		DecimalFormat myFormatter = new DecimalFormat("###,##0.00######");
			
		String dbType=resource.getString("lbl.dbType");	
		resource=null;
		HttpSession session = request.getSession();

		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in execute method of DisbursalSearchBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag=null;	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}		
		String functionId=(String)session.getAttribute("functionId");
		if(CommonFunction.checkNull(functionId).trim().equalsIgnoreCase(""))
			functionId="0";
		int id=Integer.parseInt(functionId);
		if(id==4000122 || id==4000123)
		{
			session.setAttribute("cmAuthor","cmAuthor");
			session.setAttribute("viewLoan","viewLoan");
		}		
		session.removeAttribute("pParentGroup");	
		
		String loanId =  request.getParameter("lbxloannohid");
		String disbursalId= request.getParameter("disbursalId");
		logger.info("In DisbursalSearchBehindAction loan id: and disb ID : " + loanId + " " + disbursalId);
		
		String repayQ="select LOAN_REPAYMENT_TYPE from cr_loan_dtl where LOAN_ID="+loanId;	   
	    String repayType=ConnectionDAO.singleReturn(repayQ);	
		
		if(repayType!=null && repayType.equalsIgnoreCase("I"))
		{
			String f=CommonFunction.editableFlag();
	    	if(f!=null && f.equalsIgnoreCase("N"))
			{
				request.setAttribute("cmAuthor", "cmAuthor");
			}
		//	 LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		//	logger.info("Implementation class: "+dao.getClass());
	    	DisbursalInitiationDAO detail1=(DisbursalInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(DisbursalInitiationDAO.IDENTITY);
		     logger.info("Implementation class: "+detail1.getClass()); 			// changed by asesh			
			
		//	String strdealId =ConnectionDAO.singleReturn("select LOAN_DEAL_ID from cr_loan_dtl where LOAN_ID='"+loanId+"'"); 
		//	int dealCount = Integer.parseInt(ConnectionDAO.singleReturn("SELECT COUNT(1) FROM cr_deal_charge_plan_dtl WHERE DEAL_ID="+strdealId));
			
	/*		if(dealCount > 0)
			{
				int loanCount = Integer.parseInt(ConnectionDAO.singleReturn("SELECT COUNT(1) FROM cr_loan_charge_plan_dtl WHERE LOAN_ID="+loanId));
				ArrayList qryList=new ArrayList();
				boolean status=false;
				if(loanCount <= 0)
				{				
					try 
					{
					
					 ArrayList OthChrgListTemp=detail1.getOtherPeriodicalChargeDetailInDeal(strdealId,"D");
					 PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
					 StringBuffer bufInsSql =	new StringBuffer();
                     int size=OthChrgListTemp.size();
					 for(int k=0;k<size;k++)  
					{
						
						 OtherChargesPlanVo othVo=(OtherChargesPlanVo)OthChrgListTemp.get(k);
						 bufInsSql =	new StringBuffer();
					     insertPrepStmtObject = new PrepStmtObject(); 						
					     bufInsSql.append("insert into cr_loan_charge_plan_dtl (LOAN_ID,FROM_INSTL_NO,TO_INSTL_NO,CHARGE_TYPE,AMOUNT,CHARGE_CODE,REC_STATUS,MAKER_ID,MAKER_DATE) values(?,?,?,?,?,?,?,?,");
						
 						if(dbType.equalsIgnoreCase("MSSQL"))
 						{
 							bufInsSql.append(" dbo.STR_TO_DATE(?,'"+dateFormatWithTime+"') +''+ substring((cast(CONVERT(time,getdate()) as nvarchar(30))),0,9))");
 						}
 						else
 						{
 							bufInsSql.append(" DATE_ADD(STR_TO_DATE(?,'"+dateFormatWithTime+"'),INTERVAL CURTIME() HOUR_SECOND) )");
 						}						 
 						if(CommonFunction.checkNull(loanId).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString(loanId.trim());   // loan Id
							
						if(CommonFunction.checkNull(othVo.getFromInstallment()).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString(othVo.getFromInstallment().trim()); //From Installment
						
					    if(CommonFunction.checkNull(othVo.getToInstallment()).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString(othVo.getToInstallment().trim());// To Installment 

					    insertPrepStmtObject.addString("F");
					    	 
					    if((CommonFunction.checkNull(othVo.getChargeAmount())).trim().equalsIgnoreCase(""))
					    	insertPrepStmtObject.addString("0.00");
						else
						 insertPrepStmtObject.addString(myFormatter.parse((CommonFunction.checkNull(othVo.getChargeAmount()).trim())).toString());// charge amount   	
					    	
					    if((CommonFunction.checkNull(othVo.getChargeCode())).trim().equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString(othVo.getChargeCode().trim()); //Charge code 
					    	 
					    insertPrepStmtObject.addString("P");// REC_STATUS   	   	
											
					  	if (CommonFunction.checkNull(userobj.getUserId()).equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString((CommonFunction.checkNull(userobj.getUserId()).trim()));
						
						if (CommonFunction.checkNull(userobj.getBusinessdate()).equalsIgnoreCase(""))
							insertPrepStmtObject.addNull();
						else
							insertPrepStmtObject.addString((CommonFunction.checkNull(userobj.getBusinessdate()).trim()));
					    						  
						 	insertPrepStmtObject.setSql(bufInsSql.toString());						
							qryList.add(insertPrepStmtObject);
							bufInsSql=null;							
					}								
						status = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}			*/
			ArrayList OthChrgList=detail1.getOtherPeriodicalChargeDetailAtDisbursal(loanId);
		
			if(OthChrgList!=null && OthChrgList.size()>0)
			{  
				OtherChargesPlanVo vo=(OtherChargesPlanVo)OthChrgList.get(0);			
				String loanAmount=CommonFunction.checkNull(vo.getLoanAmount());			
				String rateType=CommonFunction.checkNull(vo.getRateType());				
				String installmentType=CommonFunction.checkNull(vo.getInstallmentType());
				String totalInstallment=CommonFunction.checkNull(vo.getTotalInstallment());	
	        	vo=null;
			request.setAttribute("otherChrgList", OthChrgList);
	        request.setAttribute("installmentType", installmentType);
	        request.setAttribute("totalInstallment", totalInstallment);
	        request.setAttribute("rateType", rateType);
	        request.setAttribute("loanAmount", loanAmount);
			}
			request.setAttribute("lbxloannohid", loanId);
	        request.setAttribute("disbursalId",disbursalId);
	        form.reset(mapping, request);
	        dateFormatWithTime=null;
	        detail1=null;
	      //  dao=null;
	        myFormatter=null;
	        dbType=null;
			return mapping.findForward("otherCharge");
		}
		else
		{
			request.setAttribute("nonProduct", "nonProduct");
		    dateFormatWithTime=null;
		    myFormatter=null;
		    dbType=null;
			return mapping.findForward("backNonProductInLoan");
		}		
}
	public ActionForward saveOtherChargesPlanAtDisbursal(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {

	HttpSession session = request.getSession();
	logger.info("In saveOtherChargesPlanAtDisbursal ");
	//boolean flag=false;
	UserObject userobj=(UserObject)session.getAttribute("userobject");
	 	String makerID=null;
		String bDate =null;
			if(userobj!=null){
				makerID= userobj.getUserId();
				bDate=userobj.getBusinessdate();
			}else{
				logger.info("here in saveOtherChargesPlanAtDisbursal method of OtherChargesPlanAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
	DynaValidatorForm InstallmentPlanDynaValidatorForm = (DynaValidatorForm)form;	
	Object sessionId = session.getAttribute("sessionID");
	//for check User session start
	ServletContext context = getServlet().getServletContext();
	String strFlag=null;

	if(sessionId!=null)
	{
		strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
	}

	logger.info("strFlag .............. "+strFlag);
	if(!strFlag.equalsIgnoreCase(""))
	{
		if(strFlag.equalsIgnoreCase("sameUserSession"))
		{
			context.removeAttribute("msg");
			context.removeAttribute("msg1");
		}
		else if(strFlag.equalsIgnoreCase("BODCheck"))
		{
			context.setAttribute("msg", "B");
		}
		return mapping.findForward("logout");
	}
	
	String loanId= request.getParameter("lbxloannohid");
	String disbursalId= request.getParameter("disbursalId");
	
	logger.info("In saveOtherChargesPlanAtDisbursal loan id: " + loanId);
	 String sms="";
	 	if ((loanId != null && !loanId.equalsIgnoreCase("")))
		{
	 		OtherChargesPlanVo vo=new OtherChargesPlanVo();
	 		DisbursalInitiationDAO detail1=(DisbursalInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(DisbursalInitiationDAO.IDENTITY);
	        logger.info("Implementation class: "+detail1.getClass()); 			// changed by asesh	 		
			org.apache.commons.beanutils.BeanUtils.copyProperties(vo, InstallmentPlanDynaValidatorForm);
			 String dealIdQ="select LOAN_DEAL_ID from cr_loan_dtl where LOAN_ID="+loanId;
			 String loanDealId=ConnectionDAO.singleReturn(dealIdQ);

			 vo.setLoanId(loanId);
			 vo.setDealId(loanDealId);			
			 vo.setDisbursalId(disbursalId);
			 vo.setMakerId(makerID);
			 vo.setMakerDate(bDate);

			 boolean status=false;
				String installmentType=(CommonFunction.checkNull(request.getParameter("installmentType")));
				logger.info(" InstallmentType: " + installmentType);
				vo.setStage("LIM");
				status = detail1.saveOtherChargesPlanAtDisbursal(vo);
			
				if(status)
				 {
					sms="S";
						RefreshFlagVo vo1 = new RefreshFlagVo();
						vo1.setTabIndex(5);
		    			vo1.setRecordId(Integer.parseInt(loanId.trim()));
		        		vo1.setModuleName("CM");
		    			RefreshFlagValueInsert.updateRefreshFlag(vo1);
		    			vo1=null;
				 }
				else
				{
					sms="E";
				}

			ArrayList OthChrgList=detail1.getOtherPeriodicalChargeDetailAtDisbursal(loanId);
			logger.info("OthChrgList    Size:---"+OthChrgList.size());
			if(OthChrgList!=null && OthChrgList.size()>0)
			{
				OtherChargesPlanVo vo1=(OtherChargesPlanVo)OthChrgList.get(0);			
				String loanAmount=CommonFunction.checkNull(vo1.getLoanAmount());				
				String rateType=CommonFunction.checkNull(vo1.getRateType());
				installmentType=CommonFunction.checkNull(vo.getInstallmentType());
				String totalInstallment=CommonFunction.checkNull(vo1.getTotalInstallment());
		        vo=null;
		        vo1=null;

			request.setAttribute("otherChrgList", OthChrgList);
			detail1=null;
	        request.setAttribute("installmentType", installmentType);
	        request.setAttribute("totalInstallment", totalInstallment);
	        request.setAttribute("rateType", rateType);
	        request.setAttribute("loanAmount", loanAmount);
			}
		}
	 session.removeAttribute("planCheck");
	 if(sms.trim().equals("S"))
		 session.setAttribute("planCheck","Y");
	 else
		 session.setAttribute("planCheck","N");
	request.setAttribute("sms", sms);
	request.setAttribute("lbxloannohid", loanId);
    request.setAttribute("disbursalId",disbursalId);
    
    form.reset(mapping, request);
    strFlag=null;
	return mapping.findForward("saveOtherCharges");
}
}