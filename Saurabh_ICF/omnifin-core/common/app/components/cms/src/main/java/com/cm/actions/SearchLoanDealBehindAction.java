/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.cm.dao.LoanInitiationDAO;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.LoanDetailVo;
import com.cp.vo.CodeDescVo;

/** 
 * MyEclipse Struts
 * Creation date: 09-28-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class SearchLoanDealBehindAction extends Action {
	/*
	 * Generated Methods
	 */
	private static final Logger logger = Logger.getLogger(SearchLoanDealBehindAction.class.getName());
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
logger.info(" In the SearchLoanDealBehindAction----------");
		
		HttpSession session = request.getSession();
			
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info(" in  execute method of SearchLoanDealBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 
		String loanId ="";
		if(CommonFunction.checkNull(request.getParameter("loanId")) != null) {
			loanId = request.getParameter("loanId");
			session.removeAttribute("loanId");
			session.removeAttribute("dealId");
			
		} else if (session.getAttribute("maxIdInCM") != null) {
			loanId = session.getAttribute("maxIdInCM").toString();
		}
		logger.info(" In the SearchLoanDealBehindAction------loanId----"+loanId);
		
		/*logger.info("function id is ........................................"+session.getAttribute("functionId").toString());
		String functionId="";
		
		String userId = userobj.getUserId();
		if(session.getAttribute("functionId")!=null)
		{
			functionId=session.getAttribute("functionId").toString();
		}
		
		
		ServletContext context=getServlet().getServletContext();
		
		if(context!=null)
		{
			flag = LockRecordCheck.lockCheck(userId,functionId,loanId,context);
			logger.info("Flag ........................................ "+flag);
			if(!flag)
			{
				logger.info("Record is Locked");			
				request.setAttribute("sms", "Locked");
				request.setAttribute("recordId", loanId);
				//request.setAttribute("userId", userId);
				return mapping.getInputForward();
			}
		}
		*/
		//boolean sanctionValid=false;
		//String businessDate = userobj.getBusinessdate();
		//sanctionValid = dao.checkLoanSanctionVaildTill(loanId,businessDate,Integer.parseInt(functionId));
		//logger.info("Sanction Valid Status: "+sanctionValid);
		//if(sanctionValid)
		//{
			session.removeAttribute("viewDeal");
			ArrayList loanList = dao.getloanListInLoan(loanId);
			if(loanId!=null && !loanId.equalsIgnoreCase(""))
			{
				CreditProcessingDAO creditProcessing=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
		        logger.info("Implementation class: "+creditProcessing.getClass()); 		// changed by asesh
		        ArrayList cycle = creditProcessing.getCycleDateList(loanId,"LIM");
				session.setAttribute("LoanCycle", cycle);
				ArrayList loanHeader = dao.getLoanHeader(loanId);
				session.setAttribute("loanHeader", loanHeader);
				logger.info("Size: "+loanList.size());
				session.setAttribute("loanList", loanList);
				ArrayList<LoanDetailVo> loanClassificationList = dao.getresultForLoan(loanId);
				session.setAttribute("loanClassificationList", loanClassificationList);
				session.setAttribute("loanId",loanId);
				//amandeep starts
				ArrayList list1 = dao.getPaymentModes();
				request.setAttribute("paymentModes", list1);
				ArrayList businessList = creditProcessing.getbusinessList();
	      		
	      		session.setAttribute("getBusiness", businessList);
				//amandeep ends
	      		ArrayList<CodeDescVo> intCal = creditProcessing.getGenericMasterList("INTEREST_CAL");
	      		session.setAttribute("intCal", intCal);
	      		
			}
				
			return mapping.findForward("success");
		
	}
}