/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import com.cm.dao.AdditionalDisbursalDAO;
import com.cm.dao.EarlyClosureDAO;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.vo.RepayScheduleVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 03-06-2012
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class RepaymentScheduleAdditionalDisbursalAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	private static final Logger logger = Logger.getLogger(RepaymentScheduleAdditionalDisbursalAction.class.getName());
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward repaymentSchedule(ActionMapping mapping,ActionForm form,
			HttpServletRequest request,HttpServletResponse response)
	throws Exception {
		logger.info("in repaymentSchedule method of customer service");
		HttpSession session = request.getSession();
		//boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		if(userobj!=null){
			
			userId=userobj.getUserId();
		}
		else{
			logger.info(" in repaymentSchedule method of RepaymentScheduleAdditionalDisbursalAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
			
		//CreditManagementDAO dao = new CreditManagementDAOImpl();
		//EarlyClosureDAO dao = new EarlyClosureDAOImpl();
		EarlyClosureDAO dao=(EarlyClosureDAO)DaoImplInstanceFactory.getDaoImplInstance(EarlyClosureDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 
		
		String loanId=CommonFunction.checkNull(request.getParameter("loanId"));
		logger.info("In RepaymentScheduleAdditionalDisbursalAction---loanId-"+loanId);  
		ArrayList<RepayScheduleVo> repShedule=dao.getRepayScheduleDisbursal(loanId);
		request.setAttribute("repShedule", repShedule);
		logger.info("repShedule:   "+repShedule.size());
		ArrayList<RepayScheduleVo> fromloanDtl=dao.getRepaySchFieldsDetail(loanId);
		request.setAttribute("fromloanDtl", fromloanDtl);
		return mapping.findForward("viewRepaymentScheduleAddDisb");
	}
	
	public ActionForward newRepaymentScheduleAdditionalDisb(ActionMapping mapping,ActionForm form,
			HttpServletRequest request,HttpServletResponse response)
	throws Exception {
		logger.info("New Repayment Schedule newRepaymentScheduleAdditionalDisb Action");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId ="";
		String businessDate ="";
		int compid =0;
		if(userobj!=null){
			userId = userobj.getUserId();
				businessDate=userobj.getBusinessdate();
				compid=userobj.getCompanyId();
		}else{
			logger.info("here in newRepaymentScheduleAdditionalDisb method of  NewRepaymentScheduleDeferralAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		
		//EarlyClosureDAO dao = new EarlyClosureDAOImpl();
		//change by sachin
		 AdditionalDisbursalDAO service=(AdditionalDisbursalDAO)DaoImplInstanceFactory.getDaoImplInstance(AdditionalDisbursalDAO.IDENTITY);
	    logger.info("Implementation class: "+service.getClass());

		//end by sachin
		
//		AdditionalDisbursalDAO service=new AdditionalDisbursalDAOImpl();
		RepayScheduleVo vo = new RepayScheduleVo();
		vo.setCompanyId(userobj.getCompanyId());
		vo.setAuthorId(userobj.getUserId());
		vo.setAuthorDate(userobj.getBusinessdate());
		String loanId = CommonFunction.checkNull(request.getParameter("loanId"));
		String reschId = CommonFunction.checkNull(request.getParameter("reschId"));
		logger.info("In newRepaymentScheduleAdditionalDisb---loanId-"+loanId); 
		//ArrayList<RepayScheduleVo> fromloanDtl=dao.getRepaySchFieldsDetail(loanId);
		//request.setAttribute("fromloanDtl", fromloanDtl);
		ArrayList<RepayScheduleVo> repShedule=service.getRepayScheduleAddDisbursal(vo,loanId,reschId,userId);
		request.setAttribute("repShedule", repShedule);
		logger.info("repShedule:   "+repShedule.size());
if(repShedule.size()>0){
		if(repShedule.get(0).getProcvalstatus().equalsIgnoreCase("E")){
			request.setAttribute("procStatus",repShedule.get(0).getProcval());
		}
}
//		if(repShedule.size()==0)
//			request.setAttribute("noData","noData");
//		
				
		return mapping.findForward("newRepaymentScheduleAddDisb");
	}
	
}