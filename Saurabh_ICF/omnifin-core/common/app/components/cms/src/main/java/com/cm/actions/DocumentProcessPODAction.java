/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import org.apache.log4j.Logger;
import com.cm.dao.CreditManagementDAO;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.vo.DocumentsVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 04-28-2011
 * 
 * XDoclet definition:
 * @struts.action scope="request" validate="true"
 */
public class DocumentProcessPODAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(DocumentProcessPODAction.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	

	
	public ActionForward applicationDoc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		HttpSession session =  request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String makerID =null;
		String bDate =null;
		String val=null;
		String sms=null;
		if(userobj!=null){
			makerID = userobj.getUserId();
			bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in applicationDoc method of DocumentProcessPODAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		// TODO Auto-generated method stub
		DynaValidatorForm DocumentAddDynaValidatorForm= (DynaValidatorForm)form;
				
		DocumentsVo vo = new DocumentsVo();

		vo.setUserId(makerID);
	    vo.setBussinessDate(bDate);
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, DocumentAddDynaValidatorForm);
		//change by sachin
		CreditManagementDAO detail=(CreditManagementDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditManagementDAO.IDENTITY);
	     logger.info("Implementation class: "+detail.getClass());

		//end by sachin
//		CreditManagementDAO detail = new CreditManagementDAOImpl();
		
		val=detail.checkDocMatrix(vo);
		
		//Changes By Amit Starts
		vo.setTxnId(CommonFunction.checkNull(session.getAttribute("id")));
		vo.setTxnType(CommonFunction.checkNull(session.getAttribute("txnType")));
		vo.setStageId(CommonFunction.checkNull(session.getAttribute("stage")));
		vo.setRecStatus(CommonFunction.checkNull(session.getAttribute("recStatus")));
		vo.setDocType(CommonFunction.checkNull(session.getAttribute("entityType")));
		String searchStatus=CommonFunction.checkNull(session.getAttribute("searchStatus"));
		//Changes By Amit Ends
		logger.info("val:::::::::::::::::::"+val);
		boolean status=false;
		String message=null;
		if(CommonFunction.checkNull(val).equalsIgnoreCase("Y") || CommonFunction.checkNull(val).equalsIgnoreCase(""))
		{
			logger.info("val::In If Block:::::::::::::::::"+val);
			String result=detail.getDocFromTempOrNotAtDocCollection(vo.getDocType(), vo.getTxnId(), vo.getStageId(), vo.getTxnType());
			if(CommonFunction.checkNull(result).equalsIgnoreCase("0"))
			{
				if(CommonFunction.checkNull(searchStatus).equalsIgnoreCase("A"))
				{
					String procResult=detail.saveDocInTemp(vo);
					if(CommonFunction.checkNull(procResult).equalsIgnoreCase("S"))
					{
						status = detail.saveDocumentPOD(vo);
						if(status)
						{
							sms="S";
							session.setAttribute("Forword", "Forword");
						}
						else
						{
							sms="E";
						}
					}
					else
					{
						sms="PROCERROR";
						
					}
				}
			}
			if(CommonFunction.checkNull(searchStatus).equalsIgnoreCase("P") || !CommonFunction.checkNull(result).equalsIgnoreCase("0"))
			{
				status = detail.saveDocumentPOD(vo);
				if(status)
					{
						sms="S";
						session.setAttribute("Forword", "Forword");
					}
				else
				{
					sms="E";
				}
			}
			request.setAttribute("sms", sms);

			
		}
			
		if(CommonFunction.checkNull(val).equalsIgnoreCase("CANNOTREALEASED"))
		{
			message="CANNOTREALEASED";
		}
		else if(CommonFunction.checkNull(val).equalsIgnoreCase("CANNOT-P,W,D"))
		{
			message="CANNOT-P,W,D";
		}
		else if(CommonFunction.checkNull(val).equalsIgnoreCase("ONLY-P,L,D,R"))
		{
			message="ONLY-P,L,D,R";
		}
		else if(CommonFunction.checkNull(val).equalsIgnoreCase("CANNOT-P,L"))
		{
			message="CANNOT-P,L";
		}
		else if(CommonFunction.checkNull(val).equalsIgnoreCase("ONLYRECIEVED"))
		{
			message="ONLYRECIEVED";
		}
		request.setAttribute("message", message);

        logger.info("status::::::::::::::::"+status);
        vo=null;
        detail=null;
        val=null;
        makerID =null;
		bDate =null;
		return mapping.findForward("application");
	}
	
	
	
	public ActionForward applicantDoc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		// TODO Auto-generated method stub
		
		 
		 HttpSession session =  request.getSession();
			boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
		     String makerID =null;
		     String bDate =null;
		     if(userobj!=null){
					makerID = userobj.getUserId();
					bDate=userobj.getBusinessdate();
		     }else{
					logger.info("here in applicantDoc method of DocumentProcessPODAction action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
			DynaValidatorForm DocumentAddDynaValidatorForm= (DynaValidatorForm)form;
			 logger.info("In DocumentProcessPODAction in applicantDoc");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}

	     DocumentsVo vo = new DocumentsVo();

	     vo.setUserId(makerID);
	     vo.setBussinessDate(bDate);
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, DocumentAddDynaValidatorForm);
		//change by sachin
		CreditManagementDAO detail=(CreditManagementDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditManagementDAO.IDENTITY);
	     logger.info("Implementation class: "+detail.getClass());

		//end by sachin
//		CreditManagementDAO detail = new CreditManagementDAOImpl();
		boolean status=false;
		
		String message=null;
		String val=null;
		String sms=null;
		val=detail.checkDocMatrix(vo);
		
		//Changes By Amit Starts
		vo.setTxnId(CommonFunction.checkNull(session.getAttribute("id")));
		vo.setTxnType(CommonFunction.checkNull(session.getAttribute("txnType")));
		vo.setStageId(CommonFunction.checkNull(session.getAttribute("stage")));
		vo.setRecStatus(CommonFunction.checkNull(session.getAttribute("recStatus")));
		vo.setDocType(CommonFunction.checkNull(session.getAttribute("entityType")));
		String searchStatus=CommonFunction.checkNull(session.getAttribute("searchStatus"));
		//Changes By Amit Ends
		
		if((CommonFunction.checkNull(val).equalsIgnoreCase("Y")) || (CommonFunction.checkNull(val).equalsIgnoreCase("")))
		{
			//////sachin
			String result=detail.getDocFromTempOrNotAtDocCollection(vo.getDocType(), vo.getTxnId(), vo.getStageId(), vo.getTxnType());
			if(CommonFunction.checkNull(result).equalsIgnoreCase("0"))
			{
				if(CommonFunction.checkNull(searchStatus).equalsIgnoreCase("A"))
				{
					String procResult=detail.saveDocInTemp(vo);
					if(CommonFunction.checkNull(procResult).equalsIgnoreCase("S"))
					{
						status = detail.saveDocumentPOD(vo);
						if(status)
						{
							sms="S";
							session.setAttribute("Forword", "Forword");
						}
						else
						{
							sms="E";
						}
					}
					else
					{
						sms="PROCERROR";
					}
				}
			}
			
			if(CommonFunction.checkNull(searchStatus).equalsIgnoreCase("P") || !CommonFunction.checkNull(result).equalsIgnoreCase("0"))
			{
				status = detail.saveDocumentPOD(vo);
				if(status)
					{
						sms="S";
						session.setAttribute("Forword", "Forword");
					}
				else
				{
					sms="E";
				}
			}
			
			//////sachin
			request.setAttribute("sms", sms);
		}

		
		if(CommonFunction.checkNull(val).equalsIgnoreCase("CANNOTREALEASED"))
		{
			message="CANNOTREALEASED";
		}
		else if(CommonFunction.checkNull(val).equalsIgnoreCase("CANNOT-P,W,D"))
		{
			message="CANNOT-P,W,D";
		}
		else if(CommonFunction.checkNull(val).equalsIgnoreCase("ONLY-P,L,D,R"))
		{
			message="ONLY-P,L,D,R";
		}
		else if(CommonFunction.checkNull(val).equalsIgnoreCase("CANNOT-P,L"))
		{
			message="CANNOT-P,L";
		}
		else if(CommonFunction.checkNull(val).equalsIgnoreCase("ONLYRECIEVED"))
		{
			message="ONLYRECIEVED";
		}
		request.setAttribute("message", message);
        logger.info("status: "+status);
        vo=null;
        detail=null;
        val=null;
        makerID =null;
		bDate =null;
		return mapping.findForward("applicant");
	}
	
	
	 public ActionForward coApplicantDoc(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)throws Exception {
			// TODO Auto-generated method stub
			
			 
			 HttpSession session =  request.getSession();
				boolean flag=false;
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				 String userId=null;
					String bDate =null;
					if(userobj!=null){
						userId = userobj.getUserId();
						bDate=userobj.getBusinessdate();
					}else{
						logger.info("here in coApplicantDoc method of DocumentProcessPODAction action the session is out----------------");
						return mapping.findForward("sessionOut");
					}
				DynaValidatorForm DocumentAddDynaValidatorForm= (DynaValidatorForm)form;
				 logger.info("In DocumentProcessPODAction in coApplicantDoc");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}

		     DocumentsVo vo = new DocumentsVo();
		    
		     vo.setUserId(userId);
		     vo.setBussinessDate(bDate);

		    
			org.apache.commons.beanutils.BeanUtils.copyProperties(vo, DocumentAddDynaValidatorForm);
			//change by sachin
			CreditManagementDAO detail=(CreditManagementDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditManagementDAO.IDENTITY);
		     logger.info("Implementation class: "+detail.getClass());

			//end by sachin
//			CreditManagementDAO detail = new CreditManagementDAOImpl();
			boolean status=false;
			String message=null;
			String val=null;
			String sms=null;
			val=detail.checkDocMatrix(vo);
			
			//Changes By Amit Starts
			vo.setTxnId(CommonFunction.checkNull(session.getAttribute("id")));
			vo.setTxnType(CommonFunction.checkNull(session.getAttribute("txnType")));
			vo.setStageId(CommonFunction.checkNull(session.getAttribute("stage")));
			vo.setRecStatus(CommonFunction.checkNull(session.getAttribute("recStatus")));
			vo.setDocType(CommonFunction.checkNull(session.getAttribute("entityType")));
			String searchStatus=CommonFunction.checkNull(session.getAttribute("searchStatus"));
			//Changes By Amit Ends
			
			if((CommonFunction.checkNull(val).equalsIgnoreCase("Y")) || (CommonFunction.checkNull(val).equalsIgnoreCase("")))
			{
				String result=detail.getDocFromTempOrNotAtDocCollection(vo.getDocType(), vo.getTxnId(), vo.getStageId(), vo.getTxnType());
				if(CommonFunction.checkNull(result).equalsIgnoreCase("0"))
				{
					if(CommonFunction.checkNull(searchStatus).equalsIgnoreCase("A"))
					{
						String procResult=detail.saveDocInTemp(vo);
						if(CommonFunction.checkNull(procResult).equalsIgnoreCase("S"))
						{
							status = detail.saveDocumentPOD(vo);
							if(status)
							{
								sms="S";
								session.setAttribute("Forword", "Forword");
							}
							else
							{
								sms="E";
							}
						}
						else
						{
							sms="PROCERROR";
						}
					}
				}
				if(CommonFunction.checkNull(searchStatus).equalsIgnoreCase("P") || !CommonFunction.checkNull(result).equalsIgnoreCase("0"))
				{
					status = detail.saveDocumentPOD(vo);
					if(status)
						{
							sms="S";
							session.setAttribute("Forword", "Forword");
						}
					else
					{
						sms="E";
					}
				}
				request.setAttribute("sms", sms);
			}
			
			if(CommonFunction.checkNull(val).equalsIgnoreCase("CANNOTREALEASED"))
			{
				message="CANNOTREALEASED";
			}
			else if(CommonFunction.checkNull(val).equalsIgnoreCase("CANNOT-P,W,D"))
			{
				message="CANNOT-P,W,D";
			}
			else if(CommonFunction.checkNull(val).equalsIgnoreCase("ONLY-P,L,D,R"))
			{
				message="ONLY-P,L,D,R";
			}
			else if(CommonFunction.checkNull(val).equalsIgnoreCase("CANNOT-P,L"))
			{
				message="CANNOT-P,L";
			}
			else if(CommonFunction.checkNull(val).equalsIgnoreCase("ONLYRECIEVED"))
			{
				message="ONLYRECIEVED";
			}
			request.setAttribute("message", message);
	        logger.info("status: "+status);
	        vo=null;
	        detail=null;
	        val=null;
			bDate =null;
			userId=null;
			return mapping.findForward("coapplicant");
		}
	 
	 
	 public ActionForward guarantorDoc(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)throws Exception {
			// TODO Auto-generated method stub
		
			 
			 HttpSession session =  request.getSession();
				boolean flag=false;
				UserObject userobj=(UserObject)session.getAttribute("userobject");
			     String userId=null;
					String bDate =null;
					if(userobj!=null){
						userId= userobj.getUserId();
						bDate=userobj.getBusinessdate();
					}else{
						logger.info("here in guarantorDoc method of DocumentProcessPODAction action the session is out----------------");
						return mapping.findForward("sessionOut");
					}
				DynaValidatorForm DocumentAddDynaValidatorForm= (DynaValidatorForm)form;
				 logger.info("In DocumentProcessPODAction in guarantorDoc");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
		     DocumentsVo vo = new DocumentsVo();
	
		     vo.setUserId(userId);
		     vo.setBussinessDate(bDate);

		 
			org.apache.commons.beanutils.BeanUtils.copyProperties(vo, DocumentAddDynaValidatorForm);
			//change by sachin
			CreditManagementDAO detail=(CreditManagementDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditManagementDAO.IDENTITY);
		    logger.info("Implementation class: "+detail.getClass());

			//end by sachin
//			CreditManagementDAO detail = new CreditManagementDAOImpl();
			boolean status=false;
			String message=null;
			String val=null;
			String sms=null;
			val=detail.checkDocMatrix(vo);
			
			//Changes By Amit Starts
			vo.setTxnId(CommonFunction.checkNull(session.getAttribute("id")));
			vo.setTxnType(CommonFunction.checkNull(session.getAttribute("txnType")));
			vo.setStageId(CommonFunction.checkNull(session.getAttribute("stage")));
			vo.setRecStatus(CommonFunction.checkNull(session.getAttribute("recStatus")));
			vo.setDocType(CommonFunction.checkNull(session.getAttribute("entityType")));
			String searchStatus=CommonFunction.checkNull(session.getAttribute("searchStatus"));
			//Changes By Amit Ends
			
			if((CommonFunction.checkNull(val).equalsIgnoreCase("Y")) || (CommonFunction.checkNull(val).equalsIgnoreCase("")))
			{
				String result=detail.getDocFromTempOrNotAtDocCollection(vo.getDocType(), vo.getTxnId(), vo.getStageId(), vo.getTxnType());
				if(CommonFunction.checkNull(result).equalsIgnoreCase("0"))
				{
					if(CommonFunction.checkNull(searchStatus).equalsIgnoreCase("A"))
					{
						String procResult=detail.saveDocInTemp(vo);
						if(CommonFunction.checkNull(procResult).equalsIgnoreCase("S"))
						{
							status = detail.saveDocumentPOD(vo);
							if(status)
							{
								sms="S";
								session.setAttribute("Forword", "Forword");
							}
							else
							{
								sms="E";
							}
						}
						else
						{
							sms="PROCERROR";
						}
					}
				}
				if(CommonFunction.checkNull(searchStatus).equalsIgnoreCase("P") || !CommonFunction.checkNull(result).equalsIgnoreCase("0"))
				{
					status = detail.saveDocumentPOD(vo);
					if(status)
						{
							sms="S";
							session.setAttribute("Forword", "Forword");
						}
					else
					{
						sms="E";
					}
				}
				request.setAttribute("sms", sms);
			}
			
			if(CommonFunction.checkNull(val).equalsIgnoreCase("CANNOTREALEASED"))
			{
				message="CANNOTREALEASED";
			}
			else if(CommonFunction.checkNull(val).equalsIgnoreCase("CANNOT-P,W,D"))
			{
				message="CANNOT-P,W,D";
			}
			else if(CommonFunction.checkNull(val).equalsIgnoreCase("ONLY-P,L,D,R"))
			{
				message="ONLY-P,L,D,R";
			}
			else if(CommonFunction.checkNull(val).equalsIgnoreCase("CANNOT-P,L"))
			{
				message="CANNOT-P,L";
			}
			else if(CommonFunction.checkNull(val).equalsIgnoreCase("ONLYRECIEVED"))
			{
				message="ONLYRECIEVED";
			}
			request.setAttribute("message", message);
	        logger.info("status: "+status);
	        vo=null;
	        detail=null;
	        val=null;
	        userId =null;
			bDate =null;
			return mapping.findForward("guarantor");
		}
	 
	 
	 public ActionForward collateralDoc(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)throws Exception {
			// TODO Auto-generated method stub
			
			 
			 HttpSession session =  request.getSession();
				boolean flag=false;
				UserObject userobj=(UserObject)session.getAttribute("userobject");
			     String userId=null;
					String bDate =null;
					if(userobj!=null){
						userId= userobj.getUserId();
						bDate=userobj.getBusinessdate();
					}else{
						logger.info("here in collateralDoc method of DocumentProcessPODAction action the session is out----------------");
						return mapping.findForward("sessionOut");
					}
					DynaValidatorForm DocumentAddDynaValidatorForm= (DynaValidatorForm)form;
					 logger.info("In DocumentProcessPODAction in collateralDoc");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}

		     DocumentsVo vo = new DocumentsVo();

		     vo.setUserId(userId);
		     vo.setBussinessDate(bDate);

		
			org.apache.commons.beanutils.BeanUtils.copyProperties(vo, DocumentAddDynaValidatorForm);
			//change by sachin
			CreditManagementDAO detail=(CreditManagementDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditManagementDAO.IDENTITY);
		     logger.info("Implementation class: "+detail.getClass());

			//end by sachin
//			CreditManagementDAO detail = new CreditManagementDAOImpl();
			boolean status=false;
			String message=null;
			String val=null;
			String sms=null;
			val=detail.checkDocMatrix(vo);
			
			//Changes By Amit Starts
			vo.setTxnId(CommonFunction.checkNull(session.getAttribute("id")));
			vo.setTxnType(CommonFunction.checkNull(session.getAttribute("txnType")));
			vo.setStageId(CommonFunction.checkNull(session.getAttribute("stage")));
			vo.setRecStatus(CommonFunction.checkNull(session.getAttribute("recStatus")));
			vo.setDocType(CommonFunction.checkNull(session.getAttribute("entityType")));
			String searchStatus=CommonFunction.checkNull(session.getAttribute("searchStatus"));
			//Changes By Amit Ends
			
			if((CommonFunction.checkNull(val).equalsIgnoreCase("Y")) || (CommonFunction.checkNull(val).equalsIgnoreCase("")))
			{
				String result=detail.getDocFromTempOrNotAtDocCollection(vo.getDocType(), vo.getTxnId(), vo.getStageId(), vo.getTxnType());
				if(CommonFunction.checkNull(result).equalsIgnoreCase("0"))
				{
					if(CommonFunction.checkNull(searchStatus).equalsIgnoreCase("A"))
					{
						String procResult=detail.saveDocInTemp(vo);
						if(CommonFunction.checkNull(procResult).equalsIgnoreCase("S"))
						{
							status = detail.saveDocumentPOD(vo);
							if(status)
							{
								sms="S";
								session.setAttribute("Forword", "Forword");
							}
							else
							{
								sms="E";
							}
						}
						else
						{
							sms="PROCERROR";
						}
					}
				}
				if(CommonFunction.checkNull(searchStatus).equalsIgnoreCase("P") || !CommonFunction.checkNull(result).equalsIgnoreCase("0"))
				{
					status = detail.saveDocumentPOD(vo);
					if(status)
						{
							sms="S";
							session.setAttribute("Forword", "Forword");
						}
					else
					{
						sms="E";
					}
				}
				request.setAttribute("sms", sms);
			}
			
			if(CommonFunction.checkNull(val).equalsIgnoreCase("CANNOTREALEASED"))
			{
				message="CANNOTREALEASED";
			}
			else if(CommonFunction.checkNull(val).equalsIgnoreCase("CANNOT-P,W,D"))
			{
				message="CANNOT-P,W,D";
			}
			else if(CommonFunction.checkNull(val).equalsIgnoreCase("ONLY-P,L,D,R"))
			{
				message="ONLY-P,L,D,R";
			}
			else if(CommonFunction.checkNull(val).equalsIgnoreCase("CANNOT-P,L"))
			{
				message="CANNOT-P,L";
			}
			else if(CommonFunction.checkNull(val).equalsIgnoreCase("ONLYRECIEVED"))
			{
				message="ONLYRECIEVED";
			}
			request.setAttribute("message", message);
	        logger.info("status: "+status);
	        vo=null;
	        detail=null;
	        val=null;
	        userId =null;
			bDate =null;
			return mapping.findForward("collateral");
		}
	 
	 
	 public ActionForward assetDoc(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)throws Exception {
			// TODO Auto-generated method stub
			
			 
			HttpSession session =  request.getSession();
			boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
		     String userId=null;
				String bDate =null;
				if(userobj!=null){
					userId= userobj.getUserId();
					bDate=userobj.getBusinessdate();
				}else{
					logger.info("here in assetDoc method of  DocumentProcessPODAction action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
			DynaValidatorForm DocumentAddDynaValidatorForm= (DynaValidatorForm)form;
			logger.info("In DocumentProcessPODAction in assetDoc");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			 
		     DocumentsVo vo = new DocumentsVo();
		
		     vo.setUserId(userId);
		     vo.setBussinessDate(bDate);

		   
			org.apache.commons.beanutils.BeanUtils.copyProperties(vo, DocumentAddDynaValidatorForm);
			//change by sachin
			CreditManagementDAO detail=(CreditManagementDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditManagementDAO.IDENTITY);
		     logger.info("Implementation class: "+detail.getClass());

			//end by sachin
//			CreditManagementDAO detail = new CreditManagementDAOImpl();
			boolean status=false;
			String message=null;
			String val=null;
			String sms=null;
			val=detail.checkDocMatrix(vo);
			
			//Changes By Amit Starts
			vo.setTxnId(CommonFunction.checkNull(session.getAttribute("id")));
			vo.setTxnType(CommonFunction.checkNull(session.getAttribute("txnType")));
			vo.setStageId(CommonFunction.checkNull(session.getAttribute("stage")));
			vo.setRecStatus(CommonFunction.checkNull(session.getAttribute("recStatus")));
			vo.setDocType(CommonFunction.checkNull(session.getAttribute("entityType")));
			String searchStatus=CommonFunction.checkNull(session.getAttribute("searchStatus"));
			//Changes By Amit Ends
			
			if((CommonFunction.checkNull(val).equalsIgnoreCase("Y")) || (CommonFunction.checkNull(val).equalsIgnoreCase("")))
			{
				String result=detail.getDocFromTempOrNotAtDocCollection(vo.getDocType(), vo.getTxnId(), vo.getStageId(), vo.getTxnType());
				if(CommonFunction.checkNull(result).equalsIgnoreCase("0"))
				{
					if(CommonFunction.checkNull(searchStatus).equalsIgnoreCase("A"))
					{
						String procResult=detail.saveDocInTemp(vo);
						if(CommonFunction.checkNull(procResult).equalsIgnoreCase("S"))
						{
							status = detail.saveDocumentPOD(vo);
							if(status)
							{
								sms="S";
								session.setAttribute("Forword", "Forword");
							}
							else
							{
								sms="E";
							}
						}
						else
						{
							sms="PROCERROR";
						}
					}
				}
				if(CommonFunction.checkNull(searchStatus).equalsIgnoreCase("P") || !CommonFunction.checkNull(result).equalsIgnoreCase("0"))
				{
					status = detail.saveDocumentPOD(vo);
					if(status)
						{
							sms="S";
							session.setAttribute("Forword", "Forword");
						}
					else
					{
						sms="E";
					}
				}
				request.setAttribute("sms", sms);
			}
			
			if(CommonFunction.checkNull(val).equalsIgnoreCase("CANNOTREALEASED"))
			{
				message="CANNOTREALEASED";
			}
			else if(CommonFunction.checkNull(val).equalsIgnoreCase("CANNOT-P,W,D"))
			{
				message="CANNOT-P,W,D";
			}
			else if(CommonFunction.checkNull(val).equalsIgnoreCase("ONLY-P,L,D,R"))
			{
				message="ONLY-P,L,D,R";
			}
			else if(CommonFunction.checkNull(val).equalsIgnoreCase("CANNOT-P,L"))
			{
				message="CANNOT-P,L";
			}
			else if(CommonFunction.checkNull(val).equalsIgnoreCase("ONLYRECIEVED"))
			{
				message="ONLYRECIEVED";
			}
			request.setAttribute("message", message);
	        logger.info("status: "+status);
	        vo=null;
	        detail=null;
	        val=null;
	        userId =null;
			bDate =null;
			return mapping.findForward("asset");
		}
		
		public ActionForward forwardDocForAllDocTypeAtDocumentCollection(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)throws Exception {
			// TODO Auto-generated method stub
			
			 logger.info("In forwardDocForAllDocTypeAtDocumentCollection() of DocumentProcessPODAction action.....");
			 HttpSession session =  request.getSession();
			 boolean flag=false;
		   	 UserObject userobj=(UserObject)session.getAttribute("userobject");
			 String makerID =null;
			     String bDate =null;
			     if(userobj!=null){
						makerID = userobj.getUserId();
						bDate=userobj.getBusinessdate();
			     }else{
						logger.info("here in forwardDocForAllDocTypeAtDocumentCollection method of DocumentProcessPODAction action the session is out----------------");
						return mapping.findForward("sessionOut");
					}
				DynaValidatorForm DocumentAddDynaValidatorForm= (DynaValidatorForm)form;
				 logger.info("In DocumentProcessPODAction in applicantDoc");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}

		     DocumentsVo vo = new DocumentsVo();

		     vo.setUserId(makerID);
		     vo.setBussinessDate(bDate);
			org.apache.commons.beanutils.BeanUtils.copyProperties(vo, DocumentAddDynaValidatorForm);
			//change by sachin
			CreditManagementDAO detail=(CreditManagementDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditManagementDAO.IDENTITY);
		     logger.info("Implementation class: "+detail.getClass());

			//end by sachin
			boolean status=false;
			String sms="";
			vo.setTxnId(CommonFunction.checkNull(session.getAttribute("id")));
			vo.setTxnType(CommonFunction.checkNull(session.getAttribute("txnType")));
			vo.setStageId(CommonFunction.checkNull(session.getAttribute("stage")));
			vo.setRecStatus(CommonFunction.checkNull(session.getAttribute("recStatus")));
			vo.setDocType(CommonFunction.checkNull(session.getAttribute("entityType")));
			
				status = detail.forwardDocumentPOD(vo);
				if(status)
				{
					sms="F";
				}
				else
				{
					sms="NF";
				}
				request.setAttribute("sms", sms);
	        logger.info("status: "+status);
	        String resultOfAction=null;
	                  
	        if(CommonFunction.checkNull(vo.getDocType()).equalsIgnoreCase("APPL"))
	        	resultOfAction="application";
	        if(CommonFunction.checkNull(vo.getDocType()).equalsIgnoreCase("PRAPPL"))
	        	resultOfAction="applicant";
	        if(CommonFunction.checkNull(vo.getDocType()).equalsIgnoreCase("COLLATERAL"))
	        	resultOfAction="collateral";	
	        if(CommonFunction.checkNull(vo.getDocType()).equalsIgnoreCase("GUARANTOR"))
	        	resultOfAction="guarantor";
	        if(CommonFunction.checkNull(vo.getDocType()).equalsIgnoreCase("ASSET"))
	        	resultOfAction="asset";	
	        if(CommonFunction.checkNull(vo.getDocType()).equalsIgnoreCase("COAPPL"))
	        	resultOfAction="coapplicant";
	       
	        vo=null;
	        detail=null;
	        makerID =null;
			bDate =null;
			
	        return mapping.findForward(resultOfAction);
		}
 
}




