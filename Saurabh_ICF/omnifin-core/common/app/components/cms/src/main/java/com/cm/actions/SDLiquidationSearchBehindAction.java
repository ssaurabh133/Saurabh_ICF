/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;


import com.cm.dao.SDLiquidationDAO;
import com.cm.vo.LiquidationSearchVO;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.logger.LoggerMsg;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 07-30-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class SDLiquidationSearchBehindAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(SDLiquidationSearchBehindAction.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward sdLiquidationMakerSearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		LoggerMsg.info("Inside SDLiquidationSearchBehindAction...........sdLiquidationMakerSearch");
		
		HttpSession session = request.getSession();
	
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String branchId="";
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				branchId=userobj.getBranchId();
		}else{
			logger.info("here in sdLiquidationMakerSearch method of SDLiquidationSearchBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		LiquidationSearchVO vo = new LiquidationSearchVO();
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
		
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));
		vo.setCurrentPageLink(currentPageLink);
		
		String type = "P";
		
		DynaValidatorForm SDLiquidationSearchDynaValidatorForm = (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,SDLiquidationSearchDynaValidatorForm);
		if(CommonFunction.checkNull(vo.getReportingToUserId()).equalsIgnoreCase(""))
		{ 
			vo.setReportingToUserId(userId);
		}
		logger.info("user Id:::::"+vo.getReportingToUserId());
		vo.setStage(type);
		vo.setBranchId(branchId);
		vo.setUserId(userId);
		vo.setLbxLoanNoHID("");
		vo.setCustomerName("");
		//CreditManagementDAO service = new CreditManagementDAOImpl();
		SDLiquidationDAO service=(SDLiquidationDAO)DaoImplInstanceFactory.getDaoImplInstance(SDLiquidationDAO.IDENTITY);
		logger.info("Implementation class: "+service.getClass());
		ArrayList<LiquidationSearchVO> liquidationSearchList = service.searchLiquidationData(vo,type);
		if(liquidationSearchList.size()==0)
		{
			request.setAttribute("message","N");
			if(type.equalsIgnoreCase("P"))
			{
				request.setAttribute("sdLiquidationMakerSearch","sdLiquidationMakerSearch");
				request.setAttribute("liquidationSearchList", "liquidationSearchList");
			}
			
			else if(type.equalsIgnoreCase("F"))
			{
				request.setAttribute("sdLiquidationAuthorSearch","sdLiquidationAuthorSearch");
				request.setAttribute("liquidationSearchList", "liquidationSearchList");
			}
		}
		else
		{
			if(type.equalsIgnoreCase("P"))
			{
				request.setAttribute("sdLiquidationMakerSearch","sdLiquidationMakerSearch");
				request.setAttribute("liquidationSearchList", "liquidationSearchList");
				request.setAttribute("list", liquidationSearchList);
			}
			
			else if(type.equalsIgnoreCase("F"))
			{
				request.setAttribute("sdLiquidationAuthorSearch","sdLiquidationAuthorSearch");
				request.setAttribute("liquidationSearchList", "liquidationSearchList");
				request.setAttribute("list", liquidationSearchList);
			}
		}

		return mapping.findForward("sdLiquidationMakerSearch");
	}
	
	public ActionForward sdLiquidationAuthorSearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		logger.info("Inside SDLiquidationSearchBehindAction...........sdLiquidationAuthorSearch");
		
		HttpSession session = request.getSession();
		
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String branchId="";
			if(userobj!=null)
			{
			userId=userobj.getUserId();
			branchId=userobj.getBranchId();
			}else{
				logger.info("here in sdLiquidationAuthorSearch method of SDLiquidationSearchBehindAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
		LiquidationSearchVO vo = new LiquidationSearchVO();
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
		
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));
		vo.setCurrentPageLink(currentPageLink);
		
		String type = "F";
		
		DynaValidatorForm SDLiquidationSearchDynaValidatorForm = (DynaValidatorForm)form;
		
		vo.setStage(type);


		vo.setBranchId(branchId);
		vo.setUserId(userId);
		
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,SDLiquidationSearchDynaValidatorForm);
		vo.setLbxLoanNoHID("");
		vo.setCustomerName("");
		//CreditManagementDAO service = new CreditManagementDAOImpl();
		SDLiquidationDAO service=(SDLiquidationDAO)DaoImplInstanceFactory.getDaoImplInstance(SDLiquidationDAO.IDENTITY);
		logger.info("Implementation class: "+service.getClass());
		ArrayList<LiquidationSearchVO> liquidationSearchList = service.searchLiquidationData(vo,type);
		if(liquidationSearchList.size()==0)
		{
			request.setAttribute("message","N");
			if(type.equalsIgnoreCase("P"))
			{
				request.setAttribute("sdLiquidationMakerSearch","sdLiquidationMakerSearch");
				request.setAttribute("liquidationSearchList", "liquidationSearchList");
			}
			
			else if(type.equalsIgnoreCase("F"))
			{
				request.setAttribute("sdLiquidationAuthorSearch","sdLiquidationAuthorSearch");
				request.setAttribute("liquidationSearchList", "liquidationSearchList");
			}
		}
		else
		{
			if(type.equalsIgnoreCase("P"))
			{
				request.setAttribute("sdLiquidationMakerSearch","sdLiquidationMakerSearch");
				request.setAttribute("liquidationSearchList", "liquidationSearchList");
			}
			
			else if(type.equalsIgnoreCase("F"))
			{
				request.setAttribute("sdLiquidationAuthorSearch","sdLiquidationAuthorSearch");
				request.setAttribute("liquidationSearchList", "liquidationSearchList");
				request.setAttribute("list", liquidationSearchList);
			}
		}

		return mapping.findForward("sdLiquidationAuthorSearch");
	}
}