/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;
import java.util.Properties;

import javax.naming.InitialContext;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.business.ejbClient.CreditProcessingMasterBussinessSessionBeanRemote;
import com.cm.vo.LoanDetailForCMVO;
import com.connect.CommonFunction;
import com.connect.LookUpInstanceFactory;
import com.connect.DaoImplInstanceFactory;
import com.cm.dao.CreditManagementDAO;
import com.cm.daoImplMYSQL.CreditManagementDAOImpl;
import com.logger.LoggerMsg;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.masters.vo.ProductMasterVo;


public class SblGblMakerDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(SblGblMakerDispatchAction.class.getName());
	
	public ActionForward sblGblSearch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		ServletContext context = getServlet().getServletContext();
			LoggerMsg.info("in Product openAddProduct()");
			HttpSession session = request.getSession();
			boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}

			DynaValidatorForm LoanDetailsCMDynaValidatorForm = (DynaValidatorForm)form;		
			LoanDetailForCMVO loanDetailForCMVO=new LoanDetailForCMVO();		
			org.apache.commons.beanutils.BeanUtils.copyProperties(loanDetailForCMVO, LoanDetailsCMDynaValidatorForm);
			CreditManagementDAO dao=(CreditManagementDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditManagementDAO.IDENTITY);
			ArrayList<LoanDetailForCMVO> list=dao.selectSblGblWaiverMakerSearch(loanDetailForCMVO.getLbxLoanNoHID(),loanDetailForCMVO.getDisbursalId());
			request.setAttribute("list", list);
			request.setAttribute("totalRecordSize", list.size());
			return mapping.findForward("searchSbl");
	}
	

	
	public ActionForward savesblDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse resopnse) throws Exception{
		ServletContext context = getServlet().getServletContext();
		HttpSession session=request.getSession(false);
		UserObject userobj=new UserObject();
		userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate="";
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
		}
		
		boolean flag=false;
		
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		DynaValidatorForm LoanDetailsCMDynaValidatorForm = (DynaValidatorForm)form;		
		LoanDetailForCMVO loanDetailForCMVO=new LoanDetailForCMVO();		
		org.apache.commons.beanutils.BeanUtils.copyProperties(loanDetailForCMVO, LoanDetailsCMDynaValidatorForm);
		CreditManagementDAO dao=(CreditManagementDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditManagementDAO.IDENTITY);
		loanDetailForCMVO.setMakerId(userId);
		loanDetailForCMVO.setMakerDate(bDate);
		boolean status=dao.saveSblGblWaiver(loanDetailForCMVO);
		logger.info("Inside Product Master Action.....displaying status...."+status);
		String sms="";
		if(status){
			sms="S";
			request.setAttribute("sms",sms);
 		}
		else{
			sms="E";
			request.setAttribute("sms",sms);
 		}
		logger.info("status"+status);
		return mapping.findForward("saveSbl");
	}
	
		
	
		public ActionForward openSblGblValuesAuthor(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)	throws Exception {
			ServletContext context = getServlet().getServletContext();
							ProductMasterVo productMasterVo=new ProductMasterVo(); 
							logger.info("In openEditProduct");
							HttpSession session = request.getSession();
							boolean flag=false;
							UserObject userobj=(UserObject)session.getAttribute("userobject");
							Object sessionId = session.getAttribute("sessionID");
							//for check User session start
							String strFlag="";	
							if(sessionId!=null)
							{
								strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
							}
							
							logger.info("strFlag .............. "+strFlag);
							if(!strFlag.equalsIgnoreCase(""))
							{
								if(strFlag.equalsIgnoreCase("sameUserSession"))
								{
									context.removeAttribute("msg");
									context.removeAttribute("msg1");
								}
								else if(strFlag.equalsIgnoreCase("BODCheck"))
								{
									context.setAttribute("msg", "B");
								}
								return mapping.findForward("logout");
							}
							DynaValidatorForm LoanDetailsCMDynaValidatorForm = (DynaValidatorForm)form;		
							LoanDetailForCMVO loanDetailForCMVO=new LoanDetailForCMVO();		
							org.apache.commons.beanutils.BeanUtils.copyProperties(loanDetailForCMVO, LoanDetailsCMDynaValidatorForm);
							CreditManagementDAO dao=(CreditManagementDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditManagementDAO.IDENTITY);
							String loanNo=(String)request.getParameter("loanNo");
							String disbursalId=(String)request.getParameter("disbursalId");
							
							if(CommonFunction.checkNull(loanNo).equalsIgnoreCase(""))
								loanNo = CommonFunction.checkNull((String)session.getAttribute("sblloanNo"));
							if(CommonFunction.checkNull(disbursalId).equalsIgnoreCase(""))
								disbursalId = CommonFunction.checkNull((String)session.getAttribute("sbldisbursalId"));
							
							session.setAttribute("sblloanNo", loanNo);
							session.setAttribute("sbldisbursalId", disbursalId);
							ArrayList<LoanDetailForCMVO> list=dao.searchSblAuthorValues(loanNo,disbursalId);
							session.setAttribute("list", list);
							request.setAttribute("totalRecordSize", list.size());
							session.setAttribute("loanNo", loanNo);
							session.setAttribute("disbursalNo", list.get(0).getDisbursalNo());
						   return mapping.findForward("showSblGblAuthorValue");	
						}
				
				
				public ActionForward openSblGblAuthor(ActionMapping mapping, ActionForm form,
						HttpServletRequest request, HttpServletResponse response) throws Exception {
					ServletContext context = getServlet().getServletContext();
					logger.info("In updateSBLMaster.......");
					HttpSession session = request.getSession();
					boolean flag=false;
					UserObject userobj=(UserObject)session.getAttribute("userobject");
					Object sessionId = session.getAttribute("sessionID");
					//for check User session start
					String strFlag="";	
					if(sessionId!=null)
					{
						strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
					}
					
					logger.info("strFlag .............. "+strFlag);
					if(!strFlag.equalsIgnoreCase(""))
					{
						if(strFlag.equalsIgnoreCase("sameUserSession"))
						{
							context.removeAttribute("msg");
							context.removeAttribute("msg1");
						}
						else if(strFlag.equalsIgnoreCase("BODCheck"))
						{
							context.setAttribute("msg", "B");
						}
						return mapping.findForward("logout");
					}
					String userId="";
					String bDate="";
					if(userobj!=null)
					{
							userId=userobj.getUserId();
							bDate=userobj.getBusinessdate();
					} 	                      
					return mapping.findForward("openSblAuthor");

				}
				
				public ActionForward savesblAuthorDetails(ActionMapping mapping, ActionForm form,
						HttpServletRequest request, HttpServletResponse resopnse) throws Exception{
					ServletContext context = getServlet().getServletContext();
					HttpSession session=request.getSession(false);
					UserObject userobj=new UserObject();
					userobj=(UserObject)session.getAttribute("userobject");
					String userId="";
					String bDate="";
					if(userobj!=null)
					{
							userId=userobj.getUserId();
							bDate=userobj.getBusinessdate();
					}
					
					boolean flag=false;
					
					Object sessionId = session.getAttribute("sessionID");
					//for check User session start
					String strFlag="";	
					if(sessionId!=null)
					{
						strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
					}
					
					logger.info("strFlag .............. "+strFlag);
					if(!strFlag.equalsIgnoreCase(""))
					{
						if(strFlag.equalsIgnoreCase("sameUserSession"))
						{
							context.removeAttribute("msg");
							context.removeAttribute("msg1");
						}
						else if(strFlag.equalsIgnoreCase("BODCheck"))
						{
							context.setAttribute("msg", "B");
						}
						return mapping.findForward("logout");
					}
					DynaValidatorForm LoanDetailsCMDynaValidatorForm = (DynaValidatorForm)form;		
					LoanDetailForCMVO loanDetailForCMVO=new LoanDetailForCMVO();		
					org.apache.commons.beanutils.BeanUtils.copyProperties(loanDetailForCMVO, LoanDetailsCMDynaValidatorForm);
					CreditManagementDAO dao=(CreditManagementDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditManagementDAO.IDENTITY);
					loanDetailForCMVO.setMakerId(userId);
					loanDetailForCMVO.setMakerDate(bDate);
					String loanNo = session.getAttribute("loanNo").toString();
					String disbursalNo = session.getAttribute("disbursalNo").toString();
					loanDetailForCMVO.setLoanId(loanNo);
					loanDetailForCMVO.setDisbursalId(disbursalNo);
					boolean status=dao.saveSblGblWaiverAuthor(loanDetailForCMVO);
					logger.info("Inside Product Master Action.....displaying status...."+status);
					String sms="";
					if(status){
						sms="S";
						request.setAttribute("sms",sms);
			 		}
					else{
						sms="E";
						request.setAttribute("sms",sms);
			 		}
					logger.info("status"+status);
					return mapping.findForward("saveAuthorSbl");
				}			
				
				public ActionForward sblGblAuthorSearch(ActionMapping mapping, ActionForm form,
						HttpServletRequest request, HttpServletResponse response)throws Exception {
					ServletContext context = getServlet().getServletContext();
						LoggerMsg.info("in Product openAddProduct()");
						HttpSession session = request.getSession();
						boolean flag=false;
						UserObject userobj=(UserObject)session.getAttribute("userobject");
						Object sessionId = session.getAttribute("sessionID");
						//for check User session start
						String strFlag="";	
						if(sessionId!=null)
						{
							strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
						}
						
						logger.info("strFlag .............. "+strFlag);
						if(!strFlag.equalsIgnoreCase(""))
						{
							if(strFlag.equalsIgnoreCase("sameUserSession"))
							{
								context.removeAttribute("msg");
								context.removeAttribute("msg1");
							}
							else if(strFlag.equalsIgnoreCase("BODCheck"))
							{
								context.setAttribute("msg", "B");
							}
							return mapping.findForward("logout");
						}

						DynaValidatorForm LoanDetailsCMDynaValidatorForm = (DynaValidatorForm)form;		
						LoanDetailForCMVO loanDetailForCMVO=new LoanDetailForCMVO();		
						org.apache.commons.beanutils.BeanUtils.copyProperties(loanDetailForCMVO, LoanDetailsCMDynaValidatorForm);
						CreditManagementDAO dao=(CreditManagementDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditManagementDAO.IDENTITY);
						ArrayList<LoanDetailForCMVO> list=dao.searchSblGblAuthorValues(loanDetailForCMVO.getLoanNo(),loanDetailForCMVO.getDisbursalId());
						request.setAttribute("list", list);
						request.setAttribute("totalRecordSize", list.size());
						return mapping.findForward("searchSblGblAuthor");
				}		
	
}