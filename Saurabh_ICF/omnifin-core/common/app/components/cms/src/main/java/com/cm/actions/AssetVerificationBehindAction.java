/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.cm.dao.assetVerificationDAO;
import com.cm.vo.AssetVerificationVO;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.lockRecord.action.LockRecordCheck;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/**
 * MyEclipse Struts Creation date: 04-04-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class AssetVerificationBehindAction  extends DispatchAction {
	private static final Logger logger = Logger.getLogger(AssetVerificationBehindAction.class.getName());
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */

			 public ActionForward assetVerificationSearch(ActionMapping mapping, ActionForm form,
						HttpServletRequest request, HttpServletResponse response)
				throws Exception {
					
					    logger.info("in AssetVerificationBehindAction...."); 
					    HttpSession session = request.getSession();
					  
						boolean flag=false;
						UserObject userobj=(UserObject)session.getAttribute("userobject");
						
						String strFlag="";
						String userId="";
						String branchId="";
						if(userobj!=null)
						{
							userId=userobj.getUserId();
							branchId=userobj.getBranchId();
						}else{
							logger.info("here in AssetVerificationBehindAction -------------");
							return mapping.findForward("sessionOut");
						}
						Object sessionId = session.getAttribute("sessionID");
						//for check User session start
						ServletContext context = getServlet().getServletContext();
						
						if(sessionId!=null)
						{
							strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
						}
						
						logger.info("strFlag .............. "+strFlag);
						if(!strFlag.equalsIgnoreCase(""))
						{
							if(strFlag.equalsIgnoreCase("sameUserSession"))
							{
								context.removeAttribute("msg");
								context.removeAttribute("msg1");
							}
							else if(strFlag.equalsIgnoreCase("BODCheck"))
							{
								context.setAttribute("msg", "B");
							}
							return mapping.findForward("logout");
						}
						request.removeAttribute("requestVo");
						request.removeAttribute("arrList");
						AssetVerificationVO  assetVerificationVO = null;
						//change by sachin
						assetVerificationDAO dao=(assetVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(assetVerificationDAO.IDENTITY);
					    logger.info("Implementation class: "+dao.getClass()); 
					    //end by sachin
//						assetVerificationDAO dao = new assetVerificationDAOImpl();
						DynaValidatorForm AssetVerificationInitiationSearchDynaValidatorForm = (DynaValidatorForm)form;
					 assetVerificationVO = new AssetVerificationVO();	
						
						org.apache.commons.beanutils.BeanUtils.copyProperties(assetVerificationVO, AssetVerificationInitiationSearchDynaValidatorForm);
						if(CommonFunction.checkNull(assetVerificationVO.getReportingToUserId()).equalsIgnoreCase(""))
						{ 
									assetVerificationVO.setReportingToUserId(userId);
								   //logger.info("When user id is not selected by the user:::::"+userId);
						}	
						assetVerificationVO.setBranchId(branchId);
						assetVerificationVO.setUserId(userId);
				
						ArrayList arrList = dao.assetVerifcationSearch(assetVerificationVO,request);
					    
					    request.setAttribute("list", arrList);
					    
					    return mapping.findForward("assetInitSearch");
				}



	 public ActionForward  assetsavegrid(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)throws Exception {
		 
				logger.info(" In the AssetVerificationInitiAction----- assetsavegrid-----");
				
				HttpSession session = request.getSession();
				boolean flag=false;
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				String userId ="";
				
				if(userobj!=null){
					userId = userobj.getUserId();
					
				}else{
					logger.info("here in assetsavegrid() session is out----------------");
					return mapping.findForward("sessionOut");
				}
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				//change by sachin
				assetVerificationDAO dao=(assetVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(assetVerificationDAO.IDENTITY);
			    logger.info("Implementation class: "+dao.getClass()); 
			    //end by sachin
//				assetVerificationDAO dao = new assetVerificationDAOImpl();
				//DynaValidatorForm AssetVerificationInitiationSearchDynaValidatorForm = (DynaValidatorForm)form;
				DynaValidatorForm AssetVerificationInitiationDynaValidatorForm = (DynaValidatorForm)form;						
				AssetVerificationVO  assetVerificationVO = new AssetVerificationVO();	
				org.apache.commons.beanutils.BeanUtils.copyProperties(assetVerificationVO, AssetVerificationInitiationDynaValidatorForm);

				String assetVerInitId = request.getParameter("assetVerId");
				logger.info("assetVerInitId...."+assetVerInitId);
				assetVerificationVO.setAssetVerificationID(assetVerInitId);
				
				 
				logger.info("function id is ........................................"+session.getAttribute("functionId").toString());
				String functionId="";
	

			
				if(session.getAttribute("functionId")!=null)
				{
					functionId=session.getAttribute("functionId").toString();
				}
				
				
				//ServletContext context=getServlet().getServletContext();
				if(context!=null)
	    		{
				flag = LockRecordCheck.lockCheck(userId,functionId,assetVerInitId,context);
				logger.info("Flag ........................................ "+flag);
				if(!flag)
				{
					logger.info("Record is Locked");			
					request.setAttribute("dss", "Locked");
					request.setAttribute("recordId", assetVerInitId);
					//request.setAttribute("userId", userId);
					return mapping.findForward("success");
				}
	    		}
				if(request.getParameter("appraiser").equalsIgnoreCase("Internal")){
				assetVerificationVO.setAppraiser("I");
				}else{
					assetVerificationVO.setAppraiser("EA");
				}
				assetVerificationVO.setLoanNo(request.getParameter("loanNo"));
				assetVerificationVO.setLbxLoanNo(request.getParameter("lbxLoanNo"));
				assetVerificationVO.setLbxextApprHID(request.getParameter("lbxextApprHID"));
				assetVerificationVO.setLbxUserId(request.getParameter("lbxUserId"));
				assetVerificationVO.setInternalAppraiser(request.getParameter("internalAppraiser"));

				assetVerificationVO.setExternalAppraiser(request.getParameter("externalAppraiser"));
			
	      
		         logger.info("---assetVerificationVO.getLoanNo()----->"+assetVerificationVO.getLoanNo());
				logger.info("---assetVerificationVO.getLbxUserId()----->"+assetVerificationVO.getLbxUserId());
   	
      logger.info("---assetVerificationVO.getLbxextApprHID()----->"+assetVerificationVO.getLbxextApprHID());
    
      logger.info("---assetVerificationVO.getAppraiser()--->"+assetVerificationVO.getAppraiser());
     
      logger.info("---getLbxLoanNo----->"+assetVerificationVO.getLbxLoanNo());
      
      logger.info("---getLoanNo---->"+assetVerificationVO.getLoanNo());
				
				 request.setAttribute("requestVo",  assetVerificationVO);
				
				ArrayList<AssetVerificationVO> assetList= dao.getAssetdatagridaftersave(assetVerificationVO);
				// request.setAttribute("requestVo",  request.getAttribute("requestVo"));
				 request.setAttribute("statusflag", "forward");
				 request.setAttribute("assetList", assetList);
				 
				return mapping.findForward("success");
			}
	
	 public ActionForward  deleteasset(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)throws Exception {

		 DynaValidatorForm AssetVerificationInitiationDynaValidatorForm = (DynaValidatorForm)form;
			AssetVerificationVO  assetVerificationVO = new AssetVerificationVO();	
			
		
		 logger.info("-------deleteasset()-------->");
		 String loanid=request.getParameter("loanid");
		 String appraiserid=request.getParameter("appraiserid");
		 String apprtype=request.getParameter("apprtype");
		 String assets=request.getParameter("assetIDList");
		 String[] assetIDList=assets.split("/");
		//change by sachin
		assetVerificationDAO dao=(assetVerificationDAO)DaoImplInstanceFactory.getDaoImplInstance(assetVerificationDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 
		//end by sachin
//		 assetVerificationDAO dao = new assetVerificationDAOImpl();
		
		boolean status= dao.deleteassetid(assetIDList,loanid,appraiserid,apprtype);
		 logger.info("----------status------>"+status);
		 request.setAttribute("requestVo",  assetVerificationVO);
		if(status){
			request.setAttribute("dss", 'D');
		}
			 return mapping.findForward("success");
	 }
	
	
	
}