/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.cm.dao.LinkLoanDAO;
import com.cm.vo.UpdateAssetVO;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

public class UpdateAssetAuthorDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(UpdateAssetAuthorDispatchAction.class.getName());

	
	public ActionForward saveAuthorDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		
		logger.info("In saveAuthorDetails.......");
		
		ServletContext context = getServlet().getServletContext();
		HttpSession session = request.getSession();
		String userId = null;
		String makerDate = null;
		UserObject userobj = (UserObject) session.getAttribute("userobject");
		if (userobj != null) {
			userId = userobj.getUserId();
			makerDate=userobj.getBusinessdate();
		} else {
			logger.info("here in execute method of UpdateAssetBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		// for check User session start
		String strFlag = null;
		if (sessionId != null) {
			strFlag = UserSessionCheck.checkSameUserSession(userobj, sessionId
					.toString(), "", request);
		}

		logger.info("strFlag .............. " + strFlag);
		if (!strFlag.equalsIgnoreCase("")) {
			if (strFlag.equalsIgnoreCase("sameUserSession")) {
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			} else if (strFlag.equalsIgnoreCase("BODCheck")) {
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		session.removeAttribute("userId");//For lov
		session.removeAttribute("branchId");//For lov
		UpdateAssetVO updateAssetVO = new UpdateAssetVO();
		DynaValidatorForm UpdateVehicleDynaValidatorForm = (DynaValidatorForm) form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(updateAssetVO,
				UpdateVehicleDynaValidatorForm);
		updateAssetVO.setUserId(CommonFunction.checkNull(userId));
		updateAssetVO.setMakerDate(CommonFunction.checkNull(makerDate));
	
		updateAssetVO.setLbxLoanId(session.getAttribute("sesionAssetVehicalLoanId").toString());
		updateAssetVO.setAssetId(session.getAttribute("sesionAssetVehicalAssetId").toString());
		

		LinkLoanDAO dao = (LinkLoanDAO) DaoImplInstanceFactory
				.getDaoImplInstance(LinkLoanDAO.IDENTITY);
		logger.info("Implementation class: " + dao.getClass());
		String sms = null;
		// ArrayList list = dao.openEditVehical(updateAssetVO);
		//String checkRegNoCount=dao.checkRegNo(updateAssetVO);
//		if(CommonFunction.checkNull(checkRegNoCount).equalsIgnoreCase("0"))
//		{
			boolean status = dao.saveUpdateAsset(updateAssetVO);
			
			if (status) {
				sms = "S";
				request.setAttribute("sms", sms);
				if(CommonFunction.checkNull(updateAssetVO.getAuthorDecission()).equalsIgnoreCase("A"))
					request.setAttribute("decision", "Data Approved Successfully.");
				else if(CommonFunction.checkNull(updateAssetVO.getAuthorDecission()).equalsIgnoreCase("X"))
					request.setAttribute("decision", "Data Rejected Successfully.");
				else
					request.setAttribute("decision", "Data Send Back Successfully.");
				
				ArrayList<UpdateAssetVO> list = new ArrayList<UpdateAssetVO>();
	
				list.add(updateAssetVO);
				request.setAttribute("editVal", "editVal");
				request.setAttribute("list", list);
			} else {
				sms = "E";
				request.setAttribute("sms", sms);
				ArrayList<UpdateAssetVO> list = new ArrayList<UpdateAssetVO>();
	
				list.add(updateAssetVO);
				request.setAttribute("editVal", "editVal");
				request.setAttribute("list", list);
	
			}
		//}
	/*	else
		{
			sms = "DR";
			request.setAttribute("sms", sms);
			ArrayList<UpdateAssetVO> list = new ArrayList<UpdateAssetVO>();

			list.add(updateAssetVO);
			request.setAttribute("editVal", "editVal");
			request.setAttribute("list", list);
		}*/
			dao=null;
			form.reset(mapping, request);
		return mapping.getInputForward();

	}

// Method for link
	
	public ActionForward openAuthorVehical(ActionMapping mapping,ActionForm form, HttpServletRequest request,HttpServletResponse response) throws Exception {

		logger.info("In openAuthorVehical");
		ServletContext context = getServlet().getServletContext();
		HttpSession session = request.getSession();
		boolean flag = false;
		UserObject userobj = (UserObject) session.getAttribute("userobject");
		if (userobj== null) {
			logger.info("here in execute method of UpdateAssetBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		// for check User session start
		String strFlag = "";
		if (sessionId != null) {
			strFlag = UserSessionCheck.checkSameUserSession(userobj, sessionId.toString(), "", request);
		}

		logger.info("strFlag .............. " + strFlag);
		if (!strFlag.equalsIgnoreCase("")) {
			if (strFlag.equalsIgnoreCase("sameUserSession")) {
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			} else if (strFlag.equalsIgnoreCase("BODCheck")) {
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		session.removeAttribute("userId");//For lov
		session.removeAttribute("branchId");//For lov
		session.removeAttribute("sessionAssetVehicalList");//For Author Screen
		session.removeAttribute("invoiceCheckBox");//For Check Box
		session.removeAttribute("rcCheckBox");//For Check Box
		session.removeAttribute("insuranceCheckBox");//For Check Box
		UpdateAssetVO updateAssetVO = new UpdateAssetVO();
		updateAssetVO.setLbxLoanId(request.getParameter("loanId"));
		updateAssetVO.setAssetId(request.getParameter("assetId"));

		LinkLoanDAO dao = (LinkLoanDAO) DaoImplInstanceFactory.getDaoImplInstance(LinkLoanDAO.IDENTITY);
		logger.info("Implementation class: " + dao.getClass());

		ArrayList list = dao.getAuthorScreenAssetVehical(updateAssetVO);
		session.setAttribute("sessionAssetVehicalList", list);
		session.setAttribute("sesionAssetVehicalLoanId", updateAssetVO.getLbxLoanId());
		session.setAttribute("sesionAssetVehicalAssetId", updateAssetVO.getAssetId());

		if (!list.isEmpty()) {
			updateAssetVO = (UpdateAssetVO) list.get(0);
		
			 if(CommonFunction.checkNull(updateAssetVO.getInvoiceUpdateCheckBox()).equalsIgnoreCase("Y"))
			 {
				 session.setAttribute("invoiceCheckBox", "Y");
			 }
			 if(CommonFunction.checkNull(updateAssetVO.getRcUpdateCheckBox()).equalsIgnoreCase("Y"))
			 {
				 session.setAttribute("rcCheckBox", "Y");
			 }
			 if(CommonFunction.checkNull(updateAssetVO.getInsuranceUpdateCheckBox()).equalsIgnoreCase("Y"))
			 {
				 session.setAttribute("insuranceCheckBox", "Y");
			 }
		}

		form.reset(mapping, request);
		dao=null;
		return mapping.findForward("openAuthor");
	}
	//method for Author Approval Screen
	public ActionForward openAuthorAssetApprovalScreen(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		logger.info("In openAuthorAssetApprovalScreen ");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info(" in authorScreen method of UpdateAssetAuthorDispatch  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");

		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
			
		form.reset(mapping, request);
		return mapping.findForward("approval");
	}
	
}