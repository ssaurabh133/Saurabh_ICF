/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;
import java.util.ResourceBundle;
import java.util.logging.Logger;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.validator.DynaValidatorForm;

import com.connect.CommonFunction;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.cm.actionform.ReportsForm;
import com.cm.dao.ReportsDAO;
import com.cm.daoImplMSSQL.MSSQLReportsDAOImpl;
import com.cm.daoImplMYSQL.ReportsDAOImpl;
import com.cm.vo.ChequeAllocationVo;

public class ChequeAllocationDetailAction extends Action {
	
	private static final Logger logger = Logger.getLogger(ReportsAction.class.getName());
    public ActionForward execute(ActionMapping mapping, ActionForm form,
		HttpServletRequest request, HttpServletResponse response)throws Exception 

		
		{
    	ResourceBundle resource = ResourceBundle.getBundle("com.yourcompany.struts.utill");
		String dbType=resource.getString("lbl.dbType");

    	HttpSession session = request.getSession();

		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info(" in execute method of  ReportsAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			strFlag=null;
			return mapping.findForward("logout");
		}
		
		ChequeAllocationVo chequeAllocationVo = new ChequeAllocationVo();
		DynaValidatorForm dynaValidatorForm = (DynaValidatorForm) form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(chequeAllocationVo, dynaValidatorForm);
		
		logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
	

    	
    	if(dbType.equalsIgnoreCase("MSSQL"))
		{
    		 ReportsDAO dao1 = new MSSQLReportsDAOImpl();
    	    	ArrayList<ReportsForm> list1=dao1.getReportFormat();
    	    	request.setAttribute("list2",list1);
    	    	
    	    	if(CommonFunction.checkNull(request.getParameter("actionName")).equalsIgnoreCase("search"))
    	    	{
    	    
    	    	ArrayList datalist=dao1.getReportData(currentPageLink,chequeAllocationVo );
    	    	request.setAttribute("list",datalist);
    	    	request.setAttribute("showGrid","showGrid");
    	    	
    	    	}	
		}
		else
		{
			 ReportsDAO dao = new ReportsDAOImpl();
		    	ArrayList<ReportsForm> list1=dao.getReportFormat();
		    	request.setAttribute("list2",list1);
		    	
		    	
		    	if(CommonFunction.checkNull(request.getParameter("actionName")).equalsIgnoreCase("search"))
		    	{
		    	
		    	ArrayList datalist=dao.getReportData(currentPageLink,chequeAllocationVo );
		    	request.setAttribute("list",datalist);
		    	request.setAttribute("showGrid","showGrid");
		    	
		    	}	

		}
    	
		strFlag=null;
    	dbType=null;
    	resource=null;
    	return mapping.findForward("success");
	
	}

}
