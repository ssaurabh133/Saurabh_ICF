/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 05-23-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class DocsCollectionInCMBehindAction extends Action {
	private static final Logger logger = Logger.getLogger(DocsCollectionInCMBehindAction.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		logger.info("In  DocsCollectionInCMBehindAction ---------->");
		HttpSession session =  request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in execute method of DocsCollectionInCMBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
	
        logger.info("strFlag .............. "+strFlag);
	    if(!strFlag.equalsIgnoreCase(""))
			{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
	  //code added by neeraj
		String functionId=(String)session.getAttribute("functionId");
		int id=Integer.parseInt(functionId);
		String source="";
		if(id==4000122 ||id==4000123)
			source="ED";
		else
			source="NE";	
		if(id==4000122)
		{
			session.removeAttribute("cmAuthor");
			session.removeAttribute("viewLoan");
		}
		//neeraj space end
		
		
	    		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	    		logger.info("Implementation class: "+service.getClass()); 		// changed by asesh
				//CreditProcessingDAO service = new CreditProcessingDAOImpl();				
				String loanId = "";				
				if(session.getAttribute("loanId")!=null)
					loanId=session.getAttribute("loanId").toString();
				else if(session.getAttribute("maxIdInCM")!=null)
					loanId=session.getAttribute("maxIdInCM").toString();
				logger.info("In DocsCollectionInCMBehindAction loan id: " +loanId);
				if((loanId!=null && !loanId.equalsIgnoreCase("")))
				{
					logger.info("In DocsCollectionInCMBehindAction execute loanId: " +loanId);
					String status=service.collectDocuments("LIM",loanId,"PRD",source);// 1 IS LoanID
					session.setAttribute("procvalue", status);
					 String loanFlag="";
						if(request.getAttribute("status")!=null){
							 loanFlag=request.getAttribute("status").toString();
						}
						if(request.getParameter("status")!=null){
							 loanFlag=request.getParameter("status").toString();
						}
						if(CommonFunction.checkNull(loanFlag).equalsIgnoreCase("UWA")){
						session.setAttribute("loanFlag", loanFlag);
						}else{
							session.removeAttribute("loanFlag");
						}
					session.setAttribute("loanInitDocs", "CM");
					return mapping.findForward("success");
				}
				else
				{
					request.setAttribute("back", "back");
					return mapping.findForward("backSuccess");
				}
			}
}