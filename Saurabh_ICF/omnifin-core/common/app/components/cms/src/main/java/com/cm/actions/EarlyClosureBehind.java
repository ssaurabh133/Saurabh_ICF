/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import com.cm.dao.CancellationDAO;
import com.cm.dao.EarlyClosureDAO;
import com.cm.dao.MaturityClosureDAO;
import com.cm.vo.CancellationVO;
import com.cm.vo.ClosureVO;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.lockRecord.action.LockRecordCheck;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 05-20-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class EarlyClosureBehind extends DispatchAction {
	private static final Logger logger = Logger.getLogger(EarlyClosureBehind.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	
	public ActionForward openClosureValues(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		logger.info("Inside EarlyClosureBehind........openClosureValues");
		logger.info("::::::::::::::::In EarlyClosureDAOImpl");
		HttpSession session =  request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId ="";
		String businessDate ="";
		if(userobj!=null){
		userId= userobj.getUserId();
		businessDate=userobj.getBusinessdate();
		}else{
			logger.info("here in openClosureValues method of EarlyClosureBehind action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	

		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String loanId = CommonFunction.checkNull(request.getParameter("loanId"));
		String terminationId = CommonFunction.checkNull(request.getParameter("terminationId"));
		String type=CommonFunction.checkNull(request.getParameter("type"));
		String fwd="";
		
		session.setAttribute("loanId", loanId);
		//CreditManagementDAO service = new CreditManagementDAOImpl();
		//EarlyClosureDAO service = new EarlyClosureDAOImpl();
		EarlyClosureDAO service=(EarlyClosureDAO)DaoImplInstanceFactory.getDaoImplInstance(EarlyClosureDAO.IDENTITY);
		logger.info("Implementation class: "+service.getClass()); 
		String checkFlag=service.earlyClosureFlag();
		session.setAttribute("checkFlag",checkFlag);
		String realizeFlag=service.earlyClosureRealizeFlag();
		session.setAttribute("realizeFlag",realizeFlag);

		if(type.equals("T"))
		{
			session.removeAttribute("closureNew");
			session.removeAttribute("closureDataDisabled");
			session.removeAttribute("earlyClosureLabel");
			session.removeAttribute("maturityClosureLabel");
            //code added by neeraj tripathi
			request.setAttribute("saveCompleted","Y");
			request.setAttribute("waiveAllocated","Y");
			request.setAttribute("changeWaiveOff","N");
            //tripathi's space end
			//Nishant Space Starts
			String netReceiveablePayable=service.netReceivablePayableFlag();
			request.setAttribute("netReceiveablePayableF", netReceiveablePayable);
			//Nishant Space ends
			session.removeAttribute("terminationId");
			
			logger.info("function id is ........................................"+session.getAttribute("functionId").toString());
			String functionId="";
			
			
			if(session.getAttribute("functionId")!=null)
			{
				functionId=session.getAttribute("functionId").toString();
			}
			
			
			//ServletContext context=getServlet().getServletContext();
			if(context!=null)
			{
			flag = LockRecordCheck.lockCheck(userId,functionId,loanId,context);
			logger.info("Flag ........................................ "+flag);
			if(!flag)
			{
				logger.info("Record is Locked");			
				request.setAttribute("sms", "Locked");
				request.setAttribute("recordId", loanId);
				request.setAttribute("earlyClosure","earlyClosure");
				return mapping.findForward("search");
			}
			}
			ArrayList<ClosureVO> closureData = service.selectClosureData(loanId,terminationId);
			session.setAttribute("closureData", closureData);
			session.setAttribute("type", type);
			request.setAttribute("earlyClosureLabel","earlyClosureLabel");
			logger.info("Inside EarlyClosureBehind........openClosureValues for Early Closure");
			fwd="openClosureWithData";
		}
		if(type.equals("C"))
		{
			session.removeAttribute("closureNew");
			session.removeAttribute("closureDataDisabled");
			session.removeAttribute("earlyClosureLabel");
			session.removeAttribute("maturityClosureLabel");
			session.removeAttribute("terminationId");
			//code added by neeraj tripathi
			request.setAttribute("saveCompleted","Y");
			request.setAttribute("waiveAllocated","Y");
			request.setAttribute("changeWaiveOff","N");
            //tripathi's space end
			
			logger.info("function id is ........................................"+session.getAttribute("functionId").toString());
			String functionId="";
		
			if(session.getAttribute("functionId")!=null)
			{
				functionId=session.getAttribute("functionId").toString();
			}
			
			
			//ServletContext context=getServlet().getServletContext();
			if(context!=null)
			{
			flag = LockRecordCheck.lockCheck(userId,functionId,loanId,context);
			logger.info("Flag ........................................ "+flag);
			if(!flag)
			{
				logger.info("Record is Locked");			
				request.setAttribute("sms", "Locked");
				request.setAttribute("recordId", loanId);
				request.setAttribute("maturityClosure", "maturityClosure");
				return mapping.findForward("maturitysearch");
			}
			}
			ArrayList<ClosureVO> closureData = service.selectClosureData(loanId,terminationId);
			session.setAttribute("closureData", closureData);
			session.setAttribute("type", type);
			request.setAttribute("maturityClosureLabel","maturityClosureLabel");
			logger.info("Inside EarlyClosureBehind........openClosureValues for Maturity Closure");
			fwd="openMaturityClosureWithData";
		}
		if(type.equals("X"))
		{
			
			String makerDate=service.getMakerDate(loanId);
			String checkFlag1=service.earlyClosureFlag();
			session.setAttribute("checkFlag",checkFlag1);
			session.setAttribute("businessDate",businessDate);
			session.setAttribute("makerDate",makerDate);
			
			session.removeAttribute("closureData");
			session.removeAttribute("type");
			session.removeAttribute("closureDataDisabled");
			session.removeAttribute("earlyClosureLabel");
			session.removeAttribute("maturityClosureLabel");
			session.removeAttribute("terminationId");
			session.removeAttribute("cancellationDataDisabled");
			
			session.setAttribute("type", type);
			
			logger.info("function id is ........................................"+session.getAttribute("functionId").toString());
			String functionId="";
			
			if(session.getAttribute("functionId")!=null)
			{
				functionId=session.getAttribute("functionId").toString();
			}
			
			
			//ServletContext context=getServlet().getServletContext();
			if(context!=null)
			{
			flag = LockRecordCheck.lockCheck(userId,functionId,loanId,context);
			logger.info("Flag ........................................ "+flag);
			if(!flag)
			{
				logger.info("Record is Locked");			
				request.setAttribute("sms", "Locked");
				request.setAttribute("recordId", loanId);
				request.setAttribute("cancellationClosure", "cancellationClosure");
				return mapping.findForward("search");
			}
			}
			ArrayList<CancellationVO> cancellationData = service.selectCancellationData(loanId,terminationId);
			request.setAttribute("cancellationData", cancellationData);
			logger.info("Inside EarlyClosureBehind........openClosureValues for Cancellation");
			fwd="openCancellationClosureWithData";
		}
		return mapping.findForward(fwd);
	}
	
	public ActionForward openEarlyClosureAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		logger.info("Inside Early Closure Behind Action..........openEarlyClosureAuthor");
		logger.info("::::::::::::::::In EarlyClosureDAOImpl");
		HttpSession session =  request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId ="";
		if(userobj!=null){
		userId= userobj.getUserId();
		}else{
			logger.info("here in openEarlyClosureAuthor method of EarlyClosureBehind  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//CreditManagementDAO service = new CreditManagementDAOImpl();
		EarlyClosureDAO service=(EarlyClosureDAO)DaoImplInstanceFactory.getDaoImplInstance(EarlyClosureDAO.IDENTITY);
		logger.info("Implementation class: "+service.getClass()); 
        
		String loanId = request.getParameter("loanId");
		String terminationId = CommonFunction.checkNull(request.getParameter("terminationId"));
				
		String closureStatus = request.getParameter("closureStatus");
		
		logger.info("Inside openEarlyClosureAuthor.........loan id: "+loanId);
		logger.info("Inside openEarlyClosureAuthor.........closureStatus: "+closureStatus);
		session.removeAttribute("closureNew");
		session.removeAttribute("closureData");
		session.removeAttribute("cancellationData");
		session.removeAttribute("cancellationDataDisabled");
		session.removeAttribute("maturityClosureLabel");
		session.removeAttribute("terminationId");
		
		session.setAttribute("loanId",loanId);
		session.setAttribute("closureStatus",closureStatus);
		session.setAttribute("earlyClosureLabel","earlyClosureLabel");
		session.setAttribute("terminationId",terminationId);
		
		
		
		logger.info("function id is ........................................"+session.getAttribute("functionId").toString());
		String functionId="";

		
		if(session.getAttribute("functionId")!=null)
		{
			functionId=session.getAttribute("functionId").toString();
		}
		
		//ServletContext context=getServlet().getServletContext();
		if(context!=null)
		{
		flag = LockRecordCheck.lockCheck(userId,functionId,loanId,context);
		logger.info("Flag ........................................ "+flag);
		if(!flag)
		{
			logger.info("Record is Locked");			
			request.setAttribute("sms", "Locked");
			request.setAttribute("recordId", loanId);
			request.setAttribute("earlyClosureAuthor", "earlyClosureAuthor");
			return mapping.findForward("earlyClosureAuthorSearch");
		}
		}
		ArrayList<ClosureVO> closureDataDisabled = service.selectClosureData(session.getAttribute("loanId").toString(),terminationId);
		session.setAttribute("closureDataDisabled", closureDataDisabled);
		logger.info(closureDataDisabled.get(0).getvClosureType());
		return mapping.findForward("openEarlyClosureAuthorWithData");
	}
	
	public ActionForward openMaturityClosureAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		logger.info("Inside Early Closure Behind Action..........openMaturityClosureAuthor");
		HttpSession session =  request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId ="";
		if(userobj!=null){
			userId= userobj.getUserId();
		}else{
			logger.info("here in openMaturityClosureAuthor method of  EarlyClosureBehind action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String loanId = request.getParameter("loanId");
		String terminationId = CommonFunction.checkNull(request.getParameter("terminationId"));
		String closureStatus = request.getParameter("closureStatus");
		
		logger.info("Inside openMaturityClosureAuthor.........loan id: "+loanId);
		logger.info("Inside openMaturityClosureAuthor.........closureStatus: "+closureStatus);
		
		session.removeAttribute("closureNew");
		session.removeAttribute("closureData");
		session.removeAttribute("cancellationData");
		session.removeAttribute("cancellationDataDisabled");
		session.removeAttribute("earlyClosureLabel");
		session.removeAttribute("terminationId");
		
		session.setAttribute("loanId",loanId);
		session.setAttribute("closureStatus",closureStatus);
		session.setAttribute("maturityClosureLabel","maturityClosureLabel");
		session.setAttribute("terminationId",terminationId);
		//CreditManagementDAO service = new CreditManagementDAOImpl();
		//MaturityClosureDAO service = new MaturityClosureDAOImpl();
		MaturityClosureDAO service=(MaturityClosureDAO)DaoImplInstanceFactory.getDaoImplInstance(MaturityClosureDAO.IDENTITY);
		logger.info("Implementation class: "+service.getClass()); 
		logger.info("function id is ........................................"+session.getAttribute("functionId").toString());
		String functionId="";

		if(session.getAttribute("functionId")!=null)
		{
			functionId=session.getAttribute("functionId").toString();
		}
		
		//ServletContext context=getServlet().getServletContext();
		if(context!=null)
		{
		flag = LockRecordCheck.lockCheck(userId,functionId,loanId,context);
		logger.info("Flag ........................................ "+flag);
		if(!flag)
		{
			logger.info("Record is Locked");			
			request.setAttribute("sms", "Locked");
			request.setAttribute("recordId", loanId);
			request.setAttribute("maturityClosureAuthor", "maturityClosureAuthor");
			return mapping.findForward("earlyMaturityAuthorSearch");
		}
		}
		ArrayList<ClosureVO> closureDataDisabled = service.selectClosureData(session.getAttribute("loanId").toString(),terminationId);
		session.setAttribute("closureDataDisabled", closureDataDisabled);
		return mapping.findForward("openMaturityClosureAuthorWithData");
	}
	
	public ActionForward openCancellationAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		logger.info("Inside Early Closure Behind Action..........openCancellationAuthor");
		HttpSession session =  request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId ="";
		if(userobj!=null){
			userId= userobj.getUserId();
		}else{
			logger.info("here in openCancellationAuthor method of EarlyClosureBehind action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String loanId = "";
		String closureStatus = "";
		if(CommonFunction.checkNull(request.getParameter("loanId")).equalsIgnoreCase(""))
		{
			loanId = session.getAttribute("loanId").toString();
		}
		else
			loanId=CommonFunction.checkNull(request.getParameter("loanId"));
		if(CommonFunction.checkNull(request.getParameter("closureStatus")).equalsIgnoreCase(""))
		{
			closureStatus = session.getAttribute("closureStatus").toString();
		}
		else
			closureStatus = CommonFunction.checkNull(request.getParameter("closureStatus"));
		
		String terminationId = CommonFunction.checkNull(request.getParameter("terminationId"));
		
		logger.info("Inside openCancellationAuthor.........loan id: "+loanId);
		logger.info("Inside openCancellationAuthor.........closureStatus: "+closureStatus);
		session.removeAttribute("closureNew");
		session.removeAttribute("closureData");
		session.removeAttribute("cancellationData");
		session.removeAttribute("closureDataDisabled");
		session.removeAttribute("terminationId");
		
		session.setAttribute("loanId",loanId);
		session.setAttribute("closureStatus",closureStatus);
		session.setAttribute("terminationId",terminationId);
		//CreditManagementDAO service = new CreditManagementDAOImpl();
		//change by sachin
		CancellationDAO service=(CancellationDAO)DaoImplInstanceFactory.getDaoImplInstance(CancellationDAO.IDENTITY);
	    logger.info("Implementation class: "+service.getClass());
	    //end by sachin	
//		CancellationDAO service = new CancellationDAOImpl();
		
		logger.info("function id is ........................................"+session.getAttribute("functionId").toString());
		String functionId="";

		
		if(session.getAttribute("functionId")!=null)
		{
			functionId=session.getAttribute("functionId").toString();
		}
		
		//ServletContext context=getServlet().getServletContext();
		if(context!=null)
		{
		flag = LockRecordCheck.lockCheck(userId,functionId,loanId,context);
		logger.info("Flag ........................................ "+flag);
		if(!flag)
		{
			logger.info("Record is Locked");			
			request.setAttribute("sms", "Locked");
			request.setAttribute("recordId", loanId);
			request.setAttribute("cancellationClosureAuthor", "cancellationClosureAuthor");
			return mapping.findForward("earlyMaturityAuthorSearch");
		}
		}
		ArrayList<CancellationVO> cancellationDataDisabled = service.selectCancellationData(session.getAttribute("loanId").toString(),terminationId);
		session.setAttribute("cancellationDataDisabled", cancellationDataDisabled);
		return mapping.findForward("openCancellationAuthorWithData");
	}
}