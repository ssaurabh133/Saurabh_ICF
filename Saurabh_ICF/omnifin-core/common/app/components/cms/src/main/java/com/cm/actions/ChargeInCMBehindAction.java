/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import com.cm.dao.LoanInitiationDAO;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.ChargeVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;


/** 
 * MyEclipse Struts
 * Creation date: 05-23-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class ChargeInCMBehindAction extends DispatchAction{
	private static final Logger logger = Logger.getLogger(ChargeInCMBehindAction.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward getChargeInCm(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		HttpSession session =  request.getSession();
	//	boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null)
			return mapping.findForward("sessionOut");
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag=null;	
		if(sessionId!=null)
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj 
		String functionId=(String)session.getAttribute("functionId");
		if(CommonFunction.checkNull(functionId).trim().equalsIgnoreCase(""))
			functionId="0";
		int id=Integer.parseInt(functionId);
		if(id==4000122 || id==4000123)
		{
			session.setAttribute("cmAuthor","cmAuthor");
			session.setAttribute("viewLoan","viewLoan");
		}
		if(id==4000106 || id==4000122)
		{
			session.removeAttribute("underWriterViewData");
			session.removeAttribute("leadNo");
			session.removeAttribute("dealHeader");
			session.removeAttribute("dealId");
			session.removeAttribute("leadInfo");
			session.removeAttribute("viewDeal");
			session.removeAttribute("dealCatList");
			session.removeAttribute("sourceTypeList");
			session.removeAttribute("checkLoginUserLevel");
			session.removeAttribute("creditApprovalList");
			session.removeAttribute("leadMValue");
			session.removeAttribute("bsflag");
	
		}
		//neeraj space end 
		CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 
		//CreditProcessingDAO dao = new CreditProcessingDAOImpl();				
		String loanId = null;		 
		if(session.getAttribute("loanId")!=null)
			loanId=session.getAttribute("loanId").toString();
		else if(session.getAttribute("maxIdInCM")!=null)
			loanId=session.getAttribute("maxIdInCM").toString();
		
		if((loanId!=null && !loanId.equalsIgnoreCase("")))
		{
			String f=CommonFunction.editableFlag();
	    	if(f!=null && f.equalsIgnoreCase("N"))
				request.setAttribute("cmAuthor", "cmAuthor");
	    	//	mradul starts
			ArrayList charges = dao.getchargesDetailInCM("LIM",loanId); //dealCapturing,deal ID,customerId
	       	String roundTypeQuery="SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY = 'GEN_ROUND_TYPE'";
		//	logger.info("roundTypeQuery  : "+roundTypeQuery);	
			String roundType=ConnectionDAO.singleReturn(roundTypeQuery);
			//logger.info("roundType  : "+roundType);	
			request.setAttribute("roundType", roundType);
			String getRoundParaQuery="SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY = 'GEN_ROUND_PARA'";
			//logger.info("getRoundParaQuery  : "+getRoundParaQuery);	
			String getRoundPara=ConnectionDAO.singleReturn(getRoundParaQuery);
			//logger.info("getRoundPara  : "+getRoundPara);
			request.setAttribute("roundPara", getRoundPara);
			String customerCharge=null;
			String customerFinalCharge=null;
			if(charges.size()>0){
				ChargeVo vo = (ChargeVo) charges.get(0);
				customerCharge = vo.getCustomerCharge();
				customerFinalCharge=vo.getCustomerFinalCharge();
				logger.info("In ChargeBehindAction(refreshCharge) charges  "+ charges +"customerCharge:::::::"+customerCharge+"customerFinalCharge::::::"+customerFinalCharge);
			}
			request.setAttribute("customerCharge",customerCharge);
			request.setAttribute("customerFinalCharge",customerFinalCharge);
			request.setAttribute("charges", charges);
			request.setAttribute("source", "N");
			return mapping.findForward("success");
		}
		else
		{
			 request.setAttribute("back", "back");
			 return mapping.findForward("backSuccess");
		}
		
	}
	public ActionForward refreshChargeIncm(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		logger.info("In ChargeInCMBehindAction refreshChargeIncm ");
		
		HttpSession session =  request.getSession();
	//	boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in refreshChargeIncm method of ChargeInCMBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag=null;	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//CreditProcessingDAO dao = new CreditProcessingDAOImpl();
		LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 
		
		String loanId = null;
		 
		if(session.getAttribute("loanId")!=null)
		{
			loanId=session.getAttribute("loanId").toString();
		}
		else if(session.getAttribute("maxIdInCM")!=null)
		{
			loanId=session.getAttribute("maxIdInCM").toString();
		}
		
		logger.info("In ChargeInCMBehindAction loan id: " +loanId);
		if((loanId!=null && !loanId.equalsIgnoreCase("")))
		{
			//  
	       	ArrayList charges = dao.refreshchargesDetailInCM("LIM",loanId); //dealCapturing,deal ID,customerId	       	
//	       	RefreshFlagVo vo1 = new RefreshFlagVo();    
//	       	
//    		String repayQ="select LOAN_REPAYMENT_TYPE from cr_loan_dtl where LOAN_ID="+loanId;
//		    logger.info("Repayment Query: "+repayQ);
//		    String repayType=ConnectionDAO.singleReturn(repayQ);
//			logger.info("Repayment Type:"+repayType);
//			
//			if(repayType!=null && repayType.equalsIgnoreCase("N"))
//			{
//			    RefreshFlagVo vo = new RefreshFlagVo();
//				vo.setRecordId(Integer.parseInt(loanId));
//				vo.setModuleName("CM");
//				vo.setTabIndex(3);
//				vo.setNonInstallment(repayType);
//				RefreshFlagValueInsert.updateRefreshFlag(vo);
//			}
			// Start By Prashant
			String roundTypeQuery="SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY = 'GEN_ROUND_TYPE'";
			//logger.info("roundTypeQuery  : "+roundTypeQuery);	
			String roundType=ConnectionDAO.singleReturn(roundTypeQuery);
			//logger.info("roundType  : "+roundType);	
			request.setAttribute("roundType", roundType);
			String getRoundParaQuery="SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY = 'GEN_ROUND_PARA'";
			//logger.info("getRoundParaQuery  : "+getRoundParaQuery);	
			String getRoundPara=ConnectionDAO.singleReturn(getRoundParaQuery);
			//logger.info("getRoundPara  : "+getRoundPara);
			request.setAttribute("roundPara", getRoundPara);
		// End By Prashant	
			String customerCharge=null;
			String customerFinalCharge=null;
			if(charges.size()>0){
				ChargeVo vo = (ChargeVo) charges.get(0);
				customerCharge = vo.getCustomerCharge();
				customerFinalCharge=vo.getCustomerFinalCharge();
				logger.info("In ChargeBehindAction(refreshCharge) charges  "+ charges +"customerCharge:::::::"+customerCharge+"customerFinalCharge::::::"+customerFinalCharge);
				vo=null;
			}
			request.setAttribute("customerCharge",customerCharge);
			request.setAttribute("customerFinalCharge",customerFinalCharge);
			request.setAttribute("charges", charges);
			request.setAttribute("source", "Y");
			
			dao=null;
			return mapping.findForward("success");
		}
		else
		{
			 request.setAttribute("back", "back");
			
			 dao=null;
			 return mapping.findForward("backSuccess");
		}
		
	}
}