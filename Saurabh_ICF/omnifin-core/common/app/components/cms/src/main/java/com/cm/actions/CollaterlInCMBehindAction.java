/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.cm.dao.CreditManagementDAO;
import com.cm.dao.LoanInitiationDAO;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;

import com.cp.vo.CodeDescVo;

import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 05-18-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class CollaterlInCMBehindAction extends Action {
	private static final Logger logger = Logger.getLogger(CollaterlInCMBehindAction.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		HttpSession session =  request.getSession();
		//boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in execute  method of CollaterlInCMBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag=null;	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String qry="select parameter_value from parameter_mst where PARAMETER_KEY='MACHINE_ADDRESS'";
		String addVal=ConnectionDAO.singleReturn(qry);
		if(CommonFunction.checkNull(addVal).trim().equalsIgnoreCase(""))
			addVal="N";
		session.setAttribute("machinAddress",addVal);
		String deleteQry="select parameter_value from parameter_mst where PARAMETER_KEY='DELETE_BUTTON_AT_LOAN_ASSET'";
		String deleteFlg=ConnectionDAO.singleReturn(deleteQry);
		if(CommonFunction.checkNull(deleteFlg).trim().equalsIgnoreCase(""))
			deleteFlg="N";
		session.setAttribute("assetDeleteButton",deleteFlg);
		
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int id=Integer.parseInt(functionId);		
		if(id==4000122 || id==4000123)
		{
			source="ED";
			if(id==4000122)
			{
				session.removeAttribute("cmAuthor");
				session.removeAttribute("viewLoan");			
			}
		}
		if(id==4000106 || id==4000122)
		{
			session.removeAttribute("underWriterViewData");
			session.removeAttribute("leadNo");
			session.removeAttribute("dealHeader");
			session.removeAttribute("dealId");
			session.removeAttribute("leadInfo");
			session.removeAttribute("viewDeal");
			session.removeAttribute("dealCatList");
			session.removeAttribute("sourceTypeList");
			session.removeAttribute("checkLoginUserLevel");
			session.removeAttribute("creditApprovalList");
			session.removeAttribute("leadMValue");
			session.removeAttribute("bsflag");
			String checkParaQuery="SELECT PARAMETER_VALUE FROM parameter_mst WHERE PARAMETER_KEY='NEW_ASSET_COLLATERAL'";
			logger.info("checkParaQuery: "+checkParaQuery);
			String checkParaValue=ConnectionDAO.singleReturn(checkParaQuery);
			logger.info("checkParaValue: "+checkParaValue);
			if(CommonFunction.checkNull(checkParaValue).equalsIgnoreCase("N"))
			{
				session.removeAttribute("DealCap");
			}
			else
			{
				session.setAttribute("DealCap", "DC");
			}	
	
		}
		//neeraj space end
		
		LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		//logger.info("Implementation class: "+dao.getClass()); 
		//change by sachin
		CreditManagementDAO cdao=(CreditManagementDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditManagementDAO.IDENTITY);
	    // logger.info("Implementation class: "+cdao.getClass());
        CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	   // logger.info("Implementation class: "+dao.getClass()); 
		//CreditProcessingDAO service = new CreditProcessingDAOImpl();
		String loanId = null;
		if(session.getAttribute("loanId")!=null)
			loanId=session.getAttribute("loanId").toString();
		else if(session.getAttribute("maxIdInCM")!=null)
			loanId=session.getAttribute("maxIdInCM").toString();
				
		session.removeAttribute("goldSchemeId");
		
		//Parvez starts
		String goldSchemeId = service.getSchemeForGoldForLoan(loanId);
		session.setAttribute("goldSchemeId",goldSchemeId);
		
		String goldloanAmount = service.getloanAmountForGoldOrnamentLoan(loanId);
		session.setAttribute("goldloanAmount",goldloanAmount );
		
		//Parvez Ends
		
		//logger.info("In CollaterlInCMBehindAction loan id: " +loanId);
		String oneDealOneLoan=(String)session.getAttribute("oneDealOneLoan");
		if(oneDealOneLoan==null)
		{
				oneDealOneLoan=	dao.getOneDealOneLoanFlag(loanId);
			//	logger.info("oneDealOneLoan if null then by db flag:---"+oneDealOneLoan);
		}
		//logger.info("oneDealOneLoan flag:---"+oneDealOneLoan);
		if(loanId!=null && !loanId.equalsIgnoreCase(""))
		{
			//code added by neeraj
			String checkParaValue=null;
			if(id==4000123 || id==4000122)
			{
				checkParaValue="Y";
			}
			else
			{
				String checkParaQuery="SELECT PARAMETER_VALUE FROM parameter_mst WHERE PARAMETER_KEY='NEW_ASSET_COLLATERAL'";
				//logger.info("checkParaQuery  : "+checkParaQuery);
				checkParaValue=ConnectionDAO.singleReturn(checkParaQuery);
				logger.info("checkParaValue  : "+checkParaValue);
				checkParaQuery=null;
			}
			  ArrayList viewPropertyTitle = new ArrayList();
		      try {
		        StringBuffer query = new StringBuffer();
		        query.append("SELECT VALUE,DESCRIPTION FROM generic_master  where GENERIC_KEY='PROPERTY_TITLE' and REC_STATUS in ('A','I')");

		        logger.info("In creditProcessingDaoI getPropertytTitle" + query);

		        ArrayList collateralsAll = ConnectionDAO.sqlSelect(query.toString());
		        query = null;
		        for (int i = 0; i < collateralsAll.size(); i++) {
		          ArrayList sublist = (ArrayList)collateralsAll.get(i);
		          if (sublist.size() > 0) {
		            CodeDescVo av = new CodeDescVo();
		            av.setId(CommonFunction.checkNull(sublist.get(0)).trim());
		            av.setName(CommonFunction.checkNull(sublist.get(1)).trim());
		            viewPropertyTitle.add(av);
		          }
		        }
		      } catch (Exception e) {
		        e.printStackTrace();
		      }

		      ArrayList viewMortageList = new ArrayList();
		      try {
		        StringBuffer query = new StringBuffer();
		        query.append("SELECT VALUE,DESCRIPTION FROM generic_master  where GENERIC_KEY='MORTAGE_TYPE' and REC_STATUS in ('A','I')");

		        logger.info("In creditProcessingDaoI getMortageList" + query.toString());

		        ArrayList mortage = ConnectionDAO.sqlSelect(query.toString());
		        query = null;
		        for (int i = 0; i < mortage.size(); i++) {
		          ArrayList sublist = (ArrayList)mortage.get(i);
		          if (sublist.size() > 0) {
		            CodeDescVo av = new CodeDescVo();
		            av.setId(CommonFunction.checkNull(sublist.get(0)).trim());

		            av.setName(CommonFunction.checkNull(sublist.get(1)).trim());

		            viewMortageList.add(av);
		          }
		        }
		      } catch (Exception e) {
		        e.printStackTrace();
		      }

		      session.setAttribute("viewPropertyTitle", viewPropertyTitle);
		      session.setAttribute("viewMortageList", viewMortageList);

			//neeraj space end
			if(CommonFunction.checkNull(checkParaValue).equalsIgnoreCase("N"))
			{
				// Start By Prashant			
				String  productCat = cdao.getProductTypeInCM(loanId);
				//logger.info("productCat: "+productCat);
				request.setAttribute("productCat", productCat);
				// End By Prashant
				//Nishant space starts
				String loanAmount = cdao.getLoanAmount(loanId);
			//	logger.info("loanAmount : "+loanAmount);
				session.setAttribute("loanAmount", loanAmount);
				//Nishant space end

			    ArrayList<Object> assets = service.getAssetsAll(productCat);			    
			    ArrayList<Object> collaterals = service.getCollateralsAll(productCat);	
			    session.setAttribute("assets", assets);	
			    session.setAttribute("collaterals", collaterals);
			    ArrayList<Object> mortageList = service.getMortageList();
				session.setAttribute("mortageList", mortageList);
				ArrayList showCollateralDetails = cdao.selectAsset(loanId,source);
				session.setAttribute("loanInit","loanInit");
				
				request.setAttribute("showCollateralDetails", showCollateralDetails);
				if(CommonFunction.checkNull(oneDealOneLoan).equalsIgnoreCase("Y"))				 
					 request.setAttribute("cmAuthor", "cmAuthor");
				return mapping.findForward("success");
			}else 
			{
				// Start By Prashant
				
				String  productCat = cdao.getProductTypeInCM(loanId);
				logger.info("productCat: "+productCat);
				request.setAttribute("productCat", productCat);
				// End By Prashant
				
				ArrayList showCollateralDetails = cdao.selectAsset(loanId,source);
				ArrayList<Object> assets = service.getAssetsAll(productCat);
				ArrayList<Object> collaterals = service.getCollateralsAll(productCat);
				ArrayList<Object> securityType=service.getSecurityType();
				session.setAttribute("securityType",securityType );
				session.setAttribute("assets", assets);
				session.setAttribute("collaterals", collaterals);
				  ArrayList<Object> mortageList = service.getMortageList();
					session.setAttribute("mortageList", mortageList);
				if(showCollateralDetails.size()>0){
					request.setAttribute("showCollateralDetails",showCollateralDetails);
				}
				 String repayQ="select LOAN_REPAYMENT_TYPE from cr_loan_dtl where LOAN_ID="+loanId;
			  //   logger.info("Repayment Query: "+repayQ);
			     String repayType=ConnectionDAO.singleReturn(repayQ);
			//	logger.info("Repayment Type:"+repayType);
				String loanAmount="select LOAN_LOAN_AMOUNT from cr_loan_dtl where LOAN_ID="+loanId;
			   //  logger.info("loanAmount Query: "+loanAmount);
			     String loanAmt=ConnectionDAO.singleReturn(loanAmount);			     	     				        
			    session.setAttribute("loanAmount", loanAmt);
			    // mradul changes starts for null object handling
			    loanAmount=null;
			    loanAmt=null;
			    repayQ=null;
			    productCat=null;
				String assetFlag="SELECT ASSET_FLAG FROM CR_LOAN_DTL A JOIN CR_PRODUCT_M B ON A.LOAN_PRODUCT=B.PRODUCT_ID  AND A.LOAN_ID="+loanId;
			    logger.info("assetFlag: "+assetFlag);
			    String assetFlg=ConnectionDAO.singleReturn(assetFlag);
			    
				if((repayType!=null && repayType.equalsIgnoreCase("N")) ||(CommonFunction.checkNull(assetFlg).equalsIgnoreCase("N")))
				{
					session.setAttribute("repayType", repayType);
				}
				else
				{
					session.removeAttribute("repayType");
				}
			    if(session.getAttribute("cmAuthor")!=null)
			    {
			    	return mapping.findForward("success");
			    }
			    else
			    {
			    	return mapping.findForward("newCollateral");
			    }			    
			}
		}
		else
		{
			 request.setAttribute("back", "back");
			// form.reset(mapping, request);
			 cdao=null;
			 return mapping.findForward("backSuccess");
		}		   
	}
}