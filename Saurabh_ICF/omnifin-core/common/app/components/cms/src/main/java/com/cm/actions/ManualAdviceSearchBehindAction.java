/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.validator.DynaValidatorForm;
import com.cm.dao.ManualAdviceDAO;
import com.cm.vo.ManualAdviceCreationVo;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.logger.LoggerMsg;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 05-24-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class ManualAdviceSearchBehindAction extends Action {
	private static final Logger logger = Logger.getLogger(ManualAdviceSearchBehindAction.class.getName());	
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		LoggerMsg.info("In ManualAdviceBehindAction  ");
		
		
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId=null;
		String branchId=null;
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			branchId=userobj.getBranchId();
		}else{
			logger.info(" in execute method of ManualAdviceSearchBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		Object sessionId = session.getAttribute("sessionID");

		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
		
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));
		ManualAdviceCreationVo vo = new ManualAdviceCreationVo();
		
	
		vo.setCurrentPageLink(currentPageLink);
		session.removeAttribute("pParentGroup");
		session.removeAttribute("strParentOption");
		String author="";
		DynaValidatorForm manualAdviceCreationDynaValidatorForm = (DynaValidatorForm)form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, manualAdviceCreationDynaValidatorForm);
		if(CommonFunction.checkNull(vo.getReportingToUserId()).equalsIgnoreCase(""))
		{ 
			vo.setReportingToUserId(userId);
		}
		vo.setBranchId(branchId);
		vo.setUserId(userId);
		if(session.getAttribute("manualApprove")!=null)
		{
			author=session.getAttribute("manualApprove").toString();
		}
		String type = CommonFunction.checkNull(session.getAttribute("manualApprove"));
		vo.setStage(type);
		ManualAdviceDAO dao=(ManualAdviceDAO)DaoImplInstanceFactory.getDaoImplInstance(ManualAdviceDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 

		vo.setLbxLoanNoHID("");
		
		ArrayList<ManualAdviceCreationVo> detailListGrid = dao.ManualAdviceMakerSearchDetail(vo,author);
		request.setAttribute("true","true");
		request.setAttribute("list", detailListGrid);		
		return mapping.findForward("success");	
	
	}
	
}