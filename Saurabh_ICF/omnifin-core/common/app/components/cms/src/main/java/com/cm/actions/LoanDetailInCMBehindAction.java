/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.cm.dao.LoanInitiationDAO;
import com.cm.vo.LoanDetailForCMVO;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 05-23-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class LoanDetailInCMBehindAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(LoanDetailInCMBehindAction.class.getName());

	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward loanDetailBehind(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception 
	{
		
		logger.info("In loanDetailBehind() ........");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String bDate="";
		if(userobj==null){
			logger.info("here in loanDetailBehind method of LoanDetailInCMBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		else
		{
			bDate=userobj.getBusinessdate();
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="";
		String functionId=(String)session.getAttribute("functionId");
		int id=Integer.parseInt(functionId);
		if(id==4000122)
		{
			session.setAttribute("cmAuthor","cmAuthor");
			session.setAttribute("viewLoan","viewLoan");			
		}
		if(id==4000106 || id==4000122)
		{
			session.removeAttribute("underWriterViewData");
			session.removeAttribute("leadNo");
			session.removeAttribute("dealHeader");
			session.removeAttribute("dealId");
			session.removeAttribute("leadInfo");
			session.removeAttribute("viewDeal");
			session.removeAttribute("dealCatList");
			session.removeAttribute("sourceTypeList");
			session.removeAttribute("checkLoginUserLevel");
			session.removeAttribute("creditApprovalList");
			session.removeAttribute("leadMValue");
			session.removeAttribute("bsflag");
	
		}
		//neeraj space end
		LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 
		CreditProcessingDAO creditProcessing=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 
        //CreditProcessingDAO creditProcessing = new CreditProcessingDAOImpl();
		String loanId = "";
		
		if(session.getAttribute("loanId") != null) {
			loanId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxIdInCM") != null) {
			loanId = session.getAttribute("maxIdInCM").toString();
		}
		
		logger.info("In LoanDetailInCMBehindAction getloanListInLoan: " + loanId);
		   // session.removeAttribute("loanList");
		ArrayList cycle = creditProcessing.getCycleDateList(loanId,"LIM");
		if(loanId!=null && !loanId.equalsIgnoreCase(""))
		{
			ArrayList loanHeader = dao.getLoanHeader(loanId);
			session.setAttribute("loanHeader", loanHeader);
			ArrayList loanList=null;
			String editLoanMaker=(String)session.getAttribute("editLoanMaker");
			String editLoanAuthor=(String)session.getAttribute("editLoanAuthor");
			if(CommonFunction.checkNull(editLoanMaker).trim().equalsIgnoreCase("editLoanMaker") || CommonFunction.checkNull(editLoanAuthor).trim().equalsIgnoreCase("editLoanAuthor"))
			{
				loanList=dao.getloanListInLoanForEdit(loanId);
			}
			else{
			 loanList = dao.getloanListInLoan(loanId);
			}
			session.setAttribute("loanList", loanList);
		}
		String plan=(String)session.getAttribute("planCheck");	
		String repayment=(String)session.getAttribute("repaymentCheck");
		if(plan != null)
		{
			if(plan.trim().equals("Y"))
				session.setAttribute("plan","Y");
			else
				session.setAttribute("plan","N");
		}
		else
		{
			session.setAttribute("plan","N");
		}
		if(repayment != null)
		{
			if(repayment.trim().equals("Y"))
				session.setAttribute("repayment","Y");
			else
				session.setAttribute("repayment","N");
		}
		else
		{
			session.setAttribute("repayment","N");
		}
		ArrayList baseRateList = creditProcessing.getBaseRateList(bDate);
		request.setAttribute("baseRateList", baseRateList);
		request.setAttribute("cycle", cycle);		
		//amandeep starts
		ArrayList list1 = dao.getPaymentModes();
		request.setAttribute("paymentModes", list1);
		//amandeep ends
		return mapping.findForward("success");
	}
	
	public ActionForward stageForwardLoanInit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		LoanDetailForCMVO loanDetailForCMVO=new LoanDetailForCMVO();
		
		//for check User session start
		String makerId="";
		String businessDate="";
		
		if(userobj!=null){
			makerId= userobj.getUserId();
			businessDate=userobj.getBusinessdate();
		}else{
			logger.info("here in stageForwardLoanInit method of LoanDetailInCMBehindAction  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String loanId = "";

		if (session.getAttribute("loanId") != null) {

			loanId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxIdInCM") != null) {
			loanId = session.getAttribute("maxIdInCM").toString();
		}

		logger.info("In stageForwardLoanInit loan id: " + loanId);
			boolean stage=false;
//sachin
			boolean docCount=true;
			String Loansms="";
			String countSms="";
//sachin
			logger.info("In stageForwardLoanInit loan id: " +loanId);
			String status="";
			if(loanId.equalsIgnoreCase(""))
			{
				status="LD";
			}
			else
			{
				LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
				
				// add by saorabh 
				DynaValidatorForm loanDetailForm= (DynaValidatorForm)form;
				org.apache.commons.beanutils.BeanUtils.copyProperties(loanDetailForCMVO, loanDetailForm);
				
				
				/*if (!loanDetailForCMVO.getBusinessType().equalsIgnoreCase("OF"))
						{
							String result = dao.getvalidateBusinessPartnerRule(loanId,loanDetailForCMVO.getBusinessId(),loanDetailForCMVO.getBusinessType());
							if(!result.equalsIgnoreCase("success"))
							{
								request.setAttribute("result", result);
								return mapping.findForward("success");
							}
							else
							{
								dao.deleteBusinessPartnr(loanId,loanDetailForCMVO.getBusinessId(),loanDetailForCMVO.getBusinessType());
								int checkParticipationAmt=0;
								checkParticipationAmt=dao.checkParticipationAmt(loanId,"");
								if(checkParticipationAmt==0){
									request.setAttribute("result", "AMOUNTNOTMATCH");					
									return mapping.findForward("success");
							}
								if(checkParticipationAmt==3){
									request.setAttribute("result", "RATENOTMATCH");					
									return mapping.findForward("success");
							}
								if(checkParticipationAmt==4){
									request.setAttribute("result", "checkAllParticipationAmt");					
									return mapping.findForward("success");
							}
								int oneMustleadpartner=0;
								oneMustleadpartner=dao.checkLeadPartner(loanId);
								if(oneMustleadpartner==0){
									request.setAttribute("result", "ONEMUSTLEADPARTNER");					
									return mapping.findForward("success");
								}

						}
							
						}
				else
				{
				Boolean deleteBusinessPartnr=dao.deleteBusinessPartnr(loanId,loanDetailForCMVO.getBusinessId(),loanDetailForCMVO.getBusinessType());
				logger.info("Implementation deleteBusinessPartnr: "+deleteBusinessPartnr);
				int checkParticipationAmt=0;
				checkParticipationAmt=dao.checkParticipationAmt(loanId,"OF");
				if(checkParticipationAmt==0){
					request.setAttribute("result", "AMOUNTNOTMATCH");					
					return mapping.findForward("success");
				}
 
				}*/

				// end by saorabh
				
				// add by saorabh
				Boolean validateFlag = dao.validationOnVatPercent(loanId);
				if(!validateFlag)
				{
					request.setAttribute("vatPercent", "vat");
					return mapping.findForward("success");
				}
				// end by saorbah
				logger.info("Implementation class: "+dao.getClass()); 
				ArrayList loanHeader = dao.getLoanHeader(loanId);
				session.setAttribute("loanHeader", loanHeader);
				//Start By Prashant
			ArrayList loanList=null;
			String editLoanMaker=(String)session.getAttribute("editLoanMaker");
			String editLoanAuthor=(String)session.getAttribute("editLoanAuthor");
			if(CommonFunction.checkNull(editLoanMaker).trim().equalsIgnoreCase("editLoanMaker") || CommonFunction.checkNull(editLoanAuthor).trim().equalsIgnoreCase("editLoanAuthor"))
			{
				loanList=dao.getloanListInLoanForEdit(loanId);
			}
			else{
			 loanList = dao.getloanListInLoan(loanId);
			}
				request.setAttribute("loanList", loanList);
				//amandeep starts
				ArrayList list1 = dao.getPaymentModes();
				request.setAttribute("paymentModes", list1);
				//amandeep ends
				//End by Prashant
			    status = dao.checkStageInLoanInit(loanId);
				logger.info("Status of stage: "+status);
				//String f=CommonFunction.editableFlag();
		    	//if(f!=null && f.equalsIgnoreCase("Y"))
				//{	
				String mobileEnablKeyQuery="SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='MOBILE_VERIFICATION' "; 
				String emailEnablKeyQuery="SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='EMAIL_VERIFICATION'  ";
				String mobileEnablKey=ConnectionDAO.singleReturn(mobileEnablKeyQuery);
				String emailEnablKey=ConnectionDAO.singleReturn(emailEnablKeyQuery);
				String mobileVerifQuery="select  ifnull(MobileVerificationFlag,'N')  from cr_loan_dtl l JOIN gcd_customer_m g on g.customer_id=l.loan_customer_id Join com_address_m a on a.BPID=g.customer_id and a.COMMUNICATION_ADDRESS='Y' WHERE l.loan_id='"+loanId+"' ";
				String mobileVerif=ConnectionDAO.singleReturn(mobileVerifQuery);
				String emailVerifQuery="select  ifnull(EmailVerificationFlag,'N') from cr_loan_dtl l JOIN gcd_customer_m g on g.customer_id=l.loan_customer_id WHERE l.loan_id='"+loanId+"' ";
				String emailVerif=ConnectionDAO.singleReturn(emailVerifQuery);
					if(CommonFunction.checkNull(emailVerif).equalsIgnoreCase("N")  && CommonFunction.checkNull(emailEnablKey).equalsIgnoreCase("Y")){
						status="emailVerif";	
					}else if( CommonFunction.checkNull(mobileVerif).equalsIgnoreCase("N")  && CommonFunction.checkNull(mobileEnablKey).equalsIgnoreCase("Y")){
					status="mobileVerif";
					}else{
				String queryCheckRelation="select COUNT(1) from cr_loan_customer_role cr join com_address_m cm on cm.bpid=cr.gcd_id WHERE cr.loan_id='"+loanId+"' and RELATIONSHIP_FLAG='N'  ";
				int relationCount=Integer.parseInt(ConnectionDAO.singleReturn(queryCheckRelation));
				if(relationCount<1){
					if(status!=null && status.equals("F"))
					{
						String sqlQuery="SELECT REFRESH_FLAG FROM cr_loan_dtl WHERE LOAN_ID='"+loanId+"'";
						String refreshFlagValue = ConnectionDAO.singleReturn(sqlQuery);
						boolean flag1=false;
						for(int i=0;i<15;i++)
						{
							
							if(refreshFlagValue.charAt(i)=='Y')
							{
								int j= i+1;
								request.setAttribute("status", "CM"+j);
								logger.info("refresh value from request set ...................... "+request.getAttribute("status"));
								flag1= true;
								break;
							}
						}
						if(flag1)
						{
							return mapping.findForward("success");
						}
						else
						{
//sachin
							docCount=dao.getCountForDoc(loanId);
//sachin
							 String checkStageM=CommonFunction.loanStageMovement(loanId,"LIM",businessDate,makerId);
							 logger.info("checkStageM : "+checkStageM);		
							
							 if(CommonFunction.checkNull(checkStageM).equalsIgnoreCase("S"))
							 {	
							   stage= dao.stageForwardInLoanInit(loanId,makerId,businessDate);
							 }
							 else
							 {
								request.setAttribute("checkStageM", checkStageM); 
								status="CSM";
							 }	
						}
						
						
				  }
				}else{
					status="relationStatus";
				}
			}
				//}
		    	//else
		    	//{
		    		//if(status!=null && status.equals("F"))
					//{
		    		//	stage= dao.stageForwardInLoanInit(loanId);
					//}
		    	//}
		    	
				if(stage)
				{
					Loansms="S";
					request.setAttribute("Loansms", Loansms);
				}
//sachin
				if(!docCount){
					countSms="NA";
					request.setAttribute("countSms", countSms);
				}
		     }
			
		 logger.info("Status of stage: "+status);
		 logger.info("Status of docCount: "+docCount);
//sachin
		 
		 request.setAttribute("status", status); 
	    return mapping.findForward("success");
	}
	
	public ActionForward openTabLoanDetailBehind(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception 
	{
		
		logger.info("In openTabLoanDetailBehind() ........");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in openTabLoanDetailBehind method of LoanDetailInCMBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj 
		String functionId=(String)session.getAttribute("functionId");
		if(CommonFunction.checkNull(functionId).trim().equalsIgnoreCase(""))
			functionId="0";
		int id=Integer.parseInt(functionId);
		if(id==4000122 || id==4000123)
		{
			session.setAttribute("cmAuthor","cmAuthor");
			session.setAttribute("viewLoan","viewLoan");
		}
		//neeraj space end 
		
		// TODO Auto-generated method stub
		LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 
		CreditProcessingDAO creditProcessing=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+dao.getClass()); 
        //CreditProcessingDAO creditProcessing = new CreditProcessingDAOImpl();
		String loanId = "";
		
		if(session.getAttribute("loanId") != null) {
			loanId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxIdInCM") != null) {
			loanId = session.getAttribute("maxIdInCM").toString();
		}
		
		logger.info("In LoanDetailInCMBehindAction openTabLoanDetailBehind: " + loanId);
		   // session.removeAttribute("loanList");
		ArrayList cycle = creditProcessing.getCycleDateList(loanId,"LIM");
		if(loanId!=null && !loanId.equalsIgnoreCase(""))
		{
			ArrayList loanHeader = dao.getLoanHeader(loanId);
			session.setAttribute("loanHeader", loanHeader);
			//raj start for correction at edit loan author screen 
			//ArrayList loanList = dao.getloanListInLoan(loanId);
			
			ArrayList loanList=null;
			String editLoanMaker=(String)session.getAttribute("editLoanMaker");
			logger.info("edit loan maker value "+editLoanMaker);
			String editLoanAuthor=(String)session.getAttribute("editLoanAuthor");
			logger.info("edit loan author value "+editLoanAuthor);
			if(CommonFunction.checkNull(editLoanMaker).trim().equalsIgnoreCase("editLoanMaker") || CommonFunction.checkNull(editLoanAuthor).trim().equalsIgnoreCase("editLoanAuthor"))
			{
				logger.info("In the edit loan maker and author if condition");
				loanList=dao.getloanListInLoanForEdit(loanId);
			}
			else{
				logger.info("In the  else  condition");
			 loanList = dao.getloanListInLoan(loanId);
			}
			//raj end 
			session.setAttribute("loanList", loanList);
			//amandeep starts
			ArrayList list1 = dao.getPaymentModes();
			request.setAttribute("paymentModes", list1);
			//amandeep ends
		}
		String plan=(String)session.getAttribute("planCheck");	
		String repayment=(String)session.getAttribute("repaymentCheck");
		if(plan != null)
		{
			if(plan.trim().equals("Y"))
				session.setAttribute("plan","Y");
			else
				session.setAttribute("plan","N");
		}
		else
		{
			session.setAttribute("plan","N");
		}
		if(repayment != null)
		{
			if(repayment.trim().equals("Y"))
				session.setAttribute("repayment","Y");
			else
				session.setAttribute("repayment","N");
		}
		else
		{
			session.setAttribute("repayment","N");
		}
		request.setAttribute("cycle", cycle);		
		return mapping.findForward("openTabSuccess");
	}
	
}