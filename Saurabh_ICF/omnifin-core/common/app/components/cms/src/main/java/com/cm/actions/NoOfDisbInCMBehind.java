/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;
import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.cm.dao.LoanInitiationDAO;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 08-04-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class NoOfDisbInCMBehind extends Action {
	/*
	 * Generated Methods
	 */
	private static final Logger logger = Logger.getLogger(NoOfDisbInCMBehind.class.getName());	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		logger.info("In NoOfDisbInCMBehind(execute).........");
		HttpSession session = request.getSession();
	//	boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in execute method of NoOfDisbInCMBehind action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag=null;	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj 
		String functionId=(String)session.getAttribute("functionId");
		if(CommonFunction.checkNull(functionId).trim().equalsIgnoreCase(""))
			functionId="0";
		int id=Integer.parseInt(functionId);
		if(id==4000122 || id==4000123)
		{
			session.setAttribute("cmAuthor","cmAuthor");
			session.setAttribute("viewLoan","viewLoan");
		}
		if(id==4000106 || id==4000122)
		{
			session.removeAttribute("underWriterViewData");
			session.removeAttribute("leadNo");
			session.removeAttribute("dealHeader");
			session.removeAttribute("dealId");
			session.removeAttribute("leadInfo");
			session.removeAttribute("viewDeal");
			session.removeAttribute("dealCatList");
			session.removeAttribute("sourceTypeList");
			session.removeAttribute("checkLoginUserLevel");
			session.removeAttribute("creditApprovalList");
			session.removeAttribute("leadMValue");
			session.removeAttribute("bsflag");
	
		}
		//neeraj space end 
		
		String loanId = null;

		if (session.getAttribute("loanId") != null) {

			loanId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxIdInCM") != null) {
			loanId = session.getAttribute("maxIdInCM").toString();
		}

		logger.info("In NoOfDisbInCMBehind loan id: " + loanId);
		
		if ((loanId != null && !loanId.equalsIgnoreCase("")))
		{

			String repayQ="select LOAN_REPAYMENT_TYPE from cr_loan_dtl where LOAN_ID="+loanId;
		    logger.info("Repayment Query: "+repayQ);
		    String repayType=ConnectionDAO.singleReturn(repayQ);
			logger.info("Repayment Type:"+repayType);
			
			
			
			if(repayType!=null && repayType.equalsIgnoreCase("I"))
			{
				String disbursalScheduleEditableQuery="select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY='DISBURSAL_SCHEDULE_EDITABLE' ";
			    logger.info("DISBURSAL_SCHEDULE_EDITABLE Query: "+disbursalScheduleEditableQuery);
			    String disbursalScheduleEditable=ConnectionDAO.singleReturn(disbursalScheduleEditableQuery);
			//	logger.info("DISBURSAL_SCHEDULE_EDITABLE VALUE disbursalScheduleEditable:"+disbursalScheduleEditable);
				if(CommonFunction.checkNull(disbursalScheduleEditable).equalsIgnoreCase("N"))
				{
					request.setAttribute("cmAuthor", "cmAuthor");
				}
				LoanInitiationDAO detail=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
				logger.info("Implementation class: "+detail.getClass()); 
				String countDisbQ="select count(1) from cr_loan_disbursalsch_dtl where LOAN_ID="+loanId;
			 //   logger.info("Disbursal in cr_loan_disbursalsch_dtl Query: "+countDisbQ);
			    String countDisb=ConnectionDAO.singleReturn(countDisbQ);
			//	logger.info("Disbursal in cr_loan_disbursalsch_dtl countDisb:"+countDisb);
				if(CommonFunction.checkNull(countDisb).equalsIgnoreCase("0"))
				{
					detail.saveDisbursalScheduleFromDeal(loanId);
					String checkQ="select count(*) from cr_loan_disbursalsch_dtl where LOAN_ID='"+loanId+"' ";
			//		logger.info("No of disbursal at cr_loan_disbursalsch_dtl Query: "+checkQ);
	 			    String count=ConnectionDAO.singleReturn(checkQ);
	 			//   logger.info("No of disbursal at cr_loan_disbursalsch_dtl: "+count);
	 			  if(CommonFunction.checkNull(count).equalsIgnoreCase("0"))
	 			   {
	 				 detail.saveDisbursalScheduleDefault(loanId); 
	 			   }
	 			//  logger.info("saveDisbursalScheduleFromLoanInTemp ");
	 			   detail.saveDisbursalScheduleFromLoanInTemp(loanId);
	 			//  logger.info("saveDisbursalScheduleFromLoanInTemp");
	 			   boolean st=detail.updateDisbTypeAndDisbNo(loanId,count);
				//   logger.info("updateDisbTypeAndDisbNo status: "+st);
	 		
				}
				
				ArrayList loanDetail=detail.getLoanDetailForDisb(loanId);
				ArrayList noOfDisbDetail=detail.getNoOfDisb(loanId);
				request.setAttribute("loanDetail", loanDetail);
				request.setAttribute("disbList", noOfDisbDetail);
					
				return mapping.findForward("success");
			}
			else
			{
				request.setAttribute("nonProduct", "nonProduct");
				return mapping.findForward("backNonProductInLoan");
			}
		} 
		else
		{
			request.setAttribute("back", "back");
			return mapping.findForward("backSuccess");
		}
		
	}
}