/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.cm.dao.LoanInitiationDAO;
import com.cm.vo.CompoundFrequencyVO;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 05-23-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class SecurityBehindInLoanInit extends Action {
	private static final Logger logger = Logger.getLogger(SecurityBehindInLoanInit.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		// TODO Auto-generated method stub
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in execute method of SecurityBehindInLoanInit action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String loanId = "";

		if (session.getAttribute("loanId") != null) {

			loanId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxId") != null) {
			loanId = session.getAttribute("maxId").toString();
		}

		logger.info("In SecurityBehindAction loan id: " + loanId);
		if ((loanId != null && !loanId.equalsIgnoreCase(""))) {
			
			String f=CommonFunction.editableFlag();
	    	if(f!=null && f.equalsIgnoreCase("N"))
			{
				request.setAttribute("cmAuthor", "cmAuthor");
				boolean flag1 = CommonFunction.insertsecurity(loanId);
				logger.info("Status insertion of security deposit: "+flag1);
			}
	    	
			LoanInitiationDAO detail=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
			logger.info("Implementation class: "+detail.getClass()); 
			ArrayList tenureAmount=detail.getTenureAmount(loanId);
			logger.info("Size of tenureAmount: "+tenureAmount.size());
				if(tenureAmount!=null && tenureAmount.size()!=0)
				{
					ArrayList<CompoundFrequencyVO> freqlist = detail.getCompFrequencyList();
					ArrayList<Object> briefSecurity = detail.getSecurityDetailAll(loanId);//Loan Id as
					request.setAttribute("briefSecurity", briefSecurity);
					request.setAttribute("freqlist", freqlist);
					request.setAttribute("tenureAmount", tenureAmount);
					return mapping.findForward("success");
				}
		
			else
			{
				
				request.setAttribute("saveCharge", "C");
				return mapping.findForward("chargeSuccess");
			}
		
			
		} 
		else
		{
			request.setAttribute("back", "back");
			return mapping.findForward("backSuccess");
		}
		
		
	}
}