/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.actions.DispatchAction;

import com.cm.dao.LoanInitiationDAO;
import com.cm.dao.ManualAdviceDAO;
import com.cm.vo.ManualAdviceCreationVo;
import com.connect.DaoImplInstanceFactory;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;


/** 
 * MyEclipse Struts
 * Creation date: 05-19-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class ManualAdviceCreationMaker extends DispatchAction {
	private static final Logger logger = Logger.getLogger(ManualAdviceCreationMaker.class.getName());	

	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * @throws InvocationTargetException 
	 * @throws IllegalAccessException 
	 */
	public ActionForward saveManualAdviceCreation(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) 
			throws Exception {
		    HttpSession session =  request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			 String userId="";
			 String bDate ="";
			if(userobj!=null)
			{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
			}else{
				logger.info(" in saveManualAdviceCreation method of ManualAdviceCreationMaker action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
		   
		    //ManualAdviceDAO creditManagementDAO = new ManualAdviceDAOImpl();
			ManualAdviceDAO creditManagementDAO=(ManualAdviceDAO)DaoImplInstanceFactory.getDaoImplInstance(ManualAdviceDAO.IDENTITY);
			logger.info("Implementation class: "+creditManagementDAO.getClass()); 
			//CreditManagementDAO creditManagementDAO = new CreditManagementDAOImpl();
			logger.info("In saveManualAdviceCreation........................... ");
			DynaActionForm ManualAdviceCreationDynaValidatorForm = (DynaActionForm)form;
			String manualAdviceid="";

		

		  
			boolean flag=false;
			
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			//end

			ManualAdviceCreationVo manualVo = new ManualAdviceCreationVo();
			org.apache.commons.beanutils.BeanUtils.copyProperties(manualVo, ManualAdviceCreationDynaValidatorForm);
			manualVo.setMakerId(""+userId);
			manualVo.setMakerDate(bDate);
			String adviceAmount="";
			String taxAmount1="";
			String taxAmount2="";
			if(request.getParameter("adviceAmount")!=null)
			{
				adviceAmount = request.getParameter("adviceAmount");
			}
			if(request.getParameter("taxAmount1")!=null)
			{
				taxAmount1 = request.getParameter("taxAmount1");
			}
			if(request.getParameter("taxAmount2")!=null)
			{
				taxAmount2 = request.getParameter("taxAmount2");
			}
			logger.info("adviceAmount::"+adviceAmount);
			logger.info("taxAmount1::"+taxAmount1);
			logger.info("taxAmount2::"+taxAmount2);
			//space start by raj for origional/reversal
			//if(CommonFunction.checkNull(manualVo.getOrgAdviceId()).equalsIgnoreCase("")){
				if(request.getParameter("orgAdviceId")!=null){
					manualVo.setOrgAdviceId(request.getParameter("orgAdviceId"));
				}
			//}
			//if(CommonFunction.checkNull(manualVo.getLbxorgAdviceId()).equalsIgnoreCase("")){
				if(request.getParameter("lbxorgAdviceId")!=null){
					manualVo.setLbxorgAdviceId(request.getParameter("lbxorgAdviceId"));
				}
				//}
			//if(CommonFunction.checkNull(manualVo.getOrigionalReversal()).equalsIgnoreCase("")){
				if(request.getParameter("origionalReversal")!=null){
					manualVo.setOrigionalReversal(request.getParameter("origionalReversal"));
				}
				//}
			//space end by raj 			
			manualAdviceid=creditManagementDAO.saveManualAdviceCreationDetail(manualVo);
			if(manualAdviceid!=null)
			{
				if(session.getAttribute("pParentGroup")!=null)
				{
					session.removeAttribute("pParentGroup");
				}
				if(session.getAttribute("strParentOption")!=null)
				{
					session.removeAttribute("strParentOption");
				}
				request.setAttribute("sms", "S");
				session.setAttribute("adviceUpdate", "adviceUpdate");
				ArrayList<ManualAdviceCreationVo> manualAdviceList = creditManagementDAO.getManualAdviceCreationMakerDetail(manualAdviceid);
				session.setAttribute("manualAdviceList",manualAdviceList);
				logger.info("In manualAdviceList........................... "+manualAdviceList.size());
			}
			else
			{
				request.setAttribute("sms", "E");
			}
			return mapping.findForward("success");
	}
	
	
	public ActionForward updateManualAdviceCreation(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) 
			throws Exception {
		
		
		logger.info("In updateManualAdviceCreation........................... ");
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate ="";
		if(userobj!=null){
			userId= userobj.getUserId();
			bDate=userobj.getBusinessdate();
		}
		else{
			logger.info(" in updateManualAdviceCreation method of ManualAdviceCreationMaker  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
			//CreditManagementDAO creditManagementDAO = new CreditManagementDAOImpl();
		ManualAdviceDAO creditManagementDAO=(ManualAdviceDAO)DaoImplInstanceFactory.getDaoImplInstance(ManualAdviceDAO.IDENTITY);
		logger.info("Implementation class: "+creditManagementDAO.getClass()); 
			logger.info("In updateManualAdviceCreation........................... ");
			DynaActionForm ManualAdviceCreationDynaValidatorForm = (DynaActionForm)form;
			boolean status;
			ManualAdviceCreationVo manualAdviceCreationVo = new ManualAdviceCreationVo();
			org.apache.commons.beanutils.BeanUtils.copyProperties(manualAdviceCreationVo, ManualAdviceCreationDynaValidatorForm);
			//space start by raj for origional/reversal
			//if(CommonFunction.checkNull(manualAdviceCreationVo.getOrgAdviceId()).equalsIgnoreCase("")){
				if(request.getParameter("orgAdviceId")!=null){
					manualAdviceCreationVo.setOrgAdviceId(request.getParameter("orgAdviceId"));
				}
				//}
			//if(CommonFunction.checkNull(manualAdviceCreationVo.getLbxorgAdviceId()).equalsIgnoreCase("")){
				if(request.getParameter("lbxorgAdviceId")!=null){
					manualAdviceCreationVo.setLbxorgAdviceId(request.getParameter("lbxorgAdviceId"));
				}
				//}
			//if(CommonFunction.checkNull(manualAdviceCreationVo.getOrigionalReversal()).equalsIgnoreCase("")){
				if(request.getParameter("origionalReversal")!=null){
					manualAdviceCreationVo.setOrigionalReversal(request.getParameter("origionalReversal"));
				}
				//}
			//space end by raj

		    manualAdviceCreationVo.setMakerId(""+userId);
			manualAdviceCreationVo.setMakerDate(bDate);

			String adviceAmount="";
			String taxAmount1="";
			String taxAmount2="";
			if(request.getParameter("adviceAmount")!=null)
			{
				adviceAmount = request.getParameter("adviceAmount");
			}
			if(request.getParameter("taxAmount1")!=null)
			{
				taxAmount1 = request.getParameter("taxAmount1");
			}
			if(request.getParameter("taxAmount2")!=null)
			{
				taxAmount2 = request.getParameter("taxAmount2");
			}
			logger.info("adviceAmount::"+adviceAmount);
			logger.info("taxAmount1::"+taxAmount1);
			logger.info("taxAmount2::"+taxAmount2);
		  

			String manaulId="";
			String forward="";
			if(request.getParameter("manaulId")!=null)
			{
				manaulId = request.getParameter("manaulId");
			}
			if(request.getParameter("forward")!=null)
			{
				forward=request.getParameter("forward");
			}
			logger.info("manaulId in action....................................... "+manaulId);
			logger.info("forward in action....................................... "+forward);
			status=creditManagementDAO.updateManualAdviceCreationDetail(manualAdviceCreationVo,manaulId,forward);
			
			if(status)
			{
				if(session.getAttribute("pParentGroup")!=null)
				{
					session.removeAttribute("pParentGroup");
				}
				if(session.getAttribute("strParentOption")!=null)
				{
					session.removeAttribute("strParentOption");
				}

				if(forward!=null && forward.equalsIgnoreCase("Forward"))
				{
					session.removeAttribute("manualAdviceList");
					request.setAttribute("sms", "SF");
					return mapping.getInputForward();
				}
				else
				{
					request.setAttribute("sms", "U");
				
				
				//request.setAttribute("status", "Manual Advice Creation Details are successfully updated!!!");

				//request.setAttribute("status", "Manual Advice Creation Details are successfully updated!!!");

				session.setAttribute("adviceUpdate", "adviceUpdate");
				ArrayList<ManualAdviceCreationVo> manualAdviceList = creditManagementDAO.getManualAdviceCreationMakerDetail(manaulId);
				session.setAttribute("manualAdviceList",manualAdviceList);
				logger.info("In manualAdviceList........................... "+manualAdviceList.size());
				}
			}
			else
			{
				request.setAttribute("sms", "UE");
				
			}
			return mapping.findForward("success");
	}
	//Ritu
	public ActionForward deleteManualAdvice(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		logger.info("In ManualAdviceSearchProcessAction deleteManualAdvice().... ");
		HttpSession session = request.getSession();
		UserObject userobj = (UserObject) session.getAttribute("userobject");
		String userId="";
		String bDate="";
		String branchId="";
		//String result="success";
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
				branchId=userobj.getBranchId();
		}else{
			logger.info("here in deleteManualAdvice () of ManualAdviceSearchProcessAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		String sessionId = session.getAttribute("sessionID").toString();

		// String cond = request.getParameter("saveForward");
		// logger.info("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"+cond);

		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		

		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String manaulId = "";

		manaulId = request.getParameter("manaulId");
		
		logger.info("In   deleteManualAdvice ----1-------------->loanId " + manaulId);
		//logger.info("In ConsumerDispatchAction  execute id: " + userobj.getBranchId());

		
		//PaymentDAO service = new PaymentDAOImpl();
		ManualAdviceDAO service=(ManualAdviceDAO)DaoImplInstanceFactory.getDaoImplInstance(ManualAdviceDAO.IDENTITY);
		logger.info("Implementation class: "+service.getClass()); 

		
		boolean status = service.deleteManualAdvice(manaulId);
		String sms="";
		if(status){
			sms="DS";
			request.setAttribute("sms",sms);
			 
		}
		else{
			sms="DN";
			request.setAttribute("sms",sms);
		}
		return mapping.findForward("success");
	}
}