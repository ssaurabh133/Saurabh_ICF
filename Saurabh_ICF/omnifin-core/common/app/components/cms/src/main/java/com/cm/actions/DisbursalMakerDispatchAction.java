/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.io.PrintWriter;
import java.math.BigDecimal;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringEscapeUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.cm.dao.DisbursalInitiationDAO;
import com.cm.dao.LoanInitiationDAO;
import com.cm.vo.DisbursalMakerVO;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.lockRecord.action.LockRecordCheck;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.tabDependencyCheck.RefreshFlagVo;

/** 
 * MyEclipse Struts
 * Creation date: 06-09-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class DisbursalMakerDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(DisbursalMakerDispatchAction.class.getName());
	DecimalFormat myFormatter = new DecimalFormat("###,##0.00######");
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward saveDisbursalData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		logger.info("Inside DisbursalMakerDispatchAction......saveDisbursalData");
		
		HttpSession session =  request.getSession();		
		UserObject userobj=(UserObject)session.getAttribute("userobject");		
		String makerId ="";
		String makerDate ="";
		if(userobj!=null){
			makerId = userobj.getUserId();
			makerDate=userobj.getBusinessdate();
		}else{
			logger.info("Inside saveDisbursalData DisbursalMakerDispatchAction the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		//boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		int status=0;
		String retStr="";
		String loanIDDisbursal = CommonFunction.checkNull(request.getParameter("loanIDDisbursal"));		
		session.removeAttribute("disbursalDataAuthor");	
		session.removeAttribute("disbursalPaymentAddDtl");
	    DynaValidatorForm DisbursedInitiationMakerDynaValidatorForm = (DynaValidatorForm)form;
		DisbursalMakerVO vo = new DisbursalMakerVO();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,DisbursedInitiationMakerDynaValidatorForm);
		vo.setLbxLoanNoHID(loanIDDisbursal);
		vo.setMakerId(makerId);
		vo.setMakerDate(makerDate);		
		//DisbursalInitiationDAO service = new DisbursalInitiationDAOImpl();
	    DisbursalInitiationDAO service=(DisbursalInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(DisbursalInitiationDAO.IDENTITY);
	    logger.info("Implementation class: "+service.getClass());
		String feasibilityStatus=service.disbursalFeasibility(vo);
		String nextDueDate=vo.getNextDueDate();
		 if(nextDueDate != null && nextDueDate.equals("undefined"))
			 nextDueDate="";
		 vo.setNextDueDate(nextDueDate);
		ArrayList<DisbursalMakerVO> cycleDate = service.getCycleDateList();
		request.setAttribute("cycleDate",cycleDate);		
		String finalDisbChk="";		
		String finalDisbursal=request.getParameter("finalDisbursal");
		String proposedFlag=service.getProposedDisbursalCheck();
		vo.setProposedDisbursalFlag(proposedFlag);
		logger.info("Proposed Disbursal Flag: "+proposedFlag);
		
		if(vo.getRepayMode().equalsIgnoreCase("N"))
		{
			finalDisbChk="";
			request.setAttribute("repMode", "N");
		}
		else
		{
		
			if(finalDisbursal!=null)
			{
				finalDisbChk="F";
			}	
			else
			{
				finalDisbChk="P";
			}
		}	
		logger.info("feasibilityStatus------------->"+feasibilityStatus);
		logger.info("In saveDisbursalData() finalDisbursal status...... "+finalDisbChk);
		
	//	logger.info("Revolving Limit: save mode "+CommonFunction.checkNull(vo.getRevolvingFlagStatus()));
		
		/* ****************************** For Repayment type "Installment based plan" ************* */
		if(vo.getRepayMode().equalsIgnoreCase("I"))
		{
		  /* **********************    Save For Final Disbursal       ********************** */
			if(finalDisbChk.equalsIgnoreCase("F"))
			{
				logger.info("In saveDisbursalData() finalDisbChk.equals(F) and reypay mode is I ");
				if(feasibilityStatus.equalsIgnoreCase("DisbAmt") )
				{
					request.setAttribute("disbStatus","DisbAmt");
					ArrayList<DisbursalMakerVO> disbursalDataNew = new ArrayList<DisbursalMakerVO>();
					disbursalDataNew.add(vo);
					DisbursalMakerVO vo1 = new DisbursalMakerVO();
					vo1.setFinalDisbursal("F");
					request.setAttribute("disbursalDataNew",disbursalDataNew);
					request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
					request.setAttribute("disbursalTo", vo.getDisbursalTo());
					logger.info("value for checked 1:------"+vo1.getFinalDisbursal());
					retStr="saveDisbursalDataFailed";
				}
				
				else if(feasibilityStatus.equalsIgnoreCase("ShrtPayAmt"))
				{
					request.setAttribute("disbStatus","ShrtPayAmt");
					ArrayList<DisbursalMakerVO> disbursalDataNew = new ArrayList<DisbursalMakerVO>();
					disbursalDataNew.add(vo);
					DisbursalMakerVO vo1 = new DisbursalMakerVO();
					vo1.setFinalDisbursal("F");
					request.setAttribute("disbursalDataNew",disbursalDataNew);
					request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
					request.setAttribute("disbursalTo", vo.getDisbursalTo());
					logger.info("value for checked 2:------"+vo1.getFinalDisbursal());
					retStr="saveDisbursalDataFailed";
				}
				else if(service.getDisbursalAmountCheck(vo).equalsIgnoreCase("preProposedDisbDate"))
				{
					
						request.setAttribute("disbStatus","preProposedDisbDate");
						ArrayList<DisbursalMakerVO> disbursalDataNew = new ArrayList<DisbursalMakerVO>();
						logger.info("value for getNextDueDate()  :------"+vo.getNextDueDate());
						logger.info("value for getRepayEffDate()  :------"+vo.getRepayEffDate());
						disbursalDataNew.add(vo);
						DisbursalMakerVO vo1 = new DisbursalMakerVO();
						vo1.setFinalDisbursal("F");
						request.setAttribute("disbursalDataNew",disbursalDataNew);
						request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
						request.setAttribute("disbursalTo", vo.getDisbursalTo());
						logger.info("value for checked 3:------"+vo1.getFinalDisbursal());
						retStr="saveDisbursalDataFailed";
					
				}
				else 
					if(service.getDisbursalAmountCheck(vo).equalsIgnoreCase("disbursalAmount"))
						{
						request.setAttribute("disbStatus","disbursalAmount");
						ArrayList<DisbursalMakerVO> disbursalDataNew = new ArrayList<DisbursalMakerVO>();
						disbursalDataNew.add(vo);
						DisbursalMakerVO vo1 = new DisbursalMakerVO();
						vo1.setFinalDisbursal("F");
						request.setAttribute("disbursalDataNew",disbursalDataNew);
						request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
						request.setAttribute("disbursalTo", vo.getDisbursalTo());
						logger.info("value for checked 4:------"+vo1.getFinalDisbursal());
						retStr="saveDisbursalDataFailed";
					
				}
				else if(feasibilityStatus.equalsIgnoreCase("LoanAmt"))
				{
					logger.info("Next Due Date: "+vo.getNextDueDate());
					status = service.saveDisbursalData(vo,finalDisbChk);
					if(status>0)
					{
						request.setAttribute("message","S");
						ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(loanIDDisbursal,vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
						DisbursalMakerVO vo1 = new DisbursalMakerVO();
						vo1=(DisbursalMakerVO) disbursalData.get(0);
						request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
						request.setAttribute("disbursalTo", vo1.getDisbursalTo());
						logger.info("Disbursal Id: "+status);
						session.setAttribute("loanDisbursalId", status);
						logger.info("value for checked 5:------"+vo1.getFinalDisbursal());
						request.setAttribute("disbursalData", disbursalData);
					}
					else
					{
						request.setAttribute("message","E");
						request.setAttribute("disbursalNew","disbursalNew");
					}
					retStr="saveDisbursalData";
				}
				
				else if(feasibilityStatus.equalsIgnoreCase("eqDisbAmt"))
				{
					status = service.saveDisbursalData(vo,"F");
					logger.info("status "+status);
					if(status>0)
					{
						request.setAttribute("message","S");
						ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(loanIDDisbursal,vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
						DisbursalMakerVO vo1 = new DisbursalMakerVO();
						vo1=(DisbursalMakerVO) disbursalData.get(0);
						logger.info("vo1.getFinalDisbursal()----------------"+vo1.getFinalDisbursal());
						request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
						request.setAttribute("disbursalTo", vo1.getDisbursalTo());
						logger.info("Disbursal Id: "+status);
						session.setAttribute("loanDisbursalId", status);
						logger.info("value for checked 6:------"+vo1.getFinalDisbursal());
						request.setAttribute("disbursalData", disbursalData);
					}
					else
					{
						request.setAttribute("message","E");
						request.setAttribute("disbursalNew","disbursalNew");
					}
					retStr="saveDisbursalData";
				}
			}
			/* ********************************** Save For Non Final Disbursal ******************** */
			else if(finalDisbChk.equals("P"))
			{
				vo.setRepayEffDate("");
				/* ****************************** For Repayment type "Installment based plan" ************* */
				logger.info("In saveDisbursalData() finalDisbChk.equals(P) and reypay mode is I ");
				if(vo.getRepayMode().equalsIgnoreCase("I"))
				{
					logger.info("Save For Repayment type    Installment based plan");
					if(feasibilityStatus.equalsIgnoreCase("DisbAmt") )
					{
						request.setAttribute("disbStatus","DisbAmt");
						ArrayList<DisbursalMakerVO> disbursalDataNew = new ArrayList<DisbursalMakerVO>();
						disbursalDataNew.add(vo);
						DisbursalMakerVO vo1 = new DisbursalMakerVO();
						request.setAttribute("disbursalDataNew",disbursalDataNew);
						request.setAttribute("fianlDisb","P");
						request.setAttribute("disbursalTo", vo.getDisbursalTo());
						logger.info("value for checked 7:------"+vo1.getFinalDisbursal());
						retStr="saveDisbursalDataFailed";
					}
					
					else if(feasibilityStatus.equalsIgnoreCase("ShrtPayAmt"))
					{
						request.setAttribute("disbStatus","ShrtPayAmt");
						ArrayList<DisbursalMakerVO> disbursalDataNew = new ArrayList<DisbursalMakerVO>();
						disbursalDataNew.add(vo);
						DisbursalMakerVO vo1 = new DisbursalMakerVO();
						request.setAttribute("disbursalDataNew",disbursalDataNew);
						request.setAttribute("fianlDisb","P");
						request.setAttribute("disbursalTo", vo.getDisbursalTo());
						logger.info("value for checked 8:------"+vo1.getFinalDisbursal());
						retStr="saveDisbursalDataFailed";
					}
					else if(service.getDisbursalAmountCheck(vo).equalsIgnoreCase("preProposedDisbDate"))
					{
						
							//ravi
							request.setAttribute("disbStatus","preProposedDisbDate");
							ArrayList<DisbursalMakerVO> disbursalDataNew = new ArrayList<DisbursalMakerVO>();
							disbursalDataNew.add(vo);
							logger.info("fianlDisb  ------"+vo.getFinalDisbursal());
							DisbursalMakerVO vo1 = new DisbursalMakerVO();
							request.setAttribute("disbursalDataNew",disbursalDataNew);
							request.setAttribute("disbursalTo", vo.getDisbursalTo());
							request.setAttribute("fianlDisb","P");
							logger.info("value for checked 9:------"+vo1.getFinalDisbursal());
							retStr="saveDisbursalDataFailed";
					
					}
					else if(service.getDisbursalAmountCheck(vo).equalsIgnoreCase("disbursalAmount"))
					{
						
							request.setAttribute("disbStatus","disbursalAmount");
							ArrayList<DisbursalMakerVO> disbursalDataNew = new ArrayList<DisbursalMakerVO>();
							disbursalDataNew.add(vo);
							DisbursalMakerVO vo1 = new DisbursalMakerVO();
							request.setAttribute("disbursalDataNew",disbursalDataNew);
							request.setAttribute("fianlDisb","P");
							request.setAttribute("disbursalTo", vo.getDisbursalTo());
							logger.info("value for checked 10:------"+vo1.getFinalDisbursal());
							retStr="saveDisbursalDataFailed";
						
					}
					else if(feasibilityStatus.equalsIgnoreCase("LoanAmt"))
					{
						vo.setCycleDate("");
						vo.setRepayEffDate("");
						
						status = service.saveDisbursalData(vo,"P");
						if(status>0)
						{
							request.setAttribute("message","S");
							ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(loanIDDisbursal,vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
							DisbursalMakerVO vo1 = new DisbursalMakerVO();
							vo1=(DisbursalMakerVO) disbursalData.get(0);
							request.setAttribute("disbursalData",disbursalData);
							request.setAttribute("fianlDisb","P");
							request.setAttribute("disbursalTo", vo1.getDisbursalTo());
							logger.info("Disbursal Id: "+status);
							session.setAttribute("loanDisbursalId", status);
							logger.info("value for checked 11:------"+vo1.getFinalDisbursal());
						}
						else
						{
							request.setAttribute("message","E");
							request.setAttribute("disbursalNew","disbursalNew");
						}
						retStr="saveDisbursalData";
					}
					else if(feasibilityStatus.equalsIgnoreCase("eqDisbAmt"))
					{
						vo.setCycleDate("");
						vo.setRepayEffDate("");
						status = service.saveDisbursalData(vo,"F");
						if(status>0)
						{
							request.setAttribute("message","S");
							ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(loanIDDisbursal,vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
							DisbursalMakerVO vo1 = new DisbursalMakerVO();
							vo1=(DisbursalMakerVO) disbursalData.get(0);
							request.setAttribute("disbursalData",disbursalData);
							request.setAttribute("disbursalTo", vo1.getDisbursalTo());
							request.setAttribute("fianlDisb","P");
							logger.info("Disbursal Id: "+status);
							session.setAttribute("loanDisbursalId", status);
							logger.info("value for checked 12:------"+vo1.getFinalDisbursal());
						}
						else
						{
							request.setAttribute("message","E");
							request.setAttribute("disbursalNew","disbursalNew");
						}
						retStr="saveDisbursalData";
					}
				}
			}
		}
		else if(vo.getRepayMode().equalsIgnoreCase("N"))
		{
		 /* ****************************** For Repayment type "Non-Installment based plan" ************* */
			logger.info("In saveDisbursalData() finalDisbChk.equals(null) and reypay mode is N ");
			
			DecimalFormat myFormatter = new DecimalFormat("###,##0.00######");
			String query7 = "select count(1) from cr_loan_dtl l where LOAN_ID="+CommonFunction.checkNull(vo.getLbxLoanNoHID())+" AND "+myFormatter.parse((CommonFunction.checkNull(vo.getDisbursalAmount()).trim())).toString()+" <= (LOAN_LOAN_AMOUNT - LOAN_BALANCE_PRINCIPAL)";
						logger.info("In disbursal amt check  : "+query7);
						String checkDisAmtWithLnAmt=ConnectionDAO.singleReturn(query7);
						logger.info("In getDisbursalValues.....checkDisAmtWithLnAmt: "+checkDisAmtWithLnAmt);
			if(Integer.parseInt(checkDisAmtWithLnAmt) > 0)
			{
			if(feasibilityStatus.equalsIgnoreCase("ShrtPayAmt"))
			{
				request.setAttribute("disbStatus","ShrtPayAmt");
				ArrayList<DisbursalMakerVO> disbursalDataNew = new ArrayList<DisbursalMakerVO>();
				disbursalDataNew.add(vo);
				DisbursalMakerVO vo1 = new DisbursalMakerVO();
				request.setAttribute("disbursalDataNew",disbursalDataNew);
				request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
				request.setAttribute("disbursalTo", vo.getDisbursalTo());
				logger.info("value for checked 145678:------"+vo1.getFinalDisbursal());
				retStr="saveDisbursalDataFailed";
			}
			else if(service.getDisbursalAmountCheck(vo).equalsIgnoreCase("disbursalAmtForNonInst"))
			{
				request.setAttribute("disbStatus","disbursalAmtForNonInst");
				ArrayList<DisbursalMakerVO> disbursalDataNew = new ArrayList<DisbursalMakerVO>();
				disbursalDataNew.add(vo);
				DisbursalMakerVO vo1 = new DisbursalMakerVO();
				request.setAttribute("disbursalDataNew",disbursalDataNew);
				request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
				request.setAttribute("disbursalTo", vo.getDisbursalTo());
				logger.info("value for checked 1232323:------"+vo1.getFinalDisbursal());
				retStr="saveDisbursalDataFailed";
			}
		
			else if(feasibilityStatus.equalsIgnoreCase("LoanAmt"))
			{
				vo.setCycleDate("");
				//vo.setRepayEffDate("");
				status = service.saveDisbursalData(vo,"P");
				if(status>0)
				{
					request.setAttribute("message","S");
					ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(loanIDDisbursal,vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
					DisbursalMakerVO vo1 = new DisbursalMakerVO();
					vo1=(DisbursalMakerVO) disbursalData.get(0);
					request.setAttribute("disbursalData",disbursalData);
					request.setAttribute("disbursalTo", vo1.getDisbursalTo());
					request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
					logger.info("Disbursal Id: "+status);
					session.setAttribute("loanDisbursalId", status);
					logger.info("value for checked 1555:------"+vo1.getFinalDisbursal());
				}
				else
				{
					request.setAttribute("message","E");
					request.setAttribute("disbursalNew","disbursalNew");
				}
				retStr="saveDisbursalData";
			}
			else if(feasibilityStatus.equalsIgnoreCase("eqDisbAmt"))
			{
				vo.setCycleDate("");
				//vo.setRepayEffDate("");
				status = service.saveDisbursalData(vo,"P");
				if(status>0)
				{
					request.setAttribute("message","S");
					ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(loanIDDisbursal,vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
					DisbursalMakerVO vo1 = new DisbursalMakerVO();
					vo1=(DisbursalMakerVO) disbursalData.get(0);
					request.setAttribute("disbursalData",disbursalData);
					request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
					request.setAttribute("disbursalTo", vo1.getDisbursalTo());
					logger.info("Disbursal Id: "+status);
					session.setAttribute("loanDisbursalId", status);
					logger.info("getDisbursalTo222222222222................:------"+vo1.getDisbursalTo());
					logger.info("value for checked 1888:------"+vo1.getFinalDisbursal());
				}
				else
				{
					request.setAttribute("message","E");
					request.setAttribute("disbursalNew","disbursalNew");
				}
				
				logger.info("disbursalTo ::::::::::::::::::::::::::::: "+request.getAttribute("disbursalTo"));
				retStr="saveDisbursalData";
			}
			}
			else
			{
				request.setAttribute("disbStatus","LnBalPrinMoreThanLnAmt");
				ArrayList<DisbursalMakerVO> disbursalDataNew = new ArrayList<DisbursalMakerVO>();
				disbursalDataNew.add(vo);
				DisbursalMakerVO vo1 = new DisbursalMakerVO();
				request.setAttribute("disbursalDataNew",disbursalDataNew);
				request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
				request.setAttribute("disbursalTo", vo.getDisbursalTo());
				logger.info("value for checked 145678:------"+vo1.getFinalDisbursal());
				retStr="saveDisbursalDataFailed";
			}
			
		}
		//Nishant space starts
		String recoveryType=service.getRecoveryType(vo.getLbxLoanNoHID());
		request.setAttribute("recoveryType", recoveryType);
		String disbursalFlag=service.getDisbursalFlag(vo.getLbxLoanNoHID(),"DIM");
		request.setAttribute("disbursalFlag", disbursalFlag);
		String repaymentType=service.getRepaymentType(vo.getLbxLoanNoHID());
		request.setAttribute("repaymentType", repaymentType);
		//Nishant space ends
		request.setAttribute("maxDisbursalDate", request.getParameter("maxDisbursalDate"));
		logger.info("In save disbursal maxDisbursalDate:"+request.getParameter("maxDisbursalDate"));
		form.reset(mapping, request);
		return mapping.findForward(retStr);
	}
	
	public ActionForward updateDisbursalData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		
		logger.info("Inside DisbursalMakerDispatchAction......updateDisbursalData");
		
		HttpSession session =  request.getSession();
		
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String makerId ="";
		String makerDate ="";
		if(userobj!=null){
			makerId = userobj.getUserId();
			makerDate=userobj.getBusinessdate();
		}else{
			logger.info(" Inside methos updateDisbursalData of DisbursalMakerDispatchAction  the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		//boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		boolean status=false;
		String retStr="";
		String recStatus = CommonFunction.checkNull(request.getParameter("recStatus"));
		String finalDisbChk="";
		String finalDisbursal=request.getParameter("finalDisbursal");
		logger.info("ta finalDisbursal :::::::::::::::::::::::::::finalDisbursal "+finalDisbursal);
		session.removeAttribute("disbursalDataAuthor");
		session.removeAttribute("disbursalPaymentAddDtl");
		DynaValidatorForm DisbursedInitiationMakerDynaValidatorForm = (DynaValidatorForm)form;
		DisbursalMakerVO vo = new DisbursalMakerVO();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,DisbursedInitiationMakerDynaValidatorForm);
		logger.info("ta loan id ::::::::::::::::::::::::::: "+vo.getLbxTaLoanNoHID());
		logger.info("ta finalDisbursal :::::::::::::::::::::::::::finalDisbursal vo"+vo.getFinalDisbursal());
		String forwardedLoanId=vo.getLbxLoanNoHID();
		request.setAttribute("forwardedLoanId",forwardedLoanId);
		String nextDueDate=vo.getNextDueDate();
		//change by sachin
		 if(nextDueDate != null && nextDueDate.equals("undefined"))
			 nextDueDate="";
		 vo.setNextDueDate(nextDueDate);
		 //end by sachin
		vo.setMakerId(makerId);
		vo.setMakerDate(makerDate);	
		
		if(vo.getRepayMode().equalsIgnoreCase("N"))
			finalDisbChk="";
		else
		{		
			if(finalDisbursal!=null)
				finalDisbChk="F";
			else
				finalDisbChk="P";
		}	
		//logger.info("Revolving Limit update mode: "+CommonFunction.checkNull(vo.getRevolvingFlagStatus()));
		//DisbursalInitiationDAO service = new DisbursalInitiationDAOImpl();
		DisbursalInitiationDAO service=(DisbursalInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(DisbursalInitiationDAO.IDENTITY);
	    logger.info("Implementation class: "+service.getClass());
       
	 // Saorabh Space Start
	    	String typeOfDisbursal = CommonFunction.checkNull(vo.getFinalDisbursal());
	    	logger.info("typeOfDisbursal----------------------"+typeOfDisbursal);
	    	if(!typeOfDisbursal.equalsIgnoreCase("ON"))
	    	{
	 		String str = service.getDateForDisbursalCheck(vo);
	 			if(str.equalsIgnoreCase("F"))
	 			{
	 				request.setAttribute("disbursalDate", str);
	 				return mapping.findForward("checkDisbursalDate");
	 			}
	    	}
	 			//saorabh Space End
        String feasibilityStatus=service.disbursalFeasibility(vo);
		logger.info("Feasibility Status: "+feasibilityStatus);
		ArrayList<DisbursalMakerVO> cycleDate = service.getCycleDateList();
		request.setAttribute("cycleDate",cycleDate);
		
		String proposedFlag=service.getProposedDisbursalCheck();
		vo.setProposedDisbursalFlag(proposedFlag);
		logger.info("Proposed Disbursal Flag: "+proposedFlag);
		
		String disbId=CommonFunction.checkNull(session.getAttribute("loanDisbursalId"));
		String specialConditionStatus=service.checkSpecialConditionAvail(vo,disbId,recStatus);
		
		String stat1 =""; 
		String stat2 ="";
		String chkPRSPRDDocsFlag="";
		
		if(recStatus.equalsIgnoreCase("F"))
		{
			StringBuilder chkPRSDocs = new StringBuilder();
			StringBuilder chkPRDDocs = new StringBuilder();
			StringBuilder chkPRSPRDDocs=new StringBuilder();
			
			String docsReceived=CommonFunction.checkNull(request.getParameter("docs"));
			chkPRSDocs.append("select 1 from cr_document_dtl where STAGE_ID='PRS' AND DOC_STATUS IN ('P','D') AND TXN_TYPE='DC' AND DOC_MANDATORY='Y' AND TXNID=(select loan_deal_id from cr_loan_dtl where loan_id="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxLoanNoHID())).trim()+")");
			chkPRDDocs.append("select 1 from cr_document_dtl where STAGE_ID='PRD' AND DOC_STATUS='P' AND TXN_TYPE='LIM' AND DOC_MANDATORY='Y' AND TXNID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxLoanNoHID())).trim()+"");
			chkPRSPRDDocs.append("select parameter_value from parameter_mst where parameter_key='CHECK_STATUS_PRS_PRD_DOCUMENT'" );
			stat1 = ConnectionDAO.singleReturn(chkPRSDocs.toString());
			stat2 = ConnectionDAO.singleReturn(chkPRDDocs.toString());
			chkPRSPRDDocsFlag = ConnectionDAO.singleReturn(chkPRSPRDDocs.toString());
			logger.info("chkPRSPRDDocs query:::::::::"+chkPRSPRDDocs.toString());
			//logger.info("chkPRSPRDDocsFlag:::::::456"+chkPRSPRDDocsFlag);
		      logger.info(new StringBuilder().append("chkPRSPRDDocsFlag:::::::").append(chkPRSPRDDocsFlag).toString());
			
			if(docsReceived.equalsIgnoreCase("N")){
				if(stat1!=null && !stat1.equalsIgnoreCase(""))
				{
					logger.info("stat1 222222 "+stat1);
					stat1=null;
					request.setAttribute("disbStatus", "PRSDocs");
				}
				if(stat2!=null && !stat2.equalsIgnoreCase(""))
				{
					logger.info("stat2 222222 "+stat2);
					stat2=null;
					request.setAttribute("disbStatus", "PRDDocs");
				}
				
				
			}
		
		}
		
		
		if((stat1==null || stat1.equalsIgnoreCase("")) && (stat2==null || stat2.equalsIgnoreCase("")))
		{
		
		/* ****************************** Update For Repayment type "Installment based plan" ************* */
		if(vo.getRepayMode().equalsIgnoreCase("I"))
		{
		  /* **********************    Update for Final Disbursal       ********************** */
			if(finalDisbChk.equalsIgnoreCase("F"))
			{
				if(feasibilityStatus.equalsIgnoreCase("DisbAmt"))
				{
					request.setAttribute("disbStatus","DisbAmt");
					ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
					DisbursalMakerVO vo1 = new DisbursalMakerVO();
					vo1=(DisbursalMakerVO) disbursalData.get(0);
					request.setAttribute("disbursalData",disbursalData);
					request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
					request.setAttribute("disbursalTo", vo1.getDisbursalTo());
					logger.info("updateDisbursalDataFailed(feasibilityStatus/DisbAmt)check1 ");
					retStr="updateDisbursalDataFailed";
				}			
				else if(feasibilityStatus.equalsIgnoreCase("ShrtPayAmt"))
				{
					request.setAttribute("disbStatus","ShrtPayAmt");
					ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
					DisbursalMakerVO vo1 = new DisbursalMakerVO();
					vo1=(DisbursalMakerVO) disbursalData.get(0);
					request.setAttribute("disbursalData",disbursalData);
					request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
					request.setAttribute("disbursalTo", vo1.getDisbursalTo());
					logger.info("updateDisbursalDataFailed(feasibilityStatus/ShrtPayAmt)check2 ");
					retStr="updateDisbursalDataFailed";
				}
				else if(service.getDisbursalAmountCheck(vo).equalsIgnoreCase("preProposedDisbDate"))
				{
					
						request.setAttribute("disbStatus","preProposedDisbDate");
						ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
						DisbursalMakerVO vo1 = new DisbursalMakerVO();
						vo1=(DisbursalMakerVO) disbursalData.get(0);
						request.setAttribute("disbursalData",disbursalData);
						request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
						request.setAttribute("disbursalTo", vo1.getDisbursalTo());
						logger.info("updateDisbursalDataFailed(service/preProposedDisbDate)check3 ");
						retStr="updateDisbursalDataFailed";
				}
				else if(service.getDisbursalAmountCheck(vo).equalsIgnoreCase("disbursalAmount"))
				{
					
						request.setAttribute("disbStatus","disbursalAmount");
						ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
						DisbursalMakerVO vo1 = new DisbursalMakerVO();
						vo1=(DisbursalMakerVO) disbursalData.get(0);
						request.setAttribute("disbursalData",disbursalData);
						request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
						request.setAttribute("disbursalTo", vo1.getDisbursalTo());
						logger.info("updateDisbursalDataFailed(service/disbursalAmount)check4 ");
						retStr="updateDisbursalDataFailed";
				}
				else if(feasibilityStatus.equalsIgnoreCase("LoanAmt"))
				{
					if(CommonFunction.checkNull(specialConditionStatus).equalsIgnoreCase("E"))
					{
						ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
						DisbursalMakerVO vo1 = new DisbursalMakerVO();
						vo1=(DisbursalMakerVO) disbursalData.get(0);
						request.setAttribute("disbursalData",disbursalData);
						request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
						request.setAttribute("disbursalTo", vo1.getDisbursalTo());
						retStr="updateDisbursalDataFailed";	
						request.setAttribute("specialConditionStatus", "E");
					}
					else if(CommonFunction.checkNull(specialConditionStatus).equalsIgnoreCase("S"))
					{
						status = service.updateDisbursalData(vo,recStatus,"F");
						if(status)
						{
							request.setAttribute("message","S");
							if(recStatus.equalsIgnoreCase("P"))
							{
								ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
								DisbursalMakerVO vo1 = new DisbursalMakerVO();
								vo1=(DisbursalMakerVO) disbursalData.get(0);
								request.setAttribute("disbursalData",disbursalData);
								request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
								request.setAttribute("disbursalTo", vo1.getDisbursalTo());
								logger.info("saveDisbursalData(service/LoanAmt)check5 if ");
								retStr="saveDisbursalData";
							}
							else
							{
								request.setAttribute("disbursalMaker","disbursalMaker");
								retStr="updateDisbursalData";
							}
						}
						else
						{
							request.setAttribute("message","E");
							ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
							DisbursalMakerVO vo1 = new DisbursalMakerVO();
							vo1=(DisbursalMakerVO) disbursalData.get(0);
							request.setAttribute("disbursalData",disbursalData);
							request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
							request.setAttribute("disbursalTo", vo1.getDisbursalTo());
							logger.info("updateDisbursalDataFailed(service/LoanAmt)check5 else ");
							retStr="updateDisbursalDataFailed";
						}
					}
				}
				else if(feasibilityStatus.equalsIgnoreCase("eqDisbAmt"))
				{
					if(CommonFunction.checkNull(specialConditionStatus).equalsIgnoreCase("E"))
					{
						ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
						DisbursalMakerVO vo1 = new DisbursalMakerVO();
						vo1=(DisbursalMakerVO) disbursalData.get(0);
						request.setAttribute("disbursalData",disbursalData);
						request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
						request.setAttribute("disbursalTo", vo1.getDisbursalTo());
						retStr="updateDisbursalDataFailed";
						request.setAttribute("specialConditionStatus", "E");
					}
					else if(CommonFunction.checkNull(specialConditionStatus).equalsIgnoreCase("S"))
					{
					status = service.updateDisbursalData(vo,recStatus,"F");
						if(status)
						{
							request.setAttribute("message","S");
							if(recStatus.equalsIgnoreCase("P"))
							{
								ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
								DisbursalMakerVO vo1 = new DisbursalMakerVO();
								vo1=(DisbursalMakerVO) disbursalData.get(0);
								request.setAttribute("disbursalData",disbursalData);
								request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
								request.setAttribute("disbursalTo", vo1.getDisbursalTo());
								retStr="saveDisbursalData";
							}
							else
							{
								request.setAttribute("disbursalMaker","disbursalMaker");
								retStr="updateDisbursalData";
							}
						}
						else
						{
							request.setAttribute("message","E");
							ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
							DisbursalMakerVO vo1 = new DisbursalMakerVO();
							vo1=(DisbursalMakerVO) disbursalData.get(0);
							request.setAttribute("disbursalData",disbursalData);
							request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
							request.setAttribute("disbursalTo", vo1.getDisbursalTo());
							logger.info("updateDisbursalDataFailed(service/eqDisbAmt)check6 else ");
							retStr="updateDisbursalDataFailed";
						}
					}
				}
		   }		
			/* ************************************* Update for Non Final Disbursal *************** */
		   else if(finalDisbChk.equals("P"))
		   {
					if(feasibilityStatus.equalsIgnoreCase("DisbAmt") )
					{
						request.setAttribute("disbStatus","DisbAmt");
						ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
						DisbursalMakerVO vo1 = new DisbursalMakerVO();
						vo1=(DisbursalMakerVO) disbursalData.get(0);
						request.setAttribute("disbursalData",disbursalData);
						request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
						request.setAttribute("disbursalTo", vo1.getDisbursalTo());
						retStr="updateDisbursalDataFailed";
					}
					
					else if(feasibilityStatus.equalsIgnoreCase("ShrtPayAmt"))
					{
						request.setAttribute("disbStatus","ShrtPayAmt");
						ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
						DisbursalMakerVO vo1 = new DisbursalMakerVO();
						vo1=(DisbursalMakerVO) disbursalData.get(0);
						request.setAttribute("disbursalData",disbursalData);
						request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
						request.setAttribute("disbursalTo", vo1.getDisbursalTo());
						retStr="updateDisbursalDataFailed";
					}
					else if(service.getDisbursalAmountCheck(vo).equalsIgnoreCase("preProposedDisbDate"))
					{
						
							request.setAttribute("disbStatus","preProposedDisbDate");
							ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
							DisbursalMakerVO vo1 = new DisbursalMakerVO();
							vo1=(DisbursalMakerVO) disbursalData.get(0);
							request.setAttribute("disbursalData",disbursalData);
							request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
							request.setAttribute("disbursalTo", vo1.getDisbursalTo());
							retStr="updateDisbursalDataFailed";
					}
					else if(service.getDisbursalAmountCheck(vo).equalsIgnoreCase("disbursalAmount"))
					{
						
							request.setAttribute("disbStatus","disbursalAmount");
							ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
							DisbursalMakerVO vo1 = new DisbursalMakerVO();
							vo1=(DisbursalMakerVO) disbursalData.get(0);
							request.setAttribute("disbursalData",disbursalData);
							request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
							request.setAttribute("disbursalTo", vo1.getDisbursalTo());
							retStr="updateDisbursalDataFailed";
					}
					else if(feasibilityStatus.equalsIgnoreCase("LoanAmt"))
					{
						vo.setCycleDate("");
						vo.setRepayEffDate("");
						String date=vo.getNextDueDate();
						String amount=vo.getPreEMINextMonth();
						if(CommonFunction.checkNull(specialConditionStatus).equalsIgnoreCase("E"))
						{
							ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
							DisbursalMakerVO vo1 = new DisbursalMakerVO();
							vo1=(DisbursalMakerVO) disbursalData.get(0);
							request.setAttribute("disbursalData",disbursalData);
							request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
							request.setAttribute("disbursalTo", vo1.getDisbursalTo());
							retStr="updateDisbursalDataFailed";	
							request.setAttribute("specialConditionStatus", "E");
						}
						else if(CommonFunction.checkNull(specialConditionStatus).equalsIgnoreCase("S"))
						{
							status = service.updateDisbursalData(vo,recStatus,"P");
							if(status)
							{
								request.setAttribute("message","S");
								if(recStatus.equalsIgnoreCase("P"))
								{
									ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
									DisbursalMakerVO vo1 = new DisbursalMakerVO();
									vo1=(DisbursalMakerVO) disbursalData.get(0);
									request.setAttribute("disbursalData",disbursalData);
									request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
									request.setAttribute("disbursalTo", vo1.getDisbursalTo());
									retStr="saveDisbursalData";
								}
								else
								{
									request.setAttribute("disbursalMaker","disbursalMaker");
									retStr="updateDisbursalData";
								}
							}
							else
							{
								request.setAttribute("message","E");
								ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
								DisbursalMakerVO vo1 = new DisbursalMakerVO();
								vo1=(DisbursalMakerVO) disbursalData.get(0);
								request.setAttribute("disbursalData",disbursalData);
								request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
								request.setAttribute("disbursalTo", vo1.getDisbursalTo());
								retStr="updateDisbursalDataFailed";
							}
						}
					}
					
					else if(feasibilityStatus.equalsIgnoreCase("eqDisbAmt"))
					{
						vo.setCycleDate("");
						vo.setRepayEffDate("");
						if(CommonFunction.checkNull(specialConditionStatus).equalsIgnoreCase("E"))
						{
							ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
							DisbursalMakerVO vo1 = new DisbursalMakerVO();
							vo1=(DisbursalMakerVO) disbursalData.get(0);
							request.setAttribute("disbursalData",disbursalData);
							request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
							request.setAttribute("disbursalTo", vo1.getDisbursalTo());
							retStr="updateDisbursalDataFailed";
							request.setAttribute("specialConditionStatus", "E");
						}
						else if(CommonFunction.checkNull(specialConditionStatus).equalsIgnoreCase("S"))
						{
							status = service.updateDisbursalData(vo,recStatus,"P");
							if(status)
							{
								request.setAttribute("message","S");
								if(recStatus.equalsIgnoreCase("P"))
								{
									ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
									DisbursalMakerVO vo1 = new DisbursalMakerVO();
									vo1=(DisbursalMakerVO) disbursalData.get(0);
									request.setAttribute("disbursalData",disbursalData);
									request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
									request.setAttribute("disbursalTo", vo1.getDisbursalTo());
									retStr="saveDisbursalData";
								}
								else
								{
									request.setAttribute("disbursalMaker","disbursalMaker");
									retStr="updateDisbursalData";
								}
							}
							else
							{
								request.setAttribute("message","E");
								ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
								DisbursalMakerVO vo1 = new DisbursalMakerVO();
								vo1=(DisbursalMakerVO) disbursalData.get(0);
								request.setAttribute("disbursalData",disbursalData);
								request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
								request.setAttribute("disbursalTo", vo1.getDisbursalTo());
								retStr="updateDisbursalDataFailed";
							}
						}
					}
				}
			}
		else if(vo.getRepayMode().equalsIgnoreCase("N"))
		{		
		/* ****************** For Repayment Type "Non Installment based plan" ********** */
		
			logger.info("feasibilityStatus in non installment based: "+feasibilityStatus);
			
			if(feasibilityStatus.equalsIgnoreCase("ShrtPayAmt") )
			{
				request.setAttribute("disbStatus","ShrtPayAmt");
				ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
				DisbursalMakerVO vo1 = new DisbursalMakerVO();
				vo1=(DisbursalMakerVO) disbursalData.get(0);
				request.setAttribute("disbursalData",disbursalData);
				request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
				request.setAttribute("disbursalTo", vo1.getDisbursalTo());
				retStr="updateDisbursalDataFailed";
			}
			else if(service.getDisbursalAmountCheck(vo).equalsIgnoreCase("disbursalAmtForNonInst") )
			{
					
					request.setAttribute("disbStatus","disbursalAmtForNonInst");
					ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
					DisbursalMakerVO vo1 = new DisbursalMakerVO();
					vo1=(DisbursalMakerVO) disbursalData.get(0);
					request.setAttribute("disbursalData",disbursalData);
					request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
					request.setAttribute("disbursalTo", vo1.getDisbursalTo());
					retStr="updateDisbursalDataFailed";
			}
		
			else if(feasibilityStatus.equalsIgnoreCase("LoanAmt"))
			{
				vo.setCycleDate("");
				//vo.setRepayEffDate("");
				if(CommonFunction.checkNull(specialConditionStatus).equalsIgnoreCase("E"))
				{
					ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
					DisbursalMakerVO vo1 = new DisbursalMakerVO();
					vo1=(DisbursalMakerVO) disbursalData.get(0);
					request.setAttribute("disbursalData",disbursalData);
					request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
					request.setAttribute("disbursalTo", vo1.getDisbursalTo());
					retStr="updateDisbursalDataFailed";	
					request.setAttribute("specialConditionStatus", "E");
				}
				else if(CommonFunction.checkNull(specialConditionStatus).equalsIgnoreCase("S"))
				{
					status = service.updateDisbursalData(vo,recStatus,"P");
					if(status)
					{
						request.setAttribute("message","S");
						if(recStatus.equalsIgnoreCase("P"))
						{
							ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
							DisbursalMakerVO vo1 = new DisbursalMakerVO();
							vo1=(DisbursalMakerVO) disbursalData.get(0);
							request.setAttribute("disbursalData",disbursalData);
							request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
							request.setAttribute("disbursalTo", vo1.getDisbursalTo());
							retStr="saveDisbursalData";
						}
						else
						{
							request.setAttribute("disbursalMaker","disbursalMaker");
							retStr="updateDisbursalData";
						}
					}
					else
					{
						request.setAttribute("message","E");
						ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
						DisbursalMakerVO vo1 = new DisbursalMakerVO();
						vo1=(DisbursalMakerVO) disbursalData.get(0);
						request.setAttribute("disbursalData",disbursalData);
						request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
						request.setAttribute("disbursalTo", vo1.getDisbursalTo());
						retStr="updateDisbursalDataFailed";	
					}
				}
			}
			
			else if(feasibilityStatus.equalsIgnoreCase("eqDisbAmt"))
			{
				vo.setCycleDate("");
				//vo.setRepayEffDate("");
				if(CommonFunction.checkNull(specialConditionStatus).equalsIgnoreCase("E"))
				{
					ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
					DisbursalMakerVO vo1 = new DisbursalMakerVO();
					vo1=(DisbursalMakerVO) disbursalData.get(0);
					request.setAttribute("disbursalData",disbursalData);
					request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
					request.setAttribute("disbursalTo", vo1.getDisbursalTo());
					retStr="updateDisbursalDataFailed";
					request.setAttribute("specialConditionStatus", "E");
				}
				else if(CommonFunction.checkNull(specialConditionStatus).equalsIgnoreCase("S"))
				{
					status = service.updateDisbursalData(vo,recStatus,"P");
					if(status)
					{
						request.setAttribute("message","S");
						if(recStatus.equalsIgnoreCase("P"))
						{
							ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
							DisbursalMakerVO vo1 = new DisbursalMakerVO();
							vo1=(DisbursalMakerVO) disbursalData.get(0);
							request.setAttribute("disbursalData",disbursalData);
							request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
							request.setAttribute("disbursalTo", vo1.getDisbursalTo());	
							retStr="saveDisbursalData";
						}
						else
						{
							request.setAttribute("disbursalMaker","disbursalMaker");
							retStr="updateDisbursalData";
						}
					}
					else
					{
						request.setAttribute("message","E");
						ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
						DisbursalMakerVO vo1 = new DisbursalMakerVO();
						vo1=(DisbursalMakerVO) disbursalData.get(0);
						request.setAttribute("disbursalData",disbursalData);
						request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
						request.setAttribute("disbursalTo", vo1.getDisbursalTo());
						retStr="updateDisbursalDataFailed";
					}
				}
			}
		}
		}
		else
		{
			retStr="updateDisbursalDataFailed";
			if(stat1!=null && !stat1.equalsIgnoreCase(""))
			{
				logger.info("stat1 222222 "+stat1);
				request.setAttribute("disbStatus", "PRSDocs");
			}
			if(stat2!=null && !stat2.equalsIgnoreCase(""))
			{
				logger.info("stat2 222222 "+stat2);
				request.setAttribute("disbStatus", "PRDDocs");
			}
			request.setAttribute("chkPRSPRDDocsFlag", chkPRSPRDDocsFlag);
		
			ArrayList<DisbursalMakerVO> disbursalData = service.selectDisbursalData(vo.getLbxLoanNoHID(),vo.getDisbursalNo(),makerDate,vo.getDisbursalTo());
			DisbursalMakerVO vo1=(DisbursalMakerVO) disbursalData.get(0);
			vo1.setRepayEffDate(vo.getRepayEffDate());
			vo1.setNextDueDate(vo.getNextDueDate());
			vo1.setCycleDate(vo.getCycleDate());
			vo1.setShortPayAmount(vo.getShortPayAmount());
			vo1.setDisbursalDescription(vo.getDisbursalDescription());
			vo1.setDisbursalAmount(vo.getDisbursalAmount());
			//Added by arun-----------------
			/*if(CommonFunction.checkNull(vo.getFinalDisbursal()).trim().equalsIgnoreCase("on"))
				request.setAttribute("fianlDisb","F");
			else
				request.setAttribute("fianlDisb","P");*/
			if(finalDisbursal!=null)
				finalDisbChk="F";
			else
				finalDisbChk="P";
			logger.info("finalDisbursal Arun for c$$$$$$Cuncheck_------- "+finalDisbursal);
			request.setAttribute("fianlDisb",finalDisbChk);
			//Added By arun for disbursal 
			ArrayList<DisbursalMakerVO> disbuList =new ArrayList();
			disbuList.add(vo1);
			request.setAttribute("disbursalData",disbuList);
			request.setAttribute("disbursalTo", vo.getDisbursalTo());
			retStr="updateDisbursalDataFailed";	
			logger.info("retStr 11111111111111111 "+retStr);
		}
		request.setAttribute("maxDisbursalDate", request.getParameter("maxDisbursalDate"));
		logger.info("In save disbursal maxDisbursalDate:"+request.getParameter("maxDisbursalDate"));
		form.reset(mapping, request);
		return mapping.findForward(retStr);
	}
	/*Arun Code for disbursal with payment*/
	public ActionForward saveDisbursalDataWithPayment(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
            logger.info("Inside DisbursalMakerDispatchAction......saveDisbursalDataWithPayment");
		
		HttpSession session =  request.getSession();		
		UserObject userobj=(UserObject)session.getAttribute("userobject");		
		String makerId ="";
		String makerDate ="";
		String branchId ="";
		String maturityDate1="";//added by brijesh pathak
		 String loanTenure = "";
		if(userobj!=null){
			makerId = userobj.getUserId();
			makerDate=userobj.getBusinessdate();
			branchId = userobj.getBranchId();
		}else{
			logger.info("Inside saveDisbursalDataWithPayment DisbursalMakerDispatchAction the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		//boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		int status=0;
		String retStr="";
		String loanIDDisbursal = CommonFunction.checkNull(request.getParameter("loanIDDisbursal"));		
		session.removeAttribute("disbursalDataAuthor");
		session.removeAttribute("disbursalPaymentAddDtl");
	    DynaValidatorForm DisbursedInitiationMakerDynaValidatorForm = (DynaValidatorForm)form;
		DisbursalMakerVO vo = new DisbursalMakerVO();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,DisbursedInitiationMakerDynaValidatorForm);
		vo.setLbxLoanNoHID(loanIDDisbursal);
		vo.setMakerId(makerId);
		vo.setMakerDate(makerDate);	
		vo.setDefaultBranch(branchId);
		vo.setMaturityDate1(request.getParameter("maturityDate1"));//added by brijesh pathak
	    vo.setLoanTenure(request.getParameter("tenureMonths"));
	    logger.info(new StringBuilder().append("vo.loanTenure::").append(request.getParameter("tenureMonths")).toString());
		//logger.info("vo.setMaturityDate1::"+)
		//DisbursalInitiationDAO service = new DisbursalInitiationDAOImpl();
		DisbursalInitiationDAO service=(DisbursalInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(DisbursalInitiationDAO.IDENTITY);
		// Saorabh Space Start
		
		String str = service.getDateForDisbursalCheck(vo);
		String typeOfDisbursal = CommonFunction.checkNull(vo.getFinalDisbursal());
		logger.info("typeOfDisbursal----------------------"+typeOfDisbursal);
		if(!typeOfDisbursal.equalsIgnoreCase("ON"))
    	{
			if(str.equalsIgnoreCase("F"))
			{
				request.setAttribute("disbursalDate", str);
				return mapping.findForward("checkDisbursalDate");
			}
    	}
			//saorabh Space End
	    logger.info("Implementation class: "+service.getClass());
	    String revolvingFlag=service.getrevolvingFlag(loanIDDisbursal);
		session.setAttribute("revolvingFlag",revolvingFlag);
		String balancePrinc=service.getBalancePrinc(loanIDDisbursal);
		session.setAttribute("balancePrinc",balancePrinc);
		String forwardedAmt=service.getForwardedAmt(loanIDDisbursal);
		session.setAttribute("forwardedAmt",forwardedAmt);
		vo.setRevolvingFlag(revolvingFlag);
		vo.setBalancePrinc(balancePrinc);
		vo.setForwardedAmt(forwardedAmt);
		String feasibilityStatus=CommonFunction.checkNull(service.disbursalFeasibility(vo));
		String nextDueDate=vo.getNextDueDate();
		String totalReceiveable="Select parameter_value from parameter_mst where parameter_key='TOTAL_RECEIVABLE_CURRENT_SHORT_PAY'";
		String flagVal=CommonFunction.checkNull(ConnectionDAO.singleReturn(totalReceiveable));
	    String finalDisb="";
		if(vo.getFinalDisbursal()!=null&&vo.getFinalDisbursal().equalsIgnoreCase("on")){
			finalDisb="F";
		}else{
			finalDisb="P";
		}
		//amandeep work starts
		String loanCurtail="";
		if(vo.getLoanCurtail()!=null&&vo.getLoanCurtail().equalsIgnoreCase("on")){
			loanCurtail="Y";
		}else{
			loanCurtail="N";
		}
		//amandeep work ends
		BigDecimal  totalReceivableBig=null;
		BigDecimal  totalReceivableAdjustBig=null;
		boolean saveFlag=true;
		if(flagVal.equalsIgnoreCase("Y")&&finalDisb.equalsIgnoreCase("F")){
			String totalReceivable=CommonFunction.checkNull(vo.getTotalReceivable());
			String totalReceivableAdjust=CommonFunction.checkNull(vo.getAdjustTotalReceivable());
			if(!totalReceivable.equalsIgnoreCase("")){
				totalReceivableBig = new BigDecimal(myFormatter.parse((CommonFunction.checkNull(totalReceivable).trim())).toString());
			}else{
				totalReceivableBig = new BigDecimal("0.0");
			}
			if(!totalReceivableAdjust.equalsIgnoreCase("")){
				totalReceivableAdjustBig = new BigDecimal(myFormatter.parse((CommonFunction.checkNull(totalReceivableAdjust).trim())).toString());
			}else{
				totalReceivableAdjustBig = new BigDecimal("0.0");	
			}
			if(totalReceivableAdjustBig.compareTo(totalReceivableBig)!=0){
				saveFlag=false;
			}
		}
		 if(nextDueDate != null && nextDueDate.equals("undefined"))
			 nextDueDate="";
		 vo.setNextDueDate(nextDueDate);
		ArrayList<DisbursalMakerVO> cycleDate = service.getCycleDateList();
		request.setAttribute("cycleDate",cycleDate);
		String disbursalId="0";
		String totalRecv="0";	
		if(vo.getFinalDisbursal()!=null && vo.getFinalDisbursal().equalsIgnoreCase("on") && flagVal.equalsIgnoreCase("Y")){
			finalDisb="F";
    		ArrayList totalPayReceivList= service.getTotalPayableReceiable(loanIDDisbursal, "CS");
    		
    		if(totalPayReceivList.size()>0 && !vo.getDisbursalTo().equalsIgnoreCase("CS")){
    			ArrayList totalShortPay= service.getTotalShortPay(loanIDDisbursal, "CS");
    			if(totalShortPay.size()>0 && !(totalPayReceivList.get(1).toString().equalsIgnoreCase(totalShortPay.get(0).toString()))){
    			 totalRecv=totalPayReceivList.get(1).toString();
    			}   			
    		}
		}
		if((feasibilityStatus.equalsIgnoreCase("LoanAmt")
				|| feasibilityStatus.equalsIgnoreCase("eqDisbAmt"))&& saveFlag && (totalRecv.equalsIgnoreCase("0"))){
			boolean st=false;
			if(CommonFunction.checkNull(vo.getPaymentMode()).equalsIgnoreCase("C"))
				st = service.paymentAmountAtDisbursal(vo);
			else
				st = true;
			
			String finalResult="ALLRIGHT";
			
			if(st && vo.getFinalDisbursal()!=null && vo.getFinalDisbursal().equalsIgnoreCase("on")){
				finalResult= service.validationOnLeadPartner(vo.getLbxLoanNoHID());
				request.setAttribute("message",finalResult);
			}
			String dealId = ConnectionDAO.singleReturn("SELECT IFNULL(LOAN_DEAL_ID,0) FROM CR_LOAN_DTL WHERE LOAN_ID  = '"+request.getParameter("lbxLoanNoHID")+"' ");
			String loanProduct = ConnectionDAO.singleReturn("SELECT LOAN_PRODUCT FROM CR_LOAN_DTL WHERE LOAN_ID  = '"+request.getParameter("lbxLoanNoHID")+"' ");
			LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
			
			String checkAvailableAmtLimit = dao.checkDealSanctionLimit(dealId,"0", loanProduct, CommonFunction.checkNull(vo.getDisbursalAmount()));
			
			if(st && finalResult.equalsIgnoreCase("ALLRIGHT") && CommonFunction.checkNull(checkAvailableAmtLimit).equalsIgnoreCase("S"))
			{
				logger.info("In Action::"+vo.getMaturityDate1());//added by brijesh pathak
				disbursalId=service.saveDisbursalDataWithPayment(vo); 
			}
			else if(finalResult.equalsIgnoreCase("AMTNOTMATCH") || finalResult.equalsIgnoreCase("CAPTURELEAD"))
				disbursalId=finalResult;
			else if(CommonFunction.checkNull(checkAvailableAmtLimit).equalsIgnoreCase("E"))
				disbursalId = "SancLimitExceed";
			else	
				disbursalId="limitExceed";
			
			/*sarvesh started for pre-emi started*/
			String loan_id=request.getParameter("lbxLoanNoHID");
			String disbursalAmount=request.getParameter("disbursalAmount");
			String disbursalDate=request.getParameter("disbursalDate");
			String repayEffDate=request.getParameter("repayEffDate");
			String disbursalStatus=request.getParameter("disbursalStatus");
			//String maturityDate1=request.getParameter("maturityDate1"));//added by brijesh pathak
			String bDate="";
			String userId="";
			if(userobj!=null)
			{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
			}
			ArrayList<DisbursalMakerVO> EMIList= service.calculateEMI(disbursalAmount,disbursalDate,loan_id,bDate,userId,repayEffDate,disbursalStatus);
			
			/*	sarvesh ended for pre-emi ended*/
			
			if(!disbursalId.equalsIgnoreCase("") && (disbursalId.equalsIgnoreCase("AMTNOTMATCH") || disbursalId.equalsIgnoreCase("CAPTURELEAD") || disbursalId.equalsIgnoreCase("SancLimitExceed"))){
				ArrayList disbursalData=service.getDisbursalDataWithPayment(vo);
				request.setAttribute("disbursalData",disbursalData);
				request.setAttribute("message",disbursalId);
			}
			
			else if(!disbursalId.equalsIgnoreCase("") && !disbursalId.equalsIgnoreCase("limitExceed")){
				ArrayList disbursalData=service.getDisbursalDataWithPayment(vo);
				request.setAttribute("disbursalData",disbursalData);
				request.setAttribute("message","S");	
			}else if(disbursalId.equalsIgnoreCase("limitExceed")){
				ArrayList disbursalDataError=new ArrayList();
				if(vo.getFinalDisbursal()!=null&&vo.getFinalDisbursal().equalsIgnoreCase("on")){
					vo.setFinalDisbursal("F");	
				}else{
					vo.setFinalDisbursal("P");
				}
				disbursalDataError.add(vo);
				request.setAttribute("disbursalDataError",disbursalDataError);
				request.setAttribute("message","LE");
			}else{
				ArrayList disbursalDataError=new ArrayList();
				if(vo.getFinalDisbursal()!=null&&vo.getFinalDisbursal().equalsIgnoreCase("on")){
					vo.setFinalDisbursal("F");	
				}else{
					vo.setFinalDisbursal("P");
				}
				disbursalDataError.add(vo);
				request.setAttribute("disbursalDataError",disbursalDataError);
				request.setAttribute("message","E");
			}
		}else{
			if(feasibilityStatus.equalsIgnoreCase("DisbAmt") )
			{
				ArrayList<DisbursalMakerVO> disbursalDataNew = new ArrayList<DisbursalMakerVO>();
				disbursalDataNew.add(vo);
				request.setAttribute("disbursalDataNew",disbursalDataNew);
				request.setAttribute("disbStatus","DisbAmt");
			}else if(feasibilityStatus.equalsIgnoreCase("DisbAmtRV"))
			{
				ArrayList<DisbursalMakerVO> disbursalDataNew = new ArrayList<DisbursalMakerVO>();
				disbursalDataNew.add(vo);
				request.setAttribute("disbursalDataNew",disbursalDataNew);
				request.setAttribute("disbStatus","DisbAmtRV");
			}else if(service.getDisbursalAmountCheck(vo).equalsIgnoreCase("disbursalAmount"))
			{
				ArrayList<DisbursalMakerVO> disbursalDataNew = new ArrayList<DisbursalMakerVO>();
				disbursalDataNew.add(vo);
				request.setAttribute("disbursalDataNew",disbursalDataNew);
				request.setAttribute("disbStatus","disbursalAmount");
			}else if(service.getDisbursalAmountCheck(vo).equalsIgnoreCase("preProposedDisbDate"))
			{
				ArrayList<DisbursalMakerVO> disbursalDataNew = new ArrayList<DisbursalMakerVO>();
				disbursalDataNew.add(vo);
				request.setAttribute("disbursalDataNew",disbursalDataNew);
				request.setAttribute("disbStatus","preProposedDisbDate");
			}
			else if(feasibilityStatus.equalsIgnoreCase("balAmount"))
			{
				ArrayList<DisbursalMakerVO> disbursalDataNew = new ArrayList<DisbursalMakerVO>();
				disbursalDataNew.add(vo);
				request.setAttribute("disbursalDataNew",disbursalDataNew);	
				request.setAttribute("disbStatus","balAmount");	
				
			}else if(service.getDisbursalAmountCheck(vo).equalsIgnoreCase("preProposedDisbDate"))
			{					
				ArrayList<DisbursalMakerVO> disbursalDataNew = new ArrayList<DisbursalMakerVO>();
				disbursalDataNew.add(vo);
				request.setAttribute("disbursalDataNew",disbursalDataNew);
				request.setAttribute("disbStatus","preProposedDisbDate");
				
			}else if(service.getDisbursalAmountCheck(vo).equalsIgnoreCase("disbursalAmount"))
			{
				ArrayList<DisbursalMakerVO> disbursalDataNew = new ArrayList<DisbursalMakerVO>();
				disbursalDataNew.add(vo);
				request.setAttribute("disbursalDataNew",disbursalDataNew);
				request.setAttribute("disbStatus","disbursalAmount");
			}
			if(!saveFlag)
			{
				ArrayList<DisbursalMakerVO> disbursalDataNew = new ArrayList<DisbursalMakerVO>();
				disbursalDataNew.add(vo);
				request.setAttribute("disbursalDataNew",disbursalDataNew);
				request.setAttribute("disbStatus","totalReceivable");
			}
			
			if(vo.getFinalDisbursal()!=null&&vo.getFinalDisbursal().equalsIgnoreCase("on")){
				vo.setFinalDisbursal("F");	
			}else{
				vo.setFinalDisbursal("P");
			}
			if(!(totalRecv.equalsIgnoreCase("0")))
			{
			
				request.setAttribute("totalRecv","Y");
				request.setAttribute("message","message");
			}
			ArrayList disbursalDataError=new ArrayList();
			disbursalDataError.add(vo);
			request.setAttribute("disbursalDataError","disbursalDataError");
		}
		ArrayList disbursalPaymentAddDtl=service.selectAddDetailsList(vo,"M");
		if(disbursalPaymentAddDtl.size()>0){
			request.setAttribute("disbursalPaymentAddDtl", disbursalPaymentAddDtl);	
		}
		request.setAttribute("fianlDisb",vo.getFinalDisbursal());
    	request.setAttribute("disbursalTo", vo.getDisbursalTo());
		request.setAttribute("maxDisbursalDate", CommonFunction.checkNull(vo.getMaxDisbursalDate()));
		ArrayList loanAndDisbAmountList=service.getLoanAndDisburdesAmount(vo);
		DisbursalMakerVO dvo=(DisbursalMakerVO)loanAndDisbAmountList.get(0);
		logger.info("vo disbursed amount"+dvo.getDisbursedAmount());
		logger.info("vo loan amount"+dvo.getLoanAmt());
		request.setAttribute("loanAndDisbAmountList", loanAndDisbAmountList);	
		
		request.setAttribute("maxDisbursalDate", request.getParameter("maxDisbursalDate"));
		logger.info("In save disbursal maxDisbursalDate:"+request.getParameter("maxDisbursalDate"));
		//Nishant space starts
		request.setAttribute("maturityDate1", request.getParameter("maturityDate1"));//added by brijesh pathak
		logger.info("maturityDate1:"+request.getParameter("maturityDate1"));//added by brijesh pathak
		String recoveryType=service.getRecoveryType(vo.getLbxLoanNoHID());
		request.setAttribute("recoveryType", recoveryType);
		String disbursalFlag=service.getDisbursalFlag(vo.getLbxLoanNoHID(),"DIM");
		request.setAttribute("disbursalFlag", disbursalFlag);
		String repaymentType=service.getRepaymentType(vo.getLbxLoanNoHID());
		request.setAttribute("repaymentType", repaymentType);
		logger.info(" vo.getLbxLoanNoHID(): "+ vo.getLbxLoanNoHID());
		
		if(saveFlag){
		
		// Code Added for Hidden field value on JSP
		String getEditDueDate= service.getEditDueDateStatus(vo.getLbxLoanNoHID());
		//request.setAttribute("getEditDueDate", getEditDueDate);
		logger.info("getEditDueDate: "+ getEditDueDate);
		request.setAttribute("editDueDate", getEditDueDate);
		logger.info("vo.getRepayEffDate(): "+ vo.getRepayEffDate());
		String loanRepayEffDate= service.getRepyEffDateOfLoan(vo.getLbxLoanNoHID());
		logger.info("loanRepayEffDate: "+ loanRepayEffDate);

      /*  SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date loanRepayEffectiveDate = sdf.parse(loanRepayEffDate);
       // SimpleDateFormat sd = new SimpleDateFormat("dd-mm-yyyy");
        Date disbRepayEffectiveDate = sdf.parse(vo.getRepayEffDate());
        if (loanRepayEffectiveDate.compareTo(disbRepayEffectiveDate) != 0 && getEditDueDate.equalsIgnoreCase("Y")) {
        	request.setAttribute("fwdStatusFlag", "N");
        }
        else
        {
        	request.setAttribute("fwdStatusFlag", "Y");
        }
*/
		
		}
		
		

		//Nishant space eds
		form.reset(mapping, request);
		return mapping.findForward("saveDisbursalDataPayment");
	}
	public ActionForward updateDisbursalDataWithPayment(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
            logger.info("Inside DisbursalMakerDispatchAction......updateDisbursalDataWithPayment");
		
		HttpSession session =  request.getSession();		
		UserObject userobj=(UserObject)session.getAttribute("userobject");		
		String makerId ="";
		String makerDate ="";
		String loanTenure = "";
		if(userobj!=null){
			makerId = userobj.getUserId();
			makerDate=userobj.getBusinessdate();
		}else{
			logger.info("Inside updateDisbursalDataWithPayment DisbursalMakerDispatchAction the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		//boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		 
		int status=0;
		String retStr="";
		//String loanIDDisbursal = CommonFunction.checkNull(request.getParameter("loanIDDisbursal"));		
		session.removeAttribute("disbursalDataAuthor");	
		session.removeAttribute("disbursalPaymentAddDtl");
		String recStatus=request.getParameter("saveForwordFlag");
		logger.info("recStatus in action:-------------------------------------"+recStatus);
	    DynaValidatorForm DisbursedInitiationMakerDynaValidatorForm = (DynaValidatorForm)form;
		DisbursalMakerVO vo = new DisbursalMakerVO();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,DisbursedInitiationMakerDynaValidatorForm);
		vo.setMakerId(makerId);
		vo.setMakerDate(makerDate);	
		   vo.setLoanTenure(request.getParameter("tenureMonths"));
		    logger.info(new StringBuilder().append("tenureMonths in action:-------------------------------------").append(request.getParameter("tenureMonths")).toString());
		//DisbursalInitiationDAO service = new DisbursalInitiationDAOImpl();
		logger.info("getFinalDisbursal in action:-------------------------------------"+vo.getFinalDisbursal());
		logger.info("getFinalDisbursal in action by request:-------------------------------------"+request.getParameter("finalDisbursal"));
	     vo.setFinalDisbursal(request.getParameter("finalDisbursal"));
	     logger.info("getLoanCurtailin action:-------------------------------------"+vo.getLoanCurtail());
		 logger.info("getLoanCurtail in action by request:-------------------------------------"+request.getParameter("loanCurtail"));
	     vo.setLoanCurtail(request.getParameter("loanCurtail"));
		DisbursalInitiationDAO service=(DisbursalInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(DisbursalInitiationDAO.IDENTITY);
	    logger.info("Implementation class: "+service.getClass());
	    String revolvingFlag=service.getrevolvingFlag(vo.getLbxLoanNoHID());
		session.setAttribute("revolvingFlag",revolvingFlag);
		String balancePrinc=service.getBalancePrinc(vo.getLbxLoanNoHID());
		session.setAttribute("balancePrinc",balancePrinc);
		String forwardedAmt=service.getForwardedAmt(vo.getLbxLoanNoHID());
		session.setAttribute("forwardedAmt",forwardedAmt);
		vo.setRevolvingFlag(revolvingFlag);
		vo.setBalancePrinc(balancePrinc);
		vo.setForwardedAmt(forwardedAmt);
		String feasibilityStatus=service.disbursalFeasibility(vo);
		String nextDueDate=vo.getNextDueDate();
		 if(nextDueDate != null && nextDueDate.equals("undefined"))
			 nextDueDate="";
		 vo.setNextDueDate(nextDueDate);
		ArrayList<DisbursalMakerVO> cycleDate = service.getCycleDateList();
		request.setAttribute("cycleDate",cycleDate);	
		String result="";
		logger.info("feasibilityStatus:---------"+feasibilityStatus);
		if(feasibilityStatus.equalsIgnoreCase("LoanAmt")
				|| feasibilityStatus.equalsIgnoreCase("eqDisbAmt") ){
				boolean st=false;
			if(CommonFunction.checkNull(vo.getPaymentMode()).equalsIgnoreCase("C"))
				st = service.paymentAmountAtDisbursal(vo);
			else
				st = true;
			
			String finalResult="ALLRIGHT";
			
			if(st && vo.getFinalDisbursal()!=null && vo.getFinalDisbursal().equalsIgnoreCase("on")){
				 finalResult= service.validationOnLeadPartner(vo.getLbxLoanNoHID());
			}
				
			
			if(st && finalResult.equalsIgnoreCase("ALLRIGHT"))
				result=service.updateDisbursalDataWithPayment(vo,recStatus);
			else if(finalResult.equalsIgnoreCase("AMTNOTMATCH") || finalResult.equalsIgnoreCase("CAPTURELEAD"))
				result=finalResult;
			else
				result="limitExceed";
			/*Sarvesh started for pre-emi*/
			String loan_id=request.getParameter("lbxLoanNoHID");
			String disbursalAmount=request.getParameter("disbursalAmount");
			String disbursalDate=request.getParameter("disbursalDate");
			String repayEffDate=request.getParameter("repayEffDate");
			String disbursalStatus=request.getParameter("disbursalStatus");
			String bDate="";
			String userId="";
			if(userobj!=null)
			{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
			}
			ArrayList<DisbursalMakerVO> EMIList= service.calculateEMI(disbursalAmount,disbursalDate,loan_id,bDate,userId,repayEffDate,disbursalStatus);
			
			/*sarvesh ended for pre-emi*/
			
			if(!result.equalsIgnoreCase("") && (result.equalsIgnoreCase("AMTNOTMATCH") || result.equalsIgnoreCase("CAPTURELEAD"))){
				ArrayList disbursalData=service.getDisbursalDataWithPayment(vo);
				request.setAttribute("disbursalData",disbursalData);
				request.setAttribute("message",result);
				DisbursalMakerVO vo1 = new DisbursalMakerVO();
				if(disbursalData.size()>0){
    			vo1=(DisbursalMakerVO) disbursalData.get(0);
				request.setAttribute("editDueDate", vo1.getEditDueDate());
				request.setAttribute("oldRepayEffDate", vo1.getOldRepayEffDate());
				}
			}
			else if(result.equalsIgnoreCase("saved")){
				ArrayList disbursalData=service.getDisbursalDataWithPayment(vo);
				request.setAttribute("disbursalData",disbursalData);
				request.setAttribute("message","S");	
				DisbursalMakerVO vo1 = new DisbursalMakerVO();
				if(disbursalData.size()>0){
    			vo1=(DisbursalMakerVO) disbursalData.get(0);
				request.setAttribute("editDueDate", vo1.getEditDueDate());
				request.setAttribute("oldRepayEffDate", vo1.getOldRepayEffDate());
				}
			}
			else if(result.equalsIgnoreCase("limitExceed")){
				ArrayList disbursalDataError=new ArrayList();
				if(vo.getFinalDisbursal()!=null&&vo.getFinalDisbursal().equalsIgnoreCase("on")){
					vo.setFinalDisbursal("F");	
				}else{
					vo.setFinalDisbursal("P");
				}
				disbursalDataError.add(vo);
				request.setAttribute("disbursalDataError",disbursalDataError);
				request.setAttribute("message","LE");
			}else{
				ArrayList disbursalDataError=new ArrayList();
				if(vo.getFinalDisbursal()!=null&&vo.getFinalDisbursal().equalsIgnoreCase("on")){
					vo.setFinalDisbursal("F");	
				}else{
					vo.setFinalDisbursal("P");
				}
				disbursalDataError.add(vo);
				request.setAttribute("disbursalDataError",disbursalDataError);
				request.setAttribute("message","E");
			}
		}else{
			if(feasibilityStatus.equalsIgnoreCase("DisbAmt") )
			{
				request.setAttribute("disbStatus","DisbAmt");
			}else if(service.getDisbursalAmountCheck(vo).equalsIgnoreCase("disbursalAmount"))
			{
				request.setAttribute("disbStatus","disbursalAmount");
			}else if(service.getDisbursalAmountCheck(vo).equalsIgnoreCase("preProposedDisbDate"))
			{
			request.setAttribute("disbStatus","preProposedDisbDate");
			}
			if(vo.getFinalDisbursal()!=null&&vo.getFinalDisbursal().equalsIgnoreCase("on")){
				vo.setFinalDisbursal("F");	
			}else{
				vo.setFinalDisbursal("P");
			}
			ArrayList disbursalDataError=new ArrayList();
			disbursalDataError.add(vo);
			
			request.setAttribute("disbursalDataError",disbursalDataError);
		}
		if(CommonFunction.checkNull(recStatus).equalsIgnoreCase("F")){
			logger.info("recStatus in if f:-----------"+recStatus);
			request.setAttribute("message","F");	
		}
		ArrayList disbursalPaymentAddDtl=service.selectAddDetailsList(vo,"M");
		if(disbursalPaymentAddDtl.size()>0){
			request.setAttribute("disbursalPaymentAddDtl", disbursalPaymentAddDtl);	
		}
		request.setAttribute("fianlDisb",vo.getFinalDisbursal());
    	request.setAttribute("disbursalTo", vo.getDisbursalTo());
    	ArrayList loanAndDisbAmountList=service.getLoanAndDisburdesAmount(vo);
		DisbursalMakerVO dvo=(DisbursalMakerVO)loanAndDisbAmountList.get(0);
		logger.info("vo disbursed amount"+dvo.getDisbursedAmount());
		logger.info("vo loan amount"+dvo.getLoanAmt());
		request.setAttribute("loanAndDisbAmountList", loanAndDisbAmountList);		
		request.setAttribute("maxDisbursalDate", request.getParameter("maxDisbursalDate"));
		logger.info("In save disbursal maxDisbursalDate:"+request.getParameter("maxDisbursalDate"));
		//Nishant space starts
		String recoveryType=service.getRecoveryType(vo.getLbxLoanNoHID());
		request.setAttribute("recoveryType", recoveryType);
		String disbursalFlag=service.getDisbursalFlag(vo.getLbxLoanNoHID(),"DIM");
		request.setAttribute("disbursalFlag", disbursalFlag);
		String repaymentType=service.getRepaymentType(vo.getLbxLoanNoHID());
		request.setAttribute("repaymentType", repaymentType);
		//Nishant space ends
		logger.info("Rahul vo.getLbxLoanNoHID(): "+ vo.getLbxLoanNoHID());
		String getEditDueDate= service.getEditDueDateStatus(vo.getLbxLoanNoHID());
		//request.setAttribute("getEditDueDate", getEditDueDate);
		logger.info("getEditDueDate: "+ getEditDueDate);
		request.setAttribute("editDueDate", getEditDueDate);
		//start here | brijesh Pathak
		/*String getLoanTenure= service.getLoanTenure(vo.getLbxLoanNoHID());
		logger.info("getLoanTenure: "+ getLoanTenure);*/
		 String getLoanTenure = request.getParameter("tenureMonths");
		    logger.info(new StringBuilder().append("getLoanTenure NEW: ").append(getLoanTenure).toString());
		request.setAttribute("LoanTenure", getLoanTenure);
		// end here | Brijesh Pathak
		logger.info("vo.getRepayEffDate(): "+ vo.getRepayEffDate());
		String loanRepayEffDate= service.getRepyEffDateOfLoan(vo.getLbxLoanNoHID());
		logger.info("loanRepayEffDate: "+ loanRepayEffDate);

       /* SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date loanRepayEffectiveDate = sdf.parse(loanRepayEffDate);
       // SimpleDateFormat sd = new SimpleDateFormat("dd-mm-yyyy");
        Date disbRepayEffectiveDate = sdf.parse(vo.getRepayEffDate());
        if (loanRepayEffectiveDate.compareTo(disbRepayEffectiveDate) != 0 && getEditDueDate.equalsIgnoreCase("Y") ) {
        	request.setAttribute("fwdStatusFlag", "N");
        }
        else
        {
        	request.setAttribute("fwdStatusFlag", "Y");
        }
		*/
		
		
		form.reset(mapping, request);
		return mapping.findForward("saveDisbursalDataPayment");
	}
	public ActionForward openAddDetailPopUp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
            logger.info("Inside DisbursalMakerDispatchAction......openAddDetailPopUp");
               		
    		HttpSession session =  request.getSession();		
    		UserObject userobj=(UserObject)session.getAttribute("userobject");		
    		String makerId ="";
    		String makerDate ="";
    		if(userobj!=null){
    			makerId = userobj.getUserId();
    			makerDate=userobj.getBusinessdate();
    		}else{
    			logger.info("Inside openAddDetailPopUp DisbursalMakerDispatchAction the session is out----------------");
    			return mapping.findForward("sessionOut");
    		}
    		//boolean flag=false;
    		Object sessionId = session.getAttribute("sessionID");
    		
    		//for check User session start
    		ServletContext context = getServlet().getServletContext();
    		String strFlag="";	
    		if(sessionId!=null)
    		{
    			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
    		}
    		
    		logger.info("strFlag .............. "+strFlag);
    		if(!strFlag.equalsIgnoreCase(""))
    		{
    			if(strFlag.equalsIgnoreCase("sameUserSession"))
    			{
    				context.removeAttribute("msg");
    				context.removeAttribute("msg1");
    			}
    			else if(strFlag.equalsIgnoreCase("BODCheck"))
    			{
    				context.setAttribute("msg", "B");
    			}
    			return mapping.findForward("logout");
    		}
    		//DisbursalInitiationDAO service = new DisbursalInitiationDAOImpl();
    		DisbursalInitiationDAO service=(DisbursalInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(DisbursalInitiationDAO.IDENTITY);
    	    logger.info("Implementation class: "+service.getClass());
    		request.setAttribute("lbxLoanNoHID", request.getParameter("loanId"));
    		request.setAttribute("disbursalNo", request.getParameter("disbursalNo"));
    		request.setAttribute("loanDisbursalId", request.getParameter("loanDisbursalId"));
    		request.setAttribute("customerName", request.getParameter("customerName"));
    		request.setAttribute("disbursalAmount", request.getParameter("disbursalAmount"));
    		ArrayList totalPayReceivList= service.getTotalPayableReceiable( request.getParameter("loanId").toString(), "CS");
    		if(totalPayReceivList.size()>0){
    			request.setAttribute("totalPayable", totalPayReceivList.get(0));
        		request.setAttribute("totalReceivable",  totalPayReceivList.get(1));	
    		}
    		form.reset(mapping, request);
            return mapping.findForward("openPopup");
	}
	public ActionForward saveDisbursalPaymentAddDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
            logger.info("Inside DisbursalMakerDispatchAction......saveAddDetailsOnDisbursal");
              		
    		HttpSession session =  request.getSession();		
    		UserObject userobj=(UserObject)session.getAttribute("userobject");		
    		String makerId ="";
    		String makerDate ="";
    		if(userobj!=null){
    			makerId = userobj.getUserId();
    			makerDate=userobj.getBusinessdate();
    		}else{
    			logger.info("Inside updateDisbursalDataWithPayment DisbursalMakerDispatchAction the session is out----------------");
    			return mapping.findForward("sessionOut");
    		}
    		//boolean flag=false;
    		Object sessionId = session.getAttribute("sessionID");
    		
    		//for check User session start
    		ServletContext context = getServlet().getServletContext();
    		String strFlag="";	
    		if(sessionId!=null)
    		{
    			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
    		}
    		
    		logger.info("strFlag .............. "+strFlag);
    		if(!strFlag.equalsIgnoreCase(""))
    		{
    			if(strFlag.equalsIgnoreCase("sameUserSession"))
    			{
    				context.removeAttribute("msg");
    				context.removeAttribute("msg1");
    			}
    			else if(strFlag.equalsIgnoreCase("BODCheck"))
    			{
    				context.setAttribute("msg", "B");
    			}
    			return mapping.findForward("logout");
    		}
    		session.removeAttribute("disbursalDataAuthor");	
    		session.removeAttribute("disbursalPaymentAddDtl");
    	    DynaValidatorForm DisbursedInitiationMakerDynaValidatorForm = (DynaValidatorForm)form;
    		DisbursalMakerVO vo = new DisbursalMakerVO();
    		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,DisbursedInitiationMakerDynaValidatorForm);
    		vo.setMakerId(makerId);
    		vo.setMakerDate(makerDate);		
    		//DisbursalInitiationDAO service = new DisbursalInitiationDAOImpl();
    		DisbursalInitiationDAO service=(DisbursalInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(DisbursalInitiationDAO.IDENTITY);
    	    logger.info("Implementation class: "+service.getClass());
    		String resultStr=service.saveDisbursalPaymentAddDetails(vo);
    		logger.info("resultStr .............. "+resultStr);
    		logger.info("resultStr .............. "+resultStr);
    		if(resultStr.equalsIgnoreCase("saved")){
    			//Nishant space starts
    			String recoveryType=service.getRecoveryType(vo.getLbxLoanNoHID());
    			request.setAttribute("recoveryType", recoveryType);
    			String disbursalFlag=service.getDisbursalFlag(vo.getLbxLoanNoHID(),"DIM");
    			request.setAttribute("disbursalFlag", disbursalFlag);
    			String repaymentType=service.getRepaymentType(vo.getLbxLoanNoHID());
    			request.setAttribute("repaymentType", repaymentType);
    			//Nishant space ends
    			request.setAttribute("message", "S");
    			request.setAttribute("lbxLoanNoHID",vo.getLbxLoanNoHID());
        		request.setAttribute("disbursalNo", vo.getDisbursalNo());
        		request.setAttribute("loanDisbursalId",vo.getLoanDisbursalId());
    		}else{
    			request.setAttribute("message", "E");
    		}
    		form.reset(mapping, request);
            return mapping.findForward("openPopup");
	}

	public ActionForward updateDisbursalPaymentAddDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
            logger.info("Inside DisbursalMakerDispatchAction......saveAddDetailsOnDisbursal");
              		
    		HttpSession session =  request.getSession();		
    		UserObject userobj=(UserObject)session.getAttribute("userobject");		
    		String makerId ="";
    		String makerDate ="";
    		if(userobj!=null){
    			makerId = userobj.getUserId();
    			makerDate=userobj.getBusinessdate();
    		}else{
    			logger.info("Inside updateDisbursalDataWithPayment DisbursalMakerDispatchAction the session is out----------------");
    			return mapping.findForward("sessionOut");
    		}
    		//boolean flag=false;
    		Object sessionId = session.getAttribute("sessionID");
    		
    		//for check User session start
    		ServletContext context = getServlet().getServletContext();
    		String strFlag="";	
    		if(sessionId!=null)
    		{
    			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
    		}
    		
    		logger.info("strFlag .............. "+strFlag);
    		if(!strFlag.equalsIgnoreCase(""))
    		{
    			if(strFlag.equalsIgnoreCase("sameUserSession"))
    			{
    				context.removeAttribute("msg");
    				context.removeAttribute("msg1");
    			}
    			else if(strFlag.equalsIgnoreCase("BODCheck"))
    			{
    				context.setAttribute("msg", "B");
    			}
    			return mapping.findForward("logout");
    		}
    		session.removeAttribute("disbursalDataAuthor");	
    		session.removeAttribute("disbursalPaymentAddDtl");
    	    DynaValidatorForm DisbursedInitiationMakerDynaValidatorForm = (DynaValidatorForm)form;
    		DisbursalMakerVO vo = new DisbursalMakerVO();
    		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,DisbursedInitiationMakerDynaValidatorForm);
    		vo.setMakerId(makerId);
    		vo.setMakerDate(makerDate);		
    		//DisbursalInitiationDAO service = new DisbursalInitiationDAOImpl();
    		DisbursalInitiationDAO service=(DisbursalInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(DisbursalInitiationDAO.IDENTITY);
    	    logger.info("Implementation class: "+service.getClass());
    	    String feasibilityStatus=CommonFunction.checkNull(service.disbursalFeasibility(vo));
    		String nextDueDate=vo.getNextDueDate();
    		 if(nextDueDate != null && nextDueDate.equals("undefined"))
    			 nextDueDate="";
    		 vo.setNextDueDate(nextDueDate);
    		
    		String disbursalId="0";
    		String resultStr="";
    		if(feasibilityStatus.equalsIgnoreCase("LoanAmt")
    				|| feasibilityStatus.equalsIgnoreCase("eqDisbAmt") ){
    			
    		
    			 resultStr=service.updateDisbursalPaymentAddDetails(vo);
    			if(!disbursalId.equalsIgnoreCase("")){
    				ArrayList disbursalData=service.getDisbursalDataWithPayment(vo);
    				request.setAttribute("disbursalData",disbursalData);
    				request.setAttribute("message","S");	
    			}else{
    				ArrayList disbursalDataError=new ArrayList();
    				if(vo.getFinalDisbursal()!=null&&vo.getFinalDisbursal().equalsIgnoreCase("on")){
    					vo.setFinalDisbursal("F");	
    				}else{
    					vo.setFinalDisbursal("P");
    				}
    				disbursalDataError.add(vo);
    				request.setAttribute("disbursalDataError",disbursalDataError);
    				request.setAttribute("message","E");
    			}
    		}else{
    			if(feasibilityStatus.equalsIgnoreCase("DisbAmt") )
    			{
    				request.setAttribute("disbStatus","DisbAmt");
    			}else if(service.getDisbursalAmountCheck(vo).equalsIgnoreCase("disbursalAmount"))
    			{
    				request.setAttribute("disbStatus","disbursalAmount");
    			}else if(service.getDisbursalAmountCheck(vo).equalsIgnoreCase("preProposedDisbDate"))
    			{
    			request.setAttribute("disbStatus","preProposedDisbDate");
    			}
    			else if(feasibilityStatus.equalsIgnoreCase("balAmount")){
    				
    				request.setAttribute("disbStatus","balAmount");	
    				
    			}else if(service.getDisbursalAmountCheck(vo).equalsIgnoreCase("preProposedDisbDate"))
    			{
    				request.setAttribute("disbStatus","preProposedDisbDate");
    				
    			}else if(service.getDisbursalAmountCheck(vo).equalsIgnoreCase("disbursalAmount")){
    			
    				request.setAttribute("disbStatus","disbursalAmount");
    			}
    	    ///
    		}
    		logger.info("resultStr .............. "+resultStr);
    		request.setAttribute("lbxLoanNoHID",vo.getLbxLoanNoHID());
    		request.setAttribute("disbursalNo", vo.getDisbursalNo());
    		request.setAttribute("loanDisbursalId",vo.getLoanDisbursalId());
    		if(resultStr.equalsIgnoreCase("saved")){
    			request.setAttribute("message", "S");
    		
    		}else{
    			request.setAttribute("message", "E");
    		}
    		form.reset(mapping, request);
            return mapping.findForward("openPopup");
	}
	public ActionForward openEditDisbursalDetails(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
            logger.info("Inside DisbursalMakerDispatchAction......openEditDisbursalDetails");
            
    		
    		HttpSession session =  request.getSession();		
    		UserObject userobj=(UserObject)session.getAttribute("userobject");
    		String userId="";
    		String bussinessDate="";
    		if(userobj!=null)
    		{
    			userId=userobj.getUserId();
    			bussinessDate=userobj.getBusinessdate();
    		}else{
    			logger.info(" in openEditDisbursalDetails method of disbursalSearchDispatchAction the session is out----------------");
    			return mapping.findForward("sessionOut");
    		}
    		boolean flag=false;
    		Object sessionId = session.getAttribute("sessionID");
    		//for check User session start
    		ServletContext context = getServlet().getServletContext();
    		String strFlag="";	
    		if(sessionId!=null)
    		{
    			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
    		}
    		
    		logger.info("strFlag .............. "+strFlag);
    		if(!strFlag.equalsIgnoreCase(""))
    		{
    			if(strFlag.equalsIgnoreCase("sameUserSession"))
    			{
    				context.removeAttribute("msg");
    				context.removeAttribute("msg1");
    			}
    			else if(strFlag.equalsIgnoreCase("BODCheck"))
    			{
    				context.setAttribute("msg", "B");
    			}
    			return mapping.findForward("logout");
    		}

    		String loanId = CommonFunction.checkNull(request.getParameter("loanId"));
    		String disbursalNo = CommonFunction.checkNull(request.getParameter("disbursalNo"));
    		String loanDisbursalId = CommonFunction.checkNull(request.getParameter("loanDisbursalId"));
    		logger.info("loanDisbursalId-------->"+loanDisbursalId);
    		if(session.getAttribute("loanDisbursalId")!=null)
    		{
    			session.removeAttribute("loanDisbursalId");
    		}
    		else
    		{
    			session.setAttribute("loanDisbursalId", loanDisbursalId);
    		}
    		
    		session.removeAttribute("disbursalDataAuthor");
    		session.removeAttribute("disbursalPaymentAddDtl");
    		session.removeAttribute("fianlDisb");
    		session.removeAttribute("cycleDate");
    		session.removeAttribute("loanCurt");
    	
    		//DisbursalInitiationDAO service = new DisbursalInitiationDAOImpl();
    		DisbursalInitiationDAO service=(DisbursalInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(DisbursalInitiationDAO.IDENTITY);
    	    logger.info("Implementation class: "+service.getClass());
    		logger.info("function id is ........................................"+session.getAttribute("functionId"));
    		String functionId="";

    		if(session.getAttribute("functionId")!=null)
    		{
    			functionId=session.getAttribute("functionId").toString();
    		}
    		
    		
    		//ServletContext context=getServlet().getServletContext();
    		if(context!=null)
    		{
    			flag = LockRecordCheck.lockCheck(userId,functionId,loanId,context);
    			logger.info("Flag ........................................ "+flag);
    			if(!flag)
    			{
    				logger.info("Record is Locked");			
    				request.setAttribute("message", "Locked");
    				request.setAttribute("recordId", loanId);
    				request.setAttribute("disbursalMaker","disbursalMaker");
    				return mapping.getInputForward();
    			}
    		}
    	
    			ArrayList<DisbursalMakerVO> cycleDate = service.getCycleDateList();
    			request.setAttribute("cycleDate",cycleDate);
    			String bp_type = ConnectionDAO.singleReturn("SELECT DISBURSAL_TO FROM CR_LOAN_DISBURSAL_DTL WHERE LOAN_ID="+loanId+" AND DISBURSAL_NO="+disbursalNo+" ");
    			DisbursalMakerVO vo=new DisbursalMakerVO();
    			vo.setLbxLoanNoHID(loanId);
    			vo.setDisbursalNo(disbursalNo);
    			vo.setLoanDisbursalId(loanDisbursalId);
    			String from=CommonFunction.checkNull(request.getParameter("from"));
        		logger.info("from:---------------"+from);
        		logger.info("batchId:---------------"+session.getAttribute("batchId"));
        		vo.setFrom(from);
        		if(CommonFunction.checkNull(loanId).equalsIgnoreCase(""))
        		{
        			loanId="0";
        		}
        		int loanIdAmountInProcess=Integer.parseInt(loanId);
        		String amountInProcessLoan = service.getAmountInProcessLoan(loanIdAmountInProcess, userId, bussinessDate);
        		request.setAttribute("amountInProcessLoan", amountInProcessLoan);
    			ArrayList<DisbursalMakerVO> disbursalData = service.selectAddDetailsForUpdate(vo);
    			DisbursalMakerVO vo1 = new DisbursalMakerVO();
    			vo1=(DisbursalMakerVO) disbursalData.get(0);
    			logger.info("Disbursal Flag from Dispatch Action......openDisbursalValues: "+vo1.getFinalDisbursal());
    			request.setAttribute("fianlDisb",vo1.getFinalDisbursal());
    			request.setAttribute("disbursalData", disbursalData);
    			request.setAttribute("disbursalTo", vo1.getDisbursalTo());
    			logger.info("VO Object fetched: "+ vo1.getEditDueDate() + "----------" + vo1.getOldRepayEffDate());
    			request.setAttribute("editDueDate", vo1.getEditDueDate());
    			request.setAttribute("loanTenure", vo1.getLoanTenure());//added by brijesh pathak
    			 logger.info(new StringBuilder().append("loanTenure from Dispatch Action......openDisbursalValues: ").append(vo1.getLoanTenure()).toString());
    			request.setAttribute("loanMaturityDate", vo1.getLoanMaturityDate());//added by brijesh pathak
    			request.setAttribute("installmentType", vo1.getInstallmentType());//added by brijesh pathak
    			logger.info("VO InstallmentType fetched: "+ vo1.getInstallmentType());
    			request.setAttribute("oldRepayEffDate", vo1.getOldRepayEffDate());
    			
    			//amandeep starts
    			logger.info("loan_curtail from Dispatch Action......openDisbursalValues: "+vo1.getLoanCurtail());
    			request.setAttribute("loanCurt",vo1.getLoanCurtail());
    			//amandeep work ends
    			
    			//Nishant space starts
    			if(CommonFunction.checkNull(functionId).trim().equalsIgnoreCase(""))
    				functionId="0";
    			int id=Integer.parseInt(functionId);
    			String txnType = null;
    			if(id==4000116)
    				txnType = "DIM";
    			else
    				txnType = "DIA";
    			String recoveryType=service.getRecoveryType(loanId);
    			request.setAttribute("recoveryType", recoveryType);
    			String disbursalFlag=service.getDisbursalFlag(loanId,txnType);
    			request.setAttribute("disbursalFlag", disbursalFlag);
    			String repaymentType=service.getRepaymentType(vo.getLbxLoanNoHID());
    			request.setAttribute("repaymentType", repaymentType);
    			//Nishant space ends
    			request.setAttribute("maxDisbursalDate", CommonFunction.checkNull(vo1.getMaxDisbursalDate()));
    			String disbursalTo ="";
    			String disbursalToId ="";
    			if(disbursalData.size()>0)
    			{
    				disbursalTo =CommonFunction.checkNull(disbursalData.get(0).getDisbursalTo().toString().trim());
    				disbursalToId =CommonFunction.checkNull(disbursalData.get(0).getLbxBusinessPartnearHID().toString().trim());
    				
    				session.setAttribute("supManufId", disbursalToId);
    				session.setAttribute("bpType", disbursalTo);
    			}
    			vo1.setLoanDisbursalId(loanDisbursalId);
    			if(session.getAttribute("batchId")!=null){
        			vo1.setDisbursalBatchId(session.getAttribute("batchId").toString());
        		}
        		ArrayList disbursalPaymentAddDtl=new ArrayList();
    			if(from.equalsIgnoreCase("A")){
    				disbursalPaymentAddDtl=service.selectAddDetailsList(vo1,"A");
    			}else{
    				disbursalPaymentAddDtl=service.selectAddDetailsList(vo1,"M");
    			}
    			
    			
    			if(disbursalPaymentAddDtl.size()>0){
    				request.setAttribute("disbursalPaymentAddDtl", disbursalPaymentAddDtl);	
    			}
    			request.setAttribute("edit", "edit");
    		
    	    if(from.equalsIgnoreCase("A")){
    	    	session.setAttribute("disAuthor","disAuthor");
    	    	session.setAttribute("disbursalPaymentAddDtl", disbursalPaymentAddDtl);
    	    	session.setAttribute("disbursalDataAuthor", disbursalData);
    	    	session.setAttribute("loanDisbursalId", loanDisbursalId);
    	    	//amandeep starts
    			logger.info("loan_curtail from Dispatch Action......openDisbursalValues: "+disbursalData.get(0).getLoanCurtail());
    			session.setAttribute("loanCurt",disbursalData.get(0).getLoanCurtail());
    			//amandeep work ends
    	    }else{
    	    	session.removeAttribute("disbursalPaymentAddDtl");
    	    }
    	    form.reset(mapping, request);
    	    return mapping.findForward("saveDisbursalDataPayment");
           // return mapping.findForward("openPopup");    
	}
	
	public ActionForward deleteAddDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
            logger.info("Inside DisbursalMakerDispatchAction......deleteAddDetail");
            
            
            HttpSession session =  request.getSession();		
    		UserObject userobj=(UserObject)session.getAttribute("userobject");		
    		String makerId ="";
    		String makerDate ="";
    		if(userobj!=null){
    			makerId = userobj.getUserId();
    			makerDate=userobj.getBusinessdate();
    		}else{
    			logger.info("Inside updateDisbursalDataWithPayment DisbursalMakerDispatchAction the session is out----------------");
    			return mapping.findForward("sessionOut");
    		}
    		//boolean flag=false;
    		Object sessionId = session.getAttribute("sessionID");
    		
    		//for check User session start
    		ServletContext context = getServlet().getServletContext();
    		String strFlag="";	
    		if(sessionId!=null)
    		{
    			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
    		}
    		
    		logger.info("strFlag .............. "+strFlag);
    		if(!strFlag.equalsIgnoreCase(""))
    		{
    			if(strFlag.equalsIgnoreCase("sameUserSession"))
    			{
    				context.removeAttribute("msg");
    				context.removeAttribute("msg1");
    			}
    			else if(strFlag.equalsIgnoreCase("BODCheck"))
    			{
    				context.setAttribute("msg", "B");
    			}
    			return mapping.findForward("logout");
    		}
    		int status=0;
    		String retStr="";
    		//String loanIDDisbursal = CommonFunction.checkNull(request.getParameter("loanIDDisbursal"));		
    		session.removeAttribute("disbursalDataAuthor");	
    		session.removeAttribute("disbursalPaymentAddDtl");
    		
    		
    	    DynaValidatorForm DisbursedInitiationMakerDynaValidatorForm = (DynaValidatorForm)form;
    		DisbursalMakerVO vo = new DisbursalMakerVO();
    		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,DisbursedInitiationMakerDynaValidatorForm);
    		vo.setMakerId(makerId);
    		vo.setMakerDate(makerDate);		
    		//DisbursalInitiationDAO service = new DisbursalInitiationDAOImpl();
    		DisbursalInitiationDAO service=(DisbursalInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(DisbursalInitiationDAO.IDENTITY);
    	    logger.info("Implementation class: "+service.getClass());
    		String checkedStr=request.getParameter("checkedStr");
    		String loanId[]=request.getParameterValues("loanId");
    		String loanIdDis=loanId[0];
    		logger.info("loanIdDis:----------------------"+loanIdDis);
    		vo.setLbxLoanNoHID(loanIdDis);
    		String result=service.deleteAddDetails(vo,checkedStr);
    		if(result.equalsIgnoreCase("deleted")){
    			request.setAttribute("message", "D");
    			String deleteInstallmentPlan = service.deleteNewAddDetails(vo, checkedStr);
    			logger.info("deleteInstallmentPlan status : " + deleteInstallmentPlan);
    		}else{
    			request.setAttribute("message", "E");
    		}
    		ArrayList<DisbursalMakerVO> cycleDate = service.getCycleDateList();
    		request.setAttribute("cycleDate",cycleDate);
    		
    		ArrayList disbursalData=service.getDisbursalDataWithPayment(vo);
			request.setAttribute("disbursalData",disbursalData);
			
            ArrayList disbursalPaymentAddDtl=service.selectAddDetailsList(vo,"M");
    		if(disbursalPaymentAddDtl.size()>0){
    			request.setAttribute("disbursalPaymentAddDtl", disbursalPaymentAddDtl);	
    		}	
    		if(vo.getFinalDisbursal()!=null&&vo.getFinalDisbursal().equalsIgnoreCase("on")){
				vo.setFinalDisbursal("F");	
			}else{
				vo.setFinalDisbursal("P");
			}
    		request.setAttribute("fianlDisb",vo.getFinalDisbursal());
        	request.setAttribute("disbursalTo", vo.getDisbursalTo());
    		request.setAttribute("maxDisbursalDate", request.getParameter("maxDisbursalDate"));
    		logger.info("In save disbursal maxDisbursalDate:"+request.getParameter("maxDisbursalDate"));
    		form.reset(mapping, request);
    		vo=null;
    		service=null;
    		return mapping.findForward("saveDisbursalDataPayment");
	}
	public ActionForward getTotalPayableReceivable(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		logger.info("Inside DisbursalMakerDispatchAction......getTotalPayableReceivable");
		HttpSession session =  request.getSession();		
		UserObject userobj=(UserObject)session.getAttribute("userobject");		
		String makerId ="";
		String makerDate ="";
		if(userobj!=null){
			makerId = userobj.getUserId();
			makerDate=userobj.getBusinessdate();
		}else{
			logger.info("Inside updateDisbursalDataWithPayment DisbursalMakerDispatchAction the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		//boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//DisbursalInitiationDAO service = new DisbursalInitiationDAOImpl();	
		DisbursalInitiationDAO service=(DisbursalInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(DisbursalInitiationDAO.IDENTITY);
	    logger.info("Implementation class: "+service.getClass());
	    String loanId=request.getParameter("lbxLoanNoHID");
	    String disbursalTo=request.getParameter("disbursalTo");
	    ArrayList payRecList=service.getTotalPayableReceiable(loanId,disbursalTo);
	    String totalPayable=CommonFunction.checkNull(payRecList.get(0));
	    String totalReceiable=CommonFunction.checkNull(payRecList.get(1));
	    String totalReceiableCustomer=CommonFunction.checkNull(payRecList.get(2));
	    PrintWriter out=response.getWriter();
	    out.print(totalPayable+"$:"+totalReceiable+"$:"+totalReceiableCustomer+"$:");
	    
		return null;
	}
	public ActionForward forwordDisbursalDataWithPayment(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		logger.info("Inside DisbursalMakerDispatchAction......forwordDisbursalDataWithPayment");
		HttpSession session =  request.getSession();		
		UserObject userobj=(UserObject)session.getAttribute("userobject");		
		String makerId ="";
		
		String makerDate ="";
		if(userobj!=null){
			makerId = userobj.getUserId();
			makerDate=userobj.getBusinessdate();
		}else{
			logger.info("Inside forwordDisbursalDataWithPayment DisbursalMakerDispatchAction the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		//boolean flag=false;
		Object sessionId = session.getAttribute("sessionID");
		
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		DisbursalMakerVO vo = new DisbursalMakerVO();
		vo.setMakerId(makerId);
		vo.setMakerDate(makerDate);	
		//DisbursalInitiationDAO service = new DisbursalInitiationDAOImpl();
		DisbursalInitiationDAO service=(DisbursalInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(DisbursalInitiationDAO.IDENTITY);
	    logger.info("Implementation class: "+service.getClass());
	    String loanId[]=request.getParameterValues("loanId");
	    logger.info("Loan ID class:------------------------ "+loanId[0]);
	    vo.setLbxLoanNoHID(loanId[0]);
	    
	   
		String loanDisbId[]=request.getParameterValues("loanDisbId");
		boolean forwardFlag=true;
		String specialConditionStatus=service.checkSpecialConditionAvail(vo,loanDisbId[0],"F");
		if(CommonFunction.checkNull(specialConditionStatus).equalsIgnoreCase("E")){
			forwardFlag=false;
			request.setAttribute("specialConditionStatus", "E");
		}
		//Nishant space starts
		
		String checkNewInstAndRepay=request.getParameter("checkNewInstAndRepay");
		String newInstPlanStatus=null;
		if(CommonFunction.checkNull(checkNewInstAndRepay).equalsIgnoreCase("Y"))
		{
			newInstPlanStatus=service.newInstallmentPlanStatus(vo);
			if(CommonFunction.checkNull(newInstPlanStatus).equalsIgnoreCase("Y"))
			{
				forwardFlag=false;
				String recoveryType=service.getRecoveryType(vo.getLbxLoanNoHID());
				request.setAttribute("recoveryType", recoveryType);
				String disbursalFlag=service.getDisbursalFlag(vo.getLbxLoanNoHID(),"DIM");
				request.setAttribute("disbursalFlag", disbursalFlag);
				String repaymentType=service.getRepaymentType(vo.getLbxLoanNoHID());
				request.setAttribute("repaymentType", repaymentType);
			}
		}
		
		String findForward = "saveDisbursalDataPayment";
		
		/*Abhishek Star*/
		String sblFlag="";
		int count = Integer.parseInt(ConnectionDAO.singleReturn(" SELECT count(1) FROM CR_SBL_M WHERE PRODUCT_ID = (SELECT IFNULL(LOAN_PRODUCT,'') "
				+ " FROM CR_LOAN_DTL WHERE LOAN_ID = '"+CommonFunction.checkNull(vo.getLbxLoanNoHID()).trim()+"') "));
		if(count>0){
			String Loan_no=CommonFunction.checkNull(ConnectionDAO.singleReturn("select loan_no from cr_loan_dtl where loan_id='"+vo.getLbxLoanNoHID()+"'"));
			StringBuffer bufInsSql = new StringBuffer();
			ArrayList searchlist = new ArrayList();
			ArrayList detailList =new ArrayList();
			String DisburalNoStatus = "";
			try{
				bufInsSql.append("select ifnull(DISBURSAL_NO,'0') as dis_No from cr_loan_disbursal_dtl_temp where REC_STATUS = 'P' and loan_id = '"+vo.getLbxLoanNoHID()+"' ");		
				logger.info("Fatch Disbursal No Query : "+bufInsSql);
				searchlist = ConnectionDAO.sqlSelect(bufInsSql.toString());		
				
				for (int i = 0; i < searchlist.size(); i++)
				{
					ArrayList data = (ArrayList) searchlist.get(i);
					if (data.size() > 0) {
						String disNo = CommonFunction.checkNull(data.get(0)).toString();
						DisburalNoStatus = DisburalNoStatus+"|"+CommonFunction.checkNull(ConnectionDAO.singleReturn("select count(1) from cr_sblgbl_dtl "
								+ " where loan_no = '"+Loan_no+"' and disb_no = '"+disNo+"' and REC_STATUS = 'A'"));
					}
				}
				
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
			if(DisburalNoStatus.contains("0")){
				String CustId = CommonFunction.checkNull(ConnectionDAO.singleReturn(" SELECT IFNULL(GCD_ID,'') FROM CR_LOAN_CUSTOMER_ROLE "
								+ " WHERE LOAN_ID = '"+vo.getLbxLoanNoHID()+"' ")); 
				
				String CustGroupId = CommonFunction.checkNull(ConnectionDAO.singleReturn(" SELECT IFNULL(CUSTOMER_GROUP_ID,'') "
								+ " FROM cr_deal_customer_m WHERE CUSTOMER_ID = '"+CommonFunction.checkNull(CustId).trim()+"' "));
				
				double sbl = Double.parseDouble(CommonFunction.checkNull(ConnectionDAO.singleReturn(" "
							+ " SELECT IFNULL(SINGLEBORROWERLIMIT,'0.00') FROM CR_SBL_M WHERE PRODUCT_ID = (SELECT IFNULL(LOAN_PRODUCT,'') "
							+ " FROM CR_LOAN_DTL WHERE LOAN_ID = '"+CommonFunction.checkNull(vo.getLbxLoanNoHID()).trim()+"') ")));
				
				double gbl = Double.parseDouble(CommonFunction.checkNull(ConnectionDAO.singleReturn(" "
							+ " SELECT IFNULL(GROUPBORROWERLIMIT,'0.00') FROM CR_SBL_M WHERE PRODUCT_ID = (SELECT IFNULL(LOAN_PRODUCT,'') "
							+ " FROM CR_LOAN_DTL WHERE LOAN_ID = '"+CommonFunction.checkNull(vo.getLbxLoanNoHID()).trim()+"') ")));
				  
				double CustCurrentPos = Double.parseDouble(CommonFunction.checkNull(ConnectionDAO.singleReturn("select( "
						+ " SELECT IFNULL(ROUND(SUM(LOAN_BALANCE_PRINCIPAL),2),'0.00') FROM CR_LOAN_DTL "
						+ " WHERE LOAN_ID IN (SELECT LOAN_ID FROM CR_LOAN_CUSTOMER_ROLE WHERE GCD_ID = '"+CustId+"' "
						+ " AND LOAN_CUSTOMER_ROLE_TYPE IN ('PRAPPL','COAPPL')))+(select IFNULL(round(sum(disbursal_amount),2),0.00) from cr_loan_disbursal_dtl_temp where loan_id='"+vo.getLbxLoanNoHID()+"')+(select IFNULL(round(sum(disbursal_amount),2),0.00) from cr_loan_disbursal_dtl  WHERE REC_STATUS<>'X' AND LOAN_ID='"+vo.getLbxLoanNoHID()+"' ) "))); 
		
		double GroupPos = Double.parseDouble(CommonFunction.checkNull(ConnectionDAO.singleReturn("select( "
				+ " SELECT IFNULL(ROUND(SUM(LOAN_BALANCE_PRINCIPAL),2),'0.00') FROM CR_LOAN_CUSTOMER_ROLE R "
				+ " JOIN CR_LOAN_DTL L ON R.LOAN_ID = L.LOAN_ID JOIN CR_DEAL_CUSTOMER_M M ON R.GCD_ID = M.CUSTOMER_ID "
				+ " WHERE M.CUSTOMER_GROUP_ID = '"+CustGroupId+"' AND R.LOAN_CUSTOMER_ROLE_TYPE IN ('PRAPPL','COAPPL'))+(select IFNULL(round(sum(disbursal_amount),2),0.00) from cr_loan_disbursal_dtl_temp where loan_id='"+vo.getLbxLoanNoHID()+"')+(select IFNULL(round(sum(disbursal_amount),2),0.00) from cr_loan_disbursal_dtl  WHERE REC_STATUS<>'X' AND LOAN_ID='"+vo.getLbxLoanNoHID()+"' ) ")));

				if(CustCurrentPos>sbl ){
					 forwardFlag=false;
					  request.setAttribute("sblFlag", "sblFlag");
					  sblFlag="Y";
					  findForward = "saveDisbursalDataPayment";
				}
				else if( GroupPos>gbl){
					 forwardFlag=false;
					  request.setAttribute("gblFlag", "gblFlag");
					  sblFlag="Y";
					  findForward = "saveDisbursalDataPayment";
				}
				}
		}
		//Nishant space ends
		if(sblFlag !="Y"){
		
		String stat1 =""; 
		String stat2 ="";
		String chkPRSPRDDocsFlag="";
		
	
			StringBuilder chkPRSDocs = new StringBuilder();
			StringBuilder chkPRDDocs = new StringBuilder();
			StringBuilder chkPRSPRDDocs=new StringBuilder();
			
			String docsReceived=CommonFunction.checkNull(request.getParameter("docs"));
			chkPRSDocs.append("select 1 from cr_document_dtl where STAGE_ID='PRS' AND DOC_STATUS IN ('P','D') AND TXN_TYPE='DC' AND DOC_MANDATORY='Y' AND TXNID=(select loan_deal_id from cr_loan_dtl where loan_id="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxLoanNoHID())).trim()+")");
			chkPRDDocs.append("select 1 from cr_document_dtl where STAGE_ID='PRD' AND DOC_STATUS='P' AND TXN_TYPE='LIM' AND DOC_MANDATORY='Y' AND TXNID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxLoanNoHID())).trim()+"");
			chkPRSPRDDocs.append("select parameter_value from parameter_mst where parameter_key='CHECK_STATUS_PRS_PRD_DOCUMENT'" );
			stat1 = ConnectionDAO.singleReturn(chkPRSDocs.toString());
			stat2 = ConnectionDAO.singleReturn(chkPRDDocs.toString());
			chkPRSPRDDocsFlag = ConnectionDAO.singleReturn(chkPRSPRDDocs.toString());
			logger.info("chkPRSPRDDocs query:::::::::"+chkPRSPRDDocs.toString());
			//logger.info("chkPRSPRDDocsFlag:::::::123"+chkPRSPRDDocsFlag);
			 logger.info(new StringBuilder().append("chkPRSPRDDocsFlag:::::::").append(chkPRSPRDDocsFlag).toString());
			
			if(docsReceived.equalsIgnoreCase("N")){
				if(stat1!=null && !stat1.equalsIgnoreCase(""))
				{
					logger.info("stat1 222222 "+stat1);
					stat1=null;
					forwardFlag=false;
					request.setAttribute("disbStatus", "PRSDocs");
				}
				if(stat2!=null && !stat2.equalsIgnoreCase(""))
				{
					logger.info("stat2 222222 "+stat2);
					stat2=null;
					forwardFlag=false;
					request.setAttribute("disbStatus", "PRDDocs");
				}
				
				
			}
			int dCount=Integer.parseInt(ConnectionDAO.singleReturn("select count(1) from cr_resch_installment_plan where loan_id="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxLoanNoHID())).trim()));
			if(dCount>0){
			String queryNextDueDate = "select Next_due_date from CR_LOAN_DISBURSAL_DTL_TEMP where loan_id="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxLoanNoHID())).trim();
			String nextDueDate= ConnectionDAO.singleReturn(queryNextDueDate);
			String queryDueDate= "select Due_Date from cr_resch_installment_plan where loan_id="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxLoanNoHID())).trim() + " and Seq_no=1";
			String dueDate= ConnectionDAO.singleReturn(queryDueDate);
			String queryDisbMaturityDate= "select date_add(D.repay_eff_date,INTERVAL L.tenure_in_day DAY) from CR_LOAN_DISBURSAL_DTL_TEMP D join CR_LOAN_DTL L on L.LOAN_ID=D.LOAN_ID where L.loan_id="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxLoanNoHID())).trim();
					String disbMaturityDate=ConnectionDAO.singleReturn(queryDisbMaturityDate);
					String queryInstMaturityDate= "select Due_Date from cr_resch_installment_plan where loan_id="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxLoanNoHID())).trim() +" and Seq_no=(Select LOAN_NO_OF_INSTALLMENT from cr_loan_dtl where loan_id="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(vo.getLbxLoanNoHID())).trim() +")";
					String instMaturityDate=ConnectionDAO.singleReturn(queryInstMaturityDate);
			
			
/*					int flagMaturityDate=	disbMaturityDate.compareTo(instMaturityDate)	;
			int flagDueDate=nextDueDate.compareTo(dueDate);
			logger.info("nextDueDate::"+ nextDueDate + " dueDate::"+ dueDate);
			logger.info("flag :"+flag);*/
			
			
			 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		        Date DnextDueDate = sdf.parse(nextDueDate);
		        Date DdueDate = sdf.parse(dueDate);
		        Date DdisbMaturityDate=sdf.parse(disbMaturityDate);
		        Date DinstMaturityDate=sdf.parse(instMaturityDate);		
		        
		        int flagDueDate=DnextDueDate.compareTo(DdueDate);
		        logger.info("flagDueDate::"+ flagDueDate);
		        int flagMaturityDate=DdisbMaturityDate.compareTo(DinstMaturityDate);
		        logger.info("flagMaturityDate::"+ flagMaturityDate);
		        
		        if (flagDueDate != 0 || flagMaturityDate!=0)
		        {
		        	//forwardFlag=false;
		        	String recoveryType=service.getRecoveryType(vo.getLbxLoanNoHID());
					request.setAttribute("recoveryType", recoveryType);
					String disbursalFlag=service.getDisbursalFlag(vo.getLbxLoanNoHID(),"DIM");
					request.setAttribute("disbursalFlag", disbursalFlag);
					String repaymentType=service.getRepaymentType(vo.getLbxLoanNoHID());
					request.setAttribute("repaymentType", repaymentType);
		        	request.setAttribute("disbStatus", "saveFwdFlag");
		        } 
		}
		}
			String result="";
		 if(forwardFlag){
			 boolean st = service.paymentAmountAtDisbursal(vo);
			 if(st)
				 result=service.forwardDisbursal(vo, loanDisbId); 
			 else
				 result="limitExceed";
		 }
		 ArrayList loanAndDisbAmountList=service.getLoanAndDisburdesAmount(vo);
			DisbursalMakerVO dvo=(DisbursalMakerVO)loanAndDisbAmountList.get(0);
			logger.info("vo disbursed amount"+dvo.getDisbursedAmount());
			logger.info("vo loan amount"+dvo.getLoanAmt());
			request.setAttribute("loanAndDisbAmountList", loanAndDisbAmountList);	
		ArrayList<DisbursalMakerVO> cycleDate = service.getCycleDateList();
		request.setAttribute("cycleDate",cycleDate);
		if(sblFlag !="Y"){
		if(result.equalsIgnoreCase("saved")){
			request.setAttribute("message","F");	
		}else if(result.equalsIgnoreCase("limitExceed")){
			request.setAttribute("message","LE");	
		}else{
			if(CommonFunction.checkNull(newInstPlanStatus).equalsIgnoreCase("Y")){
				forwardFlag=false;
				request.setAttribute("newInstPlanStatus", "E");
			}
			else
			{
				request.setAttribute("message","E");
			}
		}
		}
		ArrayList disbursalPaymentAddDtl=service.selectAddDetailsList(vo,"M");
		if(disbursalPaymentAddDtl.size()>0){
			request.setAttribute("disbursalPaymentAddDtl", disbursalPaymentAddDtl);	
		}
		form.reset(mapping, request);
		service=null;
		newInstPlanStatus=null;
		
		return mapping.findForward(findForward);
	}
	public ActionForward generateRepaymentSch(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception 
	{
		
		logger.info("In generateRepaymentSch");
		HttpSession session = request.getSession();
		//boolean flag=false;
		
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bgDate="";
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			bgDate=userobj.getBusinessdate();  
		}else{
			logger.info(" in execute method of RepaymentScheduleBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		//DisbursalInitiationDAO detail = new DisbursalInitiationDAOImpl();
		String finalDisbursal=CommonFunction.checkNull(request.getParameter("finalDisbursal"));
		String loanId=CommonFunction.checkNull(request.getParameter("loanId"));
		String loanDisbursalId=CommonFunction.checkNull(request.getParameter("loanDisbursalId"));
		
		DisbursalInitiationDAO detail=(DisbursalInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(DisbursalInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+detail.getClass()); 
		
		LoanInitiationDAO detail1=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+detail.getClass()); 
		
		logger.info("loanDisbursalId: "+loanDisbursalId);
		String functionId=(String)session.getAttribute("functionId");
		if(CommonFunction.checkNull(functionId).trim().equalsIgnoreCase(""))
			functionId="0";
		int id=Integer.parseInt(functionId);
		String txnType = null;
		if(id==4000116)
			txnType = "DIM";
		else
			txnType = "DIA";
		logger.info("TxnType : " + txnType);
		
		String resultproc=detail.generateRepyScheduleDisbursalPayment(loanId,userId,finalDisbursal,txnType);
		
		if(resultproc!="S")
		{					
			request.setAttribute("procval", resultproc);
		}
		ArrayList fromloanDtl=detail.getFromLoanDtlDisbursalPayment(loanId);
		ArrayList repShedule=detail.getRepaySchedDisbursalPayment(loanId,userId);
		request.setAttribute("fromloanDtl", fromloanDtl);
		logger.info("fromloanDtl In else:   "+fromloanDtl.size());
		request.setAttribute("repShedule", repShedule);
		logger.info("repShedule In else :   "+repShedule.size());
		RefreshFlagVo vo1 = new RefreshFlagVo();
		logger.info("loanId:  "+loanId);
		if(!loanId.trim().equalsIgnoreCase(""))
		vo1.setRecordId(Integer.parseInt(loanId.trim()));
		vo1.setTabIndex(6);
		vo1.setModuleName("CM");
		ArrayList loanHeader=detail1.getLoanHeader(loanId);
		request.setAttribute("loanHeader", loanHeader);	
		//RefreshFlagValueInsert.updateRefreshFlag(vo1);
		form.reset(mapping, request);
		vo1=null;
		txnType=null;
		detail=null;
		detail1=null;
		return mapping.findForward("success");
	}
		
}