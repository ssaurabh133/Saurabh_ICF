/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;


import com.cm.dao.LoanInitiationDAO;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cm.vo.CmInsuranceVo;


import com.cp.vo.CpInsuranceVo;
import com.cp.vo.HeaderInfoVo;
import com.cp.vo.LoanDetailVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;


/**
 * MyEclipse Struts Creation date: 04-07-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action validate="true"
 */
public class CmInsuranceBehindAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(CmInsuranceBehindAction.class.getName());
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward cmInsuranceBehind(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		logger.info("In CmInsuranceBehindAction(cmInsuranceBehind) ");
		

		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String bDate="";
		
		if(userobj!=null)
		{
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in cmInsuranceBehind method of CmInsuranceBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		LoanInitiationDAO loanInitiation=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
        logger.info("Implementation class: "+loanInitiation.getClass()); 			
		
		Object sessionId = session.getAttribute("sessionID");
		
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		
		CmInsuranceVo vo=new CmInsuranceVo();
		DynaValidatorForm cmInsuranceFormBean=(DynaValidatorForm )form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, cmInsuranceFormBean);
		

		String dealId = "";
		
		String dealloanId = "";
		
		//parvez starts
		
		String ids=CommonFunction.checkNull(request.getParameter("ids"));		
		String[] cus=ids.split("\\|");	
		
		
		//parvez end
		
		
		String insuranceProvider=request.getParameter("insuranceProvider");
		logger.info("insuranceProvider:::;"+insuranceProvider);
		String sumAssured=request.getParameter("sumAssured");
		String tenure=request.getParameter("tenure");
		String age=request.getParameter("age");
		String insurancePremium=request.getParameter("insurancePremium");
		String chargesOnInsurance=request.getParameter("chargesOnInsurance");
		String loanId=request.getParameter("loanId");
		//parvez starts
		
		String insuranceProduct=CommonFunction.checkNull(request.getParameter("insuranceProduct"));
		if(insuranceProduct.contains("|"))		// for removing service called from insurance product
		{
			insuranceProduct=insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
		}
		String policyType=request.getParameter("policyType");
		String premiumFinanced=request.getParameter("premiumFinanced");
		String policyTenure=request.getParameter("policyTenure");
		vo.setPolicyTenure(policyTenure);
		double d =0.0;
		Boolean b= false;
		
		if (session.getAttribute("loanId") != null) {

			loanId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxId") != null) {
			loanId = session.getAttribute("maxId").toString();
		}
		
		logger.info("In CmInsuranceBehindAction(cmInsuranceBehind) loanId " + loanId);
		
	
		ArrayList loanHeader = loanInitiation.getLoanHeader(loanId);
		session.setAttribute("loanHeader", loanHeader);
		
		ArrayList list1 = loanInitiation.getInsuranceProviders();
		request.setAttribute("InsuranceProviders", list1);
		
		ArrayList insuranceProducts = loanInitiation.getInsuranceProducts(insuranceProvider);
		request.setAttribute("insuranceProducts", insuranceProducts);
		
		ArrayList list2 = loanInitiation.getpolicyTypes();
		request.setAttribute("policyTypes", list2);
		
		 ArrayList customerDetailList=loanInitiation.getCustomerDetailList(vo, loanId);
		 request.setAttribute("customerDetailList",customerDetailList);
		 if(customerDetailList.size()>0){
			 request.setAttribute("listSize",((CmInsuranceVo) customerDetailList.get(0)).getTotalRecordSize());
		 }
		ArrayList list = loanInitiation.getInsuranceData(loanId);
		ArrayList allInsuranceData = loanInitiation.getAllInsuranceData(vo, loanId);
		
		ArrayList list4 = loanInitiation.getSaveInsuranceData(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced,loanId);
		request.setAttribute("saveInsuranceData", list4);
		request.setAttribute("saveInsuranceDataDelete", "saveInsuranceDataDelete");
		 ArrayList property=loanInitiation.getPropertyType(vo, loanId);
		 request.setAttribute("propertyTypes",property);
		
		 ArrayList relation=loanInitiation.getRelation(vo, loanId);
		 request.setAttribute("relationshps",relation);
		CmInsuranceVo tempVo = new CmInsuranceVo();
		if(allInsuranceData.size() > 1)
		{
			request.setAttribute("allInsuranceData", allInsuranceData);
			tempVo = (CmInsuranceVo) allInsuranceData.get(0);
			insuranceProvider = tempVo.getInsuranceProvider();
			sumAssured = tempVo.getSumAssured();
			tenure = tempVo.getTenure();
			age = tempVo.getAge();
		}
		else
			request.setAttribute("allInsuranceData", list);
		int functionId = 0;
		if(session.getAttribute("functionId")!=null)
		{
			functionId=Integer.parseInt(session.getAttribute("functionId").toString());
		}
		Map map = loanInitiation.calculateCmInsurance(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced);
		ArrayList list3 = new ArrayList();
		if(map.size()>0)
		{
		Map map1 = (Map)map.get("map");
		String calcMethod = CommonFunction.checkNull(map.get("calcMethod"));
		 d =0.0;
		 b= false;
		if(policyType.equalsIgnoreCase("J") && calcMethod.equalsIgnoreCase("S") )
		{
			b = (Boolean)map.get("b");
			d = (Double)map.get("totalvalue");
		}
		
		CmInsuranceVo vo1= (CmInsuranceVo)map1.get("vo");
		if(b)
			vo1.setInsurancePremium(CommonFunction.checkNull(d));
		else
		{
			vo1.setInsurancePremium("");
			vo1.setOtherChargeId("");
			vo1.setChargesOnInsurance("");
			vo1.setLbxOtherChargeId("");
		}
		
	
		list3.add(vo1);
		}
		
		if(functionId == 4000122||functionId == 4000931||functionId == 4000121 || functionId == 4000109 || functionId==4000123 || functionId == 4000916 || functionId==4000921 || functionId == 4000906 || functionId==4000911 || functionId==4001240 || functionId == 4001241 || functionId == 4000926)
			request.setAttribute("viewmode", list3);
		else if(functionId==4000111)
		request.setAttribute("viewmode", list3);
		else
			request.setAttribute("calculate", list3);
		tempVo=null;
			
		if(allInsuranceData.size() > 1)
		{
			request.setAttribute("allInsuranceData", allInsuranceData);
			tempVo = (CmInsuranceVo) allInsuranceData.get(0);
			insuranceProvider = tempVo.getInsuranceProvider();
			sumAssured = tempVo.getSumAssured();
			tenure = tempVo.getTenure();
			age = tempVo.getAge();
		}
		else
			request.setAttribute("allInsuranceData", list);
		Map map2 = loanInitiation.calculateCmInsurance(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced);
		ArrayList list5 = new ArrayList();
		if(map2.size()>0)
		{
		Map map3 = (Map)map2.get("map");
		String calcMethod = CommonFunction.checkNull(map.get("calcMethod"));
		 d =0.0;
		 b= false;
		if(policyType.equalsIgnoreCase("J") && calcMethod.equalsIgnoreCase("S") )
		{
			b = (Boolean)map.get("b");
			d = (Double)map.get("totalvalue");
		}
		
		CmInsuranceVo vo1= (CmInsuranceVo)map2.get("vo");
		if(b)
			vo1.setInsurancePremium(CommonFunction.checkNull(d));
		else
		{
			vo1.setInsurancePremium("");
			vo1.setOtherChargeId("");
			vo1.setChargesOnInsurance("");
			vo1.setLbxOtherChargeId("");
		}
		
	
		list5.add(vo1);
		}
		
		
		request.setAttribute("calculate", list5);
		tempVo=null;
				return mapping.findForward("success");
		
	}
	
	
	public ActionForward saveCmInsurance(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String bDate="";
		String makerId="";
		String makerDate="";
		if(userobj!=null)
		{
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in saveCmInsurance method of saveCmInsurance action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		
		CmInsuranceVo vo=new CmInsuranceVo();
		DynaValidatorForm cmInsuranceFormBean=(DynaValidatorForm )form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, cmInsuranceFormBean);
		
		
		 if(userobj != null)
			{
				makerId=userobj.getUserId();
				makerDate=userobj.getBusinessdate();
				
			}
		 vo.setMakerId(makerId);
		 vo.setMakerDate(makerDate);
		 int premi=0;
		 	String ids=CommonFunction.checkNull(request.getParameter("ids"));		
			String cus=ids.replace("/","|");
			vo.setCustId(cus);	
			int sumFromVo=0;			
		String dealId = "";
		String loanId="";
		String insuranceProvider=request.getParameter("insuranceProvider");
		int insurancePro=Integer.parseInt(insuranceProvider);
		String sumAssured=request.getParameter("sumAssured");
		String tenure=request.getParameter("tenure");
		String age=request.getParameter("age");
		String insurancePremium=request.getParameter("insurancePremium");
		String chargesOnInsurance=request.getParameter("chargesOnInsurance");
		String insuranceProduct=CommonFunction.checkNull(request.getParameter("insuranceProduct"));
		if(insuranceProduct.contains("|"))		// for removing service called from insurance product
		{
			insuranceProduct=insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
		}
		String propertyType=CommonFunction.checkNull(request.getParameter("propertyType"));	
		vo.setPropertyType(propertyType);
		String policyType=request.getParameter("policyType");
		logger.info("policyType:::"+policyType);
		String policyTenure=request.getParameter("policyTenure");
		vo.setPolicyTenure(policyTenure);
		String sms = "";
		//logger.info("ids::::"+ids[1]);
		String premiumFinanced=request.getParameter("premiumFinanced");
		if (session.getAttribute("loanId") != null) {

			loanId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxId") != null) {
			loanId = session.getAttribute("maxId").toString();
		}
		logger.info("In saveCmInsurance() loanId " + loanId);
		vo.setLoanId(loanId);
		boolean status = false;
		boolean status1=false;
		LoanInitiationDAO saveCmInsurance=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
        logger.info("Implementation class: "+saveCmInsurance.getClass());
        Map map = saveCmInsurance.calculateCmInsurance(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced);
        ArrayList list = new ArrayList();
        if(map.size()>0)
		{
		Map map1 = (Map)map.get("map");
		String calcMethod = CommonFunction.checkNull(map.get("calcMethod"));
		double d =0.0;
		Boolean b= false;
		if(policyType.equalsIgnoreCase("J") && calcMethod.equalsIgnoreCase("S") )
		{
			b = (Boolean)map.get("b");
			d = (Double)map.get("totalvalue");
		}
		
		CmInsuranceVo vo1= (CmInsuranceVo)map1.get("vo");
		if(b)
			vo1.setInsurancePremium(CommonFunction.checkNull(d));
		else
		{
			vo1.setInsurancePremium("");
			vo1.setOtherChargeId("");
			vo1.setChargesOnInsurance("");
			vo1.setLbxOtherChargeId("");
		}
	
		list.add(vo1);
		}
		request.setAttribute("calculate", list);
		sumAssured=CommonFunction.checkNull(vo.getSumAssured());
		if(sumAssured=="")
		{
			sumFromVo=0;
		}
		else
		{
			sumFromVo=Integer.parseInt(sumAssured);
		}
		
		logger.info("sumAssured:;;1111"+sumAssured);
		insurancePremium=CommonFunction.checkNull(vo.getInsurancePremium());
		if(insurancePremium=="")
		{
			premi=0;
		}
		else
		{
			premi=Integer.parseInt(insurancePremium);
		}
		logger.info("insurancePremium aman test::"+insurancePremium);
		String insuranceCount=ConnectionDAO.singleReturn("select count(1) from cr_insurance_dtl where loan_id='"+loanId+"' and policy_type='S'");
		int count=Integer.parseInt(insuranceCount);
		logger.info("total no of insurance captured for the deal_id: "+loanId+" is:"+count);
		String insProduct=CommonFunction.checkNull(ConnectionDAO.singleReturn("select ifnull(charge_id,0) from cr_insurance_dtl where loan_id='"+loanId+"' and policy_type='S'"));
		/*int insurProduct=Integer.parseInt(insProduct);
		logger.info("Insurance Product is: "+insProduct);
		if(count>0 && insurProduct!=insurancePro)
		{
			sms="U";
			request.setAttribute("sms", sms);
			if(insurProduct!=insurancePro)
			{
			sms="U";
			request.setAttribute("sms", sms);
			}
		}*/
		
		String InsFlag=CommonFunction.checkNull(request.getParameter("insFlag"));
		int insuranceUpdateId = saveCmInsurance.insuranceUpdateId(vo,loanId);
		String insuId = saveCmInsurance.getinsuId(vo,loanId);
		int sum_assure1 = saveCmInsurance.getDealSumInsuranceAmount(vo,loanId);
		int sumAssureDealLoan1 = saveCmInsurance.getsumAssureDealLoan1(vo,loanId);
		
		int assetCost = saveCmInsurance.getAssetCost(vo,loanId);
		String collateralCost = CommonFunction.checkNull(ConnectionDAO.singleReturn(" SELECT sum(c.ASSET_COLLATERAL_VALUE) from cr_asset_collateral_m c left join cr_loan_collateral_m d on c.ASSET_ID=d.ASSETID left join cr_asset_invoice_dtl e on e.ASSET_ID=c.ASSET_ID where d.loan_id='"+loanId+"' group by d.loan_ID "));
		//logger.info("collateralCost is::"+collateralCost);
		//int collateralAmount=0;
		Double collateralValue=0.00;
		if(collateralCost=="")
		{
			collateralValue=0.00;
		}
		else
		{
			collateralValue=Double.parseDouble(collateralCost);
		}
		//Double collateralValue=Double.parseDouble(collateralCost);
		logger.info("collateralCost::"+collateralValue);
		String assetFlag = CommonFunction.checkNull(ConnectionDAO.singleReturn(" SELECT P.ASSET_FLAG FROM CR_LOAN_DTL  C JOIN CR_PRODUCT_M P ON C.LOAN_PRODUCT = P.PRODUCT_ID WHERE LOAN_ID = '"+loanId+"' LIMIT 1 "));
		logger.info("assetFlag::"+assetFlag);
		if(CommonFunction.checkNull(assetFlag).equalsIgnoreCase("A")){
		if(CommonFunction.checkNull(insuId).equalsIgnoreCase(""))
		{
		/*if(sumAssureDealLoan1>=(sum_assure1+sumFromVo))
		{*/
			 if(assetCost>=(premi+sumAssureDealLoan1)){
		status = saveCmInsurance.insertCmInsurance(vo,loanId);
		if(status){
			status1= saveCmInsurance.updateDealLoan(vo,loanId);
			}
		
		
		if (status) {
			sms = "S";
		} else {
			sms = "E";
		}
		
		request.setAttribute("sms", sms);
		}
		
		else{
			sms = "assetPremium";
			request.setAttribute("sms", sms);
		}
		/*}
		else
		{
			
				sms = "totNotmatch";
				request.setAttribute("sms", sms);	
			
			
		}*/
		}
		else if(InsFlag.equalsIgnoreCase("true"))
		{
			/*if(sumAssureDealLoan1>=sumFromVo)
			{*/
				if(insuranceUpdateId==0)
				{
				 if(assetCost>=(premi+sumAssureDealLoan1)){
			status = saveCmInsurance.insertCmInsurance(vo,loanId);
			if(status){
				status1= saveCmInsurance.updateDealLoan(vo,loanId);
				}
			
			
			if (status) {
				sms = "S";
			} else {
				sms = "E";
			}
				 }
				 else{
						sms = "assetPremium";
			request.setAttribute("sms", sms);
					}
			}
				else{

					status = saveCmInsurance.insertCmInsurance(vo,loanId);
					if(status){
						status1= saveCmInsurance.updateDealLoan(vo,loanId);
						}
					
					if (status) {
						sms = "S";
					} else {
						sms = "E";
					}
						 
				}
			/*}
			else
			{
				sms = "totNotmatch";
				request.setAttribute("sms", sms);
			}*/
		}
		else
		{
			sms = "combiExist";
			request.setAttribute("sms", sms);
		}
		}
		if(CommonFunction.checkNull(assetFlag).equalsIgnoreCase("N")){
			if(CommonFunction.checkNull(insuId).equalsIgnoreCase(""))
			{
			/*if(sumAssureDealLoan1>=(sum_assure1+sumFromVo))
			{*/
				if(collateralValue==0.00 || (collateralValue>=(premi+sumAssureDealLoan1))){
			status = saveCmInsurance.insertCmInsurance(vo,loanId);
			if(status){
				status1= saveCmInsurance.updateDealLoan(vo,loanId);
				}
			
			
			if (status) {
				sms = "S";
			} else {
				sms = "E";
			}
			
			request.setAttribute("sms", sms);
			}
			
			else{
				sms = "assetPremium";
				request.setAttribute("sms", sms);
			}
			/*}
			else
			{
				
					sms = "totNotmatch";
					request.setAttribute("sms", sms);	
				
				
			}*/
			}
			else if(InsFlag.equalsIgnoreCase("true"))
			{
				/*if(sumAssureDealLoan1>=sumFromVo)
				{*/
					if(insuranceUpdateId==0)
					{
						if(collateralValue==0.00 || (collateralValue>=(premi+sumAssureDealLoan1))){
				status = saveCmInsurance.insertCmInsurance(vo,loanId);
				if(status){
					status1= saveCmInsurance.updateDealLoan(vo,loanId);
					}
				
				
				if (status) {
					sms = "S";
				} else {
					sms = "E";
				}
					 }
					 else{
							sms = "assetPremium";
				request.setAttribute("sms", sms);
						}
				}
					else{

						status = saveCmInsurance.insertCmInsurance(vo,loanId);
						if(status){
							status1= saveCmInsurance.updateDealLoan(vo,loanId);
							}
						
						if (status) {
							sms = "S";
						} else {
							sms = "E";
						}
							 
					}
				/*}
				else
				{
					sms = "totNotmatch";
					request.setAttribute("sms", sms);
				}*/
			}
			else
			{
				sms = "combiExist";
				request.setAttribute("sms", sms);
			}
		}
		
		 
		request.setAttribute("sms", sms);
		ArrayList list2 = saveCmInsurance.getInsuranceData(loanId);
		request.setAttribute("allInsuranceData", list2);
		
		ArrayList list1 = saveCmInsurance.getInsuranceProviders();
		request.setAttribute("InsuranceProviders", list1);
		ArrayList insuranceProducts = saveCmInsurance.getInsuranceProducts(insuranceProvider);
		request.setAttribute("insuranceProducts", insuranceProducts);
		
		ArrayList list3 = saveCmInsurance.getpolicyTypes();
		request.setAttribute("policyTypes", list3);
		
		 ArrayList customerDetailList=saveCmInsurance.getCustomerDetailList(vo, loanId);
		 request.setAttribute("customerDetailList",customerDetailList);
		 request.setAttribute("listSize",((CmInsuranceVo) customerDetailList.get(0)).getTotalRecordSize());
		 ArrayList list4 = saveCmInsurance.getSaveInsuranceData(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced,loanId);
			request.setAttribute("saveInsuranceData", list4);
			request.setAttribute("saveInsuranceDataDelete", "saveInsuranceDataDelete");
			
			ArrayList relation=saveCmInsurance.getRelation(vo, loanId);
			 request.setAttribute("relationshps",relation);	
			 
			 
			 ArrayList property=saveCmInsurance.getPropertyType(vo, loanId);
			 request.setAttribute("propertyTypes",property);
		return mapping.findForward("success");
	}
	
	
	
	public ActionForward calculateCmInsurance(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		HttpSession session = request.getSession();
		boolean flag=false;
		boolean status=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String bDate="";
		String userId="";		
		if(userobj!=null)
		{
				bDate=userobj.getBusinessdate();
				userId=userobj.getUserId();				
		}else{
			logger.info("here in calculateCmInsurance method of calculateCmInsurance action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String loanId = "";
		
		
		String insurancePremium="";
		String otherChargeId="";
		String chargesOnInsurance="";
		String lbxOtherChargeId="";
		String calcMethod="";
		CmInsuranceVo vo=new CmInsuranceVo();
		String insuranceProvider=request.getParameter("insuranceProvider");
		String sumAssured=request.getParameter("sumAssured");
		String tenure=request.getParameter("tenure");
		String age=request.getParameter("age");
		String insuranceProduct=CommonFunction.checkNull(request.getParameter("insuranceProduct"));
		if(insuranceProduct.contains("|"))		// for removing service called from insurance product
		{
			insuranceProduct=insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
		}
		String policyType=request.getParameter("policyType");
		String premiumFinanced=request.getParameter("premiumFinanced");
		String ids=CommonFunction.checkNull(request.getParameter("ids"));		
		String cus=ids.replace("/","|");
		vo.setCustId(cus);	
		String policyTenure=request.getParameter("policyTenure");
		vo.setPolicyTenure(policyTenure);
		String propertyType=CommonFunction.checkNull(request.getParameter("propertyType"));	
		vo.setPropertyType(propertyType);
		vo.setMakerDate(bDate);
		vo.setMakerId(userId);
		 String sms = "";
		if (session.getAttribute("loanId") != null) {

			loanId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxId") != null) {
			loanId = session.getAttribute("maxId").toString();
		}
		vo.setLoanId(loanId);
		
			LoanInitiationDAO calc=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
			logger.info("Implementation class: "+calc.getClass()); 			
			
			
			Map map = calc.calculateCmInsurance(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced);
			ArrayList list = new ArrayList();
			if(map.size()>0)
				{
			Map map1 = (Map)map.get("map");
			if(policyType.equalsIgnoreCase("J"))
			 calcMethod = CommonFunction.checkNull(map1.get("calcMethod"));
			Integer d =0;
			Boolean b= false;
			CmInsuranceVo vo1= (CmInsuranceVo)map1.get("vo");
			insurancePremium=CommonFunction.checkNull(vo1.getInsurancePremium());
			if((!insurancePremium.contains("E01"))&&(!insurancePremium.toUpperCase().contains("ERROR")))
			{
			
			if(calcMethod.equalsIgnoreCase("S"))
			{
				b = (Boolean)map.get("b");
				d = (Integer)map.get("totalvalue");
			
			
			
			if(b)
				vo1.setInsurancePremium(CommonFunction.checkNull(d));
			else
			{
				vo1.setInsurancePremium("");
				vo1.setOtherChargeId("");
				vo1.setChargesOnInsurance("");
				vo1.setLbxOtherChargeId("");
			}
			}
			//---------------
			 insurancePremium=vo1.getInsurancePremium();
			 otherChargeId=vo1.getOtherChargeId();
			 chargesOnInsurance=vo1.getChargesOnInsurance();
			 lbxOtherChargeId=vo1.getLbxOtherChargeId();
			
			//---------------
			
			list.add(vo1);
			 sms = "saveCal";
			  request.setAttribute("sms", sms);
				}
			else
			{
				 sms = insurancePremium;
				  request.setAttribute("sms", sms);
			 }
				}
			
			else
			{
				 sms = "notCal";
				  request.setAttribute("sms", sms);
			}
			request.setAttribute("calculate", list);
			
			ArrayList list2 = calc.getInsuranceData(loanId);
			request.setAttribute("allInsuranceData", list2);
			
			ArrayList list1 = calc.getInsuranceProviders();
			request.setAttribute("InsuranceProviders", list1);
			
			ArrayList allInsuranceData = calc.getAllInsuranceData(vo, loanId);
			request.setAttribute("source", "Y");
			ArrayList insuranceProducts = calc.getInsuranceProducts(insuranceProvider);
			request.setAttribute("insuranceProducts", insuranceProducts);
			
			ArrayList list3 = calc.getpolicyTypes();
			request.setAttribute("policyTypes", list3);
			
			 ArrayList customerDetailList=calc.getCustomerDetailList(vo, loanId);
			 request.setAttribute("customerDetailList",customerDetailList);
			 ArrayList relation=calc.getRelation(vo, loanId);
			 request.setAttribute("relationshps",relation);
			 
			 ArrayList property=calc.getPropertyType(vo, loanId);
			 request.setAttribute("propertyTypes",property);
				request.setAttribute("saveInsuranceDataDelete", "saveInsuranceDataDelete");
				
				PrintWriter out=response.getWriter();
				out.print(insurancePremium+"$:"+otherChargeId+"$:"+chargesOnInsurance+"$:"+lbxOtherChargeId+"$:"+sms+"$:");
				
		return null;//mapping.findForward("success111");
	}

	
	public ActionForward viewCmInsuranceBehind(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		logger.info("In viewCmInsuranceBehind(cmInsuranceBehind) ");
		

		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String bDate="";
		
		if(userobj!=null)
		{
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in viewCmInsuranceBehind method of CmInsuranceBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		LoanInitiationDAO lim=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
        logger.info("Implementation class: "+lim.getClass()); 			
		
		Object sessionId = session.getAttribute("sessionID");
		
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String dealId = "";
		String dealloanId = "";
		String loanId = "";
		
		String ids=CommonFunction.checkNull(request.getParameter("ids"));
		String[] cus=ids.split("\\|");
		
		
		if (session.getAttribute("loanId") != null) {

			loanId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxId") != null) {
			loanId = session.getAttribute("maxId").toString();
		}
		CmInsuranceVo vo=new CmInsuranceVo();
		String insuranceProvider=request.getParameter("insuranceProvider");
		String sumAssured=request.getParameter("sumAssured");
		String tenure=request.getParameter("tenure");
		String age=request.getParameter("age");
		String otherChargeId=request.getParameter("otherChargeId");
		String insurancePremium=request.getParameter("insurancePremium");
		String chargesOnInsurance=request.getParameter("chargesOnInsurance");
		String insuranceProduct=CommonFunction.checkNull(request.getParameter("insuranceProduct"));
		if(insuranceProduct.contains("|"))		// for removing service called from insurance product
		{
			insuranceProduct=insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
		}
		String policyType=request.getParameter("policyType");
		String premiumFinanced=request.getParameter("premiumFinanced");
		String propertyType=CommonFunction.checkNull(request.getParameter("propertyType"));	
		vo.setPropertyType(propertyType);
	
		
		
		logger.info("In CmInsuranceBehindAction(CmInsuranceBehind) loanId " + loanId);
		
		
			ArrayList loanHeader = lim.getLoanHeader(loanId);
			session.setAttribute("loanHeader", loanHeader);
			ArrayList customerDetailList=lim.getCustomerDetailList(vo, loanId);
			request.setAttribute("customerDetailList",customerDetailList);
			request.setAttribute("listSize",((CmInsuranceVo) customerDetailList.get(0)).getTotalRecordSize());
			ArrayList list = lim.getInsuranceData(loanId);
			ArrayList allInsuranceData = lim.getAllInsuranceData(vo, loanId);
			 ArrayList property=lim.getPropertyType(vo, loanId);
			 request.setAttribute("propertyTypes",property);
			ArrayList list4 = lim.getSaveInsuranceData(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced,loanId);
			request.setAttribute("saveInsuranceData", list4);
			request.setAttribute("viewmode", "viewmode");
		
		//end view mode
		
			return mapping.findForward("success");
		
	}
	
	
	public ActionForward deleteCmInsurance(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String bDate="";
		String makerId="";
		String makerDate="";
		if(userobj!=null)
		{
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in deleteCmInsurance method of deleteCmInsurance action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		
		CmInsuranceVo vo=new CmInsuranceVo();
		
		 if(userobj != null)
			{
				makerId=userobj.getUserId();
				makerDate=userobj.getBusinessdate();
				
			}
		 vo.setMakerId(makerId);
		 vo.setMakerDate(makerDate);
		
		
		String loanId = "";
		String insuranceProvider=request.getParameter("insuranceProvider");
		String sumAssured=request.getParameter("sumAssured");
		String tenure=request.getParameter("tenure");
		String age=request.getParameter("age");
		String insurancePremium=request.getParameter("insurancePremium");
		String chargesOnInsurance=request.getParameter("chargesOnInsurance");
		String insuranceProduct=CommonFunction.checkNull(request.getParameter("insuranceProduct"));
		if(insuranceProduct.contains("|"))		// for removing service called from insurance product
		{
			insuranceProduct=insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
		}
		String policyType=request.getParameter("policyType");
		String premiumFinanced=request.getParameter("premiumFinanced");
		String propertyType=CommonFunction.checkNull(request.getParameter("propertyType"));	
		vo.setPropertyType(propertyType);
		vo.setPremiumFinanced(premiumFinanced);
		String ids=CommonFunction.checkNull(request.getParameter("ids"));		
		String insuranceId=ids.replace("/","|");
		vo.setInsuranceId(insuranceId);		
	
		
		
		if (session.getAttribute("loanId") != null) {

			loanId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxId") != null) {
			loanId = session.getAttribute("maxId").toString();
		}
		logger.info("In deleteCmInsurance() loanId " + loanId);
		
		
		
		boolean status = false;
		boolean status1=false;
		LoanInitiationDAO deleteCmInsurance=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
        logger.info("Implementation class: "+deleteCmInsurance.getClass());
	    ArrayList loanHeader = deleteCmInsurance.getLoanHeader(loanId);
		session.setAttribute("loanHeader", loanHeader);
	    
	    ArrayList list1 = deleteCmInsurance.getInsuranceProviders();
		request.setAttribute("InsuranceProviders", list1);
		ArrayList insuranceProducts = deleteCmInsurance.getInsuranceProducts(insuranceProvider);
		request.setAttribute("insuranceProducts", insuranceProducts);
		
		
		ArrayList list2 = deleteCmInsurance.getpolicyTypes();
		request.setAttribute("policyTypes", list2);
		
		 ArrayList customerDetailList=deleteCmInsurance.getCustomerDetailList(vo, loanId);
		 request.setAttribute("customerDetailList",customerDetailList);
		 request.setAttribute("listSize",((CmInsuranceVo) customerDetailList.get(0)).getTotalRecordSize());
		 
		
		
		request.setAttribute("saveInsuranceDataDelete", "saveInsuranceDataDelete");

		
		 ArrayList relation=deleteCmInsurance.getRelation(vo, loanId);
		 request.setAttribute("relationshps",relation);
		 ArrayList property=deleteCmInsurance.getPropertyType(vo, loanId);
		 request.setAttribute("propertyTypes",property);
		
		CmInsuranceVo tempVo = new CmInsuranceVo();
		
        
     
		
		status = deleteCmInsurance.deleteCmInsurance(vo,loanId);
		if(status){
			status1= deleteCmInsurance.updateDealLoan(vo,loanId);
			}
		String delete = "";
		if (status) {
			delete = "S";
		} else {
			delete = "E";
		}
		
		request.setAttribute("delete", delete);
		
		 ArrayList list4 = deleteCmInsurance.getSaveInsuranceData(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced,loanId);
			request.setAttribute("saveInsuranceData", list4);
			 ArrayList list = deleteCmInsurance.getInsuranceData(loanId);
			ArrayList allInsuranceData = deleteCmInsurance.getAllInsuranceData(vo, loanId);
			if(allInsuranceData.size() > 0)
			{
				request.setAttribute("allInsuranceData", allInsuranceData);
				tempVo = (CmInsuranceVo) allInsuranceData.get(0);
				insuranceProvider = tempVo.getInsuranceProvider();
				sumAssured = tempVo.getSumAssured();
				tenure = tempVo.getTenure();
				age = tempVo.getAge();
			}
			else
				request.setAttribute("allInsuranceData", list);
			
			tempVo=null;
			
		return mapping.findForward("success");
	}
	
	// parvez starts
	
	public ActionForward getInsuranceProduct(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	throws Exception {
logger.info("In getCustomerConstition.............................. ");
		
	  	boolean flag =false;
	    HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
	    String userId="";
		String bgDate="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bgDate=userobj.getBusinessdate();
		}else{
			logger.info("here in getInsuranceProduct method of action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		
		
		String loanId = "";
		
		String insuranceProvider=request.getParameter("insuranceProvider");
		String sumAssured=request.getParameter("sumAssured");
		String tenure=request.getParameter("tenure");
		String age=request.getParameter("age");
		String insurancePremium=request.getParameter("insurancePremium");
		String chargesOnInsurance=request.getParameter("chargesOnInsurance");
		String insuranceProduct=CommonFunction.checkNull(request.getParameter("insuranceProduct"));
		if(insuranceProduct.contains("|"))		// for removing service called from insurance product
		{
			insuranceProduct=insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
		}
		String policyType=request.getParameter("policyType");
		String premiumFinanced=request.getParameter("premiumFinanced");
		if (session.getAttribute("loanId") != null) {

			loanId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxId") != null) {
			loanId = session.getAttribute("maxId").toString();
		}
		logger.info("In CmInsuranceBehindAction(CmInsuranceBehind) loanId " + loanId);
		CmInsuranceVo vo=new CmInsuranceVo();
		LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 	
		
		//ArrayList list = dao.calculateCmInsurance(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced);
		/*ArrayList list = dao.calculateCmInsurance(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced);
		
		request.setAttribute("calculate", list);*/
		
		ArrayList list2 = dao.getInsuranceData(loanId);
		request.setAttribute("allInsuranceData", list2);
		
		ArrayList list1 = dao.getInsuranceProviders();
		request.setAttribute("InsuranceProviders", list1);
		
		ArrayList allInsuranceData = dao.getAllInsuranceData(vo, loanId);
		request.setAttribute("source", "Y");
		
		ArrayList list3 = dao.getpolicyTypes();
		request.setAttribute("policyTypes", list3);
		
		ArrayList property=dao.getPropertyType(vo, loanId);
		 request.setAttribute("propertyTypes",property);
		 
		 ArrayList insuranceProducts=null;
		 insuranceProducts = dao.getInsuranceProducts(insuranceProvider);
			request.setAttribute("insuranceProducts", insuranceProducts);
		  
		return mapping.findForward("insuranceProductSuccess");	
	}
	
	public ActionForward editInsuranceDetails(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		logger.info("In editInsuranceDetails(cmInsuranceBehind) ");
		

		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String bDate="";
		
		if(userobj!=null)
		{
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in editInsuranceDetails method of CmInsuranceBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		LoanInitiationDAO lim=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
        logger.info("Implementation class: "+lim.getClass()); 			
		
		Object sessionId = session.getAttribute("sessionID");
		
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String dealId = "";
		String dealloanId = "";
		String loanId = "";
		
		String insuranceId=CommonFunction.checkNull(request.getParameter("insuranceId"));
		String propertyType=CommonFunction.checkNull(request.getParameter("propertyType"));	
		logger.info("insuranceId" +insuranceId);
		
		if (session.getAttribute("loanId") != null) {

			loanId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxId") != null) {
			loanId = session.getAttribute("maxId").toString();
		}
		CmInsuranceVo vo=new CmInsuranceVo();
		String insuranceProvider=request.getParameter("insuranceProvider");
		String sumAssured=request.getParameter("sumAssured");
		String tenure=request.getParameter("tenure");
		String age=request.getParameter("age");
		String otherChargeId=request.getParameter("otherChargeId");
		String insurancePremium=request.getParameter("insurancePremium");
		String chargesOnInsurance=request.getParameter("chargesOnInsurance");
		String insuranceProduct=CommonFunction.checkNull(request.getParameter("insuranceProduct"));
		if(insuranceProduct.contains("|"))		// for removing service called from insurance product
		{
			insuranceProduct=insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
		}
		String policyType=request.getParameter("policyType");
		String premiumFinanced=request.getParameter("premiumFinanced");
		vo.setInsuranceId(insuranceId);
		vo.setPropertyType(propertyType);
		
		
		logger.info("In CmInsuranceBehindAction(CmInsuranceBehind) loanId " + loanId);
		
		
		ArrayList loanHeader = lim.getLoanHeader(loanId);
		session.setAttribute("loanHeader", loanHeader);
		
		ArrayList list1 = lim.getInsuranceProviders();
		request.setAttribute("InsuranceProviders", list1);
		CmInsuranceVo vo1  = (CmInsuranceVo)list1.get(0);
		
		ArrayList insuranceProducts = lim.getInsuranceProducts(vo1.getChargeId());
		request.setAttribute("insuranceProducts", insuranceProducts);
		 
		 ArrayList list2 = lim.getpolicyTypes();
			request.setAttribute("policyTypes", list2);
			
			
			
			 ArrayList customerDetailList=lim.getCustomerDetailList(vo, loanId);
			 request.setAttribute("customerDetailList",customerDetailList);
			 request.setAttribute("listSize",((CmInsuranceVo) customerDetailList.get(0)).getTotalRecordSize());
			ArrayList list = lim.getInsuranceData(loanId);
			ArrayList allInsuranceData = lim.getAllInsuranceData(vo, loanId);
			
		
			//request.setAttribute("saveInsuranceDataDelete", "saveInsuranceDataDelete");
		 
			 ArrayList property=lim.getPropertyType(vo, loanId);
			 request.setAttribute("propertyTypes",property);
		 
			ArrayList relation=lim.getRelation(vo, loanId);
		 request.setAttribute("relationshps",relation);
		 
			ArrayList list4 = lim.getSaveInsuranceData(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced,loanId);
			request.setAttribute("saveInsuranceData", list4);
			
		// view mode
			ArrayList viewList = lim.getViewInsurance(vo,loanId);
			request.setAttribute("viewmode", "viewmode");
			request.setAttribute("viewList", viewList);
	return mapping.findForward("viewList");	
				
		
	}
	
	
	public ActionForward relodInsuranceData(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		logger.info("In relodInsuranceData(cmInsuranceBehind) ");
		

		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String bDate="";
		
		if(userobj!=null)
		{
				bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in relodInsuranceData method of CmInsuranceBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		LoanInitiationDAO lim=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
        logger.info("Implementation class: "+lim.getClass()); 			
		
		Object sessionId = session.getAttribute("sessionID");
		
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String dealId = "";
		String dealloanId = "";
		String loanId = "";
		
		
		
		
		if (session.getAttribute("loanId") != null) {

			loanId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxId") != null) {
			loanId = session.getAttribute("maxId").toString();
		}
		CmInsuranceVo vo=new CmInsuranceVo();
		String insuranceProvider=request.getParameter("insuranceProvider");
		String sumAssured=request.getParameter("sumAssured");
		String tenure=request.getParameter("tenure");
		String age=request.getParameter("age");
		String insurancePremium=request.getParameter("insurancePremium");
		String chargesOnInsurance=request.getParameter("chargesOnInsurance");
		String insuranceProduct=CommonFunction.checkNull(request.getParameter("insuranceProduct"));
		if(insuranceProduct.contains("|"))		// for removing service called from insurance product
		{
			insuranceProduct=insuranceProduct.substring(0, insuranceProduct.indexOf("|"));
		}
		String policyType=request.getParameter("policyType");
		String premiumFinanced=request.getParameter("premiumFinanced");
		String chargesOnPremium=request.getParameter("chargesOnPremium");
		String otherChargeId=request.getParameter("otherChargeId");
		String	custId =request.getParameter("custId");
		String 	nomineeName=request.getParameter("nomineeName");
		String	dateOfBirth=request.getParameter("dateOfBirth");
		String	gender=request.getParameter("gender");
		String	relationship=request.getParameter("relationship");
		String	policyTenure=request.getParameter("policyTenure");
		String	sumAssuredPerc=request.getParameter("sumAssuredPerc");
		String ids=CommonFunction.checkNull(request.getParameter("insuranceId"));		
		String insuranceId=ids.replace("/","|");
		vo.setInsuranceId(insuranceId);	
		String propertyType=CommonFunction.checkNull(request.getParameter("propertyType"));	
		/*String	propertyType=request.getParameter("propertyType");
		
		String insuranceId=CommonFunction.checkNull(request.getParameter("insuranceId"));	*/
		vo.setInsuranceId(insuranceId);
		vo.setPropertyType(propertyType);
		logger.info("insuranceId" +insuranceId);
		
		logger.info("In CmInsuranceBehindAction(CmInsuranceBehind) loanId " + loanId);
		
		
		ArrayList loanHeader = lim.getLoanHeader(loanId);
		session.setAttribute("loanHeader", loanHeader);
		
		ArrayList list1 = lim.getInsuranceProviders();
		request.setAttribute("InsuranceProviders", list1);
		CmInsuranceVo vo1  = (CmInsuranceVo)list1.get(0);
		
		ArrayList insuranceProducts = lim.getInsuranceProducts(vo1.getChargeId());
		request.setAttribute("insuranceProducts", insuranceProducts);
		 
		 ArrayList list2 = lim.getpolicyTypes();
			request.setAttribute("policyTypes", list2);
			
			
			
			 ArrayList customerDetailList=lim.getCustomerDetailList(vo, loanId);
			 request.setAttribute("customerDetailList",customerDetailList);
			 request.setAttribute("listSize",((CmInsuranceVo) customerDetailList.get(0)).getTotalRecordSize());
			ArrayList list = lim.getInsuranceData(loanId);
			ArrayList allInsuranceData = lim.getAllInsuranceData(vo, loanId);
			
		
			//request.setAttribute("saveInsuranceDataDelete", "saveInsuranceDataDelete");
		 
			 ArrayList property=lim.getPropertyType(vo, loanId);
			 request.setAttribute("propertyTypes",property);
		 
			ArrayList relation=lim.getRelation(vo, loanId);
		 request.setAttribute("relationshps",relation);
		 
			ArrayList list4 = lim.getSaveInsuranceData(vo,insuranceProvider,sumAssured,tenure,age,insuranceProduct,policyType,premiumFinanced,loanId);
			request.setAttribute("saveInsuranceData", list4);
			
		// view mode
			ArrayList reloadList = lim.getReloadInsurance(vo,loanId);
			request.setAttribute("reload", reloadList);
			CmInsuranceVo vo2  = (CmInsuranceVo)reloadList.get(0);
			insuranceProvider=vo2.getInsuranceProvider();
			//insuranceProvider=(String) reloadList.get(0);
			sumAssured=vo2.getSumAssured();
			tenure=vo2.getTenure();
			insurancePremium=vo2.getInsurancePremium();
			chargesOnPremium=vo2.getChargesOnInsurance();
			otherChargeId=vo2.getOtherChargeId();
			policyType=vo2.getPolicyType();
			premiumFinanced=vo2.getPremiumFinanced();
			custId=CommonFunction.checkNull(vo2.getCustId());
			String cus=custId.replace("|", ",");
			vo.setCustId(cus);
			 String  cust=lim.getCust(vo, loanId);
			 
			 
			String custList="";
			String insuranceProductId=request.getParameter("insuranceProductId");
			ArrayList ageCust= new ArrayList();
			custList=cust.replace("|",",");
			char []chars = custList.toCharArray();
			String s1 = "";
			int abc=chars.length-1;
			for(int i = 0; i < chars.length-1; i++)
			{
				s1 += chars[i];
			}
			logger.info("s1::"+s1);
			insuranceProductId=vo2.getInsuranceProductId();
			insuranceProduct=vo2.getInsuranceProduct();
			nomineeName=vo2.getNomineeName();
			dateOfBirth=vo2.getDateOfbirth();
			gender=vo2.getGender();
			relationship=vo2.getRelationshp();
			policyTenure=vo2.getPolicyTenure();
			sumAssuredPerc=vo2.getSumAssuPer();
			propertyType=vo2.getPropertyType();
			
			String nomineeName1 = vo2.getNomineeName1();
			String gender1=vo2.getGender1();
			String Dob1 = vo2.getDateOfbirth1();
			String relationship1=vo2.getRelationshp1();
			
			String nomineeName2 = vo2.getNomineeName2();
			String gender2=vo2.getGender2();
			String Dob2 = vo2.getDateOfbirth2();
			String relationship2=vo2.getRelationshp2();
			
			String nomineeName3 = vo2.getNomineeName3();
			String gender3=vo2.getGender3();
			String Dob3 = vo2.getDateOfbirth3();
			String relationship3=vo2.getRelationshp3();
			
			String nomineeName4 = vo2.getNomineeName4();
			String gender4=vo2.getGender4();
			String Dob4 = vo2.getDateOfbirth4();
			String relationship4=vo2.getRelationshp4();
			
			String percentage = vo2.getPercentage();
			String percentage1 = vo2.getPercentage1();
			String percentage2 = vo2.getPercentage2();
			String percentage3= vo2.getPercentage3();
			String percentage4 = vo2.getPercentage4();
			
			String addr = vo2.getAddr();
			String addr1 = vo2.getAddr1();
			String addr2 = vo2.getAddr2();
			String addr3 = vo2.getAddr3();
			String addr4 = vo2.getAddr4();
			
			//Saurabh Changes starts here
			String sPrefix = vo2.getsPrefix();
			String nomineeMName = vo2.getNomineeMName();
			String nomineeLName = vo2.getNomineeLName();
			String SmaritalStatus = vo2.getSmaritalStatus();
			String sNomineeArea = vo2.getSnomineeArea();
			String sNomineeCity = vo2.getSnomineeCity();
			String sNomineeState = vo2.getSnomineeState();
			String sNomineePin = vo2.getSnomineePin();
			String sPrefix1 = vo2.getsPrefix1();
			String nomineeMName1 = vo2.getNomineeMName1();
			String nomineeLName1 = vo2.getNomineeLName1();
			String SmaritalStatus1 = vo2.getSmaritalstatus1();
			String sNomineeArea1 = vo2.getsNomineeArea1();				
			String sNomineeCity1 = vo2.getsNomineeCity1();
			String sNomineeState1 = vo2.getsNomineeState1();
			String sNomineePin1 = vo2.getsNomineePin1();
			String sPrefix2 = vo2.getsPrefix2();
			String nomineeMName2 = vo2.getNomineeMName2();
			String nomineeLName2 = vo2.getNomineeLName2();
			String SmaritalStatus2 = vo2.getSmaritalStatus2();
			String sNomineeArea2 = vo2.getsNomineeArea2();
			String sNomineeCity2 = vo2.getsNomineeCity2();
			String sNomineeState2 = vo2.getsNomineeState2();
			String sNomineePin2 = vo2.getsNomineePin2();
			String sPrefix3 = vo2.getsPrefix3();
			String nomineeMName3 = vo2.getNomineeMName3();
			String nomineeLName3 = vo2.getNomineeLName3();
			String SmaritalStatus3 = vo2.getSmaritalStatus3();
			String sNomineeArea3 = vo2.getsNomineeArea3();
			String sNomineeCity3 = vo2.getsNomineeCity3();
			String sNomineeState3 = vo2.getsNomineeState3();
			String sNomineePin3 = vo2.getsNomineePin3();
			String sPrefix4 = vo2.getsPrefix4();
			String nomineeMName4 = vo2.getNomineeMName4();
			String nomineeLName4 = vo2.getNomineeLName4();
			String SmaritalStatus4 = vo2.getSmaritalStatus4();
			String sNomineeArea4 = vo2.getsNomineeArea4();
			String sNomineeCity4 = vo2.getsNomineeCity4();
			String sNomineeState4 = vo2.getsNomineeState4();
			String sNomineePin4 = vo2.getsNomineePin4();
			String saddressType = vo2.getSaddressType();
			String sinsuranceStreet = vo2.getSinsuranceStreet();
			
			String saddressType1 = vo2.getSaddressType1();
			String sinsuranceStreet1 = vo2.getSinsuranceStreet1();
			String saddressType2 = vo2.getSaddressType2();
			String sinsuranceStreet2 = vo2.getSinsuranceStreet2();
			String saddressType3 = vo2.getSaddressType3();
			String sinsuranceStreet3 = vo2.getSinsuranceStreet3();
			String saddressType4 = vo2.getSaddressType4();
			String sinsuranceStreet4 = vo2.getSinsuranceStreet4();
			
			String txtStateCode = vo2.getTxtStateCode();
			String txtStateCode1 = vo2.getTxtStateCode1();
			String txtStateCode2 = vo2.getTxtStateCode2();
			String txtStateCode3 = vo2.getTxtStateCode3();
			String txtStateCode4 = vo2.getTxtStateCode4();
			/*String txtDistCode = vo2.getTxtDistCode();
			String txtDistCode1 = vo2.getTxtDistCode1();
			String txtDistCode2 = vo2.getTxtDistCode2();
			String txtDistCode3 = vo2.getTxtDistCode3();
			String txtDistCode4 = vo2.getTxtDistCode4();
			*/
			//Saurabh Changes ends here
			String assetFlag = CommonFunction.checkNull(ConnectionDAO.singleReturn(" SELECT P.ASSET_FLAG FROM CR_DEAL_LOAN_DTL  D JOIN CR_PRODUCT_M P ON D.DEAL_PRODUCT = P.PRODUCT_ID WHERE DEAL_ID = '"+dealId+"' LIMIT 1 "));
			
			
			StringBuffer buffer =  new StringBuffer();
			buffer.append("<select id = insuranceProduct class=text name=insuranceProduct>");
			buffer.append("<option value="+insuranceProductId+">"+insuranceProduct+"</option>");
			buffer.append("</select>");
			buffer.toString();
			
			PrintWriter out=response.getWriter();
		   
			
			//out.print(insuranceProvider+"$:"+sumAssured+"$:"+tenure+"$:"+insurancePremium+"$:"+chargesOnPremium+"$:"+otherChargeId+"$:"+policyType+"$:"+premiumFinanced+"$:"+custList+"$:"+insuranceProductId+"$:"+nomineeName+"$:"+dateOfBirth+"$:"+gender+"$:"+relationship+"$:"+policyTenure+"$:"+sumAssuredPerc+"$:"+propertyType+"$:"+buffer+"$:"+nomineeName1+"$:"+gender1+"$:"+Dob1+"$:"+relationship1+"$:"+nomineeName2+"$:"+gender2+"$:"+Dob2+"$:"+relationship2+"$:"+nomineeName3+"$:"+gender3+"$:"+Dob3+"$:"+relationship3+"$:"+nomineeName4+"$:"+gender4+"$:"+Dob4+"$:"+relationship4+"$:"+percentage+"$:"+percentage1+"$:"+percentage2+"$:"+percentage3+"$:"+percentage4+"$:"+addr+"$:"+addr1+"$:"+addr2+"$:"+addr3+"$:"+addr4+"$:"+assetFlag+"$:");
			out.print(insuranceProvider+"$:"+sumAssured+"$:"+tenure+"$:"+insurancePremium+"$:"+chargesOnPremium+"$:"+otherChargeId+"$:"+policyType+"$:"+premiumFinanced+"$:"+custList+"$:"+insuranceProductId+"$:"+nomineeName+"$:"+dateOfBirth+"$:"+gender+"$:"+relationship+"$:"+policyTenure+"$:"+sumAssuredPerc+"$:"+propertyType+"$:"+buffer+"$:"+nomineeName1+"$:"+gender1+"$:"+Dob1+"$:"+relationship1+"$:"+nomineeName2+"$:"+gender2+"$:"+Dob2+"$:"+relationship2+"$:"+nomineeName3+"$:"+gender3+"$:"+Dob3+"$:"+relationship3+"$:"+nomineeName4+"$:"+gender4+"$:"+Dob4+"$:"+relationship4+"$:"+percentage+"$:"+percentage1+"$:"+percentage2+"$:"+percentage3+"$:"+percentage4+"$:"+addr+"$:"+addr1+"$:"+addr2+"$:"+addr3+"$:"+addr4+"$:"+sPrefix+"$:"+nomineeMName+"$:"+nomineeLName+"$:"+SmaritalStatus+"$:"+sNomineeArea+"$:"+sNomineeCity+"$:"+sNomineeState+"$:"+sNomineePin+"$:"+sPrefix1+"$:"+nomineeMName1+"$:"+nomineeLName1+"$:"+SmaritalStatus1+"$:"+sNomineeArea1+"$:"+sNomineeCity1+"$:"+sNomineeState1+"$:"+sNomineePin1+"$:"+sPrefix2+"$:"+nomineeMName2+"$:"+nomineeLName2+"$:"+SmaritalStatus2+"$:"+sNomineeArea2+"$:"+sNomineeCity2+"$:"+sNomineeState2+"$:"+sNomineePin2+"$:"+sPrefix3+"$:"+nomineeMName3+"$:"+nomineeLName3+"$:"+SmaritalStatus3+"$:"+sNomineeArea3+"$:"+sNomineeCity3+"$:"+sNomineeState3+"$:"+sNomineePin3+"$:"+sPrefix4+"$:"+nomineeMName4+"$:"+nomineeLName4+"$:"+SmaritalStatus4+"$:"+sNomineeArea4+"$:"+sNomineeCity4+"$:"+sNomineeState4+"$:"+sNomineePin4+"$:"+saddressType+"$:"+sinsuranceStreet+"$:"+saddressType1+"$:"+sinsuranceStreet1+"$:"+saddressType2+"$:"+sinsuranceStreet2+"$:"+saddressType3+"$:"+sinsuranceStreet3+"$:"+saddressType4+"$:"+sinsuranceStreet4+"$:"+txtStateCode+"$:"+txtStateCode1+"$:"+txtStateCode2+"$:"+txtStateCode3+"$:"+txtStateCode4+"$:"+assetFlag+"$:");
			
	return null;//mapping.findForward("success111");	
				
		
		
	}
	
	
}
