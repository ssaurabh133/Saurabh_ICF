/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.cm.dao.AdditionalDisbursalDAO;
import com.cm.vo.AdditionalDisbursalProcessVO;
import com.cm.vo.AdditionalDisbursalSearchVO;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.lockRecord.action.LockRecordCheck;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 02-27-2012
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class AdditionalDisbursalAuthorSearchAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	private static final Logger logger = Logger.getLogger(AdditionalDisbursalAuthorSearchAction.class.getName());
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
		public ActionForward searchAdditionalDisbursalAuthor(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) throws Exception{
			
			
			logger.info("Inside ........searchAdditionalDisbursalAuthor");
			
			HttpSession session = request.getSession();
			
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			
			String userId="";
			String branchId="";
			if(userobj!=null)
			{
				userId=userobj.getUserId();
				branchId=userobj.getBranchId();
			}else{
				logger.info("here in searchAdditionalDisbursalAuthor method of AdditionalDisbursalAuthorAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			AdditionalDisbursalSearchVO vo = new AdditionalDisbursalSearchVO();
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
			int currentPageLink = 0;
			if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
			{
				currentPageLink=1;
			}
			else
			{
				currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
			}
			logger.info("current page link ................ "+request.getParameter("d-49520-p"));
			vo.setCurrentPageLink(currentPageLink);
			
			//String type = CommonFunction.checkNull(request.getParameter("type"));
			DynaValidatorForm AdditionalDisbursalSearchDynaValidator = (DynaValidatorForm)form;
			org.apache.commons.beanutils.BeanUtils.copyProperties(vo,AdditionalDisbursalSearchDynaValidator);

			if(CommonFunction.checkNull(vo.getReportingToUserId()).equalsIgnoreCase(""))
					{ 
						vo.setReportingToUserId(userId);
					 
					}
					logger.info("user Id:::::"+vo.getReportingToUserId());
					vo.setStage("F");
					vo.setBranchId(branchId);
					vo.setUserId(userId);

					//change by sachin
					 AdditionalDisbursalDAO service=(AdditionalDisbursalDAO)DaoImplInstanceFactory.getDaoImplInstance(AdditionalDisbursalDAO.IDENTITY);
				    logger.info("Implementation class: "+service.getClass());

					//end by sachin
//					AdditionalDisbursalDAO service=new AdditionalDisbursalDAOImpl();
					ArrayList disbAuthorSearchList = service.searchAdditionalDisbAuthorData(vo,"F");
					logger.info("disbAuthorSearchList: "+disbAuthorSearchList);
					request.setAttribute("disbAuthorSearchList", disbAuthorSearchList);
			
		            return mapping.findForward("success");
	}
		
		public ActionForward showAdditionalDisbDataAuthor(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) throws Exception{
			logger.info("Inside ........showAdditionalDisbDataAuthor");
			
			HttpSession session = request.getSession();
			boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			String userId ="";
			String businessDate ="";
			if(userobj!=null){
					userId = userobj.getUserId();
					businessDate=userobj.getBusinessdate();
			}else{
				logger.info("here in showAdditionalDisbDataAuthor method of   action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			//session.removeAttribute("partPrePaymentDataAuthor");
			session.removeAttribute("reschId");
			session.removeAttribute("loanId");
			
			String loanId = CommonFunction.checkNull(request.getParameter("loanId"));
			String reschId = CommonFunction.checkNull(request.getParameter("reschId"));
			if(!loanId.equalsIgnoreCase(""))
			session.setAttribute("loanId", loanId);
			//CreditManagementDAO service = new CreditManagementDAOImpl();
			//change by sachin
			 AdditionalDisbursalDAO service=(AdditionalDisbursalDAO)DaoImplInstanceFactory.getDaoImplInstance(AdditionalDisbursalDAO.IDENTITY);
		    logger.info("Implementation class: "+service.getClass());

			//end by sachin
//			AdditionalDisbursalDAO service=new AdditionalDisbursalDAOImpl();
			
			logger.info("function id is ........................................"+session.getAttribute("functionId").toString());
			String functionId="";

		
			if(session.getAttribute("functionId")!=null)
			{
				functionId=session.getAttribute("functionId").toString();
			}
			
			
			//ServletContext context=getServlet().getServletContext();
			if(context!=null)
			{
				flag = LockRecordCheck.lockCheck(userId,functionId,loanId,context);
				logger.info("Flag ........................................ "+flag);
				if(!flag)
				{
					logger.info("Record is Locked");			
					request.setAttribute("message", "Locked");
					request.setAttribute("recordId", loanId);
					request.setAttribute("searchAdditionalDisbAuthor","searchAdditionalDisbAuthor");
					return mapping.findForward("searchAdditionalDisbAuthor");
				}
			}

			String makerDate=service.getMakerDate(reschId);
			session.setAttribute("businessDate",businessDate);
			session.setAttribute("makerDate",makerDate);
			AdditionalDisbursalProcessVO processVO=null;
			ArrayList<AdditionalDisbursalProcessVO> additionDisbDataAuthor = service.selectAdditionDisbursalData(loanId,reschId,"P");
			session.setAttribute("additionDisbDataAuthor", additionDisbDataAuthor);
			 ArrayList genericMasterList =null;
			 String instType = "";
			 if(additionDisbDataAuthor!=null && additionDisbDataAuthor.size()>0)
			 {
				 processVO = additionDisbDataAuthor.get(0);
				 instType =  CommonFunction.checkNull(processVO.getInstType());//Adding by ajay 11-04-2016
				 logger.info("getInstallmentType........"+instType);
				 if(instType.equalsIgnoreCase("E") ||instType.equalsIgnoreCase("R") || instType.equalsIgnoreCase("G"))
			 genericMasterList = service.getGenericMasterInfo("RESCHEDULE_TYPE1");
			else if(instType.equalsIgnoreCase("P") ||instType.equalsIgnoreCase("Q") || instType.equalsIgnoreCase("S"))
			genericMasterList = service.getGenericMasterInfo("ADD_DIS_RES_TYPE");
			logger.info("genericMasterList---------->>>>>>>>"+genericMasterList.size());
			session.setAttribute("genericMasterList", genericMasterList);
			 }
			session.setAttribute("reschId",reschId);
			return mapping.findForward("showAdditionalDisbDataAuthor");
		}
}