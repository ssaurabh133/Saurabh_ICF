/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringEscapeUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;


import com.cm.dao.CreditManagementDAO;
import com.cm.dao.DisbursalInitiationDAO;
import com.cm.dao.LoanInitiationDAO;
//import com.cm.dao.DisbursalInitiationDAOImpl;
import com.cm.vo.PostDisbursalDocVO;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 07-04-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */

public class PostDisbursalDocSearchDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(PostDisbursalDocSearchDispatchAction.class.getName());

	
	public ActionForward searchPostDisbursalDocMaker(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{
		logger.info("Inside PostDisbursalDocSearchDispatchAction..........searchPostDisbursalDocMaker");
		
		HttpSession session = request.getSession();
		
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		if(userobj!=null){
			userId= userobj.getUserId();
		}else{
			logger.info("here in searchPostDisbursalDocMaker method of PostDisbursalDocSearchDispatchAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		PostDisbursalDocVO vo = new PostDisbursalDocVO();
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));
		vo.setCurrentPageLink(currentPageLink);
		
		String type = CommonFunction.checkNull(request.getParameter("type"));
		DisbursalInitiationDAO service=(DisbursalInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(DisbursalInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+service.getClass()); 
		DynaValidatorForm PostDisbursalDocSearchDynaValidatorForm = (DynaValidatorForm)form;
		
		vo.setUserId(userId);
		String searchStatus=null;
		searchStatus=CommonFunction.checkNull(request.getParameter("searchStatusPDD")).trim();
		String functionId=CommonFunction.checkNull((String)session.getAttribute("functionId")).trim();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,PostDisbursalDocSearchDynaValidatorForm);
		
		
		if(CommonFunction.checkNull(functionId).trim().equalsIgnoreCase("4000146"))
		{
			vo.setSearchStatusPDD(searchStatus);
			session.setAttribute("searchStatus", searchStatus);
			session.setAttribute("documentCollection", "documentCollection");
		}
		if(CommonFunction.checkNull(functionId).trim().equalsIgnoreCase("4000151"))
		{
			vo.setSearchStatusPDD("F");
			session.setAttribute("searchStatus", "F");
		}
		String result="0";
		if(CommonFunction.checkNull(functionId).trim().equalsIgnoreCase("4000151") || CommonFunction.checkNull(functionId).trim().equalsIgnoreCase("4000146"))
		{
			if(!vo.getLbxDealNo().equalsIgnoreCase("") && vo.getDocStage().equalsIgnoreCase("PRS") )
			{
				CreditProcessingDAO creditProcessing=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
				session.removeAttribute("loanHeader");
				ArrayList dealHeader = creditProcessing.getDealHeader(vo.getLbxDealNo());
				session.setAttribute("dealHeader", dealHeader);
			}
			if(!vo.getLbxLoanNoHID().equalsIgnoreCase("") && (vo.getDocStage().equalsIgnoreCase("PRD") || vo.getDocStage().equalsIgnoreCase("POD")))
			
			{
				if(CommonFunction.checkNull(searchStatus).equalsIgnoreCase("A"))
				{
					CreditManagementDAO detail=(CreditManagementDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditManagementDAO.IDENTITY);
				    logger.info("Implementation class: "+detail.getClass());
					result=detail.documentForwardOrNotAtDocumentCollection(vo.getLbxLoanNoHID(), vo.getDocStage());
				}
				session.removeAttribute("dealHeader");
				LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
				ArrayList loanHeader = dao.getLoanHeader(vo.getLbxLoanNoHID());
				session.setAttribute("loanHeader", loanHeader);
			}
		}	
		
		if(!CommonFunction.checkNull(result).equalsIgnoreCase("0"))
		{
			request.setAttribute("postDisbursalDocMakerSearch","postDisbursalDocMakerSearch");
			request.setAttribute("dataExist","dataExist");
		}
		else
		{
		ArrayList<PostDisbursalDocVO> postDisbursalSearchList = service.searchPostDisbursalDocs(vo,type);
		if(postDisbursalSearchList!=null && postDisbursalSearchList.size()==0)
		{
			request.setAttribute("message","N");
			if(type.equalsIgnoreCase("P"))
			{
				request.setAttribute("postDisbursalDocMakerSearch","postDisbursalDocMakerSearch");
			}
			
			else if(type.equalsIgnoreCase("F"))
			{
				request.setAttribute("postDisbursalDocAuthorSearch","postDisbursalDocAuthorSearch");
			}
		}
		else
		{
			if(type.equalsIgnoreCase("P"))
			{
				if(!vo.getLbxDealNo().equalsIgnoreCase(""))
				{
					request.setAttribute("deal","deal");
					
				}
				if(!vo.getLbxLoanNoHID().equalsIgnoreCase("") && (vo.getDocStage().equalsIgnoreCase("PRD") || vo.getDocStage().equalsIgnoreCase("POD")))
				{
					request.setAttribute("loan","loan");
				}
				if(!vo.getLbxLoanNoHID().equalsIgnoreCase("") && vo.getDocStage().equalsIgnoreCase("PRS") )
				{
					request.setAttribute("deal","deal");
				}
				request.setAttribute("postDisbursalDocMakerSearch","postDisbursalDocMakerSearch");
				request.setAttribute("postDisbursalSearchList",postDisbursalSearchList);
			}
			
			else if(type.equalsIgnoreCase("F"))
			{
				if(!vo.getLbxDealNo().equalsIgnoreCase(""))
				{
					request.setAttribute("deal","deal");
				}
				if(!vo.getLbxLoanNoHID().equalsIgnoreCase(""))
				{
					request.setAttribute("loan","loan");
				}
				if(!vo.getLbxLoanNoHID().equalsIgnoreCase("") && vo.getDocStage().equalsIgnoreCase("PRS") )
				{
					request.setAttribute("deal","deal");
				}
				request.setAttribute("postDisbursalDocAuthorSearch","postDisbursalDocAuthorSearch");
				request.setAttribute("postDisbursalSearchList",postDisbursalSearchList);
			}
		}
		}
		ArrayList<PostDisbursalDocVO> docStage = service.getDocumentStage();
		request.setAttribute("docStage",docStage);
		vo=null;
		service=null;
		return mapping.findForward("search");
	}
	
	public ActionForward openPostDisbursalDocMaker(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		logger.info("Inside PostDisbursalDocSearchDispatchAction..........openNewPostDisbursalDoc");
		
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in openPostDisbursalDocMaker method of PostDisbursalDocSearchDispatchAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		DisbursalInitiationDAO service=(DisbursalInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(DisbursalInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+service.getClass()); 
		
		session.removeAttribute("viewDeal");
		session.removeAttribute("txnType");
		session.removeAttribute("id");
		session.removeAttribute("stage");
		session.removeAttribute("viewDeal");
		session.removeAttribute("recStatus");
		String loanId = CommonFunction.checkNull(request.getParameter("loanId"));
		String dealId = CommonFunction.checkNull(request.getParameter("dealId"));
		String id = "";
		String txnType="";
		String stage = CommonFunction.checkNull(request.getParameter("stage"));
		if(!loanId.equalsIgnoreCase(""))
		{
			id=loanId;
			txnType="LIM";
		}
		if(!dealId.equalsIgnoreCase(""))
		{
			id=dealId;
			txnType="DC";
		}
//		String type = CommonFunction.checkNull(request.getParameter("type"));
		logger.info("In openNewPostDisbursalDoc id: "+id);
//		if(service.checkDoumentProcCallFeasibility(loanId))
//		{
	    String functionId=CommonFunction.checkNull((String)session.getAttribute("functionId")).trim();
	    if(CommonFunction.checkNull(functionId).trim().equalsIgnoreCase("7000114")||CommonFunction.checkNull(functionId).trim().equalsIgnoreCase("8000219"))
	    {
	    logger.info("document for contact recording");	
	    }
	    else
	    {
		service.collectDocuments(txnType,id,stage);
	    }
//		}
		session.setAttribute("txnType",txnType);
		session.setAttribute("id",id);
		session.setAttribute("stage",stage);
		session.setAttribute("recStatus","A");
		return mapping.findForward("openDocMaker");
	}
	
	public ActionForward openPostDisbursalDocAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		logger.info("Inside PostDisbursalDocSearchDispatchAction..........openPostDisbursalDocAuthor");
		
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in openPostDisbursalDocAuthor method of PostDisbursalDocSearchDispatchAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		session.removeAttribute("txnType");
		session.removeAttribute("id");
		session.removeAttribute("stage");
		session.removeAttribute("recStatus");
		session.removeAttribute("viewDeal");
		
		String loanId = CommonFunction.checkNull(request.getParameter("loanId"));
		String dealId = CommonFunction.checkNull(request.getParameter("dealId"));
		String id = "";
		String txnType="";
		String stage = CommonFunction.checkNull(request.getParameter("stage"));
		if(!loanId.equalsIgnoreCase(""))
		{
			id=loanId;
			txnType="LIM";
		}
		if(!dealId.equalsIgnoreCase(""))
		{
			id=dealId;
			txnType="DC";
		}
		logger.info("In openPostDisbursalDocAuthor id: " +id);
		session.setAttribute("txnType",txnType);
		session.setAttribute("id",id);
		session.setAttribute("stage",stage);
		session.setAttribute("viewDeal","viewDeal");
		session.setAttribute("recStatus","F");
		return mapping.findForward("openDocAuthor");
	}
}