/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.cm.dao.AdditionalDisbursalDAO;
import com.cm.vo.AdditionalDisbursalProcessVO;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 02-29-2012
 * 
 * XDoclet definition:
 * @struts.action parameter="method" validate="true"
 */
public class AddDisbursalMakerProcessAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	private static final Logger logger = Logger.getLogger(AddDisbursalMakerProcessAction.class.getName());
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward saveAddDisbursalMaker(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		
		
		
	
		DynaValidatorForm AddDisbMakerAuthorDynaValidatorForm = (DynaValidatorForm)form;
		AdditionalDisbursalProcessVO vo = new AdditionalDisbursalProcessVO();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,AddDisbMakerAuthorDynaValidatorForm);
		logger.info("Inside ........searchAdditionalDisbursalAuthor");
		
		HttpSession session = request.getSession();
		
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String makerId="";
		String makerDate ="";
		if(userobj!=null){
			makerId= userobj.getUserId();
			makerDate=userobj.getBusinessdate();
		}else{
			logger.info("here in savePartPrePaymentMaker method of PartPrePaymentMakerDispatchAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		  
			vo.setMakerId(makerId);
			vo.setMakerDate(makerDate);		
			//CreditManagementDAO service = new CreditManagementDAOImpl();	
			//change by sachin
			 AdditionalDisbursalDAO service=(AdditionalDisbursalDAO)DaoImplInstanceFactory.getDaoImplInstance(AdditionalDisbursalDAO.IDENTITY);
		    logger.info("Implementation class: "+service.getClass());

			//end by sachin
			
//			AdditionalDisbursalDAO service=new AdditionalDisbursalDAOImpl();
//			if(vo.getPartPaymentParameter().equalsIgnoreCase("T"))
//				vo.setLbxInstlNo("0");
			String reschId=service.saveAddDisbursalData(vo);
			if(CommonFunction.isParsableToInt(reschId))
			{
				ArrayList addDisbursalData = service.selectAdditionDisbursalData(vo.getLbxLoanNoHID(),reschId,"P");
				request.setAttribute("addDisbursalData", addDisbursalData);
				request.setAttribute("reschId",reschId);
				request.setAttribute("message","S");
			}
			else
			{
				request.setAttribute("message","E");
				request.setAttribute("msg",reschId);
				if(CommonFunction.checkNull(reschId).equalsIgnoreCase("ADDITIONAL DISBURSAL SHOULD BE LESS THAN DEAL SANCTION AMOUNT")){
					reschId = "0";
					ArrayList addDisbursalData = service.selectAdditionDisbursalData(vo.getLbxLoanNoHID(),reschId,"P");
					request.setAttribute("newDisbMaker", addDisbursalData);
					reschId = "ADDITIONAL DISBURSAL SHOULD BE LESS THAN DEAL SANCTION AMOUNT";
					request.setAttribute("msg",reschId);
				}
			}
            
		return mapping.getInputForward();
	}
	public ActionForward deleteAddDisbursalMaker(ActionMapping mapping, ActionForm form,HttpServletRequest request, HttpServletResponse response)throws Exception 
	{	
		logger.info("Inside ........deleteAddDisbursalMaker()");
HttpSession session = request.getSession();
		
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String makerId="";
		String makerDate ="";
		if(userobj!=null){
			makerId= userobj.getUserId();
			makerDate=userobj.getBusinessdate();
		}else{
			logger.info("here in savePartPrePaymentMaker method of PartPrePaymentMakerDispatchAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		DynaValidatorForm AddDisbMakerAuthorDynaValidatorForm = (DynaValidatorForm)form;
		AdditionalDisbursalProcessVO vo = new AdditionalDisbursalProcessVO();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,AddDisbMakerAuthorDynaValidatorForm);
		String loanId=CommonFunction.checkNull(vo.getLbxLoanNoHID());
		String reschId=CommonFunction.checkNull(vo.getReschId());
		logger.info("in deleteAddDisbursalMaker() loanId  :  "+loanId);
		logger.info("in deleteAddDisbursalMaker() reschId  :  "+reschId);
		//change by sachin
		 AdditionalDisbursalDAO service=(AdditionalDisbursalDAO)DaoImplInstanceFactory.getDaoImplInstance(AdditionalDisbursalDAO.IDENTITY);
	    logger.info("Implementation class: "+service.getClass());

		//end by sachin
		
//		AdditionalDisbursalDAO service=new AdditionalDisbursalDAOImpl();
		ArrayList addDisbursalData=new ArrayList();
		//ArrayList addDisbursalData = service.selectAdditionDisbursalData(vo.getLbxLoanNoHID(),reschId,"P");
		request.setAttribute("addDisbursalData", addDisbursalData);
		boolean status=false;	
		if(loanId.trim().length()!=0 && reschId.trim().length()!=0)	
		status=service.deleteAdditionalDisbursalData(loanId,reschId);
		if(status)
			request.setAttribute("delete","delete");
		else
			request.setAttribute("notDelete","notDelete");
		
		return mapping.getInputForward();
	}
	
	public ActionForward forwardAddDisbursalData(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		DynaValidatorForm AddDisbMakerAuthorDynaValidatorForm = (DynaValidatorForm)form;
		AdditionalDisbursalProcessVO vo = new AdditionalDisbursalProcessVO();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,AddDisbMakerAuthorDynaValidatorForm);
		logger.info("Inside ........forwardAddDisbursalData");
		
		HttpSession session = request.getSession();
		
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String makerId="";
		String makerDate ="";
		if(userobj!=null){
			makerId= userobj.getUserId();
			makerDate=userobj.getBusinessdate();
		}else{
			logger.info("here in savePartPrePaymentMaker method of PartPrePaymentMakerDispatchAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		  
			vo.setMakerId(makerId);
			vo.setMakerDate(makerDate);		
			//CreditManagementDAO service = new CreditManagementDAOImpl();	
			//change by sachin
			 AdditionalDisbursalDAO service=(AdditionalDisbursalDAO)DaoImplInstanceFactory.getDaoImplInstance(AdditionalDisbursalDAO.IDENTITY);
		    logger.info("Implementation class: "+service.getClass());

			//end by sachin
			
//			AdditionalDisbursalDAO service=new AdditionalDisbursalDAOImpl();
//			if(vo.getPartPaymentParameter().equalsIgnoreCase("T"))
//				vo.setLbxInstlNo("0");
			String status=service.forwardAddDisbursalData(vo);
		  	if(CommonFunction.checkNull(status).equalsIgnoreCase("S"))
			{
				ArrayList addDisbursalData = service.selectAdditionDisbursalData(vo.getLbxLoanNoHID(),vo.getReschId(),"P");
				request.setAttribute("addDisbursalData", addDisbursalData);
				//request.setAttribute("reschId",reschId);
				request.setAttribute("fwdStatus","S");
			}
			else
			{
				ArrayList addDisbursalData = service.selectAdditionDisbursalData(vo.getLbxLoanNoHID(),vo.getReschId(),"P");
				request.setAttribute("addDisbursalData", addDisbursalData);
				request.setAttribute("fwdStatus","E");
				//request.setAttribute("msg",reschId);
			}
            
		return mapping.getInputForward();
	}
	
}