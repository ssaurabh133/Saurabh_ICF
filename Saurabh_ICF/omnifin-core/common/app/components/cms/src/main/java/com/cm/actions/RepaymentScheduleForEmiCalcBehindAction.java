/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.connect.ConnectionDAO;
import com.cp.dao.CreditProcessingDAO;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.connect.DaoImplInstanceFactory;


/** 
 * MyEclipse Struts
 * Creation date: 05-20-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class RepaymentScheduleForEmiCalcBehindAction extends Action {
	private static final Logger logger = Logger.getLogger(RepaymentScheduleForEmiCalcBehindAction.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception 
	{
		HttpSession session = request.getSession();
		//boolean flag=false;

		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bgDate="";
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			bgDate=userobj.getBusinessdate();  
		}else{
			logger.info(" in execute method of RepaymentScheduleForEmiCalcBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String dealId = "";
		if (session.getAttribute("dealId") != null) 
		{
			dealId = session.getAttribute("dealId").toString();
		} 
		logger.info("In RepaymentScheduleForEmiCalcBehindAction(execute) dealId: " + dealId);
		//String loanId = "";
			
		if(dealId.equalsIgnoreCase(""))
		{
			 request.setAttribute("back", "back");
			 return mapping.findForward("backSuccess");
		}
		
		if((dealId!=null && !dealId.equalsIgnoreCase("")))
		{
			
			String repayQ="select DEAL_REPAYMENT_TYPE from cr_deal_loan_dtl_emi_calc where DEAL_ID="+dealId;
		    logger.info("Repayment In deal Query: "+repayQ);
		    String repayType=ConnectionDAO.singleReturn(repayQ);
			logger.info("Repayment Type:"+repayType);			
			if(repayType!=null && repayType.equalsIgnoreCase("I"))
			{
		     	//CreditProcessingDAO detail1 = new CreditProcessingDAOImpl();
				CreditProcessingDAO detail1=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
                logger.info("Implementation class: "+detail1.getClass()); 		//changed by anil
		     		String resultproc=	detail1.generateRepyScheduleForEmiCalc(dealId,userId);
					logger.info("generateRepyScheduleInDeal procedure status: "+resultproc);
					if(!resultproc.equalsIgnoreCase("Noresult"))
					{
						request.setAttribute("resultproc", resultproc);
					}
					ArrayList fromloanDtl=detail1.getFromLoanDtlForEmiCalc(dealId);
					ArrayList repShedule=detail1.getRepaySchedForEmiCalc(dealId);
					request.setAttribute("fromloanDtl", fromloanDtl);
					logger.info("fromloanDtl:   "+fromloanDtl.size());
					request.setAttribute("repShedule", repShedule);
					logger.info("repShedule:----------------------------------->"+repShedule.size());
					request.setAttribute("dealId", "dealId");
			
		    session.setAttribute("repaymentCheck","Y");
			return mapping.findForward("success");
			
			}
			else
			{
				request.setAttribute("nonProduct", "nonProduct");
				return mapping.findForward("backNonProductInDeal");
			}
		}
		else
		{
			 request.setAttribute("back", "back");
			 return mapping.findForward("backDealSuccess");
		}
	}
}