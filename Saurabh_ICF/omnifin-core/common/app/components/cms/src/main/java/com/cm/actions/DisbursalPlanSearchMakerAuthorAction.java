/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;
import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.cm.dao.LoanInitiationDAO;
import com.cm.vo.CommonLoanVo;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 10-10-2012
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class DisbursalPlanSearchMakerAuthorAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	private static final Logger logger = Logger.getLogger(DisbursalPlanSearchMakerAuthorAction.class.getName());
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward disbursalPlanSearchMaker(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {

		HttpSession session =  request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String userId="";
		String branchId="";
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			branchId=userobj.getBranchId();
		}else{
			logger.info("here in disbursalPlanSearchMaker method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		DynaValidatorForm CreditListDynaValidatorForm = (DynaValidatorForm) form;// TODO Auto-generated method stub
		logger.info("In CreditListDynaValidatorForm, disbursalPlanSearchMaker");
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		CommonLoanVo vo = new CommonLoanVo();
		String stage = "F";
		
		logger.info("stage: " +stage);
		logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
		
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));
		
		vo.setCurrentPageLink(currentPageLink);
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, CreditListDynaValidatorForm);
		if(CommonFunction.checkNull(vo.getReportingToUserId()).equalsIgnoreCase(""))
		{ 
			vo.setReportingToUserId(userId);
		   //logger.info("When user id is not selected by the user:::::"+userId);
		}
		logger.info("user Id:::::"+vo.getReportingToUserId());
		vo.setStage(stage);
		vo.setBranchId(branchId);
		vo.setUserId(userId);
		LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 
		
	    	ArrayList<Object> loandetails = dao.fetchLoanDetailForDisbursalPlanMaker(vo);
	    	request.setAttribute("list", loandetails);	
			
		session.removeAttribute("loanId");		
		return mapping.findForward("success");
	}
	public ActionForward disbursalPlanSearchAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		
		HttpSession session =  request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String userId="";
		String branchId="";
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			branchId=userobj.getBranchId();
		}else{
			logger.info("here in disbursalPlanSearchAuthor method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		DynaValidatorForm CreditListDynaValidatorForm = (DynaValidatorForm) form;// TODO Auto-generated method stub
		logger.info("In CreditListDynaValidatorForm, disbursalPlanSearchAuthor");
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		CommonLoanVo vo = new CommonLoanVo();
		String stage = "F";
		
		logger.info("stage: " +stage);
		logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
		
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));
		
		vo.setCurrentPageLink(currentPageLink);
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, CreditListDynaValidatorForm);
		if(CommonFunction.checkNull(vo.getReportingToUserId()).equalsIgnoreCase(""))
		{ 
			vo.setReportingToUserId(userId);
		   //logger.info("When user id is not selected by the user:::::"+userId);
		}
		logger.info("user Id:::::"+vo.getReportingToUserId());
		vo.setStage(stage);
		vo.setBranchId(branchId);
		vo.setUserId(userId);
		//CreditManagementDAO creditDAO = new CreditManagementDAOImpl();
		LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 
		
	    	ArrayList<Object> loandetails = dao.fetchLoanDetailForDisbursalPlanAuthor(vo);
	    	request.setAttribute("list", loandetails);	
			
	    session.removeAttribute("loanId");						
		return mapping.findForward("success");
	}
	
	public ActionForward openDisbPlanMaker(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		
		HttpSession session =  request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String userId="";
		String branchId="";
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			branchId=userobj.getBranchId();
		}else{
			logger.info("here in openDisbPlanMaker method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		//DynaValidatorForm CreditListDynaValidatorForm = (DynaValidatorForm) form;// TODO Auto-generated method stub
		//logger.info("In CreditListDynaValidatorForm, openDisbPlanMaker");
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String loanId = "";

		if (session.getAttribute("loanId") != null) {

			loanId = session.getAttribute("loanId").toString();
		} else if (request.getParameter("loanId") != null) {
			loanId = request.getParameter("loanId");
			session.setAttribute("loanId", loanId);
		}
		logger.info("loanId: "+loanId);
		//LoanInitiationDAO detail = new LoanInitiationDAOImpl();
		LoanInitiationDAO detail=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+detail.getClass()); 
		if ((loanId != null && !loanId.equalsIgnoreCase("")))
		{
			ArrayList loanDetail=detail.getLoanDetailForDisb(loanId);
			request.setAttribute("loanDetail", loanDetail);
			ArrayList noOfDisbDetail=detail.getNoOfDisbPlanMaker(loanId);
			request.setAttribute("disbList", noOfDisbDetail);	
			ArrayList loanHeader=detail.getLoanHeader(loanId);
			request.setAttribute("loanHeader", loanHeader);	
		}
					
		return mapping.findForward("openDisbPlanMaker");
	}
	
	public ActionForward openDisbPlanAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		
		HttpSession session =  request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String userId="";
		String branchId="";
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			branchId=userobj.getBranchId();
		}else{
			logger.info("here in openDisbPlanAuthor method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		//DynaValidatorForm CreditListDynaValidatorForm = (DynaValidatorForm) form;// TODO Auto-generated method stub
		//logger.info("In CreditListDynaValidatorForm, openDisbPlanMaker");
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 
		String loanId = "";

		if (session.getAttribute("loanId") != null) {

			loanId = session.getAttribute("loanId").toString();
		} else if (request.getParameter("loanId") != null) {
			loanId = request.getParameter("loanId");
			session.setAttribute("loanId", loanId);
		}
		logger.info("loanId: "+loanId);
		LoanInitiationDAO detail=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+detail.getClass()); 
		if ((loanId != null && !loanId.equalsIgnoreCase("")))
		{
		
			ArrayList noOfDisbDetail=detail.getNoOfDisbPlanMaker(loanId);
			session.setAttribute("disbList", noOfDisbDetail);	
			ArrayList loanHeader=detail.getLoanHeader(loanId);
			session.setAttribute("loanHeader", loanHeader);	
			session.setAttribute("cmAuthor", "A");
		}			
		return mapping.findForward("openDisbPlanAuthor");
	}
	
	public ActionForward openTabDisbPlanAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		
		HttpSession session =  request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String userId="";
		String branchId="";
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			branchId=userobj.getBranchId();
		}else{
			logger.info("here in openTabDisbPlanAuthor method of  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		//DynaValidatorForm CreditListDynaValidatorForm = (DynaValidatorForm) form;// TODO Auto-generated method stub
		//logger.info("In CreditListDynaValidatorForm, openDisbPlanMaker");
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 
		String loanId = "";

		if (session.getAttribute("loanId") != null) {

			loanId = session.getAttribute("loanId").toString();
		} else if (request.getParameter("loanId") != null) {
			loanId = request.getParameter("loanId");
			session.setAttribute("loanId", loanId);
		}
		logger.info("loanId: "+loanId);
		LoanInitiationDAO detail=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+detail.getClass()); 
		if ((loanId != null && !loanId.equalsIgnoreCase("")))
		{
		
			ArrayList noOfDisbDetail=detail.getNoOfDisbPlanMaker(loanId);
			request.setAttribute("disbList", noOfDisbDetail);	
			ArrayList loanHeader=detail.getLoanHeader(loanId);
			request.setAttribute("loanHeader", loanHeader);	
			request.setAttribute("cmAuthor", "A");
			
		}			
		return mapping.findForward("openTabDisbPlanAuthor");
	}
	
}