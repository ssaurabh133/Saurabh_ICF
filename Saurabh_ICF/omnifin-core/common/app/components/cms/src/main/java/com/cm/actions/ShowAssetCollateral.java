/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.CollateralVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 05-19-2011
 * 
 * XDoclet definition:
 * @struts.action parameter="method" validate="true"
 */
public class ShowAssetCollateral extends DispatchAction {
	private static final Logger logger = Logger.getLogger(ShowAssetCollateral.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward getProperty(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in getProperty method of ShowAssetCollateral action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		String dealId = "";
		String loanId="";
		 ArrayList<Object> propertyOwnerList=null;

		if (session.getAttribute("dealId") != null) {

			dealId = session.getAttribute("dealId").toString();
		} else if (session.getAttribute("maxId") != null) {
			dealId = session.getAttribute("maxId").toString();
		}
		
		if(session.getAttribute("loanId")!=null)
		{
			loanId =  session.getAttribute("loanId").toString();
		}
		else if(session.getAttribute("maxIdInCM")!=null)
		{
			loanId =  session.getAttribute("maxIdInCM").toString();
		}
		logger.info("loanIddddddddddd"+loanId);
		logger.info("dealIddddddddddd"+dealId);
		if(dealId!=null && !dealId.equalsIgnoreCase("") )
		{
			request.setAttribute("dealAsset","dealAsset");
			 
		}
		if(loanId!=null && !loanId.equalsIgnoreCase(""))
		{
					
			request.setAttribute("loanAsset","loanAsset");

		}
		if((dealId!=null && !dealId.equalsIgnoreCase("")) && (loanId!=null && !loanId.equalsIgnoreCase("")))
		{
			request.setAttribute("dealLoanAsset","dealLoanAsset");
		}

		session.removeAttribute("loanInit");
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 
		 //CreditProcessingDAO service = new CreditProcessingDAOImpl();	 		//changed by asesh
		String primaryId=request.getParameter("primaryId");
		logger.info("primaryId: "+primaryId);
		String type=request.getParameter("type");
		logger.info("type: "+type);
		//Anil
		String acType=request.getParameter("acType");
		logger.info("acType:::::::::::::: "+acType);
		ArrayList<Object> viewPropertyInCM = service.fetchCollateralDetailsAll(primaryId,type,source);
		//sachin
		ArrayList<Object> propertyStatus=service.getPropertyStatus();
		 request.setAttribute("propertyStatus",propertyStatus);
		 ArrayList<Object> propertyTitle=service.getPropertytTitle();
		 request.setAttribute("propertyTitle",propertyTitle);
		 CollateralVo ownerList =(CollateralVo)viewPropertyInCM.get(0);
		 String propertyOwner=ownerList.getPropertyOwner();
		 String propertyOwnerGcId=ownerList.getPropertyOwnerGcdId();
		 logger.info("propertyOwnerrr"+propertyOwner);
		 logger.info("propertyOwnerGcIddd"+propertyOwnerGcId);
		 if(dealId!=null && !dealId.equalsIgnoreCase(""))
		 {
		     if(propertyOwner!=null && !propertyOwner.equalsIgnoreCase(""))
		     {
		    	 ownerList.setPropertyOwner(propertyOwner);
		    	 propertyOwner="'"+propertyOwner.replace("|","','")+"'";				 
		    	 propertyOwnerList=service.getPropertyOwnerForDeal(propertyOwner,dealId);						 
			 }
		 }
		 else if(loanId!=null && !loanId.equalsIgnoreCase(""))
		 {
			 if(propertyOwnerGcId!=null && !propertyOwnerGcId.equalsIgnoreCase(""))
		     {
				 ownerList.setPropertyOwner(propertyOwnerGcId);
				 propertyOwnerGcId="'"+propertyOwnerGcId.replace("|","','")+"'";
			 	 propertyOwnerList=service.getPropertyOwnerForLoan(propertyOwnerGcId,loanId);
		     }
		 }
		 request.setAttribute("propertyOwnerList",propertyOwnerList);


		//end by sachin
		request.setAttribute("acType", acType);
    	request.setAttribute("viewPropertyInCM", viewPropertyInCM);
		
		return mapping.findForward("propertySuccess");
	}
	
	public ActionForward getMachine(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in getProperty method of ShowAssetCollateral action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		session.removeAttribute("loanInit");
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 	 
		String primaryId=request.getParameter("primaryId");
		logger.info("primaryId: "+primaryId);
		String type=request.getParameter("type");
		logger.info("type: "+type);
		String acType=request.getParameter("acType");
		logger.info("acType:::::::::::::: "+acType);
		ArrayList<Object> viewMachineInCM = service.fetchCollateralDetailsAll(primaryId,type,source);
		request.setAttribute("acType", acType);
    	request.setAttribute("viewMachineInCM", viewMachineInCM);
		
		return mapping.findForward("machineSuccess");
	}
	public ActionForward getVehicle(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in getVehicle method of ShowAssetCollateral action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		String acType=request.getParameter("acType");
		logger.info("acType: "+acType);
		if(acType != null)
		{	if(acType.trim().equalsIgnoreCase("ASSET"))
			{
				request.setAttribute("ASSET","ASSET");
				request.setAttribute("printLov","printLov");
			}
			if(acType.trim().equalsIgnoreCase("COLLATERAL"))
			{
				request.setAttribute("COLLATERAL","COLLATERAL");
				request.setAttribute("printLov","printLov");
			}
		}			
		session.removeAttribute("loanInit");
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 	 
		String primaryId=request.getParameter("primaryId");
		logger.info("primaryId: "+primaryId);
		String type=request.getParameter("type");
		logger.info("type: "+type);
		ArrayList<Object> viewVehicleInCM = service.fetchCollateralDetailsAll(primaryId,type,source);
    	request.setAttribute("viewVehicleInCM", viewVehicleInCM);
    	request.setAttribute("acType", acType);
    	
		
		return mapping.findForward("vehicleSuccess");
	}
	
	public ActionForward getOther(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in getOther method of ShowAssetCollateral action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		session.removeAttribute("loanInit");
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 	 
		String primaryId=request.getParameter("primaryId");
		logger.info("primaryId: "+primaryId);
		String type=request.getParameter("type");
		logger.info("type: "+type);
		String acType=request.getParameter("acType");
		logger.info("acType:::::::::::::: "+acType);
		
		ArrayList<Object> viewOtherInCM = service.fetchCollateralDetailsAll(primaryId,type,source);
    	request.setAttribute("viewOtherInCM", viewOtherInCM);
    	request.setAttribute("acType", acType);
		
		return mapping.findForward("otherSuccess");
	}
	
	public ActionForward getFixedDeposit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in getFixedDeposit method of ShowAssetCollateral action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		session.removeAttribute("loanInit");
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 	 
		String primaryId=request.getParameter("primaryId");
		logger.info("primaryId: "+primaryId);
		String type=request.getParameter("type");
		logger.info("type: "+type);
		ArrayList<Object> viewFDInCM = service.fetchCollateralDetailsAll(primaryId,type,source);
    	request.setAttribute("viewFDInCM", viewFDInCM);
		
		return mapping.findForward("fdSuccess");
	}

	public ActionForward getSBLC(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in getSBLC method of ShowAssetCollateral action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		session.removeAttribute("loanInit");
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 	 
		String primaryId=request.getParameter("primaryId");
		logger.info("primaryId: "+primaryId);
		String type=request.getParameter("type");
		logger.info("type: "+type);
		ArrayList<Object> viewSBLCInCM = service.fetchCollateralDetailsAll(primaryId,type,source);
    	request.setAttribute("viewSBLCInCM", viewSBLCInCM);
		
		return mapping.findForward("sblcSuccess");
	}
	
	public ActionForward getSecurities(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in getSecurities method of ShowAssetCollateral action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		session.removeAttribute("loanInit");
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 	 
		String primaryId=request.getParameter("primaryId");
		logger.info("primaryId: "+primaryId);
		String type=request.getParameter("type");
		logger.info("type: "+type);
		ArrayList<Object> viewSecuritiesInCM = service.fetchCollateralDetailsAll(primaryId,type,source);
    	request.setAttribute("viewSecuritiesInCM", viewSecuritiesInCM);
		
		return mapping.findForward("securitiesSuccess");
	}
	public ActionForward getStock(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in getStock method of ShowAssetCollateral action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		session.removeAttribute("loanInit");
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 	 
		String primaryId=request.getParameter("primaryId");
		logger.info("primaryId: "+primaryId);
		String type=request.getParameter("type");
		logger.info("type: "+type);
		ArrayList<Object> viewStockInCM = service.fetchCollateralDetailsAll(primaryId,type,source);
    	request.setAttribute("viewStockInCM", viewStockInCM);
		
		return mapping.findForward("stockSuccess");
	}
	
	public ActionForward getDebtor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in getDebtor method of ShowAssetCollateral action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		session.removeAttribute("loanInit");
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 	 
		String primaryId=request.getParameter("primaryId");
		logger.info("primaryId: "+primaryId);
		String type=request.getParameter("type");
		logger.info("type: "+type);
		ArrayList<Object> viewDebtorInCM = service.fetchCollateralDetailsAll(primaryId,type,source);
    	request.setAttribute("viewDebtorInCM", viewDebtorInCM);
		
		return mapping.findForward("debtorSuccess");
	}
	public ActionForward getBg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in getBg method of ShowAssetCollateral action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		session.removeAttribute("loanInit");
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 	 
		String primaryId=request.getParameter("primaryId");
		logger.info("primaryId: "+primaryId);
		String type=request.getParameter("type");
		logger.info("type: "+type);
		ArrayList<Object> viewBgInCM = service.fetchCollateralDetailsAll(primaryId,type,source);
    	request.setAttribute("viewBgInCM", viewBgInCM);
    	
		return mapping.findForward("bGSuccess");
	}
	
	public ActionForward getInsurance(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in getInsurance method of ShowAssetCollateral action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
		//neeraj space end
		session.removeAttribute("loanInit");
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 	 
		String primaryId=request.getParameter("primaryId");
		logger.info("primaryId: "+primaryId);
		String type=request.getParameter("type");
		logger.info("type: "+type);
		ArrayList showInsuranceRelWithNominee = service.showInsuranceRelWithNominee();
		request.setAttribute("showInsuranceRelWithNominee",showInsuranceRelWithNominee);
		ArrayList<Object> viewInsuranceInCM = service.fetchCollateralDetailsAll(primaryId,type,source);
    	request.setAttribute("viewInsuranceInCM", viewInsuranceInCM);
		
		return mapping.findForward("insuranceSuccess");
	}

	
	

	public ActionForward getGoldOrnament(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in getInsurance method of ShowAssetCollateral action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
	
		String source="NE";
		String functionId=(String)session.getAttribute("functionId");
		int funid=Integer.parseInt(functionId);		
		if(funid==4000122 || funid==4000123)
			source="ED";
	
		session.removeAttribute("loanInit");
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 	 
		String primaryId=request.getParameter("primaryId");
		logger.info("primaryId: "+primaryId);
		String type=request.getParameter("type");
		logger.info("type: "+type);
		ArrayList<Object> viewGolOrnamentInCM = service.fetchCollateralDetailsAll(primaryId,type,source);
    	request.setAttribute("viewGolOrnamentInCM", viewGolOrnamentInCM);
		
		return mapping.findForward("goldOrnamentSuccess");
	}

	

}
