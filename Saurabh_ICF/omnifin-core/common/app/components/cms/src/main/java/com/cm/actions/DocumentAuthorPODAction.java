/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;


import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.cm.dao.CreditManagementDAO;
import com.cm.vo.PODAuthorVO;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 04-27-2011
 * 
 * XDoclet definition:
 * @struts.action parameter="method" validate="true"
 */
public class DocumentAuthorPODAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(DocumentAuthorPODAction.class.getName());
	CreditProcessingDAO dao=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	//CreditProcessingDAO dao = new CreditProcessingDAOImpl();
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward savePODAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		// TODO Auto-generated method stub
	
		 
		    HttpSession session =  request.getSession();
			boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
		     String makerID ="";
				String bDate ="";
				if(userobj!=null){
					makerID = userobj.getUserId();
					bDate=userobj.getBusinessdate();
				}else{
					logger.info("here in savePODAuthor method of DocumentAuthorPODAction action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
			DynaValidatorForm PostDisbursalDocAuthorDynaValidatorForm= (DynaValidatorForm)form;
			 logger.info("In DocumentProcessPODAction in savePODAuthor");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
	     PODAuthorVO vo = new PODAuthorVO();


	     vo.setAuthorId(makerID);
	     vo.setAuthorDate(bDate);

	
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, PostDisbursalDocAuthorDynaValidatorForm);
		
		String id = "";
		String stage = CommonFunction.checkNull(session.getAttribute("stage"));
		String txnType = CommonFunction.checkNull(session.getAttribute("txnType"));
		
		if (session.getAttribute("id") != null) 
		{
			id = session.getAttribute("id").toString();
		} 
		else if (session.getAttribute("maxIdInCM") != null) 
		{
			id = session.getAttribute("maxIdInCM").toString();
		}
		vo.setId(id);
		vo.setStage(stage);
		vo.setTxnType(txnType);
		//change by sachin
		CreditManagementDAO detail=(CreditManagementDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditManagementDAO.IDENTITY);
	     logger.info("Implementation class: "+detail.getClass());

		//end by sachin
//		CreditManagementDAO detail = new CreditManagementDAOImpl();
		String status = detail.savePODAuthor(vo);
		String message=null;
		if(CommonFunction.checkNull(status).equalsIgnoreCase("S"))
		{
			message="S";
		}
		else
		{
			message="E";
		}
		request.setAttribute("message", message);
        logger.info("status: "+status);
		return mapping.findForward("savePODAuthor");
	}
}