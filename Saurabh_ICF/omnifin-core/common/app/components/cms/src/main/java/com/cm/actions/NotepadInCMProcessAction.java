/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.cm.dao.LoanInitiationDAO;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.CreditProcessingNotepadVo;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 12-26-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class NotepadInCMProcessAction extends DispatchAction {
	/*
	 * Generated Methods
	 */
	private static final Logger logger = Logger.getLogger(NotepadInCMProcessAction.class.getName());
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward saveNotepadDataInCM(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {


		logger.info("In NotepadInCMProcessAction(execute)");
		HttpSession session = request.getSession();
		boolean flag=false;
		String userId="";
		String bDate="";
		String loanId="";
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj!=null)
		{
			userId = userobj.getUserId();
			bDate=userobj.getBusinessdate();
		}else{
			logger.info("here in saveNotepadDataInCM method of  NotepadInCMProcessAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		DynaValidatorForm CreditProcessingNotepadDynaValidatorActionForm = (DynaValidatorForm) form;


		if(session.getAttribute("loanId")!=null && !CommonFunction.checkNull(session.getAttribute("loanId")).equalsIgnoreCase(""))
		{
			loanId=	session.getAttribute("loanId").toString();
		}
		logger.info("loanId: " +loanId);
		CreditProcessingNotepadVo cr = new CreditProcessingNotepadVo();
		cr.setUserId("" + userId);
		cr.setMakerDate(bDate);
		org.apache.commons.beanutils.BeanUtils.copyProperties(cr,
				CreditProcessingNotepadDynaValidatorActionForm);
	//	cr.setDealId(dealId);
		cr.setLoanId(loanId);
		CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
        logger.info("Implementation class: "+service.getClass()); 
		//CreditProcessingDAO service = new CreditProcessingDAOImpl();
		LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 
		boolean status = service.saveNotepadData(cr);
		if(status){
			request.setAttribute("sms",'S');
		}else{
			request.setAttribute("sms",'E');
		}
		//if (loanId != null && !loanId.equalsIgnoreCase("")) {
			ArrayList list = service.getNotepadData(loanId,"LIM");
			//ArrayList listInloan = service.getNotepadDataInLoanInit(loanId,"DC");
			//request.setAttribute("listInloan", listInloan);
			request.setAttribute("list", list);
			ArrayList leadList = service.getLeadNotepadData(loanId,"LT");
			request.setAttribute("leadList", leadList);
			ArrayList loanHeader = dao.getLoanHeader(loanId);
			request.setAttribute("loanHeader", loanHeader);
			ArrayList noteCode = service.getNoteCode();
			request.setAttribute("noteCode", noteCode);
		//} 
		return mapping.findForward("success");
	}
}