/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.cm.dao.LoanInitiationDAO;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.ApplicantTypeVO;
import com.gcd.dao.CorporateDAO;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 10-20-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class ShowCustomerDetailBehindAction extends Action {
	/*
	 * Generated Methods
	 */
	private static final Logger logger = Logger.getLogger(ShowCustomerDetailBehindAction.class.getName());
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {

		logger.info("In ShowCustomerDetailBehindAction(execute)");
		HttpSession session = request.getSession();
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in execute method of ShowCustomerDetailBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag=null;	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj
		String functionId=(String)session.getAttribute("functionId");
		int id=Integer.parseInt(functionId);
		String table="cr_loan_customer_role";
		String source="NE";
		if(id==4000122 ||id==4000123)
		{
			source="ED";
			table="cr_loan_customer_role_edit";
		}
		if(id==4000122)
		{
			session.removeAttribute("cmAuthor");
			session.removeAttribute("viewLoan");
		}
		//neeraj space end
		
		String loanId = null;
		 
		if(session.getAttribute("loanId")!=null)
		{
			loanId=session.getAttribute("loanId").toString();
		}
		else if(session.getAttribute("maxIdInCM")!=null)
		{
			loanId=session.getAttribute("maxIdInCM").toString();
		}
		
		logger.info("In ShowCustomerDetailBehindAction loan id: " +loanId);

		if (loanId != null && !loanId.equalsIgnoreCase("")) {
			
			CorporateDAO dao=(CorporateDAO)DaoImplInstanceFactory.getDaoImplInstance(CorporateDAO.IDENTITY);
			logger.info("Implementation class: "+dao.getClass());
			String newLoanCustomer="";
			if(id==4000122 ||id==4000123)
				newLoanCustomer="Y";
			else
			{		
				String newLoanCustomerQ="select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY='NEW_LOAN_CUSTOMER'";
			//	logger.info("newLoanCustomerQ: "+newLoanCustomerQ);
				newLoanCustomer=ConnectionDAO.singleReturn(newLoanCustomerQ);
			//	logger.info("newLoanCustomer: "+newLoanCustomer);
			}
			String checkQ="select count(*) from "+table+" where LOAN_ID='"+loanId+"' ";
			logger.info(" at cr_loan_customer_role Query: "+checkQ);
			    String count=ConnectionDAO.singleReturn(checkQ);
			   logger.info("cr_loan_customer_role count: "+count);
			  if(CommonFunction.checkNull(count).equalsIgnoreCase("0"))
			   {
				 dao.saveCustomerFromDeal(loanId,source); 
			   }
			
			if(session.getAttribute("cmAuthor")!=null && !CommonFunction.checkNull(session.getAttribute("cmAuthor")).equalsIgnoreCase(""))
			{
				//LoanInitiationDAO serv = new LoanInitiationDAOImpl();
				LoanInitiationDAO serv=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
				logger.info("Implementation class: "+serv.getClass()); 
				ArrayList<Object> custDetail = serv.getCustomerInCMList(loanId,source);
				request.setAttribute("custDetail", custDetail);
				return mapping.findForward("success");
			}
			else{
			
				if(CommonFunction.checkNull(newLoanCustomer).equalsIgnoreCase("N"))
				{
					LoanInitiationDAO serv=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
					logger.info("Implementation class: "+serv.getClass());
					ArrayList<Object> custDetail = serv.getCustomerInCMList(loanId,source);
					request.setAttribute("custDetail", custDetail);
					return mapping.findForward("success");
				}
				else
				{
					String paramQ="select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY='APPLICANT_CATEGORY_INDIVIDUAL'";
					logger.info("paramQ: "+paramQ);
					String optionIndv=ConnectionDAO.singleReturn(paramQ);
					logger.info("optionIndv: "+optionIndv);
					request.setAttribute("optionIndv", optionIndv);
					CreditProcessingDAO detail=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
			        logger.info("Implementation class: "+detail.getClass()); 		//changed by asesh
					//CreditProcessingDAO detail = new CreditProcessingDAOImpl();
					LoanInitiationDAO serv=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
					logger.info("Implementation class: "+serv.getClass());
					session.removeAttribute("update");
					session.removeAttribute("approve");
					ArrayList<ApplicantTypeVO> applist = detail.getCustRoleAtCMList();
					ArrayList<Object> roleList = dao.getCustomerRoleList(loanId,source);
					ArrayList loanHeader = serv.getLoanHeader(loanId);
					session.setAttribute("loanHeader", loanHeader);
					session.setAttribute("applist", applist);
					request.setAttribute("roleList", roleList);
					return mapping.findForward("newCustomerSuccess");
				}
			}
		} else {
			request.setAttribute("back", "B");
			return mapping.findForward("backSuccess");
		}

	}
	
}
