/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.cm.dao.KnockOffDAO;
import com.cm.vo.KnockOffAuthorVO;
import com.cm.vo.KnockOffMakerVO;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.logger.LoggerMsg;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 06-09-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class KnockOffAuthorDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(KnockOffAuthorDispatchAction.class.getName());

	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	
	public ActionForward openKnockOffAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{
		LoggerMsg.info("Inside KnockOffAuthorDispatchAction........openKnockOffAuthor");
		
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("in  openKnockOffAuthor method of KnockOffAuthorDispatchAction  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		
		return mapping.findForward("openKnockOffAuthor");
	}
	
	
	public ActionForward saveKnockOffAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception {
		logger.info("Inside KnockOffAuthorDispatchAction......saveKnockOffAuthor");
		
		HttpSession session =  request.getSession();
		
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String authorId ="";
		String authorDate ="";
		int compid =0;
		if(userobj!=null){
			authorId = userobj.getUserId();
			authorDate=userobj.getBusinessdate();
				compid=userobj.getCompanyId();
		}else{
			logger.info("in saveKnockOffAuthor method of  KnockOffAuthorDispatchAction  action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String status="";

		
	    
	    DynaValidatorForm KnockOffAuthorDynaValidatorForm = (DynaValidatorForm)form;
		KnockOffAuthorVO vo = new KnockOffAuthorVO();
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo,KnockOffAuthorDynaValidatorForm);
		vo.setAuthorId(authorId);
		vo.setAuthorDate(authorDate);	
		vo.setCompanyId(compid);
		String loanId = CommonFunction.checkNull(session.getAttribute("loanId").toString());
		int knockOffId = Integer.parseInt(CommonFunction.checkNull(session.getAttribute("knockOffId").toString()));
		vo.setKnockOffId(knockOffId);
		logger.info("loanId: "+loanId);
		logger.info("knockOffId: "+knockOffId);
		//KnockOffDAO service = new KnockOffDAOImpl();
		KnockOffDAO service=(KnockOffDAO)DaoImplInstanceFactory.getDaoImplInstance(KnockOffDAO.IDENTITY);
		logger.info("Implementation class: "+service.getClass()); 
		status = service.saveKnockOffAuthor(vo);
		if(status.equalsIgnoreCase("S"))
		{
			request.setAttribute("message","S");
			session.removeAttribute("loanRecStatus");
			
		}
		else
		{
			request.setAttribute("message","E");
			request.setAttribute("status",status);
		}
		return mapping.findForward("saveKnockOffAuthorData");
	}
	
	public ActionForward openKnockOffValuesAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws Exception{
		logger.info("Inside KnockOffAuthorDispatchAction........openKnockOffValuesAuthor");
		
		HttpSession session =  request.getSession();
		
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("in openKnockOffValuesAuthor method  of  KnockOffAuthorDispatchAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

//		String loanId = CommonFunction.checkNull(session.getAttribute("loanId"));
		String knockOffId = CommonFunction.checkNull(session.getAttribute("knockOffId"));
		KnockOffDAO service=(KnockOffDAO)DaoImplInstanceFactory.getDaoImplInstance(KnockOffDAO.IDENTITY);
		logger.info("Implementation class: "+service.getClass()); 
		
		//ArrayList<Object> showdetails = service.getBusinessPartnerTypeList();
		//session.setAttribute("showdetails", showdetails);
		
		ArrayList<KnockOffMakerVO> knockOffSearchList = service.getKnockOffData(knockOffId,"F");
	    session.setAttribute("knockOffSearchList", knockOffSearchList);
	    
	    ArrayList<Object> loanDataListR = service.getKnockOffDetailsDataMaker(knockOffId,"R","F");
	    logger.info("Sucessfully Fetched............"+loanDataListR.size());
	    session.setAttribute("loanDataListR", loanDataListR);
	    
	    ArrayList<Object> loanDataListP = service.getKnockOffDetailsDataMaker(knockOffId,"P","F"); 	    		
	    logger.info("Sucessfully Fetched............"+loanDataListP.size());
	    session.setAttribute("loanDataListP", loanDataListP);
	    
	    ArrayList<Object> totalR = service.getTotalReceivableR(knockOffId,"F");
	    ArrayList<Object> totalP = service.getTotalReceivableP(knockOffId,"F");
	    session.setAttribute("totalR", totalR);
	    session.setAttribute("totalP", totalP);
	    
	    session.setAttribute("knockOffAuthorValues", "knockOffAuthorValues");
	    
		return mapping.findForward("showKnockOffDataAuthor");
	}
}