/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.cm.dao.LoanInitiationDAO;
import com.cm.vo.CommonLoanVo;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.cm.vo.InstallmentPlanForCMVO;
import com.connect.ConnectionDAO;
import com.cp.vo.RepayScheduleVo;
import com.logger.LoggerMsg;

import com.tabDependencyCheck.RefreshFlagValueInsert;
import com.tabDependencyCheck.RefreshFlagVo;
import com.cm.vo.LoanDetailForCMVO;


/** 
 * MyEclipse Struts
 * Creation date: 03-16-2011
 * 
 * XDoclet definition:
 * @struts.action input="/JSP/CMJSP/CreditList.jsp" validate="true"
 */
public class RepaymentServiceActionDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(RepaymentServiceActionDispatchAction.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	 public ActionForward openSearchPageForRepaymentService(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)throws Exception {
			
			
			
			HttpSession session =  request.getSession();
			//boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			
			String userId=null;
			String branchId=null;
			if(userobj!=null)
			{
				userId=userobj.getUserId();
				branchId=userobj.getBranchId();
			}else{
				logger.info("here in openSearchPageForRepaymentService method of RepaymentServiceActionDispatchAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			DynaValidatorForm CreditListDynaValidatorForm = (DynaValidatorForm) form;// TODO Auto-generated method stub
			logger.info("In CreditListDynaValidatorForm, searchLoanDetail");
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!"".equalsIgnoreCase(strFlag))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}

			session.setAttribute("userIdLoan", userId);
			session.setAttribute("branchIdLoan", branchId);
			String functionId=(String)session.getAttribute("functionId");
			int funid=Integer.parseInt(functionId);
			if(funid==10000816)
			{
				session.removeAttribute("RSPAuthor");
				session.setAttribute("RSPMaker", "RSPMaker");
			}
			else if(funid==10000817)
			{
				session.setAttribute("RSPAuthor", "RSPAuthor");
				session.removeAttribute("RSPMaker");
			}
					
		     return mapping.findForward("openSearchPage");
		

	}
	
	 public ActionForward searchLinkForRepaymentService(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		
		
		HttpSession session =  request.getSession();
		//boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		
		String userId=null;
		String branchId=null;
		String businessDate=null;
		if(userobj!=null)
		{
			userId=userobj.getUserId();
			branchId=userobj.getBranchId();
			businessDate=userobj.getBusinessdate(); 
		}else{
			logger.info("here in searchLinkForRepaymentService method of RepaymentServiceActionDispatchAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		DynaValidatorForm CreditListDynaValidatorForm = (DynaValidatorForm) form;// TODO Auto-generated method stub
		logger.info("In CreditListDynaValidatorForm, searchLoanDetail");
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!"".equalsIgnoreCase(strFlag))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		CommonLoanVo vo = new CommonLoanVo();
		
		//logger.info("stage: " +stage);
		//logger.info("current page link .......... "+request.getParameter("d-49520-p"));
		
		int currentPageLink = 0;
		if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
		{
			currentPageLink=1;
		}
		else
		{
			currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
		}
		
		logger.info("current page link ................ "+request.getParameter("d-49520-p"));
		
		vo.setCurrentPageLink(currentPageLink);
		org.apache.commons.beanutils.BeanUtils.copyProperties(vo, CreditListDynaValidatorForm);
		if(CommonFunction.checkNull(vo.getReportingToUserId()).equalsIgnoreCase(""))
		{ 
			vo.setReportingToUserId(userId);
		}
		logger.info("user Id:::::"+vo.getReportingToUserId());
		vo.setBranchId(branchId);
		vo.setUserId(userId);
		vo.setbDate(businessDate);
		String RSPMaker="";
		LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+dao.getClass()); 
		if(session.getAttribute("RSPMaker")!=null){
			RSPMaker = session.getAttribute("RSPMaker").toString();
		}
			
		ArrayList<Object> loandetails=null;	
		if(CommonFunction.checkNull(RSPMaker).equalsIgnoreCase("RSPMaker"))
		{
		 loandetails = dao.fetchLoanDetailForRepaymentService(vo,request);
		}
		else{
		 loandetails = dao.fetchLoanDetailForRepaymentServiceForAuthor(vo,request);
		}
		request.setAttribute("list", loandetails);	
		session.setAttribute("userIdLoan", userId);
		session.setAttribute("branchIdLoan", branchId);
				

			vo=null;
			dao=null;
			strFlag=null;
			form.reset(mapping, request);
			return mapping.findForward("RepaymentService");
	

}
	 
	 public ActionForward repaymentServiceMainPage(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)throws Exception {
		
			logger.info("In repaymentServiceMainPage  ");
			
			HttpSession session = request.getSession();
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			if(userobj==null){
				logger.info("here in execute method  repaymentServiceMainPage  the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag=null;	
			
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			
			
			LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
			logger.info("Implementation class: "+dao.getClass()); 
			
			String loanId = "";
			String customerRSPId="";
			String forwardString="";
			

			if(!CommonFunction.checkNull(request.getParameter("customerRSPId")).equalsIgnoreCase("")){
				session.removeAttribute("customerRSPId");
				customerRSPId = request.getParameter("customerRSPId");
				session.setAttribute("customerRSPId",customerRSPId);
				
			}
			else if(session.getAttribute("customerRSPId")!=null){
				customerRSPId = session.getAttribute("customerRSPId").toString();
				
			}
			
	
					
			if(!CommonFunction.checkNull(request.getParameter("loanId")).equalsIgnoreCase("")){
				session.removeAttribute("loanId");
				loanId = request.getParameter("loanId");
				session.setAttribute("loanId",loanId);
				
			}
			else if(session.getAttribute("loanId")!=null){

				loanId = session.getAttribute("loanId").toString();
				
			}
				
					
			if ((loanId != null && !loanId.equalsIgnoreCase("")))
			{	
				ArrayList loanHeader = dao.getLoanHeader(loanId);
				session.setAttribute("loanHeader", loanHeader);
				
				String repayQ="select LOAN_REPAYMENT_TYPE from cr_loan_dtl where LOAN_ID="+loanId;
			    logger.info("Repayment Query: "+repayQ);
			    String repayType=ConnectionDAO.singleReturn(repayQ);
				logger.info("Repayment Type:"+repayType);
				
				if(repayType!=null && repayType.equalsIgnoreCase("I"))
				{

					ArrayList installmentList=dao.getRspInstallType(loanId,customerRSPId);
					logger.info("installmentList    Size:---"+installmentList.size());
					if(installmentList!=null && installmentList.size()>0)
					{  
					   InstallmentPlanForCMVO vo=(InstallmentPlanForCMVO)installmentList.get(0);
					   
						String loanAmount=CommonFunction.checkNull(vo.getLoanAmount());
						String installmentAMnt=CommonFunction.checkNull(vo.getInstalAm());
						String rateType=CommonFunction.checkNull(vo.getRateType());
						String installmentType=CommonFunction.checkNull(vo.getInstallmentType());
						
						String totalInstallment=CommonFunction.checkNull(vo.getTotalInstallment());
						String repayEffDate=CommonFunction.checkNull(vo.getRepayeffdate());//added by Richa
						String maxDate=CommonFunction.checkNull(vo.getMaxDate());//added by Richa
						String dueDate=CommonFunction.checkNull(vo.getDueDatee());//added by Richa
						logger.info("In InstallmentPlanBehindAction InstallmentType: " + installmentType);
						logger.info("In InstallmentPlanBehindAction dueDate: " + dueDate);
			        if(installmentType.equalsIgnoreCase("E")  || installmentType.equalsIgnoreCase("P")){
			        	request.setAttribute("viewMode", "viewMode");
				
					}
			        if(!CommonFunction.checkNull(dueDate).equals("")&& installmentType.equalsIgnoreCase("I"))
			        {
			        	logger.info("In  dueDate: " + dueDate);
			        	request.setAttribute("forNewInstallmentType", "forNewInstallmentType");
			        }
			        session.setAttribute("installmentList", installmentList);
					logger.info("In InstallmentPlanBehindAction installmentList: ") ;
					request.setAttribute("installmentType", installmentType);
					request.setAttribute("totalInstallment", totalInstallment);
					request.setAttribute("rateType", rateType);
					request.setAttribute("loanAmount", loanAmount);
					request.setAttribute("repayeffdate", repayEffDate);
					request.setAttribute("maxDate", maxDate);
			      }	
					
				}

			}
			
			
			if(CommonFunction.checkNull(request.getParameter("forwardString")) != null && CommonFunction.checkNull(request.getParameter("forwardString")).equalsIgnoreCase("Y"))
			{
				return mapping.findForward("InstallmentPlan");
				
			}
			else {
				
				return mapping.findForward("openTabSuccess");
			}
			
			
			
						
	}	 
	 

	 public ActionForward generateRepaymentSchedule(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)throws Exception {
				HttpSession session = request.getSession();
				//boolean flag=false;

				UserObject userobj=(UserObject)session.getAttribute("userobject");
				String userId=null;
				//String bgDate=null;
				if(userobj!=null)
				{
					userId=userobj.getUserId();
					//bgDate=userobj.getBusinessdate();  
				}else{
					logger.info(" in generateRepaymentSchedule method of RepaymentServiceActionDispatchAction action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
				Object sessionId = session.getAttribute("sessionID");
				ServletContext context = getServlet().getServletContext();
				String strFlag=null;	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				//code added by neeraj 
				
				
				String customerRSPId="";				
				String loanId = "";
				String RSPAuthor="";
				String resultproc="";
				boolean result=false;
				if(session.getAttribute("loanId")!=null)
					loanId=session.getAttribute("loanId").toString();

				
				
				if(session.getAttribute("customerRSPId")!=null)
					customerRSPId=session.getAttribute("customerRSPId").toString();

				
				LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
				logger.info("Implementation class: "+dao.getClass()); 

				if((loanId!=null && !loanId.equalsIgnoreCase("")))
				{
					if(session.getAttribute("RSPAuthor")!=null)
						RSPAuthor=session.getAttribute("RSPAuthor").toString();
					if(CommonFunction.checkNull(RSPAuthor).equalsIgnoreCase("RSPAuthor"))
					{
						resultproc="S";
					}
					else{
					resultproc=dao.generateRSPRepySchedule(loanId,customerRSPId,userId);
					}
					if(!CommonFunction.checkNull(resultproc).equalsIgnoreCase("S"))
					{					
						request.setAttribute("procval", resultproc);
					}
					else if(CommonFunction.checkNull(resultproc).equalsIgnoreCase("ONEMUSTLEADPARTNER"))
					{
						request.setAttribute("procval", resultproc);
					}
					else if(CommonFunction.checkNull(resultproc).equalsIgnoreCase("ONEMUSTROW"))	
					{
						request.setAttribute("procval",resultproc);
					}
					else
					{
						ArrayList repShedule=dao.getRSPRepaySched(loanId,customerRSPId);
						if(repShedule.size()>0)
						{
							RepayScheduleVo vo=(RepayScheduleVo)repShedule.get(0);
							String effectiveRate =vo.getEffectiveRate();
							request.setAttribute("effectiveRate", effectiveRate);	
						request.setAttribute("repShedule", repShedule);
						}
						
					}
					
					
				}
				
				session.setAttribute("repaymentCheck","Y");
				return mapping.findForward("GenerateRepayment");

				
			}	
	 
	 
	 
	 public ActionForward viewGenerateRepaymentSchedule(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)throws Exception {
				HttpSession session = request.getSession();
				//boolean flag=false;

				UserObject userobj=(UserObject)session.getAttribute("userobject");
				String userId=null;
				//String bgDate=null;
				if(userobj!=null)
				{
					userId=userobj.getUserId();
					//bgDate=userobj.getBusinessdate();  
				}else{
					logger.info(" in viewGenerateRepaymentSchedule method of RepaymentServiceActionDispatchAction action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
				Object sessionId = session.getAttribute("sessionID");
				ServletContext context = getServlet().getServletContext();
				String strFlag=null;	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				//code added by neeraj 
				
				
				String customerRSPId="";				

				String loanId=CommonFunction.checkNull(request.getParameter("loanId"));
				
				LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
				logger.info("Implementation class: "+dao.getClass()); 

				if((loanId!=null && !loanId.equalsIgnoreCase("")))
				{
					
					 customerRSPId=dao.fetchRspId(loanId);
					
						ArrayList repShedule=dao.getRSPRepaySched(loanId,customerRSPId);
						if(repShedule.size()>0)
						{
							RepayScheduleVo vo=(RepayScheduleVo)repShedule.get(0);
							String effectiveRate =vo.getEffectiveRate();
							request.setAttribute("effectiveRate", effectiveRate);	
						request.setAttribute("repShedule", repShedule);
						}
						
					}
				request.setAttribute("ViewRSPRepayment","ViewRSPRepayment");
				request.setAttribute("repaymentCheck","Y");
				return mapping.findForward("GenerateRepayment");

				
			}	
	 
		public ActionForward openPartnerDetailsForRsp(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)	throws Exception
				{
					logger.info(" in openPartnerDetailsForRsp()");
					ServletContext context = getServlet().getServletContext();
					HttpSession session = request.getSession();
					LoanDetailForCMVO loanDetailForCMVO=new LoanDetailForCMVO();	
					UserObject userobj=(UserObject)session.getAttribute("userobject");
					Object sessionId = session.getAttribute("sessionID");
					//for check User session start
					String strFlag=null;
					if(sessionId!=null)
					{
						strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
					}
					String userId="";
					String businessDate="";
					if(userobj!=null)
					{
						userId=userobj.getUserId();
						businessDate=userobj.getBusinessdate();
					}else{
						logger.info(" in openPartnerDetailsForRsp method of  LoanDetailsForCMAction action the session is out----------------");
						return mapping.findForward("sessionOut");
					}
					
					logger.info("strFlag .............. "+strFlag);
					if(!strFlag.equalsIgnoreCase(""))
					{
						if(strFlag.equalsIgnoreCase("sameUserSession"))
						{
							context.removeAttribute("msg");
							context.removeAttribute("msg1");
						}
						else if(strFlag.equalsIgnoreCase("BODCheck"))
						{
							context.setAttribute("msg", "B");
						}
						return mapping.findForward("logout");
					}
					String loanId="";
					String businessType="";
					String customerRSPId="";
					LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
					String functionId=(String)session.getAttribute("functionId");
					int funid=Integer.parseInt(functionId);	
					logger.info("function_id is  : "+funid);
					logger.info("businessType is :  "+businessType);
					if(!CommonFunction.checkNull(request.getParameter("businessType")).equalsIgnoreCase("")){
						session.removeAttribute("businessType");
						businessType = request.getParameter("businessType");
						session.setAttribute("businessType",businessType);
						
					}
					else if(session.getAttribute("businessType")!=null){

						businessType = session.getAttribute("businessType").toString();
						
					}
				
					if(!CommonFunction.checkNull(request.getParameter("loanId")).equalsIgnoreCase("")){
						session.removeAttribute("loanId");
						loanId = request.getParameter("loanId");
						session.setAttribute("loanId",loanId);
						
					}
					else if(session.getAttribute("loanId")!=null){

						loanId = session.getAttribute("loanId").toString();
						
					}
					
					if(!CommonFunction.checkNull(request.getParameter("customerRSPId")).equalsIgnoreCase("")){
						session.removeAttribute("customerRSPId");
						customerRSPId = request.getParameter("customerRSPId");
						session.setAttribute("customerRSPId",customerRSPId);
						
					}
					else if(session.getAttribute("customerRSPId")!=null){
						customerRSPId = session.getAttribute("customerRSPId").toString();
						
					}
					session.setAttribute("partner","partner");
					
					
					CreditProcessingDAO creditProcessing=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
			        logger.info("Implementation class: "+creditProcessing.getClass()); 
		      		ArrayList businessList = creditProcessing.getbusinessList();
		      		session.setAttribute("getBusiness", businessList);
//					if (session.getAttribute("loanId") != null) {
//						loanId = session.getAttribute("loanId").toString();
//		//				boolean status=dao.saveDefaultValue(loanId,userId,businessDate,businessType);
//						logger.info("In partner Details loanId " + session.getAttribute("loanId"));
						ArrayList loanHeader = dao.getLoanHeader(loanId);
						session.setAttribute("loanHeader", loanHeader);
						ArrayList<LoanDetailForCMVO> getPartnerDetails = dao.getPartnerDetailsforPopUpForRsp(loanDetailForCMVO,loanId,businessType);
						session.setAttribute("partnerDetails", getPartnerDetails);
						
						if(CommonFunction.checkNull(request.getParameter("forwardString")) != null && CommonFunction.checkNull(request.getParameter("forwardString")).equalsIgnoreCase("Y"))
						{
							return mapping.findForward("ParterDetail");
							
						}
						else {
							
							return mapping.findForward("openTabSuccess");
						}
					}
	 
		public ActionForward savePartnerDetailsForRsp(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse resopnse) throws Exception{
				ServletContext context = getServlet().getServletContext();
				LoanDetailForCMVO loanDetailForCMVO=new LoanDetailForCMVO();	
				HttpSession session = request.getSession();
			
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start"'''"
				String strFlag=null;
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				String businessType="";
				String id = "";
				String msg="";
				String leadPartnerFlag="";
				leadPartnerFlag=CommonFunction.checkNull(request.getParameter("leadPartnerFlag"));
				id = request.getParameter("id");
				logger.info("In business partner  id " + id);
				loanDetailForCMVO.setId(id);
				String loanId = "";

				if (session.getAttribute("loanId") != null) {

					loanId = session.getAttribute("loanId").toString();
				} 
				logger.info("In business partner loanId " + loanId);
				if (session.getAttribute("businessType") != null) {

					businessType = session.getAttribute("businessType").toString();
				} 
				logger.info("In business partner businessType " + businessType);
				//loanDetailForCMVO.setBusinessType(businessType);
				loanDetailForCMVO.setLoanId(loanId);
				String userId=null;
				String bDate=null;
				if(userobj!=null)
				{
						userId=userobj.getUserId();
						bDate=userobj.getBusinessdate();
				}
			DynaValidatorForm loanDetailForm= (DynaValidatorForm)form;
			
			org.apache.commons.beanutils.BeanUtils.copyProperties(loanDetailForCMVO, loanDetailForm);
			

			loanDetailForCMVO.setMakerId(userId);
			loanDetailForCMVO.setMakerDate(bDate);
			loanDetailForCMVO.setLeadPartnerFlag(leadPartnerFlag);
			LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
			String sms=null;
			String recStatus=null;
			logger.info("loanDetailForCMVO.getLeadPartnerFlag()::::::::::"+loanDetailForCMVO.getLeadPartnerFlag());
			logger.info("loanDetailForCMVO.getLeadPartnerFlag()::::::::::"+request.getParameter("businessType"));
			
			if(CommonFunction.checkNull(loanDetailForCMVO.getLeadPartnerFlag()).equalsIgnoreCase("Y")){
				if(!CommonFunction.checkNull(request.getParameter("businessType")).equalsIgnoreCase("")){
					session.removeAttribute("businessType");
					businessType = request.getParameter("businessType");
					session.setAttribute("businessType",businessType);
					
				}
				else if(session.getAttribute("businessType")!=null){
					businessType = session.getAttribute("businessType").toString();
				}
			}
			else{
				businessType="";
			}
			String result = dao.savePartnerDetailsForRsp(loanDetailForCMVO,id,businessType);
			if(CommonFunction.checkNull(result).equalsIgnoreCase("S"))
			
			logger.info("result"+result);
			if(CommonFunction.checkNull(result).equalsIgnoreCase("S"))
				msg="S";
			else if(CommonFunction.checkNull(result).equalsIgnoreCase("M"))
				msg="M";
			else if(CommonFunction.checkNull(result).equalsIgnoreCase("NS"))
				msg="NS";
			else if(CommonFunction.checkNull(result).equalsIgnoreCase("NM"))
				msg="NM";
			else if(CommonFunction.checkNull(result).equalsIgnoreCase("EX"))
				msg="EX";
			else if(CommonFunction.checkNull(result).equalsIgnoreCase("prevent"))
				msg="prevent";
			else if(CommonFunction.checkNull(result).equalsIgnoreCase("contributionAmount"))
				msg="contributionAmount";
			else if(CommonFunction.checkNull(result).equalsIgnoreCase("leadPartnerExist"))
			msg="leadPartnerExist";
			request.setAttribute("msg", msg);
			ArrayList loanHeader = dao.getLoanHeader(loanId);
			session.setAttribute("loanHeader", loanHeader);
			ArrayList<LoanDetailForCMVO> getPartnerDetails = dao.getPartnerDetailsForRsp(loanDetailForCMVO,loanId,businessType);
			request.setAttribute("partnerDetails", getPartnerDetails);
			String functionId=(String)session.getAttribute("functionId");
			int funid=Integer.parseInt(functionId);	
			logger.info("function_id is  : "+funid);
			
				request.setAttribute("partner","partner");
				
				return mapping.findForward("RspSavePartner");
		}
		
		public ActionForward getPartnerDetailsForRsp(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse resopnse) throws Exception{
				ServletContext context = getServlet().getServletContext();
				LoanDetailForCMVO loanDetailForCMVO=new LoanDetailForCMVO();	
				HttpSession session = request.getSession();
			
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start
				String strFlag=null;
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				String id = "";
				String businessType="";
				id = request.getParameter("id");
				logger.info("In business partner  id " + id);
				loanDetailForCMVO.setId(id);
				session.setAttribute("id", id);
				String loanId = "";

				if (session.getAttribute("loanId") != null) {

					loanId = session.getAttribute("loanId").toString();
				} 
				logger.info("In business partner loanId " + loanId);
				loanDetailForCMVO.setLoanId(loanId);
				
			DynaValidatorForm loanDetailForm= (DynaValidatorForm)form;
			
			org.apache.commons.beanutils.BeanUtils.copyProperties(loanDetailForCMVO, loanDetailForm);
			
			LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
			if (session.getAttribute("businessType") != null) {

				businessType = session.getAttribute("businessType").toString();
			} 
			logger.info("In business partner businessType " + businessType);
			
			ArrayList<LoanDetailForCMVO> result = dao.getPartnerBusDetailsForRsp(loanDetailForCMVO,id,loanId,businessType);
			request.setAttribute("list", result);
			String servicingPartnerflagStatus = ((LoanDetailForCMVO)result.get(0)).getServicingPartnerFlag();
			if(CommonFunction.checkNull(servicingPartnerflagStatus).equalsIgnoreCase("Yes"))
			request.setAttribute("servicingPartnerflagStatus", servicingPartnerflagStatus);
			String leadPartnerFlagStatus = ((LoanDetailForCMVO)result.get(0)).getLeadPartnerFlag();
			if(CommonFunction.checkNull(leadPartnerFlagStatus).equalsIgnoreCase("Yes"))
			request.setAttribute("leadPartnerFlagStatus", leadPartnerFlagStatus);
			ArrayList loanHeader = dao.getLoanHeader(loanId);
			session.setAttribute("loanHeader", loanHeader);
			ArrayList<LoanDetailForCMVO> getPartnerDetails = dao.getPartnerDetailsForRsp(loanDetailForCMVO,loanId,businessType);
			request.setAttribute("partnerDetails", getPartnerDetails);
			String functionId=(String)session.getAttribute("functionId");
			int funid=Integer.parseInt(functionId);	
			logger.info("function_id is  : "+funid);
			
				request.setAttribute("partner","partner");
				
				return mapping.findForward("RspSavePartner");
		}
		
		public ActionForward deletePartnerDetailsForRsp(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) throws Exception {
		
			LoanDetailForCMVO loanDetailForCMVO=new LoanDetailForCMVO();
			 logger.info("In deletePartnerDetails");
		
			    boolean flag =false;
			    HttpSession session = request.getSession();
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				if(userobj==null){
					logger.info("here in deletePartnerDetails action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
				Object sessionId = session.getAttribute("sessionID");
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				
			 int status=0;
			String businessType="";
			 DynaValidatorForm loanDetailForm= (DynaValidatorForm)form;
				
				org.apache.commons.beanutils.BeanUtils.copyProperties(loanDetailForCMVO, loanDetailForm);
				
				LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
				
				logger.info("Implementation class: "+dao.getClass()); 
			
			 String partnerDtl[] = request.getParameterValues("chk");
			String loanId="";
			
			 if (session.getAttribute("loanId") != null) {

					loanId = session.getAttribute("loanId").toString();
				} 
				logger.info("In business partner loanId " + loanId);
				loanDetailForCMVO.setLoanId(loanId);
				if (session.getAttribute("businessType") != null) {

					businessType = session.getAttribute("businessType").toString();
				} 
				logger.info("In business partner businessType " + businessType);
			    for(int k=0;k<partnerDtl.length;k++)
				 {
			    	 logger.info("the value of financIncome "+partnerDtl[k]);
			 status = dao.deletePartnerDtlForRsp(partnerDtl[k],loanId,businessType);
				 }
			 if(status>0)
			 {
				 request.setAttribute("msg", "Del"); 
				
	  	  }
			  else
			  {
					 request.setAttribute("msg", "DE"); 
			  }
			 
			 ArrayList loanHeader = dao.getLoanHeader(loanId);
				session.setAttribute("loanHeader", loanHeader);
				ArrayList<LoanDetailForCMVO> getPartnerDetails = dao.getPartnerDetailsForRsp(loanDetailForCMVO,loanId,businessType);
				request.setAttribute("partnerDetails", getPartnerDetails);
				String functionId=(String)session.getAttribute("functionId");
				int funid=Integer.parseInt(functionId);	
				logger.info("function_id is  : "+funid);
				
				request.setAttribute("partner","partner");
				
				return mapping.findForward("RspSavePartner");
		}
		

		
		public ActionForward forwardPartnerDetailsForRsp(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse resopnse) throws Exception{
				ServletContext context = getServlet().getServletContext();
				LoanDetailForCMVO loanDetailForCMVO=new LoanDetailForCMVO();	
				HttpSession session = request.getSession();
			
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start"'''"
				String strFlag=null;
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				String businessType="";
				String id = "";
				String msg="";
				String leadPartnerFlag="";
				leadPartnerFlag=CommonFunction.checkNull(request.getParameter("leadPartnerFlag"));
				id = request.getParameter("id");
				logger.info("In business partner  id " + id);
				loanDetailForCMVO.setId(id);
				String loanId = "";

				if (session.getAttribute("loanId") != null) {

					loanId = session.getAttribute("loanId").toString();
				} 
				logger.info("In business partner loanId " + loanId);
				if (session.getAttribute("businessType") != null) {

					businessType = session.getAttribute("businessType").toString();
				} 
				logger.info("In business partner businessType " + businessType);
				//loanDetailForCMVO.setBusinessType(businessType);
				loanDetailForCMVO.setLoanId(loanId);
				String userId=null;
				String bDate=null;
				if(userobj!=null)
				{
						userId=userobj.getUserId();
						bDate=userobj.getBusinessdate();
				}
			DynaValidatorForm loanDetailForm= (DynaValidatorForm)form;
			
			org.apache.commons.beanutils.BeanUtils.copyProperties(loanDetailForCMVO, loanDetailForm);
			

			loanDetailForCMVO.setMakerId(userId);
			loanDetailForCMVO.setMakerDate(bDate);
			loanDetailForCMVO.setLeadPartnerFlag(leadPartnerFlag);
			LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
			String sms=null;
			String recStatus=null;

			if(CommonFunction.checkNull(loanDetailForCMVO.getLeadPartnerFlag()).equalsIgnoreCase("Y")){
				businessType=loanDetailForCMVO.getBusinessType();
				session.setAttribute("businessType",businessType);
				
			}
			String result = dao.forwardPartnerDetailsForRsp(loanId);
			logger.info("result::::::::::::"+result);
			if(CommonFunction.checkNull(result).equalsIgnoreCase("S"))
				msg="F";
			else if(CommonFunction.checkNull(result).equalsIgnoreCase("E"))
				msg="E";
			else if(CommonFunction.checkNull(result).equalsIgnoreCase("saveOneRow"))
				msg="saveOneRow";
			else if(CommonFunction.checkNull(result).equalsIgnoreCase("al"))
				msg="al";
			else if(CommonFunction.checkNull(result).equalsIgnoreCase("ONEMUSTLEADPARTNER"))
				msg="ONEMUSTLEADPARTNER";
			else if(CommonFunction.checkNull(result).equalsIgnoreCase("RATENOTMATCH"))
				msg="RATENOTMATCH";
			else if(CommonFunction.checkNull(result).equalsIgnoreCase("checkAllParticipationAmt"))
				msg="checkAllParticipationAmt";
			else if(CommonFunction.checkNull(result).equalsIgnoreCase("SAVEALLSTAGE"))
				msg="SAVEALLSTAGE";
			request.setAttribute("msg", msg);
			ArrayList loanHeader = dao.getLoanHeader(loanId);
			session.setAttribute("loanHeader", loanHeader);
			ArrayList<LoanDetailForCMVO> getPartnerDetails = dao.getPartnerDetailsForRsp(loanDetailForCMVO,loanId,businessType);
			request.setAttribute("partnerDetails", getPartnerDetails);
			
				request.setAttribute("partner","partner");
				
				return mapping.findForward("RspSavePartner");
		}		
		
	
		public ActionForward rspServiceApproval(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse resopnse) throws Exception{
				ServletContext context = getServlet().getServletContext();
				LoanDetailForCMVO loanDetailForCMVO=new LoanDetailForCMVO();	
				HttpSession session = request.getSession();
			
				UserObject userobj=(UserObject)session.getAttribute("userobject");
				Object sessionId = session.getAttribute("sessionID");
				//for check User session start"'''"
				String strFlag=null;
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				String businessType="";
				String id = "";
				String msg="";
				String leadPartnerFlag="";
				leadPartnerFlag=CommonFunction.checkNull(request.getParameter("leadPartnerFlag"));
				id = request.getParameter("id");
				logger.info("In business partner  id " + id);
				loanDetailForCMVO.setId(id);
				String loanId = "";

				if (session.getAttribute("loanId") != null) {

					loanId = session.getAttribute("loanId").toString();
				} 
				logger.info("In business partner loanId " + loanId);
				if (session.getAttribute("businessType") != null) {

					businessType = session.getAttribute("businessType").toString();
				} 
				logger.info("In business partner businessType " + businessType);
				//loanDetailForCMVO.setBusinessType(businessType);
				
				String userId=null;
				String bDate=null;
				if(userobj!=null)
				{
						userId=userobj.getUserId();
						bDate=userobj.getBusinessdate();
				}
			DynaValidatorForm loanDetailForm= (DynaValidatorForm)form;
			
			org.apache.commons.beanutils.BeanUtils.copyProperties(loanDetailForCMVO, loanDetailForm);
			

			loanDetailForCMVO.setMakerId(userId);
			loanDetailForCMVO.setMakerDate(bDate);
			loanDetailForCMVO.setLoanId(loanId);
			loanDetailForCMVO.setLeadPartnerFlag(leadPartnerFlag);
			LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
			String sms=null;
			String recStatus=null;
			String result="";

			 result = dao.rspApproval(loanDetailForCMVO);
			
			logger.info("result::::::::::::"+result);
			if(CommonFunction.checkNull(result).equalsIgnoreCase("A"))
				msg="S";
			else if(CommonFunction.checkNull(result).equalsIgnoreCase("X"))
				msg="X";
			else if(CommonFunction.checkNull(result).equalsIgnoreCase("P"))
				msg="P";
			else 
				msg=result;

			request.setAttribute("message", msg);
			ArrayList loanHeader = dao.getLoanHeader(loanId);
			session.setAttribute("loanHeader", loanHeader);

				return mapping.findForward("RspApproval");
		}		
		
					
		
	

}	


