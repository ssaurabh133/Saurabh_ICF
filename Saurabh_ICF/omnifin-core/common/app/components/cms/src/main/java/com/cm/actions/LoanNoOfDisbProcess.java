/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.cm.dao.LoanInitiationDAO;
import com.cm.vo.NoOfDisbursalVo;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.tabDependencyCheck.RefreshFlagValueInsert;
import com.tabDependencyCheck.RefreshFlagVo;

/** 
 * MyEclipse Struts
 * Creation date: 08-04-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class LoanNoOfDisbProcess extends DispatchAction {
	private static final Logger logger = Logger.getLogger(LoanNoOfDisbProcess.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward saveNumberDisb(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String userId="";
		String bDate="";
		
		if(userobj!=null)
		{
				userId=userobj.getUserId();
				bDate=userobj.getBusinessdate();
				
		}else{
			logger.info("here in saveNumberDisb method of LoanNoOfDisbProcess action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		DynaValidatorForm NoOfDisbursalDynaValidatorForm = (DynaValidatorForm)form;
		logger.info("In LoanNoOfDisbProcess(saveNumberDisb) to save number of disbursal");
		
	
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}	
		String loanId = "";

		if (session.getAttribute("loanId") != null) {

			loanId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxIdInCM") != null) {
			loanId = session.getAttribute("maxIdInCM").toString();
		}

		logger.info("In LoanNoOfDisbProcess loan id: " + loanId);
	
		 String sms="";
		 NoOfDisbursalVo nvo=new NoOfDisbursalVo();
		 nvo.setLoanId(loanId);
		 nvo.setRecStatus("A");
		 nvo.setMakerId(userId);
		 nvo.setMakerDate(bDate);
		 org.apache.commons.beanutils.BeanUtils.copyProperties(nvo, NoOfDisbursalDynaValidatorForm);
			LoanInitiationDAO detail=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
			logger.info("Implementation class: "+detail.getClass()); 
			boolean status = detail.saveNoOfDisb(nvo);
	
			if(status)
			 {
				logger.info("Data is inserted in cr_loan_disbursalsch_temp_dtl");
				detail.saveDisbursalScheduleFromLoanInTemp(loanId);
				String checkQ="select count(*) from cr_loan_disbursalsch_dtl where LOAN_ID='"+loanId+"' ";
				logger.info("No of disbursal at cr_loan_disbursalsch_dtl Query: "+checkQ);
 			    String count=ConnectionDAO.singleReturn(checkQ);
 			   logger.info("No of disbursal at cr_loan_disbursalsch_dtl: "+count);
 			   if(!CommonFunction.checkNull(count).equalsIgnoreCase("0"))
 			   {
 					 boolean st=detail.updateDisbTypeAndDisbNo(loanId,count);
 					 logger.info("updateDisbTypeAndDisbNo status: "+st);
 			   }
				sms="S";
				RefreshFlagVo vo1 = new RefreshFlagVo();
				if(loanId!=null && !loanId.trim().equalsIgnoreCase(""))
					vo1.setRecordId(Integer.parseInt(loanId.trim()));
		    		vo1.setTabIndex(8);
		    		vo1.setModuleName("CM");
	    		RefreshFlagValueInsert.updateRefreshFlag(vo1);
				 
			 } 
			else
			{
				sms="E";
			}
		 
		 logger.info("status: "+sms);
		 request.setAttribute("sms", sms);
		return mapping.findForward("success");
	}
	
	public ActionForward deleteNumberDisb(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		
		logger.info("In LoanNoOfDisbProcess(deleteNumberDisb) to save number of disbursal");		
		
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in deleteNumberDisb method of LoanNoOfDisbProcess action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		String disNo=request.getParameter("disNo");
			
		String loanId = "";

		if (session.getAttribute("loanId") != null) {

			loanId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxIdInCM") != null) {
			loanId = session.getAttribute("maxIdInCM").toString();
		}

		logger.info("In LoanNoOfDisbProcess loan id: " + loanId);
	
		 String sms="";
		
			LoanInitiationDAO detail=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
			logger.info("Implementation class: "+detail.getClass()); 
		 boolean status = detail.deleteNoOfDisb(loanId,disNo);
			if(status)
			 {
				sms="S";
				RefreshFlagVo vo1 = new RefreshFlagVo();
				if(loanId!=null && !loanId.trim().equalsIgnoreCase(""))
					vo1.setRecordId(Integer.parseInt(loanId.trim()));
	    		vo1.setTabIndex(8);
	    		vo1.setModuleName("CM");
    		RefreshFlagValueInsert.updateRefreshFlag(vo1);
				 
			 } 
			else
			{
				sms="E";
			}
		 
		 logger.info("status: "+sms);
		 request.setAttribute("sms", sms);
		return mapping.findForward("success");
	}
	
	public ActionForward saveDisbursalPlanMakerMenu(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		HttpSession session = request.getSession();
		boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		String makerId="";
		String makerDate="";
		
		if(userobj!=null){
			
			makerId=userobj.getUserId();
			makerDate=userobj.getBusinessdate();
			
		}
		else{
			logger.info("here in forwardDisbursalPlanMakerMenu method of LoanNoOfDisbProcess action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		DynaValidatorForm NoOfDisbursalDynaValidatorForm = (DynaValidatorForm)form;
		logger.info("In LoanNoOfDisbProcess(saveDisbursalPlanMakerMenu) to save number of disbursal");
		
	
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}	
		String loanId = "";

		if (session.getAttribute("loanId") != null) {

			loanId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxIdInCM") != null) {
			loanId = session.getAttribute("maxIdInCM").toString();
		}

		logger.info("In saveDisbursalPlanMakerMenu loan id: " + loanId);
	
		 String sms="";
		 NoOfDisbursalVo nvo=new NoOfDisbursalVo();
		 nvo.setLoanId(loanId);
		 nvo.setMakerId(makerId);
		 nvo.setMakerDate(makerDate);
		 nvo.setRecStatus("P");
		org.apache.commons.beanutils.BeanUtils.copyProperties(nvo, NoOfDisbursalDynaValidatorForm);
		LoanInitiationDAO detail=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+detail.getClass()); 
			boolean status = detail.saveNoOfDisbPlanMenu(nvo);
			if(status)
			 {
				
				sms="S";
						 
			 } 
			else
			{
				sms="E";
			}
		 
		 logger.info("status: "+sms);
		 request.setAttribute("sms", sms);
		return mapping.findForward("saveDisbursalPlanMakerMenu");
	}
	
	public ActionForward forwardDisbursalPlanMakerMenu(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		HttpSession session = request.getSession();
		boolean flag=false;
		String makerId="";
		String makerDate="";
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj!=null){
			
			makerId=userobj.getUserId();
			makerDate=userobj.getBusinessdate();
			
		}
		else{
			logger.info("here in forwardDisbursalPlanMakerMenu method of LoanNoOfDisbProcess action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		DynaValidatorForm NoOfDisbursalDynaValidatorForm = (DynaValidatorForm)form;
		logger.info("In LoanNoOfDisbProcess(forwardDisbursalPlanMakerMenu) to save number of disbursal");
		
	
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}	
		String loanId = "";

		if (session.getAttribute("loanId") != null) {

			loanId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxIdInCM") != null) {
			loanId = session.getAttribute("maxIdInCM").toString();
		}

		logger.info("In forwardDisbursalPlanMakerMenu loan id: " + loanId);
	
		 String sms="";
		 NoOfDisbursalVo nvo=new NoOfDisbursalVo();
		 nvo.setLoanId(loanId);
		 nvo.setMakerId(makerId);
		 nvo.setMakerDate(makerDate);
		 nvo.setRecStatus("F");
		org.apache.commons.beanutils.BeanUtils.copyProperties(nvo, NoOfDisbursalDynaValidatorForm);
		LoanInitiationDAO detail=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+detail.getClass()); 
			boolean status = detail.saveNoOfDisbPlanMenu(nvo);
			if(status)
			 {
				sms="F";		 
			 } 
			else
			{
				sms="E";
			}
		 
		 logger.info("status: "+sms);
		 request.setAttribute("sms", sms);
		return mapping.findForward("saveDisbursalPlanMakerMenu");
	}
	
	public ActionForward authorDisbursalPlanMakerMenu(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		HttpSession session = request.getSession();
		boolean flag=false;
		String makerId="";
		String makerDate="";
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj!=null){
			
			makerId=userobj.getUserId();
			makerDate=userobj.getBusinessdate();
			
		}
		else{
			logger.info("here in authorDisbursalPlanMakerMenu method of LoanNoOfDisbProcess action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		DynaValidatorForm NoOfDisbursalDynaValidatorForm = (DynaValidatorForm)form;
		logger.info("In LoanNoOfDisbProcess(authorDisbursalPlanMakerMenu) to save number of disbursal");
		
	
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag="";	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}	
		String loanId = "";

		if (session.getAttribute("loanId") != null) {

			loanId = session.getAttribute("loanId").toString();
		} else if (session.getAttribute("maxIdInCM") != null) {
			loanId = session.getAttribute("maxIdInCM").toString();
		}

		logger.info("In authorDisbursalPlanMakerMenu loan id: " + loanId);
	
		 String sms="";
		 NoOfDisbursalVo nvo=new NoOfDisbursalVo();
		 nvo.setLoanId(loanId);
		 nvo.setMakerId(makerId);
		 nvo.setMakerDate(makerDate);
		 
		org.apache.commons.beanutils.BeanUtils.copyProperties(nvo, NoOfDisbursalDynaValidatorForm);
		LoanInitiationDAO detail=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
		logger.info("Implementation class: "+detail.getClass()); 
			boolean status = detail.approveNoOfDisb(nvo);
			if(status)
			 {
				String checkQ="select count(*) from cr_loan_disbursalsch_dtl where LOAN_ID='"+loanId+"' ";
				logger.info("No of disbursal at cr_loan_disbursalsch_dtl Query: "+checkQ);
 			    String count=ConnectionDAO.singleReturn(checkQ);
 			   logger.info("No of disbursal at cr_loan_disbursalsch_dtl: "+count);
 			   if(!CommonFunction.checkNull(count).equalsIgnoreCase("0"))
 			   {
 					 boolean st=detail.updateDisbTypeAndDisbNo(loanId,count);
 					 logger.info("updateDisbTypeAndDisbNo status: "+st);
 			   }
				sms="S";
						 
			 } 
			else
			{
				sms="E";
			}
		 logger.info("status: "+sms);
		 request.setAttribute("sms", sms);
		return mapping.findForward("authorDisbursalPlanMakerMenu");
	}
}