/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;
import com.cm.dao.CreditManagementDAO;
import com.cm.dao.DeleteInstrumentDAO;
import com.cm.dao.InstrumentCapturingDAO;
import com.cm.vo.InstructionCapMakerVO;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.ApplicantTypeVO;
import com.lockRecord.action.LockRecordCheck;
import com.logger.LoggerMsg;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 08-03-2012
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class InstrumentUpdateAction extends DispatchAction
{
	private static final Logger logger = Logger.getLogger(InstrumentUpdateAction.class.getName());	
	//change by sachin
	CreditManagementDAO cdao=(CreditManagementDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditManagementDAO.IDENTITY);

	//end by sachin
//	CreditManagementDAO cdao = new CreditManagementDAOImpl();
	public ActionForward searchInstrumentForUpdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
			
				logger.info("In searchInstrumentForUpdate()----------->");
				HttpSession session = request.getSession();
				UserObject userobj = (UserObject) session.getAttribute("userobject");
				String userId="";
				String branchId="";
				if(userobj!=null)
				{
					userId=userobj.getUserId();
					branchId=userobj.getBranchId();
				}else{
					logger.info(" in searchInstrumentForUpdate method of InstrumentUpdateAction action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
				InstructionCapMakerVO instructionCapMakerVO=new InstructionCapMakerVO();
				Object sessionId = session.getAttribute("sessionID");


				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				session.removeAttribute("arryList");
				session.removeAttribute("arrList");
				session.removeAttribute("loanID");
				session.removeAttribute("author");
				session.removeAttribute("releasenotCheck");
				session.removeAttribute("notCheck");
				
				 logger.info("current page link .......... "+request.getParameter("d-49520-p"));
					
					int currentPageLink = 0;
					if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
					{
						currentPageLink=1;
					}
					else
					{
						currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
					}
					
					logger.info("current page link ................ "+request.getParameter("d-49520-p"));
					
					instructionCapMakerVO.setCurrentPageLink(currentPageLink);
					
					
				String alertMsg ="";
				
				DynaValidatorForm InstrumentCapturingMakerFirstDynaValidatorForm = (DynaValidatorForm)form;
				org.apache.commons.beanutils.BeanUtils.copyProperties(instructionCapMakerVO, InstrumentCapturingMakerFirstDynaValidatorForm);

				if(CommonFunction.checkNull(instructionCapMakerVO.getReportingToUserId()).equalsIgnoreCase(""))
						{ 
					instructionCapMakerVO.setReportingToUserId(userId);
						   //logger.info("When user id is not selected by the user:::::"+userId);
						}
						logger.info("user Id:::::"+instructionCapMakerVO.getReportingToUserId());
						instructionCapMakerVO.setBranchId(branchId);
						instructionCapMakerVO.setUserID(userId);
						InstrumentCapturingDAO dao=(InstrumentCapturingDAO)DaoImplInstanceFactory.getDaoImplInstance(InstrumentCapturingDAO.IDENTITY);
						logger.info("Implementation class: "+dao.getClass()); 
						if(!CommonFunction.checkNull(instructionCapMakerVO.getLbxLoanNoHID()).trim().equals("") ||!CommonFunction.checkNull(instructionCapMakerVO.getLbxBankID()).trim().equals("")  || !CommonFunction.checkNull(instructionCapMakerVO.getInstrumentType()).trim().equals("") || !CommonFunction.checkNull(instructionCapMakerVO.getLbxProductID()).trim().equals("")|| !CommonFunction.checkNull(instructionCapMakerVO.getLbxUserId()).trim().equals(""))
						{
			    ArrayList<InstructionCapMakerVO> searchInstrumentList=dao.searchInstrumentToUpdate(instructionCapMakerVO);
			    logger.info("Size of searchInstrumentList-searchInstrument()-->"+searchInstrumentList.size());
			    if(searchInstrumentList.size() > 0){
			    	alertMsg = "Y";
			    	request.setAttribute("alertMsg", alertMsg);
			    
			    }else{
			    	alertMsg = "N";
			    	request.setAttribute("alertMsg", alertMsg);
			    }
			    request.setAttribute("list",searchInstrumentList );
						}
			    request.setAttribute("instrumentCapturingMakerSearch", "instrumentCapturingMakerSearch");
			    request.setAttribute("maker", "maker");
			 // Start Prashant here
				String customerTypeCheckQuery="select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY = 'ALERT_CUSTOMIZE'";
				logger.info("customerTypeCheckQuery------"+customerTypeCheckQuery);
				String customerTypeStatus = ConnectionDAO.singleReturn(customerTypeCheckQuery);
				logger.info("customerTypeStatus------"+customerTypeStatus);
				request.setAttribute("customerTypeStatus",customerTypeStatus);
				// End Prashant here
		        return mapping.findForward("searchInstrumentList");
	}

 
	public ActionForward searchInstrumentAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		InstructionCapMakerVO instructionCapMakerVO=new InstructionCapMakerVO();	

				logger.info("In searchInstrumentAuthor()------------>");
				HttpSession session = request.getSession();
				UserObject userobj = (UserObject) session.getAttribute("userobject");
				String userId="";
				String branchId="";
				if(userobj!=null){
					userId=userobj.getUserId();
					branchId=userobj.getBranchId();
				}else{
					logger.info(" in searchInstrumentAuthor method of InstrumentUpdateAction action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
				Object sessionId = session.getAttribute("sessionID");

				ServletContext context = getServlet().getServletContext();
				String strFlag="";	
				
				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				session.removeAttribute("arryList");
				session.removeAttribute("arrList");
				session.removeAttribute("deleteAuthor");
				request.removeAttribute("deleteAuthor");
				session.removeAttribute("loanID");
				session.removeAttribute("author");
				session.removeAttribute("releasenotCheck");
				session.removeAttribute("notCheck");
				
				 logger.info("current page link .......... "+request.getParameter("d-49520-p"));
					
					int currentPageLink = 0;
					if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
					{
						currentPageLink=1;
					}
					else
					{
						currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
					}
					
					logger.info("current page link ................ "+request.getParameter("d-49520-p"));
					
					instructionCapMakerVO.setCurrentPageLink(currentPageLink);
					

				String alertMsg="";
				
				DynaValidatorForm InstrumentCapturingMakerFirstDynaValidatorForm = (DynaValidatorForm)form;
			
				
				instructionCapMakerVO.setBranchId(branchId);
				instructionCapMakerVO.setUserID(userId);
				
				org.apache.commons.beanutils.BeanUtils.copyProperties(instructionCapMakerVO, InstrumentCapturingMakerFirstDynaValidatorForm);

//				if(CommonFunction.checkNull(instructionCapMakerVO.getReportingToUserId()).equalsIgnoreCase(""))
//						{ 
//					instructionCapMakerVO.setReportingToUserId(userId);
//						   //logger.info("When user id is not selected by the user:::::"+userId);
//						}
//						logger.info("user Id:::::"+instructionCapMakerVO.getReportingToUserId());
				InstrumentCapturingDAO dao=(InstrumentCapturingDAO)DaoImplInstanceFactory.getDaoImplInstance(InstrumentCapturingDAO.IDENTITY);
				logger.info("Implementation class: "+dao.getClass()); 
				if(!CommonFunction.checkNull(instructionCapMakerVO.getLbxLoanNoHID()).trim().equals("") ||!CommonFunction.checkNull(instructionCapMakerVO.getLbxBankID()).trim().equals("")  || !CommonFunction.checkNull(instructionCapMakerVO.getInstrumentType()).trim().equals("") || !CommonFunction.checkNull(instructionCapMakerVO.getLbxProductID()).trim().equals("")|| !CommonFunction.checkNull(instructionCapMakerVO.getLbxUserId()).trim().equals(""))
				{
			    ArrayList<InstructionCapMakerVO> searchInstrumentAuthorList=dao.searchUpdateInstrumentAuthor(instructionCapMakerVO);
			    if(searchInstrumentAuthorList.size() > 0){
			    	alertMsg = "Y";
			    	request.setAttribute("alertMsg", alertMsg);
			    
			    }else{
			    	alertMsg = "N";
			    	request.setAttribute("alertMsg", alertMsg);
			    }
			    
			    
			   // logger.info("Size of searchInstrumentAuthorList--"+searchInstrumentAuthorList.size());
			    request.setAttribute("list",searchInstrumentAuthorList );
				}
			    request.setAttribute("instrumentCapturingAuthorSearch", "instrumentCapturingAuthorSearch");
			    request.setAttribute("author", "author");
			    
		        return mapping.findForward("searchInstrumentAuthorList");
	}
	
   public ActionForward newUpdateInstrument(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {

				logger.info(" In the newUpdateInstrument------------>");
				HttpSession session = request.getSession();
				
				UserObject userobj = (UserObject) session.getAttribute("userobject");
				//String userId="";
				if(userobj==null)
				{
				logger.info(" in  newUpdateInstrument ----------------");
					return mapping.findForward("sessionOut");
				}
				
				InstrumentCapturingDAO dao=(InstrumentCapturingDAO)DaoImplInstanceFactory.getDaoImplInstance(InstrumentCapturingDAO.IDENTITY);
				logger.info("Implementation class: "+dao.getClass()); 
				ArrayList purposeList = dao.instrumentPurposeList();
				//logger.info(" In the newInstrument-"+purposeList.get(0));
				request.setAttribute("purposeList", purposeList);
				ArrayList ecsTransactionCodeList = dao.instrumentecsTransactionCodeList();
				//logger.info(" In the newInstrument-"+ecsTransactionCodeList.get(0));
				request.setAttribute("ecsTransactionCodeList", ecsTransactionCodeList);
				
				ArrayList customeracTypeList = dao.instrumentcustomeracTypeList();
				//logger.info(" In the newInstrument-"+customeracTypeList.get(0));
				request.setAttribute("customeracTypeList", customeracTypeList);
				
				
				ArrayList spnserBnkBrncCodeList = dao.instrumentspnserBnkBrncCodeList();
				//logger.info(" In the newInstrument-"+spnserBnkBrncCodeList.get(0));
				request.setAttribute("spnserBnkBrncCodeList", spnserBnkBrncCodeList);
				
				ArrayList utilityNoList = dao.instrumentutilityNoList();
				//logger.info(" In the newInstrument-"+utilityNoList.get(0));
				request.setAttribute("utilityNoList", utilityNoList);
				
				String pdcPartialForward = dao.pdcPartialForward();
				request.setAttribute("pdcPartialForward", pdcPartialForward);
				
				String ecsInstDiffList = dao.getInstallmentDiff();
				request.setAttribute("installmentDiff",ecsInstDiffList);
				//logger.info(" In the newInstrument-"+ecsInstDiffList);
				// Start Prashant here
				String customerTypeCheckQuery="select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY = 'ALERT_CUSTOMIZE'";
				logger.info("customerTypeCheckQuery------"+customerTypeCheckQuery);
				String customerTypeStatus = ConnectionDAO.singleReturn(customerTypeCheckQuery);
				logger.info("customerTypeStatus------"+customerTypeStatus);
				request.setAttribute("customerTypeStatus",customerTypeStatus);
				// End Prashant here
				//code added by neeraj tripathi
				CreditProcessingDAO detail=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
		        logger.info("Implementation class: "+dao.getClass()); 
				//CreditProcessingDAO detail = new CreditProcessingDAOImpl();
				ArrayList<ApplicantTypeVO> applist = detail.getApplicantList();
				String dfltACType = detail.getDefaultAccountType();
				request.setAttribute("dfltACType",dfltACType);
				request.setAttribute("applist", applist);
				session.setAttribute("readyToForard", "");
				session.removeAttribute("readyToForard");
				ArrayList<InstructionCapMakerVO> clearingTypeList = dao.getClearingType();
				request.setAttribute("clearingTypeList", clearingTypeList);
				//tripathi's space end
								
				
				session.removeAttribute("arrList");
				return mapping.findForward("success");
		}
	
	public ActionForward updateInstrument(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception{
		
				logger.info(" In the updateInstrument()------------>");
				HttpSession session = request.getSession();
				
				UserObject userobj = (UserObject) session.getAttribute("userobject");
				String userId="";
				if(userobj!=null)
				{
					userId=userobj.getUserId();
				}else{
					logger.info(" in  updateInstrument InstrumentUpdateAction action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
				
				
				Object sessionId = session.getAttribute("sessionID");
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	

				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				int id=0;
				if(request.getAttribute("loanID")!=null)
				{
					id=Integer.parseInt(request.getAttribute("loanID").toString());
				}
				else if(request.getParameter("loanID")!=null)
				{
					id=Integer.parseInt(request.getParameter("loanID"));
				}
				
				String fromIns="";
				String toIns="";
				String  insMode="";
				if(request.getParameter("fromIns")!=null && request.getParameter("fromIns")!="")
				{
					fromIns=request.getParameter("fromIns");
				}
				if(request.getParameter("toIns")!=null && request.getParameter("toIns")!="")
				{
					toIns=request.getParameter("toIns");
				}
				
				if(request.getParameter("insMode")!=null && request.getParameter("insMode")!="")
				{
					insMode=request.getParameter("insMode");
				}
				
				
				logger.info("fromIns :::::::::::::::::::::: "+fromIns);
				logger.info("toIns :::::::::::::::::::::: "+toIns);
				logger.info("insMode :::::::::::::::::::::: "+insMode);
	           logger.info(" ID is---"+id);
	
				InstrumentCapturingDAO dao=(InstrumentCapturingDAO)DaoImplInstanceFactory.getDaoImplInstance(InstrumentCapturingDAO.IDENTITY);
				logger.info("Implementation class: "+dao.getClass()); 
				
				String loanID = request.getParameter("loanID");

				//InstrumentCapturingDAO service = new InstrumentCapturingDAOImpl();
				
				logger.info("function id is ........................................"+session.getAttribute("functionId"));
				String functionId="";
				
				if(session.getAttribute("functionId")!=null)
				{
					functionId=session.getAttribute("functionId").toString();
				}
				
				
				//ServletContext context=getServlet().getServletContext();
				if(context!=null)
				{
				boolean flag = LockRecordCheck.lockCheck(userId,functionId,loanID,context);
				logger.info("Flag ........................................ "+flag);
				if(!flag)
				{
					logger.info("Record is Locked");			
					request.setAttribute("alertMsg", "Locked");
					request.setAttribute("recordId", loanID);
					 request.setAttribute("maker", "maker");
					//return mapping.findForward("searchInstrumentList");
					 return mapping.getInputForward();
				}
				}
				
			     logger.info("Implementation class: "+cdao.getClass());
				ArrayList<InstructionCapMakerVO> arryList = cdao.getretriveCutInsValues(id);
			
				ArrayList<InstructionCapMakerVO> arrList= dao.OpenInstrumentForEdit(id,fromIns,toIns,insMode);
				ArrayList purposeList = dao.instrumentPurposeList();
				//logger.info(" In the newInstrument-"+purposeList.get(0));
				request.setAttribute("purposeList", purposeList);
				ArrayList ecsTransactionCodeList = dao.instrumentecsTransactionCodeList();
				//logger.info(" In the newInstrument-"+ecsTransactionCodeList.get(0));
				request.setAttribute("ecsTransactionCodeList", ecsTransactionCodeList);
				
				ArrayList customeracTypeList = dao.instrumentcustomeracTypeList();
				//logger.info(" In the newInstrument-"+customeracTypeList.get(0));
				request.setAttribute("customeracTypeList", customeracTypeList);
				
				ArrayList spnserBnkBrncCodeList = dao.instrumentspnserBnkBrncCodeList();
				//logger.info(" In the newInstrument-"+spnserBnkBrncCodeList.get(0));
				request.setAttribute("spnserBnkBrncCodeList", spnserBnkBrncCodeList);
				
				ArrayList utilityNoList = dao.instrumentutilityNoList();
				//logger.info(" In the newInstrument-"+utilityNoList.get(0));
				request.setAttribute("utilityNoList", utilityNoList);
				
				
				String ecsInstDiffList = dao.getInstallmentDiff();
				request.setAttribute("installmentDiff",ecsInstDiffList);
				//logger.info(" In update instrument  maker newInstrument-"+ecsInstDiffList);
				
				
				logger.info("ArrayList is--- "+arrList.size());		
				
				String pdcPartialForward = dao.pdcPartialForward();
				
				if(arrList.size() > 0){
					request.setAttribute("arrList", arrList);					
				}
				
				if(arryList.size() > 0){
					request.setAttribute("arryList", arryList);			
				}
				
				request.setAttribute("pdcPartialForward", pdcPartialForward);
				ArrayList insNonInsFlag = dao.insNonIns(id);
				logger.info("insNonInsFlag is--- "+insNonInsFlag);	
				request.setAttribute("insNonInsFlag", insNonInsFlag);
//				request.setAttribute("arryList", arryList);
//				request.setAttribute("arrList", arrList);
				// Start Prashant here
				String customerTypeCheckQuery="select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY = 'ALERT_CUSTOMIZE'";
				logger.info("customerTypeCheckQuery------"+customerTypeCheckQuery);
				String customerTypeStatus = ConnectionDAO.singleReturn(customerTypeCheckQuery);
				logger.info("customerTypeStatus------"+customerTypeStatus);
				request.setAttribute("customerTypeStatus",customerTypeStatus);
				// End Prashant here
				//Code added by neeraj tripathi
				CreditProcessingDAO detail=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
		        logger.info("Implementation class: "+dao.getClass()); // changed by asesh
				ArrayList<ApplicantTypeVO> applist = detail.getApplicantList();
				String dfltACType = detail.getDefaultAccountType();
				request.setAttribute("dfltACType",dfltACType);
				request.setAttribute("applist", applist);
				request.setAttribute("fromIns", fromIns);
				request.setAttribute("toIns", toIns);
				request.setAttribute("insMode", insMode);
				session.setAttribute("readyToForard", "readyToForard");
				ArrayList<InstructionCapMakerVO> clearingTypeList = dao.getClearingType();
				request.setAttribute("clearingTypeList", clearingTypeList);
				
				//tripathi's space end ,
				
				return mapping.findForward("updatedList");
		}
	
	
	public ActionForward openPopForLoanAccount(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		
				logger.info(" In the openPopForLoanAccount()------------>");
				HttpSession session = request.getSession();				
				UserObject userobj = (UserObject) session.getAttribute("userobject");
				//String userId="";
				if(userobj==null)
				{
				logger.info(" in  openPopForLoanAccount InstrumentCapActionForNew action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
		
				InstrumentCapturingDAO dao=(InstrumentCapturingDAO)DaoImplInstanceFactory.getDaoImplInstance(InstrumentCapturingDAO.IDENTITY);
				logger.info("Implementation class: "+dao.getClass()); 
				ArrayList<InstructionCapMakerVO> loanAccountList= dao.getLoanAccountList();
				logger.info("loanAccountList is--- "+loanAccountList.size());	
				request.setAttribute("loanAccountList", loanAccountList);
				return mapping.findForward("openPopforLoanAcc");
	}
	
	
	public ActionForward insNonIns(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		
				logger.info(" In the insNonIns-");
				HttpSession session = request.getSession();				
				UserObject userobj = (UserObject) session.getAttribute("userobject");
				//String userId="";
				if(userobj==null)
				{
				logger.info(" in  openPopForLoanAccount InstrumentCapActionForNew action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
				InstrumentCapturingDAO dao=(InstrumentCapturingDAO)DaoImplInstanceFactory.getDaoImplInstance(InstrumentCapturingDAO.IDENTITY);
				logger.info("Implementation class: "+dao.getClass()); 
				int lbxLoanNoHID = Integer.parseInt(request.getParameter("lbxLoanNoHID"));
				ArrayList insNonInsFlag = dao.insNonIns(lbxLoanNoHID);
				logger.info("insNonInsFlag is--- "+insNonInsFlag);	
				request.setAttribute("insNonInsFlag", insNonInsFlag);
				return mapping.findForward("insNonInsFlag");
	}
	
	
	public ActionForward deleteInstrument(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		
				logger.info(" in deleteInstrument()---->");
				HttpSession session = request.getSession();				
				UserObject userobj = (UserObject) session.getAttribute("userobject");
				//String userId="";
				if(userobj==null)
				{
				logger.info(" in  InstrumentUpdateAction action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
				boolean status =false;
				
				InstrumentCapturingDAO dao=(InstrumentCapturingDAO)DaoImplInstanceFactory.getDaoImplInstance(InstrumentCapturingDAO.IDENTITY);
				logger.info("Implementation class: "+dao.getClass()); 
				int loanID = Integer.parseInt(request.getParameter("id"));
				String alertMsg = "";
				logger.info("loanID"+loanID);
				String id[] = request.getParameterValues("chk");
				for(int k=0;k<id.length;k++)
				{
					logger.info("id: "+id[k]);
					
					status = dao.deleteInstrumentFromTemp(id[k]);
					
				}
//				ArrayList<InstructionCapMakerVO> arryList = cdao.getretriveCutInsValues(id);
//				if(arryList.size() > 0){
//					request.setAttribute("arryList", arryList);			
//				}
				if(status){
			    	alertMsg = "Y";
			    	request.setAttribute("alertMsgfrDel", alertMsg);
			    	session.removeAttribute("arrList");
			    
			    }else{
			    	alertMsg = "N";
			    	request.setAttribute("alertMsgfrDel", alertMsg);
			    }
				
				request.setAttribute("loanID", loanID);
				return mapping.findForward("deleteInstrument");
	}
		
	public ActionForward instrumentUpdatedAuthor(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		        logger.info(" In the instrumentUpdatedAuthor-()---------"); 
				
				HttpSession session = request.getSession();
				UserObject userobj = (UserObject) session.getAttribute("userobject");
				String userId="";
				if(userobj!=null)
				{
					userId = userobj.getUserId();
				}else{
					logger.info(" in instrumentUpdatedAuthor method the session is out----------------");
					return mapping.findForward("sessionOut");
				}
				
				String sessionId = session.getAttribute("sessionID").toString();
				
				ServletContext context = getServlet().getServletContext();
				String strFlag="";	

				if(sessionId!=null)
				{
					strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
				}
				
				logger.info("strFlag .............. "+strFlag);
				if(!strFlag.equalsIgnoreCase(""))
				{
					if(strFlag.equalsIgnoreCase("sameUserSession"))
					{
						context.removeAttribute("msg");
						context.removeAttribute("msg1");
					}
					else if(strFlag.equalsIgnoreCase("BODCheck"))
					{
						context.setAttribute("msg", "B");
					}
					return mapping.findForward("logout");
				}
				int id = Integer.parseInt(request.getParameter("id"));
				String ID = request.getParameter("id");
				
				InstrumentCapturingDAO dao=(InstrumentCapturingDAO)DaoImplInstanceFactory.getDaoImplInstance(InstrumentCapturingDAO.IDENTITY);
				logger.info("Implementation class: "+dao.getClass()); 
				
				logger.info("function id is ........................................"+session.getAttribute("functionId").toString());
				String functionId="";
				
				if(session.getAttribute("functionId")!=null)
				{
					functionId=session.getAttribute("functionId").toString();
				}
				
				
				//ServletContext context=getServlet().getServletContext();
				if(context!=null)
				{
				boolean flag = LockRecordCheck.lockCheck(userId,functionId,ID,context);
				logger.info("Flag ........................................ "+flag);
				if(!flag)
				{
					logger.info("Record is Locked");			
					request.setAttribute("alertMsg", "Locked1");
					request.setAttribute("recordId", ID);
					request.setAttribute("author", "author");
					//return mapping.findForward("searchInstrumentAuthorList");
					 return mapping.getInputForward();
				}
				}
			     logger.info("Implementation class: "+cdao.getClass());
				ArrayList<InstructionCapMakerVO> arryList = cdao.getretriveCutInsValues(id);
				ArrayList<InstructionCapMakerVO> arrList = dao.getValueForUpdateAuthor(id);
				
				logger.info("arryList is "+arryList.size());
				logger.info("ArrayList is "+arrList.size());
				session.setAttribute("arryList", arryList);
				session.setAttribute("arrList", arrList);
				session.setAttribute("loanID", id);
				session.setAttribute("author", "author");
				return mapping.findForward("instrumentAuthor");
		}
	
	public ActionForward forwardPDCInstrument(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
	throws Exception {
		
		
				logger.info("In forPDCInstrument Method-()--------");
				HttpSession session = request.getSession(); 
				String alertMsg ="";
				UserObject userObj = (UserObject)session.getAttribute("userobject");
				String makerID="";
				String bDate ="";
				if(userObj!=null){
					makerID= userObj.getUserId();
					bDate=userObj.getBusinessdate();
				}else{
					logger.info(" in forPDCInstrument the session is out----------------");
					return mapping.findForward("sessionOut");
				}
				
				InstructionCapMakerVO vo = new InstructionCapMakerVO();
				vo.setMakerID(makerID);
			    vo.setMakerDate(bDate);
				int id=Integer.parseInt(request.getParameter("id"));
				logger.info("id"+id);
				
				InstrumentCapturingDAO dao=(InstrumentCapturingDAO)DaoImplInstanceFactory.getDaoImplInstance(InstrumentCapturingDAO.IDENTITY);
				logger.info("Implementation class: "+dao.getClass()); 
			    boolean status=dao.forwardInstruments(id,vo);
			    if(status){
			    	logger.info("status1111::::::::::::::::::::::::::::: "+status);
			    	alertMsg = "Y";
			    	request.setAttribute("alertMsgforSanF", alertMsg);
			    	ArrayList purposeList = dao.instrumentPurposeList();
					logger.info(" In the newInstrument-"+purposeList.get(0));
					request.setAttribute("purposeList", purposeList);
					ArrayList ecsTransactionCodeList = dao.instrumentecsTransactionCodeList();
					logger.info(" In the newInstrument-"+ecsTransactionCodeList.get(0));
					request.setAttribute("ecsTransactionCodeList", ecsTransactionCodeList);
					
					ArrayList customeracTypeList = dao.instrumentcustomeracTypeList();
					logger.info(" In the newInstrument-"+customeracTypeList.get(0));
					request.setAttribute("customeracTypeList", customeracTypeList);
					
					ArrayList spnserBnkBrncCodeList = dao.instrumentspnserBnkBrncCodeList();
					logger.info(" In the newInstrument-"+spnserBnkBrncCodeList.get(0));
					request.setAttribute("spnserBnkBrncCodeList", spnserBnkBrncCodeList);
					
					ArrayList utilityNoList = dao.instrumentutilityNoList();
					logger.info(" In the newInstrument-"+utilityNoList.get(0));
					request.setAttribute("utilityNoList", utilityNoList);
					
					String pdcPartialForward = dao.pdcPartialForward();
					request.setAttribute("pdcPartialForward", pdcPartialForward);
			    
			    }else{
			    	alertMsg = "N";
			    	logger.info("status2222::::::::::::::::::::::::::::: "+status);
			    	request.setAttribute("alertMsgforSanF", alertMsg);
			    }
			    
			    logger.info("status" +status);
			    request.setAttribute("maker", "maker");
			    request.setAttribute("instrumentCapturingMakerSearch", "instrumentCapturingMakerSearch");
			 // Start Prashant here
				String customerTypeCheckQuery="select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY = 'ALERT_CUSTOMIZE'";
				logger.info("customerTypeCheckQuery------"+customerTypeCheckQuery);
				String customerTypeStatus = ConnectionDAO.singleReturn(customerTypeCheckQuery);
				logger.info("customerTypeStatus------"+customerTypeStatus);
				request.setAttribute("customerTypeStatus",customerTypeStatus);
				// End Prashant here
			    return mapping.findForward("instrumentForward");
			     
	    	
	}
	
	
	 public ActionForward openWindowForLnkedLoan(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)throws Exception {

				logger.info(" In the openWindowForLnkedLoan----------");
				HttpSession session = request.getSession();				
				UserObject userobj = (UserObject) session.getAttribute("userobject");
				//String userId="";
				if(userobj==null)
				{
				logger.info(" in  openWindowForLnkedLoan InstrumentCapActionForNew action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
				String id= request.getParameter("id");
				String installmentAmount = request.getParameter("installmentAmount");
				String date= request.getParameter("date");
				String loanAccNo = request.getParameter("loanAccNo");
				String installmentNo = request.getParameter("installmentNo");
				String instrumentAmount = request.getParameter("instrumentAmount");
				String instrumentID=request.getParameter("instrumentID");
				String restAllocatedAmount=request.getParameter("restAllocatedAmount");
				
	            request.setAttribute("loanId",id); 
	            request.setAttribute("installmentAmount",installmentAmount); 
	            request.setAttribute("date",date); 
	            request.setAttribute("loanAccNo",loanAccNo); 
	            request.setAttribute("installmentNo",installmentNo); 
	            request.setAttribute("instrumentAmount",instrumentAmount);
	            request.setAttribute("instrumentID",instrumentID);
	            request.setAttribute("restAllocatedAmount",restAllocatedAmount);
	            
				return mapping.findForward("openWindowForLnkedLoan");
			}
	
 
		public ActionForward savedeleteInstrumentAuthor(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
		throws Exception{
			
				logger.info("In savedeleteInstrumentAuthor-");
				boolean  flag=false;
				
				HttpSession session = request.getSession();
				UserObject userObj=(UserObject)session.getAttribute("userobject");
				String makerID="";
				String bDate ="";
				if(userObj!=null){
					makerID= userObj.getUserId();
					bDate=userObj.getBusinessdate();
				}else{
					logger.info(" in savedeleteInstrumentAuthor method of InstrumentCapActionForNew action the session is out----------------");
					return mapping.findForward("sessionOut");
				}
				DynaValidatorForm InstrumentCapturingMakerFirstDynaValidatorForm = (DynaValidatorForm)form;
				InstructionCapMakerVO instructionCapMakerVO=new InstructionCapMakerVO();
				int loanID=Integer.parseInt(request.getParameter("loanID"));
				logger.info("loanID"+loanID);
				
				String[] instrumentID =request.getParameterValues("instrumentID");
				logger.info("list _____--------"+instrumentID.length);
	
				org.apache.commons.beanutils.BeanUtils.copyProperties(instructionCapMakerVO, InstrumentCapturingMakerFirstDynaValidatorForm);
				DeleteInstrumentDAO dao=(DeleteInstrumentDAO)DaoImplInstanceFactory.getDaoImplInstance(DeleteInstrumentDAO.IDENTITY);
				logger.info("Implementation class: "+dao.getClass()); 
				instructionCapMakerVO.setMakerID(makerID);
				instructionCapMakerVO.setMakerDate(bDate);
			    flag=dao.updateCommentNDecisionforDeleteIns(instructionCapMakerVO,instrumentID);
			    
		        if(flag){
			    	 request.setAttribute("savedSuccessfully", "S"); 
			     }else{
			    	 request.setAttribute("savedSuccessfully", "N");
			     }

//			    request.setAttribute("author", "author");
				return mapping.findForward("savedeleteInstrumentAuthor");
				
		}
		public ActionForward searchIndiDeleteInstrument(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)throws Exception{
			 
					 logger.info(" In the searchIndiDeleteInstrument----------");
					 	HttpSession session = request.getSession();				
						UserObject userobj = (UserObject) session.getAttribute("userobject");
						//String userId="";
						if(userobj==null)
						{
						logger.info(" in  searchIndiDeleteInstrument InstrumentCapActionForNew action the session is out----------------");
							return mapping.findForward("sessionOut");
						}
					int id=0;
					if(request.getAttribute("loanID")!=null)
					{
						id=Integer.parseInt(request.getAttribute("loanID").toString());
					}
					else if(request.getParameter("loanID")!=null)
					{
						id=Integer.parseInt(request.getParameter("loanID"));
						
					}
					logger.info(" In the----------"+id);
					DynaValidatorForm InstrumentCapturingMakerFirstDynaValidatorForm = (DynaValidatorForm)form;
					InstructionCapMakerVO instructionCapMakerVO=new InstructionCapMakerVO();	
					org.apache.commons.beanutils.BeanUtils.copyProperties(instructionCapMakerVO, InstrumentCapturingMakerFirstDynaValidatorForm);
					DeleteInstrumentDAO dao=(DeleteInstrumentDAO)DaoImplInstanceFactory.getDaoImplInstance(DeleteInstrumentDAO.IDENTITY);
					logger.info("Implementation class: "+dao.getClass()); 
				    logger.info("Implementation class: "+cdao.getClass());
					ArrayList<InstructionCapMakerVO> arryList = cdao.getretriveCutInsValues(id);
					ArrayList<InstructionCapMakerVO> arrList= dao.searchIndiDeleteInstrument(id,instructionCapMakerVO);
					logger.info("ArrayList is "+arrList.size());
					request.setAttribute("arryList", arryList);
					request.setAttribute("arrList", arrList);
					request.setAttribute("deleteMaker", "deleteMaker");
//					request.setAttribute("hold","hold");
					return mapping.findForward("searchIndiDeleteInstrument");
			}
		
		public ActionForward UpdatePDC(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
		throws Exception {
			String resultstr="success";
						LoggerMsg.info("In UpdatePDC Method---------");
						
						HttpSession session = request.getSession();					
						UserObject userobj=(UserObject)session.getAttribute("userobject");
						//UserObject userObj=(UserObject)session.getAttribute("userobject");
						String makerID="";
						String bDate ="";
						if(userobj!=null){
							makerID= userobj.getUserId();
							bDate=userobj.getBusinessdate();
						}else{
							logger.info(" in UpdatePDC method of InstrumentUpdateAction action the session is out----------------");
							return mapping.findForward("sessionOut");
						}
						//boolean flag=false;
						Object sessionId = session.getAttribute("sessionID");
						DynaValidatorForm InstrumentCapturingMakerValidatorForm = (DynaValidatorForm)form;
						ArrayList<InstructionCapMakerVO> arrList =null;
						ArrayList<InstructionCapMakerVO> arryList=null;
						
						//for check User session start
						ServletContext context = getServlet().getServletContext();
						String strFlag="";	
						int loan_id=0;
						if(sessionId!=null)
						{
							strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
						}
						
						logger.info("strFlag .............. "+strFlag);
						if(!strFlag.equalsIgnoreCase(""))
						{
							if(strFlag.equalsIgnoreCase("sameUserSession"))
							{
								context.removeAttribute("msg");
								context.removeAttribute("msg1");
							}
							else if(strFlag.equalsIgnoreCase("BODCheck"))
							{
								context.setAttribute("msg", "B");
							}
							return mapping.findForward("logout");
						}


						
						String alertMsg ="";
						InstructionCapMakerVO instructionCapMakerVO=new InstructionCapMakerVO();	
						
						org.apache.commons.beanutils.BeanUtils.copyProperties(instructionCapMakerVO, InstrumentCapturingMakerValidatorForm);
						instructionCapMakerVO.setMakerID(makerID);
						instructionCapMakerVO.setMakerDate(bDate);
						String type = instructionCapMakerVO.getInstrumentType();
						InstrumentCapturingDAO dao=(InstrumentCapturingDAO)DaoImplInstanceFactory.getDaoImplInstance(InstrumentCapturingDAO.IDENTITY);
						logger.info("Implementation class: "+dao.getClass()); 
						String xid=request.getParameter("id");
						int id=0;
						if(!CommonFunction.checkNull(xid).equalsIgnoreCase(""))
						 id=Integer.parseInt(xid);
						
						ArrayList InstrumentCheck = null;
						InstrumentCheck = ConnectionDAO.sqlSelect("SELECT 1 FROM cr_pdc_instrument_dtl WHERE PDC_LOAN_ID='"+instructionCapMakerVO.getLbxLoanNoHID()+"' AND PDC_STATUS='P' AND PDC_ISSUEING_BANK_ID='"+instructionCapMakerVO.getLbxBankID()+"' AND PDC_ISSUEING_BRANCH_ID='"+instructionCapMakerVO.getLbxBranchID()+"' AND PDC_INSTRUMENT_NO BETWEEN '"+instructionCapMakerVO.getStartingChequeNo()+"' and '"+instructionCapMakerVO.getEndingChequeNo()+"'AND PDC_ISSUEING_BANK_ACCOUNT='"+instructionCapMakerVO.getBankAccount()+"'");	
						
						
//						
							logger.info("InstrumentCheck **************** "+InstrumentCheck.size());
//							request.setAttribute("alertMsg", "I");
//							return mapping.getInputForward();
							boolean status =false;
						if(InstrumentCheck.size()<= 0)
						{
							
							
						
							
							String ids[] = request.getParameterValues("chk");
							for(int k=0;k<ids.length;k++)
							{
								logger.info("id: "+ids[k]);
								instructionCapMakerVO.setInstrumentID(ids[k]);
								status =dao.UpdateListToGeneratePDC(instructionCapMakerVO);
								
							}
//							if(status){
//						    	alertMsg = "Y";
//						    	request.setAttribute("alertMsgfrUpdate", alertMsg);
//						    	session.removeAttribute("arrList");
//						    
//						    }else{
//						    	alertMsg = "N";
//						    	request.setAttribute("alertMsgfrUpdate", alertMsg);
//						    }
							loan_id =Integer.parseInt(CommonFunction.checkNull(instructionCapMakerVO.getLbxLoanNoHID()).trim());
							String fromIns =CommonFunction.checkNull(instructionCapMakerVO.getFromInstallment()).trim();
							String toIns = CommonFunction.checkNull(instructionCapMakerVO.getToInstallment()).trim();
							String pdcMode= CommonFunction.checkNull(instructionCapMakerVO.getInstrumentType()).trim();
						 arrList=dao.OpenInstrumentForEdit(loan_id,fromIns,toIns,pdcMode);
						 logger.info("arrList SIZE--"+arrList.size());
						
																			
																			
//								      arrList=dao.insertListECS(instructionCapMakerVO);
//									  arryList = dao.getretriveCutInsValues(id);
//									request.setAttribute("alertMsg", alertMsg);
						 
					    	
						
						 if((arrList.size() > 0)){
							 logger.info("arrList SIZE-1-->"+arrList.size());
							 logger.info("type----->"+type);
							 if(type.equalsIgnoreCase("Q"))
							 {
						    	alertMsg = "Q";
						    	request.setAttribute("alertMsg", alertMsg);
						    	session.setAttribute("arrList",arrList);
						    	request.setAttribute("arrList", arrList);
							 }
							 else if(type.equalsIgnoreCase("E"))
							 {
								 alertMsg = "E";
							    request.setAttribute("alertMsg", alertMsg);
							    session.setAttribute("arrList",arrList);
						    	request.setAttribute("arrList", arrList);
							 }
							 else if(type.equalsIgnoreCase("DIR"))
							 {
								 alertMsg = "D";
							    request.setAttribute("alertMsg", alertMsg);
							    session.setAttribute("arrList",arrList);
						    	request.setAttribute("arrList", arrList);
							 }
							 else if(type.equalsIgnoreCase("H"))
							 {
								 alertMsg = "H";
							    request.setAttribute("alertMsg", alertMsg);
							    session.setAttribute("arrList",arrList);
						    	request.setAttribute("arrList", arrList);
							 }
						    
						    }else{
						    	if(type.equalsIgnoreCase("Q")){
						    	alertMsg = "N";
						    	request.setAttribute("alertMsg", alertMsg);
						    	 }
						    	else if (type.equalsIgnoreCase("H")){
								 alertMsg = "NH";
								    request.setAttribute("alertMsg", alertMsg);
								 }
						    else  {
								 alertMsg = "NE";
								    request.setAttribute("alertMsg", alertMsg);
								 }
						    }
						
						logger.info("In UpdatePDC Method-arrList--"+arrList.size());

//						if(arrList.size()>0){
//							logger.info("arrList SIZE-2-->"+arrList.size());
//							if(!(arrList.get(0).getProcvalue().equalsIgnoreCase("NONE"))){
//							String procval=arrList.get(0).getProcvalue();
//							
//							//request.setAttribute("procval",procval);
//					//		resultstr="procerror";
//							
//							}}
						
						}
						else
						{
							request.setAttribute("alertMsg", "I");
						}
						
						ArrayList purposeList = dao.instrumentPurposeList();
						logger.info(" In the instrumentPurposeList-"+purposeList.get(0));
						request.setAttribute("purposeList", purposeList);
						
						ArrayList ecsTransactionCodeList = dao.instrumentecsTransactionCodeList();
						logger.info(" In the instrumentecsTransactionCodeList-"+ecsTransactionCodeList.get(0));
						request.setAttribute("ecsTransactionCodeList", ecsTransactionCodeList);
						
						ArrayList customeracTypeList = dao.instrumentcustomeracTypeList();
						logger.info(" In the instrumentcustomeracTypeList-"+customeracTypeList.get(0));
						request.setAttribute("customeracTypeList", customeracTypeList);
						
						ArrayList spnserBnkBrncCodeList = dao.instrumentspnserBnkBrncCodeList();
						logger.info(" In the instrumentspnserBnkBrncCodeList-"+spnserBnkBrncCodeList.get(0));
						request.setAttribute("spnserBnkBrncCodeList", spnserBnkBrncCodeList);
						
						ArrayList utilityNoList = dao.instrumentutilityNoList();
						logger.info(" In the instrumentutilityNoList-"+utilityNoList.get(0));
						request.setAttribute("utilityNoList", utilityNoList);
						
						String pdcPartialForward = dao.pdcPartialForward();
						logger.info(" In the pdcPartialForward-");
						request.setAttribute("pdcPartialForward", pdcPartialForward);
						
						ArrayList insNonInsFlag = dao.insNonIns(loan_id);
						logger.info("insNonIns is--- "+insNonInsFlag);	
						request.setAttribute("insNonInsFlag", insNonInsFlag);
						
						
						String ecsInstDiffList = dao.getInstallmentDiff();
						request.setAttribute("installmentDiff",ecsInstDiffList);
						logger.info(" In update instrument  maker newInstrument-"+ecsInstDiffList);
						
						// Start Prashant here
						String customerTypeCheckQuery="select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY = 'ALERT_CUSTOMIZE'";
						logger.info("customerTypeCheckQuery------"+customerTypeCheckQuery);
						String customerTypeStatus = ConnectionDAO.singleReturn(customerTypeCheckQuery);
						logger.info("customerTypeStatus------"+customerTypeStatus);
						request.setAttribute("customerTypeStatus",customerTypeStatus);
						// End Prashant here
						
					    logger.info("Implementation class: "+cdao.getClass());
						arryList = cdao.getretriveCutInsValues(loan_id);
						request.setAttribute("arryList", arryList);
						logger.info("arryList is--- "+arryList.size());	
						return mapping.findForward(resultstr);
		}
		
		

		 public ActionForward insertInstrumentIntoTemp(ActionMapping mapping, ActionForm form,
					HttpServletRequest request, HttpServletResponse response)throws Exception {

					logger.info(" In the insertInstrumentIntoTemp----------");
		
					String resultstr="success";
					LoggerMsg.info("In UpdatePDC Method---------");
					
					HttpSession session = request.getSession();					
					UserObject userobj=(UserObject)session.getAttribute("userobject");
					//UserObject userObj=(UserObject)session.getAttribute("userobject");
					String makerID="";
					String bDate ="";
					if(userobj!=null){
						makerID= userobj.getUserId();
						logger.info("maker id 111111111111111111 "+makerID);
						bDate=userobj.getBusinessdate();
					}else{
						logger.info(" in UpdatePDC method of InstrumentUpdateAction action the session is out----------------");
						return mapping.findForward("sessionOut");
					}
					//boolean flag=false;
					Object sessionId = session.getAttribute("sessionID");
					DynaValidatorForm InstrumentCapturingMakerValidatorForm = (DynaValidatorForm)form;
					ArrayList<InstructionCapMakerVO> arrList =null;
					ArrayList<InstructionCapMakerVO> arryList=null;
					
					//for check User session start
					ServletContext context = getServlet().getServletContext();
					String strFlag="";	
					int loan_id=0;
					if(sessionId!=null)
					{
						strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
					}
					
					logger.info("strFlag .............. "+strFlag);
					if(!strFlag.equalsIgnoreCase(""))
					{
						if(strFlag.equalsIgnoreCase("sameUserSession"))
						{
							context.removeAttribute("msg");
							context.removeAttribute("msg1");
						}
						else if(strFlag.equalsIgnoreCase("BODCheck"))
						{
							context.setAttribute("msg", "B");
						}
						return mapping.findForward("logout");
					}


					
					String alertMsg ="";
					InstructionCapMakerVO instructionCapMakerVO=new InstructionCapMakerVO();	
					
					org.apache.commons.beanutils.BeanUtils.copyProperties(instructionCapMakerVO, InstrumentCapturingMakerValidatorForm);
					logger.info("maker id 22222222222222 "+makerID);
					instructionCapMakerVO.setMaker(makerID);
					instructionCapMakerVO.setMakerDate(bDate);
					String type = instructionCapMakerVO.getInstrumentType();
					InstrumentCapturingDAO dao=(InstrumentCapturingDAO)DaoImplInstanceFactory.getDaoImplInstance(InstrumentCapturingDAO.IDENTITY);
					logger.info("Implementation class: "+dao.getClass()); 
									
					ArrayList InstrumentCheck = null;
					InstrumentCheck = ConnectionDAO.sqlSelect("SELECT 1 FROM cr_pdc_instrument_temp_dtl WHERE PDC_LOAN_ID='"+instructionCapMakerVO.getLbxLoanNoHID()+"' AND PDC_STATUS='P' AND PDC_ISSUEING_BANK_ID='"+instructionCapMakerVO.getLbxBankID()+"' AND PDC_ISSUEING_BRANCH_ID='"+instructionCapMakerVO.getLbxBranchID()+"' AND PDC_INSTRUMENT_NO BETWEEN '"+instructionCapMakerVO.getStartingChequeNo()+"' and '"+instructionCapMakerVO.getEndingChequeNo()+"'");	
//					
						logger.info("InstrumentCheck **************** "+InstrumentCheck.size());
//						request.setAttribute("alertMsg", "I");
//						return mapping.getInputForward();
						boolean status =false;
					if(InstrumentCheck.size()<= 0)
					{
						
						String instIds = request.getParameter("id");
						if(instIds.endsWith(",")==true)
						{
							instIds = instIds.substring(0, instIds.trim().length()-1);
						}
						logger.info("Instrument idssssssssssssss.............. "+instIds);
						instructionCapMakerVO.setInstrumentSelectedIds(instIds);
						String checkedDate = request.getParameter("checkedDate");
						String[] checkedDateArr = checkedDate.split("/");
						instructionCapMakerVO.setCheckedDateArr(checkedDateArr);
						
						String checked = request.getParameter("checked");
						String[] instrumentId = checked.split("/");
						instructionCapMakerVO.setInstrumentId(instrumentId);
						
						status =dao.insertInstrumentIntoTempForUpdate(instructionCapMakerVO);
						
						
//						for(int k=0;k<ids.length;k++)
//						{
//							logger.info("id: "+ids[k]);
//							instructionCapMakerVO.setInstrumentID(ids[k]);
//							
//							
//						}
						if(status==true)
						{
							session.setAttribute("readyToForard", "readyToForard");
						}	
						
						loan_id =Integer.parseInt(CommonFunction.checkNull(instructionCapMakerVO.getLbxLoanNoHID()).trim());
						String fromIns =CommonFunction.checkNull(instructionCapMakerVO.getFromInstallment()).trim();
						String toIns = CommonFunction.checkNull(instructionCapMakerVO.getToInstallment()).trim();
						String pdcMode= CommonFunction.checkNull(instructionCapMakerVO.getInstrumentType()).trim();
					 arrList=dao.OpenInstrumentForEdit(loan_id,fromIns,toIns,pdcMode);
					 logger.info("arrList SIZE--"+arrList.size());
					

					 if((arrList.size() > 0)){
						 logger.info("arrList SIZE-1-->"+arrList.size());
						 logger.info("type----->"+type);
						 if(type.equalsIgnoreCase("Q"))
						 {
					    	alertMsg = "Q";
					    	request.setAttribute("alertMsg", alertMsg);
					    	session.setAttribute("arrList",arrList);
					    	request.setAttribute("arrList", arrList);
						 }
						 else if(type.equalsIgnoreCase("E"))
						 {
							 alertMsg = "E";
						    request.setAttribute("alertMsg", alertMsg);
						    session.setAttribute("arrList",arrList);
					    	request.setAttribute("arrList", arrList);
						 }
						 else if(type.equalsIgnoreCase("DIR"))
						 {
							 alertMsg = "D";
						    request.setAttribute("alertMsg", alertMsg);
						    session.setAttribute("arrList",arrList);
					    	request.setAttribute("arrList", arrList);
						 }
						 else if(type.equalsIgnoreCase("H"))
						 {
							 alertMsg = "H";
						    request.setAttribute("alertMsg", alertMsg);
						    session.setAttribute("arrList",arrList);
					    	request.setAttribute("arrList", arrList);
						 }
					    
					    }else{
					    	if(type.equalsIgnoreCase("Q")){
					    	alertMsg = "N";
					    	request.setAttribute("alertMsg", alertMsg);
					    }
					    	else if(type.equalsIgnoreCase("H")){
						    	alertMsg = "NH";
						    	request.setAttribute("alertMsg", alertMsg);
						    }
					    	else{
							 alertMsg = "NE";
							    request.setAttribute("alertMsg", alertMsg);
							 }
					    }
					
					logger.info("In UpdatePDC Method-arrList--"+arrList.size());

//					if(arrList.size()>0){
//						logger.info("arrList SIZE-2-->"+arrList.size());
//						if(!(arrList.get(0).getProcvalue().equalsIgnoreCase("NONE"))){
//						String procval=arrList.get(0).getProcvalue();
//						
//						//request.setAttribute("procval",procval);
//				//		resultstr="procerror";
//						
//						}}
					
					}
					else
					{
						request.setAttribute("alertMsg", "I");
					}
					
					ArrayList purposeList = dao.instrumentPurposeList();
					logger.info(" In the instrumentPurposeList-"+purposeList.get(0));
					request.setAttribute("purposeList", purposeList);
					
					ArrayList ecsTransactionCodeList = dao.instrumentecsTransactionCodeList();
					logger.info(" In the instrumentecsTransactionCodeList-"+ecsTransactionCodeList.get(0));
					request.setAttribute("ecsTransactionCodeList", ecsTransactionCodeList);
					
					ArrayList customeracTypeList = dao.instrumentcustomeracTypeList();
					logger.info(" In the instrumentcustomeracTypeList-"+customeracTypeList.get(0));
					request.setAttribute("customeracTypeList", customeracTypeList);
					
					ArrayList spnserBnkBrncCodeList = dao.instrumentspnserBnkBrncCodeList();
					logger.info(" In the instrumentspnserBnkBrncCodeList-"+spnserBnkBrncCodeList.get(0));
					request.setAttribute("spnserBnkBrncCodeList", spnserBnkBrncCodeList);
					
					ArrayList utilityNoList = dao.instrumentutilityNoList();
					logger.info(" In the instrumentutilityNoList-"+utilityNoList.get(0));
					request.setAttribute("utilityNoList", utilityNoList);
					
					String pdcPartialForward = dao.pdcPartialForward();
					logger.info(" In the pdcPartialForward-");
					request.setAttribute("pdcPartialForward", pdcPartialForward);
					
					ArrayList insNonInsFlag = dao.insNonIns(loan_id);
					logger.info("insNonIns is--- "+insNonInsFlag);	
					request.setAttribute("insNonInsFlag", insNonInsFlag);
					
					
					String ecsInstDiffList = dao.getInstallmentDiff();
					request.setAttribute("installmentDiff",ecsInstDiffList);
					logger.info(" In update instrument  maker newInstrument-"+ecsInstDiffList);
					
					// Start Prashant here
					String customerTypeCheckQuery="select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY = 'ALERT_CUSTOMIZE'";
					logger.info("customerTypeCheckQuery------"+customerTypeCheckQuery);
					String customerTypeStatus = ConnectionDAO.singleReturn(customerTypeCheckQuery);
					logger.info("customerTypeStatus------"+customerTypeStatus);
					request.setAttribute("customerTypeStatus",customerTypeStatus);
					// End Prashant here
					
				     logger.info("Implementation class: "+cdao.getClass());
					arryList = cdao.getretriveCutInsValues(loan_id);
					request.setAttribute("arryList", arryList);
					logger.info("arryList is--- "+arryList.size());	
					//code added by neeraj tripathi
					ArrayList<InstructionCapMakerVO> clearingTypeList = dao.getClearingType();
					request.setAttribute("clearingTypeList", clearingTypeList);
					//tripathi's space end
					CreditProcessingDAO detail=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
			        logger.info("Implementation class: "+dao.getClass()); // changed by asesh
					ArrayList<ApplicantTypeVO> applist = detail.getApplicantList();
					String dfltACType = detail.getDefaultAccountType();
					request.setAttribute("dfltACType",dfltACType);
					request.setAttribute("applist", applist);
					
					return mapping.findForward(resultstr);
				}
		
			
			public ActionForward searchInstrument(ActionMapping mapping, ActionForm form,
					HttpServletRequest request, HttpServletResponse response)throws Exception{
				
						logger.info(" In the searchInstrument()------------>");
						HttpSession session = request.getSession();
						
						UserObject userobj = (UserObject) session.getAttribute("userobject");
						String userId="";
						if(userobj!=null)
						{
							userId=userobj.getUserId();
						}else{
							logger.info(" in  searchInstrument InstrumentUpdateAction action the session is out----------------");
							return mapping.findForward("sessionOut");
						}
						
						
						Object sessionId = session.getAttribute("sessionID");
						ServletContext context = getServlet().getServletContext();
						String strFlag="";	

						if(sessionId!=null)
						{
							strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
						}
						
						logger.info("strFlag .............. "+strFlag);
						if(!strFlag.equalsIgnoreCase(""))
						{
							if(strFlag.equalsIgnoreCase("sameUserSession"))
							{
								context.removeAttribute("msg");
								context.removeAttribute("msg1");
							}
							else if(strFlag.equalsIgnoreCase("BODCheck"))
							{
								context.setAttribute("msg", "B");
							}
							return mapping.findForward("logout");
						}
						int id=0;
						if(request.getAttribute("loanID")!=null)
						{
							id=Integer.parseInt(request.getAttribute("loanID").toString());
						}
						else if(request.getParameter("loanID")!=null)
						{
							id=Integer.parseInt(request.getParameter("loanID"));
						}
						
						String fromIns="";
						String toIns="";
						String  insMode="";
						String  readyToForard="";
						String purpose="";
						
						if(request.getParameter("fromIns")!=null && request.getParameter("fromIns")!="")
						{
							fromIns=request.getParameter("fromIns");
						}
						if(request.getParameter("toIns")!=null && request.getParameter("toIns")!="")
						{
							toIns=request.getParameter("toIns");
						}
						
						if(request.getParameter("insMode")!=null && request.getParameter("insMode")!="")
						{
							insMode=request.getParameter("insMode");
						}
						if(request.getParameter("purpose")!=null && request.getParameter("purpose")!="")
						{
							purpose=request.getParameter("purpose");
							if(purpose.equalsIgnoreCase("PRE EMI"))
							{
								request.setAttribute("preEmiPurpose", "preEmiPurpose");
							}
						}
						
						if(session.getAttribute("readyToForard")!=null)
						{
							readyToForard=session.getAttribute("readyToForard").toString();
						}
						
						
						logger.info("fromIns :::::::::::::::::::::: "+fromIns);
						logger.info("toIns :::::::::::::::::::::: "+toIns);
						logger.info("insMode :::::::::::::::::::::: "+insMode);
			           logger.info(" ID is---"+id);
			
						InstrumentCapturingDAO dao=(InstrumentCapturingDAO)DaoImplInstanceFactory.getDaoImplInstance(InstrumentCapturingDAO.IDENTITY);
						logger.info("Implementation class: "+dao.getClass()); 
						
						String loanID = request.getParameter("loanID");

						//InstrumentCapturingDAO service = new InstrumentCapturingDAOImpl();
						
						logger.info("function id is ........................................"+session.getAttribute("functionId"));
						String functionId="";
						
						if(session.getAttribute("functionId")!=null)
						{
							functionId=session.getAttribute("functionId").toString();
						}
						
						
						//ServletContext context=getServlet().getServletContext();
						if(context!=null)
						{
						boolean flag = LockRecordCheck.lockCheck(userId,functionId,loanID,context);
						logger.info("Flag ........................................ "+flag);
						if(!flag)
						{
							logger.info("Record is Locked");			
							request.setAttribute("alertMsg", "Locked");
							request.setAttribute("recordId", loanID);
							 request.setAttribute("maker", "maker");
							//return mapping.findForward("searchInstrumentList");
							 return mapping.getInputForward();
						}
						}
					     logger.info("Implementation class: "+cdao.getClass());
						ArrayList<InstructionCapMakerVO> arryList = cdao.getretriveCutInsValues(id);
						logger.info("purpose :::::::::::::::::::::: "+purpose);
						
							request.setAttribute("purpose", purpose);
					
						ArrayList<InstructionCapMakerVO> arrList= dao.searchInstrumentForEdit(id,fromIns,toIns,insMode,readyToForard,purpose);
				
						//ArrayList<InstructionCapMakerVO> arrList= dao.searchInstrumentForEdit(id,fromIns,toIns,insMode,readyToForard);
						ArrayList purposeList = dao.instrumentPurposeList();
						//logger.info(" In the newInstrument-"+purposeList.get(0));
						request.setAttribute("purposeList", purposeList);
						ArrayList ecsTransactionCodeList = dao.instrumentecsTransactionCodeList();
						//logger.info(" In the newInstrument-"+ecsTransactionCodeList.get(0));
						request.setAttribute("ecsTransactionCodeList", ecsTransactionCodeList);
						
						ArrayList customeracTypeList = dao.instrumentcustomeracTypeList();
						//logger.info(" In the newInstrument-"+customeracTypeList.get(0));
						request.setAttribute("customeracTypeList", customeracTypeList);
						
						ArrayList spnserBnkBrncCodeList = dao.instrumentspnserBnkBrncCodeList();
						//logger.info(" In the newInstrument-"+spnserBnkBrncCodeList.get(0));
						request.setAttribute("spnserBnkBrncCodeList", spnserBnkBrncCodeList);
						
						ArrayList utilityNoList = dao.instrumentutilityNoList();
						//logger.info(" In the newInstrument-"+utilityNoList.get(0));
						request.setAttribute("utilityNoList", utilityNoList);
						
						
						String ecsInstDiffList = dao.getInstallmentDiff();
						request.setAttribute("installmentDiff",ecsInstDiffList);
						//logger.info(" In update instrument  maker newInstrument-"+ecsInstDiffList);
						
						
						logger.info("ArrayList is--- "+arrList.size());		
						
						String pdcPartialForward = dao.pdcPartialForward();
						
						if(arrList.size() > 0){
							request.setAttribute("arrList", arrList);					
						}
						
						if(arryList.size() > 0){
							request.setAttribute("arryList", arryList);			
						}
						
						request.setAttribute("pdcPartialForward", pdcPartialForward);
						ArrayList insNonInsFlag = dao.insNonIns(id);
						logger.info("insNonInsFlag is--- "+insNonInsFlag);	
						request.setAttribute("insNonInsFlag", insNonInsFlag);
//						request.setAttribute("arryList", arryList);
//						request.setAttribute("arrList", arrList);
						// Start Prashant here
						String customerTypeCheckQuery="select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY = 'ALERT_CUSTOMIZE'";
						logger.info("customerTypeCheckQuery------"+customerTypeCheckQuery);
						String customerTypeStatus = ConnectionDAO.singleReturn(customerTypeCheckQuery);
						logger.info("customerTypeStatus------"+customerTypeStatus);
						request.setAttribute("customerTypeStatus",customerTypeStatus);
						// End Prashant here
						//Code added by neeraj tripathi
						CreditProcessingDAO detail=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
				        logger.info("Implementation class: "+dao.getClass()); 		// changed by asesh
						ArrayList<ApplicantTypeVO> applist = detail.getApplicantList();
						String dfltACType = detail.getDefaultAccountType();
						request.setAttribute("dfltACType",dfltACType);
						request.setAttribute("applist", applist);
						ArrayList<InstructionCapMakerVO> clearingTypeList = dao.getClearingType();
						request.setAttribute("clearingTypeList", clearingTypeList);
						request.setAttribute("fromIns", fromIns);
						request.setAttribute("toIns", toIns);
						request.setAttribute("insMode", insMode);
						//tripathi's space end ,
						
						return mapping.findForward("updatedList");
				}
			
			
			@SuppressWarnings("unchecked")
			public ActionForward saveUpdateInstrumentAuthor(ActionMapping mapping, ActionForm form,
					HttpServletRequest request, HttpServletResponse response)
			throws IllegalAccessException, InvocationTargetException,Exception {
				
						logger.info("In saveUpdateInstrumentAuthor Method---------");
						HttpSession session = request.getSession();
						boolean flag=false;
						UserObject userobj=(UserObject)session.getAttribute("userobject");
						String userId="";
						String bDate ="";
						if(userobj!=null){
							userId= userobj.getUserId();
							bDate=userobj.getBusinessdate();
						}else{
							logger.info("here in saveUpdateInstrumentAuthor method of action the session is out----------------");
							return mapping.findForward("sessionOut");
						}
						Object sessionId = session.getAttribute("sessionID");
						//for check User session start
						ServletContext context = getServlet().getServletContext();
						String strFlag="";	
						
						if(sessionId!=null)
						{
							strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
						}
						
						logger.info("strFlag .............. "+strFlag);
						if(!strFlag.equalsIgnoreCase(""))
						{
							if(strFlag.equalsIgnoreCase("sameUserSession"))
							{
								context.removeAttribute("msg");
								context.removeAttribute("msg1");
							}
							else if(strFlag.equalsIgnoreCase("BODCheck"))
							{
								context.setAttribute("msg", "B");
							}
							return mapping.findForward("logout");
						}
						//UserObject userObj=(UserObject)session.getAttribute("userobject");
				        DynaValidatorForm InstrumentCapturingAuthorValidatorForm = (DynaValidatorForm)form;
						InstructionCapMakerVO instructionCapMakerVO=new InstructionCapMakerVO();
						int loanID=Integer.parseInt(request.getParameter("loanID"));
						logger.info("loanID"+loanID);
						org.apache.commons.beanutils.BeanUtils.copyProperties(instructionCapMakerVO, InstrumentCapturingAuthorValidatorForm);
				
						instructionCapMakerVO.setUserID(userId);
						instructionCapMakerVO.setMakerDate(bDate);
						
						InstrumentCapturingDAO dao=(InstrumentCapturingDAO)DaoImplInstanceFactory.getDaoImplInstance(InstrumentCapturingDAO.IDENTITY);
						logger.info("Implementation class: "+dao.getClass()); 
					   flag=dao.authorUpdateInstruments(instructionCapMakerVO,loanID);
					     
					    if(flag){
					    	 request.setAttribute("savedSuccessfully", "S"); 
					     }else{
					    	 request.setAttribute("savedSuccessfully", "N");
					     }
				
					     request.setAttribute("author", "author");
					     
						return mapping.findForward("success");

			}
			
			
			public ActionForward searchInstrumentAtUpdateMaker(ActionMapping mapping, ActionForm form,
					HttpServletRequest request, HttpServletResponse response)
					throws Exception {
					
						logger.info("In searchInstrumentAtUpdateMaker()----------->");
						HttpSession session = request.getSession();
						UserObject userobj = (UserObject) session.getAttribute("userobject");
						String userId="";
						String branchId="";
						if(userobj!=null)
						{
							userId=userobj.getUserId();
							branchId=userobj.getBranchId();
						}else{
							logger.info(" in searchInstrumentAtUpdateMaker method of InstrumentUpdateAction action the session is out----------------");
							return mapping.findForward("sessionOut");
						}
						InstructionCapMakerVO instructionCapMakerVO=new InstructionCapMakerVO();
						Object sessionId = session.getAttribute("sessionID");


						ServletContext context = getServlet().getServletContext();
						String strFlag="";	
						
						if(sessionId!=null)
						{
							strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
						}
						
						logger.info("strFlag .............. "+strFlag);
						if(!strFlag.equalsIgnoreCase(""))
						{
							if(strFlag.equalsIgnoreCase("sameUserSession"))
							{
								context.removeAttribute("msg");
								context.removeAttribute("msg1");
							}
							else if(strFlag.equalsIgnoreCase("BODCheck"))
							{
								context.setAttribute("msg", "B");
							}
							return mapping.findForward("logout");
						}
						session.removeAttribute("arryList");
						session.removeAttribute("arrList");
						session.removeAttribute("loanID");
						session.removeAttribute("author");
						session.removeAttribute("releasenotCheck");
						session.removeAttribute("notCheck");
						
						 logger.info("current page link .......... "+request.getParameter("d-49520-p"));
							
							int currentPageLink = 0;
							if(request.getParameter("d-49520-p")==null || request.getParameter("d-49520-p").equalsIgnoreCase("0"))
							{
								currentPageLink=1;
							}
							else
							{
								currentPageLink =Integer.parseInt(request.getParameter("d-49520-p"));
							}
							
							logger.info("current page link ................ "+request.getParameter("d-49520-p"));
							
							instructionCapMakerVO.setCurrentPageLink(currentPageLink);
							
							
						String alertMsg ="";
						
						DynaValidatorForm InstrumentCapturingMakerFirstDynaValidatorForm = (DynaValidatorForm)form;
						org.apache.commons.beanutils.BeanUtils.copyProperties(instructionCapMakerVO, InstrumentCapturingMakerFirstDynaValidatorForm);

						if(CommonFunction.checkNull(instructionCapMakerVO.getReportingToUserId()).equalsIgnoreCase(""))
								{ 
							instructionCapMakerVO.setReportingToUserId(userId);
								   //logger.info("When user id is not selected by the user:::::"+userId);
								}
								logger.info("user Id:::::"+instructionCapMakerVO.getReportingToUserId());
								instructionCapMakerVO.setBranchId(branchId);
								instructionCapMakerVO.setUserID(userId);
								InstrumentCapturingDAO dao=(InstrumentCapturingDAO)DaoImplInstanceFactory.getDaoImplInstance(InstrumentCapturingDAO.IDENTITY);
								logger.info("Implementation class: "+dao.getClass()); 
					    ArrayList<InstructionCapMakerVO> searchInstrumentList=dao.searchInstrumentToUpdate(instructionCapMakerVO);
					    logger.info("Size of searchInstrumentList-searchInstrumentAtUpdateMaker()-->"+searchInstrumentList.size());
					    if(searchInstrumentList.size() > 0){
					    	alertMsg = "Y";
					    	request.setAttribute("alertMsg", alertMsg);
					    
					    }else{
					    	alertMsg = "N";
					    	request.setAttribute("alertMsg", alertMsg);
					    }
					    request.setAttribute("instrumentCapturingMakerSearch", "instrumentCapturingMakerSearch");
					    request.setAttribute("list",searchInstrumentList );
					    request.setAttribute("maker", "maker");
					 // Start Prashant here
						String customerTypeCheckQuery="select PARAMETER_VALUE from parameter_mst where PARAMETER_KEY = 'ALERT_CUSTOMIZE'";
						logger.info("customerTypeCheckQuery------"+customerTypeCheckQuery);
						String customerTypeStatus = ConnectionDAO.singleReturn(customerTypeCheckQuery);
						logger.info("customerTypeStatus------"+customerTypeStatus);
						request.setAttribute("customerTypeStatus",customerTypeStatus);
						// End Prashant here
				        return mapping.findForward("searchInstrumentMaker");
			}
			
			
}