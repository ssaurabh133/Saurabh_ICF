/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.apache.struts.validator.DynaValidatorForm;

import com.cm.dao.LinkLoanDAO;
import com.cm.vo.UpdateAssetVO;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

public class UpdateAssetDispatchAction extends DispatchAction {
	private static final Logger logger = Logger.getLogger(UpdateAssetDispatchAction.class.getName());

	public ActionForward openEditVehical(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws Exception {

		logger.info("In openEditVehical");
		ServletContext context = getServlet().getServletContext();
		HttpSession session = request.getSession();
		UserObject userobj = (UserObject) session.getAttribute("userobject");
		if (userobj == null) {
			logger.info("here in execute method of UpdateAssetBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		} 
		Object sessionId = session.getAttribute("sessionID");
		// for check User session start
		String strFlag = "";
		if (sessionId != null) {
			strFlag = UserSessionCheck.checkSameUserSession(userobj, sessionId
					.toString(), "", request);
		}

		logger.info("strFlag .............. " + strFlag);
		if (!strFlag.equalsIgnoreCase("")) {
			if (strFlag.equalsIgnoreCase("sameUserSession")) {
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			} else if (strFlag.equalsIgnoreCase("BODCheck")) {
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		session.removeAttribute("userId");//For lov
		session.removeAttribute("branchId");//For lov
		session.removeAttribute("sessionAssetVehicalList");//For Author Screen
		session.removeAttribute("invoiceCheckBox");//For Check Box
		session.removeAttribute("rcCheckBox");//For Check Box
		session.removeAttribute("insuranceCheckBox");//For Check Box
		UpdateAssetVO updateAssetVO = new UpdateAssetVO();
		updateAssetVO.setLbxLoanId(request.getParameter("loanId"));
		updateAssetVO.setAssetId(request.getParameter("assetId"));

		LinkLoanDAO dao = (LinkLoanDAO) DaoImplInstanceFactory
				.getDaoImplInstance(LinkLoanDAO.IDENTITY);
		logger.info("Implementation class: " + dao.getClass());

		ArrayList list = dao.openEditVehical(updateAssetVO);
		request.setAttribute("list", list);
		ArrayList assetlist = dao.getUpdatedVehical(updateAssetVO.getLbxLoanId());
		     request.setAttribute("assetlist", assetlist);

		if (!list.isEmpty()) {
			updateAssetVO = (UpdateAssetVO) list.get(0);
		
			 if(CommonFunction.checkNull(updateAssetVO.getInvoiceUpdateCheckBox()).equalsIgnoreCase("Y"))
			 {
				 request.setAttribute("invoiceCheckBox", "Y");
			 }
			 if(CommonFunction.checkNull(updateAssetVO.getRcUpdateCheckBox()).equalsIgnoreCase("Y"))
			 {
				request.setAttribute("rcCheckBox", "Y");
			 }
			 if(CommonFunction.checkNull(updateAssetVO.getInsuranceUpdateCheckBox()).equalsIgnoreCase("Y"))
			 {
				 request.setAttribute("insuranceCheckBox", "Y");
			 }
		}

		request.setAttribute("saveFirst", "Y");
		updateAssetVO=null;
		dao=null;
		form.reset(mapping, request);
		return mapping.findForward("editvehical");
	}

	public ActionForward updateAsset(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		
		logger.info("In updateAsset.......");
		
		ServletContext context = getServlet().getServletContext();
	
		HttpSession session = request.getSession();
		String userId = null;
		String makerDate = null;
		UserObject userobj = (UserObject) session.getAttribute("userobject");
		if (userobj != null) {
			userId = userobj.getUserId();
			makerDate=userobj.getBusinessdate();
		} else {
			logger.info("here in execute method of UpdateAssetBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		// for check User session start
		String strFlag = null;
		if (sessionId != null) {
			strFlag = UserSessionCheck.checkSameUserSession(userobj, sessionId
					.toString(), "", request);
		}

		logger.info("strFlag .............. " + strFlag);
		if (!strFlag.equalsIgnoreCase("")) {
			if (strFlag.equalsIgnoreCase("sameUserSession")) {
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			} else if (strFlag.equalsIgnoreCase("BODCheck")) {
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		session.removeAttribute("sessionAssetVehicalList");//For Author Screen
		session.removeAttribute("invoiceCheckBox");//For Check Box
		session.removeAttribute("rcCheckBox");//For Check Box
		session.removeAttribute("insuranceCheckBox");//For Check Box
		UpdateAssetVO updateAssetVO = new UpdateAssetVO();
		DynaValidatorForm UpdateVehicleDynaValidatorForm = (DynaValidatorForm) form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(updateAssetVO,
				UpdateVehicleDynaValidatorForm);
		
		
		
		updateAssetVO.setUserId(CommonFunction.checkNull(userId));
		updateAssetVO.setMakerDate(CommonFunction.checkNull(makerDate));
		String loanId=CommonFunction.checkNull(request.getParameter("loanId"));
		String assetId=CommonFunction.checkNull(request.getParameter("assetId"));
		
		updateAssetVO.setLbxLoanId(loanId);
		updateAssetVO.setAssetId(assetId);
	    String statusFlag=CommonFunction.checkNull(request.getParameter("saveFlag"));
		
		updateAssetVO.setStatusFlag(statusFlag);
		

		LinkLoanDAO dao = (LinkLoanDAO) DaoImplInstanceFactory.getDaoImplInstance(LinkLoanDAO.IDENTITY);
		 logger.info("Implementation class: " + dao.getClass());
		      ArrayList assetlist = dao.getUpdatedVehical(updateAssetVO.getLbxLoanId());
		      request.setAttribute("assetlist", assetlist);
		String sms = null;
		// ArrayList list = dao.openEditVehical(updateAssetVO);
		String checkRegNoCount=dao.checkRegNo(updateAssetVO);
		
		//logger.info("## In updateAsset() : checkRegNoCount : ==>> "+checkRegNoCount);
		
		//changes
		
		//change by richa
		
		String var=request.getParameter("strChasisFlag");
		String enginNo="0";
		String chesisNoCheck="0";
		String regNo="0";
		String chasisFlag="N";
		String engineFlag="N";
		String regNFlag="N";
		String vehicalUpdt="";
		if(CommonFunction.checkNull(var).equalsIgnoreCase(""))
		{
		
		logger.info("strChasisFlag:::"+var);
		if(!CommonFunction.checkNull(updateAssetVO.getVehicleChesisNo()).equalsIgnoreCase("")||!CommonFunction.checkNull(updateAssetVO.getEngineNumber()).equalsIgnoreCase("")||!CommonFunction.checkNull(updateAssetVO.getVehicleRegNo()).equalsIgnoreCase(""))
		{
			logger.info("in if :::"+updateAssetVO.getVehicleChesisNo());
			
			
			if(!CommonFunction.checkNull(updateAssetVO.getVehicleChesisNo()).equalsIgnoreCase(""))
			{
				logger.info("in if for chasis:::"+updateAssetVO.getVehicleChesisNo());
				chesisNoCheck=dao.checkChesisNoVehicle(updateAssetVO);
				if(CommonFunction.checkNull(chesisNoCheck).equalsIgnoreCase("0"))
				{
				   chasisFlag="N";
				}
				else{
					chasisFlag="Y";
				}
				logger.info("in if for chasis111111:::"+chasisFlag);
			}
			if(!CommonFunction.checkNull(updateAssetVO.getEngineNumber()).equalsIgnoreCase(""))
			{
				logger.info("in if for engine:::"+updateAssetVO.getEngineNumber());
				enginNo=dao.checkEnginNoVehicle(updateAssetVO);
				if(CommonFunction.checkNull(enginNo).equalsIgnoreCase("0"))
				{
					engineFlag="N";
				}
				else{
					engineFlag="Y";
				}
			}
			if(!CommonFunction.checkNull(updateAssetVO.getVehicleRegNo()).equalsIgnoreCase(""))
			{
				logger.info("in if for REgNo:::"+updateAssetVO.getVehicleRegNo());
				regNo=dao.checkRegNoVehicle(updateAssetVO);
				if(CommonFunction.checkNull(regNo).equalsIgnoreCase("0"))
				{
					regNFlag="N";
				}
				else{
					regNFlag="Y";
				}
				logger.info("regNFlag for REgNo:::"+regNFlag);
			}
			ArrayList list = new ArrayList();
			if(CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&!CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&!CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y"))
			{
				vehicalUpdt="CHASIS";
				request.setAttribute("vehicalUpdt", vehicalUpdt);
				request.setAttribute("action","action");
	    		request.setAttribute("actype", "ASSET");
	    		request.setAttribute("ASSET","ASSET");
	    		list.add(updateAssetVO);
	    		request.setAttribute("list",list);
	    		
	    	   logger.info("vehicalUpdt:::"+vehicalUpdt);
				return mapping.getInputForward();
			}
			if(!CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&!CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y"))
			{
				vehicalUpdt="ENGINE";
				request.setAttribute("vehicalUpdt", vehicalUpdt);
				request.setAttribute("action","action");
	    		request.setAttribute("actype", "ASSET");
	    		request.setAttribute("ASSET","ASSET");
	    		list.add(updateAssetVO);
	    		request.setAttribute("list",list);
				 return mapping.getInputForward();  
			}
			if(!CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&!CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y"))
			{
				vehicalUpdt="REGNO";
				request.setAttribute("vehicalUpdt", vehicalUpdt);
				request.setAttribute("action","action");
	    		request.setAttribute("actype", "ASSET");
	    		request.setAttribute("ASSET","ASSET");
	    		list.add(updateAssetVO);
	    		request.setAttribute("list",list);
				return mapping.getInputForward();
			}
			if(!CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y"))
			{
				vehicalUpdt="ENGINE_REGNO";
				request.setAttribute("vehicalUpdt", vehicalUpdt);
				request.setAttribute("action","action");
	    		request.setAttribute("actype", "ASSET");
	    		request.setAttribute("ASSET","ASSET");
	    		list.add(updateAssetVO);
	    		request.setAttribute("list",list);
				 return mapping.getInputForward();
			}
			if(CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&!CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y"))
			{
				vehicalUpdt="CHASIS_REGNO";
				request.setAttribute("vehicalUpdt", vehicalUpdt);
				request.setAttribute("action","action");
	    		request.setAttribute("actype", "ASSET");
	    		request.setAttribute("ASSET","ASSET");
	    		list.add(updateAssetVO);
	    		request.setAttribute("list",list);
				 return mapping.getInputForward(); 
			}
			if(CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&!CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y"))
			{
				vehicalUpdt="CHASIS_ENGINE";
				request.setAttribute("vehicalUpdt", vehicalUpdt);
				request.setAttribute("action","action");
	    		request.setAttribute("actype", "ASSET");
	    		request.setAttribute("ASSET","ASSET");
	    		list.add(updateAssetVO);
	    		request.setAttribute("list",list);
				 return mapping.getInputForward();
			}
			if(CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(engineFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(regNFlag).equalsIgnoreCase("Y")&&CommonFunction.checkNull(chasisFlag).equalsIgnoreCase("Y"))
			{
				vehicalUpdt="CHASIS_ENGINE_REGNO";
				request.setAttribute("vehicalUpdt", vehicalUpdt);
				request.setAttribute("action","action");
	    		request.setAttribute("actype", "ASSET");
	    		request.setAttribute("ASSET","ASSET");
	    		list.add(updateAssetVO);
	    		request.setAttribute("list",list);
				 return mapping.getInputForward();
			}
		}
		
		else
		{
			chesisNoCheck="1";
			enginNo="1";
			regNo="1";
			//vehicalUpdt="SAVE";
			//request.setAttribute("vehicalUpdt", vehicalUpdt);
		}
		}
	   if(CommonFunction.checkNull(checkRegNoCount).equalsIgnoreCase("0"))
		{
			boolean status = dao.updateAsset(updateAssetVO);
			//logger.info("## updateAsset Status==>> " + status);
			if (status) {
				if(statusFlag.equalsIgnoreCase("P"))
					sms = "S";
				else
					sms = "F";
				request.setAttribute("sms", sms);
				logger.info("Implementation class: " + dao.getClass());
				     ArrayList assetlist1 = dao.getUpdatedVehical(updateAssetVO.getLbxLoanId());
				         request.setAttribute("assetlist", assetlist1);
				 ArrayList list = dao.openEditVehical(updateAssetVO);
				 request.setAttribute("list", list);
				 if (!list.isEmpty()) {
						updateAssetVO = (UpdateAssetVO) list.get(0);
					
						 if(CommonFunction.checkNull(updateAssetVO.getInvoiceUpdateCheckBox()).equalsIgnoreCase("Y"))
						 {
							 request.setAttribute("invoiceCheckBox", "Y");
						 }
						 if(CommonFunction.checkNull(updateAssetVO.getRcUpdateCheckBox()).equalsIgnoreCase("Y"))
						 {
							request.setAttribute("rcCheckBox", "Y");
						 }
						 if(CommonFunction.checkNull(updateAssetVO.getInsuranceUpdateCheckBox()).equalsIgnoreCase("Y"))
						 {
							 request.setAttribute("insuranceCheckBox", "Y");
						 }
					}
				 
								
			} else {
				sms = "E";
				request.setAttribute("sms", sms);
				ArrayList<UpdateAssetVO> list = new ArrayList<UpdateAssetVO>();
				list.add(updateAssetVO);
				request.setAttribute("editVal", "editVal");
				request.setAttribute("list", list);
	
			}
		}
		else
		{
			sms = "DR";
			request.setAttribute("sms", sms);
			ArrayList<UpdateAssetVO> list = new ArrayList<UpdateAssetVO>();
			list.add(updateAssetVO);
			request.setAttribute("editVal", "editVal");
			request.setAttribute("list", list);
		}
		dao=null;
		updateAssetVO=null;
		form.reset(mapping, request);
		return mapping.getInputForward();

	}

	public ActionForward openNewUpdateAsset(ActionMapping mapping,ActionForm form, HttpServletRequest request,HttpServletResponse response) throws Exception {
		
		logger.info("In openNewUpdateAsset()::::::>>>>>");
		ServletContext context = getServlet().getServletContext();
		HttpSession session = request.getSession();
		boolean flag = false;
		String userId = null;
		String makerDate = null;
		String branchId = null;
		UserObject userobj = (UserObject) session.getAttribute("userobject");
		if (userobj != null) {
			userId = userobj.getUserId();
			makerDate=userobj.getBusinessdate();
			branchId = userobj.getBranchId();
		} else {
			logger.info("here in execute method of UpdateAssetBehindAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		// for check User session start
		String strFlag = "";
		if (sessionId != null) {
			strFlag = UserSessionCheck.checkSameUserSession(userobj, sessionId.toString(), "", request);
		}

		logger.info("strFlag .............. " + strFlag);
		if (!strFlag.equalsIgnoreCase("")) {
			if (strFlag.equalsIgnoreCase("sameUserSession")) {
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			} else if (strFlag.equalsIgnoreCase("BODCheck")) {
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		session.removeAttribute("userId");//For lov
		session.removeAttribute("branchId");//For lov
		session.removeAttribute("sessionAssetVehicalList");//For Author Screen
		session.removeAttribute("invoiceCheckBox");//For Check Box
		session.removeAttribute("rcCheckBox");//For Check Box
		session.removeAttribute("insuranceCheckBox");//For Check Box
		UpdateAssetVO updateAssetVO = new UpdateAssetVO();
		DynaValidatorForm UpdateVehicleDynaValidatorForm = (DynaValidatorForm) form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(updateAssetVO,UpdateVehicleDynaValidatorForm);
		updateAssetVO.setUserId(CommonFunction.checkNull(userId));
		updateAssetVO.setMakerDate(CommonFunction.checkNull(makerDate));
		
		String loanId=CommonFunction.checkNull(request.getParameter("loanId"));
		String assetId=CommonFunction.checkNull(request.getParameter("assetId"));
	
		updateAssetVO.setLbxLoanId(loanId);
		updateAssetVO.setAssetId(assetId);
		String statusFlag=CommonFunction.checkNull(request.getParameter("saveFlag"));
		updateAssetVO.setStatusFlag(statusFlag);
		
		
		ArrayList<UpdateAssetVO> list = new ArrayList<UpdateAssetVO>();
		list.add(updateAssetVO);
		request.setAttribute("list", list);
		session.setAttribute("userId", userId);//For lov
		session.setAttribute("branchId", branchId); // For lov
		request.setAttribute("newMode", "newMode");
		form.reset(mapping, request);
		loanId=null;
		assetId=null;
		return mapping.findForward("openNewUpdate");
	}

	public ActionForward deletePddAsset(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {

		logger.info("In UpdateAssetDispatchAction deletePddAsset().... ");
		HttpSession session = request.getSession();
		UserObject userobj = (UserObject) session.getAttribute("userobject");
		String userId = null;
		String makerDate = null;
		String branchId = null;
		if (userobj != null){
			userId = userobj.getUserId();
			makerDate=userobj.getBusinessdate();
			branchId = userobj.getBranchId();
		} else  
		{
			logger.info("here in deletePddAsset () of UpdateAssetDispatchAction action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		String sessionId = session.getAttribute("sessionID").toString();

		// String cond = request.getParameter("saveForward");
		// logger.info("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"+cond);

		ServletContext context = getServlet().getServletContext();
		String strFlag = "";
		if (sessionId != null) {
			strFlag = UserSessionCheck.checkSameUserSession(userobj, sessionId
					.toString(), "", request);
		}

		if (!strFlag.equalsIgnoreCase("")) {
			if (strFlag.equalsIgnoreCase("sameUserSession")) {
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			} else if (strFlag.equalsIgnoreCase("BODCheck")) {
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}

		String loanId = request.getParameter("loanId");
		String assetId = request.getParameter("assetId");

		logger.info("loanId : "	+ loanId + " assetId : " + assetId);
		
		LinkLoanDAO service = (LinkLoanDAO) DaoImplInstanceFactory.getDaoImplInstance(LinkLoanDAO.IDENTITY);
		 LinkLoanDAO dao = (LinkLoanDAO)DaoImplInstanceFactory.getDaoImplInstance("LLD");
		 UpdateAssetVO updateAssetVO = new UpdateAssetVO();
		
		      logger.info("Implementation class: " + service.getClass());
		     ArrayList assetlist = service.getUpdatedVehical(updateAssetVO.getLbxLoanId());
		      request.setAttribute("assetlist", assetlist);
		logger.info("Implementation class: " + service.getClass());

		boolean status = service.deletePddAsset(loanId,assetId);
		if (status) {
			request.setAttribute("sms", "DS");

		} else {
			request.setAttribute("sms", "DE");
		}

		logger.info("In deletePddAsset status:-" + status);
		//starts
		session.removeAttribute("userId");//For lov
		session.removeAttribute("branchId");//For lov
		session.removeAttribute("sessionAssetVehicalList");//For Author Screen
		session.removeAttribute("invoiceCheckBox");//For Check Box
		session.removeAttribute("rcCheckBox");//For Check Box
		session.removeAttribute("insuranceCheckBox");//For Check Box
		
	/*	DynaValidatorForm UpdateVehicleDynaValidatorForm = (DynaValidatorForm) form;
		org.apache.commons.beanutils.BeanUtils.copyProperties(updateAssetVO,UpdateVehicleDynaValidatorForm); */
		updateAssetVO.setUserId(CommonFunction.checkNull(userId));
		updateAssetVO.setMakerDate(CommonFunction.checkNull(makerDate));
		
		/*String loanId=CommonFunction.checkNull(request.getParameter("loanId"));
		String assetId=CommonFunction.checkNull(request.getParameter("assetId"));
	
		updateAssetVO.setLbxLoanId(loanId);
		updateAssetVO.setAssetId(assetId); 
		String statusFlag=CommonFunction.checkNull(request.getParameter("saveFlag")); */
		updateAssetVO.setStatusFlag("N");
		
		
		ArrayList<UpdateAssetVO> list = new ArrayList<UpdateAssetVO>();
		list.add(updateAssetVO);
		request.setAttribute("list", list);
		session.setAttribute("userId", userId);//For lov
		session.setAttribute("branchId", branchId); // For lov
		request.setAttribute("newMode", "newMode");
		form.reset(mapping, request);
		loanId=null;
		assetId=null;
		//ends
		return mapping.findForward("deletePdd");
	}

}