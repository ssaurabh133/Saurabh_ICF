/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.StringEscapeUtils;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.DynaActionForm;
import org.apache.struts.validator.DynaValidatorForm;

import com.cm.dao.LoanInitiationDAO;
import com.cm.vo.LoanInitAuthorVo;
import com.commonFunction.daoImplMYSQL.commonFunctionDaoImpl;
import com.connect.CommonFunction;
import com.connect.ConnectionDAO;
import com.connect.DaoImplInstanceFactory;
import com.connect.PrepStmtObject;
import com.connect.UploadDocument;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;
import com.communication.engn.daoImplMySql.SmsDAOImpl;
import com.cp.dao.CreditProcessingDAO;
import com.cp.vo.UnderwritingDocUploadVo;
//import com.sap.mw.jco.JCO.Connection;


import com.cm.actionform.ReportsForm;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.ResourceBundle;
import java.io.InputStream;

import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperExportManager;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;

import javax.servlet.ServletOutputStream;

import java.sql.Connection;
import java.util.ResourceBundle;

import com.connect.ConnectionReportDumpsDAO;

import org.apache.commons.io.FileUtils;

import java.io.File;

import com.cp.dao.CreditProcessingDAO;

/** 
 * MyEclipse Struts
 * Creation date: 06-24-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class ApproveLoanAction extends Action {
	private static final Logger logger = Logger.getLogger(ApproveLoanAction.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		 logger.info("In ApproveLoanAction for submitting approval status");
		 
		    HttpSession session =  request.getSession();
			boolean flag=false;
			UserObject userobj=(UserObject)session.getAttribute("userobject");
			String userId="";
			String bDate="";
			String p_business_date="";
			String userName="";
			String p_company_name="";
			 int compId=0;
			if(userobj!=null)
			{
					userId=userobj.getUserId();
					bDate=userobj.getBusinessdate();
					compId= userobj.getCompanyId();
					p_business_date=userobj.getBusinessdate();
					p_company_name=userobj.getConpanyName()+" ";
					userName = userobj.getUserName()+" ";
			}else{
				logger.info("here execute method of ApproveLoanAction action the session is out----------------");
				return mapping.findForward("sessionOut");
			}
			Object sessionId = session.getAttribute("sessionID");
			//for check User session start
			ServletContext context = getServlet().getServletContext();
			String strFlag="";	
			if(sessionId!=null)
			{
				strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
			}
			
			logger.info("strFlag .............. "+strFlag);
			if(!strFlag.equalsIgnoreCase(""))
			{
				if(strFlag.equalsIgnoreCase("sameUserSession"))
				{
					context.removeAttribute("msg");
					context.removeAttribute("msg1");
				}
				else if(strFlag.equalsIgnoreCase("BODCheck"))
				{
					context.setAttribute("msg", "B");
				}
				return mapping.findForward("logout");
			}
			//code added by neeraj
			String source="NE";
			String functionId=(String)session.getAttribute("functionId");
			int funid=Integer.parseInt(functionId);		
			if(funid==4000122 || funid==4000123)
			{
				source="ED";
				request.setAttribute("EDIT","EDIT");
			}
			//neeraj space end
			
		    String loanId = "";
			if (session.getAttribute("loanId") != null) 
				loanId = session.getAttribute("loanId").toString();
			else if (session.getAttribute("maxIdInCM") != null) 
				loanId = session.getAttribute("maxIdInCM").toString();
			
			logger.info("In ApproveLoanAction loan id: " + loanId);
	
			java.util.ResourceBundle resource = java.util.ResourceBundle.getBundle("com.yourcompany.struts.ApplicationResources");
			String dbType=resource.getString("lbl.dbType");
	
			DynaValidatorForm ApproveLoanDynaActionForm=(DynaValidatorForm)form;
			LoanInitAuthorVo vo =new LoanInitAuthorVo();
			org.apache.commons.beanutils.BeanUtils.copyProperties(vo, ApproveLoanDynaActionForm);
			vo.setLoanId(loanId);
			vo.setUserId(userId);
			vo.setCompanyId(""+compId);
			vo.setBussinessDate(bDate);
			LoanInitiationDAO service=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
			logger.info("Implementation class: "+service.getClass()); 
			String message="";
			String utilAmount="";
			String status="";
			boolean docCount=true;
			String countSms="";
		 
			if(!CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
			{
				String checkUtilizedAm = "";
				int count = Integer.parseInt(CommonFunction.checkNull(ConnectionDAO.singleReturn(" select count(L.LOAN_ID) from cr_loan_dtl L, "
							+ "	cr_deal_facility_Dtl DL where L.LOAN_DEAL_LOAN_ID=DL.DEAL_LOAN_ID AND L.LOAN_DEAL_ID=DL.DEAL_ID "
							+ " AND L.LOAN_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim()+" "
									+ " AND DL.DEAL_SANCTION_AMOUNT>ifnull(DL.DEAL_UTILIZED_AMOUNT, 0) ")));
				if(count>0){
					checkUtilizedAm="select L.LOAN_ID from cr_loan_dtl L,cr_deal_facility_Dtl DL where L.LOAN_DEAL_LOAN_ID=DL.DEAL_LOAN_ID AND L.LOAN_DEAL_ID=DL.DEAL_ID "+
							" AND L.LOAN_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim()+" AND DL.DEAL_SANCTION_AMOUNT>ifnull(DL.DEAL_UTILIZED_AMOUNT, 0)";
				}else{
					checkUtilizedAm="select L.LOAN_ID from cr_loan_dtl L,cr_deal_loan_Dtl DL where L.LOAN_DEAL_LOAN_ID=DL.DEAL_LOAN_ID AND L.LOAN_DEAL_ID=DL.DEAL_ID "+
							" AND L.LOAN_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim()+" AND DL.DEAL_SANCTION_AMOUNT>ifnull(DL.DEAL_UTILIZED_AMOUNT, 0)";
				}
				
				if(CommonFunction.checkNull(dbType).equalsIgnoreCase("MSSQL"))
				{
					 checkUtilizedAm = "";
					 count = Integer.parseInt(CommonFunction.checkNull(ConnectionDAO.singleReturn(" select count(L.LOAN_ID) from cr_loan_dtl L, "
								+ "	cr_deal_facility_Dtl DL where L.LOAN_DEAL_LOAN_ID=DL.DEAL_LOAN_ID AND L.LOAN_DEAL_ID=DL.DEAL_ID "
								+ " AND L.LOAN_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim()+" "
										+ " AND DL.DEAL_SANCTION_AMOUNT>ifnull(DL.DEAL_UTILIZED_AMOUNT, 0) ")));
					if(count>0){
						checkUtilizedAm="select L.LOAN_ID from cr_loan_dtl L,cr_deal_facility_Dtl DL where L.LOAN_DEAL_LOAN_ID=DL.DEAL_LOAN_ID AND L.LOAN_DEAL_ID=DL.DEAL_ID "+
								" AND L.LOAN_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim()+" AND DL.DEAL_SANCTION_AMOUNT>ifnull(DL.DEAL_UTILIZED_AMOUNT, 0)";
					}else{
						checkUtilizedAm="select L.LOAN_ID from cr_loan_dtl L,cr_deal_loan_Dtl DL where L.LOAN_DEAL_LOAN_ID=DL.DEAL_LOAN_ID AND L.LOAN_DEAL_ID=DL.DEAL_ID "+
								" AND L.LOAN_ID="+StringEscapeUtils.escapeSql(CommonFunction.checkNull(loanId)).trim()+" AND DL.DEAL_SANCTION_AMOUNT>ifnull(DL.DEAL_UTILIZED_AMOUNT, 0)";
					}
					
				}
				utilAmount=ConnectionDAO.singleReturn(checkUtilizedAm);
				logger.info("utilAmount: "+utilAmount+" Query: "+checkUtilizedAm);
			}
			if(CommonFunction.checkNull(utilAmount).equalsIgnoreCase("") && vo.getDecision().equalsIgnoreCase("A") && !CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
			{
				message="UT";
			}
			else
			{
				logger.info("for author status: ");
				status=service.insertLoanAuthor(vo,source);
			}
			logger.info("In ApproveLoanAction status: "+status+" and vo.getDecision() "+vo.getDecision());
			if(vo.getDecision().equalsIgnoreCase("A") && CommonFunction.checkNull(status).equalsIgnoreCase("S"))
			{
				message="S" ;
				//Hina Changes Starts for SMS & EMAIL 
				String qur1="SELECT count(1) FROM CR_LOAN_DTL where loan_id='"+vo.getLoanId()+"' and loan_product_category='SME'";
				int cnt1 = Integer.parseInt(ConnectionDAO.singleReturn(qur1));
				if(cnt1!=0)
				{
				String EventName="ON_SANCTION";
				boolean communicationStatus=false;
				String query="Select count(1) from comm_event_list_m where event_Name='"+EventName+"' and rec_status='A' ";
				int count=Integer.parseInt(ConnectionDAO.singleReturn(query));
				if(count!=0)
				{
				 communicationStatus=new SmsDAOImpl().getEmailDetails(vo.getLoanId(),bDate,EventName);
				}
				else
				{
					logger.info("SMS & EMAIL Event not Active on ON_SANCTION ");
				}
				logger.info("communicationStatus:::"+communicationStatus);
				}
				//Hina Changes end for SMS & EMAIL 
				if(!CommonFunction.checkNull(source).trim().equalsIgnoreCase("ED"))
				{
					LoanInitiationDAO dao=(LoanInitiationDAO)DaoImplInstanceFactory.getDaoImplInstance(LoanInitiationDAO.IDENTITY);
					logger.info("Implementation class: "+dao.getClass()); 
					docCount=dao.getCountForDoc(loanId);
					if(!docCount)
					{
						logger.info("sachin Status of docCount:"+docCount);
						countSms="NA";
						request.setAttribute("countSms", countSms);
					}
				}
		 }
		 else if(vo.getDecision().equalsIgnoreCase("X") && CommonFunction.checkNull(status).equalsIgnoreCase("S"))
		 {
			 message="X" ;
		 }
		 else if(vo.getDecision().equalsIgnoreCase("P") && CommonFunction.checkNull(status).equalsIgnoreCase("S"))
		 {
			 message="P" ;
		 }
		 else  if(!CommonFunction.checkNull(status).equalsIgnoreCase("") && !CommonFunction.checkNull(status).equalsIgnoreCase("S"))
		 {
			 message=status ;
		 }
		 request.setAttribute("message",  message);
			logger.info("okkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk ");
		 //added by ranjeet singh
		 
			
			String FacScheme=ConnectionDAO.singleReturn("select group_concat(LOAN_SCHEME) from cr_loan_dtl where LOAN_ID='"+vo.getLoanId()+"' ");
			String CoLndngcount=ConnectionDAO.singleReturn("select count(1) from generic_master where GENERIC_KEY='COLENDINGSCHEME' and value in('"+FacScheme+"') and rec_status='A' ");
			
  
			 if(vo.getDecision().equalsIgnoreCase("A") && CommonFunction.checkNull(status).equalsIgnoreCase("S") && CoLndngcount.equalsIgnoreCase("0"))
			{
			DynaActionForm daf=(DynaActionForm)form;
			ResourceBundle resources = ResourceBundle.getBundle("com.yourcompany.struts.utill");
			String dateFormat=resources.getString("lbl.dateInDao");
			String reportName=("SME_Sanction_Letter_Report_For_CM");
			String p_company_logo=getServlet().getServletContext().getRealPath("/")+"reports/logo.bmp"; 
			String p_lead_id="";
			String p_loan_id=loanId;
			String deal_id="";
			String p_status="";
			String user_id=userId;	 
			String reportPath="/reports/";
			String sub_reports_location=getServlet().getServletContext().getRealPath("/")+"reports\\"; 
			String SUBREPORT_DIR=getServlet().getServletContext().getRealPath("/")+"reports\\";
			String customer_detail_location=getServlet().getServletContext().getRealPath("/")+"reports\\"; 
			String p_imageCheckbox=getServlet().getServletContext().getRealPath("/")+"reports/imageCheckbox.bmp";
			String p_app_path= request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort() + request.getContextPath(); 
			reportPath=reportPath+"MYSQLREPORTS/";
			sub_reports_location=sub_reports_location+"MYSQLREPORTS\\";
			SUBREPORT_DIR=SUBREPORT_DIR+"MYSQLREPORTS\\";
			customer_detail_location=customer_detail_location+"MYSQLREPORTS\\";
			Connection connectDatabase = ConnectionReportDumpsDAO.getConnection();		
			Map<Object,Object> hashMap = new HashMap<Object,Object>();
			String p_printed_date =p_business_date;
				hashMap.put("p_loan_id",p_loan_id);
		    	hashMap.put("p_company_logo",p_company_logo);
				hashMap.put("p_company_name",p_company_name);
				hashMap.put("p_business_date",p_business_date);
				hashMap.put("p_printed_by", userName); 
				hashMap.put("p_printed_date", p_printed_date); 
				hashMap.put("sub_reports_location", sub_reports_location);
				hashMap.put("SUBREPORT_DIR", SUBREPORT_DIR);
				hashMap.put("p_date_format", dateFormat);
				hashMap.put("p_user_id",userId );
				hashMap.put("p_date",p_printed_date );	
				hashMap.put("user_id",userId );
				hashMap.put("customer_detail_location",customer_detail_location );
				hashMap.put("p_app_path",p_app_path );		
				hashMap.put("p_imageCheckbox",p_imageCheckbox);
				hashMap.put("IS_IGNORE_PAGINATION",false);
				
				InputStream reportStream = getServlet().getServletConfig().getServletContext().getResourceAsStream(reportPath+reportName+".jasper");
				JasperPrint jasperPrint = null;
				try
				{
					jasperPrint = JasperFillManager.fillReport(reportStream, hashMap,connectDatabase);
					methodForPDF(reportName,hashMap,connectDatabase,response, jasperPrint,request,loanId);
					
						
						        	 UnderwritingDocUploadVo uwDocVo = new UnderwritingDocUploadVo();
						        	 uwDocVo.setFileName(request.getAttribute("fileName").toString());
										uwDocVo.setDocPath(request.getAttribute("filePath").toString());
										uwDocVo.setDealId(loanId);
										uwDocVo.setUserName(userId);
										boolean status2 = false;
										CreditProcessingDAO service1=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
								        logger.info("Implementation class: "+service1.getClass());
								        logger.info("Document Uploaded Successfully");
								        ArrayList qryList1 = new ArrayList();
								        PrepStmtObject insertPrepStmtObject = new PrepStmtObject();
								        
								        logger.info("In insert part of uploadUnderwritingData....");
								        StringBuffer bufInsSql1 = new StringBuffer();
								        bufInsSql1.append("insert into cr_uploaded_documents(txn_type,txn_id,document_desc,file_name,document_path,uploaded_by,uploaded_date,DOCUMENT_TYPE)");
								        bufInsSql1.append(" values ( ");
								        bufInsSql1.append(" ?,");
								        bufInsSql1.append(" ?,");
								        bufInsSql1.append(" ?,");
								        bufInsSql1.append(" ?,");
								        bufInsSql1.append(" ?,");
								        bufInsSql1.append(" ?,");
								        bufInsSql1.append("now(),");
								        bufInsSql1.append(" ?)");

								        insertPrepStmtObject.addString("LIA".trim());

								        if (CommonFunction.checkNull(uwDocVo.getDealId()).trim().equalsIgnoreCase(""))
								          insertPrepStmtObject.addNull();
								        else
								          insertPrepStmtObject.addString(uwDocVo.getDealId().trim());
								        if (CommonFunction.checkNull(uwDocVo.getDocDescription()).trim().equalsIgnoreCase(""))
								          insertPrepStmtObject.addNull();
								        else
								          insertPrepStmtObject.addString(uwDocVo.getDocDescription().trim());
								        if (CommonFunction.checkNull(uwDocVo.getFileName()).trim().equalsIgnoreCase(""))
								          insertPrepStmtObject.addNull();
								        else
								          insertPrepStmtObject.addString(CommonFunction.checkNull(uwDocVo.getFileName()).trim());
								        if (CommonFunction.checkNull(uwDocVo.getDocPath()).trim().equalsIgnoreCase(""))
								          insertPrepStmtObject.addNull();
								        else
								          insertPrepStmtObject.addString(uwDocVo.getDocPath().trim());
								        if (CommonFunction.checkNull(uwDocVo.getUserName()).trim().equalsIgnoreCase(""))
								          insertPrepStmtObject.addNull();
								        else
								          insertPrepStmtObject.addString(uwDocVo.getUserName().trim());
								        insertPrepStmtObject.setSql(bufInsSql1.toString());

								        if (CommonFunction.checkNull(uwDocVo.getDocTypeId()).trim().equalsIgnoreCase(""))
								          insertPrepStmtObject.addNull();
								        else
								          insertPrepStmtObject.addString(uwDocVo.getDocTypeId().trim());
								        insertPrepStmtObject.setSql(bufInsSql1.toString());

								        logger.info(new StringBuilder().append("IN uploadSanctionLetterData() insert query1 ### ").append(insertPrepStmtObject.printQuery()).toString());
								        qryList1.add(insertPrepStmtObject);
								        status2 = ConnectionDAO.sqlInsUpdDeletePrepStmt(qryList1);
								        logger.info(new StringBuilder().append("In uploadSanctionLetterData.................query status..... ").append(status).toString());
								        bufInsSql1 = null;
								             
						    //2nd end
						    
						    
							
							        		}		
						    
				//}
				catch(Exception e)
				{
					e.printStackTrace();
				}
				finally
				{
					strFlag=null;
					p_company_name=null;
					userName=null;
					p_business_date=null;
					userId=null;
					dateFormat=null;
					dbType=null;
					
					p_company_logo=null;
//					p_deal_id=null;
					p_lead_id=null;
					deal_id=null;
					p_status=null;
					user_id=null;
					reportPath=null;
					sub_reports_location=null;
					SUBREPORT_DIR=null;
					customer_detail_location=null;
					p_app_path=null;
					p_printed_date=null;
					daf.reset(mapping, request);
					ConnectionReportDumpsDAO.closeConnection(connectDatabase, null);
					hashMap.clear();
					
				}
			
				//return null;
				}
			
				  //end by ranjeet singh
 
		 
		
		 
		return mapping.findForward("success");
	}
	
	
	public void methodForPDF(String reportName,Map<Object,Object> hashMap,Connection connectDatabase,HttpServletResponse response,JasperPrint jasperPrint, HttpServletRequest request,String loanId)throws Exception
	{
		JasperExportManager.exportReportToPdfFile(jasperPrint,request.getRealPath("/reports") + "/" +reportName+".pdf");
		File f=new File(request.getRealPath("/reports") + "/" +reportName+".pdf");
		FileInputStream fin = new FileInputStream(f);
		
		
		
			    //2nd code
			    
			    String file = f.toString();
			    logger.info("FILE:" + file);
			    logger.info("myFile:" + f);		
				boolean status1=false;
				String fileName="";
				String filePath="";
				String message1="";
					String query1 = "SELECT PARAMETER_VALUE FROM PARAMETER_MST WHERE PARAMETER_KEY='SANCTION_LETTER_UPLOAD'";
					String rpt= ConnectionDAO.singleReturn(query1);
					File homeDir = new File(rpt);
					boolean isHomeDir = homeDir.isDirectory();
					if (isHomeDir) {
					      logger.info("the name you have entered is a directory  : "  +homeDir);
					      logger.info("the path is "  + homeDir.getAbsolutePath());
						}
					else
					{
						boolean success = (new File(rpt)).mkdir();
						logger.info("Directory created successfully with name  : "  +homeDir); 
						logger.info("the path is "  + homeDir.getAbsolutePath());
					}
					logger.info("the name you have entered is a file : "  +f);
					File directory = null;
					String customerId="";
						directory=new File(rpt+"/"+loanId);
					boolean isDirectory = directory.isDirectory();
					if (isDirectory) {
					      logger.info("the name you have entered is a directory  : "  +directory);
					      logger.info("the path is "  + directory.getAbsolutePath());
						}
					else
					{
						{
							boolean success1 = (new File(rpt+"/"+loanId)).mkdir();
						}
						logger.info("Directory created successfully with name  : "  +rpt+"/"+loanId); 
						logger.info("the path is "  + directory.getAbsolutePath());	
					}
			    //Get the file name
					fileName = f.getName();
			   
			    //Get the servers upload directory real path name
			        filePath = directory.getAbsolutePath();
			       // String filePath1=filePath+"/";
			        String filePath1=filePath;
			    /* Save file on the server */
			        if(!fileName.equals("")){  
			        	logger.info("Server path:" +filePath1);
			        	//Create file
			        	File fileToCreate1 = new File(filePath1);
			        	 FileUtils.copyFileToDirectory(f, fileToCreate1);
			        	// FileUtils.copyFile(f, fileToCreate1);
			        	 request.setAttribute("fileName", fileName);
			        	 request.setAttribute("filePath", filePath1);	
		}
		
		
		
		
		
		
	}
	}
