/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.cm.actions;

import java.util.ArrayList;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.log4j.Logger;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import com.connect.CommonFunction;
import com.connect.DaoImplInstanceFactory;
import com.cp.dao.CreditProcessingDAO;
import com.login.dao.UserSessionCheck;
import com.login.roleManager.UserObject;

/** 
 * MyEclipse Struts
 * Creation date: 05-23-2011
 * 
 * XDoclet definition:
 * @struts.action validate="true"
 */
public class NotePadPageInCMBehind extends Action {
	private static final Logger logger = Logger.getLogger(NotePadPageInCMBehind.class.getName());
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)throws Exception {
		
		HttpSession session = request.getSession();
		//boolean flag=false;
		UserObject userobj=(UserObject)session.getAttribute("userobject");
		if(userobj==null){
			logger.info("here in execute method of NotePadPageInCMBehind action the session is out----------------");
			return mapping.findForward("sessionOut");
		}
		Object sessionId = session.getAttribute("sessionID");
		//for check User session start
		ServletContext context = getServlet().getServletContext();
		String strFlag=null;	
		
		if(sessionId!=null)
		{
			strFlag = UserSessionCheck.checkSameUserSession(userobj,sessionId.toString(),"",request);
		}
		
		logger.info("strFlag .............. "+strFlag);
		if(!strFlag.equalsIgnoreCase(""))
		{
			if(strFlag.equalsIgnoreCase("sameUserSession"))
			{
				context.removeAttribute("msg");
				context.removeAttribute("msg1");
			}
			else if(strFlag.equalsIgnoreCase("BODCheck"))
			{
				context.setAttribute("msg", "B");
			}
			return mapping.findForward("logout");
		}
		//code added by neeraj 
		String functionId=(String)session.getAttribute("functionId");
		if(CommonFunction.checkNull(functionId).trim().equalsIgnoreCase(""))
			functionId="0";
		int id=Integer.parseInt(functionId);
		if(id==4000122 || id==4000123)
		{
			session.setAttribute("cmAuthor","cmAuthor");
			session.setAttribute("viewLoan","viewLoan");
		}
		if(id==4000106 || id==4000122)
		{
			session.removeAttribute("underWriterViewData");
			session.removeAttribute("leadNo");
			session.removeAttribute("dealHeader");
			session.removeAttribute("dealId");
			session.removeAttribute("leadInfo");
			session.removeAttribute("viewDeal");
			session.removeAttribute("dealCatList");
			session.removeAttribute("sourceTypeList");
			session.removeAttribute("checkLoginUserLevel");
			session.removeAttribute("creditApprovalList");
			session.removeAttribute("leadMValue");
			session.removeAttribute("bsflag");
	
		}
		//neeraj space end 
		
		if(session.getAttribute("cmAuthor")!=null && !session.getAttribute("cmAuthor").equals(""))
		{
			request.setAttribute("viewDeal", "cmAuthor");
		}
		
		 String loanId = null;
		 
			if(session.getAttribute("loanId")!=null)
			{
				
				loanId=session.getAttribute("loanId").toString();
			}
			else if(session.getAttribute("maxIdInCM")!=null)
			{
				loanId=session.getAttribute("maxIdInCM").toString();
			}
			
			logger.info("In DocsCollectionInCMBehindAction loan id: " +loanId);
		if((loanId!=null && !loanId.equalsIgnoreCase("")))
		{
			String typ = CommonFunction.checkNull(request.getParameter("typ"));
			CreditProcessingDAO service=(CreditProcessingDAO)DaoImplInstanceFactory.getDaoImplInstance(CreditProcessingDAO.IDENTITY);
	        logger.info("Implementation class: "+service.getClass()); 
			//CreditProcessingDAO service = new CreditProcessingDAOImpl();
			ArrayList noteCode = service.getNoteCode();
			request.setAttribute("noteCode", noteCode);
			request.setAttribute("loanInitNote", "CM");
			ArrayList list = service.getNotepadData(loanId,"LIM");
			ArrayList listInloan = service.getNotepadDataInLoanInit(loanId,"DC");
			ArrayList leadList = service.getLeadNotepadData(loanId,"LT");
			request.setAttribute("leadList", leadList);
			request.setAttribute("listInloan", listInloan);
			request.setAttribute("list", list);
			request.setAttribute("typ",typ);
			return mapping.findForward("success");
		}
		else
		{
			 request.setAttribute("back", "back");
			 return mapping.findForward("backSuccess");
		}
	}
}